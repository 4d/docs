#!/usr/bin/env node

const preproc = require("./lib/preprocessor")
const args = require('yargs').argv;
const log = require('./lib/log')
var path = require('path')

const fs = require('fs')
function getDirectories(path) {
    return fs.readdirSync(path).filter(function (file) {
      return fs.statSync(path+'/'+file).isDirectory();
    });
  }

function write(inPath, newContent) {
    fs.promises.mkdir(path.dirname(inPath), {recursive: true}).then(x => fs.promises.writeFile(inPath, newContent))
}

if(args.path) {
    console.time("Preprocessing")
    let startPath = args.path
    let lastChar = startPath[startPath.length - 1]
    let output = args.output
    let config = args.config != undefined ? args.config : "";

    if(lastChar == '*')
    {
        startPath = startPath.substring(0, startPath.length - 1)
        const folders = getDirectories(startPath)
        folders.forEach(element => {
            var preprocessor = new preproc.Preprocessing(startPath + '/' + element + '/', output + '/' + element + '/', config)
            if(output == undefined) {
                preprocessor.collect()
            } else {
                preprocessor.run()
            }

            if(args.syntax != undefined)
            {
                let c = preprocessor._refManager.formatToJSON('.', '#')
                var dir = typeof(args.syntax) === "string" ? args.syntax.replace('*', element): ""
                write(dir + "syntax" + element.toUpperCase() + ".json", JSON.stringify(c, null, "\t"))
            }
        });
    }
    else
    {
        var preprocessor = new preproc.Preprocessing(args.path, output, config)

        if(output == undefined) {
            preprocessor.collect()
        } else {
            preprocessor.run()
        }

        if(args.syntax)
        {
            let c = preprocessor._refManager.formatToJSON('.', '#')
            var dir = typeof(args.syntax) === "string" ? args.syntax: ""
            write(dir + "syntaxEN.json", JSON.stringify(c, null, "\t"), 'utf8')
        }
    }
    console.timeEnd("Preprocessing")
}



exports.Preprocessing = preproc.Preprocessing