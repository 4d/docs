var {PreprocessorInstruction, TYPE} = require("./preprocessorInstruction")
const log = require("./log.js")
const { array } = require("yargs")

class PreprocessorRef extends PreprocessorInstruction {

    constructor() {
        super()
        this.content = ""
        this._id = ""
        this._filePath = ""
    }

    getType() {
        return TYPE.REF
    }

    set ID(inID) {
        this._id = inID
    }

    get ID() {
        return this._id
    }

    set filePath(inFilePath) {
        this._filePath = inFilePath
    }

    get filePath() {
        return this._filePath
    }

    resolve(inContent) {
        this.content = inContent.substr(this._start, this._end - this._start)
    }
}

class REFManager {
    constructor() {
        this._ref = new Map()
    }
    push(inRef) {
        if(!this._ref.has(inRef.ID)) {
            this._ref.set(inRef.ID, inRef)
        }
        else {
            log.show(log.MESSAGE.WARNING, "The reference \'" + inRef.ID + "\' located in " + inRef.filePath +  " is already used in " + this._ref.get(inRef.ID).filePath)
        }
    }

    getContentFromID(inID) {
        if(this._ref.has(inID)) {
            return {content:this._ref.get(inID).content, error:true}
        }
        return {content:"",error:false};
    }

    _fillAlias(withDelimiter, inHaveCharacter) {
        let alias = new Map()
        for (let entry of this._ref.entries()) {
            let key = entry[0]
            let value = entry[1].content;
            if(key[0] !== inHaveCharacter) continue
            key = key.substring(1)

            let splitID = key.split(withDelimiter)
            if(splitID.length > 1) {
                if(splitID[1] == "_alias_") {
                    alias.set(splitID[0], value)
                }
            }
        }

        return alias;
    }

    formatToJSON(withDelimiter, inHaveCharacter) {

        let alias = this._fillAlias(withDelimiter, inHaveCharacter)

        function getRealKey(inKey) {
            if(alias.has(inKey)) {
                return alias.get(inKey)
            }
            return inKey
        }

        function jsonEscape(str)  {
            str = str.replace(/(<!--)(.*?)(-->)/g, "")
                     .replace(/\r\n/g, "\n")
                     .replace(/\r/g, "\n")
                     .replace(/\\n/g, "\\n")
                     .replace(/\\'/g, "\\'")
                     .replace(/\\"/g, '\\"')
                     .replace(/\\&/g, "\\&")
                     .replace(/\\r/g, "\\r")
                     .replace(/\\t/g, "\\t")
                     .replace(/\\b/g, "\\b")
                     .replace(/(\[(.*?)\])\(.*?\)/g, '$2')
                     .replace(/\\f/g, "\\f");
            if(str[0] == '\n') str = str.substr(1)
            if(str.slice(-1) == '\n') str = str.slice(0, -1)
            return str
        }

        function isIDValid(inIDs) {
            for(let i = 0; i < inIDs.length; ++i) {
                if(inIDs[i] === "_alias_") {
                    return false
                }
            }
            return true
        }

        let json = {}
        
        for (let entry of this._ref.entries()) {
            let key = entry[0],
                value = entry[1].content;
            if(key[0] !== inHaveCharacter) continue
            key = key.substring(1)

            let splitID = key.split(withDelimiter)

            if(!isIDValid(splitID)) continue

            let currentJSON = json;
            let lastID = ""
            if(splitID.length > 1) {
                splitID[0] = getRealKey(splitID[0])
            }
            
            for (let i = 0; i < splitID.length - 1; i++) {

                if(!(splitID[i] in currentJSON)) {
                    currentJSON[splitID[i]] = {}
                }
                currentJSON = currentJSON[splitID[i]]
            }
            lastID = splitID[splitID.length - 1]
            
            let content = jsonEscape(value.trim())
            
            if(content[0] == '|') {//It's an array
                
                let lines = content.split('\n')
                
                for (let i = 0; i < lines.length; i++) {
                    let columns = lines[i].split('|').filter(function(v, index, array) {
                        return !((index == 0 || index == array.length - 1) && v =='')
                    })

                    if( i == 0) {//|title1|title2|
                        currentJSON[lastID] = []
                    }
                    else if(i == 1) {}// |----|----|
                    else {//Content
                        let obj = new Array(columns.length)
                        for (let j = 0; j < columns.length; j++) {
                            obj[j] = columns[j].trim()
                        }
                        currentJSON[lastID].push(obj)
                    }
                }
            }
            else {
                try {
                    currentJSON[lastID] = content
                }
                catch(e)
                {}
            }
        }
        return json
    }
}

exports.PreprocessorRef = PreprocessorRef
exports.REFManager = REFManager