{
	"4D": {
		"Blob": {
			"new()": {
				"Syntax": "**4D.Blob.new()** : 4D.Blob<br/>**4D.Blob.new**( *blobScal* : Blob ) : 4D.Blob<br/>**4D.Blob.new**( *blobObj* : 4D.Blob ) : 4D.Blob",
				"Params": [
					[
						"blob",
						"Blob or 4D.Blob",
						"->",
						"コピーする BLOB"
					],
					[
						"戻り値",
						"4D.Blob",
						"<-",
						"新規 4D.Blob"
					]
				],
				"Summary": "は新規の `4D.Blob` オブジェクトを作成し、(任意) 別の BLOBデータ (スカラーBLOB または `4D.Blob`) のコピーを格納します。"
			}
		},
		"MailAttachment": {
			"new()": {
				"Syntax": "**4D.MailAttachment.new**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br>**4D.MailAttachment.new**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br>**4D.MailAttachment.new**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br>**4D.MailAttachment.new**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
				"Params": [
					[
						"file",
						"4D.File",
						"->",
						"添付ファイル"
					],
					[
						"zipFile",
						"4D.ZipFile",
						"->",
						"添付 Zipファイル"
					],
					[
						"blob",
						"4D.Blob",
						"->",
						"添付を格納した BLOB"
					],
					[
						"path",
						"テキスト",
						"->",
						"添付ファイルのパス"
					],
					[
						"name",
						"テキスト",
						"->",
						"メールクライアントが添付を指定するのに使用する名前 + 拡張子"
					],
					[
						"cid",
						"テキスト",
						"->",
						"添付の ID (HTMLメッセージのみ)、あるいは cid が不要な場合は \"\" (空の文字列)"
					],
					[
						"type",
						"テキスト",
						"->",
						"content-type ヘッダーの値"
					],
					[
						"disposition",
						"テキスト",
						"->",
						"content-disposition ヘッダーの値: \"inline\" あるいは \"attachment\""
					],
					[
						"戻り値",
						"4D.MailAttachment",
						"<-",
						"Attachment オブジェクト"
					]
				],
				"Summary": "`4D.MailAttachment` 型の新規オブジェクト作成して返します"
			}
		},
		"CryptoKey": {
			"new()": {
				"Syntax": "**4D.CryptoKey.new**( *settings* : Object ) : 4D.CryptoKey",
				"Params": [
					[
						"settings",
						"オブジェクト",
						"->",
						"キーペアを生成・ロードするための設定"
					],
					[
						"result",
						"4D.CryptoKey",
						"<-",
						"暗号化キーペアをカプセル化したオブジェクト"
					]
				],
				"Summary": "暗号化キーペアをカプセル化する `4D.CryptoKey` オブジェクトを新規作成します"
			}
		},
		"File": {
			"new()": {
				"Syntax": "**4D.File.new** ( *path* : Text { ; *pathType* : Integer }{ ; *\\** } ) : 4D.File<br>**4D.File.new** ( *fileConstant* : Integer { ; *\\** } ) : 4D.File",
				"Summary": "`4D.File` 型の新しいオブジェクトを作成して返します"
			}
		},
		"Folder": {
			"new()": {
				"Syntax": "**4D.Folder.new** ( *path* : Text { ; *pathType* : Integer }{ ; *\\** } ) : 4D.Folder<br>**4D.Folder.new** ( *folderConstant* : Integer { ; *\\** } ) : 4D.Folder",
				"Summary": "`4D.Folder` 型の新しいオブジェクトを作成して返します"
			}
		},
		"IMAPTransporter": {
			"new()": {
				"Syntax": "**4D.IMAPTransporter.new**( *server* : Object ) : 4D.IMAPTransporter",
				"Params": [
					[
						"server",
						"オブジェクト",
						"->",
						"メールサーバー情報"
					],
					[
						"戻り値",
						"4D.IMAPTransporter",
						"<-",
						"IMAP transporter オブジェクト"
					]
				],
				"Summary": "新規の `4D.IMAPTransporter`型オブジェクトを作成して返します"
			}
		},
		"POP3Transporter": {
			"new()": {
				"Syntax": "**4D.POP3Transporter.new**( *server* : Object ) : 4D.POP3Transporter",
				"Params": [
					[
						"server",
						"オブジェクト",
						"->",
						"メールサーバー情報"
					],
					[
						"戻り値",
						"4D.POP3Transporter",
						"<-",
						"POP3 transporter オブジェクト"
					]
				],
				"Summary": "新規の `4D.POP3Transporter`型オブジェクトを作成して返します"
			}
		},
		"SMTPTransporter": {
			"new()": {
				"Syntax": "**4D.SMTPTransporter.new**( *server* : Object ) : 4D.SMTPTransporter",
				"Params": [
					[
						"server",
						"オブジェクト",
						"->",
						"メールサーバー情報"
					],
					[
						"戻り値",
						"4D.SMTPTransporter",
						"<-",
						"SMTP transporter オブジェクト"
					]
				],
				"Summary": "新規の `4D.SMTPTransporter`型オブジェクトを作成して返します"
			}
		}
	},
	"Blob": {
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "`4D.Blob` のサイズを返します (バイト単位)。"
		},
		"slice()": {
			"Syntax": "**.slice()** : 4D.Blob<br/>**.slice**( *start* : Real ) : 4D.Blob<br/>**.slice**( *start* : Real; *end* : Real ) : 4D.Blob",
			"Params": [
				[
					"start",
					"実数",
					"->",
					"新しい `4D.Blob` に含める最初のバイトのインデックス"
				],
				[
					"end",
					"実数",
					"->",
					"新しい `4D.Blob` に含めない最初のバイトのインデックス"
				],
				[
					"戻り値",
					"4D.Blob",
					"<-",
					"新規 `4D.Blob`"
				]
			],
			"Summary": "呼び出し対象である BLOB のデータの一部を参照する新規の `4D.Blob` を作成して返します。 元の BLOB は変更されません。"
		}
	},
	"_command_": {
		"Formula": {
			"Syntax": "**Formula** ( *formulaExp* : Expression ) : 4D.Function",
			"Params": [
				[
					"formulaExp",
					"式",
					"->",
					"オブジェクトとして返されるフォーミュラ"
				],
				[
					"戻り値",
					"4D.Function",
					"<-",
					"フォーミュラを格納しているネイティブな Function オブジェクト"
				]
			],
			"Summary": "*formulaExp* の式に基づいた `4D Function` オブジェクトを作成します"
		},
		"Formula from string": {
			"Syntax": "**Formula from string**( *formulaString* : Text ) : 4D.Function",
			"Params": [
				[
					"formulaString",
					"テキスト",
					"->",
					"オブジェクトとして返されるフォーミュラ文字列"
				],
				[
					"戻り値",
					"4D.Function",
					"<-",
					"フォーミュラを格納しているネイティブなオブジェクト"
				]
			],
			"Summary": "*formulaString* に基づいた `4D Function` オブジェクトを作成します"
		},
		"MAIL_New_attachment": {
			"Syntax": "**MAIL New attachment**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br>**MAIL New attachment**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br>**MAIL New attachment**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br>**MAIL New attachment**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"添付ファイル"
				],
				[
					"zipFile",
					"4D.ZipFile",
					"->",
					"添付 Zipファイル"
				],
				[
					"blob",
					"4D.Blob",
					"->",
					"添付を格納した BLOB"
				],
				[
					"path",
					"テキスト",
					"->",
					"添付ファイルのパス"
				],
				[
					"name",
					"テキスト",
					"->",
					"メールクライアントが添付を指定するのに使用する名前 + 拡張子"
				],
				[
					"cid",
					"テキスト",
					"->",
					"添付の ID (HTMLメッセージのみ)、あるいは cid が不要な場合は \"\" (空の文字列)"
				],
				[
					"type",
					"テキスト",
					"->",
					"content-type ヘッダーの値"
				],
				[
					"disposition",
					"テキスト",
					"->",
					"content-disposition ヘッダーの値: \"inline\" あるいは \"attachment\""
				],
				[
					"戻り値",
					"4D.MailAttachment",
					"<-",
					"Attachment オブジェクト"
				]
			],
			"Summary": "Email オブジェクト に追加することができる添付オブジェクトを作成します"
		},
		"New collection": {
			"Syntax": "**New collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection, Picture, Pointer",
					"->",
					"コレクションの値"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"新しいコレクション"
				]
			],
			"Summary": "空の、あるいは値の入った新規コレクションを作成し、その参照を返します"
		},
		"New shared collection": {
			"Syntax": "**New shared collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Shared object, Shared collection",
					"->",
					"共有コレクションの値"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"新規の共有コレクション"
				]
			],
			"Summary": "空の、あるいは値が入った新規コレクションを作成し、その参照を返します"
		},
		"ds": {
			"Syntax": "**ds** { ( *localID* : Text ) } : cs.DataStore",
			"Params": [
				[
					"localID",
					"テキスト",
					"->",
					"参照を取得したいリモートデータストアのローカルID"
				],
				[
					"戻り値",
					"cs.DataStore",
					"<-",
					"データストア参照"
				]
			],
			"Summary": "カレントの 4Dデータベース、または *localID* で指定したデータベースに合致するデータストアの参照を返します"
		},
		"Open datastore": {
			"Syntax": "**Open datastore**( *connectionInfo* : Object ; *localID* : Text ) : cs.DataStore",
			"Params": [
				[
					"connectionInfo",
					"オブジェクト",
					"->",
					"リモートデータストアへの接続に使用する接続プロパティ"
				],
				[
					"localID",
					"テキスト",
					"->",
					"ローカルアプリケーション内で、開かれたデータストアに対して割り当てる ID (必須)"
				],
				[
					"戻り値",
					"cs.DataStore",
					"<-",
					"データストアオブジェクト"
				]
			],
			"Summary": "*connectionInfo* 引数が指定する 4Dデータベースにアプリケーションを接続します"
		},
		"MAIL_Convert_from_MIME": {
			"Syntax": "**MAIL Convert from MIME**( *mime* : Blob ) : Object<br>**MAIL Convert from MIME**( *mime* : Text ) : Object",
			"Params": [
				[
					"mime",
					"Blob, Text",
					"->",
					"MIME形式のメール"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"Email オブジェクト"
				]
			],
			"Summary": "MIMEドキュメントを有効な Emailオブジェクトへと変換します"
		},
		"MAIL_Convert_to_MIME": {
			"Syntax": "**MAIL Convert to MIME**( *mail* : Object { ; *options* : Object } ) : Text",
			"Params": [
				[
					"mail",
					"オブジェクト",
					"->",
					"Email オブジェクト"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"文字セットとエンコーディングのメールオプション"
				],
				[
					"戻り値",
					"テキスト",
					"<-",
					"MIME に変換された Emailオブジェクト"
				]
			],
			"Summary": "Emailオブジェクトを MIMEテキストへと変換します"
		},
		"Create entity selection": {
			"Syntax": "**Create entity selection** ( *dsTable* : Table { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"dsTable",
					"テーブル",
					"->",
					"エンティティセレクションの元となるカレントセレクションが属する 4Dデータベースのテーブル"
				],
				[
					"settings",
					"オブジェクト",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"指定したテーブルに対応するデータクラスのエンティティセレクション"
				]
			]
		},
		"File": {
			"Syntax": "**File** ( *path* : Text { ; *pathType* : Integer }{ ; *\\** } ) : 4D.File<br>**File** ( *fileConstant* : Integer { ; *\\** } ) : 4D.File",
			"Params": [
				[
					"path",
					"テキスト",
					"->",
					"ファイルパス"
				],
				[
					"fileConstant",
					"Integer",
					"->",
					"4Dファイル定数"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (デフォルト) または `fk platform path`"
				],
				[
					"*",
					"",
					"->",
					"ホストデータベースのファイルを返すには * を渡します"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"新規ファイルオブジェクト"
				]
			],
			"Summary": "`4D.File` 型の新しいオブジェクトを作成して返します"
		},
		"Folder": {
			"Syntax": "**Folder** ( *path* : Text { ; *pathType* : Integer }{ ; *\\** } ) : 4D.Folder<br>**Folder** ( *folderConstant* : Integer { ; *\\** } ) : 4D.Folder",
			"Summary": "`4D.Folder` 型の新しいオブジェクトを作成して返します"
		},
		"IMAP New transporter": {
			"Syntax": "**IMAP New transporter**( *server* : Object ) : 4D.IMAPTransporter",
			"Summary": "新規の IMAP接続を設定します"
		},
		"POP3 New transporter": {
			"Syntax": "**POP3 New transporter**( *server* : Object ) : 4D.POP3Transporter",
			"Summary": "新規の POP3接続を設定します"
		},
		"Session": {
			"Syntax": "**Session** : 4D.Session",
			"Params": [
				[
					"戻り値",
					"4D.Session",
					"<-",
					"Session オブジェクト"
				]
			],
			"Summary": "カレントのスケーラブルユーザーWebセッションに対応する `Session` オブジェクトを返します"
		},
		"New signal": {
			"Syntax": "**New signal** { ( *description* : Text ) } : 4D.Signal",
			"Summary": "`4D.Signal` オブジェクトを作成します"
		},
		"SMTP New transporter": {
			"Syntax": "**SMTP New transporter**( *server* : Object ) : 4D.SMTPTransporter",
			"Params": [
				[
					"server",
					"オブジェクト",
					"->",
					"メールサーバー情報"
				],
				[
					"戻り値",
					"4D.SMTPTransporter",
					"<-",
					"SMTP transporter オブジェクト"
				]
			],
			"Summary": "新規の SMTP接続を設定します"
		},
		"WEB Server": {
			"Syntax": "**WEB Server** : 4D.WebServer<br>**WEB Server**( *option* : Integer ) : 4D.WebServer",
			"Params": [
				[
					"option",
					"整数",
					"->",
					"取得する Webサーバー (省略時のデフォルト = `Web server database`)"
				],
				[
					"戻り値",
					"4D.WebServer",
					"<-",
					"WebServer オブジェクト"
				]
			],
			"Summary": "デフォルトの Webサーバーオブジェクト、または *option* 引数で指定された Webサーバーオブジェクトを返します"
		},
		"WEB Server list": {
			"Syntax": "**WEB Server list** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"利用可能な Webサーバーオブジェクトのコレクション"
				]
			],
			"Summary": "4Dアプリケーション内で利用可能な Webサーバーオブジェクトのコレクションを返します"
		},
		"ZIP Create archive": {
			"Syntax": "**ZIP Create archive** ( *fileToZip* : 4D.File ; *destinationFile* : 4D.File ) : Object<br>**ZIP Create archive** ( *folderToZip* : 4D.Folder ; *destinationFile* : 4D.File { ; *options* : Integer }) : Object<br>**ZIP Create archive** ( *zipStructure* : Object ; *destinationFile* : 4D.File ) : Object",
			"Params": [
				[
					"fileToZip",
					"4D.File",
					"->",
					"圧縮する File または Folder オブジェクト"
				],
				[
					"folderToZip",
					"4D.Folder",
					"->",
					"圧縮する File または Folder オブジェクト"
				],
				[
					"zipStructure",
					"オブジェクト",
					"->",
					"圧縮する File または Folder オブジェクト"
				],
				[
					"destinationFile",
					"4D.File",
					"->",
					"アーカイブの保存先ファイル"
				],
				[
					"options",
					"整数",
					"->",
					"*folderToZip* オプション: `ZIP Without enclosing folder` (外側のフォルダーを除外して ZIP圧縮をおこなう)"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "圧縮された ZIPArchive オブジェクトを作成し、その処理のステータスを返します"
		},
		"ZIP Read archive": {
			"Syntax": "**ZIP Read archive** ( *zipFile* : 4D.File { ; *password* : Text }) : 4D.ZipArchive",
			"Params": [
				[
					"zipFile",
					"4D.File",
					"->",
					"ZIPアーカイブファイル"
				],
				[
					"password",
					"テキスト",
					"->",
					"ZIPアーカイブのパスワード (必要であれば)"
				],
				[
					"戻り値",
					"4D.ZipArchive",
					"<-",
					"アーカイブオブジェクト"
				]
			],
			"Summary": "*zipFile* のコンテンツを取得し、`4D.ZipArchive` オブジェクト形式で返します"
		}
	},
	"Formula": {
		"apply()": {
			"Syntax": "**.apply**() : any<br>**.apply**( *thisObj* : Object { ; *formulaParams* : Collection } ) : any",
			"Params": [
				[
					"thisObj",
					"オブジェクト",
					"->",
					"フォーミュラ内で This コマンドによって返されるオブジェクト"
				],
				[
					"formulaParams",
					"コレクション",
					"->",
					"フォーミュラが実行される際に $1...$n として渡される値のコレクション"
				],
				[
					"戻り値",
					"any",
					"<-",
					"フォーミュラの実行結果"
				]
			],
			"Summary": "対象の `Formula` オブジェクトを実行し、その結果の値を返します"
		},
		"call()": {
			"Syntax": "**.call**() : any<br>**.call**( *thisObj* : Object { ; ...*params* : any } ) : any",
			"Params": [
				[
					"thisObj",
					"オブジェクト",
					"->",
					"フォーミュラ内で This コマンドによって返されるオブジェクト"
				],
				[
					"params",
					"any",
					"->",
					"フォーミュラが実行される際に $1...$n として渡される値"
				],
				[
					"戻り値",
					"any",
					"<-",
					"フォーミュラの実行結果"
				]
			],
			"Summary": "対象の `Formula` オブジェクトを実行し、その結果の値を返します"
		},
		"source": {
			"Syntax": "**.source** : Text",
			"Summary": "対象フォーミュラのテキスト型のソース式"
		}
	},
	"MailAttachment": {
		"cid": {
			"Syntax": "**.cid** : Text",
			"Summary": "添付ファイルの ID"
		},
		"disposition": {
			"Syntax": "**.disposition** : Text",
			"Summary": "`Content-Disposition` ヘッダーの値"
		},
		"getContent()": {
			"Syntax": "**.getContent()** : 4D.Blob",
			"Params": [
				[
					"戻り値",
					"4D.Blob",
					"<-",
					"添付の中身"
				]
			],
			"Summary": "添付オブジェクトの中身を `4D.Blob` オブジェクトとして返します"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "添付ファイルの名前と拡張子"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "添付ファイルの POSIXパス"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "カレントプラットフォームのシンタックスで表現されたファイルのパス"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "添付ファイルの `content-type`"
		}
	},
	"classClass": {
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "`4D.Class` オブジェクトの名称を格納します"
		},
		"new()": {
			"Syntax": "**.new**( *param* : any { *;...paramN* } ) : 4D.Class",
			"Params": [
				[
					"param",
					"any",
					"->",
					"コンストラクター関数に渡す引数"
				],
				[
					"戻り値",
					"4D.Class",
					"<-",
					"クラスの新規オブジェクト"
				]
			],
			"Summary": "対象クラスの新規インスタンスである `cs.className` オブジェクトを作成して返します"
		},
		"superclass": {
			"Syntax": "**.superclass** : 4D.Class",
			"Summary": "対象クラスの親クラスを返します"
		}
	},
	"Collection": {
		"average()": {
			"Syntax": "**.average**( {*propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"テキスト",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Real, Undefined",
					"<-",
					"コレクションの値の算術平均"
				]
			],
			"Summary": "コレクションインスタンス内で定義されている値の算術平均を返します"
		},
		"clear()": {
			"Syntax": "**.clear()** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"全要素が削除された元のコレクション"
				]
			],
			"Summary": "コレクションインスタンス内の全要素を削除し、空のコレクションを返します"
		},
		"combine()": {
			"Syntax": "**.combine**( *col2* : Collection {; *index* : Integer } ) : Collection",
			"Params": [
				[
					"col2",
					"コレクション",
					"->",
					"追加するコレクション"
				],
				[
					"index",
					"整数",
					"->",
					"追加要素を挿入する位置 (デフォルトは length+1)"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"追加要素を格納した元のコレクション"
				]
			],
			"Summary": "コレクションインスタンスの最後、あるいは *index* で指定した位置に *col2* の要素を挿入し、変更された元のコレクションを返します"
		},
		"concat()": {
			"Syntax": "**.concat**( *value* : any { *;...valueN* } ) : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Object, Collection, Date, Time, Boolean, Picture",
					"->",
					"連結する値。 *value* がコレクションの場合、コレクションの全要素が元のコレクションに追加されます。"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"元のコレクションに値が追加された新規コレクション"
				]
			],
			"Summary": "*value* に指定した要素を元のコレクションの最後に追加した、新しいコレクションを返します"
		},
		"copy()": {
			"Syntax": "**.copy**() : Collection<br>**.copy**( *option* : Integer ) : Collection<br>**.copy**( *option* : Integer ; *groupWithCol* : Collection ) : Collection<br>**.copy**( *option* : Integer ; *groupWithObj* : Object ) : Collection",
			"Params": [
				[
					"option",
					"整数",
					"->",
					"`ck resolve pointers`: コピー前にポインターを解決する<br>`ck shared`: 共有コレクションを返す"
				],
				[
					"groupWithCol",
					"コレクション",
					"->",
					"結果のコレクションとグループする共有コレクション"
				],
				[
					"groupWithObj",
					"オブジェクト",
					"->",
					"結果のコレクションとグループする共有オブジェクト"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"元のコレクションのディープ・コピー"
				]
			],
			"Summary": "コレクションインスタンスのディープ・コピーを返します"
		},
		"count()": {
			"Syntax": "**.count**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"テキスト",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"コレクション内の要素の数"
				]
			],
			"Summary": "コレクション内の、null ではない要素の個数を返します"
		},
		"countValues()": {
			"Syntax": "**.countValues**( *value* : any {; *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"value",
					"Text, Number, Boolean, Date, Object, Collection",
					"->",
					"数える値"
				],
				[
					"propertyPath",
					"テキスト",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"値の出現回数"
				]
			],
			"Summary": "*value* 引数に指定した値がコレクション内において見つかった回数を返します"
		},
		"distinct()": {
			"Syntax": "**.distinct**( {*option* : Integer} ) : Collection<br>**.distinct**( *propertyPath* : Text {; *option* : Integer } ) : Collection",
			"Params": [
				[
					"option",
					"整数",
					"->",
					"`ck diacritical`: アクセント等の発音区別符号を無視しない評価 (たとえば \"A\" # \"a\")"
				],
				[
					"propertyPath",
					"テキスト",
					"->",
					"重複しない値を取得する属性のパス"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"重複しない値のみを格納した新規コレクション"
				]
			],
			"Summary": "元のコレクションから重複しない (異なる) 値のみを格納した新しいコレクションを返します"
		},
		"equal()": {
			"Syntax": "**.equal**( *collection2* : Collection {; *option* : Integer } ) : Boolean",
			"Params": [
				[
					"collection2",
					"コレクション",
					"->",
					"比較するコレクション"
				],
				[
					"option",
					"整数",
					"->",
					"`ck diacritical`: アクセント等の発音区別符号を無視しない評価 (たとえば \"A\" # \"a\")"
				],
				[
					"戻り値",
					"ブール",
					"<-",
					"コレクションが同一の場合には true、それ以外は false"
				]
			],
			"Summary": "コレクションを *collection2* とディープ比較し、同一の場合には **true** を返します"
		},
		"every()": {
			"Syntax": "**.every**( *methodName* : Text { ;*...param* : any } ) : Boolean<br>**.every**( *startFrom* : Integer ; *methodName* : Text { ;*...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"整数",
					"->",
					"テストを開始するインデックス"
				],
				[
					"methodName",
					"テキスト",
					"->",
					"テストに呼び出すメソッド名"
				],
				[
					"param",
					"Mixed",
					"->",
					"methodName に渡す引数"
				],
				[
					"戻り値",
					"ブール",
					"<-",
					"すべての要素がテストをパスすれば true"
				]
			],
			"Summary": "コレクション内の全要素が、*methodName* に指定したメソッドで実装されたテストにパスした場合には **true** を返します"
		},
		"extract()": {
			"Syntax": "**.extract**( *propertyPath* : Text { ; *option* : Integer } ) : Collection<br>**.extract**( *propertyPath* : Text ;  *targetPath* : Text  { ;...*propertyPathN* : Text ;... *targetPathN* : Text } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"テキスト",
					"->",
					"新しいコレクションに抽出する値のオブジェクトプロパティパス"
				],
				[
					"targetpath",
					"テキスト",
					"->",
					"抽出先のプロパティパスあるいはプロパティ名"
				],
				[
					"option",
					"整数",
					"->",
					"`ck keep null`: 返されるコレクションに null プロパティを含めます (デフォルトでは無視されます)。 *targetPath* を渡した場合には、この引数は無視されます。"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"抽出した値を格納した新しいコレクション"
				]
			],
			"Summary": "元のオブジェクトのコレクションから、*propertyPath* 引数が指定するプロパティ値を抽出し、新しいコレクションに格納して返します"
		},
		"fill()": {
			"Syntax": "**.fill**( *value* : any ) : Collection<br>**.fill**( *value* : any ;  *startFrom*  : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"value",
					"number, Text, Collection, Object, Date, Boolean",
					"->",
					"代入する値"
				],
				[
					"startFrom",
					"整数",
					"->",
					"開始インデックス (含まれる)"
				],
				[
					"end",
					"整数",
					"->",
					"終了インデックス (含まれない)"
				],
				[
					"戻り値",
					"collection",
					"<-",
					"値が代入された元のコレクション"
				]
			],
			"Summary": "コレクションを *value* 引数の値で満たし、同コレクションを返します。オプションとして、*startFrom* および *end* インデックスを渡して代入開始位置および終了位置を指定することもできます"
		},
		"filter()": {
			"Syntax": "**.filter**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"methodName",
					"テキスト",
					"->",
					"コレクションをフィルターするために呼び出すメソッド名"
				],
				[
					"param",
					"Mixed",
					"->",
					"*methodName* に渡す引数"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"フィルターされた要素を格納した新しいコレクション(シャロウ・コピー)"
				]
			],
			"Summary": "元のコレクション要素のうち、*methodName* メソッドの結果が **true** になる要素をすべて格納した新しいコレクションを返します"
		},
		"find()": {
			"Syntax": "**.find**( *methodName* : Text { ; *...param* : any } ) : any<br>**.find**( *startFrom* : Integer ; *methodName* : Text { ; *...param* : any } ) : any",
			"Params": [
				[
					"startFrom",
					"整数",
					"->",
					"検索を開始するインデックス"
				],
				[
					"methodName",
					"テキスト",
					"->",
					"検索用に呼び出すメソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*methodName* に渡す引数"
				],
				[
					"戻り値",
					"any",
					"<-",
					"最初に見つかった値。見つからなかった場合には Undefined"
				]
			],
			"Summary": "*methodName* 引数のメソッドを各コレクション要素に適用して、**true** を返す最初の要素を返します"
		},
		"findIndex()": {
			"Syntax": "**.findIndex**( *methodName* : Text { ; *...param* : any } ) : Integer<br>**.findIndex**( *startFrom* : Integer ; *methodName* : Text { ; *...param* : any } ) : Integer",
			"Params": [
				[
					"startFrom",
					"整数",
					"->",
					"検索を開始するインデックス"
				],
				[
					"methodName",
					"テキスト",
					"->",
					"検索用に呼び出すメソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*methodName* に渡す引数"
				],
				[
					"戻り値",
					"整数",
					"<-",
					"最初に見つかった値のインデックス。見つからなかった場合には -1"
				]
			],
			"Summary": "*methodName* 引数のメソッドを各コレクション要素に適用して、**true** を返す最初の要素のインデックスを返します"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**(  *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"式",
					"->",
					"コレクション内を検索する式"
				],
				[
					"startFrom",
					"整数",
					"->",
					"検索を開始するインデックス"
				],
				[
					"戻り値",
					"整数",
					"<-",
					"最初に見つかった toSearch のインデックス。見つからなかった場合には -1"
				]
			],
			"Summary": "*toSearch* 引数の式をコレクション要素の中から検索し、最初に見つかった要素のインデックス (見つからなかった場合には -1) を返します"
		},
		"indices()": {
			"Syntax": "**.indices**(  *queryString* : Text { ; *...value* : any } ) : Collection",
			"Params": [
				[
					"queryString",
					"テキスト",
					"->",
					"検索条件"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー使用時: 比較する値"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"queryString に合致するコレクション要素のインデックス"
				]
			],
			"Summary": "*queryString* 引数の検索条件に合致する、元のコレクション要素のインデックスを返します"
		},
		"insert()": {
			"Syntax": "**.insert**( *index* : Integer ; *element* : any ) : Collection",
			"Params": [
				[
					"index",
					"整数",
					"->",
					"要素の挿入位置"
				],
				[
					"element",
					"any",
					"->",
					"コレクションに挿入する要素"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"要素の挿入された元のコレクション"
				]
			],
			"Summary": "*index* で指定したコレクションインスタンスの位置に *element* 要素を挿入し、変更された元のコレクションを返します"
		},
		"join()": {
			"Syntax": "**.join**( *delimiter* : Text { ; *option* : Integer } ) : Text",
			"Params": [
				[
					"delimiter",
					"テキスト",
					"->",
					"要素間に用いる区切り文字"
				],
				[
					"option",
					"整数",
					"->",
					"`ck ignore null or empty`: 戻り値に null と空の文字列を含めない"
				],
				[
					"戻り値",
					"テキスト",
					"<-",
					"区切り文字を使ってコレクションの全要素をつなげた文字列"
				]
			],
			"Summary": "*delimiter* に渡した文字列を区切り文字として、コレクションの全要素を一つの文字列につなげます"
		},
		"lastIndexOf()": {
			"Syntax": "**.lastIndexOf**( *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"式",
					"->",
					"コレクション内を検索する要素"
				],
				[
					"startFrom",
					"整数",
					"->",
					"検索を開始するインデックス"
				],
				[
					"戻り値",
					"整数",
					"<-",
					"最後に見つかった toSearch のインデックス。見つからなかった場合には -1"
				]
			],
			"Summary": "*toSearch* 引数の式をコレクション要素の中から検索し、最後に見つかった要素のインデックス (見つからなかった場合には -1) を返します"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "コレクション内の要素数を返します"
		},
		"map()": {
			"Syntax": "**.map**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"methodName",
					"テキスト",
					"->",
					"コレクション要素を変換するのに使用するメソッド名"
				],
				[
					"param",
					"any",
					"->",
					"methodName に渡す引数"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"変換された値を格納する新しいコレクション"
				]
			],
			"Summary": "元のコレクションの各要素に対して *methodName* メソッドを呼び出した結果に基づいた、新しいコレクションを作成します"
		},
		"max()": {
			"Syntax": "**.max**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"テキスト",
					"->",
					"評価するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"コレクション内の最大値"
				]
			],
			"Summary": "コレクション内の最大値を持つ要素を返します"
		},
		"min()": {
			"Syntax": "**.min**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"テキスト",
					"->",
					"評価するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"コレクション内の最小値"
				]
			],
			"Summary": "コレクション内の最小値を持つ要素を返します"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( ) : Collection<br>**.orderBy**( *pathStrings* : Text ) : Collection<br>**.orderBy**( *pathObjects* : Collection ) : Collection<br>**.orderBy**( *ascOrDesc* : Integer ) : Collection",
			"Params": [
				[
					"",
					"",
					"",
					""
				],
				[],
				[
					"pathStrings",
					"Text",
					"->",
					"コレクションの並べ替え基準とするプロパティパス",
					"",
					"pathObjects",
					"Collection",
					"->",
					"条件オブジェクトのコレクション",
					"",
					"ascOrDesc",
					"Interger",
					"->",
					"`ck ascending` または `ck descending` (スカラー値)",
					"",
					"戻り値",
					"Collection",
					"<-",
					"並べ替えられたコレクションのコピー (シャロウ・コピー)"
				]
			],
			"Summary": "コレクションの要素を指定順に並べ替えた新しいコレクションを返します"
		},
		"orderByMethod()": {
			"Syntax": "**.orderByMethod**( *methodName* : Text { ; ...*extraParam* : expression } ) : Collection",
			"Params": [
				[
					"methodName",
					"テキスト",
					"->",
					"並べ替え順の指定に使用するメソッド名"
				],
				[
					"extraParam",
					"式",
					"->",
					"methodName に渡す引数"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"並べ替えられたコレクションのコピー (シャロウ・コピー)"
				]
			],
			"Summary": "*methodName* メソッドを通して定義された順番でコレクション要素を並べ替えた新しいコレクションを返します"
		},
		"pop()": {
			"Syntax": "**.pop()** : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"コレクションの最後の要素"
				]
			],
			"Summary": "コレクションから最後の要素を取り除き、それを戻り値として返します"
		},
		"push()": {
			"Syntax": "**.push**( *element* : any { ;...*elementN* } ) : Collection",
			"Params": [
				[
					"element",
					"Mixed",
					"->",
					"コレクションに追加する要素"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"要素の追加された元のコレクション"
				]
			],
			"Summary": "一つ以上の *element* 引数をコレクションインスタンスの最後に追加し、変更された元のコレクションを返します"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text ; *...value* : any ) : Collection<br>**.query**( *queryString* : Text ; *querySettings* : Object ) : Collection",
			"Params": [
				[
					"queryString",
					"テキスト",
					"->",
					"検索条件"
				],
				[
					"value",
					"Mixed",
					"->",
					"プレースホルダー使用時: 比較する値"
				],
				[
					"querySettings",
					"オブジェクト",
					"->",
					"クエリオプション: parameters, attributes 他"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"queryString に合致するコレクション要素"
				]
			],
			"Summary": "検索条件に合致するオブジェクトコレクションの要素をすべて返します"
		},
		"reduce()": {
			"Syntax": "**.reduce**( *methodName* : Text ) : any <br>**.reduce**( *methodName* : Text ; *initValue* : any { ; *...param* : expression } ) : any",
			"Params": [
				[
					"methodName",
					"テキスト",
					"->",
					"コレクション要素を処理するのに使用するメソッド名"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"*methodName* の最初の呼び出しに最初の引数として使用する値"
				],
				[
					"param",
					"式",
					"->",
					"*methodName* に渡す引数"
				],
				[
					"戻り値",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"アキュムレーター値の結果"
				]
			],
			"Summary": "*methodName* コールバックメソッドをアキュムレーターおよびコレクションの各要素に (左から右へ) 適用して、単一の値にまとめます"
		},
		"remove()": {
			"Syntax": "**.remove**( *index* : Integer { ; *howMany* : Integer } ) : Collection",
			"Params": [
				[
					"index",
					"整数",
					"->",
					"削除を開始する要素の位置"
				],
				[
					"howMany",
					"整数",
					"->",
					"削除する要素の数、省略時は 1要素を削除"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"要素が削除された元のコレクション"
				]
			],
			"Summary": "*index* で指定した位置から一つまた複数のコレクション要素を削除し、変更されたコレクションを返します"
		},
		"resize()": {
			"Syntax": "**.resize**( *size* : Integer { ; *defaultValue* : any } ) : Collection",
			"Params": [
				[
					"size",
					"整数",
					"->",
					"コレクションの新しいサイズ"
				],
				[
					"defaultValue",
					"Number, Text, Object, Collection, Date, Boolean",
					"->",
					"新規要素のデフォルト値"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"リサイズされた元のコレクション"
				]
			],
			"Summary": "コレクションの length を引数で指定されたサイズに設定し、変更された元のコレクションを返します"
		},
		"reverse()": {
			"Syntax": "**.reverse( )** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"逆順に要素を格納した新しいコレクション"
				]
			],
			"Summary": "全要素が逆順になった、コレクションのディープ・コピーを返します"
		},
		"shift()": {
			"Syntax": "**.shift()** : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"コレクションの先頭要素"
				]
			],
			"Summary": "コレクションの先頭要素を取り除き、それを戻り値として返します"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"startFrom",
					"整数",
					"->",
					"開始インデックス (含まれる)"
				],
				[
					"end",
					"整数",
					"->",
					"終了インデックス (含まれない)"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"抜粋要素を格納した新しいコレクション(シャロウ・コピー)"
				]
			],
			"Summary": "コレクションの一部を、新しいコレクションの中に返します"
		},
		"some()": {
			"Syntax": "**.some**( *methodName* : Text { ; *...param* : any } ) : Boolean<br>**.some**( *startFrom* : Integer ; *methodName* : Text { ; *...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"テストを開始するインデックス"
				],
				[
					"methodName",
					"テキスト",
					"->",
					"テストに呼び出すメソッド名"
				],
				[
					"param",
					"Mixed",
					"->",
					"*methodName* に渡す引数"
				],
				[
					"戻り値",
					"ブール",
					"<-",
					"少なくとも一つの要素がテストをパスすれば true"
				]
			],
			"Summary": "少なくとも一つのコレクション要素が、*methodName* に指定したメソッドで実装されたテストにパスした場合に **true** を返します"
		},
		"sort()": {
			"Syntax": "**.sort**( *methodName* : Text { ; *...extraParam* : any } ) : Collection",
			"Params": [
				[
					"methodName",
					"テキスト",
					"->",
					"並べ替え順の指定に使用するメソッド名"
				],
				[
					"extraParam",
					"any",
					"->",
					"methodName に渡す引数"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"並べ替えられた元のコレクション"
				]
			],
			"Summary": "コレクションの要素を並べ替えます"
		},
		"sum()": {
			"Syntax": "**.sum**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"テキスト",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"コレクション要素の値の合計"
				]
			],
			"Summary": "コレクションインスタンスの全要素の値を合計して返します"
		},
		"unshift()": {
			"Syntax": "**.unshift**( *value* : any { ;...*valueN* : any } ) : Collection",
			"Params": [
				[
					"value",
					"Text, Number, Object, Collection, Date",
					"->",
					"コレクションの先頭に挿入する値"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"要素の追加された元のコレクション"
				]
			],
			"Summary": "一つ以上の *value* 引数をコレクションインスタンスの先頭に挿入し、変更された元のコレクションを返します"
		}
	},
	"CryptoKey": {
		"curve": {
			"Syntax": "**.curve** : Text",
			"Summary": "キーの楕円曲線名"
		},
		"decrypt()": {
			"Syntax": "**.decrypt**( *message* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"message",
					"テキスト",
					"->",
					"`options.encodingEncrypted` を使ってデコードし復号するメッセージ文字列"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"デコーディングオプション"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"ステータス"
				]
			],
			"Summary": "**秘密** 鍵を使って *message* を復号します"
		},
		"encrypt()": {
			"Syntax": "**.encrypt**( *message* : Text ; *options* : Object ) : Text",
			"Params": [
				[
					"message",
					"テキスト",
					"->",
					"`options.encodingDecrypted` を使ってエンコードし暗号化するメッセージ文字列"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"エンコーディングオプション"
				],
				[
					"戻り値",
					"テキスト",
					"<-",
					"options.encodingEncrypted を使って暗号化およびエンコードされたメッセージ"
				]
			],
			"Summary": "**公開** 鍵を使って *message* を暗号化します"
		},
		"getPrivateKey()": {
			"Syntax": "**.getPrivateKey()** : Text",
			"Params": [
				[
					"戻り値",
					"テキスト",
					"<-",
					"PEM 形式の秘密鍵"
				]
			],
			"Summary": "`cryptoKey` オブジェクトの秘密鍵を返します"
		},
		"getPublicKey()": {
			"Syntax": "**.getPublicKey( )** : Text",
			"Params": [
				[
					"戻り値",
					"テキスト",
					"<-",
					"PEM 形式の公開鍵"
				]
			],
			"Summary": "`cryptoKey` オブジェクトの公開鍵を返します"
		},
		"pem": {
			"Syntax": "**.pem** : Text",
			"Summary": "ロードする PEM 形式の暗号化キー"
		},
		"sign()": {
			"Syntax": ".**sign** (*message* : Text ; *options* : Text) : Text",
			"Params": [
				[
					"message",
					"テキスト",
					"->",
					"署名をするメッセージ"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"署名オプション"
				],
				[
					"戻り値",
					"テキスト",
					"<-",
					"\"encoding\" オプションに応じて Base64 または Base64URL 形式の署名"
				]
			],
			"Summary": "utf8 形式の *message* 文字列を署名します"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "キーのサイズ (ビット単位)"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "キーのタイプ: \"RSA\", \"ECDSA\", \"PEM\""
		},
		"verify()": {
			"Syntax": "**.verify**( *message* : Text ; *signature* : Text ; *options* : Object) : object",
			"Params": [
				[
					"message",
					"テキスト",
					"->",
					"署名生成時に使われたメッセージ文字列"
				],
				[
					"signature",
					"テキスト",
					"->",
					"検証の対象である、`options.encoding` に応じて Base64 または Base64URL 形式の署名"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"署名オプション"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"検証ステータス"
				]
			],
			"Summary": "utf8 形式の message 文字列の署名を検証します"
		}
	},
	"dataclassClass": {
		"all()": {
			"Syntax": "**.all** ( { *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"settings",
					"オブジェクト",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"データクラスの全エンティティの参照"
				]
			],
			"Summary": "データクラスの全エンティティをエンティティセレクションとして返します"
		},
		"fromCollection()": {
			"Syntax": "**.fromCollection**( *objectCol* : Collection { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"objectCol",
					"コレクション",
					"->",
					"エンティティにマップするオブジェクトのコレクション"
				],
				[
					"settings",
					"オブジェクト",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"コレクションから作成したエンティティセレクション"
				]
			],
			"Summary": "*objectCol* 引数のオブジェクトのコレクションに基づいてデータクラスのエンティティを更新あるいは作成し、対応するエンティティセレクションを返します"
		},
		"get()": {
			"Syntax": "**.get**( *primaryKey* : Integer { ; *settings* : Object } ) : 4D.Entity<br>**.get**( *primaryKey* : Text { ; *settings* : Object } ) : 4D.Entity",
			"Params": [
				[
					"primaryKey",
					"整数または文字列",
					"->",
					"取得するエンティティのプライマリーキー値"
				],
				[
					"settings",
					"オブジェクト",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"指定したプライマリーキーに合致するエンティティ"
				]
			],
			"Summary": "*primaryKey* に渡したプライマリーキーに合致するエンティティを返します"
		},
		"getDataStore()": {
			"Syntax": "**.getDataStore()** : cs.DataStore",
			"Params": [
				[
					"戻り値",
					"cs.DataStore",
					"<-",
					"データクラスが属しているデータストア"
				]
			],
			"Summary": "指定したデータクラスが属しているデータストアを返します"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()** : Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"データクラスの情報"
				]
			],
			"Summary": "データクラスの情報を提供するオブジェクトを返します"
		},
		"new()": {
			"Syntax": "**.new()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"データクラスの新規エンティティ"
				]
			],
			"Summary": "メモリ内にデータクラスに空のエンティティを新規作成しそれを返します"
		},
		"newSelection()": {
			"Syntax": "**.newSelection**( { *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered`: 順列ありのエンティティセレクションを作成します<br>`dk non ordered` (あるいは省略時): 順列なしのエンティティセレクションを作成します"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"データクラスの空の新規エンティティセレクション"
				]
			],
			"Summary": "追加可能な、空の新規エンティティセレクションをメモリ内に作成します"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"テキスト",
					"->",
					"検索条件 (文字列)"
				],
				[
					"formula",
					"オブジェクト",
					"->",
					"検索条件 (フォーミュラオブジェクト)"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー用の値"
				],
				[
					"querySettings",
					"オブジェクト",
					"->",
					"クエリオプション: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"*queryString* または *formula* に渡した検索条件に合致するエンティティから構成された新しいエンティティセレクション"
				]
			],
			"Summary": "*queryString* または *formula* と任意の *value* 引数で指定した検索条件に合致するエンティティを検索します"
		}
	},
	"datastoreClass": {
		"cancelTransaction()": {
			"Syntax": "**.cancelTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "トランザクションをキャンセルします"
		},
		"encryptionStatus()": {
			"Syntax": "**.encryptionStatus()**: Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"カレントデータストアと、各テーブルの暗号化についての情報"
				]
			],
			"Summary": "カレントデータファイルの暗号化状態を示すオブジェクトを返します"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()**: Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"データストアのプロパティ"
				]
			],
			"Summary": "データストアの情報を提供するオブジェクトを返します"
		},
		"getRequestLog()": {
			"Syntax": "**.getRequestLog()** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"オブジェクトのコレクション (要素毎に一つのリクエストを記述します)"
				]
			],
			"Summary": "クライアント側のメモリに記録されている ORDAリクエストを返します"
		},
		"isAdminProtected()": {
			"Syntax": "**.isAdminProtected()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"データエクスプローラーへのアクセスが無効に設定されているの場合は true、有効の場合は false (デフォルト)"
				]
			],
			"Summary": "現在のセッションにおいて データエクスプローラー へのアクセスが無効に設定されているの場合は `true`を返します"
		},
		"makeSelectionsAlterable()": {
			"Syntax": "**.makeSelectionsAlterable()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "カレントアプリケーションのデータストアにおいて、すべての新規エンティティセレクションをデフォルトで追加可能に設定します"
		},
		"provideDataKey()": {
			"Syntax": "**.provideDataKey**( *curPassPhrase* : Text ) : Object <br>**.provideDataKey**( *curDataKey* : Object ) : Object",
			"Params": [
				[
					"curPassPhrase",
					"テキスト",
					"->",
					"カレントのパスフレーズ"
				],
				[
					"curDataKey",
					"オブジェクト",
					"->",
					"カレントのデータ暗号化キー"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"暗号化キーのチェックの結果"
				]
			],
			"Summary": "データストアのカレントデータファイルのデータ暗号化キーを受け取り、暗号化されたデータと合致するかどうかチェックします"
		},
		"setAdminProtection()": {
			"Syntax": "**.setAdminProtection**( *status* : Boolean )",
			"Params": [
				[
					"status",
					"ブール",
					"->",
					"`webAdmin`ポート上で、データエクスプローラーによるデータアクセスを無効にするには true、アクセスを有効にするには false (デフォルト)"
				]
			],
			"Summary": "`WebAdmin`セッションにおける データエクスプローラー 含め、Web管理ポート上でのデータアクセスを無効に設定することができます"
		},
		"startRequestLog()": {
			"Syntax": "**.startRequestLog**()<br>**.startRequestLog**( *file* : 4D.File )<br>**.startRequestLog**( *reqNum* : Integer )",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"File オブジェクト"
				],
				[
					"reqNum",
					"Integer",
					"->",
					"メモリ内に保管するリクエストの数"
				]
			],
			"Summary": "クライアント側で ORDAリクエストのログを開始します"
		},
		"startTransaction()": {
			"Syntax": "**.startTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "対象データストアに対応するデータベース上で、カレントプロセス内のトランザクションを開始します"
		},
		"stopRequestLog()": {
			"Syntax": "**.stopRequestLog()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "クライアント側の ORDAリクエストのログをすべて停止します"
		},
		"validateTransaction()": {
			"Syntax": "**.validateTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "トランザクションを受け入れます"
		}
	},
	"Directory": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "フォルダーの作成日"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "フォルダーの作成時刻"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "ディスク上にフォルダーが存在する場合は true"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "フォルダー名の拡張子"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "拡張子 (あれば) を含めたフォルダーの完全な名称"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "フォルダーがシステムレベルで \"非表示\" に設定されていれば true"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "`Folder` オブジェクトに対しては常に **false**"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "フォルダーに対しては常に **false**"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "フォルダーに対しては常に **true**"
		},
		"isPackage": {
			"Syntax": "**.isPackage** : Boolean",
			"Summary": "フォルダーが macOS上のパッケージである (かつディスク上に存在している) 場合に true"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "フォルダーの最終変更日"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "フォルダーの最終変更時刻"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "拡張子 (あれば) を含まないフォルダー名"
		},
		"original": {
			"Syntax": "**.original** : 4D.Folder",
			"Summary": "対象フォルダーと同じフォルダーオブジェクト"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "対象フォルダーの親フォルダーオブジェクト"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "フォルダーの POSIXパス"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "カレントプラットフォームのシンタックスで表現されたフォルダーのパス"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"テキスト",
					"->",
					"コピー先フォルダーの名前"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"既存要素を上書きするには `fk overwrite` を渡します"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"コピーされたフォルダー"
				]
			],
			"Summary": "`Folder` オブジェクトを、*destinationFolder* 引数で指定したフォルダーへとコピーします"
		},
		"file()": {
			"Syntax": "**.file**( *path* : Text ) : 4D.File",
			"Params": [
				[
					"path",
					"テキスト",
					"->",
					"ファイルのPOSIX相対パス名"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"`File` オブジェクト (無効なパスの場合には null)"
				]
			],
			"Summary": "`Folder` オブジェクト内に `File` オブジェクトを作成し、その参照を返します"
		},
		"files()": {
			"Syntax": "**.files**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"ファイルリストのオプション"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"子ファイルオブジェクトのコレクション"
				]
			],
			"Summary": "フォルダーに格納されている `File` オブジェクトのコレクションを返します"
		},
		"folder()": {
			"Syntax": "**.folder**( *path* : Text ) : 4D.Folder",
			"Params": [
				[
					"path",
					"テキスト",
					"->",
					"ファイルのPOSIX相対パス名"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"作成された `Folder` オブジェクト (無効な *path* の場合には null)"
				]
			],
			"Summary": "親の `Folder` オブジェクト内に新しい `Folder` オブジェクトを作成し、その参照を返します"
		},
		"folders()": {
			"Syntax": "**.folders**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"フォルダーリストのオプション"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"子フォルダーオブジェクトのコレクション"
				]
			],
			"Summary": "親フォルダーに格納されている `Folder` オブジェクトのコレクションを返します"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"取得するピクチャーの一辺の長さ (ピクセル単位)"
				],
				[
					"戻り値",
					"ピクチャー",
					"<-",
					"アイコン"
				]
			],
			"Summary": "フォルダーのアイコンを返します"
		}
	},
	"Document": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "ファイルの作成日"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "ファイルの作成時刻"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "ディスク上にファイルが存在する場合は true を返します"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "ファイル名の拡張子"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "拡張子 (あれば) を含めたファイルの完全な名称"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "ファイルがシステムレベルで \"非表示\" に設定されていれば true"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "ファイルがエイリアス、ショートカット、シンボリックリンクのいずれかである場合には true"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "ファイルに対しては常に true"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "ファイルに対しては常に false"
		},
		"isWritable": {
			"Syntax": "**.isWritable** : Boolean",
			"Summary": "ファイルがディスク上に存在し、書き込み可能な場合に true"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "ファイルの最終変更日"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "ファイルの最終変更時刻"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "拡張子 (あれば) を含まないファイル名"
		},
		"original": {
			"Syntax": "**.original** : 4D.File<br>**.original** : 4D.Folder",
			"Summary": "エイリアス、ショートカット、シンボリックリンクファイルのターゲット要素"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "対象ファイルの親フォルダーオブジェクト"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "ファイルの POSIXパス"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "カレントプラットフォームのシンタックスで表現されたファイルのパス"
		},
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "ファイルのサイズ (バイト単位)"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"テキスト",
					"->",
					"コピー先フォルダーの名前"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"既存要素を上書きするには `fk overwrite` を渡します"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"コピーされたファイル"
				]
			],
			"Summary": "`File` オブジェクトを、*destinationFolder* 引数で指定したフォルダーへとコピーします"
		},
		"getContent()": {
			"Syntax": "**.getContent( )** : Blob",
			"Params": [
				[
					"戻り値",
					"BLOB",
					"<-",
					"ファイルのコンテンツ"
				]
			],
			"Summary": "ファイルの全コンテンツを格納した BLOB を返します"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"取得するピクチャーの一辺の長さ (ピクセル単位)"
				],
				[
					"戻り値",
					"ピクチャー",
					"<-",
					"アイコン"
				]
			],
			"Summary": "ファイルのアイコンを返します"
		},
		"getText()": {
			"Syntax": "**.getText**( { *charSetName* : Text } { ; } { *breakMode* : integer} ) : Text<br>**.getText**( { *charSetNum* : integer } { ; } { *breakMode* : integer} ) : Text",
			"Params": [
				[
					"charSetName",
					"テキスト",
					"->",
					"文字セットの名前"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"文字セットの番号"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"改行の処理モード"
				],
				[
					"戻り値",
					"テキスト",
					"<-",
					"ドキュメントから取得したテキスト"
				]
			],
			"Summary": "ファイルのコンテンツをテキストとして返します"
		}
	},
	"EmailObjectClass": {
		"attachments": {
			"Syntax": "**.attachments** : Collection",
			"Summary": "`4D.MailAttachment` オブジェクトのコレクション"
		},
		"bcc": {
			"Syntax": "**.bcc** : Text<br>**.bcc** : Object<br>**.bcc** : Collection",
			"Summary": "非表示 (BCC: Blind Carbon Copy) のメール受信者 アドレス"
		},
		"bodyStructure": {
			"Syntax": "**.bodyStructure** : Object",
			"Summary": "(任意) メッセージ本文の完全なMIME ストラクチャーである *EmailBodyPart* オブジェクト"
		},
		"bodyValues": {
			"Syntax": "**.bodyValues** : Object",
			"Summary": "(任意) `bodyStructure` の \\<partID\\> 毎にオブジェクトを格納している *EmailBodyValue* オブジェクト"
		},
		"cc": {
			"Syntax": "**.cc** : Text<br>**.cc** : Object<br>**.cc** : Collection",
			"Summary": "追加 (CC: Carbon Copy) のメール受信者 アドレス"
		},
		"comments": {
			"Syntax": "**.comments** : Text",
			"Summary": "追加のコメントのヘッダー"
		},
		"from": {
			"Syntax": "**.from** : Text<br>**.from** : Object<br>**.from** : Collection",
			"Summary": "メールの送信元 アドレス"
		},
		"headers": {
			"Syntax": "**.headers** : Collection",
			"Summary": "メッセージ内で現れる順番どおりの `EmailHeader` オブジェクトのコレクション"
		},
		"htmlBody": {
			"Syntax": "**.htmlBody** : Text",
			"Summary": "(任意、SMTPのみ) HTML形式のメールメッセージ (デフォルトの文字セットは UTF-8)"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "IMAP サーバーからの固有ID"
		},
		"inReplyTo": {
			"Syntax": "**.inReplyTo** : Text",
			"Summary": "カレントメッセージが返信している、元のメッセージのメッセージID"
		},
		"keywords": {
			"Syntax": "**.keywords** : Object",
			"Summary": "各プロパティ名がキーワードであり、各値が true であるキーワードセットのオブジェクト"
		},
		"messageId": {
			"Syntax": "**.messageId** : Text",
			"Summary": "メッセージ識別ヘッダー (\"message-id\")"
		},
		"receivedAt": {
			"Syntax": "**.receivedAt** : Text",
			"Summary": "IMAPサーバーにメールが到着した時間の、ISO 8601 UTC フォーマットでのタイムスタンプ (例: 2020-09-13T16:11:53Z)"
		},
		"references": {
			"Syntax": "**.references** : Collection",
			"Summary": "返信チェーン内メッセージの、全メッセージID のコレクション"
		},
		"replyTo": {
			"Syntax": "**.replyTo** : Text<br>**.replyTo** : Object<br>**.replyTo** : Collection",
			"Summary": "返信用 アドレス"
		},
		"sendAt": {
			"Syntax": "**.sendAt** : Text",
			"Summary": "メールのタイムスタンプ (ISO 8601 UTCフォーマット)"
		},
		"sender": {
			"Syntax": "**.sender** : Text<br>**.sender** : Object<br>**.sender** : Collection",
			"Summary": "メールのソース アドレス"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "IMAPサーバーから返された Email オブジェクトのサイズ (バイト単位)"
		},
		"subject": {
			"Syntax": "**.subject** : Text",
			"Summary": "メールの件名"
		},
		"textBody": {
			"Syntax": "**.textBody** : Text",
			"Summary": "(任意、SMTPのみ) 標準テキスト形式のメールメッセージ (デフォルトの文字セットは UTF-8)"
		},
		"to": {
			"Syntax": "**.to** : Text<br>**.to** : Object<br>**.to** : Collection",
			"Summary": "メールのメインの受信者 アドレス"
		}
	},
	"entityClass": {
		"clone()": {
			"Syntax": "**.clone()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"同レコードを参照する新しいエンティティ"
				]
			],
			"Summary": "対象エンティティと同じレコードを参照する新規エンティティをメモリ内に作成します"
		},
		"diff()": {
			"Syntax": "**.diff**( *entityToCompare* : 4D.Entity { ; *attributesToCompare* : Collection } ) : Collection",
			"Params": [
				[
					"entityToCompare",
					"4D.Entity",
					"->",
					"対象エンティティと比較するエンティティ"
				],
				[
					"attributesToCompare",
					"コレクション",
					"->",
					"比較する属性の名称"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"エンティティ間の差異"
				]
			],
			"Summary": "二つのエンティティの中身を比較し、その差異を返します"
		},
		"drop()": {
			"Syntax": "**.drop**( {*mode* : Integer} ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk force drop if stamp changed`: スタンプが変更されていた場合でも強制的にドロップする"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"ドロップの結果"
				]
			],
			"Summary": "データストアのエンティティに格納されているデータを削除します"
		},
		"first()": {
			"Syntax": "**.first()**: 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの先頭エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "対象エンティティが所属するエンティティセレクションの先頭エンティティへの参照を返します"
		},
		"fromObject()": {
			"Syntax": "**.fromObject**( *filler* : Object )",
			"Params": [
				[
					"filler",
					"オブジェクト",
					"->",
					"エンティティの属性値を設定するオブジェクト"
				]
			],
			"Summary": "*filler* に指定した内容でエンティティの属性値を設定します"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass()** : 4D.DataClass",
			"Params": [
				[
					"戻り値",
					"4D.DataClass",
					"<-",
					"エンティティが所属している DataClass オブジェクト"
				]
			],
			"Summary": "エンティティのデータクラスを返します"
		},
		"getKey()": {
			"Syntax": "**.getKey**( { *mode* : Integer } ) : Text<br>**.getKey**( { *mode* : Integer } ) : Integer",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk key as string`: プライマリーキーの型にかかわらず、プライマリーキーを文字列として返します"
				],
				[
					"戻り値",
					"テキスト",
					"<-",
					"エンティティのテキスト型プライマリーキーの値"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"エンティティの数値型プライマリーキーの値"
				]
			],
			"Summary": "エンティティのプライマリーキー値を返します"
		},
		"getSelection()": {
			"Syntax": "**.getSelection()**: 4D.EntitySelection",
			"Params": [
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"エンティティが所属するエンティティセレクション (見つからなければ null)"
				]
			],
			"Summary": "エンティティが所属するエンティティセレクションを返します"
		},
		"getStamp()": {
			"Syntax": "**.getStamp()** : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"エンティティのスタンプ (エンティティが作成されたばかりの場合には 0)"
				]
			],
			"Summary": "エンティティのスタンプの値を返します"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**( { *entitySelection* : 4D.EntitySelection } ) : Integer",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"エンティティの位置を取得する対象のエンティティセレクション"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"エンティティセレクション内でのエンティティの位置"
				]
			],
			"Summary": "エンティティセレクション内におけるエンティティの位置を返します"
		},
		"isNew()": {
			"Syntax": "**.isNew()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"エンティティが作成されたばかりで未保存の場合は true。 それ以外は false。"
				]
			],
			"Summary": "対象エンティティが作成されたばかりで、まだデータストアに保存されていない場合に true を返します"
		},
		"last()": {
			"Syntax": "**.last()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの最終エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "対象エンティティが所属するエンティティセレクションの最終エンティティへの参照を返します"
		},
		"lock()": {
			"Syntax": "**.lock**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk reload if stamp changed`: スタンプが変更されてる場合はロック前にリロードします"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"ロックの結果"
				]
			],
			"Summary": "対象エンティティが参照するレコードにペシミスティック・ロックをかけます"
		},
		"next()": {
			"Syntax": "**.next()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクション内の次のエンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティが所属するエンティティセレクションの次のエンティティへの参照を返します"
		},
		"previous()": {
			"Syntax": "**.previous()**  : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクション内の前のエンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティが所属するエンティティセレクションの前のエンティティへの参照を返します"
		},
		"reload()": {
			"Syntax": "**.reload()** : Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "エンティティの中身をメモリ内にリロードします"
		},
		"save()": {
			"Syntax": "**.save**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk auto merge`: 自動マージモードを有効化します"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"保存の結果"
				]
			],
			"Summary": "エンティティの変更内容を保存します"
		},
		"toObject()": {
			"Syntax": "**.toObject**() : Object<br>**.toObject**( *filterString* : Text { ; *options* : Integer}  ) : Object<br>**.toObject**( *filterCol* : Collection { ; *options* : Integer } ) : Object",
			"Params": [
				[
					"filterString",
					"テキスト",
					"->",
					"取得する属性 (カンマ区切り)"
				],
				[
					"filterCol",
					"コレクション",
					"->",
					"取得する属性のコレクション"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: \\_\\_KEY プロパティを追加;<br>`dk with stamp`: \\_\\_STAMP プロパティを追加"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"エンティティを元にビルドされたオブジェクト"
				]
			],
			"Summary": "エンティティからビルトされたオブジェクトを返します"
		},
		"touched()": {
			"Syntax": "**.touched()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"少なくとも一つのエンティティ属性が編集されていて未保存の場合に true、それ以外の場合には false"
				]
			],
			"Summary": "エンティティがメモリに読み込まれてから、あるいは保存されてから、エンティティ属性が変更されたかどうかをテストします"
		},
		"touchedAttributes()": {
			"Syntax": "**.touchedAttributes()** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"変更された属性の名前、あるいは空のコレクション"
				]
			],
			"Summary": "メモリに読み込み後に変更されたエンティティの属性名を返します"
		},
		"unlock()": {
			"Syntax": "**.unlock()** : Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "対象エンティティが参照するレコードのペシミスティック・ロックを解除します"
		}
	},
	"entitySelectionClass": {
		"add()": {
			"Syntax": "**.add**( *entity* : 4D.Entity ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"エンティティセレクションに追加するエンティティ"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"->",
					"追加エンティティを含むエンティティセレクション"
				]
			],
			"Summary": "*entity* に渡したエンティティをエンティティセレクションに追加し、編集されたエンティティセレクションを返します"
		},
		"and()": {
			"Syntax": "**.and**( *entity* : 4D.Entity ) : 4D.EntitySelection<br>**.and**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"交差するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"交差するエンティティセレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"AND論理演算子による共通部分の結果を格納する新しいエンティティセレクション"
				]
			],
			"Summary": "エンティティセレクションと *entity* あるいは *entitySelection* 引数をAND論理演算子を使用して結合します"
		},
		"average()": {
			"Syntax": "**.average**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"エンティティの属性値の算術平均 (相加平均) (エンティティセレクションがからの場合には undefined を返します)"
				]
			],
			"Summary": "*attributePath* に指定した、エンティティセレクション内の null でない値の算術平均 (相加平均) を返します"
		},
		"contains()": {
			"Syntax": "**.contains**( *entity* : 4D.Entity ) : Boolean",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"評価するエンティティ"
				],
				[
					"戻り値",
					"ブール",
					"<-",
					"エンティティがエンティティセレクションに属している場合には true、そうでない場合は false"
				]
			],
			"Summary": "エンティティ参照がエンティティセレクションに属している場合には true を返します"
		},
		"count()": {
			"Syntax": "**.count**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"エンティティセレクション内の *attributePath* が null でない値の個数"
				]
			],
			"Summary": "エンティティセレクション内で *attributePath* に指定したパスの値が null でないエンティティの数を返します"
		},
		"copy()": {
			"Syntax": "**.copy**( { *option* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck shared`: 共有可能なエンティティセレクションを返します"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"エンティティセレクションのコピー"
				]
			],
			"Summary": "元のエンティティセレクションのコピーを返します"
		},
		"distinct()": {
			"Syntax": "**.distinct**( *attributePath* : Text { ; *option* : Integer } ) : Collection",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"重複しない値を取得する属性のパス"
				],
				[
					"option",
					"Integer",
					"->",
					"`dk diacritical`: アクセント等の発音区別符号を無視しない評価 (たとえば \"A\" # \"a\")"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"重複しない値のみを格納したコレクション"
				]
			],
			"Summary": "*attributePath* に指定した、エンティティセレクション内の重複しない (異なる) 値のみを格納したコレクションを返します"
		},
		"drop()": {
			"Syntax": "**.drop**( { *mode* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk stop dropping on first error`: 最初のドロップ不可エンティティで実行を止めます"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"成功した場合には空のエンティティセレクション、そうでない場合にはドロップ不可エンティティを格納したエンティティセレクション"
				]
			],
			"Summary": "データストアのデータクラスに対応するテーブルから、エンティティセレクションに所属しているエンティティを削除します"
		},
		"extract()": {
			"Syntax": "**.extract**( *attributePath* : Text { ; *option* : Integer } ) : Collection<br>**.extract**( *attributePath* { ; *targetPath* } { ; *...attributePathN* : Text ; *targetPathN* : Text } ) : Collection",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"新しいコレクションに抽出する値の属性パス"
				],
				[
					"targetPath",
					"テキスト",
					"->",
					"抽出先の属性パスあるいは属性名"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: 返されるコレクションに null 属性を含めます (デフォルトでは無視されます)。"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"抽出した値を格納したコレクション"
				]
			],
			"Summary": "*attributePath* で指定した値をエンティティセレクションから抽出し、コレクションに格納して返します"
		},
		"first()": {
			"Syntax": "**.first()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの先頭エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティセレクションの先頭エンティティへの参照を返します"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass()** : 4D.DataClass",
			"Params": [
				[
					"戻り値",
					"4D.DataClass",
					"<-",
					"エンティティセレクションが所属しているデータクラス"
				]
			],
			"Summary": "エンティティセレクションのデータクラスを返します"
		},
		"isAlterable()": {
			"Syntax": "**.isAlterable()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"エンティティセレクションが追加可能であれば true、それ以外の場合には false"
				]
			],
			"Summary": "エンティティセレクションが追加可能の場合には true を返します"
		},
		"isOrdered()": {
			"Syntax": "**.isOrdered()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"順列ありエンティティセレクションの場合には true、そうでない場合は false"
				]
			],
			"Summary": "エンティティセレクションが順列ありであれば true を返します"
		},
		"last()": {
			"Syntax": "**.last()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの最終エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティセレクションの最終エンティティへの参照を返します"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "エンティティセレクション内のエンティティの数を返します"
		},
		"max()": {
			"Syntax": "**.max**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"any",
					"<-",
					"属性の最大値"
				]
			],
			"Summary": "*attributePath* に指定したエンティティセレクションの属性値のうち最高の (あるいは最大の) 値を返します"
		},
		"min()": {
			"Syntax": "**.min**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"any",
					"<-",
					"属性の最小値"
				]
			],
			"Summary": "*attributePath* に指定したエンティティセレクションの属性値のうち最低の (あるいは最小の) 値を返します"
		},
		"minus()": {
			"Syntax": "**.minus**( *entity* : 4D.Entity ) : 4D.EntitySelection<br>**.minus**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"除外するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"除外するエンティティセレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"新しいエンティティセレクション、あるいは既存のエンティティセレクションへの新しい参照"
				]
			],
			"Summary": "対象のエンティティセレクションから、*entity* 引数のエンティティ、あるいは*entitySelection* 引数のエンティティセレクションに含まれるエンティティを除外し、結果のエンティティセレクションを返します"
		},
		"or()": {
			"Syntax": "**.or**( *entity* : 4D.Entity ) : 4D.EntitySelection<br>**.or**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"交差するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"交差するエンティティセレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"新しいエンティティセレクション、あるいは元のエンティティセレクションへの新しい参照"
				]
			],
			"Summary": "OR論理演算子を使用して、*entity* または *entitySelection* のエンティティと対象エンティティセレクションを組み合わせます"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( *pathString* : Text ) : 4D.EntitySelection<br>**.orderBy**( *pathObjects* : Collection ) : 4D.EntitySelection",
			"Params": [
				[
					"pathString",
					"テキスト",
					"->",
					"エンティティセレクションの属性パスと並べ替えの指定"
				],
				[
					"pathObjects",
					"コレクション",
					"->",
					"条件オブジェクトのコレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"指定された順番に並べ替えられた新規エンティティセレクション"
				]
			],
			"Summary": "エンティティセレクションの全エンティティが *pathString* または *pathObjects* が指定する順番に並べ替えられた、新規の順列ありのエンティティセレクションを返します"
		},
		"orderByFormula()": {
			"Syntax": "**.orderByFormula**( *formulaString* : Text { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection<br>**.orderByFormula**( *formulaObj* : Object { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection",
			"Params": [
				[
					"formulaString",
					"テキスト",
					"->",
					"フォーミュラ文字列"
				],
				[
					"formulaObj",
					"オブジェクト",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"sortOrder",
					"Integer",
					"->",
					"`dk ascending` (デフォルト) または `dk descending`"
				],
				[
					"settings",
					"オブジェクト",
					"->",
					"フォーミュラに渡す引数"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"順列ありの新規エンティティセレクション"
				]
			],
			"Summary": "順列ありの新規エンティティセレクションを返します"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"テキスト",
					"->",
					"検索条件 (文字列)"
				],
				[
					"formula",
					"オブジェクト",
					"->",
					"検索条件 (フォーミュラオブジェクト)"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー用の値"
				],
				[
					"querySettings",
					"オブジェクト",
					"->",
					"クエリオプション: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"*queryString* または *formula* に渡した検索条件に合致する、エンティティセレクション内のエンティティから構成された新しいエンティティセレクション"
				]
			],
			"Summary": "エンティティセレクションの全エンティティから、*queryString* または *formula* と任意の *value* 引数で指定した検索条件に合致するエンティティを検索します"
		},
		"queryPath": {
			"Syntax": "**.queryPath** : Text",
			"Summary": "実際に 4Dで実行されたクエリの詳細な情報"
		},
		"queryPlan": {
			"Syntax": "**.queryPlan** : Text",
			"Summary": "実行前のクエリの詳細な情報 (クエリプラン) を格納します"
		},
		"refresh()": {
			"Syntax": "**.refresh()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "ローカルの ORDAキャッシュにあるエンティティセレクションデータを即座に \"無効化\" します"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"処理を開始するインデックス)"
				],
				[
					"end",
					"Integer",
					"->",
					"終了インデックス (含まれない)"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"抜粋エンティティを格納した新しいエンティティセレクション (シャロウ・コピー)"
				]
			],
			"Summary": "エンティティセレクションの一部を、新規エンティティセレクションとして返します"
		},
		"sum()": {
			"Syntax": "**.sum**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"テキスト",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"実数",
					"<-",
					"エンティティセレクションの値の合計"
				]
			],
			"Summary": "*attributePath* に指定したエンティティセレクションの属性値の総和を返します"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**( { *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer } } ) : *Collection*<br>**.toCollection**( *filterString* : Text {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : *Collection*<br>**.toCollection**( *filterCol* : Collection {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : *Collection*",
			"Params": [
				[
					"filterString",
					"テキスト",
					"->",
					"抽出するエンティティの属性パスの文字列"
				],
				[
					"filterCol",
					"コレクション",
					"->",
					"抽出するエンティティの属性パスのコレクション"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: プライマリーキーを追加<br>`dk with stamp`: スタンプを追加"
				],
				[
					"begin",
					"Integer",
					"->",
					"開始インデックス"
				],
				[
					"howMany",
					"Integer",
					"->",
					"抽出するエンティティ数"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"エンティティセレクションの属性と値を格納したオブジェクトのコレクション"
				]
			],
			"Summary": "プロパティと値のセットを持つオブジェクト要素を格納するコレクションを作成し、返します"
		}
	},
	"fileClass": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"ファイルが正常に作成された場合に true、それ以外の場合は false"
				]
			],
			"Summary": "`File` オブジェクトのプロパティに基づいてディスク上にファイルを作成します"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"エイリアスまたはショートカットの作成先フォルダー"
				],
				[
					"aliasName",
					"テキスト",
					"->",
					"エイリアスまたはショートカットの名称"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"エイリアスリンクのタイプ"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"エイリアスまたはショートカットのファイル参照"
				]
			],
			"Summary": "エイリアス (macOS) またはショートカット (Windows) を作成します"
		},
		"delete()": {
			"Syntax": "**.delete( )**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "ファイルを削除します"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"テキスト",
					"->",
					"移動先でのファイルの完全な名称"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"移動したファイル"
				]
			],
			"Summary": "`File` オブジェクトを *destinationFolder* が指定する移行先へと移動すると同時に、*newName* を指定した場合は名称も変更します"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.File",
			"Params": [
				[
					"newName",
					"テキスト",
					"->",
					"ファイルの新しい完全な名称"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"名称変更されたファイル"
				]
			],
			"Summary": "ファイル名を *newName* に指定した名称に変更し、名称変更後の `File` オブジェクトを返します"
		},
		"setContent()": {
			"Syntax": "**.setContent** ( *content* : Blob )",
			"Params": [
				[
					"content",
					"BLOB",
					"->",
					"ファイルの新しいコンテンツ"
				]
			],
			"Summary": "*content* 引数の BLOB に保存されているデータを使用して、ファイルの全コンテンツを上書きします"
		},
		"setText()": {
			"Syntax": "**.setText** ( *text* : Text {; *charSetName* : Text { ; *breakMode* : Integer } } )<br>**.setText** ( *text* : Text {; *charSetNum* : Integer { ; *breakMode* : Integer } } )",
			"Params": [
				[
					"text",
					"テキスト",
					"->",
					"ファイルに保存するテキスト"
				],
				[
					"charSetName",
					"テキスト",
					"->",
					"文字セットの名前"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"文字セットの番号"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"改行の処理モード"
				]
			],
			"Summary": "*text* に渡されたテキストをファイルの新しいコンテンツとして書き込みます"
		}
	},
	"folderClass": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"フォルダーが正常に作成された場合には true、それ以外の場合は false"
				]
			],
			"Summary": "`Folder` オブジェクトのプロパティに基づいてディスク上にフォルダーを作成します"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"エイリアスまたはショートカットの作成先フォルダー"
				],
				[
					"aliasName",
					"テキスト",
					"->",
					"エイリアスまたはショートカットの名称"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"エイリアスリンクのタイプ"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"エイリアスまたはショートカットのフォルダー参照"
				]
			],
			"Summary": "エイリアス (macOS) またはショートカット (Windows) を作成します"
		},
		"delete()": {
			"Syntax": "**.delete**( { *option* : Integer } )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"フォルダー削除のオプション"
				]
			],
			"Summary": "フォルダーを削除します"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"テキスト",
					"->",
					"移動先でのフォルダーの完全な名称"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"移動したフォルダー"
				]
			],
			"Summary": "`Folder` オブジェクト (ソースフォルダー) を *destinationFolder* が指定する移行先へと移動すると同時に、*newName* を指定した場合は名称も変更します"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.Folder",
			"Params": [
				[
					"newName",
					"テキスト",
					"->",
					"フォルダーの新しい完全な名称"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"名称変更されたフォルダー"
				]
			],
			"Summary": "フォルダー名を *newName* に指定した名称に変更し、名称変更後の `Folder` オブジェクトを返します"
		}
	},
	"imapTransporterClass": {
		"addFlags()": {
			"Syntax": "**.addFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br>**.addFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br>**.addFlags**( *msgIDs* : Longint  ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"コレクション",
					"->",
					"文字列のコレクション: メッセージの固有ID (テキスト型)<br> テキスト: メッセージの固有ID<br> 倍長整数 (IMAP all): 選択されたメールボックス内の全メッセージ"
				],
				[
					"keywords",
					"オブジェクト",
					"->",
					"追加するキーワードフラグ"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"addFlags処理のステータス"
				]
			],
			"Summary": "`msgIDs` のメッセージに対して、`keywords` で指定したフラグを追加します"
		},
		"append()": {
			"Syntax": "**.append**( *mailObj* : Object ; *destinationBox* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"mailObj",
					"オブジェクト",
					"->",
					"Email オブジェクト"
				],
				[
					"destinationBox",
					"テキスト",
					"->",
					"Emailオブジェクトを受信するメールボックス"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"文字セット情報を格納したオブジェクト"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"delete処理のステータス"
				]
			],
			"Summary": "`destinationBox` に指定したメールボックスに、`mailObj` のメールを追加します"
		},
		"checkConnectionDelay": {
			"Syntax": "**.checkConnectionDelay** : Integer",
			"Summary": "サーバー接続をチェックするまでの最長時間 (秒単位)"
		},
		"copy()": {
			"Syntax": "**.copy**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br>**.copy**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"コレクション",
					"->",
					"メッセージの固有ID のコレクション (テキスト)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: 選択されたメールボックスの全メッセージ"
				],
				[
					"destinationBox",
					"テキスト",
					"->",
					"メッセージのコピー先のメールボックス"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"copy処理のステータス"
				]
			],
			"Summary": "*msgsIDs* または *allMsgs* で定義されたメッセージを IMAP サーバーの *destinationBox* へとコピーします"
		},
		"delete()": {
			"Syntax": "**.delete**( *msgsIDs* : Collection ) : Object<br>**.delete**( *allMsgs* : Integer ) : Object",
			"Params": [
				[
					"msgsIDs",
					"コレクション",
					"->",
					"メッセージの固有ID のコレクション (テキスト)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: 選択されたメールボックスの全メッセージ"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"delete処理のステータス"
				]
			],
			"Summary": "`msgsIDs` または `allMsgs` が指定するメッセージに対して \"削除済み\" フラグを設定します"
		},
		"expunge()": {
			"Syntax": "**.expunge()** : Object",
			"Summary": "\"deleted\" フラグがつけられたメッセージをすべてIMAP メールサーバーから削除します"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo**( { *name* : Text }) : Object",
			"Params": [
				[
					"name",
					"テキスト",
					"->",
					"メールボックスの名称"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"boxInfo オブジェクト"
				]
			],
			"Summary": "*name* が指定するメールボックスに対応する `boxInfo` オブジェクトを返します"
		},
		"getBoxList()": {
			"Syntax": "**.getBoxList()** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"mailbox オブジェクトのコレクション"
				]
			],
			"Summary": "利用可能なメールボックスの情報を mailbox オブジェクトのコレクションとしてを返します"
		},
		"getDelimiter()": {
			"Syntax": "**.getDelimiter()** : Text",
			"Params": [
				[
					"戻り値",
					"テキスト",
					"<-",
					"階層区切り文字"
				]
			],
			"Summary": "メールボックス名で階層レベルを区切るのに使用される文字を返します"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber*: Integer { ; *options* : Object } ) : Object<br>**.getMail**( *msgID*: Text { ; *options* : Object } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"メッセージのシーケンス番号"
				],
				[
					"msgID",
					"テキスト",
					"->",
					"メッセージの固有ID"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"メッセージ管理オプション"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"Email オブジェクト"
				]
			],
			"Summary": "`IMAP_transporter` が指定するメールボックス内の、*msgNumber* または *msgID* に対応するメールを `Email` オブジェクトとして返します"
		},
		"getMails()": {
			"Syntax": "**.getMails**( *ids* : Collection { ; *options* : Object } ) : Object<br>**.getMails**( *startMsg* : Integer ; *endMsg* : Integer { ; *options* : Object } ) : Object",
			"Params": [
				[
					"ids",
					"コレクション",
					"->",
					"メッセージID のコレクション"
				],
				[
					"startMsg",
					"Integer",
					"->",
					"先頭メッセージのシーケンス番号"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"最後のメッセージのシーケンス番号"
				],
				[
					"options",
					"オブジェクト",
					"->",
					"メッセージ管理オプション"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"次のコレクションを格納したオブジェクト:<br><ul><li>Email オブジェクト のコレクション</li><li>見つからなかったメッセージの ID または番号のコレクション</li></ul>"
				]
			],
			"Summary": "`Email` オブジェクトのコレクションを格納したオブジェクトを返します"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer { ; *updateSeen* : Boolean } ) : Blob<br>**.getMIMEAsBlob**( *msgID* : Text { ; *updateSeen* : Boolean } ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"メッセージのシーケンス番号"
				],
				[
					"msgID",
					"テキスト",
					"->",
					"メッセージの固有ID"
				],
				[
					"updateSeen",
					"ブール",
					"->",
					"true 時には、メールボックス内でメッセージを \"既読\" にします。 false 時にはメッセージの状態は変化しません。"
				],
				[
					"戻り値",
					"BLOB",
					"<-",
					"メールサーバーから返された MIME文字列の BLOB"
				]
			],
			"Summary": "`IMAP_transporter` が指定するメールボックス内の、*msgNumber* または *msgID* に対応するメッセージの MIMEコンテンツを格納した BLOB を返します"
		},
		"move()": {
			"Syntax": "**.move**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br>**.move**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"コレクション",
					"->",
					"メッセージの固有ID のコレクション (テキスト)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: 選択されたメールボックスの全メッセージ"
				],
				[
					"destinationBox",
					"テキスト",
					"->",
					"メッセージの移動先のメールボックス"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"move処理のステータス"
				]
			],
			"Summary": "*msgsIDs* または *allMsgs* で定義されたメッセージを IMAP サーバーの *destinationBox* へと移動します"
		},
		"numToID()": {
			"Syntax": "**.numToID**( *startMsg* : Integer ; *endMsg* : Integer ) : Collection",
			"Params": [
				[
					"startMsg",
					"Integer",
					"->",
					"先頭メッセージのシーケンス番号"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"最後のメッセージのシーケンス番号"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"固有ID のコレクション"
				]
			],
			"Summary": "*startMsg* および *endMsg* で指定された連続した範囲のメッセージのシーケンス番号を IMAP固有IDへと変換します"
		},
		"removeFlags()": {
			"Syntax": "**.removeFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br>**.removeFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br>**.removeFlags**( *msgIDs* : Longint ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"コレクション",
					"->",
					"文字列のコレクション: メッセージの固有ID (テキスト型)<br> テキスト: メッセージの固有ID<br> 倍長整数 (IMAP all): 選択されたメールボックス内の全メッセージ"
				],
				[
					"keywords",
					"オブジェクト",
					"->",
					"削除するキーワードフラグ"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"removeFlags処理のステータス"
				]
			],
			"Summary": "`msgIDs` のメッセージに対して、`keywords` で指定したフラグを削除します"
		},
		"searchMails()": {
			"Syntax": "**.searchMails**( *searchCriteria* : Text ) : Collection",
			"Params": [
				[
					"searchCriteria",
					"テキスト",
					"->",
					"検索条件"
				],
				[
					"戻り値",
					"コレクション",
					"<-",
					"メッセージ番号のコレクション"
				]
			],
			"Summary": "カレントメールボックスにおいて *searchCriteria* の検索条件に合致するメッセージを検索します"
		},
		"selectBox()": {
			"Syntax": "**.selectBox**( *name* : Text { ; *state* : Integer } ) : Object",
			"Params": [
				[
					"name",
					"テキスト",
					"->",
					"メールボックスの名称"
				],
				[
					"state",
					"整数",
					"->",
					"メールボックスのアクセス状態"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"boxInfo オブジェクト"
				]
			],
			"Summary": "*name* に指定したメールボックスをカレントメールボックスとして選択します"
		}
	},
	"pop3TransporterClass": {
		"delete()": {
			"Syntax": "**.delete**( *msgNumber* : Integer )",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"削除するメッセージの番号"
				]
			],
			"Summary": "*msgNumber* で指定したメールメッセージに対して、POP3サーバーから削除するためのフラグを立てます"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo()** : Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"boxInfo オブジェクト"
				]
			],
			"Summary": "対象の `POP3 transporter` が指定するメールボックスに対応する `boxInfo` オブジェクトを返します"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber* : Integer ) : Object",
			"Params": [
				[
					"msgNumber",
					"整数",
					"->",
					"リスト中のメッセージの番号"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"Email オブジェクト"
				]
			],
			"Summary": "`POP3 transporter` が指定するメールボックス内の、*msgNumber* に対応するメールを `Email` オブジェクトとして返します"
		},
		"getMailInfo()": {
			"Syntax": "**.getMailInfo**( *msgNumber* : Integer ) : Object",
			"Params": [
				[
					"msgNumber",
					"整数",
					"->",
					"リスト中のメッセージの番号"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"MailInfo オブジェクト"
				]
			],
			"Summary": "`POP3 transporter` が指定するメールボックス内の、*msgNumber* に対応するメールの `mailInfo` オブジェクトを返します"
		},
		"getMailInfoList()": {
			"Syntax": "**.getMailInfoList()** : Collection",
			"Params": [
				[
					"戻り値",
					"コレクション",
					"<-",
					"`mailInfo` オブジェクトのコレクション"
				]
			],
			"Summary": "`POP3 transporter`が指定するメールボックス内の全メッセージについて記述した `mailInfo` オブジェクトのコレクションを返します"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer ) : Blob",
			"Params": [
				[
					"msgNumber",
					"整数",
					"->",
					"リスト中のメッセージの番号"
				],
				[
					"戻り値",
					"BLOB",
					"<-",
					"メールサーバーから返された MIME文字列の BLOB"
				]
			],
			"Summary": "`POP3_transporter` が指定するメールボックス内の、*msgNumber* に対応するメッセージの MIMEコンテンツを格納した BLOB を返します"
		},
		"undeleteAll()": {
			"Syntax": "**.undeleteAll()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "`POP3_transporter` 内のメールに設定された削除フラグをすべて除去します"
		}
	},
	"sessionClass": {
		"clearPrivileges()": {
			"Syntax": "**.clearPrivileges()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "対象セッションに紐づいているアクセス権をすべて削除します"
		},
		"expirationDate": {
			"Syntax": "**.expirationDate** : Text",
			"Summary": "セッションcookie の有効期限"
		},
		"hasPrivilege()": {
			"Syntax": "**.hasPrivilege**( *privilege* : Text ) : Boolean",
			"Params": [
				[
					"privilege",
					"テキスト",
					"<-",
					"確認するアクセス権の名称"
				],
				[
					"戻り値",
					"ブール",
					"<-",
					"セッションが *privilege* のアクセス権を持っていれば true、それ以外は false"
				]
			],
			"Summary": "対象セッションに *privilege* のアクセス権が紐づいていれば true、でなければ false を返します"
		},
		"idleTimeout": {
			"Syntax": "**.idleTimeout** : Integer",
			"Summary": "対象セッションが 4D によって終了されるまでの、非アクティブタイムアウト時間 (分単位)"
		},
		"isGuest()": {
			"Syntax": "**.isGuest()** : Boolean",
			"Params": [
				[
					"戻り値",
					"ブール",
					"<-",
					"ゲストセッションの場合は true、それ以外は false"
				]
			],
			"Summary": "アクセス権のないゲストセッションの場合は true を返します"
		},
		"setPrivileges()": {
			"Syntax": "**.setPrivileges**( *privilege* : Text )<br>**.setPrivileges**( *privileges* : Collection )<br>**.setPrivileges**( *settings* : Object )",
			"Params": [
				[
					"privilege",
					"テキスト",
					"->",
					"アクセス権の名称"
				],
				[
					"privileges",
					"コレクション",
					"->",
					"アクセス権の名称のコレクション"
				],
				[
					"settings",
					"オブジェクト",
					"->",
					"\"privileges\" プロパティ (文字列またはコレクション) を持つオブジェクト"
				]
			],
			"Summary": "引数として渡したアクセス権をセッションと紐づけます"
		},
		"storage": {
			"Syntax": "**.storage** : Object",
			"Summary": "Webクライアントのリクエストに対応するために情報を保存しておける共有オブジェクト"
		},
		"userName": {
			"Syntax": "**.userName** : Text",
			"Summary": "セッションと紐づいたユーザー名"
		}
	},
	"signalClass": {
		"description": {
			"Syntax": "**.description** : Text",
			"Summary": "`Signal` オブジェクトのカスタムな詳細"
		},
		"signaled": {
			"Syntax": "**.signaled** : Boolean",
			"Summary": "`Signal` オブジェクトの現在の状態"
		},
		"trigger()": {
			"Syntax": "**.trigger( )**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "シグナルオブジェクトの `signaled` プロパティを **true** に設定します"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : Boolean",
			"Params": [
				[
					"timeout",
					"実数",
					"->",
					"シグナルの最大待機時間 (秒単位)"
				],
				[
					"戻り値",
					"ブール",
					"<-",
					"`.signaled` プロパティの状態"
				]
			],
			"Summary": "シグナルオブジェクトの `.signaled` プロパティが **true** になるか、任意の *timeout* に指定したタイムアウト時間が経過するまで、カレントプロセスを待機させます"
		}
	},
	"smtpTransporterClass": {
		"keepAlive": {
			"Syntax": "**.keepAlive** : Boolean",
			"Summary": "`transporter` オブジェクトが抹消されるまで、SMTP接続が維持されなければならない場合に **true**"
		},
		"send()": {
			"Syntax": "**.send**( *mail* : Object ) : Object",
			"Params": [
				[
					"mail",
					"オブジェクト",
					"->",
					"送信する メール"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"SMTP ステータス"
				]
			],
			"Summary": "*mail* 引数が指定するメールメッセージを、`transporter` オブジェクトが定義する SMTPサーバーへと送信し、ステータスオブジェクトを返します"
		}
	},
	"Transporter": {
		"acceptUnsecureConnection": {
			"Syntax": "**.acceptUnsecureConnection** : Boolean",
			"Summary": "暗号化されていない接続の確立が許可されてれば **true**"
		},
		"authenticationMode": {
			"Syntax": "**.authenticationMode** : Text",
			"Summary": "メールサーバーのセッションを開くのに使用される認証モード"
		},
		"bodyCharset": {
			"Syntax": "**.bodyCharset** : Text",
			"Summary": "メール本文で使用される文字セットとエンコーディング"
		},
		"connectionTimeOut": {
			"Syntax": "**.connectionTimeOut** : Integer",
			"Summary": "サーバー接続の確立までに待機する最長時間 (秒単位)"
		},
		"headerCharset": {
			"Syntax": "**.headerCharset** : Text",
			"Summary": "メールヘッダーで使用される文字セットとエンコーディング"
		},
		"host": {
			"Syntax": "**.host** : Text",
			"Summary": "ホストサーバーの名前または IPアドレス"
		},
		"logFile": {
			"Syntax": "**.logFile** : Text",
			"Summary": "メール接続に対して定義された拡張ログファイル (あれば) へのフルパス"
		},
		"port": {
			"Syntax": "**.port** : Integer",
			"Summary": "メール通信に使用されるポート番号"
		},
		"sendTimeOut": {
			"Syntax": "**.sendTimeOut** : Integer",
			"Summary": "`.send( )` 呼び出し時のタイムアウト時間 (秒単位)"
		},
		"user": {
			"Syntax": "**.user** : Text",
			"Summary": "メールサーバーでの認証に使用されたユーザー名"
		},
		"checkConnection()": {
			"Syntax": "**.checkConnection()** : Object",
			"Params": [
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"transporter オブジェクト接続のステータス"
				]
			],
			"Summary": "transporter オブジェクトが保存する情報を使用して接続をチェックします"
		}
	},
	"webServerClass": {
		"accessKeyDefined": {
			"Syntax": "**.accessKeyDefined** : Boolean",
			"Summary": "Webサーバーの設定にアクセスキーが定義されていれば true"
		},
		"certificateFolder": {
			"Syntax": "**.certificateFolder** : Text",
			"Summary": "認証ファイルが保存されているフォルダー"
		},
		"characterSet": {
			"Syntax": "**.characterSet** : Number<br>**.characterSet** : Text",
			"Summary": "アプリケーションに接続してくるブラウザーとの通信に 4D Webサーバーが使用すべき文字セット"
		},
		"cipherSuite": {
			"Syntax": "**.cipherSuite** : Text",
			"Summary": "保護されたプロトコルのために使用される暗号スイートリスト"
		},
		"CORSEnabled": {
			"Syntax": "**.CORSEnabled** : Boolean",
			"Summary": "Web サーバーの CORS (*Cross-origin resource sharing*、オリジン間リソース共有) サービス状態"
		},
		"CORSSettings": {
			"Syntax": "**.CORSSettings** : Collection",
			"Summary": "CORSサービスに許可されたホストとメソッドの一覧"
		},
		"debugLog": {
			"Syntax": "**.debugLog** : Number",
			"Summary": "HTTPリクエストログファイルの状態"
		},
		"defaultHomepage": {
			"Syntax": "**.defaultHomepage** : Text",
			"Summary": "デフォルトのホームページの名称"
		},
		"HSTSEnabled": {
			"Syntax": "**.HSTSEnabled** : Boolean",
			"Summary": "HTTP Strict Transport Security (HSTS) 状態"
		},
		"HSTSMaxAge": {
			"Syntax": "**.HSTSMaxAge** : Number",
			"Summary": "新規クライアント接続ごとに HSTS がアクティブな最長時間 (秒単位)"
		},
		"HTTPCompressionLevel": {
			"Syntax": "**.HTTPCompressionLevel** : Number",
			"Summary": "4D HTTPサーバーの HTTP圧縮通信 (クライアントリクエストまたはサーバーレスポンス) における圧縮レベル"
		},
		"HTTPCompressionThreshold": {
			"Syntax": "**.HTTPCompressionThreshold** : Number",
			"Summary": "HTTP圧縮のしきい値 (バイト単位)。このサイズ未満のリクエストについては、通信が圧縮されません"
		},
		"HTTPEnabled": {
			"Syntax": "**.HTTPEnabled** : Boolean",
			"Summary": "HTTPプロトコルの状態"
		},
		"HTTPPort": {
			"Syntax": "**.HTTPPort** : Number",
			"Summary": "HTTP のリッスンIPポート番号"
		},
		"HTTPTrace": {
			"Syntax": "**.HTTPTrace** : Boolean",
			"Summary": "`HTTP TRACE` の有効化状態"
		},
		"HTTPSEnabled": {
			"Syntax": "**.HTTPSEnabled** : Boolean",
			"Summary": "HTTPSプロトコル状態"
		},
		"HTTPSPort": {
			"Syntax": "**.HTTPSPort** : Number",
			"Summary": "HTTPS のリッスンIPポート番号"
		},
		"inactiveProcessTimeout": {
			"Syntax": "**.inactiveProcessTimeout** : Number",
			"Summary": "旧式セッションプロセスの非アクティブタイムアウト時間 (分単位)"
		},
		"inactiveSessionTimeout": {
			"Syntax": "**.inactiveSessionTimeout** : Number",
			"Summary": "旧式セッションの非アクティブタイムアウト時間 (分単位; cookie にて設定)"
		},
		"IPAddressToListen": {
			"Syntax": "**.IPAddressToListen** : Text",
			"Summary": "4D Webサーバーが HTTPリクエストを受信する IPアドレス"
		},
		"isRunning": {
			"Syntax": "**.isRunning** : Boolean",
			"Summary": "Webサーバーの実行状態"
		},
		"keepSession": {
			"Syntax": "**.keepSession** : Boolean",
			"Summary": "Webサーバーで旧式セッションが有効されている場合に true、それ以外は false"
		},
		"logRecording": {
			"Syntax": "**.logRecording** : Number",
			"Summary": "リクエストログ (logweb.txt) の記録オプション値"
		},
		"maxConcurrentProcesses": {
			"Syntax": "**.maxConcurrentProcesses** : Number",
			"Summary": "Webサーバーにてサポートする最大同時Webプロセス数"
		},
		"maxRequestSize": {
			"Syntax": "**.maxRequestSize** : Number",
			"Summary": "Webサーバーが処理してよい HTTPリクエスト (POST) の最大サイズ (バイト単位)"
		},
		"maxSessions": {
			"Syntax": "**.maxSessions** : Number",
			"Summary": "旧式セッションにおける同時セッションの最大数"
		},
		"minTLSVersion": {
			"Syntax": "**.minTLSVersion** : Number",
			"Summary": "接続に必要な最低TLSバージョン"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "Webサーバーアプリケーションの名称"
		},
		"openSSLVersion": {
			"Syntax": "**.openSSLVersion** : Text",
			"Summary": "使用されている OpenSSLライブラリのバージョン"
		},
		"perfectForwardSecrecy": {
			"Syntax": "**.perfectForwardSecrecy** : Boolean",
			"Summary": "サーバーの PFS利用可否状況"
		},
		"rootFolder": {
			"Syntax": "**.rootFolder** : Text",
			"Summary": "Webサーバーのルートフォルダーのパス"
		},
		"scalableSession": {
			"Syntax": "**.scalableSession** : Boolean",
			"Summary": "Webサーバーがスケーラブルセッションを使用している場合に true、それ以外は false"
		},
		"sessionCookieDomain": {
			"Syntax": "**.sessionCookieDomain** : Text",
			"Summary": "セッションcookie の \"domain\" フィールド"
		},
		"sessionCookieName": {
			"Syntax": "**.sessionCookieName** : Text",
			"Summary": "セッションID の保存に使用されるセッションcookie の名称"
		},
		"sessionCookiePath": {
			"Syntax": "**.sessionCookiePath** : Text",
			"Summary": "セッションcookie の \"path\" フィールド"
		},
		"sessionIPAddressValidation": {
			"Syntax": "**.sessionIPAddressValidation** : Boolean",
			"Summary": "セッションcookie の IP アドレス検証"
		},
		"start()": {
			"Syntax": "**.start**() : Object<br>**.start**( *settings* : Object ) : Object",
			"Params": [
				[
					"settings",
					"オブジェクト",
					"->",
					"開始時の Webサーバー設定"
				],
				[
					"戻り値",
					"オブジェクト",
					"<-",
					"Webサーバー開始のステータス"
				]
			],
			"Summary": "対象の Webサーバーを開始させます"
		},
		"stop()": {
			"Syntax": "**.stop()**",
			"Params": [
				[
					"",
					"",
					"",
					"このコマンドは引数を必要としません"
				]
			],
			"Summary": "対象の Webサーバーを停止します"
		}
	},
	"ZipArchive": {
		"root": {
			"Syntax": "**.root** : 4D.ZipFolder",
			"Summary": "ZIPアーカイブのコンテンツにアクセスするためのバーチャルフォルダー"
		}
	},
	"File": {
		"_inheritedFrom_": "Document"
	},
	"Folder": {
		"_inheritedFrom_": "Directory"
	},
	"ZipFile": {
		"_inheritedFrom_": "Document"
	},
	"ZipFolder": {
		"_inheritedFrom_": "Directory"
	},
	"SMTPTransporter": {
		"_inheritedFrom_": "Transporter"
	},
	"POP3Transporter": {
		"_inheritedFrom_": "Transporter"
	},
	"IMAPTransporter": {
		"_inheritedFrom_": "Transporter"
	}
}