"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[78040],{892020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var s=t(474848),o=t(28453);const d={id:"method-get-code",title:"METHOD GET CODE",slug:"/commands/method-get-code",displayed_sidebar:"docs"},r=void 0,i={id:"commands-legacy/method-get-code",title:"METHOD GET CODE",description:"METHOD GET CODE ( path ; code {; option} {; *} )",source:"@site/versioned_docs/version-20-R7/commands-legacy/method-get-code.md",sourceDirName:"commands-legacy",slug:"/commands/method-get-code",permalink:"/docs/commands/method-get-code",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands-legacy%2Fmethod-get-code.md%20(20-R7)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R7",frontMatter:{id:"method-get-code",title:"METHOD GET CODE",slug:"/commands/method-get-code",displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"METHOD GET ATTRIBUTES",permalink:"/docs/commands/method-get-attributes"},next:{title:"METHOD GET COMMENTS",permalink:"/docs/commands/method-get-comments"}},a={},c=[{value:"Description",id:"description",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"See also",id:"see-also",level:4}];function h(e){const n={a:"a",br:"br",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"METHOD GET CODE"})," ( ",(0,s.jsx)(n.em,{children:"path"})," ; ",(0,s.jsx)(n.em,{children:"code"})," {; ",(0,s.jsx)(n.em,{children:"option"}),"} {; *} )"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"path"}),(0,s.jsx)(n.td,{children:"Text, Text array"}),(0,s.jsx)(n.td,{children:"\u2192"}),(0,s.jsx)(n.td,{children:"Text or Text array containing one or more method path(s)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"code"}),(0,s.jsx)(n.td,{children:"Text, Text array"}),(0,s.jsx)(n.td,{children:"\u2190"}),(0,s.jsx)(n.td,{children:"Code of designated method(s)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"option"}),(0,s.jsx)(n.td,{children:"Integer"}),(0,s.jsx)(n.td,{children:"\u2192"}),(0,s.jsx)(n.td,{children:"0 or omitted = simple export (without tokens), 1 = export with tokens"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"*"}),(0,s.jsx)(n.td,{children:"Operator"}),(0,s.jsx)(n.td,{children:"\u2192"}),(0,s.jsx)(n.td,{children:"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This command is not thread-safe, it cannot be used in preemptive code."})}),"\n",(0,s.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"METHOD GET CODE"})," command returns, in the ",(0,s.jsx)(n.em,{children:"code"})," parameter, the contents of the method(s) designated by the ",(0,s.jsx)(n.em,{children:"path"})," parameter. This command can return the code of all types of methods: database methods, class definitions, triggers, project methods, form methods and object methods."]}),"\n",(0,s.jsx)(n.p,{children:"You can use two types of syntaxes, based either on text arrays, or text variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"\xa0var tVpath : Text\xa0// text variables\n\xa0var tVcode : Text\n\xa0METHOD GET CODE(tVpath;tVcode)\xa0// code of a single method\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"\xa0ARRAY TEXT(arrPaths;0)\xa0// text arrays\n\xa0ARRAY TEXT(arrCodes;0)\n\xa0METHOD GET CODE(arrPaths;arrCodes)\xa0// code of several methods\n"})}),"\n",(0,s.jsx)(n.p,{children:"You cannot mix the two syntaxes."}),"\n",(0,s.jsxs)(n.p,{children:["If you pass an invalid pathname, the ",(0,s.jsx)(n.em,{children:"code"})," parameter is left empty and an error is generated."]}),"\n",(0,s.jsxs)(n.p,{children:["In the text of the ",(0,s.jsx)(n.em,{children:"code"})," generated by this command:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['Command names are written in English for all versions of 4D, except when you use a French version and check the "Use regional system settings" preference (see ',(0,s.jsx)(n.a,{href:"/docs/commands/is-a-list",children:"Is a list"}),"). When you use the ",(0,s.jsx)(n.em,{children:"option"})," parameter, the code can contain language tokens in order to make it independent from the 4D programming language and version (see below)."]}),"\n",(0,s.jsx)(n.li,{children:"To increase code readability, text is indented with tab characters based on programming structures, like in the Method editor."}),"\n",(0,s.jsx)(n.li,{children:"A line is added in the header of the code generated containing metadata used when importing code, for example:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:'\xa0\xa0// %attributes = {"lang":"en","invisible":true,"folder":"Web3"}  \n'})}),"\n",(0,s.jsxs)(n.p,{children:['During an import, this line is not imported, it is only used to set the corresponding attributes (attributes that are not specified are reset to their default value). The "lang" attribute sets the export language and prevents an import into an application in a different language (in this case, an error is generated). The "folder" attribute contains the name of the method\u2019s parent folder; it is not shown when the method does not have a parent folder.',(0,s.jsx)(n.br,{}),"\nAdditional attributes can be defined. For more information, refer to the description of the ",(0,s.jsx)(n.a,{href:"/docs/commands/method-set-attributes",children:"METHOD SET ATTRIBUTES"})," command."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.em,{children:"option"})," parameter allows you to select the code export mode with respect to the tokenized language elements of the method(s):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If you pass 0 or omit the ",(0,s.jsx)(n.em,{children:"option"})," parameter, the method code is exported without tokens, i.e. just like it is displayed in the Method editor."]}),"\n",(0,s.jsxs)(n.li,{children:["If you pass 1 or the Code with tokens constant, the method code is exported with tokens, i.e. tokenized elements are followed by their internal reference in the ",(0,s.jsx)(n.em,{children:"code"}),' exported contents. For example, the expression "',(0,s.jsx)(n.a,{href:"/docs/commands/string",children:"String"}),'(a)" is exported "',(0,s.jsx)(n.a,{href:"/docs/commands/string",children:"String"}),':C10(a)", where "C10" is the internal reference of the ',(0,s.jsx)(n.a,{href:"/docs/commands/string",children:"String"})," command."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Tokenized language elements include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"4D commands and constants,"}),"\n",(0,s.jsx)(n.li,{children:"Table and field names,"}),"\n",(0,s.jsx)(n.li,{children:"4D plug-in commands."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Code exported with tokens is independent from any subsequent renaming of language elements. Thanks to tokens, code provided as text will always be interpreted correctly by 4D, whether by means of the ",(0,s.jsx)(n.a,{href:"/docs/commands/method-set-code",children:"METHOD SET CODE"})," command or even by copy/paste. For more information about the syntax of 4D tokens, please refer to ",(0,s.jsx)(n.em,{children:"Using tokens in formulas"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If the command is executed from a component, it applies by default to the component methods. If you pass the ",(0,s.jsx)(n.em,{children:"*"})," parameter, it accesses the methods of the host database."]}),"\n",(0,s.jsx)(n.h4,{id:"example-1",children:"Example 1"}),"\n",(0,s.jsxs)(n.p,{children:["Refer to the example of the ",(0,s.jsx)(n.a,{href:"/docs/commands/method-set-code",children:"METHOD SET CODE"})," command."]}),"\n",(0,s.jsx)(n.h4,{id:"example-2",children:"Example 2"}),"\n",(0,s.jsxs)(n.p,{children:["This example illustrates the effect of the ",(0,s.jsx)(n.em,{children:"option"})," parameter."]}),"\n",(0,s.jsx)(n.p,{children:'You want to export the following "simple_init" method:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"\xa0Case of\n\xa0\xa0\xa0\xa0:(Form event code=On Load)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0ALL RECORDS([Customer])\n\xa0End case\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you execute the following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:'\xa0var $path : Text\n\xa0var $contents : Text\n\xa0$path:=METHOD Get path(Path project method;"simple_init")\n\xa0METHOD GET CODE($path;$contents;0)\xa0//no tokens\n\xa0TEXT TO DOCUMENT("simple_init.txt";$contents)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The resulting document will contain:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-RAW",children:'\xa0 //%attributes = {"lang":"en"} comment added and reserved by 4DCase of\xa0\xa0\xa0 : (Form event code=On Load)\xa0\xa0\xa0 \xa0\xa0\xa0 ALL RECORDS([Customer])End case\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you execute the following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:'\xa0var $path : Text\n\xa0var $contents : Text\n\xa0$path:=METHOD Get path(Path project method;"simple_init")\n\xa0METHOD GET CODE($path;$contents;Code with tokens)\xa0//use tokens\n\xa0TEXT TO DOCUMENT("simple_init.txt";$contents)\n'})}),"\n",(0,s.jsx)(n.p,{children:"The resulting document will contain:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-RAW",children:'\xa0 //%attributes = {"lang":"en"} comment added and reserved by 4DCase of\xa0\xa0\xa0 : (Form event code:C388=On Load:K2:1)\xa0\xa0\xa0 \xa0\xa0\xa0 ALL RECORDS:C47([Customer:1])End case\n'})}),"\n",(0,s.jsx)(n.h4,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/commands/method-set-code",children:"METHOD SET CODE"}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.em,{children:"Using tokens in formulas"})]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(296540);const o={},d=s.createContext(o);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);