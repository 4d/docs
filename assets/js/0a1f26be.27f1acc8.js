"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["39687"],{482069:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>i,toc:()=>d,default:()=>h,metadata:()=>s,assets:()=>c,contentTitle:()=>l});var s=JSON.parse('{"id":"aikit/Classes/openaitool","title":"OpenAITool","description":"The OpenAITool class represents a tool that can be called by the OpenAI model during a conversation. Tools allow the AI to perform specific functions and interact with external systems or retrieve information.","source":"@site/versioned_docs/version-21/aikit/Classes/OpenAITool.md","sourceDirName":"aikit/Classes","slug":"/aikit/Classes/openaitool","permalink":"/docs/aikit/Classes/openaitool","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20aikit%2FClasses%2FOpenAITool.md%20(21)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"21","frontMatter":{"id":"openaitool","title":"OpenAITool"},"sidebar":"docs","previous":{"title":"OpenAIResult","permalink":"/docs/aikit/Classes/openairesult"},"next":{"title":"OpenAIVision","permalink":"/docs/aikit/Classes/openaivision"}}'),o=t(785893),r=t(250065);let i={id:"openaitool",title:"OpenAITool"},l="OpenAITool",c={},d=[{value:"Properties",id:"properties",level:2},{value:"Root Properties",id:"root-properties",level:3},{value:"Common Properties",id:"common-properties",level:3},{value:"Function-specific Properties",id:"function-specific-properties",level:3},{value:"Constructor",id:"constructor",level:2},{value:"new()",id:"new",level:3},{value:"Supported formats",id:"supported-formats",level:4},{value:"Integration with Chat Completions",id:"integration-with-chat-completions",level:2},{value:"See Also",id:"see-also",level:2}];function a(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"openaitool",children:"OpenAITool"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"OpenAITool"})," class represents a tool that can be called by the OpenAI model during a conversation. Tools allow the AI to perform specific functions and interact with external systems or retrieve information."]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/docs/aikit/Classes/openaimessage",children:"OpenAIMessage"})," to see how to responds to a tool call."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," The tool calls are handled automatically when using ",(0,o.jsx)(n.a,{href:"/docs/aikit/Classes/openaichathelper",children:"OpenAIChatHelper"})," with ",(0,o.jsx)(n.code,{children:"autoHandleToolCalls"})," enabled."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(n.h3,{id:"root-properties",children:"Root Properties"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"type"})}),(0,o.jsx)(n.td,{children:"Text"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:'"function"'})}),(0,o.jsxs)(n.td,{children:["The type of tool. Currently supports ",(0,o.jsx)(n.code,{children:'"function"'}),", ",(0,o.jsx)(n.code,{children:'"custom"'}),", and other built-in types."]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"strict"})}),(0,o.jsx)(n.td,{children:"Boolean"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"False"})}),(0,o.jsx)(n.td,{children:"Whether to enforce strict schema validation for function parameters."})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"common-properties",children:"Common Properties"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"name"})}),(0,o.jsx)(n.td,{children:"Text"}),(0,o.jsx)(n.td,{children:"The name of the tool, which works as an identifier."})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"description"})}),(0,o.jsx)(n.td,{children:"Text"}),(0,o.jsx)(n.td,{children:"Description of the tool to help the LLM decide when to use it."})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"function-specific-properties",children:"Function-specific Properties"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"parameters"})}),(0,o.jsx)(n.td,{children:"Object"}),(0,o.jsx)(n.td,{children:"Parameters definition for the function using JSON schema format."})]})})]}),"\n",(0,o.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(n.h3,{id:"new",children:"new()"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"new"}),"(",(0,o.jsx)(n.em,{children:"object"})," : Object) : OpenAITool"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Parameter"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.em,{children:"object"})}),(0,o.jsx)(n.td,{children:"Object"}),(0,o.jsx)(n.td,{children:"Configuration object for the tool"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Result"}),(0,o.jsx)(n.td,{children:"OpenAITool"}),(0,o.jsx)(n.td,{children:"New instance of OpenAITool"})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"Creates a new OpenAITool instance. The constructor accepts both simplified format and OpenAI API format."}),"\n",(0,o.jsx)(n.h4,{id:"supported-formats",children:"Supported formats"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Simplified format:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-4d",children:'var $tool := cs.OpenAITool.new({ \\\n  name: "get_weather"; \\\n  description: "Get current weather for a location"; \\\n  parameters: { \\\n    type: "object"; \\\n    properties: { \\\n      location: {type: "string"; description: "City name"} \\\n    }; \\\n    required: ["location"] \\\n  } \\\n})\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"OpenAI API format:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-4d",children:'var $tool := cs.OpenAITool.new({ \\\n  type: "function"; \\\n  strict: True; \\\n  function: { \\\n    name: "get_weather"; \\\n    description: "Get current weather for a location"; \\\n    parameters: { \\\n      type: "object"; \\\n      properties: { \\\n        location: {type: "string"; description: "City name"} \\\n      }; \\\n      required: ["location"] \\\n    } \\\n  } \\\n})\n'})}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-chat-completions",children:"Integration with Chat Completions"}),"\n",(0,o.jsxs)(n.p,{children:["Tools are typically used with the ",(0,o.jsx)(n.code,{children:"OpenAIChatCompletionsParameters.tools"})," property:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-4d",children:'var $parameters := cs.AIKit.OpenAIChatCompletionsParameters.new({ \\\n  model: "gpt-4o-mini"; \\\n  tools: [$tool1; $tool2; $tool3] \\\n})\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note:"})," You can pass plain objects directly - they will be automatically converted to ",(0,o.jsx)(n.code,{children:"OpenAITool"})," instances. There's no need to explicitly create ",(0,o.jsx)(n.code,{children:"OpenAITool"})," objects."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/aikit/Classes/openaichatcompletionsparameters",children:"OpenAIChatCompletionsParameters"})," - For tool configuration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/aikit/Classes/openaichathelper",children:"OpenAIChatHelper"})," - For automatic tool call handling"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/docs/aikit/Classes/openaimessage",children:"OpenAIMessage"})," - For tool call responses"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},250065:function(e,n,t){t.d(n,{Z:()=>l,a:()=>i});var s=t(667294);let o={},r=s.createContext(o);function i(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);