"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[89451],{103455:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var t=o(474848),l=o(28453);const s={id:"collection",title:"Collection"},c=void 0,i={id:"Concepts/collection",title:"Collection",description:"Collections are ordered lists of values of similar or mixed types (text, number, object, boolean, collection, or null).",source:"@site/versioned_docs/version-18/Concepts/dt_collection.md",sourceDirName:"Concepts",slug:"/Concepts/collection",permalink:"/docs/18/Concepts/collection",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fdt_collection.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"collection",title:"Collection"},sidebar:"docs",previous:{title:"Boolean",permalink:"/docs/18/Concepts/boolean"},next:{title:"Date",permalink:"/docs/18/Concepts/date"}},r={},a=[{value:"Initialization",id:"initialization",level:2},{value:"Regular or shared collection",id:"regular-or-shared-collection",level:3},{value:"Collection methods",id:"collection-methods",level:2},{value:"propertyPath parameter",id:"propertypath-parameter",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Collections are ordered lists of values of similar or mixed types (text, number, object, boolean, collection, or null)."}),"\n",(0,t.jsxs)(n.p,{children:["To manage Collection type variables you must use object notation (see ",(0,t.jsx)(n.a,{href:"/docs/18/Concepts/object#syntax-basics",children:"Syntax basics"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"To access a collection element, you need to pass the element number inside square brackets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"collectionRef[expression]\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can pass any valid 4D expression which returns a positive integer in expression. Examples:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:" myCollection[5]  //access to 6th element of the collection\n myCollection[$var]\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warning:"})," Collection elements are numbered from 0."]}),"\n",(0,t.jsx)(n.p,{children:"You can assign a value to a collection element or get a collection element value using object notation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:' myCol[10]:="My new element"\n $myVar:=myCol[0]\n'})}),"\n",(0,t.jsx)(n.p,{children:"If you assign an element's index that surpasses the last existing element of the collection, the collection is automatically resized and all new intermediary elements are assigned a null value:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:' C_COLLECTION(myCol)\n myCol:=New collection("A";"B")\n myCol[5]:="Z"\n  //myCol[2]=null\n  //myCol[3]=null\n  //myCol[4]=null\n'})}),"\n",(0,t.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsxs)(n.p,{children:["Collections must have been initialized, for example using the ",(0,t.jsx)(n.code,{children:"New collection"})," command, otherwise trying to read or modify their elements will generate a syntax error."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:" C_COLLECTION($colVar) //creation of collection type 4D variable\n $colVar:=New collection //initialization of the collection and assignment to the 4D variable\n"})}),"\n",(0,t.jsx)(n.h3,{id:"regular-or-shared-collection",children:"Regular or shared collection"}),"\n",(0,t.jsx)(n.p,{children:"You can create two types of collections:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["regular (non-shared) collections, using the ",(0,t.jsx)(n.code,{children:"New collection"})," command. These collections can be edited without any specific access control but cannot be shared between processes."]}),"\n",(0,t.jsxs)(n.li,{children:["shared collections, using the ",(0,t.jsx)(n.code,{children:"New shared collection"})," command. These collections can be shared between processes, including preemptive threads. Access to these collections is controlled by ",(0,t.jsx)(n.code,{children:"Use...End use"})," structures.\nFor more information, refer to the ",(0,t.jsx)(n.a,{href:"/docs/18/Concepts/shared",children:"Shared objects and collections"})," section."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"collection-methods",children:"Collection methods"}),"\n",(0,t.jsxs)(n.p,{children:["4D collection references benefit from special methods (sometimes named ",(0,t.jsx)(n.em,{children:"member functions"}),"). Thanks to object notation, these methods can be applied to collection references using the following syntax:"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"{$result:=}myCollection.memberFunction( {params} )"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note that, even if it does not have parameters, a member function must be called with () parenthesis, otherwise a syntax error is generated."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"$newCol:=$col.copy() //deep copy of $col to $newCol\n$col.push(10;100) //add 10 and 100 to the collection\n"})}),"\n",(0,t.jsx)(n.p,{children:"Some methods return the original collection after modification, so that you can run the calls in a sequence:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:" $col:=New collection(5;20)\n $col2:=$col.push(10;100).sort() //$col2=[5,10,20,100]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"propertypath-parameter",children:"propertyPath parameter"}),"\n",(0,t.jsxs)(n.p,{children:["Several methods accept a ",(0,t.jsx)(n.em,{children:"propertyPath"})," as parameter. This parameter stands for:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'either an object property name, for example "lastName"'}),"\n",(0,t.jsx)(n.li,{children:'or an object property path, i.e. a hierarchical sequence of sub-properties linked with dot characters, for example "employee.children.firstName".'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warning:"}),' When using methods and propertyPath parameters, you cannot use ".", "[ ]", or spaces in property names since it will prevent 4D from correctly parsing the path:']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:' $vmin:=$col.min("My.special.property") //undefined\n $vmin:=$col.min(["My.special.property"]) //error\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>i});var t=o(296540);const l={},s=t.createContext(l);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);