"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["37872"],{128088:function(e,t,a){a.r(t),a.d(t,{frontMatter:()=>i,default:()=>h,toc:()=>c,metadata:()=>s,assets:()=>d,contentTitle:()=>r});var s=JSON.parse('{"id":"ORDA/overview","title":"ORDA","description":"ORDA stands for Object Relational Data Access. It is an enhanced technology allowing to access both the model and the data of a database through objects.","source":"@site/versioned_docs/version-20-R10/ORDA/overview.md","sourceDirName":"ORDA","slug":"/ORDA/overview","permalink":"/docs/ORDA/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20ORDA%2Foverview.md%20(20-R10)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"20-R10","frontMatter":{"id":"overview","title":"ORDA"},"sidebar":"docs","previous":{"title":"Shortcuts Page","permalink":"/docs/Preferences/shortcuts"},"next":{"title":"Data Model Objects","permalink":"/docs/ORDA/dsmapping"}}'),n=a(785893),o=a(250065);let i={id:"overview",title:"ORDA"},r=void 0,d={},c=[{value:"Why use ORDA?",id:"why-use-orda",level:2},{value:"How to use ORDA?",id:"how-to-use-orda",level:2}];function l(e){let t={a:"a",code:"code",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["ORDA stands for ",(0,n.jsx)(t.strong,{children:"Object Relational Data Access"}),". It is an enhanced technology allowing to access both the model and the data of a database through objects."]}),"\n",(0,n.jsxs)(t.p,{children:["Relations are transparently included in the concept, in combination with ",(0,n.jsx)(t.a,{href:"/docs/ORDA/glossary#lazy-loading",children:"lazy loading"}),", to remove all the typical hassles of data selection or transfer from the developer."]}),"\n",(0,n.jsxs)(t.p,{children:["With ORDA, data is accessed through an abstraction layer, the ",(0,n.jsx)(t.a,{href:"/docs/ORDA/dsmapping#datastore",children:"datastore"}),". A datastore is an object that provides an interface to the database model and data through objects and classes. For example, a table is mapped to a ",(0,n.jsx)(t.a,{href:"/docs/ORDA/dsmapping#dataclass",children:"dataclass"})," object, a field is an ",(0,n.jsx)(t.a,{href:"/docs/ORDA/dsmapping#attribute",children:"attribute"})," of a dataclass, and records are accessed through ",(0,n.jsx)(t.a,{href:"/docs/ORDA/dsmapping#entity",children:"entities"})," and ",(0,n.jsx)(t.a,{href:"/docs/ORDA/dsmapping#entity-selection",children:"entity selections"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"why-use-orda",children:"Why use ORDA?"}),"\n",(0,n.jsx)(t.p,{children:"Instead of representing information as tables, records, and fields, ORDA uses an alternate approach that more accurately maps data to real-world concepts."}),"\n",(0,n.jsx)(t.p,{children:"Imagine the ability to denormalize a relational structure, yet not affect efficiency. Imagine describing everything about the business objects in your application in such a way that using the data becomes simple and straightforward and removes the need for a complete understanding of the relational structure."}),"\n",(0,n.jsx)(t.p,{children:"In the ORDA data model, a single dataclass can incorporate all of the elements that make up a traditional relational database table, but can also include values from related parent entities, and direct references to related entities and entity selections."}),"\n",(0,n.jsx)(t.p,{children:'A query returns a list of entities called an entity selection, which fulfills the role of a SQL query\u2019s row set. The difference is that each entity "knows" where it belongs in the data model and "understands" its relationship to all other entities. This means that a developer does not need to explain in a query how to relate the various pieces of information, nor in an update how to write modified values back to the relational structure.'}),"\n",(0,n.jsxs)(t.p,{children:["In addition, ORDA objects such as entity selections or entities can be easily bound to UI objects such as list boxes or variables. Combined with powerful features such as the ",(0,n.jsx)(t.code,{children:"This"})," and ",(0,n.jsx)(t.code,{children:"Form"})," commands, they allow the building modern and modular interfaces based upon objects and collections."]}),"\n",(0,n.jsx)(t.h2,{id:"how-to-use-orda",children:"How to use ORDA?"}),"\n",(0,n.jsxs)(t.p,{children:["Basically, ORDA handles objects. In ORDA, all main concepts, including the datastore itself, are available through objects. In 4D, the datastore is automatically ",(0,n.jsx)(t.a,{href:"/docs/ORDA/dsmapping",children:"mapped upon the 4D structure"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"ORDA objects can be handled like 4D standard objects, but they automatically benefit from specific properties and methods."}),"\n",(0,n.jsxs)(t.p,{children:["ORDA objects are created and instanciated when necessary by 4D methods (you do not need to create them). However, ORDA data model objects are associated with ",(0,n.jsx)(t.a,{href:"/docs/ORDA/ordaClasses",children:"classes where you can add custom functions"}),"."]})]})}function h(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},250065:function(e,t,a){a.d(t,{Z:()=>r,a:()=>i});var s=a(667294);let n={},o=s.createContext(n);function i(e){let t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);