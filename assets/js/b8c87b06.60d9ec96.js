"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31205],{809867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var s=t(474848),o=t(28453);const r={id:"trace",title:"TRACE",slug:"/commands/trace",displayed_sidebar:"docs"},i=void 0,c={id:"commands-legacy/trace",title:"TRACE",description:"TRACE",source:"@site/versioned_docs/version-20-R7/commands-legacy/trace.md",sourceDirName:"commands-legacy",slug:"/commands/trace",permalink:"/docs/commands/trace",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands-legacy%2Ftrace.md%20(20-R7)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R7",frontMatter:{id:"trace",title:"TRACE",slug:"/commands/trace",displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"This",permalink:"/docs/commands/this"},next:{title:"Type",permalink:"/docs/commands/type"}},d={},a=[{value:"Description",id:"description",level:4},{value:"Example",id:"example",level:4}];function l(e){const n={code:"code",em:"em",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"TRACE"})}),"\n\n\n\n\n\n\n\n",(0,s.jsx)(n.table,{children:(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Does not require any parameters"}),(0,s.jsx)(n.th,{})]})})}),"\n",(0,s.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["You use ",(0,s.jsx)(n.strong,{children:"TRACE"})," to trace methods during the development of a database."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"TRACE"})," command turns on the 4D debugger for the current process. The ",(0,s.jsx)(n.em,{children:"Debugger"})," window is displayed before the next line of code is executed, and continues to be displayed for each line of code that is executed. You can also turn on the debugger by pressing ",(0,s.jsx)(n.strong,{children:"Alt+Shift+right-click"})," (Windows) or ",(0,s.jsx)(n.strong,{children:"Control+Option+Command+click"})," (Macintosh) while code is executing."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"TRACE"})," command is ignored when the executing code is compiled."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"4D Server:"})," If you call ",(0,s.jsx)(n.strong,{children:"TRACE"})," from a project method executed within the context of a Stored Procedure, the debugger window appears on the Server machine."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tip:"})," Do not place ",(0,s.jsx)(n.strong,{children:"TRACE"})," calls when using a form whose On Activate and On Deactivate events have been enabled. Each time the debugger window appears, these events will be invoked; you will then loop infinitely between these events and the debugger window. If you end up in this situation, ",(0,s.jsx)(n.strong,{children:"Shift+click"})," on the ",(0,s.jsx)(n.strong,{children:"No Trace"}),"  button of the debugger in order to get out of it. Any subsequent calls to ",(0,s.jsx)(n.strong,{children:"TRACE"})," within the process will be ignored."]}),"\n",(0,s.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"The following code expects the process variable BUILD_LANG to be equal to \u201cUS\u201d or \u201cFR\u201d. If this is not the case, it calls the project method DEBUG:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:'\xa0\xa0// ...\n\xa0Case of\n\xa0\xa0\xa0\xa0:(BUILD_LANG="US")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0vsBHCmdName:=[Commands]CM US Name\n\xa0\xa0\xa0\xa0:(BUILD_LANG="FR")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0vsBHCmdName:=[Commands]CM FR Name\n\xa0\xa0\xa0\xa0Else\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0DEBUG("Unexpected BUILD_LANG value")\n\xa0End case\n'})}),"\n",(0,s.jsx)(n.p,{children:"The DEBUG project method is listed here:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:'\xa0\xa0// DEBUG Project Method\n\xa0\xa0// DEBUG (Text)\n\xa0\xa0// DEBUG (Optional Debug Information)\n\xa0\n\xa0var $1 : Text\n\xa0\n\xa0If(\u25cavbDebugOn)\xa0// Interprocess variable set in the On Startup Method\n\xa0\xa0\xa0\xa0If(Is compiled mode)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0If(Count parameters>=1)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ALERT($1+Char(13)+"Call Designer at x911")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0End if\n\xa0\xa0\xa0\xa0Else\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0TRACE\n\xa0\xa0\xa0\xa0End if\n\xa0End if\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(296540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);