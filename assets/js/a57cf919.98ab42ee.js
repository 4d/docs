/*! For license information please see a57cf919.98ab42ee.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[37658],{14312:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=s(474848),r=s(28453);const i={id:"debugLogFiles",title:"Description of log files"},l=void 0,d={id:"Debugging/debugLogFiles",title:"Description of log files",description:"4D applications can generate several log files that are useful for debugging or optimizing their execution. Logs are usually started or stopped using selectors of the SET DATABASE PARAMETER, WEB SET OPTION, or HTTP SET OPTION commands and are stored in the Logs folder of the project.",source:"@site/versioned_docs/version-20/Debugging/debugLogFiles.md",sourceDirName:"Debugging",slug:"/Debugging/debugLogFiles",permalink:"/docs/20/Debugging/debugLogFiles",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Debugging%2FdebugLogFiles.md%20(20)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20",frontMatter:{id:"debugLogFiles",title:"Description of log files"},sidebar:"docs",previous:{title:"Debugging from remote machines",permalink:"/docs/20/Debugging/debugging-remote"},next:{title:"Settings",permalink:"/docs/20/settings/overview"}},o={},c=[{value:"4DRequestsLog.txt",id:"4drequestslogtxt",level:2},{value:"Headers",id:"headers",level:4},{value:"Contents",id:"contents",level:4},{value:"4DRequestsLog_ProcessInfo.txt",id:"4drequestslog_processinfotxt",level:2},{value:"Headers",id:"headers-1",level:4},{value:"Contents",id:"contents-1",level:4},{value:"HTTPDebugLog.txt",id:"httpdebuglogtxt",level:2},{value:"4DHTTPClientLog.txt",id:"4dhttpclientlogtxt",level:2},{value:"4DDebugLog.txt (standard)",id:"4ddebuglogtxt-standard",level:2},{value:"4DDebugLog.txt (tabular)",id:"4ddebuglogtxt-tabular",level:2},{value:"4DDiagnosticLog.txt",id:"4ddiagnosticlogtxt",level:2},{value:"Diagnostic log levels",id:"diagnostic-log-levels",level:3},{value:"4DSMTPLog.txt, 4DPOP3Log.txt, and 4DIMAPLog.txt",id:"4dsmtplogtxt-4dpop3logtxt-and-4dimaplogtxt",level:2},{value:"Contents",id:"contents-2",level:4},{value:"ORDA requests",id:"orda-requests",level:2},{value:"Client-side",id:"client-side",level:3},{value:"Example",id:"example",level:4},{value:"Server-side",id:"server-side",level:3},{value:"Example",id:"example-1",level:4},{value:"Using a log configuration file",id:"using-a-log-configuration-file",level:2},{value:"How to enable the file",id:"how-to-enable-the-file",level:3},{value:"JSON file description",id:"json-file-description",level:3},{value:"Example",id:"example-2",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["4D applications can generate several log files that are useful for debugging or optimizing their execution. Logs are usually started or stopped using selectors of the ",(0,t.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page642.html",children:"SET DATABASE PARAMETER"}),", ",(0,t.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page1210.html",children:"WEB SET OPTION"}),", or ",(0,t.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page1160.html",children:"HTTP SET OPTION"})," commands and are stored in the ",(0,t.jsx)(n.a,{href:"/docs/20/Project/architecture#logs",children:"Logs folder"})," of the project."]}),"\n",(0,t.jsx)(n.p,{children:"Information logged needs to be analyzed to detect and fix issues. This section provides a comprehensive description of the following log files:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4drequestslogtxt",children:"4DRequestsLog.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"l#4drequestslog_processinfotxt",children:"4DRequestsLog_ProcessInfo.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#httpdebuglogtxt",children:"HTTPDebugLog.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4dhttpclientlogtxt",children:"4DHTTPClientLog.txt"})}),"\n",(0,t.jsxs)(n.li,{children:["4DDebugLog.txt (",(0,t.jsx)(n.a,{href:"#4ddebuglogtxt-standard",children:"standard"})," & ",(0,t.jsx)(n.a,{href:"#4ddebuglogtxt-tabular",children:"tabular"}),")"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4ddiagnosticlogtxt",children:"4DDiagnosticLog.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4dsmtplogtxt-4dpop3logtxt-and-4dimaplogtxt",children:"4DIMAPLog.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4dsmtplogtxt-4dpop3logtxt-and-4dimaplogtxt",children:"4DPOP3Log.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#4dsmtplogtxt-4dpop3logtxt-and-4dimaplogtxt",children:"4DSMTPLog.txt"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#orda-requests",children:"ORDA requests log file"})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'When a log file can be generated either on 4D Server or on the remote client, the word "Server" is added to the server-side log file name, for example "4DRequestsLogServer.txt"'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Log files share some fields so that you can establish a chronology and make connections between entries while debugging:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sequence_number"}),": this number is unique over all debug logs and is incremented for each new entry whatever the log file, so that you can know the exact sequence of the operations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connection_uuid"}),": for any 4D process created on a 4D client that connects to a server, this connection UUID is logged on both server and client side. It allows you to easily identify the remote client that launched each process."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"4drequestslogtxt",children:"4DRequestsLog.txt"}),"\n",(0,t.jsx)(n.p,{children:"This log file records standard requests carried out by the 4D Server machine or the 4D remote machine that executed the command (excluding Web requests)."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"on the server:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(4D Server log recording;1)\n//server side\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"on a client:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(Client Log Recording;1)\n//remote side\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This statement also starts the ",(0,t.jsx)(n.a,{href:"#4drequestslog_processinfotxt",children:"4DRequestsLog_ProcessInfo.txt"})," log file."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"headers",children:"Headers"}),"\n",(0,t.jsx)(n.p,{children:"This file starts with the following headers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Log Session Identifier"}),"\n",(0,t.jsx)(n.li,{children:"Hostname of the server that hosts the application"}),"\n",(0,t.jsx)(n.li,{children:"User Login Name: login on the OS of the user that ran the 4D application on the server."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"contents",children:"Contents"}),"\n",(0,t.jsx)(n.p,{children:"For each request, the following fields are logged:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sequence_number"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"time"}),(0,t.jsx)(n.td,{children:"Date and time using ISO 8601 format: 'YYYY-MM-DDTHH:MM:SS.mmm'"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"systemid"}),(0,t.jsx)(n.td,{children:"System ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"component"}),(0,t.jsx)(n.td,{children:"Component signature (e.g., '4SQLS' or 'dbmg')"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"process_info_index"}),(0,t.jsx)(n.td,{children:'Corresponds to the "index" field in 4DRequestsLog_ProcessInfo.txt log, and permits linking a request to a process.'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"request"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.a,{href:"https://github.com/4d/request-log-definitions/blob/master/RequestIDs.txt",children:"C/S or ORDA request ID"})," or message string for SQL requests or ",(0,t.jsx)(n.code,{children:"LOG EVENT"})," messages"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"bytes_in"}),(0,t.jsx)(n.td,{children:"Number of bytes received"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"bytes_out"}),(0,t.jsx)(n.td,{children:"Number of bytes sent"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"server_duration | exec_duration"}),(0,t.jsxs)(n.td,{children:["Depends on where the log is generated:",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"server_duration"})," when generated on the client --Time taken in microseconds for the server to process the request and return a response. B to F in image below, OR"]}),(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"exec_duration"})," when generated on the server --Time taken in microseconds for the server to process the request. B to E in image below."]})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"write_duration"}),(0,t.jsxs)(n.td,{children:["Time taken in microseconds for sending the:",(0,t.jsx)(n.li,{children:"Request (when run on the client). A to B in image below."}),(0,t.jsx)(n.li,{children:"Response (when run on the server). E to F in image below."})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"task_kind"}),(0,t.jsx)(n.td,{children:"Preemptive or cooperative (respectively 'p' or 'c')"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"rtt"}),(0,t.jsxs)(n.td,{children:["Time estimate in microseconds for the client to send the request and the server to acknowledge it. A to D and E to H in image below.",(0,t.jsx)(n.li,{children:"Only measured when using the ServerNet network layer, returns 0 when used with the legacy network layer."}),(0,t.jsx)(n.li,{children:"For Windows versions prior to Windows 10 or Windows Server 2016, the call will return 0."})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"extra"}),(0,t.jsx)(n.td,{children:"Additional information related to the context, for example dataclass name and/or attribute name in case of ORDA request"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Request flow:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(844325).A+"",width:"535",height:"378"})}),"\n",(0,t.jsx)(n.h2,{id:"4drequestslog_processinfotxt",children:"4DRequestsLog_ProcessInfo.txt"}),"\n",(0,t.jsx)(n.p,{children:"This log file records information on each process created on the 4D Server machine or the 4D remote machine that executed the command (excluding Web requests)."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"on the server:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(4D Server log recording;1) //server side\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"on a client:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(Client Log Recording;1) //remote side\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This statement also starts the ",(0,t.jsx)(n.a,{href:"#4drequestslogtxt",children:"4DRequestsLog.txt"})," log file."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"headers-1",children:"Headers"}),"\n",(0,t.jsx)(n.p,{children:"This file starts with the following headers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Log Session Identifier"}),"\n",(0,t.jsx)(n.li,{children:"Hostname of the server that hosts the application"}),"\n",(0,t.jsx)(n.li,{children:"User Login Name: login on the OS of the user that ran the 4D application on the server."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"contents-1",children:"Contents"}),"\n",(0,t.jsx)(n.p,{children:"For each process, the following fields are logged:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sequence_number"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"time"}),(0,t.jsx)(n.td,{children:'Date and time using ISO 8601 format: "YYYY-MM-DDTHH:MM:SS.mmm"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"process_info_index"}),(0,t.jsx)(n.td,{children:"Unique and sequential process number"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"CDB4DBaseContext"}),(0,t.jsx)(n.td,{children:"DB4D component database context UUID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"systemid"}),(0,t.jsx)(n.td,{children:"System ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"server_process_id"}),(0,t.jsx)(n.td,{children:"Process ID on Server"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"remote_process_id"}),(0,t.jsx)(n.td,{children:"Process ID on Client"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"process_name"}),(0,t.jsx)(n.td,{children:"Process name"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"cID"}),(0,t.jsx)(n.td,{children:"Identifier of 4D Connection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"uID"}),(0,t.jsx)(n.td,{children:"Identifier of 4D Client"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"IP Client"}),(0,t.jsx)(n.td,{children:"IPv4/IPv6 address"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"host_name"}),(0,t.jsx)(n.td,{children:"Client hostname"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"user_name"}),(0,t.jsx)(n.td,{children:"User Login Name on client"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"connection_uuid"}),(0,t.jsx)(n.td,{children:"UUID identifier of process connection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"server_process_unique_id"}),(0,t.jsx)(n.td,{children:"Unique process ID on Server"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"httpdebuglogtxt",children:"HTTPDebugLog.txt"}),"\n",(0,t.jsx)(n.p,{children:"This log file records each HTTP request and each response in raw mode. Whole requests, including headers, are logged; optionally, body parts can be logged as well."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"\n\n\nWEB SET OPTION(Web debug log;wdl enable without body)  \n//other values are available\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for both Request and Response:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SocketID"}),(0,t.jsx)(n.td,{children:"ID of socket used for communication"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PeerIP"}),(0,t.jsx)(n.td,{children:"IPv4 address of host (client)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PeerPort"}),(0,t.jsx)(n.td,{children:"Port used by host (client)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"TimeStamp"}),(0,t.jsx)(n.td,{children:"Timestamp in milliseconds (since system startup)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ConnectionID"}),(0,t.jsx)(n.td,{children:"Connection UUID (UUID of VTCPSocket used for communication)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SequenceNumber"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"4dhttpclientlogtxt",children:"4DHTTPClientLog.txt"}),"\n",(0,t.jsx)(n.p,{children:"This log file records the HTTP traffic that goes through the 4D HTTP client. Whole requests and responses, including headers, are logged; optionally, body parts can be logged as well."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"\nHTTP SET OPTION(HTTP client log; HTTP enable log with all body parts)  \n//other values are available\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for both Request and Response:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SequenceID"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ConnectionID"}),(0,t.jsx)(n.td,{children:"UUID identifier of process connection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"LocalIP"}),(0,t.jsx)(n.td,{children:"Client IP address"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PeerIP"}),(0,t.jsx)(n.td,{children:"Server IP address"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"TimeStamp"}),(0,t.jsx)(n.td,{children:"Timestamp (ms) at the time the request is sent or the response is fully received"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ElapsedTimeInMs"}),(0,t.jsx)(n.td,{children:"(response only) Difference with the request timestamp"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Depending on log options, various other fields can also be logged."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For request: request line, headers, request body"}),"\n",(0,t.jsx)(n.li,{children:"For response: status line, headers, response body (uncompressed), if any"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"4ddebuglogtxt-standard",children:"4DDebugLog.txt (standard)"}),"\n",(0,t.jsx)(n.p,{children:"This log file records each event occurring at the 4D programming level. Standard mode provides a basic view of events."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(Debug Log Recording;2)  \n//standard, all processes\n\nSET DATABASE PARAMETER(Current process debug log recording;2)  \n//standard, current process only\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for each event:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column #"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"Date and time in ISO 8601 format (YYYY-MM-DDThh:mm:ss.mmm)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"Process ID (p=xx) and unique process ID (puid=xx)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"4"}),(0,t.jsx)(n.td,{children:"Stack level"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:"Can be Command Name/ Method Name/Message/ Task Start Stop info/Plugin Name, event or Callback/Connection UUID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"6"}),(0,t.jsx)(n.td,{children:"Time taken for logging operation in milliseconds"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"4ddebuglogtxt-tabular",children:"4DDebugLog.txt (tabular)"}),"\n",(0,t.jsx)(n.p,{children:"This log file records each event occurring at the 4D programming level in a tabbed, compact format that includes additional information (compared to the standard format)."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(Debug Log Recording;2+4)  \n//extended tabbed format, all processes\n\nSET DATABASE PARAMETER(Current process debug log recording;2+4)  \n//extended, current process only\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for each event:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column #"}),(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"sequence_number"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"time"}),(0,t.jsx)(n.td,{children:"Date and time in ISO 8601 format (YYYY-MM-DDThh:mm:ss.mmm)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"ProcessID"}),(0,t.jsx)(n.td,{children:"Process ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"4"}),(0,t.jsx)(n.td,{children:"unique_processID"}),(0,t.jsx)(n.td,{children:"Unique process ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:"stack_level"}),(0,t.jsx)(n.td,{children:"Stack level"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"6"}),(0,t.jsx)(n.td,{children:"operation_type"}),(0,t.jsxs)(n.td,{children:["Log operation type. This value may be an absolute value:",(0,t.jsx)(n.p,{}),(0,t.jsxs)(n.ol,{children:[(0,t.jsx)(n.li,{children:"Command"}),(0,t.jsx)(n.li,{children:"Method (project method, database method, etc.)"}),(0,t.jsxs)(n.li,{children:["Message (sent by ",(0,t.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page667.html",children:"LOG EVENT"})," command only)"]}),(0,t.jsx)(n.li,{children:"PluginMessage"}),(0,t.jsx)(n.li,{children:"PluginEvent"}),(0,t.jsx)(n.li,{children:"PluginCommand"}),(0,t.jsx)(n.li,{children:"PluginCallback"}),(0,t.jsx)(n.li,{children:"Task"}),(0,t.jsx)(n.li,{children:"Member method (method attached to a collection or an object)"})]}),(0,t.jsx)(n.p,{}),"When closing a stack level, the ",(0,t.jsx)(n.code,{children:"operation_type"}),", ",(0,t.jsx)(n.code,{children:"operation"})," and ",(0,t.jsx)(n.code,{children:"operation_parameters"})," columns have the same value as the opening stack level logged in the ",(0,t.jsx)(n.code,{children:"stack_opening_sequence_number"})," column. For example:",(0,t.jsx)(n.p,{}),(0,t.jsxs)(n.ol,{children:[(0,t.jsx)(n.li,{children:"121  15:16:50:777  5  8  1  2 CallMethod Parameters 0"}),(0,t.jsx)(n.li,{children:"122  15:16:50:777  5  8  2  1 283  0"}),(0,t.jsx)(n.li,{children:"123  15:16:50:777  5  8  2  1 283  0 122 3"}),(0,t.jsx)(n.li,{children:"124  15:16:50:777  5  8  1  2 CallMethod Parameters 0 121 61"})]}),(0,t.jsx)(n.p,{}),"The 1st and 2nd lines open a stack level, the 3rd and 4th lines close a stack level. Values in the columns 6, 7 and 8 are repeated in the closing stack level line. The column 10 contains the stack level opening sequence numbers, i.e. 122 for the 3rd line and 121 for the 4th."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"7"}),(0,t.jsx)(n.td,{children:"operation"}),(0,t.jsxs)(n.td,{children:["May represent (depending on operation type):",(0,t.jsx)(n.li,{children:"a Language Command ID (when type=1)"}),(0,t.jsx)(n.li,{children:"a Method Name (when type=2)"}),(0,t.jsx)(n.li,{children:"a combination of pluginIndex;pluginCommand (when type=4, 5, 6 or 7). May contain something like '3;2'"}),(0,t.jsx)(n.li,{children:"a Task Connection UUID (when type=8)"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"8"}),(0,t.jsx)(n.td,{children:"operation_parameters"}),(0,t.jsx)(n.td,{children:"Parameters passed to commands, methods, or plugins"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"9"}),(0,t.jsx)(n.td,{children:"form_event"}),(0,t.jsx)(n.td,{children:"Form event if any; empty in other cases (suppose that column is used when code is executed in a form method or object method)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"10"}),(0,t.jsx)(n.td,{children:"stack_opening_sequence_number"}),(0,t.jsx)(n.td,{children:"Only for the closing stack levels: Sequence number of the corresponding opening stack level"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"11"}),(0,t.jsx)(n.td,{children:"stack_level_execution_time"}),(0,t.jsx)(n.td,{children:"Only for the closing stack levels: Elapsed time in micro seconds of the current logged action; only for the closing stack levels (see 10th columns in lines 123 and 124 in the log above)"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"4ddiagnosticlogtxt",children:"4DDiagnosticLog.txt"}),"\n",(0,t.jsxs)(n.p,{children:["This log file records many events related to the internal application operation and is human-readable. You can include custom information in this file using the ",(0,t.jsx)(n.a,{href:"https://doc.4d.com/4dv19/help/command/en/page667.html",children:"LOG EVENT"})," command."]}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:" SET DATABASE PARAMETER(Diagnostic log recording;1) //start recording\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for each event:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field Name"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sequenceNumber"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"timestamp"}),(0,t.jsx)(n.td,{children:"Date and time in ISO 8601 format (YYYY-MM-DDThh:mm:ss.mmm)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"loggerID"}),(0,t.jsx)(n.td,{children:"Optional"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"componentSignature"}),(0,t.jsx)(n.td,{children:"Optional - internal component signature"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"messageLevel"}),(0,t.jsx)(n.td,{children:"Trace, Debug, Info, Warning, Error"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"message"}),(0,t.jsx)(n.td,{children:"Description of the log entry"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Depending on the event, various other fields can also be logged, such as task, socket, etc."}),"\n",(0,t.jsx)(n.h3,{id:"diagnostic-log-levels",children:"Diagnostic log levels"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"4DDiagnosticLog.txt"})," file can log different levels of messages, from ",(0,t.jsx)(n.code,{children:"ERROR"})," (most important) to ",(0,t.jsx)(n.code,{children:"TRACE"})," (less important). By default, the ",(0,t.jsx)(n.code,{children:"INFO"})," level is set, which means that the file will log only important events, including errors and unexpected results (see below)."]}),"\n",(0,t.jsxs)(n.p,{children:["You can select the level of messages using the ",(0,t.jsx)(n.code,{children:"Diagnostic log level"})," selector of the ",(0,t.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page642.html",children:"SET DATABASE PARAMETER"})," command, depending on your needs. When you select a level, levels above (which are more important) are implicitely selected also. The following levels are available:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Constant"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"When selected, includes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Log error"})}),(0,t.jsx)(n.td,{children:"A part of the application does not work"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Log error"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Log warn"})}),(0,t.jsx)(n.td,{children:"Potential error, use of a deprecated function, poor uses, undesirable or unexpected situation"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Log error"}),", ",(0,t.jsx)(n.code,{children:"Log warn"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Log info"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.em,{children:"Default level"})," - Important application event"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Log error"}),", ",(0,t.jsx)(n.code,{children:"Log warn"}),", ",(0,t.jsx)(n.code,{children:"Log info"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Log debug"})}),(0,t.jsx)(n.td,{children:"Detail of application flow (for 4D technical services)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Log error"}),", ",(0,t.jsx)(n.code,{children:"Log warn"}),", ",(0,t.jsx)(n.code,{children:"Log info"}),", ",(0,t.jsx)(n.code,{children:"Log debug"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Log trace"})}),(0,t.jsx)(n.td,{children:"Other internal information (for 4D technical services)"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Log error"}),", ",(0,t.jsx)(n.code,{children:"Log warn"}),", ",(0,t.jsx)(n.code,{children:"Log info"}),", ",(0,t.jsx)(n.code,{children:"Log debug"}),", ",(0,t.jsx)(n.code,{children:"Log trace"})]})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER (Diagnostic log recording; 1)\nSET DATABASE PARAMETER (Diagnostic log level; Log trace)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"4dsmtplogtxt-4dpop3logtxt-and-4dimaplogtxt",children:"4DSMTPLog.txt, 4DPOP3Log.txt, and 4DIMAPLog.txt"}),"\n",(0,t.jsx)(n.p,{children:"These log files record each exchange between the 4D application and the mail server (SMTP, POP3, IMAP) that has been initiated by the following commands:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["SMTP - ",(0,t.jsx)(n.a,{href:"/docs/20/API/SMTPTransporterClass#smtp-new-transporter",children:"SMTP New transporter"})]}),"\n",(0,t.jsxs)(n.li,{children:["POP3 - ",(0,t.jsx)(n.a,{href:"/docs/20/API/POP3TransporterClass#pop3-new-transporter",children:"POP3 New transporter"})]}),"\n",(0,t.jsxs)(n.li,{children:["IMAP  - ",(0,t.jsx)(n.a,{href:"/docs/20/API/IMAPTransporterClass#imap-new-transporter",children:"IMAP New transporter"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The log files can be produced in two versions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["a regular version:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"named 4DSMTPLog.txt, 4DPOP3Log.txt, or 4DIMAPLog.txt"}),"\n",(0,t.jsx)(n.li,{children:"no attachments"}),"\n",(0,t.jsx)(n.li,{children:"uses an automatic circular file recycling each 10 MB"}),"\n",(0,t.jsx)(n.li,{children:"intended for usual debugging"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:"SET DATABASE PARAMETER(SMTP Log;1) //start SMTP log\nSET DATABASE PARAMETER(POP3 Log;1) //start POP3 log\nSET DATABASE PARAMETER(IMAP Log;1) //start IMAP log\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["4D Server: Click on the ",(0,t.jsx)(n.strong,{children:"Start Request and Debug Logs"})," button in the ",(0,t.jsx)(n.a,{href:"/docs/20/ServerWindow/maintenance",children:"Maintenance Page"})," of the 4D Server administration window."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This log path is returned by the ",(0,t.jsx)(n.code,{children:"Get 4D file"})," command."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["an extended version:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"attachment(s) included\nno automatic recycling"}),"\n",(0,t.jsx)(n.li,{children:"custom name"}),"\n",(0,t.jsx)(n.li,{children:"reserved for specific purposes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:'$server:=New object\n...\n//SMTP\n$server.logFile:="MySMTPAuthLog.txt"\n$transporter:=SMTP New transporter($server)\n\n// POP3\n$server.logFile:="MyPOP3AuthLog.txt"\n$transporter:=POP3 New transporter($server)\n\n//IMAP\n$server.logFile:="MyIMAPAuthLog.txt"\n$transporter:=IMAP New transporter($server)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"contents-2",children:"Contents"}),"\n",(0,t.jsx)(n.p,{children:"For each request, the following fields are logged:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Column #"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"Date and time in RFC3339 format (yyyy-mm-ddThh:mm:ss.ms)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:"4D Process ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"4"}),(0,t.jsx)(n.td,{children:"Unique process ID"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:(0,t.jsxs)(n.ul,{children:[(0,t.jsx)(n.li,{children:"SMTP,POP3, or IMAP session startup information, including server host name, TCP port number used to connect to SMTP,POP3, or IMAP server and TLS status,or"}),(0,t.jsx)(n.li,{children:'data exchanged between server and client, starting with "S <" (data received from the SMTP,POP3, or IMAP server) or "C >" (data sent by the SMTP,POP3, or IMAP client): authentication mode list sent by the server and selected authentication mode, any error reported by the SMTP,POP3, or IMAP Server, header information of sent mail (standard version only) and if the mail is saved on the server,or'}),(0,t.jsx)(n.li,{children:"SMTP,POP3, or IMAP session closing information."})]})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"orda-requests",children:"ORDA requests"}),"\n",(0,t.jsx)(n.p,{children:"ORDA requests logs can record each ORDA request and server response. Two ORDA requests logs are available:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"a client-side ORDA request log, in .txt format"}),"\n",(0,t.jsx)(n.li,{children:"a server-side ORDA request log, in .jsonl format"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"client-side",children:"Client-side"}),"\n",(0,t.jsx)(n.p,{children:"The client-side ORDA log records each ORDA request sent from a remote machine. You can direct log information to memory or to a .txt file on disk of the remote machine. The name and location of this log file are your choice."}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:'\t//on a remote machine\nSET DATABASE PARAMETER(Client Log Recording;1)  \nds.startRequestLog(File("/PACKAGE/Logs/ordaLog.txt"))\n\t//can be also sent to memory\nSET DATABASE PARAMETER(Client Log Recording;0)  \n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Triggering the client-side ",(0,t.jsx)(n.a,{href:"#4drequestslogtxt",children:"4DRequestsLog.txt"})," using ",(0,t.jsx)(n.code,{children:"SET DATABASE PARAMETER"})," is not mandatory. However, it is required if you want to log the unique ",(0,t.jsx)(n.code,{children:"sequenceNumber"})," field."]})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for each request:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sequenceNumber"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"}),(0,t.jsx)(n.td,{children:"104"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"url"}),(0,t.jsx)(n.td,{children:"Request URL"}),(0,t.jsx)(n.td,{children:'"rest/Persons(30001)"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"startTime"}),(0,t.jsx)(n.td,{children:"Starting date and time using ISO 8601 format"}),(0,t.jsx)(n.td,{children:'"2019-05-28T08:25:12.346Z"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"endTime"}),(0,t.jsx)(n.td,{children:"Ending date and time using ISO 8601 format"}),(0,t.jsx)(n.td,{children:'"2019-05-28T08:25:12.371Z"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"duration"}),(0,t.jsx)(n.td,{children:"Client processing duration in milliseconds (ms)"}),(0,t.jsx)(n.td,{children:"25"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"response"}),(0,t.jsx)(n.td,{children:"Server response object"}),(0,t.jsx)(n.td,{children:'{"status":200,"body":{"__entityModel":"Persons",[...]}}'})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of a client-side ORDA log file record:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'\t{\n\t\t"sequenceNumber": 7880,\n\t\t"url": "rest/Employees/$entityset/F910C2E4A2EE6B43BBEE74A0A4F68E5A/Salary?$compute=\'sum\'&$progress4Dinfo=\'D0706F1E77D4F24985BE4DDE9FFA1739\'",\n\t\t"startTime": "2023-05-15T10:43:39.400Z",\n\t\t"endTime": "2023-05-15T10:43:39.419Z",\n\t\t"duration": 19,\n\t\t"response": {\n\t\t\t"status": 200,\n\t\t\t"body": 75651\n\t\t}\n\t}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"server-side",children:"Server-side"}),"\n",(0,t.jsxs)(n.p,{children:["The server-side ORDA log records each ORDA request processed by the server, as well as the server response (optional). Log information is saved in a .jsonl file on the server machine disk (by default, ",(0,t.jsx)(n.em,{children:"ordaRequests.jsonl"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"How to start this log:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:'\t//on the server\nSET DATABASE PARAMETER(4D Server log recording;1)\nds.startRequestLog(File("/PACKAGE/Logs/ordaRequests.jsonl");srl log response without body)\n\t//srl... parameter is optional\nSET DATABASE PARAMETER(4D Server log recording;0)\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Triggering the server-side ",(0,t.jsx)(n.a,{href:"#4drequestslogtxt",children:"4DRequestsLog.txt"})," using ",(0,t.jsx)(n.code,{children:"SET DATABASE PARAMETER"})," is not mandatory. However, it is required if you want to log the unique ",(0,t.jsx)(n.code,{children:"sequenceNumber"})," and the ",(0,t.jsx)(n.code,{children:"duration"})," fields."]})}),"\n",(0,t.jsx)(n.p,{children:"The following fields are logged for each request:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sequenceNumber"}),(0,t.jsx)(n.td,{children:"Unique and sequential operation number in the logging session"}),(0,t.jsx)(n.td,{children:"104"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"url"}),(0,t.jsx)(n.td,{children:"Request URL"}),(0,t.jsx)(n.td,{children:'"rest/Persons(30001)"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"startTime"}),(0,t.jsx)(n.td,{children:"Starting date and time using ISO 8601 format"}),(0,t.jsx)(n.td,{children:'"2019-05-28T08:25:12.346Z"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"duration"}),(0,t.jsx)(n.td,{children:"Server processing duration in microseconds (\xb5)"}),(0,t.jsx)(n.td,{children:"2500"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"response"}),(0,t.jsxs)(n.td,{children:["Server response object, can be configured in ",(0,t.jsx)(n.a,{href:"/docs/20/API/DataStoreClass#startrequestlog",children:(0,t.jsx)(n.code,{children:".startRequestLog()"})})]}),(0,t.jsx)(n.td,{children:'{"status":200,"body":{"__entityModel":"Persons",[...]}}'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ipAddress"}),(0,t.jsx)(n.td,{children:"User IP address"}),(0,t.jsx)(n.td,{children:'"192.168.1.5"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"userName"}),(0,t.jsx)(n.td,{children:"Name of the 4D user"}),(0,t.jsx)(n.td,{children:'"henry"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"systemUserName"}),(0,t.jsx)(n.td,{children:"Login name of the user on the machine"}),(0,t.jsx)(n.td,{children:'"hsmith"'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"machineName"}),(0,t.jsx)(n.td,{children:"Name of the user machine"}),(0,t.jsx)(n.td,{children:'"PC of Henry Smith"'})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of a server-side ORDA log record:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'   {\n\t\t"url": "rest/Employees/$entityset/F910C2E4A2EE6B43BBEE74A0A4F68E5A/Salary?$compute=\'sum\'&$progress4Dinfo=\'D0706F1E77D4F24985BE4DDE9FFA1739\'",\n\t\t"systemUserName": "Admin",\n\t\t"userName": "Designer",\n\t\t"machineName": "DESKTOP-QSK9738",\n\t\t"taskID": 5,\n\t\t"taskName": "P_1",\n\t\t"startTime": "2023-05-15T11:43:39.401",\n\t\t"response": {\n\t\t\t"status": 200,\n\t\t\t"body": 75651\n\t\t},\n\t\t"sequenceNumber": 7008,\n\t\t"duration": 240\n\t}\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-a-log-configuration-file",children:"Using a log configuration file"}),"\n",(0,t.jsxs)(n.p,{children:["You can use a ",(0,t.jsx)(n.strong,{children:"log configuration file"})," to easily manage log recording in a production environment. This file is preconfigured by the developer. Typically, it can be sent to customers so that they just need to select it or copy it in a local folder. Once enabled, the log configuration file triggers the recording of specific logs."]}),"\n",(0,t.jsx)(n.h3,{id:"how-to-enable-the-file",children:"How to enable the file"}),"\n",(0,t.jsx)(n.p,{children:"There are several ways to enable the log configuration file, depending on your configuration:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"4D Server with interface"}),": you can open the Maintenance page and click on the ",(0,t.jsx)(n.a,{href:"/docs/20/ServerWindow/maintenance#load-logs-configuration-file",children:"Load logs configuration file"})," button, then select the file. In this case, you can use any name for the configuration file. It is immediately enabled on the server."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"an interpreted or compiled project"}),": the file must be named ",(0,t.jsx)(n.code,{children:"logConfig.json"})," and copied in the ",(0,t.jsx)(n.a,{href:"/docs/20/Project/architecture#settings-1",children:"Settings folder"})," of the project (located at the same level as the ",(0,t.jsxs)(n.a,{href:"/docs/20/Project/architecture#project-folder",children:[(0,t.jsx)(n.code,{children:"Project"})," folder"]}),"). It is enabled at project startup (only on the server in client/server)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"a built application"}),": the file must be named ",(0,t.jsx)(n.code,{children:"logConfig.json"})," and copied in the following folder:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Windows: ",(0,t.jsx)(n.code,{children:"Users\\[userName]\\AppData\\Roaming\\[application]"})]}),"\n",(0,t.jsxs)(n.li,{children:["macOS: ",(0,t.jsx)(n.code,{children:"/Users/[userName]/Library/ApplicationSupport/[application]"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"all projects with a stand-alone or remote 4D"}),": the file must be named ",(0,t.jsx)(n.code,{children:"logConfig.json"})," and copied in the following folder:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Windows: ",(0,t.jsx)(n.code,{children:"Users\\[userName]\\AppData\\Roaming\\4D"})]}),"\n",(0,t.jsxs)(n.li,{children:["macOS: ",(0,t.jsx)(n.code,{children:"/Users/[userName]/Library/ApplicationSupport/4D"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"all projects with 4D Server"}),": the file must be named ",(0,t.jsx)(n.code,{children:"logConfig.json"})," and copied in the following folder:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Windows: ",(0,t.jsx)(n.code,{children:"Users\\[userName]\\AppData\\Roaming\\4D Server"})]}),"\n",(0,t.jsxs)(n.li,{children:["macOS: ",(0,t.jsx)(n.code,{children:"/Users/[userName]/Library/ApplicationSupport/4D Server"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If a ",(0,t.jsx)(n.code,{children:"logConfig.json"})," file is installed in both Settings and AppData/Library folders, the Settings folder file will have priority."]})}),"\n",(0,t.jsx)(n.h3,{id:"json-file-description",children:"JSON file description"}),"\n",(0,t.jsxs)(n.p,{children:["The log configuration file is a ",(0,t.jsx)(n.code,{children:".json"})," file that must comply with the following json schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "$schema": "http://json-schema.org/draft-07/schema",\n    "title": "Logs Configuration File",\n    "description": "A file that controls the state of different types of logs in 4D clients and servers",\n    "type": "object",\n    "properties": {\n        "forceConfiguration": {\n            "description": "Forcing the logs configuration described in the file ingoring changes coming from code or user interface",\n            "type": "boolean",\n            "default": true\n        },\n        "requestLogs": {\n            "description": "Configuration for request logs",\n            "type": "object",\n            "properties": {\n                "clientState": {\n                    "description": "Enable/Disable client request logs (from 0 to N)",\n                    "type": "integer",\n                    "minimum": 0\n                },\n                "serverState": {\n                    "description": "Enable/Disable server request logs (from 0 to N)",\n                    "type": "integer",\n                    "minimum": 0\n                }\n            }\n        },\n        "debugLogs": {\n            "description": "Configuration for debug logs",\n            "type": "object",\n            "properties": {\n                "commandList": {\n                    "description": "Commands to log or not log",\n                    "type": "array",\n                    "items": {\n                        "type": "string"\n                    },\n                    "minItems": 1,\n                    "uniqueItems": true\n                },\n                "state": {\n                    "description": "integer to specify type of debuglog and options",\n\n                    "type": "integer",\n                    "minimum": 0\n                }\n            }\n        },\n        "diagnosticLogs":{\n            "description": "Configuration for debug logs",\n            "type": "object",\n            "properties": {\n                "state":{\n                    "description": "Enable/Disable diagnostic logs 0 or 1 (0 = do not record, 1 = record)",\n                    "type": "integer",\n                    "minimum": 0    \n                },\n                "level": {\n              "description": "Configure diagnostic logs",\n              "type": "integer",\n              "minimum": 2,\n              "maximum": 6\n          }\n            }\n          },\n        "httpDebugLogs": {\n            "description": "Configuration for http debug logs",\n            "type": "object",\n            "properties": {\n                "level": {\n                    "description": "Configure http request logs",\n                    "type": "integer",\n                    "minimum": 0,\n                    "maximum": 7\n                },\n                "state": {\n                    "description": "Enable/Disable recording of web requests",\n                    "type": "integer",\n                    "minimum": 0,\n                    "maximum": 4\n                }\n            }\n        },\n        "POP3Logs": {\n            "description": "Configuration for POP3 logs",\n            "type": "object",\n            "properties": {\n                "state": {\n                    "description": "Enable/Disable POP3 logs (from 0 to N)",\n                    "type": "integer",\n                    "minimum": 0\n                }\n            }\n        },\n        "SMTPLogs": {\n            "description": "Configuration for SMTP logs",\n            "type": "object",\n            "properties": {\n                "state": {\n                    "description": "Enable/Disable SMTP log recording (form 0 to N)",\n                    "type": "integer",\n                    "minimum": 0\n                }\n            }\n        },\n        "IMAPLogs": {\n            "description": "Configuration for IMAP logs",\n            "type": "object",\n            "properties": {\n                "state": {\n                    "description": "Enable/Disable IMAP log recording (form 0 to N)",\n                    "type": "integer"\n                }\n            }\n        },\n        "ORDALogs": {\n            "description": "Configuration for ORDA logs",\n            "type": "object",\n            "properties": {\n                "state": {\n                    "description": "Enable/Disable ORDA logs (0 or 1)",\n                    "type": "integer"\n                },\n                "filename": {\n                    "type": "string"\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here is an example of log configuration file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n "forceLoggingConfiguration": false,\n "requestLogs": {\n  "clientState": 1,\n  "serverState": 1\n },\n "debugLogs": {\n  "commandList":["322","311","112"],\n        "state": 4\n },\n "diagnosticLogs":{\n        "state" : 1\n },\n "httpDebugLogs": {\n  "level": 5,\n        "state" : 1\n },\n "POP3Logs": {\n        "state" : 1\n },\n "SMTPLogs": {\n        "state" : 1\n },\n "IMAPLogs": {\n        "state" : 1\n },\n "ORDALogs": {\n        "state" : 1,\n  "filename": "ORDALog.txt"\n }\n}\n'})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},221020:(e,n,s)=>{var t=s(296540),r=Symbol.for("react.element"),i=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,d=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,s){var t,i={},c=null,h=null;for(t in void 0!==s&&(c=""+s),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(h=n.ref),n)l.call(n,t)&&!o.hasOwnProperty(t)&&(i[t]=n[t]);if(e&&e.defaultProps)for(t in n=e.defaultProps)void 0===i[t]&&(i[t]=n[t]);return{$$typeof:r,type:e,key:c,ref:h,props:i,_owner:d.current}}n.Fragment=i,n.jsx=c,n.jsxs=c},474848:(e,n,s)=>{e.exports=s(221020)},844325:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/logRequestFlow-4d1667b5e86f1ae2bb483f71b5ee3414.PNG"},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var t=s(296540);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);