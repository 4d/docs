"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[90005],{317866:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var t=n(474848),o=n(28453);const i={id:"datastores",title:"Using a remote datastore"},a=void 0,r={id:"ORDA/datastores",title:"Using a remote datastore",description:"A datastore exposed on a 4D application can be accessed simultaneously through different clients:",source:"@site/versioned_docs/version-19/ORDA/remoteDatastores.md",sourceDirName:"ORDA",slug:"/ORDA/datastores",permalink:"/docs/19/ORDA/datastores",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20ORDA%2FremoteDatastores.md%20(19)&body=Please%20enter%20your%20comment%3A",tags:[],version:"19",frontMatter:{id:"datastores",title:"Using a remote datastore"},sidebar:"docs",previous:{title:"Working with data",permalink:"/docs/19/ORDA/entities"},next:{title:"Glossary",permalink:"/docs/19/ORDA/glossary"}},c={},d=[{value:"Opening sessions",id:"opening-sessions",level:2},{value:"Viewing sessions",id:"viewing-sessions",level:2},{value:"Locking and transactions",id:"locking-and-transactions",level:2},{value:"Closing sessions",id:"closing-sessions",level:2}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["A ",(0,t.jsx)(s.a,{href:"/docs/19/ORDA/dsmapping#datastore",children:"datastore"})," exposed on a 4D application can be accessed simultaneously through different clients:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["4D remote applications using ORDA to access the main datastore with the ",(0,t.jsx)(s.code,{children:"ds"})," command. Note that the 4D remote application can still access the database in classic mode. These accesses are handled by the ",(0,t.jsx)(s.strong,{children:"4D application server"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Other 4D applications (4D remote, 4D Server) opening a session on the remote datastore through the ",(0,t.jsx)(s.code,{children:"Open datastore"})," command. These accesses are handled by the ",(0,t.jsx)(s.strong,{children:"HTTP REST server"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["4D for iOS queries for updating iOS applications. These accesses are handled by the ",(0,t.jsx)(s.strong,{children:"HTTP server"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["When you work with a remote datastore referenced through calls to the ",(0,t.jsx)(s.code,{children:"Open datastore"})," command, the connection between the requesting processes and the remote datastore is handled via sessions."]}),"\n",(0,t.jsx)(s.h2,{id:"opening-sessions",children:"Opening sessions"}),"\n",(0,t.jsxs)(s.p,{children:["When a 4D application (",(0,t.jsx)(s.em,{children:"i.e."})," a process) opens an external datastore using the ",(0,t.jsx)(s.code,{children:"Open datastore"})," command, a session in created on the remote datastore to handle the connection. This session is identified using a internal session ID which is associated to the ",(0,t.jsx)(s.code,{children:"localID"})," on the 4D application. This session automatically manages access to data, entity selections, or entities."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"localID"})," is local to the machine that connects to the remote datastore, which means:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If other processes of the same application need to access the same remote datastore, they can use the same ",(0,t.jsx)(s.code,{children:"localID"})," and thus, share the same session."]}),"\n",(0,t.jsxs)(s.li,{children:["If another process of the same application opens the same remote datastore but with another ",(0,t.jsx)(s.code,{children:"localID"}),", it will create a new session on the remote datastore."]}),"\n",(0,t.jsxs)(s.li,{children:["If another machine connects to the same remote datastore with the same ",(0,t.jsx)(s.code,{children:"localID"}),", it will create another session with another cookie."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"These principles are illustrated in the following graphics:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:n(413664).A+"",width:"962",height:"719"})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["For sessions opened by REST requests, please refer to ",(0,t.jsx)(s.a,{href:"/docs/19/REST/authUsers",children:"Users and sessions"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"viewing-sessions",children:"Viewing sessions"}),"\n",(0,t.jsx)(s.p,{children:"Processes that manage sessions for datastore access are shown in the 4D Server administration window:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:'name: "REST Handler: <process name>"'}),"\n",(0,t.jsx)(s.li,{children:"type: HTTP Server Worker type"}),"\n",(0,t.jsx)(s.li,{children:"session: session name is the user name passed to the Open datastore command."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"In the following example, two processes are running for the same session:"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:n(454878).A+"",width:"1402",height:"708"})}),"\n",(0,t.jsx)(s.h2,{id:"locking-and-transactions",children:"Locking and transactions"}),"\n",(0,t.jsx)(s.p,{children:"ORDA features related to entity locking and transaction are managed at process level in remote datastores, just like in ORDA client/server mode:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["If a process locks an entity from a remote datastore, the entity is locked for all other processes, even when these processes share the same session (see ",(0,t.jsx)(s.a,{href:"/docs/19/ORDA/entities#entity-locking",children:"Entity locking"}),"). If several entities pointing to a same record have been locked in a process, they must be all unlocked in the process to remove the lock. If a lock has been put on an entity, the lock is removed when there is no more reference to this entity in memory."]}),"\n",(0,t.jsxs)(s.li,{children:["Transactions can be started, validated or cancelled separately on each remote datastore using the ",(0,t.jsx)(s.code,{children:"dataStore.startTransaction()"}),", ",(0,t.jsx)(s.code,{children:"dataStore.cancelTransaction()"}),", and ",(0,t.jsx)(s.code,{children:"dataStore.validateTransaction()"})," functions. They do not impact other datastores."]}),"\n",(0,t.jsxs)(s.li,{children:["Classic 4D language commands (",(0,t.jsx)(s.code,{children:"START TRANSACTION"}),", ",(0,t.jsx)(s.code,{children:"VALIDATE TRANSACTION"}),", ",(0,t.jsx)(s.code,{children:"CANCEL TRANSACTION"}),") only apply to the main datastore (returned by ",(0,t.jsx)(s.code,{children:"ds"}),").\nIf an entity from a remote datastore is hold by a transaction in a process, other processes cannot update it, even if these processes share the same session."]}),"\n",(0,t.jsxs)(s.li,{children:["Locks on entities are removed and transactions are rollbacked:\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"when the process is killed."}),"\n",(0,t.jsx)(s.li,{children:"when the session is closed on the server"}),"\n",(0,t.jsx)(s.li,{children:"when the session is killed from the server administration window."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"closing-sessions",children:"Closing sessions"}),"\n",(0,t.jsxs)(s.p,{children:["A session is automatically closed by 4D when there has been no activity during its timeout period. The default timeout is 60 mn, but this value can be modified using the ",(0,t.jsx)(s.code,{children:"connectionInfo"})," parameter of the ",(0,t.jsx)(s.code,{children:"Open datastore"})," command."]}),"\n",(0,t.jsx)(s.p,{children:"If a request is sent to the remote datastore after the session has been closed, it is automatically re-created if possible (license available, server not stopped...). However, keep in mind that the context of the session regarding locks and transactions is lost (see above)."})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},454878:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/sessionAdmin-fb7129cb6aaab939e9e8b20cb43bce8f.png"},413664:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/sessions-69775ca2d11bfdbc289284efe41c0b59.png"},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>r});var t=n(296540);const o={},i=t.createContext(o);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);