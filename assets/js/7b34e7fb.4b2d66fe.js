"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[30313],{27873:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var s=n(474848),o=n(28453);const r={id:"onBeforeDataEntry",title:"On Before Data Entry"},i=void 0,d={id:"Events/onBeforeDataEntry",title:"On Before Data Entry",description:"|Code|Can be called by|Definition|",source:"@site/versioned_docs/version-20/Events/onBeforeDataEntry.md",sourceDirName:"Events",slug:"/Events/onBeforeDataEntry",permalink:"/docs/20/Events/onBeforeDataEntry",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Events%2FonBeforeDataEntry.md%20(20)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20",frontMatter:{id:"onBeforeDataEntry",title:"On Before Data Entry"},sidebar:"docs",previous:{title:"On Alternative Click",permalink:"/docs/20/Events/onAlternativeClick"},next:{title:"On Before Keystroke",permalink:"/docs/20/Events/onBeforeKeystroke"}},l={},c=[{value:"Description",id:"description",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Code"}),(0,s.jsx)(t.th,{children:"Can be called by"}),(0,s.jsx)(t.th,{children:"Definition"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"41"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"/docs/20/FormObjects/listboxOverview",children:"List Box"})," - ",(0,s.jsx)(t.a,{href:"/docs/20/FormObjects/listboxOverview#list-box-columns",children:"List Box Column"})]}),(0,s.jsx)(t.td,{children:"A list box cell is about to change to editing mode"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"This event is generated just before a cell in the list box is edited (before the entry cursor is displayed). This event allows the developer, for example, to display a different text depending on whether the user is in the display or edit mode."}),"\n",(0,s.jsxs)(t.p,{children:["When the cursor arrives in the cell, the ",(0,s.jsx)(t.code,{children:"On Before Data Entry"})," event is generated in the list box or column method."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If, in the context of this event, $0 is set to -1, the cell is considered as not enterable. If the event was generated after ",(0,s.jsx)(t.strong,{children:"Tab"})," or ",(0,s.jsx)(t.strong,{children:"Shift+Tab"})," was pressed, the focus goes to either the next cell or the previous one, respectively."]}),"\n",(0,s.jsx)(t.li,{children:"If $0 is not -1 (by default $0 is 0), the cell is enterable and switches to editing mode."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["See also ",(0,s.jsx)(t.a,{href:"/docs/20/FormObjects/listboxOverview#managing-entry",children:"Managing entry"})," section."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(296540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);