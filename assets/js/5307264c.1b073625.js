"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["38485"],{719325:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>a,toc:()=>d,default:()=>o,metadata:()=>t,assets:()=>h,contentTitle:()=>c});var t=JSON.parse('{"id":"commands-legacy/listbox-get-hierarchy","title":"LISTBOX GET HIERARCHY","description":"LISTBOX GET HIERARCHY ( { ;} object ; hierarchical {; hierarchy*} )","source":"@site/versioned_docs/version-21/commands-legacy/listbox-get-hierarchy.md","sourceDirName":"commands-legacy","slug":"/commands/listbox-get-hierarchy","permalink":"/docs/commands/listbox-get-hierarchy","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands-legacy%2Flistbox-get-hierarchy.md%20(21)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"21","frontMatter":{"id":"listbox-get-hierarchy","title":"LISTBOX GET HIERARCHY","slug":"/commands/listbox-get-hierarchy","displayed_sidebar":"docs"},"sidebar":"docs"}'),i=n(785893),s=n(250065);let a={id:"listbox-get-hierarchy",title:"LISTBOX GET HIERARCHY",slug:"/commands/listbox-get-hierarchy",displayed_sidebar:"docs"},c=void 0,h={},d=[{value:"Description",id:"description",level:2},{value:"See also",id:"see-also",level:2},{value:"Properties",id:"properties",level:2}];function l(e){let r={a:"a",br:"br",em:"em",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"LISTBOX GET HIERARCHY"})," ( {* ;} ",(0,i.jsx)(r.em,{children:"object"})," ; ",(0,i.jsx)(r.em,{children:"hierarchical"})," {; ",(0,i.jsx)(r.em,{children:"hierarchy"}),"} )"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Parameter"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"*"}),(0,i.jsx)(r.td,{children:"Operator"}),(0,i.jsx)(r.td,{children:"\u2192"}),(0,i.jsxs)(r.td,{children:["If specified, object is an object name (string)",(0,i.jsx)(r.br,{}),"If omitted, object is a variable"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"object"}),(0,i.jsx)(r.td,{children:"any"}),(0,i.jsx)(r.td,{children:"\u2192"}),(0,i.jsxs)(r.td,{children:["Object name (if * is specified) or ",(0,i.jsx)(r.br,{}),"Variable (if * is omitted)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"hierarchical"}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:"\u2190"}),(0,i.jsxs)(r.td,{children:["True = hierarchical list box",(0,i.jsx)(r.br,{}),"False = non-hierarchical list box"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"hierarchy"}),(0,i.jsx)(r.td,{children:"Pointer array"}),(0,i.jsx)(r.td,{children:"\u2190"}),(0,i.jsx)(r.td,{children:"Array of pointers"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(r.p,{children:["The LISTBOX GET HIERARCHY command lets you find out the hierarchical properties of the list box object designated by the ",(0,i.jsx)(r.em,{children:"object"})," and ",(0,i.jsx)(r.em,{children:"*"})," parameters."]}),"\n",(0,i.jsxs)(r.p,{children:["If you pass the optional ",(0,i.jsx)(r.em,{children:"*"})," parameter, you indicate that the ",(0,i.jsx)(r.em,{children:"object"})," parameter is an object name (string). If you do not pass this parameter, you indicate that the ",(0,i.jsx)(r.em,{children:"object"})," parameter is a variable. In this case, you pass a variable reference instead of a string."]}),"\n",(0,i.jsxs)(r.p,{children:["The Boolean ",(0,i.jsx)(r.em,{children:"hierarchical"})," parameter indicates whether or not the list box is in hierarchical mode:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"if the parameter returns True, the list box is in hierarchical mode,"}),"\n",(0,i.jsx)(r.li,{children:"if the parameter returns False, the list box is displayed in non-hierarchical mode (standard array mode)."}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["If the list box is in hierarchical mode, the command fills the ",(0,i.jsx)(r.em,{children:"hierarchy"})," array with pointers to the arrays of the list box used to set the hierarchy."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Note:"})," If the list box is in non-hierarchical mode, the command returns, in the first element of the ",(0,i.jsx)(r.em,{children:"hierarchy"})," array, a pointer to the array of the first column of the list box."]}),"\n",(0,i.jsx)(r.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"/docs/commands/listbox-set-hierarchy",children:"LISTBOX SET HIERARCHY"})}),"\n",(0,i.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{}),(0,i.jsx)(r.th,{})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Command number"}),(0,i.jsx)(r.td,{children:"1099"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Thread safe"}),(0,i.jsx)(r.td,{children:"\u2717"})]})]})]})]})}function o(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,r,n){n.d(r,{Z:()=>c,a:()=>a});var t=n(667294);let i={},s=t.createContext(i);function a(e){let r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);