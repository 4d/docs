"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[16379],{953418:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=t(474848),a=t(28453);const s={id:"copy-parameters",title:"Copy parameters",slug:"/commands/copy-parameters",displayed_sidebar:"docs"},o=void 0,i={id:"commands-legacy/copy-parameters",title:"Copy parameters",description:"Copy parameters {( startFrom )} -> Function result",source:"@site/versioned_docs/version-20-R7/commands-legacy/copy-parameters.md",sourceDirName:"commands-legacy",slug:"/commands/copy-parameters",permalink:"/docs/commands/copy-parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands-legacy%2Fcopy-parameters.md%20(20-R7)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R7",frontMatter:{id:"copy-parameters",title:"Copy parameters",slug:"/commands/copy-parameters",displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"Command name",permalink:"/docs/commands/command-name"},next:{title:"Count parameters",permalink:"/docs/commands/count-parameters"}},l={},c=[{value:"Description",id:"description",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"See also",id:"see-also",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Copy parameters"})," {( ",(0,r.jsx)(n.em,{children:"startFrom"})," )} -> Function result"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"startFrom"}),(0,r.jsx)(n.td,{children:"Integer"}),(0,r.jsx)(n.td,{children:"\u2192"}),(0,r.jsx)(n.td,{children:"Starting index (included)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Function result"}),(0,r.jsx)(n.td,{children:"Collection"}),(0,r.jsx)(n.td,{children:"\u2190"}),(0,r.jsx)(n.td,{children:"New collection containing parameters actually passed"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"The Copy parameters command returns a new collection containing all parameters actually passed to a method or a function. This command is useful when you need to forward a various number of parameters from a method or function to another method or function."}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.em,{children:"startFrom"})," optional parameter, you can pass the index of the parameter from which to start collecting parameters to forward. The ",(0,r.jsx)(n.em,{children:"startFrom"})," parameter itself is included."]}),"\n",(0,r.jsxs)(n.p,{children:["When called inside a formula, ",(0,r.jsx)(n.strong,{children:"Copy parameters"})," returns the parameters passed explicitely using ",(0,r.jsx)(n.em,{children:"apply()"})," or ",(0,r.jsx)(n.em,{children:"call()"})," (and not those passed to the parent method or function)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Copy parameters"})," returns an empty collection if:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"it is not called in a method or function that has been called by another method or function,"}),"\n",(0,r.jsx)(n.li,{children:"no parameter was passed to the parent method or function."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(n.p,{children:"Calling a different function depending on the first parameter and passing other parameters to this function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:'\xa0Function selectTask($task Text)\n\xa0Case of\n\xa0\xa0\xa0\xa0:($task="Task1")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0This.task1(Copy parameters(2))\n\xa0\xa0\xa0\xa0:($task="Task2")\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0This.task2(Copy parameters(2))\n\xa0End case\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Or, calling another function on another object with ",(0,r.jsx)(n.strong,{children:"apply()"})," and pass the parameters:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:"\xa0Function doSomething($param Text;$extraParameters Variant)\n\xa0This.delegate.doSomething.apply(This.delegate;Copy parameters)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsxs)(n.p,{children:["Since the command returns a collection, it can be used with ",(0,r.jsx)(n.strong,{children:".join()"})," to build for example a html list:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:'\xa0\xa0// Class\n\xa0\n\xa0Function list($typeText)->Text\n\xa0\xa0//type of list is "u" or "o"\n\xa0var $value : Collection\n\xa0$value:=Copy parameters(2)\n\xa0$html:="<"+$type+"l>\n* "  \n\xa0$html+=$value.join("\n* ")  \n\xa0$html+="\n"\n\xa0return$html\n\xa0\n\xa0\xa0// Method\n\xa0\n\xa0$htmlList:=$c.list("u";"Alpha";"Bravo";"Charlie")\n\xa0\xa0// $htmlList = \n* Alpha\n* Bravo\n* Charlie\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"see-also",children:"See also"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/commands/count-parameters",children:"Count parameters"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(296540);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);