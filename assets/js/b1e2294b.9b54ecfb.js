"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12900],{845115:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var n=r(474848),s=r(28453);const d={id:"orderby",title:"$orderby"},o=void 0,i={id:"REST/orderby",title:"$orderby",description:'Sorts the data returned by the attribute and sorting order defined (e.g., $orderby="lastName desc, salary asc")',source:"@site/versioned_docs/version-20-R5/REST/$orderby.md",sourceDirName:"REST",slug:"/REST/orderby",permalink:"/docs/20-R5/REST/orderby",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20REST%2F%24orderby.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"orderby",title:"$orderby"},sidebar:"docs",previous:{title:"$method",permalink:"/docs/20-R5/REST/method"},next:{title:"$querypath",permalink:"/docs/20-R5/REST/querypath"}},a={},c=[{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Sorts the data returned by the attribute and sorting order defined (",(0,n.jsx)(t.em,{children:"e.g."}),", ",(0,n.jsx)(t.code,{children:'$orderby="lastName desc, salary asc"'}),")"]}),"\n",(0,n.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"$orderby"})," orders the entities returned by the REST request. For each attribute, you specify the order as ",(0,n.jsx)(t.code,{children:"ASC"})," (or ",(0,n.jsx)(t.code,{children:"asc"}),") for ascending order and ",(0,n.jsx)(t.code,{children:"DESC"})," (",(0,n.jsx)(t.code,{children:"desc"}),") for descending order. By default, the data is sorted in ascending order. If you want to specify multiple attributes, you can delimit them with a comma, ",(0,n.jsx)(t.em,{children:"e.g."}),", ",(0,n.jsx)(t.code,{children:'$orderby="lastName desc, firstName asc"'}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.p,{children:"In this example, we retrieve entities and sort them at the same time:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:'GET  /rest/Employee/?$filter="salary!=0"&$orderby="salary DESC,lastName ASC,firstName ASC"'})}),"\n",(0,n.jsx)(t.p,{children:"The example below sorts the entity set by lastName attribute in ascending order:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:'GET  /rest/Employee/$entityset/CB1BCC603DB0416D939B4ED379277F02?$orderby="lastName"'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Result"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'{\n    __entityModel: "Employee",\n    __COUNT: 10,\n    __SENT: 10,\n    __FIRST: 0,\n    __ENTITIES: [\n        {\n            __KEY: "1",\n            __STAMP: 1,\n            firstName: "John",\n            lastName: "Smith",\n            salary: 90000\n        },\n        {\n            __KEY: "2",\n            __STAMP: 2,\n            firstName: "Susan",\n            lastName: "O\'Leary",\n            salary: 80000\n        },\n// more entities\n    ]\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(296540);const s={},d=n.createContext(s);function o(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);