/*! For license information please see 46d81f4d.067ed34d.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[60784],{746924:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var r=t(474848),n=t(28453);const s={id:"control-flow",title:"Control flow overview"},i=void 0,c={id:"Concepts/control-flow",title:"Control flow overview",description:"Regardless of the simplicity or complexity of a method, you will always use one or more of three types of programming structures. Programming structures control the flow of execution, whether and in what order statements are executed within a method. There are three types of structures:",source:"@site/versioned_docs/version-18/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/18/Concepts/control-flow",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"control-flow",title:"Control flow overview"},sidebar:"docs",previous:{title:"Shared objects and collections",permalink:"/docs/18/Concepts/shared"},next:{title:"Branching structures",permalink:"/docs/18/Concepts/branching"}},l={},a=[];function d(e){const o={a:"a",br:"br",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.p,{children:"Regardless of the simplicity or complexity of a method, you will always use one or more of three types of programming structures. Programming structures control the flow of execution, whether and in what order statements are executed within a method. There are three types of structures:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Sequential"}),": a sequential structure is a simple, linear structure. A sequence is a series of statements that 4D executes one after the other, from first to last. A one-line routine, frequently used for object methods, is the simplest case of a sequential structure. For example: ",(0,r.jsx)(o.code,{children:"[People]lastName:=Uppercase([People]lastName)"})]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.a,{href:"/docs/18/Concepts/branching",children:"Branching"})}),": A branching structure allows methods to test a condition and take alternative paths, depending on the result. The condition is a Boolean expression, an expression that evaluates TRUE or FALSE. One branching structure is the ",(0,r.jsx)(o.code,{children:"If...Else...End if"})," structure, which directs program flow along one of two paths. The other branching structure is the ",(0,r.jsx)(o.code,{children:"Case of...Else...End case"})," structure, which directs program flow to one of many paths."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.a,{href:"/docs/18/Concepts/looping",children:"Looping"})}),": When writing methods, it is very common to find that you need a sequence of statements to repeat a number of times. To deal with this need, the 4D language provides the following looping structures:\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.code,{children:"While...End while"})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.code,{children:"Repeat...Until"})}),"\n",(0,r.jsx)(o.li,{children:(0,r.jsx)(o.code,{children:"For...End for"})}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"For each...End for each"}),(0,r.jsx)(o.br,{}),"\nThe loops are controlled in two ways: either they loop until a condition is met, or they loop a specified number of times. Each looping structure can be used in either way, but ",(0,r.jsx)(o.code,{children:"While"})," loops and ",(0,r.jsx)(o.code,{children:"Repeat"})," loops are more appropriate for repeating until a condition is met, and ",(0,r.jsx)(o.code,{children:"For"})," loops are more appropriate for looping a specified number of times. ",(0,r.jsx)(o.code,{children:"For each...End for each"})," allows mixing both ways and is designed to loop within objects and collections."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Note:"}),' 4D allows you to embed programming structures up to a "depth" of 512 levels.']})]})}function h(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},221020:(e,o,t)=>{var r=t(296540),n=Symbol.for("react.element"),s=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,c=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function a(e,o,t){var r,s={},a=null,d=null;for(r in void 0!==t&&(a=""+t),void 0!==o.key&&(a=""+o.key),void 0!==o.ref&&(d=o.ref),o)i.call(o,r)&&!l.hasOwnProperty(r)&&(s[r]=o[r]);if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===s[r]&&(s[r]=o[r]);return{$$typeof:n,type:e,key:a,ref:d,props:s,_owner:c.current}}o.Fragment=s,o.jsx=a,o.jsxs=a},474848:(e,o,t)=>{e.exports=t(221020)},28453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>c});var r=t(296540);const n={},s=r.createContext(n);function i(e){const o=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);