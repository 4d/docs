"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[19769],{37114:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var t=r(474848),s=r(28453);const l={id:"parse-formula",title:"Parse formula",slug:"/commands/parse-formula",displayed_sidebar:"docs"},a=void 0,i={id:"commands-legacy/parse-formula",title:"Parse formula",description:"Parse formula ( formula {; options}{; errorMessage} ) -> Function result",source:"@site/versioned_docs/version-20-R7/commands-legacy/parse-formula.md",sourceDirName:"commands-legacy",slug:"/commands/parse-formula",permalink:"/docs/commands/parse-formula",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands-legacy%2Fparse-formula.md%20(20-R7)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R7",frontMatter:{id:"parse-formula",title:"Parse formula",slug:"/commands/parse-formula",displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"GET ALLOWED METHODS",permalink:"/docs/commands/get-allowed-methods"},next:{title:"SET ALLOWED METHODS",permalink:"/docs/commands/set-allowed-methods"}},o={},d=[{value:"Description",id:"description",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"See also",id:"see-also",level:4}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parse formula"})," ( ",(0,t.jsx)(n.em,{children:"formula"})," {; ",(0,t.jsx)(n.em,{children:"options"}),"}{; ",(0,t.jsx)(n.em,{children:"errorMessage"}),"} ) -> Function result"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"formula"}),(0,t.jsx)(n.td,{children:"Text"}),(0,t.jsx)(n.td,{children:"\u2192"}),(0,t.jsx)(n.td,{children:"Plain text formula"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"options"}),(0,t.jsx)(n.td,{children:"Integer"}),(0,t.jsx)(n.td,{children:"\u2192"}),(0,t.jsx)(n.td,{children:"Instructions for input / output"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"errorMessage"}),(0,t.jsx)(n.td,{children:"Text"}),(0,t.jsx)(n.td,{children:"\u2190"}),(0,t.jsx)(n.td,{children:"Error message (empty string if no error)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Function result"}),(0,t.jsx)(n.td,{children:"Text"}),(0,t.jsx)(n.td,{children:"\u2190"}),(0,t.jsx)(n.td,{children:"Transformed formula (plain text)"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"This command is not thread-safe, it cannot be used in preemptive code."})}),"\n",(0,t.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Parse formula"})," function analyzes the 4D ",(0,t.jsx)(n.em,{children:"formula"}),", checks its syntax, and returns its normalized form. This allows the formula to remain valid in the event that a 4D language or structure element (command, constant, table, field, or 4D Plugin) is renamed."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parse formula"})," can be used to evaluate and translate formulas in the following manner:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Real" table/field names can be converted to "virtual" structure* names (custom names) or tokenized equivalents**'}),"\n",(0,t.jsx)(n.li,{children:"Tokenized table/field equivalents can be converted to virtual structure names or real table/field names"}),"\n",(0,t.jsx)(n.li,{children:"Virtual structures can be converted to real table/field names or tokenized equivalents"}),"\n",(0,t.jsx)(n.li,{children:"4D language elements can be converted to tokenized 4D language equivalents"}),"\n",(0,t.jsx)(n.li,{children:"Tokenized 4D language equivalents can be converted to 4D language elements"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:[(0,t.jsx)(n.em,{children:"*"})," Virtual structures are defined using the ",(0,t.jsx)(n.a,{href:"/docs/commands/set-table-titles",children:"SET TABLE TITLES"})," and ",(0,t.jsx)(n.a,{href:"/docs/commands/set-field-titles",children:"SET FIELD TITLES"})," commands (* parameter required)."]})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"**"})," ",(0,t.jsx)(n.em,{children:"Tokenized equivalents are 4D language and structure elements in plain text"})," *",(0,t.jsx)(n.em,{children:"expressed with token syntax as shown below ("})," ",(0,t.jsx)(n.em,{children:"see also Using tokens in formulas):"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-RAW",children:"[Table:1]Field:1+String:C10(1)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.em,{children:"formula"}),", pass a formula in plain text. It can use real or virtual structure names, as well as tokenized equivalents."]}),"\n",(0,t.jsxs)(n.p,{children:["No matter the name types used in ",(0,t.jsx)(n.em,{children:"formula"}),", by default ",(0,t.jsx)(n.strong,{children:"Parse formula"})," returns the actual 4D language or structure element names without text tokens."]}),"\n",(0,t.jsxs)(n.p,{children:["The optional ",(0,t.jsx)(n.em,{children:"options"})," parameter allows you to specify how ",(0,t.jsx)(n.em,{children:"formula"})," is expressed and/or returned using the following constants from the ",(0,t.jsx)(n.em,{children:"Formulas"})," theme. You can combine constants to designate both the input and output format of the returned formula."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Constant"}),(0,t.jsx)(n.th,{children:"Value"}),(0,t.jsx)(n.th,{children:"Comment"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Formula in with virtual structure"}),(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:"Formula contains custom (virtual) names. By default, returned formula contains real names."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Formula out with virtual structure"}),(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:"Returned formula must contain custom (virtual) names."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Formula out with tokens"}),(0,t.jsx)(n.td,{children:"4"}),(0,t.jsx)(n.td,{children:"Returned formula must contain text tokens (e.g. :Cxx)."})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["The optional ",(0,t.jsx)(n.em,{children:"errorMessage"})," parameter will receive an error message if there is a syntax error in ",(0,t.jsx)(n.em,{children:"formula"}),". If there is no error, an empty string will be returned."]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:'\xa0ARRAY TEXT($t1;1)\n\xa0ARRAY LONGINT($t2;1)\n\xa0$t1{1}:="Virtual table"\n\xa0$t2{1}:=1\n\xa0SET TABLE TITLES($t1;$t2;*)\n\xa0\n\xa0ARRAY TEXT($tf1;1)\n\xa0ARRAY LONGINT($tf2;1)\n\xa0$tf1{1}:="Virtual field"\n\xa0$tf2{1}:=2\n\xa0SET FIELD TITLES([Table_1];$tf1;$tf2;*)\n\xa0\n\xa0\xa0//Virtual structure to table and field name equivalent\n\xa0$parsedFormula:=Parse formula("[Virtual table]Virtual field";Formula in with virtual structure;$errorMessage)\n\xa0\xa0//return [Table_1]Field_2\n\xa0\n\xa0\xa0//Table and field name to virtual structure equivalent\n\xa0$parsedFormula:=Parse formula("[Table_1]Field_2";Formula out with virtual structure;$errorMessage)\n\xa0\xa0//return [Virtual table]Virtual field\n\xa0\n\xa0\xa0//Table and field name to the tokenized form equivalent\n\xa0$parsedFormula:=Parse formula("String([Table_1]Field_2)";Formula out with tokens;$errorMessage)\n\xa0\xa0//return String:C10([Table_1:1]Field_2:2)\n\xa0\n\xa0\n'})}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-4d",children:'\xa0\xa0//ask the user to type their favorite formula\n\xa0$formula:=""\n\xa0EDIT FORMULA([Table_1];$formula)\n\xa0\n\xa0\xa0//save user\'s formula for later use\n\xa0CREATE RECORD([users_preferences])\n\xa0$persistentFormula:=Parse formula($formula;Formula out with tokens)\n\xa0[users_preferences]formula:=$persistentFormula\n\xa0SAVE RECORD([users_preferences])\n\xa0\n\xa0\xa0//later: execute the previously saved formula\n\xa0CREATE RECORD([Table_1])\n\xa0EXECUTE FORMULA([users_preferences]formula)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"see-also",children:"See also"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/commands/formula-from-string",children:"Formula from string"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"/docs/commands/set-field-titles",children:"SET FIELD TITLES"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"/docs/commands/set-table-titles",children:"SET TABLE TITLES"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.em,{children:"Using tokens in formulas"})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(296540);const s={},l=t.createContext(s);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);