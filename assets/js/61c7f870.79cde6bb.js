"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83753],{449944:(n,e,d)=>{d.r(e),d.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>o,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var r=d(474848),t=d(28453);const s={id:"type",title:"Type",slug:"/commands/type",displayed_sidebar:"docs"},i=void 0,l={id:"commands-legacy/type",title:"Type",description:"Type ( fieldVar ) -> Function result",source:"@site/versioned_docs/version-20-R7/commands-legacy/type.md",sourceDirName:"commands-legacy",slug:"/commands/type",permalink:"/docs/commands/type",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands-legacy%2Ftype.md%20(20-R7)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R7",frontMatter:{id:"type",title:"Type",slug:"/commands/type",displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"TRACE",permalink:"/docs/commands/trace"},next:{title:"Undefined",permalink:"/docs/commands/undefined"}},c={},a=[{value:"Description",id:"description",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Example 3",id:"example-3",level:4},{value:"See also",id:"see-also",level:4}];function h(n){const e={a:"a",br:"br",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Type"})," ( ",(0,r.jsx)(e.em,{children:"fieldVar"})," ) -> Function result"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Parameter"}),(0,r.jsx)(e.th,{children:"Type"}),(0,r.jsx)(e.th,{}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"fieldVar"}),(0,r.jsx)(e.td,{children:"Field, Variable"}),(0,r.jsx)(e.td,{children:"\u2192"}),(0,r.jsx)(e.td,{children:"field or variable to be tested"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Function result"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"\u2190"}),(0,r.jsx)(e.td,{children:"Data type number"})]})]})]}),"\n",(0,r.jsx)(e.h4,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(e.p,{children:["The Type command returns a numeric value that indicates the type of field or variable you have passed in the ",(0,r.jsx)(e.em,{children:"fieldVar"})," parameter."]}),"\n",(0,r.jsxs)(e.p,{children:["4D provides the following predefined constants found in the ",(0,r.jsx)(e.em,{children:"Field and Variable Types"})," theme:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Constant"}),(0,r.jsx)(e.th,{children:"Type"}),(0,r.jsx)(e.th,{children:"Value"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Array 2D"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"13"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Blob array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"31"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Boolean array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"22"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Date array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"17"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Integer array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"15"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is alpha field"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"0"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is BLOB"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"30"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is Boolean"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"6"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is collection"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"42"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is date"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"4"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is integer"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"8"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is integer 64 bits"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"25"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is longint"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"9"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is null"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"255"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is object"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"38"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is picture"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"3"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is pointer"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"23"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is real"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"1"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is string var"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"24"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is subtable"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"7"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is text"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"2"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is time"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"11"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is undefined"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"5"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Is variant"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"12"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"LongInt array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"16"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Object array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"39"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Picture array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"19"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Pointer array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"20"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Real array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"14"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"String array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"21"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Text array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"18"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Time array"}),(0,r.jsx)(e.td,{children:"Longint"}),(0,r.jsx)(e.td,{children:"32"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:["You can apply the Type function to fields, interprocess variables, process variables, local variables, and dereferenced pointers for these types of objects. You can apply ",(0,r.jsx)(e.strong,{children:"Type"})," to the parameters ",(0,r.jsx)(e.em,{children:"($1, $2 ... ${...})"})," of a project method or to the result of a function ",(0,r.jsx)(e.em,{children:"($0)"}),"."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["You can not apply the ",(0,r.jsx)(e.strong,{children:"Type"})," function to scalar expressions such as object properties (",(0,r.jsx)(e.em,{children:"emp.name"}),") or collection elements (",(0,r.jsx)(e.em,{children:"myColl[5]"}),"). To do this, you must use the ",(0,r.jsx)(e.a,{href:"/docs/commands/value-type",children:"Value type"})," command."]}),"\n",(0,r.jsxs)(e.li,{children:["In compiled mode, calling ",(0,r.jsx)(e.strong,{children:"Type"})," on a method parameter declared as variant does not return Is variant but the actual data type (same as calling ",(0,r.jsx)(e.a,{href:"/docs/commands/value-type",children:"Value type"}),")."]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(e.p,{children:"The following project method empties some or all of the fields for the current record of the table whose a pointer is passed as parameter. It does this without deleting or changing the current record:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-4d",children:'\xa0\xa0// EMPTY RECORD Project Method\n\xa0\xa0// EMPTY RECORD ( Pointer {; Long } )\n\xa0\xa0// EMPTY RECORD ( -> [Table] { ; Type Flags } )\n\xa0\n\xa0var $1 : Pointer\n\xa0var $2;$vlTypeFlags : Integer\n\xa0\n\xa0If(Count parameters>=2)\n\xa0\xa0\xa0\xa0$vlTypeFlags:=$2\n\xa0Else\n\xa0\xa0\xa0\xa0$vlTypeFlags:=0xFFFFFFFF\n\xa0End if\n\xa0For($vlField;1;Last field number($1))\n\xa0\xa0\xa0\xa0$vpField:=Field(Table($1);$vlField)\n\xa0\xa0\xa0\xa0$vlFieldType:=Type($vpField->)\n\xa0\xa0\xa0\xa0If($vlTypeFlags ??$vlFieldType )\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0Case of\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:(($vlFieldType=Is alpha field)|($vlFieldType=Is text))\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$vpField->:=""\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:(($vlFieldType=Is real)|($vlFieldType=Is integer)|($vlFieldType=Is longint))\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$vpField->:=0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:($vlFieldType=Is date)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$vpField->:=!00/00/00!\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:($vlFieldType=Is time)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$vpField->:=?00:00:00?\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:($vlFieldType=Is Boolean)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$vpField->:=False\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:($vlFieldType=Is picture)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0var $vgEmptyPicture : Picture\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0$vpField->:=$vgEmptyPicture\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:($vlFieldType=Is subtable)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Repeat\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0ALL SUBRECORDS($vpField->)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0DELETE SUBRECORD($vpField->)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Until(Records in subselection($vpField->)=0)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:($vlFieldType=Is BLOB)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0SET BLOB SIZE($vpField->;0)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0End case\n\xa0\xa0\xa0\xa0End if\n\xa0End for\n'})}),"\n",(0,r.jsx)(e.p,{children:"After this project method is implemented in your database, you can write:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-4d",children:"\xa0\xa0// Empty the whole current record of the table [Things To Do]\n\xa0EMPTY RECORD(->[Things To Do])\n\xa0\n\xa0\xa0// Empty Text, BLOB and Picture fields for the current record of the table [Things To Do]\n\xa0EMPTY RECORD(->[Things To Do];0?+Is text?+Is BLOB?+Is picture)\n\xa0\n\xa0\xa0// Empty the whole current record of the table [Things To Do] except Alphanumeric fields\n\xa0EMPTY RECORD(->[Things To Do];-1?-Is alpha field)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsx)(e.p,{children:"In certain cases, for example when writing generic code, you may need to find out whether an array is a standard independent array or the \u201crow\u201d of a 2D array. In this case, you can use the following code:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-4d",children:'\xa0ptrmyArr:=->myArr{6}\xa0// Is myArr{6} the row of a 2D array?\n\xa0RESOLVE POINTER(ptrmyArr;varName;tableNum;fieldNum)\n\xa0If(varName#"")\n\xa0\xa0\xa0\xa0$ptr:=Get pointer(varName)\n\xa0\xa0\xa0\xa0$thetype:=Type($ptr->)\n\xa0\xa0// If myArr{6} is the row of a 2D array, $thetype equals 13\n\xa0End if\n'})}),"\n",(0,r.jsx)(e.h4,{id:"example-3",children:"Example 3"}),"\n",(0,r.jsxs)(e.p,{children:["See example for the ",(0,r.jsx)(e.a,{href:"/docs/commands/append-data-to-pasteboard",children:"APPEND DATA TO PASTEBOARD"})," command."]}),"\n",(0,r.jsx)(e.h4,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/commands/is-a-variable",children:"Is a variable"}),(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.a,{href:"/docs/commands/undefined",children:"Undefined"}),(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.a,{href:"/docs/commands/value-type",children:"Value type"})]})]})}function o(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}},28453:(n,e,d)=>{d.d(e,{R:()=>i,x:()=>l});var r=d(296540);const t={},s=r.createContext(t);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);