"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94206],{603905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>u});var r=t(667294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,o=function(e,a){if(null==e)return{};var t,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),i=function(e){var a=r.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},d=function(e){var a=i(e.components);return r.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var t=e.components,o=e.mdxType,n=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=i(t),u=o,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||n;return t?r.createElement(h,s(s({ref:a},d),{},{components:t})):r.createElement(h,s({ref:a},d))}));function u(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=t.length,s=new Array(n);s[0]=c;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var i=2;i<n;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},499976:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>d});t(667294);var r=t(603905);function o(){return o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function n(e,a){if(null==e)return{};var t,r,o=function(e,a){if(null==e)return{};var t,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={id:"parameters",title:"Par\xe2metros"},l=void 0,p={unversionedId:"Concepts/parameters",id:"version-20-R5/Concepts/parameters",title:"Par\xe2metros",description:"Frequentemente ser\xe1 preciso passar dados para seus m\xe9todos. Isso \xe9 facilmente feito com par\xe2metros.",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-20-R5/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/pt/Concepts/parameters",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"parameters",title:"Par\xe2metros"},sidebar:"docs",previous:{title:"P\xe1gina M\xe9todos",permalink:"/docs/pt/Concepts/methods"},next:{title:"Objetos e cole\xe7\xf5es compartilhados",permalink:"/docs/pt/Concepts/shared"}},i={},d=[{value:"Vis\xe3o Geral",id:"vis\xe3o-geral",level:2},{value:"Declara\xe7\xe3o de par\xe2metros",id:"declara\xe7\xe3o-de-par\xe2metros",level:2},{value:"Valor retornado",id:"valor-retornado",level:3},{value:"Tipos de datos compat\xedveis",id:"tipos-de-datos-compat\xedveis",level:3},{value:"Inicializa\xe7\xe3o",id:"inicializa\xe7\xe3o",level:3},{value:"<code>return {expression}</code>",id:"return-expression",level:2},{value:"Indire\xe7\xe3o dos par\xe2metros",id:"indire\xe7\xe3o-dos-par\xe2metros",level:2},{value:"Uso de par\xe2metros vari\xe1veis",id:"uso-de-par\xe2metros-vari\xe1veis",level:3},{value:"Declara\xe7\xe3o de par\xe2metros vari\xe1veis",id:"declara\xe7\xe3o-de-par\xe2metros-vari\xe1veis",level:3},{value:"Exemplo",id:"exemplo",level:4},{value:"Compila\xe7\xe3o",id:"compila\xe7\xe3o",level:2},{value:"Par\xe2metros declarados em prot\xf3tipos",id:"par\xe2metros-declarados-em-prot\xf3tipos",level:3},{value:"Par\xe2metros de m\xe9todo declarados fora dos prot\xf3tipos",id:"par\xe2metros-de-m\xe9todo-declarados-fora-dos-prot\xf3tipos",level:3},{value:"<code>Compiler_Methods</code> method",id:"compiler_methods-method",level:4},{value:"Conflitos entre declara\xe7\xf5es",id:"conflitos-entre-declara\xe7\xf5es",level:3},{value:"Tipo de par\xe1metro equivocado",id:"tipo-de-par\xe1metro-equivocado",level:2},{value:"Usando propriedades objeto como par\xe2metros nomeados",id:"usando-propriedades-objeto-como-par\xe2metros-nomeados",level:2},{value:"Par\xe2metros opcionais",id:"par\xe2metros-opcionais",level:2},{value:"Valores ou refer\xeancias",id:"valores-ou-refer\xeancias",level:2},{value:"Casos particulares: objetos e cole\xe7\xf5es",id:"casos-particulares-objetos-e-cole\xe7\xf5es",level:3}],m={toc:d};function c(e){var{components:a}=e,t=n(e,["components"]);return(0,r.kt)("wrapper",o({},m,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Frequentemente ser\xe1 preciso passar dados para seus m\xe9todos. Isso \xe9 facilmente feito com par\xe2metros."),(0,r.kt)("h2",o({},{id:"vis\xe3o-geral"}),"Vis\xe3o Geral"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")," (or ",(0,r.kt)("strong",{parentName:"p"},"arguments"),") are pieces of data that a method or a class function needs in order to perform its task. The terms ",(0,r.kt)("em",{parentName:"p"},"parameter")," and ",(0,r.kt)("em",{parentName:"p"},"argument")," are used interchangeably throughout this manual. Par\xe2metros tamb\xe9m s\xe3o passados para comandos integrados 4D. In this example, the string \u201cHello\u201d is an argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ALERT")," built-in command:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'ALERT("Hello")\n')),(0,r.kt)("p",null,"Os par\xe2metros s\xe3o passados aos m\xe9todos da mesma maneira. For example, if a class function named ",(0,r.kt)("inlineCode",{parentName:"p"},"getArea()")," accepts two parameters, a call to the class function might look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"$area:=$o.getArea(50;100)\n")),(0,r.kt)("p",null,"Or, if a project method named ",(0,r.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING")," accepts three parameters, a call to the method might look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Essa fun\xe7\xe3o \xe9 chamada da maneira abaixo:\n")),(0,r.kt)("p",null,"Os par\xe2metros est\xe3o separados por ponto e v\xedrgula (;)."),(0,r.kt)("p",null,"Os mesmos princ\xedpios s\xe3o usados quando m\xe9todos forem executados atrav\xe9s de comandos dedicados, por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/20!)  \n//pass the !05/05/20! date as parameter to the SetCalendarDate  \n//in the context of a subform\n')),(0,r.kt)("p",null,"Data can also be ",(0,r.kt)("strong",{parentName:"p"},"returned")," from methods and class functions. For example, the following line is a statement that uses the built-in command, ",(0,r.kt)("inlineCode",{parentName:"p"},"Length"),", to return the length of a string. The statement puts the value returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"Length")," in a variable called ",(0,r.kt)("em",{parentName:"p"},"MyLength"),". Esta \xe9 a instru\xe7\xe3o:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'MyLength:=Length("How did I get here?")\n')),(0,r.kt)("p",null,"Qualquer subrotina pode retornar um valor. S\xf3 se pode declarar um \xfanico par\xe1metro de sa\xedda por m\xe9todo ou fun\xe7\xe3o de classe."),(0,r.kt)("p",null,"Input and output values are ",(0,r.kt)("a",o({parentName:"p"},{href:"#values-or-references"}),"evaluated")," at the moment of the call and copied into or from local variables within the called class function or method. Variable parameters must be ",(0,r.kt)("a",o({parentName:"p"},{href:"#declaring-parameters"}),"declared")," in the called code."),(0,r.kt)("admonition",o({},{title:"Compatibidade",type:"info"}),(0,r.kt)("p",{parentName:"admonition"},"Throughout the 4D documentation, you might see examples where parameters are automatically copied in sequentially numbered local variables ($0, $1, etc.) and declared using compiler directives. Ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"C_TEXT($1;$2)"),". Esta sintaxe antiga ainda \xe9 suportada, mas j\xe1 n\xe3o \xe9 recomendada.")),(0,r.kt)("h2",o({},{id:"declara\xe7\xe3o-de-par\xe2metros"}),"Declara\xe7\xe3o de par\xe2metros"),(0,r.kt)("p",null,"Dentro de m\xe9todos ou fun\xe7\xf5es de classe chamados, valores par\xe2metros s\xe3o atribuidos \xe0 vari\xe1veis locais. You usually declare parameters using a ",(0,r.kt)("strong",{parentName:"p"},"parameter name")," along with a ",(0,r.kt)("strong",{parentName:"p"},"parameter type"),", separated by colon."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For class functions, parameters are declared along with the ",(0,r.kt)("inlineCode",{parentName:"li"},"Function")," keyword."),(0,r.kt)("li",{parentName:"ul"},"For methods (project methods, form object methods, database methods, and triggers), parameters are declared using the ",(0,r.kt)("inlineCode",{parentName:"li"},"#DECLARE")," keyword at the beginning of the method code.")),(0,r.kt)("p",null,"Exemplos:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function getArea($width : Integer; $height : Integer) -> $area : Integer\n")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"})," //myProjectMethod\n#DECLARE ($i : Integer) -> $myResult : Object\n")),(0,r.kt)("p",null,"As regras abaixo s\xe3o v\xe1lidas:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A linha de declara\xe7\xe3o deve ser a primeira linha do m\xe9todo ou c\xf3digo da fun\xe7\xe3o, sen\xe3o um erro \xe9 exibido (s\xf3 coment\xe1rios ou quebras de linha podem preceder a declara\xe7\xe3o)."),(0,r.kt)("li",{parentName:"ul"},"Parameter names must start with a ",(0,r.kt)("inlineCode",{parentName:"li"},"$")," character and be compliant with ",(0,r.kt)("a",o({parentName:"li"},{href:"/docs/pt/Concepts/identifiers#object-properties"}),"property naming rules"),"."),(0,r.kt)("li",{parentName:"ul"},"Os par\xe2metros (e tipos) m\xfaltiplos s\xe3o separados por ponto e v\xedrgula (;)."),(0,r.kt)("li",{parentName:"ul"},'Sintaxes multilinha s\xe3o aceitas (usando "',"\\",'").')),(0,r.kt)("p",null,"For example, when you call a ",(0,r.kt)("inlineCode",{parentName:"p"},"getArea()")," function with two parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"$area:=$o.getArea(50;100)\n")),(0,r.kt)("p",null,"No c\xf3digo da fun\xe7\xe3o classe, o valor de cada par\xe2metro se copia no par\xe2metro declarado correspondente:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"// Class: Polygon\nFunction getArea($width : Integer; $height : Integer)-> $area : Integer\n    $area:=$width*$height\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If the type is not defined, the parameter will be defined as ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/variant"}),(0,r.kt)("inlineCode",{parentName:"a"},"Variant")),".")),(0,r.kt)("p",null,"All 4D method kinds support the ",(0,r.kt)("inlineCode",{parentName:"p"},"#DECLARE")," keyword, including database methods. For example, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Web Authentication")," database method, you can declare named parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'    // On Web Authentication database method\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text) \\\n  -> $RequestAccepted : Boolean\n$entitySelection:=ds.User.query("login=:1"; $user)\n// Check hash password...\n')),(0,r.kt)("h3",o({},{id:"valor-retornado"}),"Valor retornado"),(0,r.kt)("p",null,"You declare the return parameter of a function by adding an arrow (->) and the parameter definition after the input parameter(s) list. Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer) -> $result : Integer\n")),(0,r.kt)("p",null,"You can also declare the return parameter only by adding ",(0,r.kt)("inlineCode",{parentName:"p"},": type"),", in which case it can be handled by a ",(0,r.kt)("a",o({parentName:"p"},{href:"#return-expression"}),"return statement"),". Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer): Integer\n    return $x+$y\n")),(0,r.kt)("admonition",o({},{type:"warning"}),(0,r.kt)("p",{parentName:"admonition"},"Os par\xe2metros, que incluem o valor retornado, devem ser declarados apenas uma vez. Em particular, voc\xea n\xe3o pode declarar o mesmo par\xe2metro como entrada e sa\xedda, mesmo com o mesmo tipo. Por exemplo:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",o({parentName:"pre"},{className:"language-qs"}),"    //invalid declaration\nFunction myTransform ($x : Integer) -> $x : Integer \n    //error: $x is declared twice\n"))),(0,r.kt)("h3",o({},{id:"tipos-de-datos-compat\xedveis"}),"Tipos de datos compat\xedveis"),(0,r.kt)("p",null,"With named parameters, you can use the same data types as those which are ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/variables#using-the-var-keyword"}),"supported by the ",(0,r.kt)("inlineCode",{parentName:"a"},"var")," keyword"),", including class objects. Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function saveToFile($entity : cs. ShapesEntity; $file : 4D. File)\n")),(0,r.kt)("admonition",o({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Tables or array expressions can only be passed ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/pointer#pointers-as-parameters-to-methods"}),"as reference using a pointer"),".")),(0,r.kt)("h3",o({},{id:"inicializa\xe7\xe3o"}),"Inicializa\xe7\xe3o"),(0,r.kt)("p",null,"When parameters are declared, they are initialized to the ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/data-types#default-values"}),(0,r.kt)("strong",{parentName:"a"},"default value corresponding to their type")),", which they will keep during the session as long as they have not been assigned."),(0,r.kt)("h2",o({},{id:"return-expression"}),(0,r.kt)("inlineCode",{parentName:"h2"},"return {expression}")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Hist\xf3ria"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",o({parentName:"tr"},{align:null}),"Release"),(0,r.kt)("th",o({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",o({parentName:"tr"},{align:null}),"19 R4"),(0,r.kt)("td",o({parentName:"tr"},{align:null}),"Adicionado"))))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement ends function or method execution and can be used to return an expression to the caller."),(0,r.kt)("p",null,"Por exemplo, a seguinte fun\xe7\xe3o devolve o quadrado de seu argumento, $x, onde $x \xe9 um n\xfamero."),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function square($x : Integer) \n   return $x * $x\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Internally, ",(0,r.kt)("inlineCode",{parentName:"p"},"return x")," executes ",(0,r.kt)("inlineCode",{parentName:"p"},"$0:=x")," or (if declared) ",(0,r.kt)("inlineCode",{parentName:"p"},"myReturnValue:=x"),", and returns to the caller. If ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," is used without an expression, the function or method returns a null value of the declared return type (if any), otherwise ",(0,r.kt)("em",{parentName:"p"},"undefined"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement can be used along with the standard syntax for ",(0,r.kt)("a",o({parentName:"p"},{href:"#returned-value"}),"returned values")," (the returned value must be of the declared type). Entretanto lembre que isso finaliza imediatamente a execu\xe7\xe3o de c\xf3digo. Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function getValue\n    $0:=10\n    return 20\n    // returns 20\n\nFunction getValue -> $v : Integer\n    return 10\n    $v:=20 // never executed\n    // returns 10\n")),(0,r.kt)("h2",o({},{id:"indire\xe7\xe3o-dos-par\xe2metros"}),"Indire\xe7\xe3o dos par\xe2metros"),(0,r.kt)("p",null,"Os m\xe9todos e fun\xe7\xf5es 4D aceitam um n\xfamero vari\xe1vel de par\xe2metros. You can address those parameters with a ",(0,r.kt)("inlineCode",{parentName:"p"},"For...End for")," loop, the ",(0,r.kt)("a",o({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page259.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"Count parameters"))," command and the ",(0,r.kt)("strong",{parentName:"p"},"parameter indirection syntax"),". Within the method, an indirection address is formatted ",(0,r.kt)("inlineCode",{parentName:"p"},"${N}"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is a numeric expression."),(0,r.kt)("h3",o({},{id:"uso-de-par\xe2metros-vari\xe1veis"}),"Uso de par\xe2metros vari\xe1veis"),(0,r.kt)("p",null,"Por exemplo, considere uma fun\xe7\xe3o que some os valores e devolva a soma formatada segundo um formato que se passa como par\xe2metro. Cada vez que chamar a esse m\xe9todo, o n\xfamero de valores a somar pode variar. Devemos passar os valores como par\xe2metros ao m\xe9todo e o formato em forma de string dos caracteres. O n\xfamero de valores pode variar de chamada a chamada."),(0,r.kt)("p",null,"Here is the method, named ",(0,r.kt)("inlineCode",{parentName:"p"},"MySum"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"})," #DECLARE($format : Text) -> $result : Text\n $sum:=0\n For($i;2;Count parameters)\n    $sum:=$sum+${$i}\n End for\n $result:=String($sum;$format)\n")),(0,r.kt)("p",null,"Os par\xe2metros da fun\xe7\xe3o devem ser passados na ordem correta: primeiro o formato e depois os valores."),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' Result:=MySum("##0.00";125,2;33,5;24) //"182.70"\n Result:=MySum("000";1;2;200) //"203"\n')),(0,r.kt)("p",null,"Observe que, mesmo que tenha declarado 0, 1 ou mais par\xe2metros, voc\xea sempre poder\xe1 passar o n\xfamero de par\xe2metros que desejar. Parameters are all available within the called code through the ",(0,r.kt)("inlineCode",{parentName:"p"},"${N}")," syntax and extra parameters type is ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/variant"}),"Variant")," by default (you can declare them using the ",(0,r.kt)("a",o({parentName:"p"},{href:"#declaring-variadic-parameters"}),"variadic notation"),"). You just need to make sure parameters exist, thanks to the ",(0,r.kt)("a",o({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page259.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"Count parameters"))," command. Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'//foo method\n#DECLARE($p1: Text;$p2 : Text; $p3 : Date) \nFor($i;1;Count parameters)\n    ALERT("param "+String($i)+" = "+String(${$i}))\nEnd for\n')),(0,r.kt)("p",null,"Esta fun\xe7\xe3o pode ser chamada agora de v\xe1rias formas:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'foo("hello";"world";!01/01/2021!;42;?12:00:00?) //extra parameters are passed\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A indire\xe7\xe3o de par\xe2metros se gerencia melhor se respeitar a conven\xe7\xe3o abaixo: se s\xf3 alguns dos par\xe2metros forem endere\xe7ados por indire\xe7\xe3o, devem ser passados depois dos outros.")),(0,r.kt)("h3",o({},{id:"declara\xe7\xe3o-de-par\xe2metros-vari\xe1veis"}),"Declara\xe7\xe3o de par\xe2metros vari\xe1veis"),(0,r.kt)("p",null,"N\xe3o \xe9 obrigat\xf3rio declarar par\xe2metros vari\xe1veis. Non-declared variadic parameters automatically get the ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/variant"}),"Variant")," type."),(0,r.kt)("p",null,'Entretanto, para evitar erros de incompatibilidade de tipos durante a execu\xe7\xe3o do c\xf3digo, voc\xea pode declarar um n\xfamero vari\xe1vel de par\xe2metros usando a nota\xe7\xe3o "..." nos prot\xf3tipos de suas fun\xe7\xf5es, construtores de classes e m\xe9todos (par\xe2metros vari\xe1dicos). Voc\xea especifica o tipo do par\xe2metro seguindo a nota\xe7\xe3o "..." com o tipo desejado.'),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"#DECLARE ( ... : Text ) // Undefined number of 'Text' parameters\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function myfunction ( ... : Text)\n\n")),(0,r.kt)("p",null,"Ao declarar v\xe1rios par\xe2metros, a nota\xe7\xe3o variadic deve ser empregada na \xfaltima posi\xe7\xe3o, por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"#DECLARE ( param: Real ; ... : Text )\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function myfunction (var1: Integer ; ... : Text)\n")),(0,r.kt)("h4",o({},{id:"exemplo"}),"Exemplo"),(0,r.kt)("p",null,"Here we have a method called ",(0,r.kt)("inlineCode",{parentName:"p"},"SumNumbers")," that returns the calculated total for all the numbers passed as parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"\n#DECLARE( ... : Real) : Real \n\n\n\nvar $number; $total : Real \n\nFor each ($number; 1; Count parameters)\n    $total+=${$number}\nEnd for each \n\nreturn $total\n\n")),(0,r.kt)("p",null,"Esse m\xe9todo pode ser chamado com um n\xfamero vari\xe1vel de par\xe2metros Real. No caso de um tipo de par\xe2metro incorreto, um erro ser\xe1 retornado antes que o m\xe9todo seja executado:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'\n$total1:=SumNumbers // returns 0 \n$total2:=SumNumbers(1; 2; 3; 4; 5) // returns 15\n$total3:=SumNumbers(1; 2; "hello"; 4; 5) // error\n\n')),(0,r.kt)("admonition",o({},{title:"Compatibility Note",type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"The legacy syntax for declaring variadic parameters (",(0,r.kt)("inlineCode",{parentName:"p"},"C_TEXT(${4})"),") is still supported for compatibility but the variadic notation is now preferred.")),(0,r.kt)("h2",o({},{id:"compila\xe7\xe3o"}),"Compila\xe7\xe3o"),(0,r.kt)("p",null,"Even if it is not mandatory in ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/interpreted-compiled"}),"interpreted mode"),", you must make sure that all method and function parameters are properly declared as soon as you intend to compile your project."),(0,r.kt)("admonition",o({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"You can delegate the declaration of parameters (as well as all variables) to the compiler by checking the ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Project/compiler#compilation-path"}),(0,r.kt)("strong",{parentName:"a"},"Type the variable")," compilation path option"),". No entanto, essa op\xe7\xe3o aumenta significativamente o tempo de compila\xe7\xe3o.")),(0,r.kt)("h3",o({},{id:"par\xe2metros-declarados-em-prot\xf3tipos"}),"Par\xe2metros declarados em prot\xf3tipos"),(0,r.kt)("p",null,"When using the ",(0,r.kt)("inlineCode",{parentName:"p"},"#DECLARE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Function")," keywords, parameters are automatically declared and no additional information is needed for the compiler. Exemplos:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"#DECLARE($myParam : Text; $myOtherParam : Integer) : Boolean\n    // all method parameters are declared with their type\n")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"    // On Web Connection Database Method\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer)-> $result : Integer\n    // all function parameters are declared with their type\n")),(0,r.kt)("admonition",o({},{type:"tip"}),(0,r.kt)("p",{parentName:"admonition"},"Declarar par\xe2metros em prot\xf3tipos \xe9 uma boa pr\xe1tica, mesmo em projetos n\xe3o compilados.")),(0,r.kt)("h3",o({},{id:"par\xe2metros-de-m\xe9todo-declarados-fora-dos-prot\xf3tipos"}),"Par\xe2metros de m\xe9todo declarados fora dos prot\xf3tipos"),(0,r.kt)("p",null,"It can happen that method parameters are not declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"#DECLARE")," prototypes. Essas declara\xe7\xf5es podem ser encontradas, em particular, no c\xf3digo 4D herdado. In this case, you must configure a ",(0,r.kt)("inlineCode",{parentName:"p"},"Compiler_Methods")," method to gather the declarations for these method parameters."),(0,r.kt)("h4",o({},{id:"compiler_methods-method"}),(0,r.kt)("inlineCode",{parentName:"h4"},"Compiler_Methods")," method"),(0,r.kt)("p",null,"When some method parameters are not declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"#DECLARE")," prototypes, the 4D compiler needs that you declare them in a specific method using a special syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\xe9 poss\xedvel agrupar todos os par\xe2metros de vari\xe1veis locais para m\xe9todos de projeto num ou mais m\xe9todos de projeto"),(0,r.kt)("li",{parentName:"ul"},'the method name(s) must start with "',(0,r.kt)("strong",{parentName:"li"},"Compiler_"),'", by default "Compiler_Methods".'),(0,r.kt)("li",{parentName:"ul"},"within such a method, you predeclare the parameters for each method using the following syntax: ",(0,r.kt)("inlineCode",{parentName:"li"},"C_XXX(methodName;parameter)"),".")),(0,r.kt)("p",null,"Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"})," // Compiler_Methods\n C_REAL(OneMethodAmongOthers;$1;$2) \n")),(0,r.kt)("admonition",o({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Esta sintaxe n\xe3o \xe9 execut\xe1vel em modo interpretado.")),(0,r.kt)("p",null,"You can create and fill automatically a ",(0,r.kt)("inlineCode",{parentName:"p"},"Compiler_Methods")," method containing all your parameters declared outside prototypes using the ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Project/compiler#compiler-methods-for"}),(0,r.kt)("strong",{parentName:"a"},"Compiler Methods for..."))," ",(0,r.kt)("strong",{parentName:"p"},"Methods")," button in the Compiler Settings dialog box."),(0,r.kt)("admonition",o({},{type:"info"}),(0,r.kt)("h4",o({parentName:"admonition"},{id:"casos-particulares"}),"Casos particulares"),(0,r.kt)("p",{parentName:"admonition"},'Alguns contextos n\xe3o suportam a declara\xe7\xe3o em um m\xe9todo "Compiler_", portanto, s\xe3o tratados especificamente:'),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Triggers - O par\xe2metro $0 (Longint), o resultado de um trigger, ser\xe1 tipado pelo compilador se o par\xe2metro n\xe3o tiver sido declarado explicitamente. Entretanto, se quiser declar\xe1-lo, deve fazer isso no pr\xf3prio trigger.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Form objects that accept the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event - The $0 parameter (Longint), which is the result of the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event, is typed by the compiler if the parameter has not been explicitly declared. Entretanto, se quiser fazer a declara\xe7\xe3o, deve fazer isso no m\xe9todo objeto.\n",(0,r.kt)("strong",{parentName:"p"},"Note:")," The compiler does not initialize the $0 parameter. So, as soon as you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event, you must initialize $0. Por exemplo:"))),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"})," C_LONGINT($0)\n If(Form event code=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n"))),(0,r.kt)("h3",o({},{id:"conflitos-entre-declara\xe7\xf5es"}),"Conflitos entre declara\xe7\xf5es"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If a parameter is declared in both a ",(0,r.kt)("inlineCode",{parentName:"li"},"#DECLARE")," prototype and a _Compiler",(0,r.kt)("strong",{parentName:"li"}," method, the entry from the  _Compiler")," method is ignored."),(0,r.kt)("li",{parentName:"ul"},"If a parameter is declared in both a ",(0,r.kt)("inlineCode",{parentName:"li"},"#DECLARE")," prototype and a _Compiler__ method but with a different data type, the Code Live Checker generates an error during syntax checking and compilation.")),(0,r.kt)("h2",o({},{id:"tipo-de-par\xe1metro-equivocado"}),"Tipo de par\xe1metro equivocado"),(0,r.kt)("p",null,"Calling a parameter with an wrong type is an ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/error-handling"}),"error")," that prevents correct execution. Por exemplo se executar os m\xe9todos"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"// method1\n#DECLARE($value : Text)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"// method2\nmethod1(42) //tipo incorrecto, texto esperado\n")),(0,r.kt)("p",null,"Este caso es tratado por 4D dependendo do contexto:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in ",(0,r.kt)("a",o({parentName:"li"},{href:"/docs/pt/Concepts/interpreted-compiled"}),"compiled projects"),", an error is generated at the compilation step whenever possible. Sen\xe3o, um erro \xe9 gerado quando o m\xe9todo for chamado."),(0,r.kt)("li",{parentName:"ul"},"em projetos interpretados:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the parameter was declared using the ",(0,r.kt)("a",o({parentName:"li"},{href:"#named-parameters"}),"named syntax")," (",(0,r.kt)("inlineCode",{parentName:"li"},"#DECLARE")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Function"),"), an error is generated when the method is called."),(0,r.kt)("li",{parentName:"ul"},"if the parameter was declared using (",(0,r.kt)("inlineCode",{parentName:"li"},"C_XXX"),"), no error is generated, the called method receives an empty value of the expected type.")))),(0,r.kt)("h2",o({},{id:"usando-propriedades-objeto-como-par\xe2metros-nomeados"}),"Usando propriedades objeto como par\xe2metros nomeados"),(0,r.kt)("p",null,"Using objects as parameters allow you to handle ",(0,r.kt)("strong",{parentName:"p"},"named parameters"),". Este estilo de programa\xe7\xe3o \xe9 simples, flex\xedvel e f\xe1cil de ler."),(0,r.kt)("p",null,"For example, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreatePerson")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeAge")," method you can write:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Name+" is "+String($para.Age)+" years old.")\n')),(0,r.kt)("p",null,"This provides a powerful way to define ",(0,r.kt)("a",o({parentName:"p"},{href:"#optional-parameters"}),"optional parameters")," (see also below). Para manejar os par\xe2metros que faltam, pode:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"check if all expected parameters are provided by comparing them to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Null")," value, or"),(0,r.kt)("li",{parentName:"ul"},"pr\xe9-definir os valores dos par\xe2metros, ou"),(0,r.kt)("li",{parentName:"ul"},"us\xe1-los como valores vazios.")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeAge")," method above, both Age and Name properties are mandatory and would produce errors if they were missing. Para evitar isso, pode escrever:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,r.kt)("p",null,'Ambos par\xe2metros s\xe3o opcionais: se n\xe3o forem preenchidos, o resultado ser\xe1 "\xe9 10 anos de idade", mas nenhum erro ser\xe1 gerado.'),(0,r.kt)("p",null,"Finalmente, com par\xe2metros com nome, a manuten\xe7\xe3o ou a reprodu\xe7\xe3o das aplica\xe7\xf5es \xe9 muito simples e seguro. Imagine que depois perceba de que adicionar 10 anos n\xe3o funciona sempre. You need another parameter to set how many years to add. You write: Escreva: Escreve:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'$person:=New object("Name";"Smith";"Age";40;"toAdd";10)\nChangeAge($person)\n\n//ChangeAge\nvar $1;$para : Object\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,r.kt)("p",null,"N\xe3o precisar\xe1 mudar seu c\xf3digo existente. Sempre funcionar\xe1 como na vers\xe3o anterior, mas se for necess\xe1rio, \xe9 poss\xedvel usar outro valor diferente de 10 anos."),(0,r.kt)("p",null,"Com vari\xe1veis com nome, qualquer par\xe2metro pode ser opcional. No exemplo acima, todos os par\xe2metros s\xe3o opcionais e qualquer pode ser dado em qualquer ordem."),(0,r.kt)("h2",o({},{id:"par\xe2metros-opcionais"}),"Par\xe2metros opcionais"),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"4D Language Reference")," manual, the { } characters (braces) indicate optional parameters. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"ALERT (message{; okButtonTitle})")," means that the ",(0,r.kt)("em",{parentName:"p"},"okButtonTitle")," parameter may be omitted when calling the command. Pode fazer a chamada de duas maneiras:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'ALERT("Are you sure?";"Yes I am") //2 parameters ALERT("Time is over") //1 parameter\n')),(0,r.kt)("p",null,"Os m\xe9todos projeto 4D tamb\xe9m aceitam esses par\xe2metros opcionais, come\xe7ando pela direita. Pode declarar qualquer n\xfamero de par\xe2metros. If you call a method or function with less parameters than declared, missing parameters are processed as default values in the called code, ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/data-types#default-values"}),"according to their type"),". Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'// "concate" function of myClass\nFunction concate ($param1 : Text ; $param2 : Text)->$result : Text\n$result:=$param1+" "+$param2\n')),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  // M\xe9todo de chamada\n $class:=cs.myClass.new()\n $class.concate("Hello") // "Hello "\n $class.concate() // Mostra " "\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Tamb\xe9m se pode chamar um m\xe9todo ou fun\xe7\xe3o com mais par\xe2metros do que os declarados. They will be available within the called code through the ",(0,r.kt)("a",o({parentName:"p"},{href:"#parameter-indirection-n"}),"${N} syntax"),".")),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Count parameters")," command from within the called method, you can detect the actual number of parameters and perform different operations depending on what you have received."),(0,r.kt)("p",null,"O exemplo abaixo mostra uma mensagem de texto e pode inserir o texto em um documento no disco ou em uma \xe1rea de 4D Write Pro:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"// APPEND TEXT Project Method\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n \n #DECLARE ($message : Text; $path : Text; $wpArea : Object)\n  \n ALERT($message)\n If(Count parameters>=3)\n    WP SET TEXT($wpArea;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($path;$message)\n    End if\n End if\n")),(0,r.kt)("p",null,"Depois de adicionar este m\xe9todo projeto a sua aplica\xe7\xe3o, pode escrever:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'APPEND TEXT(vtSomeText) //Will only display the  message APPEND TEXT(vtSomeText;$path) //Displays text message and appends it to document at $path APPEND TEXT(vtSomeText;"";$wpArea) //Displays text message and writes it to $wpArea\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When optional parameters are needed in your methods, you might also consider using ",(0,r.kt)("a",o({parentName:"p"},{href:"#using-objects-properties-as-named-parameters"}),"object properties as named parameters")," which provide a flexible way to handle variable numbers of parameters.")),(0,r.kt)("h2",o({},{id:"valores-ou-refer\xeancias"}),"Valores ou refer\xeancias"),(0,r.kt)("p",null,"When you pass a parameter, 4D always evaluates the parameter expression in the context of the calling method and sets the ",(0,r.kt)("strong",{parentName:"p"},"resulting value")," to the local variables in the class function or subroutine. As vari\xe1veis locais/par\xe2metros n\xe3o s\xe3o os campos, vari\xe1veis ou express\xf5es realmente passadas pelo m\xe9todo chamada; eles apenas cont\xe9m os valores que foram passados. The local variables/parameters are not the actual fields, variables, or expressions passed by the calling method; they only contain the values that have been passed. Por exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'    //Here is some code from the method MY_METHOD\nDO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\nALERT([People]Name)\n \n    //Here is the code of the method DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n')),(0,r.kt)("p",null,"The alert box displayed by ",(0,r.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING"),' will read "WILLIAMS" and the alert box displayed by ',(0,r.kt)("inlineCode",{parentName:"p"},"MY_METHOD"),' will read "williams". The method locally changed the value of the parameter $1, but this does not affect the value of the field ',(0,r.kt)("inlineCode",{parentName:"p"},"[People]Name")," passed as parameter by the method ",(0,r.kt)("inlineCode",{parentName:"p"},"MY_METHOD"),"."),(0,r.kt)("p",null,"There are two ways to make the method ",(0,r.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING")," change the value of the field:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Ao inv\xe9s de passar o campo para o m\xe9todo, passa um ponteiro para ele, por isso pode escrever:")),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  //Here is some code from the method MY_METHOD\n DO_SOMETHING(->[People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Last Name)\n \n  //Here the code of the method DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n')),(0,r.kt)("p",null,"Aqui \xe9 o par\xe2metro n\xe3o for o campo, mas sim um ponteiro ao mesmo. Therefore, within the ",(0,r.kt)("inlineCode",{parentName:"p"},"DO SOMETHING")," method, $1 is no longer the value of the field but a pointer to the field. The object ",(0,r.kt)("strong",{parentName:"p"},"referenced"),' by $1 ($1-> in the code above) is the actual field. Portanto, mudar o objeto referenciado vai al\xe9m do escopo da subrotina, e o campo real n\xe3o \xe9 afetado. Neste exemplo, as duas caixas de alerta dir\xe3o "WILLIAMS".'),(0,r.kt)("ol",o({},{start:2}),(0,r.kt)("li",{parentName:"ol"},"Rather than having the method ",(0,r.kt)("inlineCode",{parentName:"li"},"DO_SOMETHING"),' "doing something," you can rewrite the method so it returns a value. Portanto escreveria:')),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'    //Here is some code from the method MY METHOD\n [People]Name:=DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Name)\n\n    //Here the code of the method DO SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n')),(0,r.kt)("p",null,'Esta segunda t\xe9cnica de retornar um valor por uma subrotina se chama " utilizar uma fun\xe7\xe3o" \xc9 descrita no par\xe1grafo ',(0,r.kt)("a",{href:"#functions"},"Fun\xe7\xf5es"),". This is described in the ",(0,r.kt)("a",o({parentName:"p"},{href:"#returning-values"}),"Returning values")," paragraph."),(0,r.kt)("h3",o({},{id:"casos-particulares-objetos-e-cole\xe7\xf5es"}),"Casos particulares: objetos e cole\xe7\xf5es"),(0,r.kt)("p",null,"You need to pay attention to the fact that Object and Collection data types can only be handled through a reference (i.e. an internal ",(0,r.kt)("em",{parentName:"p"},"pointer"),")."),(0,r.kt)("p",null,"Consequently, when using such data types as parameters, ",(0,r.kt)("inlineCode",{parentName:"p"},"$1, $2...")," do not contain ",(0,r.kt)("em",{parentName:"p"},"values")," but ",(0,r.kt)("em",{parentName:"p"},"references"),". Modifying the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"$1, $2...")," parameters within the subroutine will be propagated wherever the source object or collection is used. This is the same principle as for ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/pointer#pointers-as-parameters-to-methods"}),"pointers"),", except that ",(0,r.kt)("inlineCode",{parentName:"p"},"$1, $2...")," parameters do not need to be dereferenced in the subroutine."),(0,r.kt)("p",null,"For example, consider the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreatePerson")," method that creates an object and sends it as a parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChangeAge")," method adds 10 to the Age attribute of the received object"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"  //ChangeAge\n #DECLARE ($person : Object)\n $person.Age:=$person.Age+10\n ALERT(String($person.Age))\n")),(0,r.kt)("p",null,"When you execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreatePerson"),' method, both alert boxes will read "50" since the same object reference is handled by both methods.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4D Server:"),' When parameters are passed between methods that are not executed on the same machine (using for example the "Execute on Server" option), references are not usable. Nestes casos, s\xe3o enviadas c\xf3pias dos par\xe2metros de objetos e cole\xe7\xf5es ao inv\xe9s de refer\xeancias.'))}c.isMDXComponent=!0}}]);