"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[34587],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var a=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(r),c=o,f=m["".concat(l,".").concat(c)]||m[c]||d[c]||n;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function c(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<n;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},20904:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});r(67294);var a=r(3905);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},o.apply(this,arguments)}function n(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const i={id:"control-flow",title:"Condi\xe7\xf5es e loops"},s=void 0,l={unversionedId:"Concepts/control-flow",id:"version-19-R7/Concepts/control-flow",title:"Condi\xe7\xf5es e loops",description:"Independentemente da simplicidade ou da complexidade de um m\xe9todo ou fun\xe7\xe3o, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es no m\xe9todo. H\xe1 tr\xeas tipos de estruturas:",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-19-R7/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/pt/19-R7/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(19-R7)&body=Please%20enter%20your%20comment%3A",tags:[],version:"19-R7",frontMatter:{id:"control-flow",title:"Condi\xe7\xf5es e loops"},sidebar:"docs",previous:{title:"Classes",permalink:"/docs/pt/19-R7/Concepts/classes"},next:{title:"Estruturas condicionais",permalink:"/docs/pt/19-R7/Concepts/branching"}},u={},p=[{value:"return {expression}",id:"return-expression",level:2},{value:"Exemplo",id:"exemplo",level:3}],d={toc:p};function m(e){var{components:t}=e,r=n(e,["components"]);return(0,a.kt)("wrapper",o({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Independentemente da simplicidade ou da complexidade de um m\xe9todo ou fun\xe7\xe3o, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es no m\xe9todo. H\xe1 tr\xeas tipos de estruturas:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Sequencial"),": uma estrutura sequencial \xe9 uma estrutura simples e linear. Uma sequ\xeancia \xe9 uma s\xe9rie de senten\xe7as que 4D executa uma atr\xe1s da outra, da primera \xe0 \xfaltima. Uma instru\xe7\xe3o de uma linha, utilizada frequentemente para os m\xe9todos dos objetos, \xe9 o caso mais simples de uma estrutura sequencial. Por exemplo: ",(0,a.kt)("inlineCode",{parentName:"li"},"[People]lastName:=Uppercase([People]lastName)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",o({parentName:"strong"},{href:"/docs/pt/19-R7/Concepts/branching"}),"Branching")),": uma estrutura de bifurca\xe7\xe3o permite que os m\xe9todos provem uma condi\xe7\xe3o e tomem caminhos alternativos, dependendo do resultado. A condi\xe7\xe3o \xe9 uma express\xe3o booleana, uma express\xe3o que avalia TRUE ou FALSE. Uma estrutura condicional e a estrutura ",(0,a.kt)("inlineCode",{parentName:"li"},"If...Else...End if"),", que dirige o fluxo do programa ao longo de um dos dois caminhos. A outra estrutura condicional \xe9 a estrutura ",(0,a.kt)("inlineCode",{parentName:"li"},"Case of... End case")," que direciona fluxo de programa para um de muitas caminhos."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",o({parentName:"strong"},{href:"/docs/pt/19-R7/Concepts/looping"}),"Bucle")),": quando se escrevem m\xe9todos, \xe9 muito comum descobrir que se necessita que uma sequ\xeancia de senten\xe7as se repita um n\xfamero de vezes. Para lidar com esta necessidade, a linguagem 4D oferece as estruturas de loop abaixo:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"While... End while")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Repeat... Until")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"For... End for")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Para cada...Fim para cada"),(0,a.kt)("br",null)," Os loops s\xe3o controlados de duas maneiras: ou fazem loop at\xe9 que uma condi\xe7\xe3o seja satisfeita, ou fazem loop um n\xfamero especificado de vezes. Cada estrutura de looping pode ser usada de qualquer forma, mas loops",(0,a.kt)("inlineCode",{parentName:"li"},"While")," e ",(0,a.kt)("inlineCode",{parentName:"li"},"Repeat")," s\xe3o mais apropriados para repetir at\xe9 que uma condi\xe7\xe3o seja satisfeita, e loops ",(0,a.kt)("inlineCode",{parentName:"li"},"For")," s\xe3o mais apropriados para looping um n\xfamero especificado de vezes. ",(0,a.kt)("inlineCode",{parentName:"li"},"For each... End for each")," permite misturar ambas as formas e foi concebido para fazer loop dentro de objectos e colec\xe7\xf5es.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Nota:"),' 4D permite incorporar estruturas de programa\xe7\xe3o at\xe9 uma "profundidade" de 512 n\xedveis.'),(0,a.kt)("h2",o({},{id:"return-expression"}),"return {expression}"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Hist\xf3rico"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Vers\xe3o"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"v19 R4"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Adicionado"))))),(0,a.kt)("p",null,"A declara\xe7\xe3o ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," pode ser chamada de qualquer lugar. Quando uma declara\xe7\xe3o ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," \xe9 utilizada numa fun\xe7\xe3o ou m\xe9todo, a execu\xe7\xe3o da fun\xe7\xe3o ou m\xe9todo \xe9 interrompida. O c\xf3digo restante n\xe3o \xe9 executado e o controlo \xe9 devolvido ao autor da chamada."),(0,a.kt)("p",null,"A declara\xe7\xe3o ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," pode ser utilizada para ",(0,a.kt)("a",o({parentName:"p"},{href:"/docs/pt/19-R7/Concepts/parameters#return-expression"}),"devolver um valor")," ao autor da chamada."),(0,a.kt)("h3",o({},{id:"exemplo"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer While (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}m.isMDXComponent=!0}}]);