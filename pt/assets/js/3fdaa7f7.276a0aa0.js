"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18407],{3905:(e,o,t)=>{t.d(o,{Zo:()=>d,kt:()=>c});var r=t(67294);function a(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function n(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?n(Object(t),!0).forEach((function(o){a(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function i(e,o){if(null==e)return{};var t,r,a=function(e,o){if(null==e)return{};var t,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],o.indexOf(t)>=0||(a[t]=e[t]);return a}(e,o);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var o=r.useContext(l),t=o;return e&&(t="function"==typeof e?e(o):s(s({},o),e)),t},d=function(e){var o=p(e.components);return r.createElement(l.Provider,{value:o},e.children)},u={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},m=r.forwardRef((function(e,o){var t=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(t),c=a,B=m["".concat(l,".").concat(c)]||m[c]||u[c]||n;return t?r.createElement(B,s(s({ref:o},d),{},{components:t})):r.createElement(B,s({ref:o},d))}));function c(e,o){var t=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var n=t.length,s=new Array(n);s[0]=m;var i={};for(var l in o)hasOwnProperty.call(o,l)&&(i[l]=o[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<n;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},89533:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});t(67294);var r=t(3905);function a(){return a=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var t=arguments[o];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function n(e,o){if(null==e)return{};var t,r,a=function(e,o){if(null==e)return{};var t,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],o.indexOf(t)>=0||(a[t]=e[t]);return a}(e,o);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={id:"blob",title:"BLOB"},i=void 0,l={unversionedId:"Concepts/blob",id:"version-18/Concepts/blob",title:"BLOB",description:"- Um campo, vari\xe1vel ou express\xe3o BLOB (Binary Large OBjects) \xe9 uma s\xe9rie cont\xedgua de bytes que pode ser tratada como um objeto completo ou cujos bytes podem ser direcionados individualmente. Um BLOB pode estar vazio (longitude nula) ou pode conter at\xe9 2147483647 bytes (2 GB).",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-18/Concepts/dt_blob.md",sourceDirName:"Concepts",slug:"/Concepts/blob",permalink:"/docs/pt/18/Concepts/blob",draft:!1,editUrl:"https://github.com/4D/docs/edit/main/versioned_docs/version-18/Concepts/dt_blob.md",tags:[],version:"18",frontMatter:{id:"blob",title:"BLOB"},sidebar:"docs",previous:{title:"Tipos de dados",permalink:"/docs/pt/18/Concepts/data-types"},next:{title:"Booleano",permalink:"/docs/pt/18/Concepts/boolean"}},p={},d=[{value:"Passando par\xe2metros, ponteiros e resultados de fun\xe7\xf5es",id:"passando-par\xe2metros-ponteiros-e-resultados-de-fun\xe7\xf5es",level:2},{value:"Operador de atribui\xe7\xe3o",id:"operador-de-atribui\xe7\xe3o",level:2},{value:"Direcionar os conte\xfados de um BLOB",id:"direcionar-os-conte\xfados-de-um-blob",level:2}],u={toc:d};function m(e){var{components:o}=e,t=n(e,["components"]);return(0,r.kt)("wrapper",a({},u,t,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Um campo, vari\xe1vel ou express\xe3o BLOB (Binary Large OBjects) \xe9 uma s\xe9rie cont\xedgua de bytes que pode ser tratada como um objeto completo ou cujos bytes podem ser direcionados individualmente. Um BLOB pode estar vazio (longitude nula) ou pode conter at\xe9 2147483647 bytes (2 GB).")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Como padr\xe3o, 4D estabelece o tamanho blob m\xe1ximo para 2GB mas esse limite de tamanho pode ser menor dependendo de seu SO e de quanto espa\xe7o est\xe1 dispon\xedvel.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Um BLOB \xe9 carregado totalmente na mem\xf3ria. Uma vari\xe1vel BLOB \xe9 mantida e existe apenas na mem\xf3ria. Um campo BLOB \xe9 carregado na mem\xf3ria desde o disco, como o resto do registro ao que pertence."),(0,r.kt)("li",{parentName:"ul"},"Como os outros tipos de campo que podem reter uma grande quantidade de dados (tais como tipo de campo Imagem), os campos BLOB n\xe3o s\xe3o duplicados na mem\xf3ria quando um registro for modificado. Consequentemente o resultado devolvido pelos comandos ",(0,r.kt)("inlineCode",{parentName:"li"},"Old")," e ",(0,r.kt)("inlineCode",{parentName:"li"},"Modified")," n\xe3o \xe9 significativo quando for aplicado a um campo BLOB.")),(0,r.kt)("h2",a({},{id:"passando-par\xe2metros-ponteiros-e-resultados-de-fun\xe7\xf5es"}),"Passando par\xe2metros, ponteiros e resultados de fun\xe7\xf5es"),(0,r.kt)("p",null,"Os BLOBs em 4D podem ser passados como par\xe2metros aos comandos 4D ou \xe0s rotinas dos plugins que esperam par\xe2metros BLOB. Os BLOBS tamb\xe9m podem ser passados como par\xe2metros para um m\xe9todo usu\xe1rio ou serem retornados como resultado de uma fun\xe7\xe3o"),(0,r.kt)("p",null,"Para passar um BLOB a seus pr\xf3prios m\xe9todos, pode tamb\xe9m definir um ponteiro ao BLOB e passar o ponteiro como um par\xe2metro."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exemplos:")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-4d"}),"  ` Declare a variable of type BLOB\n C_BLOB(anyBlobVar)\n  ` The BLOB is passed as parameter to a 4D command\n SET BLOB SIZE(anyBlobVar;1024*1024)\n  ` The BLOB is passed as parameter to an external routine\n $errCode:=Do Something With This BLOB(anyBlobVar)\n  ` The BLOB is passed as a parameter to a method that returns a BLOB\n C_BLOB(retrieveBlob)\n retrieveBlob:=Fill_Blob(anyBlobVar)\n  ` A pointer to the BLOB is passed as parameter to a user method\n COMPUTE BLOB(->anyBlobVar)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nota para  desenvolvedores de plugins:"),' um par\xe2metro BLOB se declara como "&O" (a letra "O", n\xe3o o n\xfamero "0").'),(0,r.kt)("h2",a({},{id:"operador-de-atribui\xe7\xe3o"}),"Operador de atribui\xe7\xe3o"),(0,r.kt)("p",null,"Pode atribuir BLOBS um para o outro."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-4d"}),"  ` Declara duas vari\xe1veis de tipo BLOB\n C_BLOB(vBlobA;vBlobB)\n  ` Estabelece o tamanho do primeiro  BLOB a 10K\n SET BLOB SIZE(vBlobA;10*1024)\n  ` Atribui o primeiro BLOB ao segundo\n vBlobB:=vBlobA\n")),(0,r.kt)("p",null,"Entretanto, nenhum operador pode ser aplicado aos BLOBs."),(0,r.kt)("h2",a({},{id:"direcionar-os-conte\xfados-de-um-blob"}),"Direcionar os conte\xfados de um BLOB"),(0,r.kt)("p",null,"Cada byte de um BLOB pode ser dirigido individualmente utilizando os s\xedmbolos de colchetes {...}. Dentro de um BLOB, os bytes s\xe3o numerados de 0 a N-1, onde N \xe9 o tamanho do BLOB. Exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",a({parentName:"pre"},{className:"language-4d"}),"  ` Declarar uma vari\xe1vel de tipo BLOB\n C_BLOB(vBlob)\n  ` Estabelece o tamanho do BLOB para 256 bytes\n SET BLOB SIZE(vBlob;256)\n  ` O loop abaixo inicia os 256 bytes do BLOB para zero\n For(vByte;0;BLOB size(vBlob)-1)\n    vBlob{vByte}:=0\n End for\n")),(0,r.kt)("p",null,"Como todos os bytes de um BLOB podem ser direcionados de forma individual, \xe9 poss\xedvel armazenar o que quiser em um campo ou vari\xe1vel BLOB."))}m.isMDXComponent=!0}}]);