"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18407],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>m});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),p=function(e){var t=r.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},d=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(o),m=n,B=c["".concat(i,".").concat(m)]||c[m]||u[m]||a;return o?r.createElement(B,s(s({ref:t},d),{},{components:o})):r.createElement(B,s({ref:t},d))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,s=new Array(a);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var p=2;p<a;p++)s[p]=o[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,o)}c.displayName="MDXCreateElement"},89533:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});o(67294);var r=o(3905);function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},n.apply(this,arguments)}function a(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}const s={id:"blob",title:"BLOB"},l=void 0,i={unversionedId:"Concepts/blob",id:"version-18/Concepts/blob",title:"BLOB",description:"- A BLOB (Binary Large OBjects) field, variable or expression is a contiguous series of bytes which can be treated as one whole object or whose bytes can be addressed individually. A BLOB can be empty (null length) or contain up to 2147483647 bytes (2 GB).",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-18/Concepts/dt_blob.md",sourceDirName:"Concepts",slug:"/Concepts/blob",permalink:"/docs/pt/18/Concepts/blob",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fdt_blob.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"blob",title:"BLOB"},sidebar:"docs",previous:{title:"Tipos de dados",permalink:"/docs/pt/18/Concepts/data-types"},next:{title:"Par\xe2metros",permalink:"/docs/pt/18/Concepts/boolean"}},p={},d=[{value:"Passagem de par\xe2metros, ponteiros e resultados de fun\xe7\xf5es",id:"passagem-de-par\xe2metros-ponteiros-e-resultados-de-fun\xe7\xf5es",level:2},{value:"Operador de atribui\xe7\xe3o",id:"operador-de-atribui\xe7\xe3o",level:2},{value:"Endere\xe7amento do conte\xfado de um BLOB",id:"endere\xe7amento-do-conte\xfado-de-um-blob",level:2}],u={toc:d};function c(e){var{components:t}=e,o=a(e,["components"]);return(0,r.kt)("wrapper",n({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A BLOB (Binary Large OBjects) field, variable or expression is a contiguous series of bytes which can be treated as one whole object or whose bytes can be addressed individually. A BLOB can be empty (null length) or contain up to 2147483647 bytes (2 GB).")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"By default, 4D sets the maximum blob size to 2GB, but this size limit may be lower depending on your OS and how much space is available.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Um BLOB \xe9 carregado na mem\xf3ria na sua totalidade. A BLOB variable is held and exists in memory only. A BLOB field is loaded into memory from the disk, like the rest of the record to which it belongs."),(0,r.kt)("li",{parentName:"ul"},"Like the other field types that can retain a large amount of data (such as the Picture field type), BLOB fields are not duplicated in memory when you modify a record. Consequently, the result returned by the ",(0,r.kt)("inlineCode",{parentName:"li"},"Old")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Modified")," commands is not significant when applied to a BLOB field.")),(0,r.kt)("h2",n({},{id:"passagem-de-par\xe2metros-ponteiros-e-resultados-de-fun\xe7\xf5es"}),"Passagem de par\xe2metros, ponteiros e resultados de fun\xe7\xf5es"),(0,r.kt)("p",null,"4D BLOBs can be passed as parameters to 4D commands or plug-in routines that expect BLOB parameters. BLOBS can also be passed as parameters to a user method or be returned as a function result."),(0,r.kt)("p",null,"To pass a BLOB to your own methods, you can also define a pointer to the BLOB and pass the pointer as parameter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exemplos:")),(0,r.kt)("pre",null,(0,r.kt)("code",n({parentName:"pre"},{className:"language-4d"}),"  ` Declare a variable of type BLOB\n C_BLOB(anyBlobVar)\n  ` The BLOB is passed as parameter to a 4D command\n SET BLOB SIZE(anyBlobVar;1024*1024)\n  ` The BLOB is passed as parameter to an external routine\n $errCode:=Do Something With This BLOB(anyBlobVar)\n  ` The BLOB is passed as a parameter to a method that returns a BLOB\n C_BLOB(retrieveBlob)\n retrieveBlob:=Fill_Blob(anyBlobVar)\n  ` A pointer to the BLOB is passed as parameter to a user method\n COMPUTE BLOB(->anyBlobVar)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nota para  desenvolvedores de plugins:"),' um par\xe2metro BLOB se declara como "&O" (a letra "O", n\xe3o o n\xfamero "0").'),(0,r.kt)("h2",n({},{id:"operador-de-atribui\xe7\xe3o"}),"Operador de atribui\xe7\xe3o"),(0,r.kt)("p",null,"\xc9 poss\xedvel atribuir BLOBs uns aos outros."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exemplo:")),(0,r.kt)("pre",null,(0,r.kt)("code",n({parentName:"pre"},{className:"language-4d"}),"  ` Declare two variables of type BLOB\n C_BLOB(vBlobA;vBlobB)\n  ` Set the size of the first BLOB to 10K\n SET BLOB SIZE(vBlobA;10*1024)\n  ` Assign the first BLOB to the second one\n vBlobB:=vBlobA\n")),(0,r.kt)("p",null,"No entanto, nenhum operador pode ser aplicado a BLOBs."),(0,r.kt)("h2",n({},{id:"endere\xe7amento-do-conte\xfado-de-um-blob"}),"Endere\xe7amento do conte\xfado de um BLOB"),(0,r.kt)("p",null,"You can address each byte of a BLOB individually using the curly brackets symbols {...}. Within a BLOB, bytes are numbered from 0 to N-1, where N is the size of the BLOB. Exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",n({parentName:"pre"},{className:"language-4d"}),"  ` Declare a variable of type BLOB\n C_BLOB(vBlob)\n  ` Set the size of the BLOB to 256 bytes\n SET BLOB SIZE(vBlob;256)\n  ` The loop below initializes the 256 bytes of the BLOB to zero\n For(vByte;0;BLOB size(vBlob)-1)\n    vBlob{vByte}:=0\n End for\n")),(0,r.kt)("p",null,"Because you can address all the bytes of a BLOB individually, you can actually store whatever you want in a BLOB field or variable."))}c.isMDXComponent=!0}}]);