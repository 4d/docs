"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11044],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79025:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});n(67294);var r=n(3905);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const i={id:"control-flow",title:"Condi\xe7\xf5es e loops"},s=void 0,l={unversionedId:"Concepts/control-flow",id:"version-19-R8/Concepts/control-flow",title:"Condi\xe7\xf5es e loops",description:"Regardless of the simplicity or complexity of a method or function, you will always use one or more of three types of programming structures. Programming structures control the flow of execution, whether and in what order statements are executed within a method. H\xe1 tr\xeas tipos de estruturas:",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-19-R8/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/pt/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(19-R8)&body=Please%20enter%20your%20comment%3A",tags:[],version:"19-R8",frontMatter:{id:"control-flow",title:"Condi\xe7\xf5es e loops"},sidebar:"docs",previous:{title:"Comandos",permalink:"/docs/pt/Concepts/commands"},next:{title:"Estruturas condicionais",permalink:"/docs/pt/Concepts/branching"}},u={},p=[{value:"return {expression}",id:"return-expression",level:2},{value:"Exemplo",id:"exemplo",level:3}],c={toc:p};function m(e){var{components:t}=e,n=a(e,["components"]);return(0,r.kt)("wrapper",o({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Regardless of the simplicity or complexity of a method or function, you will always use one or more of three types of programming structures. Programming structures control the flow of execution, whether and in what order statements are executed within a method. H\xe1 tr\xeas tipos de estruturas:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sequencial"),": uma estrutura sequencial \xe9 uma estrutura simples e linear. Uma sequ\xeancia \xe9 uma s\xe9rie de senten\xe7as que 4D executa uma atr\xe1s da outra, da primera \xe0 \xfaltima. Uma instru\xe7\xe3o de uma linha, utilizada frequentemente para os m\xe9todos dos objetos, \xe9 o caso mais simples de uma estrutura sequencial. Por exemplo: ",(0,r.kt)("inlineCode",{parentName:"li"},"[People]lastName:=Uppercase([People]lastName)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",o({parentName:"strong"},{href:"/docs/pt/Concepts/branching"}),"Branching")),": uma estrutura de bifurca\xe7\xe3o permite que os m\xe9todos provem uma condi\xe7\xe3o e tomem caminhos alternativos, dependendo do resultado. A condi\xe7\xe3o \xe9 uma express\xe3o booleana, uma express\xe3o que avalia TRUE ou FALSE. Uma estrutura condicional e a estrutura ",(0,r.kt)("inlineCode",{parentName:"li"},"If...Else...End if"),", que dirige o fluxo do programa ao longo de um dos dois caminhos. A outra estrutura condicional \xe9 a estrutura ",(0,r.kt)("inlineCode",{parentName:"li"},"Case of... End case")," que direciona fluxo de programa para um de muitas caminhos."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",o({parentName:"strong"},{href:"/docs/pt/Concepts/looping"}),"Bucle")),": quando se escrevem m\xe9todos, \xe9 muito comum descobrir que se necessita que uma sequ\xeancia de senten\xe7as se repita um n\xfamero de vezes. Para lidar com esta necessidade, a linguagem 4D oferece as estruturas de loop abaixo:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"While... End while")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Repeat... Until")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"For... End for")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Para cada...Fim para cada"),(0,r.kt)("br",null)," Os loops s\xe3o controlados de duas maneiras: ou fazem loop at\xe9 que uma condi\xe7\xe3o seja satisfeita, ou fazem loop um n\xfamero especificado de vezes. Cada estrutura de looping pode ser usada de qualquer forma, mas loops",(0,r.kt)("inlineCode",{parentName:"li"},"While")," e ",(0,r.kt)("inlineCode",{parentName:"li"},"Repeat")," s\xe3o mais apropriados para repetir at\xe9 que uma condi\xe7\xe3o seja satisfeita, e loops ",(0,r.kt)("inlineCode",{parentName:"li"},"For")," s\xe3o mais apropriados para looping um n\xfamero especificado de vezes. ",(0,r.kt)("inlineCode",{parentName:"li"},"For each... End for each")," permite misturar ambas as formas e foi concebido para fazer loop dentro de objectos e colec\xe7\xf5es.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nota:"),' 4D permite incorporar estruturas de programa\xe7\xe3o at\xe9 uma "profundidade" de 512 n\xedveis.'),(0,r.kt)("h2",o({},{id:"return-expression"}),"return {expression}"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Hist\xf3rico"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",o({parentName:"tr"},{align:null}),"Vers\xe3o"),(0,r.kt)("th",o({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",o({parentName:"tr"},{align:null}),"v19 R4"),(0,r.kt)("td",o({parentName:"tr"},{align:null}),"Adicionado"))))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement can be called from anywhere. When a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement is used in a function or method, the execution of the function or method is stopped. The remaining code is not executed and the control is returned to the caller."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement can be used to ",(0,r.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/parameters#return-expression"}),"return a value")," to the caller."),(0,r.kt)("h3",o({},{id:"exemplo"}),"Exemplo"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer While (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}m.isMDXComponent=!0}}]);