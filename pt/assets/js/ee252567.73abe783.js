"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31780],{603905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(667294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},374728:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});n(667294);var a=n(603905);function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const l={id:"control-flow",title:"Fluxo de controlo"},i=void 0,s={unversionedId:"Concepts/control-flow",id:"version-20-R5/Concepts/control-flow",title:"Fluxo de controlo",description:"Independentemente da simplicidade ou da complexidade de um m\xe9todo, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es dentro do m\xe9todo. H\xe1 tr\xeas tipos de estruturas:",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-20-R5/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/pt/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"control-flow",title:"Fluxo de controlo"},sidebar:"docs",previous:{title:"Comandos",permalink:"/docs/pt/Concepts/commands"},next:{title:"Gest\xe3o de erros",permalink:"/docs/pt/Concepts/error-handling"}},p={},d=[{value:"If... Else... End if",id:"if-else-end-if",level:2},{value:"Exemplo",id:"exemplo",level:4},{value:"Case of... Else... End case",id:"case-of-else-end-case",level:2},{value:"Exemplo",id:"exemplo-1",level:4},{value:"While... End while",id:"while-end-while",level:2},{value:"Exemplo",id:"exemplo-2",level:4},{value:"Repeat... Until",id:"repeat-until",level:2},{value:"Exemplo",id:"exemplo-3",level:4},{value:"For...End for",id:"forend-for",level:2},{value:"Exemplos b\xe1sicos",id:"exemplos-b\xe1sicos",level:4},{value:"Vari\xe1vel contador",id:"vari\xe1vel-contador",level:3},{value:"Vari\xe1vel contador decrescente",id:"vari\xe1vel-contador-decrescente",level:4},{value:"Incrementar a vari\xe1vel do contador em mais de um",id:"incrementar-a-vari\xe1vel-do-contador-em-mais-de-um",level:4},{value:"Optimizing the execution of the For... End for loops",id:"optimizing-the-execution-of-the-for-end-for-loops",level:4},{value:"Compara\xe7\xe3o de estruturas de loop",id:"compara\xe7\xe3o-de-estruturas-de-loop",level:3},{value:"Nested For... End for looping structures",id:"nested-for-end-for-looping-structures",level:3},{value:"For each... End for each",id:"for-each-end-for-each",level:2},{value:"Loop atrav\xe9s da cole\xe7\xe3o",id:"loop-atrav\xe9s-da-cole\xe7\xe3o",level:3},{value:"Exemplo",id:"exemplo-4",level:4},{value:"Loop nas sele\xe7\xf5es de entidades",id:"loop-nas-sele\xe7\xf5es-de-entidades",level:3},{value:"Exemplo",id:"exemplo-5",level:4},{value:"Loops nas propriedades de objetos",id:"loops-nas-propriedades-de-objetos",level:3},{value:"Exemplo",id:"exemplo-6",level:4},{value:"Par\xe2metros begin / end",id:"par\xe2metros-begin--end",level:3},{value:"Exemplo",id:"exemplo-7",level:4},{value:"Condi\xe7\xf5es Until e While",id:"condi\xe7\xf5es-until-e-while",level:3},{value:"Exemplo",id:"exemplo-8",level:4},{value:"break e continue",id:"break-e-continue",level:2},{value:"break",id:"break",level:3},{value:"Exemplo",id:"exemplo-9",level:4},{value:"continue",id:"continue",level:3},{value:"return {expression}",id:"return-expression",level:2},{value:"Exemplo",id:"exemplo-10",level:4}],m={toc:d};function u(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",o({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Independentemente da simplicidade ou da complexidade de um m\xe9todo, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es dentro do m\xe9todo. H\xe1 tr\xeas tipos de estruturas:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Sequential"),": a sequential structure is a simple, linear structure. Uma sequ\xeancia \xe9 uma s\xe9rie de senten\xe7as que 4D executa uma atr\xe1s da outra, da primera \xe0 \xfaltima. Uma instru\xe7\xe3o de uma linha, utilizada frequentemente para os m\xe9todos dos objetos, \xe9 o caso mais simples de uma estrutura sequencial. For example: ",(0,a.kt)("inlineCode",{parentName:"p"},"[People]lastName:=Uppercase([People]lastName)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Branching"),": A branching structure allows methods to test a condition and take alternative paths, depending on the result. A condi\xe7\xe3o \xe9 uma express\xe3o booleana, uma express\xe3o que avalia TRUE ou FALSE. One branching structure is the ",(0,a.kt)("a",o({parentName:"p"},{href:"#ifelseend-if"}),(0,a.kt)("inlineCode",{parentName:"a"},"If...Else...End if"))," structure, which directs program flow along one of two paths. The other branching structure is the ",(0,a.kt)("a",o({parentName:"p"},{href:"#case-ofelseend-case"}),(0,a.kt)("inlineCode",{parentName:"a"},"Case of...Else...End case"))," structure, which directs program flow to one of many paths.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Looping"),": When writing methods, it is very common to find that you need a sequence of statements to repeat a number of times. Para lidar com esta necessidade, a linguagem 4D oferece as estruturas de loop abaixo:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",o({parentName:"li"},{href:"#whileend-while"}),(0,a.kt)("inlineCode",{parentName:"a"},"While...End while"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",o({parentName:"li"},{href:"#repeatuntil"}),(0,a.kt)("inlineCode",{parentName:"a"},"Repeat...Until"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",o({parentName:"li"},{href:"#forend-for"}),(0,a.kt)("inlineCode",{parentName:"a"},"For...End for"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",o({parentName:"li"},{href:"#for-eachend-for-each"}),(0,a.kt)("inlineCode",{parentName:"a"},"For each...End for each")))))),(0,a.kt)("p",null,"Os loops s\xe3o controlados de duas maneiras: ou fazem loop at\xe9 que uma condi\xe7\xe3o seja satisfeita, ou fazem loop um n\xfamero especificado de vezes. Each looping structure can be used in either way, but ",(0,a.kt)("inlineCode",{parentName:"p"},"While")," loops and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat")," loops are more appropriate for repeating until a condition is met, and ",(0,a.kt)("inlineCode",{parentName:"p"},"For")," loops are more appropriate for looping a specified number of times. ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," allows mixing both ways and is designed to loop within objects and collections."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:"),' 4D allows you to embed programming structures up to a "depth" of 512 levels.'),(0,a.kt)("h2",o({},{id:"if-else-end-if"}),"If... Else... End if"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n    statement(s)\n End if\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is optional; you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n End if\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure lets your method choose between two actions, depending on whether a test (a Boolean expression) is TRUE or FALSE. Quando a express\xe3o Booleana for TRUE, s\xe3o executadas as declara\xe7\xf5es que seguem imediatamente ao teste. Se a express\xe3o Booleana for FALSE, s\xe3o executadas as declara\xe7\xf5es que seguem a linha Else. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," statement is optional; if you omit Else, execution continues with the first statement (if any) following the ",(0,a.kt)("inlineCode",{parentName:"p"},"End if"),"."),(0,a.kt)("p",null,"Note que a express\xe3o booleana \xe9 sempre avaliada completamente. Considere particularmente o teste abaixo:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(MethodA & MethodB)\n    ...\n End if\n")),(0,a.kt)("p",null,"A express\xe3o \xe9 TRUE apenas se ambos os m\xe9todos forem TRUE. However, even if ",(0,a.kt)("em",{parentName:"p"},"MethodA")," returns FALSE, 4D will still evaluate ",(0,a.kt)("em",{parentName:"p"},"MethodB"),", which is a useless waste of time. Nesse caso, \xe9 mais interessante usar uma estrutra como:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(MethodA)\n    If(MethodB)\n       ...\n    End if\n End if\n")),(0,a.kt)("p",null,"The result is similar and ",(0,a.kt)("em",{parentName:"p"},"MethodB")," is evaluated only if necessary."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/operators#ternary-operator"}),"ternary operator")," allows writing one-line conditional expressions and can replace a full sequence of If..Else statements.")),(0,a.kt)("h4",o({},{id:"exemplo"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  // Ask the user to enter a name\n $Find:=Request(Type a name)\n If(OK=1)\n    QUERY([People];[People]LastName=$Find)\n Else\n    ALERT("You did not enter a name.")\n End if \n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," Branching can be performed without statements to be executed in one case or the other. Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n Else\n    statement(s)\n End if\n")),(0,a.kt)("p",null,"ou :"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n End if\n")),(0,a.kt)("h2",o({},{id:"case-of-else-end-case"}),"Case of... Else... End case"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is optional; you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"As with the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure also lets your method choose between alternative actions. Unlike the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End")," if structure, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure can test a reasonable unlimited number of Boolean expressions and take action depending on which one is TRUE."),(0,a.kt)("p",null,"Cada express\xe3o booleana \xe9 precedida de dois pontos (",(0,a.kt)("inlineCode",{parentName:"p"},":"),"). A combina\xe7\xe3o dos dois pontos e da express\xe3o booleana \xe9 chamada de um caso. Por exemplo, a linha abaixo \xe9 um caso:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),":(bValidate=1)\n")),(0,a.kt)("p",null,"S\xf3 s\xe3o executadas as instru\xe7\xf5es que seguem o primeiro caso TRUE (at\xe9 o pr\xf3ximo caso). If none of the cases are TRUE, none of the statements will be executed (if no ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is included)."),(0,a.kt)("p",null,"Pode incluir uma instru\xe7\xe3o Else depois do \xfaltimo caso. If all of the cases are FALSE, the statements following the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," will be executed."),(0,a.kt)("h4",o({},{id:"exemplo-1"}),"Exemplo"),(0,a.kt)("p",null,"Esse exemplo testa uma vari\xe1vel num\xe9rica e exibe uma caixa de alerta com uma apalavra:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' Case of\n    :(vResult=1) //Test if the number is 1\n       ALERT("One.") //If it is 1, display an alert\n    :(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    :(vResult=3) //Test if the number is 3\n       ALERT("Three.") //If it is 3, display an alert\n    Else //If it is not 1, 2, or 3, display an alert\n       ALERT("It was not one, two, or three.")\n End case\n')),(0,a.kt)("p",null,"For comparison, here is the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," version of the same method:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' If(vResult=1) //Test if the number is 1\n    ALERT("One.") //If it is 1, display an alert\n Else\n    If(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    Else\n       If(vResult=3) //Test if the number is 3\n          ALERT("Three.") //If it is 3, display an alert\n       Else //If it is not 1, 2, or 3, display an alert\n          ALERT("It was not one, two, or three.")\n       End if\n    End if\n End if\n')),(0,a.kt)("p",null,"Remember that with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure, only the first TRUE case is executed. Mesmo se dois ou mais casos forem TRUE, s\xf3 as instru\xe7\xf5es que seguirem o primeiro caso TRUE ser\xe3o executadas."),(0,a.kt)("p",null,"Dessa maneira, quando quiser implementar testes hier\xe1rquicos, deve garantir que as declara\xe7\xf5es de condi\xe7\xe3o que estejam mais abaixo no esquema hier\xe1rquico apare\xe7am primeiro na sequ\xeancia de testes. For example, the test for the presence of condition1 covers the test for the presence of condition1&condition2 and should therefore be located last in the test sequence. Por exemplo, o c\xf3digo abaixo nunca ter\xe1 sua \xfaltima condi\xe7\xe3o detectada:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(vResult=1)\n       ... //statement(s)\n    :((vResult=1) & (vCondition#2)) //this case will never be detected\n       ... //statement(s)\n End case\n")),(0,a.kt)("p",null,'No c\xf3digo anterior, a presen\xe7a da segunda condi\xe7\xe3o n\xe3o \xe9 detectada, j\xe1 que o teste "vResult=1" ramifica o c\xf3digo antes de qualquer outro teste. Para que o c\xf3digo funcione corretamente, pode escrev\xea-lo assim:'),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :((vResult=1) & (vCondition#2)) //this case will be detected first\n       ... //statement(s)\n    :(vResult=1)\n       ... //statement(s)\n End case\n")),(0,a.kt)("p",null,"Al\xe9m disso, se quiser implementar teste hier\xe1rquico, pode considerar usar um c\xf3digo hier\xe1rquico."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," Branching can be performed without statements to be executed in one case or another. Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n      ...\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"ou :"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n       statement(s)\n       ...\n        \n    :(Boolean_Expression)\n       statement(s)\n    Else\n End case\n")),(0,a.kt)("p",null,"ou :"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("h2",o({},{id:"while-end-while"}),"While... End while"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," While(Boolean_Expression)\n    statement(s)\n    {break}  \n    {continue}\n End while\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop executes the statements inside the loop as long as the Boolean expression is TRUE. Comprova a express\xe3o booleana ao in\xedcio do loop e n\xe3o entra no loop se a express\xe3o for FALSE."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("p",null,"It is common to initialize the value tested in the Boolean expression immediately before entering the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop. Initializing the value means setting it to something appropriate, usually so that the Boolean expression will be TRUE and ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," executes the loop."),(0,a.kt)("p",null,"O valor da express\xe3o booleana deve poder ser modificado por um elemento dentro do loop, do contr\xe1rio ser\xe1 executado indefinidamente. The following loop continues forever because ",(0,a.kt)("em",{parentName:"p"},"NeverStop")," is always TRUE:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," NeverStop:=True\n While(NeverStop)\n End while\n")),(0,a.kt)("p",null,"Se voc\xea se encontrar em uma situa\xe7\xe3o desse tipo, na qual um m\xe9todo fica executando de forma descontrolada, pode usar as fun\xe7\xf5es de rastreamento para parar o loop e rastrear o problema. For more information about tracing a method, see the ",(0,a.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/error-handling"}),"Error handling")," page."),(0,a.kt)("h4",o({},{id:"exemplo-2"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' CONFIRM("Add a new record?") //The user wants to add a record?\n While(OK=1) //Loop as long as the user wants to\n    ADD RECORD([aTable]) //Add a new record\n End while //The loop always ends with End while\n')),(0,a.kt)("p",null,"In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set by the ",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIRM")," command before the loop starts. If the user clicks the ",(0,a.kt)("strong",{parentName:"p"},"OK")," button in the confirmation dialog box, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 1 and the loop starts. Otherwise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 0 and the loop is skipped. Once the loop starts, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ADD RECORD")," command keeps the loop going because it sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable to 1 when the user saves the record. When the user cancels (does not save) the last record, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 0 and the loop stops."),(0,a.kt)("h2",o({},{id:"repeat-until"}),"Repeat... Until"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Repeat\n    statement(s)\n    {break}  \n    {continue}\nUntil(Boolean_Expression)\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is similar to a ",(0,a.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/control-flow#whileend-while"}),"While...End while")," loop, except that it tests the Boolean expression after the loop rather than before. Thus, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop always executes the loop once, whereas if the Boolean expression is initially False, a ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop does not execute the loop at all."),(0,a.kt)("p",null,"The other difference with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is that the loop continues until the Boolean expression is TRUE."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h4",o({},{id:"exemplo-3"}),"Exemplo"),(0,a.kt)("p",null,"Compare the following example with the example for the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop. Note that the Boolean expression does not need to be initialized\u2014there is no ",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIRM")," command to initialize the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," variable."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Repeat\n    ADD RECORD([aTable])\n Until(OK=0)\n")),(0,a.kt)("h2",o({},{id:"forend-for"}),"For...End for"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"For(Counter_Variable;Start_Expression;End_Expression{;Increment_Expression})\n   statement(s)\n    {break}  \n    {continue}\nEnd for\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop is a loop controlled by a counter variable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The counter variable ",(0,a.kt)("em",{parentName:"li"},"Counter_Variable")," is a numeric variable (Real or Long Integer) that the ",(0,a.kt)("inlineCode",{parentName:"li"},"For...End for")," loop initializes to the value specified by ",(0,a.kt)("em",{parentName:"li"},"Start_Expression"),"."),(0,a.kt)("li",{parentName:"ul"},"Each time the loop is executed, the counter variable is incremented by the value specified in the optional value ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),". If you do not specify ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),", the counter variable is incremented by one (1), which is the default."),(0,a.kt)("li",{parentName:"ul"},"When the counter variable passes the ",(0,a.kt)("em",{parentName:"li"},"End_Expression")," value, the loop stops.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," The numeric expressions ",(0,a.kt)("em",{parentName:"p"},"Start_Expression"),", ",(0,a.kt)("em",{parentName:"p"},"End_Expression")," and ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression")," are evaluated once at the beginning of the loop. Se essas express\xf5es forem vari\xe1veis, mudar uma deles dentro do loop n\xe3o vai afetar o loop."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," However, for special purposes, you can change the value of the counter variable ",(0,a.kt)("em",{parentName:"p"},"Counter_Variable")," within the loop; this will affect the loop."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Usually ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," is less than ",(0,a.kt)("em",{parentName:"li"},"End_Expression"),"."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," and ",(0,a.kt)("em",{parentName:"li"},"End_Expression")," are equal, the loop will execute only once."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," is greater than ",(0,a.kt)("em",{parentName:"li"},"End_Expression"),", the loop will not execute at all unless you specify a negative ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),". Ver os exemplos.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h4",o({},{id:"exemplos-b\xe1sicos"}),"Exemplos b\xe1sicos"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"O seguinte exemplo executa 100 itera\xe7\xf5es:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faz algo\n End for\n")),(0,a.kt)("ol",o({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos no array anArray:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("ol",o({},{start:3}),(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre todos os caracteres do texto vtSomeText:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlChar;1;Length(vtSomeText))\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,a.kt)("ol",o({},{start:4}),(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre os registros selecionados para a tabela ","[aTable]",":")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," FIRST RECORD([aTable])\n For($vlRecord;1;Records in selection([aTable]))\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the next record\n    NEXT RECORD([aTable])\n End for\n")),(0,a.kt)("p",null,"Most of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loops you will write in your projects will look like the ones listed in these examples."),(0,a.kt)("h3",o({},{id:"vari\xe1vel-contador"}),"Vari\xe1vel contador"),(0,a.kt)("h4",o({},{id:"vari\xe1vel-contador-decrescente"}),"Vari\xe1vel contador decrescente"),(0,a.kt)("p",null,"Em alguns casos, pode querer ter um loop cuja vari\xe1vel de contador seja decrescente ao inv\xe9s de crescente. To do so, you must specify ",(0,a.kt)("em",{parentName:"p"},"Start_Expression")," greater than ",(0,a.kt)("em",{parentName:"p"},"End_Expression")," and a negative ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression"),". Os exemplos abaixo fazem a mesma coisa que nos exemplos acima, mas na ordem inversa:"),(0,a.kt)("ol",o({},{start:5}),(0,a.kt)("li",{parentName:"ol"},"O seguinte exemplo executa 100 itera\xe7\xf5es:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For(vCounter;100;1;-1)\n  //Faz algo\n End for\n")),(0,a.kt)("ol",o({},{start:6}),(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos no array anArray:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;Size of array(anArray);1;-1)\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("ol",o({},{start:7}),(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre todos os caracteres do texto vtSomeText:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlChar;Length(vtSomeText);1;-1)\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,a.kt)("ol",o({},{start:8}),(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre os registros selecionados para a tabela ","[aTable]",":")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," LAST RECORD([aTable])\n For($vlRecord;Records in selection([aTable]);1;-1)\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the previous record\n    PREVIOUS RECORD([aTable])\n End for\n")),(0,a.kt)("h4",o({},{id:"incrementar-a-vari\xe1vel-do-contador-em-mais-de-um"}),"Incrementar a vari\xe1vel do contador em mais de um"),(0,a.kt)("p",null,"If you need to, you can use an ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression")," (positive or negative) whose absolute value is greater than one."),(0,a.kt)("ol",o({},{start:9}),(0,a.kt)("li",{parentName:"ol"},"O loop a seguir aborda s\xf3 os elementos pares do array anArray:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;2;Size of array(anArray);2)\n  //Do something with the element #2,#4...#2n\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("h4",o({},{id:"optimizing-the-execution-of-the-for-end-for-loops"}),"Optimizing the execution of the For... End for loops"),(0,a.kt)("p",null,"Pode utilizar vari\xe1veis reais e inteiras, assim como contadores interprocesso, de processo e de vari\xe1veis locais. Para loops repetitivos longos, especialmente em modo compilado, use vari\xe1veis locais de tipo Inteiro longo."),(0,a.kt)("ol",o({},{start:10}),(0,a.kt)("li",{parentName:"ol"},"Aqui um exemplo simples:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," var $vlCounter : Integer //usa vari\xe1veis Integer locais \n For($vlCounter;1;10000)\n  //Faz algo\n End for\n")),(0,a.kt)("h3",o({},{id:"compara\xe7\xe3o-de-estruturas-de-loop"}),"Compara\xe7\xe3o de estruturas de loop"),(0,a.kt)("p",null,"Let's go back to the first ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," example. O seguinte exemplo executa 100 itera\xe7\xf5es:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faz algo\n End for\n")),(0,a.kt)("p",null,"It is interesting to see how the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop would perform the same action. Here is the equivalent ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initialize the counter\n While($i<=100) //Loop 100 times\n  //Do something\n    $i:=$i+1 //Need to increment the counter\n End while\n")),(0,a.kt)("p",null,"Here is the equivalent ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initializa o contador\n Repeat\n  //Faz algo\n    $i:=$i+1 //Precisa incrementar o contador\n Until($i=100) //Loop 100 vezes\n")),(0,a.kt)("admonition",o({},{type:"tip"}),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop is usually faster than the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loops, because 4D tests the condition internally for each cycle of the loop and increments the counter. Therefore, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop whenever possible.")),(0,a.kt)("h3",o({},{id:"nested-for-end-for-looping-structures"}),"Nested For... End for looping structures"),(0,a.kt)("p",null,"Pode aninhar tantas estruturas de controle (dentro do razo\xe1vel) como precisar. This includes nesting ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loops. Para evitar erros, tenha certeza de usar vari\xe1veis contador diferentes para cada estrutura de looping."),(0,a.kt)("p",null,"Aqui s\xe3o dois exemplos:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos em um array de duas dimens\xf5es:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //...\n  //Do something with the row\n  //...\n    For($vlSubElem;1;Size of array(anArray{$vlElem}))\n  //Do something with the element\n       anArray{$vlElem}{$vlSubElem}:=...\n    End for\n End for\n")),(0,a.kt)("ol",o({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"O seguinte exemplo constr\xf3i um array de ponteiros a todos os campos de data presentes no banco:")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," ARRAY POINTER($apDateFields;0)\n $vlElem:=0\n For($vlTable;1;Get last table number)\n    If(Is table number valid($vlTable))\n       For($vlField;1;Get last field number($vlTable))\n          If(Is field number valid($vlTable;$vlField))\n             $vpField:=Field($vlTable;$vlField)\n             If(Type($vpField->)=Is date)\n                $vlElem:=$vlElem+1\n                INSERT IN ARRAY($apDateFields;$vlElem)\n                $apDateFields{$vlElem}:=$vpField\n             End if\n          End if\n       End for\n    End if\n End for\n")),(0,a.kt)("h2",o({},{id:"for-each-end-for-each"}),"For each... End for each"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For each(Current_Item;Expression{;begin{;end}}){Until|While}(Boolean_Expression)}\n    statement(s)\n    {break}  \n    {continue}\n End for each\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," structure iterates a specified ",(0,a.kt)("em",{parentName:"p"},"Current_item")," over all values of the ",(0,a.kt)("em",{parentName:"p"},"Expression"),". The ",(0,a.kt)("em",{parentName:"p"},"Current_item")," type depends on the ",(0,a.kt)("em",{parentName:"p"},"Expression")," type. The ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," loop can iterate through three ",(0,a.kt)("em",{parentName:"p"},"Expression")," types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"collections: loop por cada elemento da cole\xe7\xe3o,"),(0,a.kt)("li",{parentName:"ul"},"sele\xe7\xf5es de entidades: loop em cada entidade,"),(0,a.kt)("li",{parentName:"ul"},"objetos: loop em cada propriedade do objeto.")),(0,a.kt)("p",null,"The following table compares the three types of ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null})),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Loop atrav\xe9s da cole\xe7\xe3o"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Loop nas sele\xe7\xf5es de entidades"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Loop nos objetos"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Tipo Current_Item"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Vari\xe1vel do mesmo tipo que os elementos da cole\xe7\xe3o"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Entity"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Vari\xe1vel texto")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Tipos de express\xf5es"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Cole\xe7\xe3o (com elementos do mesmo tipo)"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Sele\xe7\xe3o de entidades"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Object")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de loops (por padr\xe3o)"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de elementos da cole\xe7\xe3o"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de entidades na sele\xe7\xe3o"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de propriedades de objeto")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Compatibilidade de par\xe2metros begin / end"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Sim"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Sim"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"N\xe3o")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"O n\xfamero de loops \xe9 avaliado no in\xedcio e n\xe3o muda durante o processo. Adicionar ou remover itens durante o loop n\xe3o \xe9 recomendado porque resulta em itera\xe7\xf5es faltantes ou redundantes."),(0,a.kt)("li",{parentName:"ul"},"By default, the enclosed ",(0,a.kt)("em",{parentName:"li"},"statement(s)")," are executed for each value in ",(0,a.kt)("em",{parentName:"li"},"Expression"),". It is, however, possible to exit the loop by testing a condition either at the begining of the loop (",(0,a.kt)("inlineCode",{parentName:"li"},"While"),") or at the end of the loop (",(0,a.kt)("inlineCode",{parentName:"li"},"Until"),")."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"begin")," and ",(0,a.kt)("em",{parentName:"li"},"end")," optional parameters can be used with collections and entity selections to define boundaries for the loop."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"For each...End for each")," loop can be used on a ",(0,a.kt)("strong",{parentName:"li"},"shared collection")," or a ",(0,a.kt)("strong",{parentName:"li"},"shared object"),". If your code needs to modify one or more element(s) of the collection or object properties, you need to use the ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," keywords. Depending on your needs, you can call the ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," keywords:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"antes de entrar no loop, se os elementos devem ser modificados juntos por raz\xf5es de integridade, ou"),(0,a.kt)("li",{parentName:"ul"},"dentro do loop quando s\xf3 tiver que modificar alguns elementos/propriedades e n\xe3o \xe9 necess\xe1rio gerenciar a integridade.")))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h3",o({},{id:"loop-atrav\xe9s-da-cole\xe7\xe3o"}),"Loop atrav\xe9s da cole\xe7\xe3o"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the ",(0,a.kt)("em",{parentName:"p"},"Collection")," type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is a variable of the same type as the collection elements. Como padr\xe3o, o n\xfamero de loops \xe9 baseado no n\xfamero de elementos da cole\xe7\xe3o."),(0,a.kt)("p",null,"The collection must contain only elements of the same type, otherwise an error will be returned as soon as the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," variable is assigned the first mismatched value type."),(0,a.kt)("p",null,"At each loop iteration, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," variable is automatically filled with the matching element of the collection. Os pontos abaixo devem ser considerados:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable is of the object type or collection type (i.e. if ",(0,a.kt)("em",{parentName:"li"},"Expression")," is a collection of objects or of collections), modifying this variable will automatically modify the matching element of the collection (because objects and collections share the same references). Se a vari\xe1vel for de tipo escalar, s\xf3 se modificar\xe1 a vari\xe1vel."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable must be of the same type as the collection elements. Se algum elemento da cole\xe7\xe3o n\xe3o for do mesmo tipo que a vari\xe1vel, um erro \xe9 gerado e o loop para."),(0,a.kt)("li",{parentName:"ul"},"If the collection contains elements with a ",(0,a.kt)("strong",{parentName:"li"},"Null")," value, an error will be generated if the ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable type does not support ",(0,a.kt)("strong",{parentName:"li"},"Null")," values (such as longint variables).")),(0,a.kt)("h4",o({},{id:"exemplo-4"}),"Exemplo"),(0,a.kt)("p",null,"Se quiser computar algumas estat\xedsticas para uma cole\xe7\xe3o de n\xfameros:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," var $nums : Collection\n $nums:=New collection(10;5001;6665;33;1;42;7850)\n var $item;$vEven;$vOdd;$vUnder;$vOver : Integer\n For each($item;$nums)\n    If($item%2=0)\n       $vEven:=$vEven+1\n    Else\n       $vOdd:=$vOdd+1\n    End if\n    Case of\n       :($item<5000)\n          $vUnder:=$vUnder+1\n       :($item>6000)\n          $vOver:=$vOver+1\n    End case\n End for each\n  //$vEven=3, $vOdd=4\n  //$vUnder=4,$vOver=2\n")),(0,a.kt)("h3",o({},{id:"loop-nas-sele\xe7\xf5es-de-entidades"}),"Loop nas sele\xe7\xf5es de entidades"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the ",(0,a.kt)("em",{parentName:"p"},"Entity selection")," type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is the entity that is currently processed."),(0,a.kt)("p",null,"O n\xfamero de loops \xe9 baseado no n\xfamero de entidades da sele\xe7\xe3o de entidades. On each loop iteration, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is automatically filled with the entity of the entity selection that is currently processed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," If the entity selection contains an entity that was removed meanwhile by another process, it is automatically skipped during the loop."),(0,a.kt)("p",null,"Keep in mind that any modifications applied on the current entity must be saved explicitly using ",(0,a.kt)("inlineCode",{parentName:"p"},"entity.save()"),"."),(0,a.kt)("h4",o({},{id:"exemplo-5"}),"Exemplo"),(0,a.kt)("p",null,"Se quiser aumentar o sal\xe1rio de todos os empregados brit\xe2nicos em uma sele\xe7\xe3o de entidades:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," var emp : Object\n For each(emp;ds.Employees.query(\"country='UK'\"))\n    emp.salary:=emp.salary*1,03\n    emp.save()\n End for each\n")),(0,a.kt)("h3",o({},{id:"loops-nas-propriedades-de-objetos"}),"Loops nas propriedades de objetos"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the Object type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is a text variable automatically filled with the name of the currently processed property."),(0,a.kt)("p",null,"As propriedades do objeto s\xe3o processadas de acordo com sua ordem de cria\xe7\xe3o. Durante o loop, propriedades podem ser adicionadas ou eliminadas no objeto, sem modificar o n\xfamero de loops que permanecer\xe3o no n\xfamero original de propriedades do objeto."),(0,a.kt)("h4",o({},{id:"exemplo-6"}),"Exemplo"),(0,a.kt)("p",null,"Se quiser trocar os nomes para mai\xfasculas no objeto a seguir:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'{\n    "firstname": "gregory",\n    "lastname": "badikora",\n    "age": 20\n}\n')),(0,a.kt)("p",null,"Voc\xea pode escrever:"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For each($property;$vObject)\n    If(Value type($vObject[$property])=Is text)\n       $vObject[$property]:=Uppercase($vObject[$property])\n    End if\n End for each\n")),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{}),'{\n    "firstname": "GREGORY",\n    "lastname": "BADIKORA",\n    "age": 20\n}\n')),(0,a.kt)("h3",o({},{id:"par\xe2metros-begin--end"}),"Par\xe2metros begin / end"),(0,a.kt)("p",null,"Pode definir limites para a itera\xe7\xe3o usando os par\xe2metros opcionais inicio e fim."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("em",{parentName:"p"},"begin")," and ",(0,a.kt)("em",{parentName:"p"},"end")," parameters can only be used in iterations through collections and entity selections (they are ignored on object properties)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the ",(0,a.kt)("em",{parentName:"li"},"begin")," parameter, pass the element position in ",(0,a.kt)("em",{parentName:"li"},"Expression")," at which to start the iteration (",(0,a.kt)("em",{parentName:"li"},"begin")," is included)."),(0,a.kt)("li",{parentName:"ul"},"In the ",(0,a.kt)("em",{parentName:"li"},"end")," parameter, you can also pass the element position in ",(0,a.kt)("em",{parentName:"li"},"Expression")," at which to stop the iteration (",(0,a.kt)("em",{parentName:"li"},"end")," is excluded).")),(0,a.kt)("p",null,"If ",(0,a.kt)("em",{parentName:"p"},"end")," is omitted or if ",(0,a.kt)("em",{parentName:"p"},"end")," is greater than the number of elements in ",(0,a.kt)("em",{parentName:"p"},"Expression"),", elements are iterated from ",(0,a.kt)("em",{parentName:"p"},"begin")," until the last one (included).\nIf the ",(0,a.kt)("em",{parentName:"p"},"begin")," and ",(0,a.kt)("em",{parentName:"p"},"end")," parameters are positive values, they represent actual positions of elements in ",(0,a.kt)("em",{parentName:"p"},"Expression"),".\nIf ",(0,a.kt)("em",{parentName:"p"},"begin")," is a negative value, it is recalculed as ",(0,a.kt)("inlineCode",{parentName:"p"},"begin:=begin+Expression size")," (it is considered as the offset from the end of ",(0,a.kt)("em",{parentName:"p"},"Expression"),"). If the calculated value is negative, ",(0,a.kt)("em",{parentName:"p"},"begin")," is set to 0.\n",(0,a.kt)("strong",{parentName:"p"},"Note:")," Even if begin is negative, the iteration is still performed in the standard order.\nIf ",(0,a.kt)("em",{parentName:"p"},"end")," is a negative value, it is recalculed as ",(0,a.kt)("inlineCode",{parentName:"p"},"end:=end+Expression size")),(0,a.kt)("p",null,"Por exemplo:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"uma cole\xe7\xe3o cont\xe9m 10 elementos (numerada de 0 a 9)"),(0,a.kt)("li",{parentName:"ul"},"begin=-4 -> begin=-4+10=6 -> iteration starts at the 6th element (#5)"),(0,a.kt)("li",{parentName:"ul"},"end=-2 -> end=-2+10=8 -> iteration stops before the 8th element (#7), i.e. at the 7th element.")),(0,a.kt)("h4",o({},{id:"exemplo-7"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' var $col;$col2 : Collection\n $col:=New collection("a";"b";"c";"d";"e")\n $col2:=New collection(1;2;3)\n var $item : Text\n For each($item;$col;0;3)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c"]\n For each($item;$col;-2;-1)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c","d"]\n')),(0,a.kt)("h3",o({},{id:"condi\xe7\xf5es-until-e-while"}),"Condi\xe7\xf5es Until e While"),(0,a.kt)("p",null,"You can control the ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," execution by adding an ",(0,a.kt)("inlineCode",{parentName:"p"},"Until")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"While")," condition to the loop. When an ",(0,a.kt)("inlineCode",{parentName:"p"},"Until(condition)")," statement is associated to the loop, the iteration will stop as soon as the condition is evaluated to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),", whereas when is case of a ",(0,a.kt)("inlineCode",{parentName:"p"},"While(condition)")," statement, the iteration will stop when the condition is first evaluated to ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Pode passar qualquer uma das duas palavras chave em fun\xe7\xe3o das suas necessidades:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Until")," condition is tested at the end of each iteration, so if the ",(0,a.kt)("em",{parentName:"li"},"Expression")," is not empty or null, the loop will be executed at least once."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"While")," condition is tested at the beginning of each iteration, so according to the condition result, the loop may not be executed at all.")),(0,a.kt)("h4",o({},{id:"exemplo-8"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"})," $colNum:=New collection(1;2;3;4;5;6;7;8;9;10)\n \n $total:=0\n For each($num;$colNum)While($total<30) //tested at the beginning\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 36 (1+2+3+4+5+6+7+8)\n \n $total:=1000\n For each($num;$colNum)Until($total>30) //tested at the end\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 1001 (1000+1)\n")),(0,a.kt)("h2",o({},{id:"break-e-continue"}),"break e continue"),(0,a.kt)("p",null,"All looping structures above support both ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements. Estas instru\xe7\xf5es d\xe3o-lhe mais controlo sobre os loops, permitindo-lhe sair do \u2018loop\u2019 e ignorar a itera\xe7\xe3o atual a qualquer momento."),(0,a.kt)("h3",o({},{id:"break"}),"break"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop."),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement is inside a ",(0,a.kt)("a",o({parentName:"p"},{href:"#nested-forend-for-looping-structures"}),"nested loop")," (loop inside another loop), the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement will terminate the innermost loop."),(0,a.kt)("h4",o({},{id:"exemplo-9"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'For (vCounter;1;100)\n    If ($tab{vCounter}="") //if a condition becomes true\n        break //end of the for loop\n    End if\nEnd for\n')),(0,a.kt)("h3",o({},{id:"continue"}),"continue"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statement terminates execution of the statements in the current iteration of the current loop, and continues execution of the loop with the next iteration."),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'var $text : Text\nFor ($i; 0; 9)\n    If ($i=3)\n        continue //go directly to the next iteration\n    End if\n    $text:=$text+String($i)\nEnd for\n// $text="012456789" \n\n')),(0,a.kt)("h2",o({},{id:"return-expression"}),"return {expression}"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Hist\xf3ria"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Release"),(0,a.kt)("th",o({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",o({parentName:"tr"},{align:null}),"19 R4"),(0,a.kt)("td",o({parentName:"tr"},{align:null}),"Adicionado"))))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement can be called from anywhere. When a ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement is used in a function or method, the execution of the function or method is stopped. O c\xf3digo restante n\xe3o \xe9 executado e o controlo \xe9 devolvido ao autor da chamada."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement can be used to ",(0,a.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/parameters#return-expression"}),"return a value")," to the caller."),(0,a.kt)("h4",o({},{id:"exemplo-10"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer\n\nWhile (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}u.isMDXComponent=!0}}]);