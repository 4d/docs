"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11348],{603905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>c});var t=r(667294);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function n(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?n(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),m=function(e){var a=t.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},d=function(e){var a=m(e.components);return t.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var r=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(r),c=o,y=p["".concat(i,".").concat(c)]||p[c]||u[c]||n;return r?t.createElement(y,s(s({ref:a},d),{},{components:r})):t.createElement(y,s({ref:a},d))}));function c(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=p;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var m=2;m<n;m++)s[m]=r[m];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},342332:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});r(667294);var t=r(603905);function o(){return o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var r=arguments[a];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},o.apply(this,arguments)}function n(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const s={id:"arrays",title:"Arrays"},l=void 0,i={unversionedId:"Concepts/arrays",id:"version-20-R5/Concepts/arrays",title:"Arrays",description:"An array is an ordered series of variables of the same type. Each variable is called an element of the array. Um array recebe seu tamanho quando \xe9 criado, depois pode ser redimensionado quantas vezes sejam necess\xe1rio, adicionando, inserindo ou eliminado elementos, ou redimensionando o array atrav\xe9s do mesmo comando usado para cri\xe1-lo. Elementos do array s\xe3o numerados de 1 a N, onde N \xe9 o tamanho do array. An array always has a special element zero. Arrays s\xe3o vari\xe1veis 4D. Como qualquer vari\xe1vel, um array tem um alcance/escopo e segue as regras da linguagem 4D, mas com algumas diferen\xe7as \xfanicas.",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-20-R5/Concepts/arrays.md",sourceDirName:"Concepts",slug:"/Concepts/arrays",permalink:"/docs/pt/Concepts/arrays",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Farrays.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"arrays",title:"Arrays"},sidebar:"docs",previous:{title:"Vari\xe1veis.",permalink:"/docs/pt/Concepts/variables"},next:{title:"P\xe1gina M\xe9todos",permalink:"/docs/pt/Concepts/methods"}},m={},d=[{value:"Criar Arrays",id:"criar-arrays",level:2},{value:"Atribuir valores em arrays",id:"atribuir-valores-em-arrays",level:2},{value:"Atribuindo um array para outro array",id:"atribuindo-um-array-para-outro-array",level:3},{value:"Usar o elemento zero de um array",id:"usar-o-elemento-zero-de-um-array",level:2},{value:"Arrays de duas dimens\xf5es",id:"arrays-de-duas-dimens\xf5es",level:2},{value:"Arrays e mem\xf3ria",id:"arrays-e-mem\xf3ria",level:2}],u={toc:d};function p(e){var{components:a}=e,r=n(e,["components"]);return(0,t.kt)("wrapper",o({},u,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"An ",(0,t.kt)("strong",{parentName:"p"},"array")," is an ordered series of ",(0,t.kt)("strong",{parentName:"p"},"variables")," of the same type. Each variable is called an ",(0,t.kt)("strong",{parentName:"p"},"element")," of the array. Um array recebe seu tamanho quando \xe9 criado, depois pode ser redimensionado quantas vezes sejam necess\xe1rio, adicionando, inserindo ou eliminado elementos, ou redimensionando o array atrav\xe9s do mesmo comando usado para cri\xe1-lo. Elementos do array s\xe3o numerados de 1 a N, onde N \xe9 o tamanho do array. An array always has a special ",(0,t.kt)("a",o({parentName:"p"},{href:"#using-the-element-zero-of-an-array"}),"element zero"),". Arrays s\xe3o vari\xe1veis 4D. Como qualquer vari\xe1vel, um array tem um alcance/escopo e segue as regras da linguagem 4D, mas com algumas diferen\xe7as \xfanicas."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"In most cases, it is recommended to use ",(0,t.kt)("strong",{parentName:"p"},"collections")," instead of ",(0,t.kt)("strong",{parentName:"p"},"arrays"),". Collections s\xe3o mais flex\xedveis e oferecem uma maior gama de m\xe9todos dedicados. For more information, please refer to the ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/collection"}),"Collection")," section.")),(0,t.kt)("h2",o({},{id:"criar-arrays"}),"Criar Arrays"),(0,t.kt)("p",null,'Pode criar um array com um dos comandos de declara\xe7\xe3o de array no tema "Array". Cada comando de declara\xe7\xe3o de array pode criar ou redimensionar arrays unidimensionais ou bidimensionais. For more information about two-dimensional arrays, see the ',(0,t.kt)("a",o({parentName:"p"},{href:"#two-dimensional-arrays"}),"two dimensional arrays")," section."),(0,t.kt)("p",null,"A linha de c\xf3digo abaixo cria (declara) um array Inteiro de 10 elementos:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," ARRAY INTEGER(aiAnArray;10)\n")),(0,t.kt)("p",null,"Depois, o c\xf3digo a seguir redimensiona o mesmo array para 20 elementos:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"ARRAY INTEGER(aiAnArray;20)\n")),(0,t.kt)("p",null,"Depois, o c\xf3digo a seguir redimensiona o mesmo array para 0 elementos:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"ARRAY INTEGER(aiAnArray;0)\n")),(0,t.kt)("h2",o({},{id:"atribuir-valores-em-arrays"}),"Atribuir valores em arrays"),(0,t.kt)("p",null,"Pode referenciar os elementos em um array usando chaves ({\u2026}). Dentro das chaves se utiliza um n\xfamero para dirigir-se a um elemento concreto; este n\xfamero se denomina n\xfamero de elemento. As linhas abaixo p\xf5e cinco nomes em um array chamado atNames e ent\xe3o exibe-os na janela de alerta:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' ARRAY TEXT(atNames;5)\n atNames{1}:="Richard"\n atNames{2}:="Sarah"\n atNames{3}:="Sam"\n atNames{4}:="Jane"\n atNames{5}:="John"\n For($vlElem;1;5)\n    ALERT("The element #"+String($vlElem)+" is equal to: "+atNames{$vlElem})\n End for\n')),(0,t.kt)("p",null,"Lembre da sintaxe atNames{$vlElem}. Ao inv\xe9s de especificar um literal num\xe9rico como atNames{3}, pode usar uma vari\xe1vel num\xe9rica para indicar a quais elementos de um array se dirige. Using the iteration provided by a loop structure (",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," or ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while"),"), compact pieces of code can address all or part of the elements in an array."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Important:")," Be careful not to confuse the assignment operator (:=) with the comparison operator, equal (=). As opera\xe7\xf5es de atribui\xe7\xe3o e compara\xe7\xe3o s\xe3o bem diferentes."),(0,t.kt)("h3",o({},{id:"atribuindo-um-array-para-outro-array"}),"Atribuindo um array para outro array"),(0,t.kt)("p",null,"Diferente de vari\xe1veis texto ou strings, n\xe3o pode atribuir um array para outro. To copy (assign) an array to another one, use ",(0,t.kt)("inlineCode",{parentName:"p"},"COPY ARRAY"),"."),(0,t.kt)("h2",o({},{id:"usar-o-elemento-zero-de-um-array"}),"Usar o elemento zero de um array"),(0,t.kt)("p",null,"Um array sempre tem um elemento zero. Apesar do elemento zero n\xe3o ser mostrado quando um array for compat\xedvel com um objeto formul\xe1rio, n\xe3o h\xe1 restri\xe7\xf5es (","*",") ao us\xe1-lo com a linguagem."),(0,t.kt)("p",null,"Aqui h\xe1 outro exemplo: se quiser inicializar um objeto formul\xe1rio com um valor texto mas sem estabelecer um valor padr\xe3o. Pode usar o elemento zero do array:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  // method for a combo box or drop-down list  \n  // bound to atName variable array\n Case of\n    :(Form event code=On Load)\n  // Initialize the array (as shown further above)  \n  // But use the element zero\n        ARRAY TEXT(atName;5)\n        atName{0}:=Please select an item"\n        atName{1}:="Text1"\n        atName{2}:="Text2"\n        atName{3}:="Text3"\n        atName{4}:="Text4"\n        atName{5}:="Text5"\n    // Position the array to element 0\n        atName:=0\n End case\n')),(0,t.kt)("p",null,"(","*",") Entretanto, h\xe1 uma excep\xe7\xe3o: em um array tipo List Box o elemento zero se usa internamente para armazenar o valor anterior de um elemento que se est\xe1 editando, n\xe3o \xe9 poss\xedvel para usar no seu contexto particular."),(0,t.kt)("h2",o({},{id:"arrays-de-duas-dimens\xf5es"}),"Arrays de duas dimens\xf5es"),(0,t.kt)("p",null,"Cada comando de declara\xe7\xe3o de comandos pode criar ou redimensionar arrays unidimensionais ou bidimensionais. Exemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," ARRAY TEXT(atTopics;100;50) // Cria um array de texto composto de 100 linhas de 50 colunas\n")),(0,t.kt)("p",null,"Os arrays de duas dimens\xf5es s\xe3o essencialmente objetos de linguagem; n\xe3o podem se mostrar nem imprimir."),(0,t.kt)("p",null,"No exemplo anterior:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"atTopics \xe9 um array de duas dimens\xf5ees"),(0,t.kt)("li",{parentName:"ul"},"atTopics{8}{5} is the 5th element (5th column...) of the 8th row"),(0,t.kt)("li",{parentName:"ul"},"atTopics{20} \xe9 a 20a linha \xe9 por sua vez um array dimens\xe3o"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Size of array(atTopics)")," returns 100, which is the number of rows"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Size of array(atTopics{17})")," returns 50, which the number of columns for the 17th row")),(0,t.kt)("p",null,"No seguinte exemplo, um ponteiro a cada campo de cada tabela do banco de dados se armazena em um array de duas dimens\xf5es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' C_LONGINT($vlLastTable;$vlLastField)\n C_LONGINT($vlFieldNumber)\n  // Create as many rows (empty and without columns) as there are tables\n $vlLastTable:=Get last table number\n ARRAY POINTER(<>apFields;$vlLastTable;0) //2D array with X rows and zero columns\n  // For each table\n For($vlTable;1;$vlLastTable)\n    If(Is table number valid($vlTable))\n       $vlLastField:=Get last field number($vlTable)\n  // Give value of elements\n       $vlColumnNumber:=0\n       For($vlField;1;$vlLastField)\n          If(Is field number valid($vlTable;$vlField))\n             $vlColumnNumber:=$vlColumnNumber+1\n  //Insert a column in a row of the table underway\n             INSERT IN ARRAY(<>apFields{$vlTable};$vlColumnNumber;1)\n  //Assign the "cell" with the pointer\n             <>apFields{$vlTable}{$vlColumnNumber}:=Field($vlTable;$vlField)\n          End if\n       End for\n    End if\n End for\n')),(0,t.kt)("p",null,"Sempre que tiver inicializado este array de duas dimens\xf4es, se pedem obter os ponteiros aos campos de uma tabela concreta da seguinte maneira:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"  // Get the pointers to the fields for the table currently displayed at the screen:\n COPY ARRAY(\u25caapFields{Table(Current form table)};$apTheFieldsIamWorkingOn)\n  // Initialize Boolean and Date fields\n For($vlElem;1;Size of array($apTheFieldsIamWorkingOn))\n    Case of\n       :(Type($apTheFieldsIamWorkingOn{$vlElem}->)=Is date)\n          $apTheFieldsIamWorkingOn{$vlElem}->:=Current date\n       :(Type($apTheFieldsIamWorkingOn{$vlElem}->)=Is Boolean)\n          $apTheFieldsIamWorkingOn{$vlElem}->:=True\n    End case\n End for\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Note:")," As this example suggests, rows of a two-dimensional arrays can be the same size or different sizes."),(0,t.kt)("h2",o({},{id:"arrays-e-mem\xf3ria"}),"Arrays e mem\xf3ria"),(0,t.kt)("p",null,"A diferen\xe7a dos dados que se armazenam no disco mediante tabelas e registros, um array se mant\xe9m sempre na mem\xf3ria em sua totalidade."),(0,t.kt)("p",null,"Por exemplo, se introduzir todos os c\xf3digos postais dos EUA na tabela ","[Zip Codes]",", conteria por volta de 100.000 registros. Al\xe9m disso essa tabela incluiria v\xe1rios campos: o c\xf3digo cep e a cidade, regi\xe3o e estado correspondentes. Se selecionar todos os ceps (zip codes) da Calif\xf3rnia, o motor de banco de dados 4D cria a sele\xe7\xe3o correspondente de registros dentro da tabela ","[Zip Codes]"," e ent\xe3o carrega os registros s\xf3 quando forem necess\xe1rios (ou seja quando forem exibidos ou impressos). Ou seja, voc\xea trabalha com uma s\xe9rie ordenada de valores (do mesmo tipo para cada campo) que \xe9 carregada parcialmente desde o disco \xe0 mem\xf3ria pelo motor do banco de dados 4D."),(0,t.kt)("p",null,"Fazer a mesma coisa com arrays seria imposs\xedvel pelas raz\xf5es abaixo:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Para manter os quatro tipos de informa\xe7\xe3o (c\xf3digo postal, cidade, regi\xe3o e estado) teria que manter quatro arrays grandes na mem\xf3ria."),(0,t.kt)("li",{parentName:"ul"},"Como um array sempre \xe9 mantido na mem\xf3ria inteiramente, teria que manter toda a informa\xe7\xe3o de c\xf3digos postais na mem\xf3ria durante a sess\xe3o inteira, mesmo quando os dados n\xe3o estivessem sendo usados."),(0,t.kt)("li",{parentName:"ul"},"De novo,  como um array \xe9 sempre mantido na mem\xf3ria em sua totalidade, a cada vez que o banco de dados for iniciados, os quatro arrays teriam que ser carregados e ent\xe3o salvos no disco, mesmo se os dados n\xe3o forem usados ou modificados na sess\xe3o de trabalho.")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Conclusion:")," Arrays are intended to hold reasonable amounts of data for a short period of time. Por outro lado, como os arrays s\xe3o mantidos na mem\xf3ria, s\xe3o f\xe1ceis de manejar e r\xe1pidos de manipular."),(0,t.kt)("p",null,"Entretanto, em algumas circunst\xe2ncias, pode precisar trabalhar com arrays que contenham centenas ou milhares de elementos. A tabela abaixo lista as f\xf3rmulas usadas para calcular a quantidade de mem\xf3ria usada para cada tipo de array:"),(0,t.kt)("table",null,(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",o({parentName:"tr"},{align:null}),"Tipo de array"),(0,t.kt)("th",o({parentName:"tr"},{align:null}),"F\xf3rmula para determinar o uso da memoria em bytes"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Blob"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 12 + Soma de tamanho de cada blob")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Par\xe2metros"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(31+n\xfamero de elementos)\\N8")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Date"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 6")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Integer"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 2")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Long Integer"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 4")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Object"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 8 + Soma de tamanho de cada objeto")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Imagem"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 8 + Soma do tamanho de cada imagem")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Ponteiro"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 8 + Soma de tamanho de cada ponteiro")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Real"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 8")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Text"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 20 + (soma da longitude de cada texto) ","*"," 2")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Hora"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 4")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Dois dimens\xf5ees"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"(1+n\xfamero de elementos) ","*"," 16 + Soma do tamanho de cada array")))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Notas:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"O tamanho de um texto em memoria se calcula com esta f\xf3rmula ((Longitude + 1) ","*"," 2)"),(0,t.kt)("li",{parentName:"ul"},"S\xe3o necess\xe1rios alguns bytes adicionais para acompanhar o elemento selecionado, o n\xfamero de elementos, e o pr\xf3prio array.")))}p.isMDXComponent=!0}}]);