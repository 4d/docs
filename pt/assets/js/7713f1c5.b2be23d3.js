"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83762],{603905:(e,a,o)=>{o.d(a,{Zo:()=>m,kt:()=>c});var t=o(667294);function r(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function n(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,t)}return o}function s(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?n(Object(o),!0).forEach((function(a){r(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function p(e,a){if(null==e)return{};var o,t,r=function(e,a){if(null==e)return{};var o,t,r={},n=Object.keys(e);for(t=0;t<n.length;t++)o=n[t],a.indexOf(o)>=0||(r[o]=e[o]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)o=n[t],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=t.createContext({}),l=function(e){var a=t.useContext(i),o=a;return e&&(o="function"==typeof e?e(a):s(s({},a),e)),o},m=function(e){var a=l(e.components);return t.createElement(i.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var o=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=l(o),c=r,h=u["".concat(i,".").concat(c)]||u[c]||d[c]||n;return o?t.createElement(h,s(s({ref:a},m),{},{components:o})):t.createElement(h,s({ref:a},m))}));function c(e,a){var o=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=o.length,s=new Array(n);s[0]=u;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var l=2;l<n;l++)s[l]=o[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},89243:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>m});o(667294);var t=o(603905);function r(){return r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var o=arguments[a];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e},r.apply(this,arguments)}function n(e,a){if(null==e)return{};var o,t,r=function(e,a){if(null==e)return{};var o,t,r={},n=Object.keys(e);for(t=0;t<n.length;t++)o=n[t],a.indexOf(o)>=0||(r[o]=e[o]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)o=n[t],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}const s={id:"parameters",title:"Par\xe2metros"},p=void 0,i={unversionedId:"Concepts/parameters",id:"version-18/Concepts/parameters",title:"Par\xe2metros",description:"Utiliza\xe7\xe3o de par\xe2metros",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-18/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/pt/18/Concepts/parameters",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"parameters",title:"Par\xe2metros"},sidebar:"docs",previous:{title:"P\xe1gina M\xe9todos",permalink:"/docs/pt/18/Concepts/methods"},next:{title:"Objetos e cole\xe7\xf5es compartilhados",permalink:"/docs/pt/18/Concepts/shared"}},l={},m=[{value:"Utiliza\xe7\xe3o de par\xe2metros",id:"utiliza\xe7\xe3o-de-par\xe2metros",level:2},{value:"Express\xf5es suportadas",id:"express\xf5es-suportadas",level:3},{value:"Fun\xe7\xf5es",id:"fun\xe7\xf5es",level:2},{value:"Declara\xe7\xe3o de par\xe2metros",id:"declara\xe7\xe3o-de-par\xe2metros",level:2},{value:"Valores ou refer\xeancias",id:"valores-ou-refer\xeancias",level:2},{value:"Casos particulares: objetos e cole\xe7\xf5es",id:"casos-particulares-objetos-e-cole\xe7\xf5es",level:3},{value:"Par\xe2metros com nomes",id:"par\xe2metros-com-nomes",level:2},{value:"Par\xe2metros opcionais",id:"par\xe2metros-opcionais",level:2},{value:"Indirec\xe7\xe3o de par\xe2metros",id:"indirec\xe7\xe3o-de-par\xe2metros",level:2},{value:"Declara\xe7\xe3o de par\xe2metros gen\xe9ricos",id:"declara\xe7\xe3o-de-par\xe2metros-gen\xe9ricos",level:3}],d={toc:m};function u(e){var{components:a}=e,o=n(e,["components"]);return(0,t.kt)("wrapper",r({},d,o,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h2",r({},{id:"utiliza\xe7\xe3o-de-par\xe2metros"}),"Utiliza\xe7\xe3o de par\xe2metros"),(0,t.kt)("p",null,"\xc9 frequente ter de passar dados para os seus m\xe9todos. Isso \xe9 facilmente feito com par\xe2metros."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Parameters")," (or ",(0,t.kt)("strong",{parentName:"p"},"arguments"),") are pieces of data that a method needs in order to perform its task. Os termos ",(0,t.kt)("em",{parentName:"p"},"par\xe1metros")," e ",(0,t.kt)("em",{parentName:"p"},"argumentos"),' s\xe3o utilizados indiferentemente neste manual. Par\xe2metros tamb\xe9m s\xe3o passados para comandos integrados 4D. Neste exemplo, a stirng "Hello" \xe9 um argumento para o comando integrado ',(0,t.kt)("inlineCode",{parentName:"p"},"ALERT"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Hello")\n')),(0,t.kt)("p",null,"Parameters are passed to methods in the same way. For example, if a project method named DO SOMETHING accepted three parameters, a call to the method might look like this:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"DO SOMETHING(WithThis;AndThat;ThisWay)\n")),(0,t.kt)("p",null,"Os par\xe2metros s\xe3o separados por ponto e v\xedrgula (;). Their value is evaluated at the moment of the call."),(0,t.kt)("p",null,"In the subroutine (the method that is called), the value of each parameter is automatically copied into sequentially numbered local variables: $1, $2, $3, and so on. A numera\xe7\xe3o das vari\xe1veis locais representam a ordem dos par\xe2metros."),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //Code of the method DO SOMETHING\n  //Assuming all parameters are of the text type\n C_TEXT($1;$2;$3)\n ALERT("I received "+$1+" and "+$2+" and also "+$3)\n  //$1 contains the WithThis parameter\n  //$2 contains the AndThat parameter\n  //$3 contains the ThisWay parameter\n')),(0,t.kt)("p",null,"Dentro da subrotina, pode utilizar os par\xe2metros $1, $2... da mesma maneira que utilizaria qualquer outra vari\xe1vel local. Entretanto, no caso de usar comandos que modifiquem o valor da vari\xe1vel passada como par\xe2metro (por exemplo ",(0,t.kt)("inlineCode",{parentName:"p"},"Find in field"),"), os par\xe2metros $1, $2, etc. n\xe3o podem ser utilizardos diretamente. Primeiro deve copi\xe1-los nas vari\xe1veis locais padr\xe3o (por exemplo: ",(0,t.kt)("inlineCode",{parentName:"p"},"$myvar:=$1"),")."),(0,t.kt)("p",null,"Os mesmos princ\xedpios s\xe3o usados quando m\xe9todos forem executados atrav\xe9s de comandos dedicados, por exemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/10!)  \n//passe a data !05/05/10! date as parameter to the SetCalendarDate  \n// in the context of a subform\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Note:")," For a good execution of code, you need to make sure that all ",(0,t.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"$2"),"... parameters are correctly declared within called methods (see ",(0,t.kt)("a",r({parentName:"p"},{href:"#declaring-parameters"}),"Declaring parameters")," below)."),(0,t.kt)("h3",r({},{id:"express\xf5es-suportadas"}),"Express\xf5es suportadas"),(0,t.kt)("p",null,"You can use any ",(0,t.kt)("a",r({parentName:"p"},{href:"/docs/pt/18/Concepts/quick-tour#expression-types"}),"expression")," as parameter, except:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"tabelas"),(0,t.kt)("li",{parentName:"ul"},"arrays")),(0,t.kt)("p",null,"Tables or array expressions can only be passed ",(0,t.kt)("a",r({parentName:"p"},{href:"/docs/pt/18/Concepts/pointer#pointers-as-parameters-to-methods"}),"as reference using a pointer"),"."),(0,t.kt)("h2",r({},{id:"fun\xe7\xf5es"}),"Fun\xe7\xf5es"),(0,t.kt)("p",null,"Os dados podem ser devolvidos pelos m\xe9todos. A method that returns a value is called a function."),(0,t.kt)("p",null,"4D or 4D Plug-in commands that return a value are also called functions."),(0,t.kt)("p",null,"For example, the following line is a statement that uses the built-in function, ",(0,t.kt)("inlineCode",{parentName:"p"},"Length"),", to return the length of a string. As instru\xe7\xf5es p\xf5e o valor devolvido por ",(0,t.kt)("inlineCode",{parentName:"p"},"Length")," em uma vari\xe1vel chamada ",(0,t.kt)("em",{parentName:"p"},"MyLength"),". Esta \xe9 a instru\xe7\xe3o:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'MyLength:=Length("How did I get here?")\n')),(0,t.kt)("p",null,"Qualquer subrotina pode retornar um valor. The value to be returned is put into the local variable ",(0,t.kt)("inlineCode",{parentName:"p"},"$0"),"."),(0,t.kt)("p",null,"For example, the following function, called ",(0,t.kt)("inlineCode",{parentName:"p"},"Uppercase4"),", returns a string with the first four characters of the string passed to it in uppercase:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$0:=Uppercase(Substring($1;1;4))+Substring($1;5)\n")),(0,t.kt)("p",null,"Segue-se um exemplo que utiliza a fun\xe7\xe3o Uppercase4:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'NewPhrase:=Uppercase4("This is good.")\n')),(0,t.kt)("p",null,"In this example, the variable ",(0,t.kt)("em",{parentName:"p"},"NewPhrase")," gets \u201cTHIS is good.\u201d"),(0,t.kt)("p",null,"The function result, ",(0,t.kt)("inlineCode",{parentName:"p"},"$0"),", is a local variable within the subroutine. Pode ser usado como tal dentro da subrotina. For example, in the previous ",(0,t.kt)("inlineCode",{parentName:"p"},"DO SOMETHING")," example, ",(0,t.kt)("inlineCode",{parentName:"p"},"$0")," was first assigned the value of ",(0,t.kt)("inlineCode",{parentName:"p"},"$1"),", then used as parameter to the ",(0,t.kt)("inlineCode",{parentName:"p"},"ALERT")," command. Dentro de la subrotina, pode utilizar ",(0,t.kt)("inlineCode",{parentName:"p"},"$0")," da mesma maneira que utilizaria qualquer outra vari\xe1vel local. \xc9 4D quem devolve o valor de ",(0,t.kt)("inlineCode",{parentName:"p"},"$0")," (como estiver quando a subrotina terminar) ao m\xe9todo chamado."),(0,t.kt)("h2",r({},{id:"declara\xe7\xe3o-de-par\xe2metros"}),"Declara\xe7\xe3o de par\xe2metros"),(0,t.kt)("p",null,"Even if it is not mandatory in ",(0,t.kt)("a",r({parentName:"p"},{href:"/docs/pt/18/Concepts/interpreted-compiled"}),"interpreted mode"),", you must declare each parameter in the called methods to prevent any trouble."),(0,t.kt)("p",null,"In the following example, the ",(0,t.kt)("inlineCode",{parentName:"p"},"OneMethodAmongOthers")," project method declares three parameters:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  // OneMethodAmongOthers Project Method\n  // OneMethodAmongOthers ( Real ; Date { ; Long } )\n  // OneMethodAmongOthers ( Amount ; Date { ; Ratio } )\n\n C_REAL($1) // 1st parameter is of type Real\n C_DATE($2) // 2nd parameter is of type Date\n C_LONGINT($3) // 3rd parameter is of type Long Integer\n")),(0,t.kt)("p",null,"No exemplo abaixo, o m\xe9todo projeto ",(0,t.kt)("inlineCode",{parentName:"p"},"Capitalize"),"  aceita um par\xe2metro texto e devolve um resultado texto:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  // M\xe9todo projeto Mai\xfasculas\n  // Mai\xfasculas( Texto ) -> Texto\n  // Mai\xfasculas( Cadena fuente ) -> String com a primeira letra em mai\xfascula\n\n C_TEXT($0;$1)\n $0:=Uppercase(Substring($1;1;1))+Lowercase(Substring($1;2))\n")),(0,t.kt)("p",null,"A utiliza\xe7\xe3o de comandos tais como ",(0,t.kt)("inlineCode",{parentName:"p"},"New process")," com m\xe9todos processo que aceitem par\xe2metros tamb\xe9m requer que os par\xe2metros se declarem explicitamente no m\xe9todo chamado. Por exemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'C_TEXT($string)\nC_LONGINT($idProc;$int)\nC_OBJECT($obj)\n\n$idProc:=New process("foo_method";0;"foo_process";$string;$int;$obj)\n')),(0,t.kt)("p",null,'Este c\xf3digo pode ser executado em modo compilado s\xf3 se "foo_method" declarar seus par\xe2metros:'),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"//foo_method C_TEXT($1)\nC_LONGINT($2)\nC_OBJECT($3)\n...\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Note:"),' For compiled mode, you can group all local variable parameters for project methods in a specific method with a name starting with "Compiler". Dentro deste m\xe9todo, pode pr\xe9-declarar os par\xe2metros de cada m\xe9todo, por exemplo:'),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_REAL(OneMethodAmongOthers;$1)\n")),(0,t.kt)("p",null,"See ",(0,t.kt)("a",r({parentName:"p"},{href:"/docs/pt/18/Concepts/interpreted-compiled"}),"Interpreted and compiled modes")," page for more information."),(0,t.kt)("p",null,'A declara\xe7\xe3o de par\xe2metros tamb\xe9m \xe9 obrigat\xf3iria nos contextos abaixo (esses contextos n\xe3o s\xe3o compat\xedveis com declara\xe7\xf5es em um m\xe9todo "Compiler"):'),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Database methods For example, the ",(0,t.kt)("inlineCode",{parentName:"li"},"On Web Connection Database Method")," receives six parameters, $1 to $6, of the data type Text. No come\xe7o do m\xe9todo database, tem que escrever (mesmo se todos os par\xe2metros n\xe3o forem usados):")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// On Web Connection C_TEXT($1;$2;$3;$4;$5;$6)\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Triggers The $0 parameter (Longint), which is the result of a trigger, will be typed by the compiler if the parameter has not been explicitly declared. Entretanto, se quiser declar\xe1-lo, deve fazer isso no pr\xf3prio trigger.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Form objects that accept the ",(0,t.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event The $0 parameter (Longint), which is the result of the ",(0,t.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event, is typed by the compiler if the parameter has not been explicitly declared. Entretanto, se quiser fazer a declara\xe7\xe3o, deve fazer isso no m\xe9todo objeto. ",(0,t.kt)("strong",{parentName:"p"},"Nota:")," o compilador n\xe3o inicializa o par\xe2metro $0. Portanto, logo que utilizar o evento formul\xe1rio ",(0,t.kt)("inlineCode",{parentName:"p"},"On Drag Over"),", deve inicializar $0. Por exemplo:"))),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_LONGINT($0)\n If(Form event=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n")),(0,t.kt)("h2",r({},{id:"valores-ou-refer\xeancias"}),"Valores ou refer\xeancias"),(0,t.kt)("p",null,"When you pass a parameter, 4D always evaluates the parameter expression in the context of the calling method and sets the ",(0,t.kt)("strong",{parentName:"p"},"resulting value")," to the $1, $2... local variables in the subroutine (see ",(0,t.kt)("a",r({parentName:"p"},{href:"#using-parameters"}),"Using parameters"),"). As vari\xe1veis locais/par\xe2metros n\xe3o s\xe3o os campos, vari\xe1veis ou express\xf5es realmente passadas pelo m\xe9todo chamada; eles apenas cont\xe9m os valores que foram passados. Since its scope is local, if the value of a parameter is modified in the subroutine, it does not change the value in the calling method. Por exemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Here is some code from the method MY_METHOD DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams" ALERT([People]Name)\n\n    //Here is the code of the method DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n')),(0,t.kt)("p",null,"A caixa de alerta mostrada por ",(0,t.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING"),' dir\xe1 "WILLIAMS" e a caixa de alerta mostrada por ',(0,t.kt)("inlineCode",{parentName:"p"},"MY_METHOD"),' dir\xe1 "williams". O m\xe9todo mudou localmente o valor do par\xe2metro $1, ma isso n\xe3o afeta o valor de campo ',(0,t.kt)("inlineCode",{parentName:"p"},"[People]Name")," passado como par\xe2metro pelo m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"MY_METHOD"),"."),(0,t.kt)("p",null,"H\xe1 duas formas de fazer com que o m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING")," mude o valor de campo:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Ao inv\xe9s de passar o campo para o m\xe9todo, passa um ponteiro para ele, por isso pode escrever:")),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //Esta \xe9 uma parte do c\xf3digo do m\xe9todo MY_METHOD\n DO_SOMETHING(->[People]Name) //Suponha que o valor de [People]Name value seja "williams"\n ALERT([People]Last Name)\n\n  //Este \xe9 o c\xf3digo do m\xe9todo DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n')),(0,t.kt)("p",null,"Aqui \xe9 o par\xe2metro n\xe3o for o campo, mas sim um ponteiro ao mesmo. Portanto, dentro do m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"DO SOMETHING"),", $1 j\xe1 n\xe3o \xe9 o valor do campo mas um ponteiro ao campo. O objeto ",(0,t.kt)("strong",{parentName:"p"},"referenciado"),' por $1 ($1-> no c\xf3digo anterior) \xe9 o campo real. Portanto, mudar o objeto referenciado vai al\xe9m do escopo da subrotina, e o campo real n\xe3o \xe9 afetado. Neste exemplo, as duas caixas de alerta dir\xe3o "WILLIAMS".'),(0,t.kt)("ol",r({},{start:2}),(0,t.kt)("li",{parentName:"ol"},"Ao inv\xe9s de ter o m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"li"},"DO_SOMETHING"),' "fa\xe7a algo", pode reescrever o m\xe9todo para que devolva um valor. Portanto escreveria:')),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Esta \xe9 uma parte do c\xf3digo do m\xe9todo MY_METHO\n [People]Name:=DO_SOMETHING([People]Name) //Suponha que o valor de [People]Name seja "williams"\n ALERT([People]Name)\n\n    //Este \xe9 o c\xf3digo do m\xe9todo DO_SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n')),(0,t.kt)("p",null,'Esta segunda t\xe9cnica de retornar um valor por uma subrotina se chama " utilizar uma fun\xe7\xe3o" \xc9 descrita no par\xe1grafo ',(0,t.kt)("a",r({parentName:"p"},{href:"#functions"}),"Fun\xe7\xf5es"),". This is described in the ",(0,t.kt)("a",r({parentName:"p"},{href:"#functions"}),"Functions")," paragraph."),(0,t.kt)("h3",r({},{id:"casos-particulares-objetos-e-cole\xe7\xf5es"}),"Casos particulares: objetos e cole\xe7\xf5es"),(0,t.kt)("p",null,"Deve prestar aten\xe7\xe3o ao fato de que os tipos de dados Objeto e Cole\xe7\xe3o s\xf3 podem ser manejados atrav\xe9s de uma refer\xeancia (ou seja, um  ",(0,t.kt)("em",{parentName:"p"},"ponteiro")," interno)."),(0,t.kt)("p",null,"Por isso, quando usar esses tipos de dados como par\xe2metros, ",(0,t.kt)("inlineCode",{parentName:"p"},"$1, $2...")," n\xe3o cont\xe9m ",(0,t.kt)("em",{parentName:"p"},"valores")," mas sim ",(0,t.kt)("em",{parentName:"p"},"refer\xeancias"),". A modifica\xe7\xe3o do valor dos par\xe2metros ",(0,t.kt)("inlineCode",{parentName:"p"},"$1, $2...")," dentro da subrotina se propagar\xe1 a qualquer lugar onde se utilize o objeto ou cole\xe7\xe3o fonte. This is the same principle as for ",(0,t.kt)("a",r({parentName:"p"},{href:"/docs/pt/18/Concepts/pointer#pointers-as-parameters-to-methods"}),"pointers"),", except that ",(0,t.kt)("inlineCode",{parentName:"p"},"$1, $2...")," parameters do not need to be dereferenced in the subroutine."),(0,t.kt)("p",null,"Por exemplo, considere o m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"CreatePerson")," que cria um objeto e o envia como par\xe2metro:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n C_OBJECT($person)\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,t.kt)("p",null,"O m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"ChangeAge")," adiciona 10 ao atributo Age do objeto recebido"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  //ChangeAge\n C_OBJECT($1)\n $1.Age:=$1.Age+10\n ALERT(String($1.Age))\n")),(0,t.kt)("p",null,"Quando executar o m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"CreatePerson"),', as duas caixas de alerta dir\xe3o "50" j\xe1 que a mesma refer\xeancia de objeto \xe9 manejada por ambos m\xe9todos.'),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"4D Server:"),' quando s\xe3o passados par\xe2metros entre m\xe9todos que n\xe3o s\xe3o executados na mesma m\xe1quina (utilizando por exemplo a op\xe7\xe3o "Executar no servidor"), as referencias n\xe3o s\xe3o utiliz\xe1veis. Nestes casos, s\xe3o enviadas c\xf3pias dos par\xe2metros de objetos e cole\xe7\xf5es ao inv\xe9s de refer\xeancias.'),(0,t.kt)("h2",r({},{id:"par\xe2metros-com-nomes"}),"Par\xe2metros com nomes"),(0,t.kt)("p",null,"A utiliza\xe7\xe3o de objetos como par\xe2metros permite manejar ",(0,t.kt)("strong",{parentName:"p"},"par\xe2metros com nome"),". Este estilo de programa\xe7\xe3o \xe9 simples, flex\xedvel e f\xe1cil de ler."),(0,t.kt)("p",null,"Por exemplo, utilizando o m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"CreatePerson"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n C_OBJECT($person)\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,t.kt)("p",null,"No m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"ChangeAge")," pode escrever:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n C_OBJECT($1;$para)\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Name+" is "+String($para.Age)+" years old.")\n')),(0,t.kt)("p",null,"Isso oferece uma poderosa maneira de definir ",(0,t.kt)("a",r({parentName:"p"},{href:"#optional-parameters"}),"par\xe2metros opcionais")," (ver tamb\xe9m abaixo). Para manejar os par\xe2metros que faltam, pode:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"veja se todos os par\xe2metros esperados s\xe3o fornecidos comparando-os com o valor ",(0,t.kt)("inlineCode",{parentName:"li"},"Null"),", ou"),(0,t.kt)("li",{parentName:"ul"},"pr\xe9-definir os valores dos par\xe2metros, ou"),(0,t.kt)("li",{parentName:"ul"},"us\xe1-los como valores vazios.")),(0,t.kt)("p",null,"No m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"ChangeAge")," anterior, as propriedades Age e Name s\xe3o obrigat\xf3rias e produzir\xe3o erross se faltar\xe3o. Para evitar isso, pode escrever:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n C_OBJECT($1;$para)\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,t.kt)("p",null,'Ambos par\xe2metros s\xe3o opcionais: se n\xe3o forem preenchidos, o resultado ser\xe1 "\xe9 10 anos de idade", mas nenhum erro ser\xe1 gerado.'),(0,t.kt)("p",null,"Finalmente, com par\xe2metros com nome, a manuten\xe7\xe3o ou a reprodu\xe7\xe3o das aplica\xe7\xf5es \xe9 muito simples e seguro. Imagine que depois perceba de que adicionar 10 anos n\xe3o funciona sempre. You need another parameter to set how many years to add. You write: Escreva: Escreve:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$person:=New object("Name";"Smith";"Age";40;"toAdd";10)\nChangeAge($person)\n\n//ChangeAge\nC_OBJECT($1;$para)\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,t.kt)("p",null,"N\xe3o precisar\xe1 mudar seu c\xf3digo existente. Sempre funcionar\xe1 como na vers\xe3o anterior, mas se for necess\xe1rio, \xe9 poss\xedvel usar outro valor diferente de 10 anos."),(0,t.kt)("p",null,"Com vari\xe1veis com nome, qualquer par\xe2metro pode ser opcional. No exemplo acima, todos os par\xe2metros s\xe3o opcionais e qualquer pode ser dado em qualquer ordem."),(0,t.kt)("h2",r({},{id:"par\xe2metros-opcionais"}),"Par\xe2metros opcionais"),(0,t.kt)("p",null,"No manual ",(0,t.kt)("em",{parentName:"p"},"Linguagem de 4D"),", os caracteres { } (chaves) indicam par\xe2metros opcionais. Por exemplo, ",(0,t.kt)("inlineCode",{parentName:"p"},"ALERT (message{; okButtonTitle})")," significa que o par\xe2metro ",(0,t.kt)("em",{parentName:"p"},"okButtonTitle")," pode omitir o chamado ao comando. Pode fazer a chamada de duas maneiras:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Are you sure?";"Yes I am") //2 parameters ALERT("Time is over") //1 parameter\n')),(0,t.kt)("p",null,"4D project methods also accept such optional parameters, starting from the right. The issue with optional parameters is how to handle the case where some of them are missing in the called method - it should never produce an error. A good practice is to assign default values to unused parameters."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"When optional parameters are needed in your methods, you might also consider using ",(0,t.kt)("a",r({parentName:"p"},{href:"#named-parameters"}),"Named parameters")," which provide a flexible way to handle variable numbers of parameters.")),(0,t.kt)("p",null,"Utilizando o comando ",(0,t.kt)("inlineCode",{parentName:"p"},"Count parameters")," desde dentro do m\xe9todo chamado, pode detectar o n\xfamero real de par\xe2metros e realizar diferentes opera\xe7\xf5es dependendo do que tenha recebido."),(0,t.kt)("p",null,"O exemplo abaixo mostra uma mensagem de texto e pode inserir o texto em um documento no disco ou em uma \xe1rea de 4D Write Pro:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// APPEND TEXT Project Method\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n\n C_TEXT($1;$2)\n C_OBJECT($3)\n\n ALERT($1)\n If(Count parameters>=3)\n    WP SET TEXT($3;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($2;$1)\n    End if\n End if\n")),(0,t.kt)("p",null,"Depois de adicionar este m\xe9todo projeto a sua aplica\xe7\xe3o, pode escrever:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'APPEND TEXT(vtSomeText) //Will only display the  message APPEND TEXT(vtSomeText;$path) //Displays text message and appends it to document at $path APPEND TEXT(vtSomeText;"";$wpArea) //Displays text message and writes it to $wpArea\n')),(0,t.kt)("h2",r({},{id:"indirec\xe7\xe3o-de-par\xe2metros"}),"Indirec\xe7\xe3o de par\xe2metros"),(0,t.kt)("p",null,"4D project methods accept a variable number of parameters of the same type, starting from the right. This principle is called ",(0,t.kt)("strong",{parentName:"p"},"parameter indirection"),". Using the ",(0,t.kt)("inlineCode",{parentName:"p"},"Count parameters")," command you can then address those parameters with a ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for")," loop and the parameter indirection syntax."),(0,t.kt)("p",null,"In the following example, the project method ",(0,t.kt)("inlineCode",{parentName:"p"},"SEND PACKETS")," accepts a time parameter followed by a variable number of text parameters:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  //SEND PACKETS Project Method\n  //SEND PACKETS ( Time ; Text { ; Text2... ; TextN } )\n  //SEND PACKETS ( docRef ; Data { ; Data2... ; DataN } )\n\n C_TIME($1)\n C_TEXT(${2})\n C_LONGINT($vlPacket)\n\n For($vlPacket;2;Count parameters)\n    SEND PACKET($1;${$vlPacket})\n End for\n")),(0,t.kt)("p",null,"A indire\xe7\xe3o de par\xe2metros se gerencia melhor se respeitar a conven\xe7\xe3o abaixo: se s\xf3 alguns dos par\xe2metros forem endere\xe7ados por indire\xe7\xe3o, devem ser passados depois dos outros. Within the method, an indirection address is formatted: ${$i}, where $i is a numeric variable. ${$i} \xe9 designado por ",(0,t.kt)("strong",{parentName:"p"},"par\xe2metro gen\xe9rico"),"."),(0,t.kt)("p",null,"For example, consider a function that adds values and returns the sum formatted according to a format that is passed as a parameter. Cada vez que chamar a esse m\xe9todo, o n\xfamero de valores a somar pode variar. Devemos passar os valores como par\xe2metros ao m\xe9todo e o formato em forma de string dos caracteres. O n\xfamero de valores pode variar de chamada a chamada."),(0,t.kt)("p",null,"Esta fun\xe7\xe3o \xe9 chamada da seguinte forma:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' Result:=MySum("##0.00";125,2;33,5;24)\n\n')),(0,t.kt)("p",null,"In this case, the calling method will get the string \u201c182.70\u201d, which is the sum of the numbers, formatted as specified. The function's parameters must be passed in the correct order: first the format and then the values."),(0,t.kt)("p",null,"Aqui est\xe1 a fun\xe7\xe3o, denominada ",(0,t.kt)("inlineCode",{parentName:"p"},"MySum"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"})," $Sum:=0\n For($i;2;Count parameters)\n    $Sum:=$Sum+${$i}\n End for\n $0:=String($Sum;$1)\n")),(0,t.kt)("p",null,"Esta fun\xe7\xe3o pode agora ser chamada de v\xe1rias formas:"),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' Result:=MySum("##0.00";125,2;33,5;24)\n Result:=MySum("000";1;18;4;23;17)\n')),(0,t.kt)("h3",r({},{id:"declara\xe7\xe3o-de-par\xe2metros-gen\xe9ricos"}),"Declara\xe7\xe3o de par\xe2metros gen\xe9ricos"),(0,t.kt)("p",null,"Da mesma forma que com outras vari\xe1veis locais, n\xe3o \xe9 obrigat\xf3rio declarar os par\xe2metros gen\xe9ricos mediante uma diretiva de compilador. Entretanto \xe9 recomendado que se evite qualquer ambiguidade. Para declarar estes par\xe2metros, se utiliza uma diretriz do compilador \xe0 qual se passa ${N} como par\xe2metro, onde N especifica o primeiro par\xe2metro gen\xe9rico."),(0,t.kt)("pre",null,(0,t.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_LONGINT(${4})\n")),(0,t.kt)("p",null,"This command means that starting with the fourth  parameter (included), the method can receive a variable number of parameters of longint type. $1, $2 e $3 podem ser de qualquer tipo de dados. Entretanto, se usar $2 por indire\xe7\xe3o, o tipo de dados usados ser\xe1 do tipo gen\xe9rico. Thus, it will be of the data type Longint, even if for you it was, for instance, of the data type Real."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Note:")," The number in the declaration has to be a constant and not a variable."))}u.isMDXComponent=!0}}]);