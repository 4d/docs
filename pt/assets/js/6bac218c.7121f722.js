"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[94780],{3905:(e,a,o)=>{o.d(a,{Zo:()=>d,kt:()=>c});var n=o(67294);function t(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function r(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?r(Object(o),!0).forEach((function(a){t(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function i(e,a){if(null==e)return{};var o,n,t=function(e,a){if(null==e)return{};var o,n,t={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],a.indexOf(o)>=0||(t[o]=e[o]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var s=n.createContext({}),p=function(e){var a=n.useContext(s),o=a;return e&&(o="function"==typeof e?e(a):l(l({},a),e)),o},d=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var o=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(o),c=t,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return o?n.createElement(k,l(l({ref:a},d),{},{components:o})):n.createElement(k,l({ref:a},d))}));function c(e,a){var o=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=o.length,l=new Array(r);l[0]=u;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var p=2;p<r;p++)l[p]=o[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},86460:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});o(67294);var n=o(3905);function t(){return t=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var o=arguments[a];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},t.apply(this,arguments)}function r(e,a){if(null==e)return{};var o,n,t=function(e,a){if(null==e)return{};var o,n,t={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],a.indexOf(o)>=0||(t[o]=e[o]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}const l={id:"control-flow",title:"Fluxo de controlo"},i=void 0,s={unversionedId:"Concepts/control-flow",id:"version-20/Concepts/control-flow",title:"Fluxo de controlo",description:"Independentemente da simplicidade ou da complexidade de um m\xe9todo, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es dentro do m\xe9todo. H\xe1 tr\xeas tipos de estruturas:",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-20/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/pt/20/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(20)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20",frontMatter:{id:"control-flow",title:"Fluxo de controlo"},sidebar:"docs",previous:{title:"Comandos",permalink:"/docs/pt/20/Concepts/commands"},next:{title:"Gest\xe3o de erros",permalink:"/docs/pt/20/Concepts/error-handling"}},p={},d=[{value:"If... Else... End if",id:"if-else-end-if",level:2},{value:"Exemplo",id:"exemplo",level:4},{value:"Case of... Else... End case",id:"case-of-else-end-case",level:2},{value:"Exemplo",id:"exemplo-1",level:4},{value:"While... End while",id:"while-end-while",level:2},{value:"Exemplo",id:"exemplo-2",level:4},{value:"Repeat... Until",id:"repeat-until",level:2},{value:"Exemplo",id:"exemplo-3",level:4},{value:"For...End for",id:"forend-for",level:2},{value:"Exemplos b\xe1sicos",id:"exemplos-b\xe1sicos",level:4},{value:"Vari\xe1vel contador",id:"vari\xe1vel-contador",level:3},{value:"Vari\xe1vel contador decrescente",id:"vari\xe1vel-contador-decrescente",level:4},{value:"Incrementar a vari\xe1vel do contador em mais de um",id:"incrementar-a-vari\xe1vel-do-contador-em-mais-de-um",level:4},{value:"Optimizing the execution of the For... End for loops",id:"optimizing-the-execution-of-the-for-end-for-loops",level:4},{value:"Compara\xe7\xe3o de estruturas de loop",id:"compara\xe7\xe3o-de-estruturas-de-loop",level:3},{value:"Nested For... End for looping structures",id:"nested-for-end-for-looping-structures",level:3},{value:"For each... End for each",id:"for-each-end-for-each",level:2},{value:"Loop atrav\xe9s da cole\xe7\xe3o",id:"loop-atrav\xe9s-da-cole\xe7\xe3o",level:3},{value:"Exemplo",id:"exemplo-4",level:4},{value:"Loop nas sele\xe7\xf5es de entidades",id:"loop-nas-sele\xe7\xf5es-de-entidades",level:3},{value:"Exemplo",id:"exemplo-5",level:4},{value:"Loops nas propriedades de objetos",id:"loops-nas-propriedades-de-objetos",level:3},{value:"Exemplo",id:"exemplo-6",level:4},{value:"Par\xe2metros begin / end",id:"par\xe2metros-begin--end",level:3},{value:"Exemplo",id:"exemplo-7",level:4},{value:"Condi\xe7\xf5es Until e While",id:"condi\xe7\xf5es-until-e-while",level:3},{value:"Exemplo",id:"exemplo-8",level:4},{value:"break e continue",id:"break-e-continue",level:2},{value:"break",id:"break",level:3},{value:"Exemplo",id:"exemplo-9",level:4},{value:"continue",id:"continue",level:3},{value:"return {expression}",id:"return-expression",level:2},{value:"Exemplo",id:"exemplo-10",level:4}],m={toc:d};function u(e){var{components:a}=e,o=r(e,["components"]);return(0,n.kt)("wrapper",t({},m,o,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Independentemente da simplicidade ou da complexidade de um m\xe9todo, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es dentro do m\xe9todo. H\xe1 tr\xeas tipos de estruturas:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Sequencial"),": uma estrutura sequencial \xe9 uma estrutura simples e linear. Uma sequ\xeancia \xe9 uma s\xe9rie de senten\xe7as que 4D executa uma atr\xe1s da outra, da primera \xe0 \xfaltima. Uma instru\xe7\xe3o de uma linha, utilizada frequentemente para os m\xe9todos dos objetos, \xe9 o caso mais simples de uma estrutura sequencial. Por exemplo: ",(0,n.kt)("inlineCode",{parentName:"p"},"[People]lastName:=Uppercase([People]lastName)"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",t({parentName:"strong"},{href:"Concepts/cf_branching.md"}),"Branching")),": uma estrutura de bifurca\xe7\xe3o permite que os m\xe9todos provem uma condi\xe7\xe3o e tomem caminhos alternativos, dependendo do resultado. A condi\xe7\xe3o \xe9 uma express\xe3o booleana, uma express\xe3o que avalia TRUE ou FALSE Uma estrutura condicional e a estrutura ",(0,n.kt)("inlineCode",{parentName:"p"},"If... Uma estrutura condicional e a estrutura <code>If... Else... End if"),", que dirige o fluxo do programa ao longo de um dos dois caminhos. A outra estrutura condicional \xe9 a estrutura ",(0,n.kt)("inlineCode",{parentName:"p"},"Case of... End case")," que direciona fluxo de programa para um de muitas caminhos.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",t({parentName:"strong"},{href:"Concepts/cf_looping.md"}),"Bucle")),": quando se escrevem m\xe9todos, \xe9 muito comum descobrir que se necessita que uma sequ\xeancia de senten\xe7as se repita um n\xfamero de vezes. Para lidar com esta necessidade, a linguagem 4D oferece as estruturas de loop abaixo:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",t({parentName:"li"},{href:"#whileend-while"}),(0,n.kt)("inlineCode",{parentName:"a"},"While... End while"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",t({parentName:"li"},{href:"#repeatuntil"}),(0,n.kt)("inlineCode",{parentName:"a"},"Repeat... Until"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",t({parentName:"li"},{href:"#forend-for"}),(0,n.kt)("inlineCode",{parentName:"a"},"For...End for"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",t({parentName:"li"},{href:"#for-eachend-for-each"}),(0,n.kt)("inlineCode",{parentName:"a"},"For each... End for each")))))),(0,n.kt)("p",null,"Os loops s\xe3o controlados de duas maneiras: ou fazem loop at\xe9 que uma condi\xe7\xe3o seja satisfeita, ou fazem loop um n\xfamero especificado de vezes. Cada estrutura de looping pode ser usada de qualquer forma, mas loops",(0,n.kt)("inlineCode",{parentName:"p"},"While"),"  e ",(0,n.kt)("inlineCode",{parentName:"p"},"Repeat")," s\xe3o mais apropriados para repetir at\xe9 que uma condi\xe7\xe3o seja satisfeita, e loops ",(0,n.kt)("inlineCode",{parentName:"p"},"For")," s\xe3o mais apropriados para looping um n\xfamero especificado de vezes. ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," permite misturar ambas as formas e foi concebido para fazer loop dentro de objectos e colec\xe7\xf5es."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Nota:"),' 4D permite incorporar estruturas de programa\xe7\xe3o at\xe9 uma "profundidade" de 512 n\xedveis.'),(0,n.kt)("h2",t({},{id:"if-else-end-if"}),"If... Else... End if"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"If... Else... End if")," control flow structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n    statement(s)\n End if\n")),(0,n.kt)("p",null,"Note que a parte ",(0,n.kt)("inlineCode",{parentName:"p"},"Else")," \xe9 opcional; pode escrever:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n End if\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"If... Else... End if")," structure lets your method choose between two actions, depending on whether a test (a Boolean expression) is TRUE or FALSE. Quando a express\xe3o Booleana for TRUE, s\xe3o executadas as declara\xe7\xf5es que seguem imediatamente ao teste. Se a express\xe3o Booleana for FALSE, s\xe3o executadas as declara\xe7\xf5es que seguem a linha Else. A declara\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"p"},"Else")," \xe9 opcional; se omitir Else, a execu\xe7\xe3o continua com a primeira instru\xe7\xe3o (se houver) que seguir ",(0,n.kt)("inlineCode",{parentName:"p"},"End if"),"."),(0,n.kt)("p",null,"Note que a express\xe3o booleana \xe9 sempre avaliada completamente. Considere particularmente o teste abaixo:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," If(MethodA & MethodB)\n    ...\n End if\n")),(0,n.kt)("p",null,"The expression is TRUE only if both methods are TRUE. Entretanto, mesmo se ",(0,n.kt)("em",{parentName:"p"},"MethodA")," devolver  FALSE, 4D ainda iria avaliar ",(0,n.kt)("em",{parentName:"p"},"MethodB"),", o que seria uma perda de tempo. Nesse caso, \xe9 mais interessante usar uma estrutra como:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," If(MethodA)\n    If(MethodB)\n       ...\n    End if\n End if\n")),(0,n.kt)("p",null,"O resultado \xe9 parecido mas o ",(0,n.kt)("em",{parentName:"p"},"MethodB")," \xe9 avaliado somente se necess\xe1rio."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Note:")," The ",(0,n.kt)("a",t({parentName:"p"},{href:"/docs/pt/20/Concepts/operators#ternary-operator"}),"ternary operator")," allows writing one-line conditional expressions and can replace a full sequence of If..Else statements.")),(0,n.kt)("h4",t({},{id:"exemplo"}),"Exemplo"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),'  // Ask the user to enter a name\n $Find:=Request(Type a name)\n If(OK=1)\n    QUERY([People];[People]LastName=$Find)\n Else\n    ALERT("You did not enter a name.")\n End if\n End if\n End if \n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Dica:")," A ramifica\xe7\xe3o pode ser realizada sem que as instru\xe7\xf5es sejam executadas em um caso ou no outro. Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n Else\n    statement(s)\n End if\n")),(0,n.kt)("p",null,"ou :"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n End if\n")),(0,n.kt)("h2",t({},{id:"case-of-else-end-case"}),"Case of... Else... End case"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Case of... Else... End case")," control flow structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n\n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,n.kt)("p",null,"Note que a parte ",(0,n.kt)("inlineCode",{parentName:"p"},"Else")," \xe9 opcional; pode escrever:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n\n    :(Boolean_Expression)\n       statement(s)\n End case\n")),(0,n.kt)("p",null,"As with the ",(0,n.kt)("inlineCode",{parentName:"p"},"If... End if")," structure, the ",(0,n.kt)("inlineCode",{parentName:"p"},"Case of... End case")," structure also lets your method choose between alternative actions. Unlike the ",(0,n.kt)("inlineCode",{parentName:"p"},"If... End")," if structure, the ",(0,n.kt)("inlineCode",{parentName:"p"},"Case of... End case")," structure can test a reasonable unlimited number of Boolean expressions and take action depending on which one is TRUE."),(0,n.kt)("p",null,"Cada express\xe3o booleana \xe9 precedida de dois pontos (",(0,n.kt)("inlineCode",{parentName:"p"},":"),"). A combina\xe7\xe3o dos dois pontos e da express\xe3o booleana \xe9 chamada de um caso. Por exemplo, a linha abaixo \xe9 um caso:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),":(bValidate=1)\n")),(0,n.kt)("p",null,"S\xf3 s\xe3o executadas as instru\xe7\xf5es que seguem o primeiro caso TRUE (at\xe9 o pr\xf3ximo caso). Se nenhum dos casos for TRUE, nenhuma das instru\xe7\xf5es ser\xe1 executada (se nenhuma parte ",(0,n.kt)("inlineCode",{parentName:"p"},"Else")," for incluida)."),(0,n.kt)("p",null,"Pode incluir uma instru\xe7\xe3o Else depois do \xfaltimo caso. Se todos os casos forem FALSE, as instru\xe7\xf5es que seguem ",(0,n.kt)("inlineCode",{parentName:"p"},"Else")," ser\xe3o executadas."),(0,n.kt)("h4",t({},{id:"exemplo-1"}),"Exemplo"),(0,n.kt)("p",null,"Esse exemplo testa uma vari\xe1vel num\xe9rica e exibe uma caixa de alerta com uma apalavra:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),' Case of\n    :(vResult=1) //Test if the number is 1\n       ALERT("One.") //Se for 1, mostrar um alerta\n    :(vResult=2) //Testar se o n\xfamero \xe9 2\n       ALERT("Two.") //Se for 2, exibe um alerta\n    :(vResult=3) //Testa se o n\xfamero \xe9 3\n       ALERT("Three.") //Se for 3, exibe um alerta\n    Else //Se n\xe3o for 1, 2, ou 3, exibe um alerta\n       ALERT("It was not one, two, or three.")\n //statement(s)\n End case //If it is 2, display an alert\n    :(vResult=3) //Test if the number is 3\n       ALERT("Three.") //If it is 3, display an alert\n    Else //If it is not 1, 2, or 3, display an alert\n       ALERT("It was not one, two, or three.")\n //statement(s)\n End case\n')),(0,n.kt)("p",null,"For comparison, here is the ",(0,n.kt)("inlineCode",{parentName:"p"},"If... Else... End if")," version of the same method:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),' If(vResult=1) //Test if the number is 1\n    ALERT("One.") If(vResult=1) //Test if the number is 1\n    ALERT("One.") //If it is 1, display an alert\n Else\n    If(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    Else\n       If(vResult=3) //Test if the number is 3\n          ALERT("Three.") //If it is 3, display an alert\n       Else //If it is not 1, 2, or 3, display an alert\n          ALERT("It was not one, two, or three.")\n       End if\n    End if\n End if //If it is 2, display an alert\n    Else\n       If(vResult=3) //Test if the number is 3\n          ALERT("Three.") //If it is 3, display an alert\n       Else //If it is not 1, 2, or 3, display an alert\n          ALERT("It was not one, two, or three.")\n       End if\n    End if\n End if\n')),(0,n.kt)("p",null,"Remember that with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Case of... Else... End case")," structure, only the first TRUE case is executed. Mesmo se dois ou mais casos forem TRUE, s\xf3 as instru\xe7\xf5es que seguirem o primeiro caso TRUE ser\xe3o executadas."),(0,n.kt)("p",null,"Dessa maneira, quando quiser implementar testes hier\xe1rquicos, deve garantir que as declara\xe7\xf5es de condi\xe7\xe3o que estejam mais abaixo no esquema hier\xe1rquico apare\xe7am primeiro na sequ\xeancia de testes. Por exemplo, o teste para a presen\xe7a da condition1 cobre o teste para a preen\xe7a de condition1&condition2 e portanto deveria estar localizada por \xfaltimo na sequ\xeancia de testes. Por exemplo, o c\xf3digo abaixo nunca ter\xe1 sua \xfaltima condi\xe7\xe3o detectada:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Case of\n    :((vResult=1) & (vCondition#2)) //this case will be detected first\n       ... //statement(s)\n    :(vResult=1)\n       ...\n")),(0,n.kt)("p",null,'No c\xf3digo anterior, a presen\xe7a da segunda condi\xe7\xe3o n\xe3o \xe9 detectada, j\xe1 que o teste "vResult=1" ramifica o c\xf3digo antes de qualquer outro teste. Para que o c\xf3digo funcione corretamente, pode escrev\xea-lo assim:'),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),' Case of\n    :(vResult=1) //Test if the number is 1\n       ALERT("One.") //If it is 1, display an alert\n    :(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    :(vResult=3) //Test if the number is 3\n       ALERT("Three.") //If it is 3, display an alert\n    Else //If it is not 1, 2, or 3, display an alert\n       ALERT("It was not one, two, or three.")\n End case\n')),(0,n.kt)("p",null,"Al\xe9m disso, se quiser implementar teste hier\xe1rquico, pode considerar usar um c\xf3digo hier\xe1rquico."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Dica:")," a ramifica\xe7\xe3o|branching pode ser feita sem que as instru\xe7\xf5es sejam executados em um caso ou outro Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva: Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva: Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva: Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva: Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n      ...\n\n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,n.kt)("p",null,"ou :"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       ...\n\n    :(Boolean_Expression)\n       statement(s)\n    Else\n End case\n")),(0,n.kt)("p",null,"ou :"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Case of\n    Else\n       statement(s)\n End case\n")),(0,n.kt)("h2",t({},{id:"while-end-while"}),"While... End while"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"While... End while")," control flow structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," While(Boolean_Expression)\n    statement(s)\n    {break}  \n    {continue}\n End while\n")),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"While...End while")," loop executes the statements inside the loop as long as the Boolean expression is TRUE. Comprova a express\xe3o booleana ao in\xedcio do loop e n\xe3o entra no loop se a express\xe3o for FALSE."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,n.kt)("a",t({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,n.kt)("p",null,"It is common to initialize the value tested in the Boolean expression immediately before entering the ",(0,n.kt)("inlineCode",{parentName:"p"},"While... End while")," loop. Initializing the value means setting it to something appropriate, usually so that the Boolean expression will be TRUE and ",(0,n.kt)("inlineCode",{parentName:"p"},"While... End while")," executes the loop."),(0,n.kt)("p",null,"O valor da express\xe3o booleana deve poder ser modificado por um elemento dentro do loop, do contr\xe1rio ser\xe1 executado indefinidamente. O pr\xf3ximo loop continua para sempre porque ",(0,n.kt)("em",{parentName:"p"},"NeverStop")," sempre ser\xe1 TRUE:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," NeverStop:=True\n While(NeverStop)\n End while\n")),(0,n.kt)("p",null,"Se voc\xea se encontrar em uma situa\xe7\xe3o desse tipo, na qual um m\xe9todo fica executando de forma descontrolada, pode usar as fun\xe7\xf5es de rastreamento para parar o loop e rastrear o problema. Para saber mais sobre o rastreio de um m\xe9todo veja a p\xe1gina ",(0,n.kt)("a",t({parentName:"p"},{href:"/docs/pt/20/Concepts/error-handling"}),"Error handling"),"."),(0,n.kt)("h4",t({},{id:"exemplo-2"}),"Exemplo"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),' CONFIRM("Add a new record?") //o usu\xe1rio quer adicionar um registro? CONFIRM("Add a new record?") //The user wants to add a record?\n While(OK=1) //Loop enquanto o usu\xe1rio quiser\n    ADD RECORD([aTable]) //Adiciona um novo registro\n End while //O loop sempre termina com End while\n')),(0,n.kt)("p",null,"Nesse exemplo, o valor da vari\xe1vel sistema ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," \xe9 estabelecida pelo comando ",(0,n.kt)("inlineCode",{parentName:"p"},"CONFIRM")," antes de que inicia o loop. Se o usu\xe1rio clicar no bot\xe3o ",(0,n.kt)("strong",{parentName:"p"},"OK")," da caixa de di\xe1logo de confirma\xe7\xe3o, a vari\xe1vel do sistema ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," toma o valor 1 e se inicia o loop. Sen\xe3o, a vari\xe1vel de sistema ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," toma o valor 0 e se omite o loop. Quando iniciar o loop, o comando ",(0,n.kt)("inlineCode",{parentName:"p"},"ADD RECORD")," permite continuar a execu\xe7\xe3o do loop porque se define a vari\xe1vel sistema ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," em 1 quando o usu\xe1rio salvar o registro. Quando o usu\xe1rio cancelar (n\xe3o salvar) o \xfaltimo registro, a vari\xe1vel do sistema ",(0,n.kt)("inlineCode",{parentName:"p"},"OK")," \xe9 estabelecida como 0 e o loop para."),(0,n.kt)("h2",t({},{id:"repeat-until"}),"Repeat... Until"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Repeat... Until")," control flow structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),"Repeat\n    statement(s)\n    {break}  \n    {continue}\nUntil(Boolean_Expression)\n")),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is similar to a ",(0,n.kt)("a",t({parentName:"p"},{href:"/docs/pt/20/Concepts/control-flow#whileend-while"}),"While...End while")," loop, except that it tests the Boolean expression after the loop rather than before. Thus, a ",(0,n.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop always executes the loop once, whereas if the Boolean expression is initially False, a ",(0,n.kt)("inlineCode",{parentName:"p"},"While...End while")," loop does not execute the loop at all."),(0,n.kt)("p",null,"The other difference with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is that the loop continues until the Boolean expression is TRUE."),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,n.kt)("a",t({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,n.kt)("h4",t({},{id:"exemplo-3"}),"Exemplo"),(0,n.kt)("p",null,"Compare the following example with the example for the ",(0,n.kt)("inlineCode",{parentName:"p"},"While... End while")," loop. Lembre que a express\xe3o booleana n\xe3o precisa ser iniciada - n\xe3o h\xe1 um comando ",(0,n.kt)("inlineCode",{parentName:"p"},"CONFIRM")," para inicializar a vari\xe1vel ",(0,n.kt)("inlineCode",{parentName:"p"},"OK"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," Repeat\n    ADD RECORD([aTable])\n Until(OK=0)\n")),(0,n.kt)("h2",t({},{id:"forend-for"}),"For...End for"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"For... End for")," control flow structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),"For(Counter_Variable;Start_Expression;End_Expression{;Increment_Expression})\n   statement(s)\n    {break}  \n    {continue}\nEnd for\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"For... End for")," loop is a loop controlled by a counter variable:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The counter variable ",(0,n.kt)("em",{parentName:"li"},"Counter_Variable")," is a numeric variable (Real or Long Integer) that the ",(0,n.kt)("inlineCode",{parentName:"li"},"For... End for")," loop initializes to the value specified by ",(0,n.kt)("em",{parentName:"li"},"Start_Expression"),"."),(0,n.kt)("li",{parentName:"ul"},"Cada vez que se executa o loop, a vari\xe1vel do contador se incrementa no valor especificado no valor opcional ",(0,n.kt)("em",{parentName:"li"},"Increment_Expression"),". Se n\xe3o especificar ",(0,n.kt)("em",{parentName:"li"},"Increment_Expression"),", a vari\xe1vel contadora \xe9 incrementada por um (1), que \xe9 o padr\xe3o."),(0,n.kt)("li",{parentName:"ul"},"Quando a vari\xe1vel contador passar o valor ",(0,n.kt)("em",{parentName:"li"},"End_Expression")," da\xed o loop para.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Importante:")," as express\xf5es num\xe9ricas ",(0,n.kt)("em",{parentName:"p"},"Start_Expression"),", ",(0,n.kt)("em",{parentName:"p"},"End_Expression")," e ",(0,n.kt)("em",{parentName:"p"},"Increment_Expression")," s\xe3o avaliadas apenas uma vez no come\xe7o do loop. Se essas express\xf5es forem vari\xe1veis, mudar uma deles dentro do loop n\xe3o vai afetar o loop."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Dicas:")," Entretanto, para fins especiais, pode mudar o valor da vari\xe1vel ",(0,n.kt)("em",{parentName:"p"},"Counter_Variable")," dentro do loop; isso afetar\xe1 o loop."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Geralmente ",(0,n.kt)("em",{parentName:"li"},"Start_Expression")," pe menor que ",(0,n.kt)("em",{parentName:"li"},"End_Expression"),"."),(0,n.kt)("li",{parentName:"ul"},"Se ",(0,n.kt)("em",{parentName:"li"},"Start_Expression")," e ",(0,n.kt)("em",{parentName:"li"},"End_Expression")," forem iguais, o loop se executar\xe1 s\xf3 uma vez."),(0,n.kt)("li",{parentName:"ul"},"Se ",(0,n.kt)("em",{parentName:"li"},"Start_Expression")," for maior que ",(0,n.kt)("em",{parentName:"li"},"End_Expression"),", o loop n\xe3o vai executar a n\xe3o ser que especifique uma ",(0,n.kt)("em",{parentName:"li"},"Increment_Expression")," negativa. Ver os exemplos.")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,n.kt)("a",t({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,n.kt)("h4",t({},{id:"exemplos-b\xe1sicos"}),"Exemplos b\xe1sicos"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"O seguinte exemplo executa 100 itera\xe7\xf5es:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faz algo\n End for\n")),(0,n.kt)("ol",t({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos no array anArray:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //Fazer algo com o elemento\n    anArray{$vlElem}:=...\n End for\n")),(0,n.kt)("ol",t({},{start:3}),(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre todos os caracteres do texto vtSomeText:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For($vlChar;1;Length(vtSomeText))\n  //Faz algo com o caractere se for uma TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,n.kt)("ol",t({},{start:4}),(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre os registros selecionados para a tabela ","[aTable]",":")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," FIRST RECORD([aTable])\n For($vlRecord;1;Records in selection([aTable]))\n  //Faz algo com o registro\n    SEND RECORD([aTable])\n  //...\n  //Vai para o pr\xf3ximo registro\n    NEXT RECORD([aTable])\n End for\n")),(0,n.kt)("p",null,"Most of the ",(0,n.kt)("inlineCode",{parentName:"p"},"For...End for")," loops you will write in your projects will look like the ones listed in these examples."),(0,n.kt)("h3",t({},{id:"vari\xe1vel-contador"}),"Vari\xe1vel contador"),(0,n.kt)("h4",t({},{id:"vari\xe1vel-contador-decrescente"}),"Vari\xe1vel contador decrescente"),(0,n.kt)("p",null,"Em alguns casos, pode querer ter um loop cuja vari\xe1vel de contador seja decrescente ao inv\xe9s de crescente. Para fazer isso, deve especificar ",(0,n.kt)("em",{parentName:"p"},"Start_Expression")," maior que ",(0,n.kt)("em",{parentName:"p"},"End_Expression")," e ",(0,n.kt)("em",{parentName:"p"},"Increment_Expression")," deve ser negativa. Os exemplos abaixo fazem a mesma coisa que nos exemplos acima, mas na ordem inversa:"),(0,n.kt)("ol",t({},{start:5}),(0,n.kt)("li",{parentName:"ol"},"O seguinte exemplo executa 100 itera\xe7\xf5es:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For(vCounter;100;1;-1)\n  //Faz algo\n End for\n")),(0,n.kt)("ol",t({},{start:6}),(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos no array anArray:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For($vlElem;Size of array(anArray);1;-1)\n  //Faz algo com o elemento\n    anArray{$vlElem}:=...\n End for\n")),(0,n.kt)("ol",t({},{start:7}),(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre todos os caracteres do texto vtSomeText:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For($vlChar;Length(vtSomeText);1;-1)\n  //Faz algo com o caractere se for uma TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,n.kt)("ol",t({},{start:8}),(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre os registros selecionados para a tabela ","[aTable]",":")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," LAST RECORD([aTable])\n For($vlRecord;Records in selection([aTable]);1;-1)\n  //Faz algo com o registro\n    SEND RECORD([aTable])\n  //...\n  //Ir ao registro anterior\n    PREVIOUS RECORD([aTable])\n End for\n")),(0,n.kt)("h4",t({},{id:"incrementar-a-vari\xe1vel-do-contador-em-mais-de-um"}),"Incrementar a vari\xe1vel do contador em mais de um"),(0,n.kt)("p",null,"Se precisar, pode usar uma ",(0,n.kt)("em",{parentName:"p"},"Increment_Expression")," (positiva ou negativa) cujo valor absoluto seja maior que um."),(0,n.kt)("ol",t({},{start:9}),(0,n.kt)("li",{parentName:"ol"},"O loop a seguir aborda s\xf3 os elementos pares do array anArray:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For($vlElem;2;Size of array(anArray);2)\n  //Faz algo com o elemento #2,#4...#2n\n    anArray{$vlElem}:=...\n End for\n")),(0,n.kt)("h4",t({},{id:"optimizing-the-execution-of-the-for-end-for-loops"}),"Optimizing the execution of the For... End for loops"),(0,n.kt)("p",null,"Pode utilizar vari\xe1veis reais e inteiras, assim como contadores interprocesso, de processo e de vari\xe1veis locais. Para loops repetitivos longos, especialmente em modo compilado, use vari\xe1veis locais de tipo Inteiro longo."),(0,n.kt)("ol",t({},{start:10}),(0,n.kt)("li",{parentName:"ol"},"Aqui um exemplo simples:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," var $vlCounter : Integer //usa vari\xe1veis Integer locais \n For($vlCounter;1;10000)\n  //Faz algo\n End for\n")),(0,n.kt)("h3",t({},{id:"compara\xe7\xe3o-de-estruturas-de-loop"}),"Compara\xe7\xe3o de estruturas de loop"),(0,n.kt)("p",null,"Let's go back to the first ",(0,n.kt)("inlineCode",{parentName:"p"},"For... End for")," example. O seguinte exemplo executa 100 itera\xe7\xf5es:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faz algo\n End for\n")),(0,n.kt)("p",null,"Here is the equivalent ",(0,n.kt)("inlineCode",{parentName:"p"},"While... End while")," loop:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initializa o contador\n While($i<=100) //Loop 100 vezes\n  //Faz algo\n    $i:=$i+1 //Precisa incrementar o contador\n End while\n")),(0,n.kt)("p",null,"Here is the equivalent ",(0,n.kt)("inlineCode",{parentName:"p"},"Repeat... Until")," loop:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initializa o contador\n Repeat\n  //Faz algo\n    $i:=$i+1 //Precisa incrementar o contador\n Until($i=100) //Loop 100 vezes\n")),(0,n.kt)("admonition",t({},{type:"tip"}),(0,n.kt)("p",{parentName:"admonition"},"Here is the equivalent ",(0,n.kt)("inlineCode",{parentName:"p"},"While... Therefore, use the <code>For... End for")," loop whenever possible.")),(0,n.kt)("h3",t({},{id:"nested-for-end-for-looping-structures"}),"Nested For... End for looping structures"),(0,n.kt)("p",null,"Pode aninhar tantas estruturas de controle (dentro do razo\xe1vel) como precisar. This includes nesting ",(0,n.kt)("inlineCode",{parentName:"p"},"For... End for")," loops. Para evitar erros, tenha certeza de usar vari\xe1veis contador diferentes para cada estrutura de looping."),(0,n.kt)("p",null,"Aqui s\xe3o dois exemplos:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos em um array de duas dimens\xf5es:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //...\n  //Faz algo com a linha\n  //...\n    For($vlSubElem;1;Size of array(anArray{$vlElem}))\n  //Faz algo com o elemento\n       anArray{$vlElem}{$vlSubElem}:=...\n    End for\n End for\n")),(0,n.kt)("ol",t({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"O seguinte exemplo constr\xf3i um array de ponteiros a todos os campos de data presentes no banco:")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," ARRAY POINTER($apDateFields;0)\n $vlElem:=0\n For($vlTable;1;Get last table number)\n    If(Is table number valid($vlTable))\n       For($vlField;1;Get last field number($vlTable))\n          If(Is field number valid($vlTable;$vlField))\n             $vpField:=Field($vlTable;$vlField)\n             If(Type($vpField->)=Is date)\n                $vlElem:=$vlElem+1\n                INSERT IN ARRAY($apDateFields;$vlElem)\n                $apDateFields{$vlElem}:=$vpField\n             End if\n          End if\n       End for\n    End if\n End for\n")),(0,n.kt)("h2",t({},{id:"for-each-end-for-each"}),"For each... End for each"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"For each...End for each")," control flow structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For each(Current_Item;Expression{;begin{;end}}){Until|While}(Boolean_Expression)}\n    statement(s)\n    {break}  \n    {continue}\n End for each\n")),(0,n.kt)("p",null,"A estrutura ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," faz uma itera\xe7\xe3o sobre um ",(0,n.kt)("em",{parentName:"p"},"Elemento_atual")," especificado sobre todos os valores de ",(0,n.kt)("em",{parentName:"p"},"Express\xe3o"),". O tipo ",(0,n.kt)("em",{parentName:"p"},"elemento_atual")," depende do tipo ",(0,n.kt)("em",{parentName:"p"},"Expression"),". O loop ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," pode iterar atrav\xe9s de tr\xeas tipos de ",(0,n.kt)("em",{parentName:"p"},"Express\xe3o"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"collections: loop por cada elemento da cole\xe7\xe3o,"),(0,n.kt)("li",{parentName:"ul"},"sele\xe7\xf5es de entidades: loop em cada entidade,"),(0,n.kt)("li",{parentName:"ul"},"objetos: loop em cada propriedade do objeto.")),(0,n.kt)("p",null,"The following table compares the three types of ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each"),":"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",t({parentName:"tr"},{align:null})),(0,n.kt)("th",t({parentName:"tr"},{align:null}),"Loop atrav\xe9s da cole\xe7\xe3o"),(0,n.kt)("th",t({parentName:"tr"},{align:null}),"Loop nas sele\xe7\xf5es de entidades"),(0,n.kt)("th",t({parentName:"tr"},{align:null}),"Loop nos objetos"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Tipo Current_Item"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Vari\xe1vel do mesmo tipo que os elementos da cole\xe7\xe3o"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Entity"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Vari\xe1vel texto")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Tipos de express\xf5es"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Cole\xe7\xe3o (com elementos do mesmo tipo)"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Sele\xe7\xe3o de entidades"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",t({parentName:"tr"},{align:null}),"N\xfamero de loops (por padr\xe3o)"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"N\xfamero de elementos da cole\xe7\xe3o"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"N\xfamero de entidades na sele\xe7\xe3o"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"N\xfamero de propriedades de objeto")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Compatibilidade de par\xe2metros begin / end"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Sim"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Sim"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"N\xe3o")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"O n\xfamero de loops \xe9 avaliado no in\xedcio e n\xe3o muda durante o processo. Adicionar ou remover itens durante o loop n\xe3o \xe9 recomendado porque resulta em itera\xe7\xf5es faltantes ou redundantes."),(0,n.kt)("li",{parentName:"ul"},"Por padr\xe3o, as  ",(0,n.kt)("em",{parentName:"li"},"instru\xe7\xf5es")," anexas s\xe3o executadas para cada valor de ",(0,n.kt)("em",{parentName:"li"},"Express\xe3o"),". Entretanto, \xe9 poss\xedvel sair do loop comprovando uma condi\xe7\xe3o ao in\xedcio do loop (",(0,n.kt)("inlineCode",{parentName:"li"},"While"),") ou ao final do loop (",(0,n.kt)("inlineCode",{parentName:"li"},"Until"),")."),(0,n.kt)("li",{parentName:"ul"},"Os par\xe2metros opcionais ",(0,n.kt)("em",{parentName:"li"},"begin")," e ",(0,n.kt)("em",{parentName:"li"},"end")," podem ser usados com cole\xe7~eos e sele\xe7\xf5es de entidades para definir os limites do loop."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"For each... End for each")," loop can be used on a ",(0,n.kt)("strong",{parentName:"li"},"shared collection")," or a ",(0,n.kt)("strong",{parentName:"li"},"shared object"),". If your code needs to modify one or more element(s) of the collection or object properties, you need to use the ",(0,n.kt)("inlineCode",{parentName:"li"},"Use... End use")," keywords. Depending on your needs, you can call the ",(0,n.kt)("inlineCode",{parentName:"li"},"Use... End use")," keywords:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"antes de entrar no loop, se os elementos devem ser modificados juntos por raz\xf5es de integridade, ou"),(0,n.kt)("li",{parentName:"ul"},"dentro do loop quando s\xf3 tiver que modificar alguns elementos/propriedades e n\xe3o \xe9 necess\xe1rio gerenciar a integridade.")))),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,n.kt)("a",t({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,n.kt)("h3",t({},{id:"loop-atrav\xe9s-da-cole\xe7\xe3o"}),"Loop atrav\xe9s da cole\xe7\xe3o"),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," is used with an ",(0,n.kt)("em",{parentName:"p"},"Expression")," of the ",(0,n.kt)("em",{parentName:"p"},"Collection")," type, the ",(0,n.kt)("em",{parentName:"p"},"Current_Item")," parameter is a variable of the same type as the collection elements. Como padr\xe3o, o n\xfamero de loops \xe9 baseado no n\xfamero de elementos da cole\xe7\xe3o."),(0,n.kt)("p",null,"A cole\xe7\xe3o deve conter s\xf3 elementos do mesmo tipo, do contr\xe1rio se devolver\xe1 um erro assim que a vari\xe1vel ",(0,n.kt)("em",{parentName:"p"},"Current_Item")," tenha sido atribu\xedda o primeiro tipo de valor estranho."),(0,n.kt)("p",null,"Em cada itera\xe7\xe3o do loop, a vari\xe1vel ",(0,n.kt)("em",{parentName:"p"},"Current_Item")," \xe9 preenchida automaticamente com o elemento correspondente da cole\xe7\xe3o. Os pontos abaixo devem ser considerados:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Se a vari\xe1vel ",(0,n.kt)("em",{parentName:"li"},"Current_Item")," \xe9 de tipo objeto ou de tipo cole\xe7\xe3o (ou seja, se ",(0,n.kt)("em",{parentName:"li"},"Expresi\xf3n")," for uma cole\xe7\xe3o de objetos ou de cole\xe7\xf5es), ao modificar esta vari\xe1vel se modificar\xe1 automaticamente o elemento coincidente da cole\xe7\xe3o (porque os objetos e as cole\xe7\xf5es compartem as mesmas refer\xeancias). Se a vari\xe1vel for de tipo escalar, s\xf3 se modificar\xe1 a vari\xe1vel."),(0,n.kt)("li",{parentName:"ul"},"A vari\xe1vel",(0,n.kt)("em",{parentName:"li"},"Current_Item")," deve ser do mesmo tipo que os elementos da cole\xe7\xe3o. Se algum elemento da cole\xe7\xe3o n\xe3o for do mesmo tipo que a vari\xe1vel, um erro \xe9 gerado e o loop para."),(0,n.kt)("li",{parentName:"ul"},"Se a cole\xe7\xe3o conter elementos com um valor ",(0,n.kt)("strong",{parentName:"li"},"Null"),", se gerar\xe1 um erro se o tipo de vari\xe1vel ",(0,n.kt)("em",{parentName:"li"},"Current_Item")," n\xe3o \xe9 compat\xedvel com valores ",(0,n.kt)("strong",{parentName:"li"},"Null")," (como as vari\xe1veis de tipo inteiro longo).")),(0,n.kt)("h4",t({},{id:"exemplo-4"}),"Exemplo"),(0,n.kt)("p",null,"Se quiser computar algumas estat\xedsticas para uma cole\xe7\xe3o de n\xfameros:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," var $nums : Collection\n $nums:=New collection(10;5001;6665;33;1;42;7850)\n var $item;$vEven;$vOdd;$vUnder;$vOver : Integer\n For each($item;$nums)\n    If($item%2=0)\n       $vEven:=$vEven+1\n    Else\n       $vOdd:=$vOdd+1\n    End if\n    Case of\n       :($item<5000)\n          $vUnder:=$vUnder+1\n       :($item>6000)\n          $vOver:=$vOver+1\n    End case\n End for each\n  //$vEven=3, $vOdd=4\n  //$vUnder=4,$vOver=2\n")),(0,n.kt)("h3",t({},{id:"loop-nas-sele\xe7\xf5es-de-entidades"}),"Loop nas sele\xe7\xf5es de entidades"),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," is used with an ",(0,n.kt)("em",{parentName:"p"},"Expression")," of the ",(0,n.kt)("em",{parentName:"p"},"Entity selection")," type, the ",(0,n.kt)("em",{parentName:"p"},"Current_Item")," parameter is the entity that is currently processed."),(0,n.kt)("p",null,"O n\xfamero de loops \xe9 baseado no n\xfamero de entidades da sele\xe7\xe3o de entidades. Em cada itera\xe7\xe3o do loop, o par\xe2metro ",(0,n.kt)("em",{parentName:"p"},"Current_Item")," \xe9 preenchido automaticamente com a entidade da sele\xe7\xe3o de entidade que estiver sendo processada atualmente."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Nota:")," se a sele\xe7\xe3o de entidades conter uma entidade que tenha sido eliminada, enquanto isso, por outro processo, ela \xe9 pulada durante o loop."),(0,n.kt)("p",null,"Lembre que qualquer modifica\xe7\xe3o aplicada na entidade atual deve ser guardada explicitamente utilizando ",(0,n.kt)("inlineCode",{parentName:"p"},"entity.save()"),"."),(0,n.kt)("h4",t({},{id:"exemplo-5"}),"Exemplo"),(0,n.kt)("p",null,"Se quiser aumentar o sal\xe1rio de todos os empregados brit\xe2nicos em uma sele\xe7\xe3o de entidades:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," var emp : Object\n For each(emp;ds. Employees.query(\"country='UK'\"))\n    emp.salary:=emp.salary*1,03\n    emp.save()\n End for each\n")),(0,n.kt)("h3",t({},{id:"loops-nas-propriedades-de-objetos"}),"Loops nas propriedades de objetos"),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," is used with an ",(0,n.kt)("em",{parentName:"p"},"Expression")," of the Object type, the ",(0,n.kt)("em",{parentName:"p"},"Current_Item")," parameter is a text variable automatically filled with the name of the currently processed property."),(0,n.kt)("p",null,"As propriedades do objeto s\xe3o processadas de acordo com sua ordem de cria\xe7\xe3o. Durante o loop, propriedades podem ser adicionadas ou eliminadas no objeto, sem modificar o n\xfamero de loops que permanecer\xe3o no n\xfamero original de propriedades do objeto."),(0,n.kt)("h4",t({},{id:"exemplo-6"}),"Exemplo"),(0,n.kt)("p",null,"Se quiser trocar os nomes para mai\xfasculas no objeto a seguir:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),'{\n    "firstname": "gregory",\n    "lastname": "badikora",\n    "age": 20\n}\n')),(0,n.kt)("p",null,"Voc\xea pode escrever:"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," For each(property;vObject)\n    If(Value type(vObject[property])=Is text)\n       vObject[property]:=Uppercase(vObject[property])\n    End if\n End for each\n")),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{}),'{\n    "firstname": "GREGORY",\n    "lastname": "BADIKORA",\n    "age": 20\n}\n')),(0,n.kt)("h3",t({},{id:"par\xe2metros-begin--end"}),"Par\xe2metros begin / end"),(0,n.kt)("p",null,"Pode definir limites para a itera\xe7\xe3o usando os par\xe2metros opcionais inicio e fim."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Nota:"),"os par\xe2metros ",(0,n.kt)("em",{parentName:"p"},"inicio")," e ",(0,n.kt)("em",{parentName:"p"},"fim")," s\xf3 podem ser utilizados em itera\xe7\xf5es atrav\xe9s de cole\xe7\xf5es e sele\xe7\xf5es de entidades (s\xe3o ignoradas nas propriedades de objetos)."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"No par\xe2metro ",(0,n.kt)("em",{parentName:"li"},"begin"),", passe l posil\xe7ao do elemento em ",(0,n.kt)("em",{parentName:"li"},"Expression")," na que se iniciar\xe1 a itera\xe7\xe3o (se inclui ",(0,n.kt)("em",{parentName:"li"},"begin"),")."),(0,n.kt)("li",{parentName:"ul"},"No ",(0,n.kt)("em",{parentName:"li"},"par\xe2metro")," final, voc\xea tamb\xe9m pode passar a posi\xe7\xe3o do elemento na ",(0,n.kt)("em",{parentName:"li"},"Express\xe3o")," a qual vai parar a itera\xe7\xe3o (",(0,n.kt)("em",{parentName:"li"},"end")," \xe9 exclu\xeddo).")),(0,n.kt)("p",null,"Se omitir ",(0,n.kt)("em",{parentName:"p"},"end")," ou se ",(0,n.kt)("em",{parentName:"p"},"fim")," for maior que o n\xfamero de elementos em ",(0,n.kt)("em",{parentName:"p"},"Expression"),", os elementos s\xe3o iteragids de ",(0,n.kt)("em",{parentName:"p"},"begin")," at\xe9 o \xfaltimo elemento (inclu\xeddo). Se os par\xe2metros ",(0,n.kt)("em",{parentName:"p"},"inicio")," e",(0,n.kt)("em",{parentName:"p"},"fim")," forem valores positivos, representam posi\xe7\xf5es reais de elementos em ",(0,n.kt)("em",{parentName:"p"},"Expression"),". Se ",(0,n.kt)("em",{parentName:"p"},"begin")," for um valor negativo, \xe9 recalculado como ",(0,n.kt)("inlineCode",{parentName:"p"},"begin:=begin+Expression size")," (\xe9 considerado como o deslocamento offset desde o final de ",(0,n.kt)("em",{parentName:"p"},"Expression"),"). Se o valor calculado for negativo, ",(0,n.kt)("em",{parentName:"p"},"inicio")," toma o valor 0. ",(0,n.kt)("strong",{parentName:"p"},"Nota:")," mesmo se inicio for negativo, a itera\xe7\xe3o continua sendo realizada na ordem normal. Se ",(0,n.kt)("em",{parentName:"p"},"fim")," for um  valor negativo, se recalcula como ",(0,n.kt)("inlineCode",{parentName:"p"},"fim:=fim+tamanho da express\xe3o")),(0,n.kt)("p",null,"Por exemplo:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"uma cole\xe7\xe3o cont\xe9m 10 elementos (numerada de 0 a 9)"),(0,n.kt)("li",{parentName:"ul"},"begin=-4 -> begin=-4+10=6 -> itera\xe7\xe3o come\xe7a no sexto elemento (#5)"),(0,n.kt)("li",{parentName:"ul"},"end=-2 -> end=-2+10=8 -> itera\xe7\xe3o para antes do oitavo elemento (#7), ou seja, no s\xe9timo elemento.")),(0,n.kt)("h4",t({},{id:"exemplo-7"}),"Exemplo"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),' var $col;$col2 : Collection\n $col:=New collection("a";"b";"c";"d";"e")\n $col2:=New collection(1;2;3)\n var $item : Text\n For each($item;$col;0;3)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c"]\n For each($item;$col;-2;-1)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c","d"]\n')),(0,n.kt)("h3",t({},{id:"condi\xe7\xf5es-until-e-while"}),"Condi\xe7\xf5es Until e While"),(0,n.kt)("p",null,"You can control the ",(0,n.kt)("inlineCode",{parentName:"p"},"For each... End for each")," execution by adding an ",(0,n.kt)("inlineCode",{parentName:"p"},"Until")," or a ",(0,n.kt)("inlineCode",{parentName:"p"},"While")," condition to the loop. Quando uma instru\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"p"},"Until(condi\xe7\xe3o)")," estiver associada ao loop, a itera\xe7\xe3o vai parar logo que a condi\xe7\xe3o seja avaliada como ",(0,n.kt)("inlineCode",{parentName:"p"},"True"),", mas no caso de uma instru\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"p"},"While(condici\xf3n)"),", a itera\xe7\xe3o para quando a condi\xe7\xe3o for avaliada, pela primeira vez, como ",(0,n.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,n.kt)("p",null,"Pode passar qualquer uma das duas palavras chave em fun\xe7\xe3o das suas necessidades:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A condi\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"li"},"Until")," \xe9 testada no final de cada itera\xe7\xe3o, portanto, se a ",(0,n.kt)("em",{parentName:"li"},"Express\xe3o")," n\xe3o for vazia ou nula, o loop ser\xe1 executado pelo menos uma vez."),(0,n.kt)("li",{parentName:"ul"},"A condi\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"li"},"While")," \xe9 testada no in\xedcio de cada itera\xe7\xe3o, ent\xe3o de acordo com o resultado da condi\xe7\xe3o, o loop n\xe3o poder\xe1 ser executado de forma alguma.")),(0,n.kt)("h4",t({},{id:"exemplo-8"}),"Exemplo"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"})," $colNum:=New collection(1;2;3;4;5;6;7;8;9;10)\n\n $total:=0\n For each($num;$colNum)While($total<30) //testado no come\xe7o\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 36 (1+2+3+4+5+6+7+8)\n\n $total:=1000\n For each($num;$colNum)Until($total>30) //testado no final\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 1001 (1000+1)\n")),(0,n.kt)("h2",t({},{id:"break-e-continue"}),"break e continue"),(0,n.kt)("p",null,"All looping structures above support both ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"continue")," statements. These statements give you more control over the loops by allowing to exit the loop and to bypass the current iteration at any moment."),(0,n.kt)("h3",t({},{id:"break"}),"break"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop."),(0,n.kt)("p",null,"If the ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," statement is inside a ",(0,n.kt)("a",t({parentName:"p"},{href:"#nested-forend-for-looping-structures"}),"nested loop")," (loop inside another loop), the ",(0,n.kt)("inlineCode",{parentName:"p"},"break")," statement will terminate the innermost loop."),(0,n.kt)("h4",t({},{id:"exemplo-9"}),"Exemplo"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),'For (vCounter;1;100)\n    If ($tab{vCounter}="") //se uma condi\xe7\xe3o se tornar verdadeira\n        break //fim do ciclo for\n    End if\nEnd for\n')),(0,n.kt)("h3",t({},{id:"continue"}),"continue"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"continue")," statement terminates execution of the statements in the current iteration of the current loop, and continues execution of the loop with the next iteration."),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),'var $text : Text\nFor ($i; 0; 9)\n    If ($i=3)\n        continue //passa diretamente para a pr\xf3xima itera\xe7\xe3o\n    End if\n    $text:=$text+String($i)\nEnd for\n// $text="012456789" \n\n')),(0,n.kt)("h2",t({},{id:"return-expression"}),"return {expression}"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hist\xf3rico"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",t({parentName:"tr"},{align:null}),"Vers\xe3o"),(0,n.kt)("th",t({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",t({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",t({parentName:"tr"},{align:null}),"Adicionado"))))),(0,n.kt)("p",null,"A declara\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," pode ser chamada de qualquer lugar. Quando uma declara\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," \xe9 utilizada numa fun\xe7\xe3o ou m\xe9todo, a execu\xe7\xe3o da fun\xe7\xe3o ou m\xe9todo \xe9 interrompida. O c\xf3digo restante n\xe3o \xe9 executado e o controlo \xe9 devolvido ao autor da chamada."),(0,n.kt)("p",null,"A declara\xe7\xe3o ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," pode ser utilizada para ",(0,n.kt)("a",t({parentName:"p"},{href:"/docs/pt/20/Concepts/parameters#return-expression"}),"devolver um valor")," ao autor da chamada."),(0,n.kt)("h4",t({},{id:"exemplo-10"}),"Exemplo"),(0,n.kt)("pre",null,(0,n.kt)("code",t({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer While (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}u.isMDXComponent=!0}}]);