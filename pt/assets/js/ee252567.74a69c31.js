"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31780],{603905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>c});var t=n(667294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return n?t.createElement(k,r(r({ref:a},d),{},{components:n})):t.createElement(k,r({ref:a},d))}));function c(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=u;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},374728:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});n(667294);var t=n(603905);function o(){return o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},o.apply(this,arguments)}function l(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const r={id:"control-flow",title:"Fluxo de controlo"},i=void 0,s={unversionedId:"Concepts/control-flow",id:"version-20-R5/Concepts/control-flow",title:"Fluxo de controlo",description:"Independentemente da simplicidade ou da complexidade de um m\xe9todo, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es dentro do m\xe9todo. H\xe1 tr\xeas tipos de estruturas:",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-20-R5/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/pt/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"control-flow",title:"Fluxo de controlo"},sidebar:"docs",previous:{title:"Comandos",permalink:"/docs/pt/Concepts/commands"},next:{title:"Gest\xe3o de erros",permalink:"/docs/pt/Concepts/error-handling"}},p={},d=[{value:"If... Else... End if",id:"if-else-end-if",level:2},{value:"Exemplo",id:"exemplo",level:4},{value:"Case of... Else... End case",id:"case-of-else-end-case",level:2},{value:"Exemplo",id:"exemplo-1",level:4},{value:"While... End while",id:"while-end-while",level:2},{value:"Exemplo",id:"exemplo-2",level:4},{value:"Repeat... Until",id:"repeat-until",level:2},{value:"Exemplo",id:"exemplo-3",level:4},{value:"For...End for",id:"forend-for",level:2},{value:"Exemplos b\xe1sicos",id:"exemplos-b\xe1sicos",level:4},{value:"Vari\xe1vel contador",id:"vari\xe1vel-contador",level:3},{value:"Vari\xe1vel contador decrescente",id:"vari\xe1vel-contador-decrescente",level:4},{value:"Incrementar a vari\xe1vel do contador em mais de um",id:"incrementar-a-vari\xe1vel-do-contador-em-mais-de-um",level:4},{value:"Optimizing the execution of the For... End for loops",id:"optimizing-the-execution-of-the-for-end-for-loops",level:4},{value:"Compara\xe7\xe3o de estruturas de loop",id:"compara\xe7\xe3o-de-estruturas-de-loop",level:3},{value:"Nested For... End for looping structures",id:"nested-for-end-for-looping-structures",level:3},{value:"For each... End for each",id:"for-each-end-for-each",level:2},{value:"Loop atrav\xe9s da cole\xe7\xe3o",id:"loop-atrav\xe9s-da-cole\xe7\xe3o",level:3},{value:"Exemplo",id:"exemplo-4",level:4},{value:"Loop nas sele\xe7\xf5es de entidades",id:"loop-nas-sele\xe7\xf5es-de-entidades",level:3},{value:"Exemplo",id:"exemplo-5",level:4},{value:"Loops nas propriedades de objetos",id:"loops-nas-propriedades-de-objetos",level:3},{value:"Exemplo",id:"exemplo-6",level:4},{value:"Par\xe2metros begin / end",id:"par\xe2metros-begin--end",level:3},{value:"Exemplo",id:"exemplo-7",level:4},{value:"Condi\xe7\xf5es Until e While",id:"condi\xe7\xf5es-until-e-while",level:3},{value:"Exemplo",id:"exemplo-8",level:4},{value:"break e continue",id:"break-e-continue",level:2},{value:"break",id:"break",level:3},{value:"Exemplo",id:"exemplo-9",level:4},{value:"continue",id:"continue",level:3},{value:"return {expression}",id:"return-expression",level:2},{value:"Exemplo",id:"exemplo-10",level:4}],m={toc:d};function u(e){var{components:a}=e,n=l(e,["components"]);return(0,t.kt)("wrapper",o({},m,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Independentemente da simplicidade ou da complexidade de um m\xe9todo, sempre utilizar\xe1 um ou v\xe1rios dos tr\xeas tipos de estruturas de programa\xe7\xe3o. As estruturas de programa\xe7\xe3o determinam o fluxo de execu\xe7\xe3o, se ser\xe3o executadas, e a ordem das linhas de instru\xe7\xf5es dentro do m\xe9todo. H\xe1 tr\xeas tipos de estruturas:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Secuencial"),": una estructura secuencial es una estructura simple y lineal. Uma sequ\xeancia \xe9 uma s\xe9rie de senten\xe7as que 4D executa uma atr\xe1s da outra, da primera \xe0 \xfaltima. Uma instru\xe7\xe3o de uma linha, utilizada frequentemente para os m\xe9todos dos objetos, \xe9 o caso mais simples de uma estrutura sequencial. Por ejemplo: ",(0,t.kt)("inlineCode",{parentName:"p"},"[People]lastName:=Uppercase([People]lastName)"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Ramificaci\xf3n"),": una estructura de ramificaci\xf3n permite que los m\xe9todos prueben una condici\xf3n y tomen caminos alternativos, dependiendo del resultado. A condi\xe7\xe3o \xe9 uma express\xe3o booleana, uma express\xe3o que avalia TRUE ou FALSE. One branching structure is the ",(0,t.kt)("a",o({parentName:"p"},{href:"#ifelseend-if"}),(0,t.kt)("inlineCode",{parentName:"a"},"If...Else...End if"))," structure, which directs program flow along one of two paths. The other branching structure is the ",(0,t.kt)("a",o({parentName:"p"},{href:"#case-ofelseend-case"}),(0,t.kt)("inlineCode",{parentName:"a"},"Case of...Else...End case"))," structure, which directs program flow to one of many paths.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Bucle"),": cuando se escriben m\xe9todos, es muy com\xfan encontrarse con que se necesita que una secuencia de sentencias se repita un n\xfamero de veces. Para lidar com esta necessidade, a linguagem 4D oferece as estruturas de loop abaixo:"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",o({parentName:"li"},{href:"#whileend-while"}),(0,t.kt)("inlineCode",{parentName:"a"},"While...End while"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",o({parentName:"li"},{href:"#repeatuntil"}),(0,t.kt)("inlineCode",{parentName:"a"},"Repeat...Until"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",o({parentName:"li"},{href:"#forend-for"}),(0,t.kt)("inlineCode",{parentName:"a"},"For...End for"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",o({parentName:"li"},{href:"#for-eachend-for-each"}),(0,t.kt)("inlineCode",{parentName:"a"},"For each...End for each")))))),(0,t.kt)("p",null,"Os loops s\xe3o controlados de duas maneiras: ou fazem loop at\xe9 que uma condi\xe7\xe3o seja satisfeita, ou fazem loop um n\xfamero especificado de vezes. Cada estructura de bucle puede utilizarse de cualquier manera, pero los bucles ",(0,t.kt)("inlineCode",{parentName:"p"},"While")," y los bucles ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat")," son m\xe1s apropiados para repetir hasta que se cumpla una condici\xf3n, y los bucles ",(0,t.kt)("inlineCode",{parentName:"p"},"For")," son m\xe1s apropiados para hacer un bucle un n\xfamero determinado ",(0,t.kt)("inlineCode",{parentName:"p"},"For each...End for each")," permite la mezcla en ambos sentidos y est\xe1 dise\xf1ado para realizar bucles dentro de objetos y colecciones."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:"),' 4D permite anidar estructuras de programaci\xf3n hasta una "profundidad" de 512 niveles.'),(0,t.kt)("h2",o({},{id:"if-else-end-if"}),"If... Else... End if"),(0,t.kt)("p",null,"La sintaxis de la estructura condicional ",(0,t.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n    statement(s)\n End if\n")),(0,t.kt)("p",null,"Tenga en cuenta que la parte ",(0,t.kt)("inlineCode",{parentName:"p"},"Else")," es opcional; puede escribir:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n End if\n")),(0,t.kt)("p",null,"La estructura ",(0,t.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," permite a su m\xe9todo elegir entre dos acciones, dependiendo de si una prueba (una expresi\xf3n booleana) es TRUE o FALSE. Quando a express\xe3o Booleana for TRUE, s\xe3o executadas as declara\xe7\xf5es que seguem imediatamente ao teste. Se a express\xe3o Booleana for FALSE, s\xe3o executadas as declara\xe7\xf5es que seguem a linha Else. El ",(0,t.kt)("inlineCode",{parentName:"p"},"Else")," es opcional; si se omite Else, la ejecuci\xf3n contin\xfaa con la primera instrucci\xf3n (si la hay) que sigue al ",(0,t.kt)("inlineCode",{parentName:"p"},"End if"),"."),(0,t.kt)("p",null,"Note que a express\xe3o booleana \xe9 sempre avaliada completamente. Considere particularmente o teste abaixo:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(MethodA & MethodB)\n    ...\n End if\n")),(0,t.kt)("p",null,"A express\xe3o \xe9 TRUE apenas se ambos os m\xe9todos forem TRUE. However, even if ",(0,t.kt)("em",{parentName:"p"},"MethodA")," returns FALSE, 4D will still evaluate ",(0,t.kt)("em",{parentName:"p"},"MethodB"),", which is a useless waste of time. Nesse caso, \xe9 mais interessante usar uma estrutra como:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(MethodA)\n    If(MethodB)\n       ...\n    End if\n End if\n")),(0,t.kt)("p",null,"The result is similar and ",(0,t.kt)("em",{parentName:"p"},"MethodB")," is evaluated only if necessary."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},(0,t.kt)("strong",{parentName:"p"},"Note:")," The ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/operators#ternary-operator"}),"ternary operator")," allows writing one-line conditional expressions and can replace a full sequence of If..")),(0,t.kt)("h4",o({},{id:"exemplo"}),"Exemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'  // Ask the user to enter a name\n $Find:=Request(Type a name)\n If(OK=1)\n    QUERY([People];[People]LastName=$Find)\n Else\n    ALERT("You did not enter a name.")\n End if \n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Consejo:")," la ramificaci\xf3n puede realizarse sin que las instrucciones se ejecuten en un caso u otro. Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n Else\n    statement(s)\n End if\n")),(0,t.kt)("p",null,"ou :"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n End if\n")),(0,t.kt)("h2",o({},{id:"case-of-else-end-case"}),"Case of... Else... End case"),(0,t.kt)("p",null,"The formal syntax of the ",(0,t.kt)("inlineCode",{parentName:"p"},"Case of... Else...End case")," control flow structure is:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,t.kt)("p",null,"Tenga en cuenta que la parte ",(0,t.kt)("inlineCode",{parentName:"p"},"Else")," es opcional; puede escribir:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n End case\n")),(0,t.kt)("p",null,"As with the ",(0,t.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure, the ",(0,t.kt)("inlineCode",{parentName:"p"},"Case of... Else...End case")," structure also lets your method choose between alternative actions. Unlike the ",(0,t.kt)("inlineCode",{parentName:"p"},"If...Else...End")," if structure, the ",(0,t.kt)("inlineCode",{parentName:"p"},"Case of... Else...End case")," structure can test a reasonable unlimited number of Boolean expressions and take action depending on which one is TRUE."),(0,t.kt)("p",null,"Cada express\xe3o booleana \xe9 precedida de dois pontos (",(0,t.kt)("inlineCode",{parentName:"p"},":"),"). A combina\xe7\xe3o dos dois pontos e da express\xe3o booleana \xe9 chamada de um caso. Por exemplo, a linha abaixo \xe9 um caso:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),":(bValidate=1)\n")),(0,t.kt)("p",null,"S\xf3 s\xe3o executadas as instru\xe7\xf5es que seguem o primeiro caso TRUE (at\xe9 o pr\xf3ximo caso). Si ninguno de los casos es TRUE, no se ejecutar\xe1 ninguna de las instrucciones (si no se incluye la parte ",(0,t.kt)("inlineCode",{parentName:"p"},"Else"),")."),(0,t.kt)("p",null,"Pode incluir uma instru\xe7\xe3o Else depois do \xfaltimo caso. Si todos los casos son FALSE, se ejecutar\xe1n las instrucciones siguientes al ",(0,t.kt)("inlineCode",{parentName:"p"},"Else"),"."),(0,t.kt)("h4",o({},{id:"exemplo-1"}),"Exemplo"),(0,t.kt)("p",null,"Esse exemplo testa uma vari\xe1vel num\xe9rica e exibe uma caixa de alerta com uma apalavra:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' Case of\n    :(vResult=1) //Test if the number is 1\n       ALERT("One.") //If it is 1, display an alert\n    :(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    :(vResult=3) //Test if the number is 3\n       ALERT("Three.") //If it is 3, display an alert\n    Else //If it is not 1, 2, or 3, display an alert\n       ALERT("It was not one, two, or three.")\n End case\n')),(0,t.kt)("p",null,"Para comparar, aqu\xed est\xe1 la versi\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," del mismo m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' If(vResult=1) //Test if the number is 1\n    ALERT("One.") //If it is 1, display an alert\n Else\n    If(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    Else\n       If(vResult=3) //Test if the number is 3\n          ALERT("Three.") //If it is 3, display an alert\n       Else //If it is not 1, 2, or 3, display an alert\n          ALERT("It was not one, two, or three.")\n       End if\n    End if\n End if\n')),(0,t.kt)("p",null,"Remember that with a ",(0,t.kt)("inlineCode",{parentName:"p"},"Case of... Else...End case")," structure, only the first TRUE case is executed. Mesmo se dois ou mais casos forem TRUE, s\xf3 as instru\xe7\xf5es que seguirem o primeiro caso TRUE ser\xe3o executadas."),(0,t.kt)("p",null,"Dessa maneira, quando quiser implementar testes hier\xe1rquicos, deve garantir que as declara\xe7\xf5es de condi\xe7\xe3o que estejam mais abaixo no esquema hier\xe1rquico apare\xe7am primeiro na sequ\xeancia de testes. Por ejemplo, si se quiere procesar el caso simple (vResult=1) y el caso complejo (vResult=1) & (vCondition#2) y se estructura el m\xe9todo de la siguiente manera: Por exemplo, o c\xf3digo abaixo nunca ter\xe1 sua \xfaltima condi\xe7\xe3o detectada:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(vResult=1)\n       ... //statement(s)\n    :((vResult=1) & (vCondition#2)) //this case will never be detected\n       ... //statement(s)\n End case\n")),(0,t.kt)("p",null,'No c\xf3digo anterior, a presen\xe7a da segunda condi\xe7\xe3o n\xe3o \xe9 detectada, j\xe1 que o teste "vResult=1" ramifica o c\xf3digo antes de qualquer outro teste. Para que o c\xf3digo funcione corretamente, pode escrev\xea-lo assim:'),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :((vResult=1) & (vCondition#2)) //this case will be detected first\n       ... //statement(s)\n    :(vResult=1)\n       ... //statement(s)\n End case\n")),(0,t.kt)("p",null,"Al\xe9m disso, se quiser implementar teste hier\xe1rquico, pode considerar usar um c\xf3digo hier\xe1rquico."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Consejo:")," la ramificaci\xf3n puede realizarse sin que las instrucciones se ejecuten en un caso u otro. Quando desenvolver um algoritmo ou uma aplica\xe7\xe3o especializada, nada impede que escreva:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n      ...\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,t.kt)("p",null,"ou :"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n       statement(s)\n       ...\n        \n    :(Boolean_Expression)\n       statement(s)\n    Else\n End case\n")),(0,t.kt)("p",null,"ou :"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Case of\n    Else\n       statement(s)\n End case\n")),(0,t.kt)("h2",o({},{id:"while-end-while"}),"While... End while"),(0,t.kt)("p",null,"La sintaxis de la estructura condicional ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while")," es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," While(Boolean_Expression)\n    statement(s)\n    {break}  \n    {continue}\n End while\n")),(0,t.kt)("p",null,"Un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while")," ejecuta las instrucciones dentro del bucle mientras la expresi\xf3n booleana sea TRUE. Comprova a express\xe3o booleana ao in\xedcio do loop e n\xe3o entra no loop se a express\xe3o for FALSE."),(0,t.kt)("p",null,"Las instrucciones ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"continue")," se ",(0,t.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"describen a continuaci\xf3n"),"."),(0,t.kt)("p",null,"Es com\xfan inicializar el valor probado en la expresi\xf3n booleana inmediatamente antes de entrar en el bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while"),". Inicializar el valor significa asignarle un contenido adecuado, normalmente para que la expresi\xf3n booleana sea TRUE y ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while")," ejecute el bucle."),(0,t.kt)("p",null,"O valor da express\xe3o booleana deve poder ser modificado por um elemento dentro do loop, do contr\xe1rio ser\xe1 executado indefinidamente. The following loop continues forever because ",(0,t.kt)("em",{parentName:"p"},"NeverStop")," is always TRUE:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," NeverStop:=True\n While(NeverStop)\n End while\n")),(0,t.kt)("p",null,"Se voc\xea se encontrar em uma situa\xe7\xe3o desse tipo, na qual um m\xe9todo fica executando de forma descontrolada, pode usar as fun\xe7\xf5es de rastreamento para parar o loop e rastrear o problema. Para m\xe1s informaci\xf3n sobre el seguimiento de un m\xe9todo, consulte la p\xe1gina ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/error-handling"}),"Gesti\xf3n de errores"),"."),(0,t.kt)("h4",o({},{id:"exemplo-2"}),"Exemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' CONFIRM("Add a new record?") //The user wants to add a record?\n While(OK=1) //Loop as long as the user wants to\n    ADD RECORD([aTable]) //Add a new record\n End while //The loop always ends with End while\n')),(0,t.kt)("p",null,"En este ejemplo, el valor de la variable sistema ",(0,t.kt)("inlineCode",{parentName:"p"},"OK")," es definido por el comando ",(0,t.kt)("inlineCode",{parentName:"p"},"CONFIRM")," antes de que se inicie el bucle. Si el usuario hace clic en el bot\xf3n ",(0,t.kt)("strong",{parentName:"p"},"OK")," de la caja de di\xe1logo de confirmaci\xf3n, la variable del sistema ",(0,t.kt)("inlineCode",{parentName:"p"},"OK")," toma el valor 1 y se inicia el bucle. En caso contrario, la variable del sistema ",(0,t.kt)("inlineCode",{parentName:"p"},"OK")," toma el valor 0 y se omite el bucle. Una vez se inicia el bucle, el comando ",(0,t.kt)("inlineCode",{parentName:"p"},"ADD RECORD")," permite continuar la ejecuci\xf3n del bucle porque se define la variable sistema ",(0,t.kt)("inlineCode",{parentName:"p"},"OK")," en 1 cuando el usuario guarda el registro. Cuando el usuario cancela (no guarda) el \xfaltimo registro, la variable del sistema ",(0,t.kt)("inlineCode",{parentName:"p"},"OK")," toma el valor 0 y el bucle se detiene."),(0,t.kt)("h2",o({},{id:"repeat-until"}),"Repeat... Until"),(0,t.kt)("p",null,"La sintaxis de la estructura condicional ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"Repeat\n    statement(s)\n    {break}  \n    {continue}\nUntil(Boolean_Expression)\n")),(0,t.kt)("p",null,"Un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," es similar a un bucle ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/control-flow#whileend-while"}),"While...End while"),", excepto que comprueba la expresi\xf3n booleana despu\xe9s del bucle en lugar de antes. As\xed, un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," siempre ejecuta el bucle una vez, mientras que si la expresi\xf3n booleana es inicialmente False, un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while")," no ejecuta el bucle en absoluto."),(0,t.kt)("p",null,"La otra diferencia con un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," es que el bucle contin\xfaa hasta que la expresi\xf3n booleana sea TRUE."),(0,t.kt)("p",null,"Las instrucciones ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"continue")," se ",(0,t.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"describen a continuaci\xf3n"),"."),(0,t.kt)("h4",o({},{id:"exemplo-3"}),"Exemplo"),(0,t.kt)("p",null,"Compara el siguiente ejemplo con el ejemplo del bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while"),". Tenga en cuenta que la expresi\xf3n booleana no necesita ser inicializada-no hay un comando ",(0,t.kt)("inlineCode",{parentName:"p"},"CONFIRM")," para inicializar la variable ",(0,t.kt)("inlineCode",{parentName:"p"},"OK"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," Repeat\n    ADD RECORD([aTable])\n Until(OK=0)\n")),(0,t.kt)("h2",o({},{id:"forend-for"}),"For...End for"),(0,t.kt)("p",null,"La sintaxis de la estructura condicional ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for")," es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"For(Counter_Variable;Start_Expression;End_Expression{;Increment_Expression})\n   statement(s)\n    {break}  \n    {continue}\nEnd for\n")),(0,t.kt)("p",null,"El bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for")," es un bucle controlado por un contador:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"La variable contador ",(0,t.kt)("em",{parentName:"li"},"Counter_Variable")," es una variable num\xe9rica (Real o Entero largo) inicializada por ",(0,t.kt)("inlineCode",{parentName:"li"},"For...End for")," con el valor especificado por ",(0,t.kt)("em",{parentName:"li"},"Start_Expression"),"."),(0,t.kt)("li",{parentName:"ul"},"Cada vez que se ejecuta el bucle, la variable del contador se incrementa en el valor especificado en el valor opcional ",(0,t.kt)("em",{parentName:"li"},"Increment_Expression"),". Si no se especifica ",(0,t.kt)("em",{parentName:"li"},"Increment_Expression"),", la variable del contador se incrementa en uno (1), que es el valor predeterminado."),(0,t.kt)("li",{parentName:"ul"},"Cuando la variable del contador pasa el valor ",(0,t.kt)("em",{parentName:"li"},"End_Expression"),", el bucle se detiene.")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Importante:")," las expresiones num\xe9ricas ",(0,t.kt)("em",{parentName:"p"},"Start_Expression"),", ",(0,t.kt)("em",{parentName:"p"},"End_Expression")," y ",(0,t.kt)("em",{parentName:"p"},"Increment_Expression")," se eval\xfaan una vez al principio del bucle. Se essas express\xf5es forem vari\xe1veis, mudar uma deles dentro do loop n\xe3o vai afetar o loop."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Consejo:")," Sin embargo, para fines especiales, puede cambiar el valor de la variable ",(0,t.kt)("em",{parentName:"p"},"Counter_Variable")," dentro del bucle; esto afectar\xe1 al bucle."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Normalmente ",(0,t.kt)("em",{parentName:"li"},"Start_Expression")," es menor que ",(0,t.kt)("em",{parentName:"li"},"End_Expression"),"."),(0,t.kt)("li",{parentName:"ul"},"Si ",(0,t.kt)("em",{parentName:"li"},"Start_Expression")," y ",(0,t.kt)("em",{parentName:"li"},"End_Expression")," son iguales, el bucle se ejecutar\xe1 s\xf3lo una vez."),(0,t.kt)("li",{parentName:"ul"},"Si ",(0,t.kt)("em",{parentName:"li"},"Start_Expression")," es mayor que ",(0,t.kt)("em",{parentName:"li"},"End_Expression"),", el bucle no se ejecutar\xe1 en absoluto a menos que se especifique una ",(0,t.kt)("em",{parentName:"li"},"Increment_Expression")," negativa. Ver os exemplos.")),(0,t.kt)("p",null,"Las instrucciones ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"continue")," se ",(0,t.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"describen a continuaci\xf3n"),"."),(0,t.kt)("h4",o({},{id:"exemplos-b\xe1sicos"}),"Exemplos b\xe1sicos"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"O seguinte exemplo executa 100 itera\xe7\xf5es:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faz algo\n End for\n")),(0,t.kt)("ol",o({},{start:2}),(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos no array anArray:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,t.kt)("ol",o({},{start:3}),(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre todos os caracteres do texto vtSomeText:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlChar;1;Length(vtSomeText))\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,t.kt)("ol",o({},{start:4}),(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre os registros selecionados para a tabela ","[aTable]",":")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," FIRST RECORD([aTable])\n For($vlRecord;1;Records in selection([aTable]))\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the next record\n    NEXT RECORD([aTable])\n End for\n")),(0,t.kt)("p",null,"La mayor\xeda de los bucles ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for")," que escribir\xe1 en sus proyectos se parecer\xe1n a los que se presentan en estos ejemplos."),(0,t.kt)("h3",o({},{id:"vari\xe1vel-contador"}),"Vari\xe1vel contador"),(0,t.kt)("h4",o({},{id:"vari\xe1vel-contador-decrescente"}),"Vari\xe1vel contador decrescente"),(0,t.kt)("p",null,"Em alguns casos, pode querer ter um loop cuja vari\xe1vel de contador seja decrescente ao inv\xe9s de crescente. Para ello, debe especificar ",(0,t.kt)("em",{parentName:"p"},"Start_Expression")," mayor que ",(0,t.kt)("em",{parentName:"p"},"End_Expression")," y ",(0,t.kt)("em",{parentName:"p"},"Increment_Expression")," debe ser negativa. Os exemplos abaixo fazem a mesma coisa que nos exemplos acima, mas na ordem inversa:"),(0,t.kt)("ol",o({},{start:5}),(0,t.kt)("li",{parentName:"ol"},"O seguinte exemplo executa 100 itera\xe7\xf5es:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For(vCounter;100;1;-1)\n  //Faz algo\n End for\n")),(0,t.kt)("ol",o({},{start:6}),(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos no array anArray:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;Size of array(anArray);1;-1)\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,t.kt)("ol",o({},{start:7}),(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre todos os caracteres do texto vtSomeText:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlChar;Length(vtSomeText);1;-1)\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,t.kt)("ol",o({},{start:8}),(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo recorre os registros selecionados para a tabela ","[aTable]",":")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," LAST RECORD([aTable])\n For($vlRecord;Records in selection([aTable]);1;-1)\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the previous record\n    PREVIOUS RECORD([aTable])\n End for\n")),(0,t.kt)("h4",o({},{id:"incrementar-a-vari\xe1vel-do-contador-em-mais-de-um"}),"Incrementar a vari\xe1vel do contador em mais de um"),(0,t.kt)("p",null,"Si lo requiere, puede utilizar una ",(0,t.kt)("em",{parentName:"p"},"Increment_Expression")," (positiva o negativa) cuyo valor absoluto sea mayor que uno."),(0,t.kt)("ol",o({},{start:9}),(0,t.kt)("li",{parentName:"ol"},"O loop a seguir aborda s\xf3 os elementos pares do array anArray:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;2;Size of array(anArray);2)\n  //Do something with the element #2,#4...#2n\n    anArray{$vlElem}:=...\n End for\n")),(0,t.kt)("h4",o({},{id:"optimizing-the-execution-of-the-for-end-for-loops"}),"Optimizing the execution of the For... End for loops"),(0,t.kt)("p",null,"Pode utilizar vari\xe1veis reais e inteiras, assim como contadores interprocesso, de processo e de vari\xe1veis locais. Para loops repetitivos longos, especialmente em modo compilado, use vari\xe1veis locais de tipo Inteiro longo."),(0,t.kt)("ol",o({},{start:10}),(0,t.kt)("li",{parentName:"ol"},"Aqui um exemplo simples:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," var $vlCounter : Integer //usa vari\xe1veis Integer locais \n For($vlCounter;1;10000)\n  //Faz algo\n End for\n")),(0,t.kt)("h3",o({},{id:"compara\xe7\xe3o-de-estruturas-de-loop"}),"Compara\xe7\xe3o de estruturas de loop"),(0,t.kt)("p",null,"Volvamos al primer ejemplo de ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for"),". O seguinte exemplo executa 100 itera\xe7\xf5es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faz algo\n End for\n")),(0,t.kt)("p",null,"Es interesante ver c\xf3mo el bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while")," y el bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," realizar\xedan la misma acci\xf3n. Aqu\xed est\xe1 el bucle equivalente ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initialize the counter\n While($i<=100) //Loop 100 times\n  //Do something\n    $i:=$i+1 //Need to increment the counter\n End while\n")),(0,t.kt)("p",null,"Aqu\xed est\xe1 el bucle equivalente ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initializa o contador\n Repeat\n  //Faz algo\n    $i:=$i+1 //Precisa incrementar o contador\n Until($i=100) //Loop 100 vezes\n")),(0,t.kt)("admonition",o({},{type:"tip"}),(0,t.kt)("p",{parentName:"admonition"},"El bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for")," suele ser m\xe1s r\xe1pido que los bucles ",(0,t.kt)("inlineCode",{parentName:"p"},"While...End while")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"Repeat...Until"),", porque 4D comprueba la condici\xf3n internamente en cada ciclo del bucle e incrementa el contador. Por lo tanto, utilice el bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for")," siempre que sea posible.")),(0,t.kt)("h3",o({},{id:"nested-for-end-for-looping-structures"}),"Nested For... End for looping structures"),(0,t.kt)("p",null,"Pode aninhar tantas estruturas de controle (dentro do razo\xe1vel) como precisar. Esto incluye la anidaci\xf3n de bucles ",(0,t.kt)("inlineCode",{parentName:"p"},"For...End for"),". Para evitar erros, tenha certeza de usar vari\xe1veis contador diferentes para cada estrutura de looping."),(0,t.kt)("p",null,"Aqui s\xe3o dois exemplos:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"O exemplo abaixo percorre todos os elementos em um array de duas dimens\xf5es:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //...\n  //Do something with the row\n  //...\n    For($vlSubElem;1;Size of array(anArray{$vlElem}))\n  //Do something with the element\n       anArray{$vlElem}{$vlSubElem}:=...\n    End for\n End for\n")),(0,t.kt)("ol",o({},{start:2}),(0,t.kt)("li",{parentName:"ol"},"O seguinte exemplo constr\xf3i um array de ponteiros a todos os campos de data presentes no banco:")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," ARRAY POINTER($apDateFields;0)\n $vlElem:=0\n For($vlTable;1;Get last table number)\n    If(Is table number valid($vlTable))\n       For($vlField;1;Get last field number($vlTable))\n          If(Is field number valid($vlTable;$vlField))\n             $vpField:=Field($vlTable;$vlField)\n             If(Type($vpField->)=Is date)\n                $vlElem:=$vlElem+1\n                INSERT IN ARRAY($apDateFields;$vlElem)\n                $apDateFields{$vlElem}:=$vpField\n             End if\n          End if\n       End for\n    End if\n End for\n")),(0,t.kt)("h2",o({},{id:"for-each-end-for-each"}),"For each... End for each"),(0,t.kt)("p",null,"La sintaxis de la estructura condicional ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each")," es:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For each(Current_Item;Expression{;begin{;end}}){Until|While}(Boolean_Expression)}\n    statement(s)\n    {break}  \n    {continue}\n End for each\n")),(0,t.kt)("p",null,"La estructura ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each")," ejecuta un ",(0,t.kt)("em",{parentName:"p"},"Current_item")," especificado sobre todos los valores de ",(0,t.kt)("em",{parentName:"p"},"Expression"),". El tipo ",(0,t.kt)("em",{parentName:"p"},"Current_item")," depende del tipo ",(0,t.kt)("em",{parentName:"p"},"Expression"),". El bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each")," puede iterar a trav\xe9s de tres tipos de ",(0,t.kt)("em",{parentName:"p"},"Expression"),":"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"collections: loop por cada elemento da cole\xe7\xe3o,"),(0,t.kt)("li",{parentName:"ul"},"sele\xe7\xf5es de entidades: loop em cada entidade,"),(0,t.kt)("li",{parentName:"ul"},"objetos: loop em cada propriedade do objeto.")),(0,t.kt)("p",null,"La siguiente tabla compara los tres tipos de ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each"),":"),(0,t.kt)("table",null,(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",o({parentName:"tr"},{align:null})),(0,t.kt)("th",o({parentName:"tr"},{align:null}),"Loop atrav\xe9s da cole\xe7\xe3o"),(0,t.kt)("th",o({parentName:"tr"},{align:null}),"Loop nas sele\xe7\xf5es de entidades"),(0,t.kt)("th",o({parentName:"tr"},{align:null}),"Loop nos objetos"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Tipo Current_Item"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Vari\xe1vel do mesmo tipo que os elementos da cole\xe7\xe3o"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Entity"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Vari\xe1vel texto")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Tipos de express\xf5es"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Cole\xe7\xe3o (com elementos do mesmo tipo)"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Sele\xe7\xe3o de entidades"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Object")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de loops (por padr\xe3o)"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de elementos da cole\xe7\xe3o"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de entidades na sele\xe7\xe3o"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"N\xfamero de propriedades de objeto")),(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Compatibilidade de par\xe2metros begin / end"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Sim"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Sim"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"N\xe3o")))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"O n\xfamero de loops \xe9 avaliado no in\xedcio e n\xe3o muda durante o processo. Adicionar ou remover itens durante o loop n\xe3o \xe9 recomendado porque resulta em itera\xe7\xf5es faltantes ou redundantes."),(0,t.kt)("li",{parentName:"ul"},"By default, the enclosed ",(0,t.kt)("em",{parentName:"li"},"statement(s)")," are executed for each value in ",(0,t.kt)("em",{parentName:"li"},"Expression"),". Sin embargo, es posible salir del bucle comprobando una condici\xf3n al principio del bucle ( ",(0,t.kt)("inlineCode",{parentName:"li"},"While"),") o al final del bucle (",(0,t.kt)("inlineCode",{parentName:"li"},"Until"),")."),(0,t.kt)("li",{parentName:"ul"},"Los par\xe1metros opcionales ",(0,t.kt)("em",{parentName:"li"},"begin")," y ",(0,t.kt)("em",{parentName:"li"},"end")," pueden utilizarse con colecciones y selecciones de entidades para definir los l\xedmites del bucle."),(0,t.kt)("li",{parentName:"ul"},"El bucle ",(0,t.kt)("inlineCode",{parentName:"li"},"For each... End for each")," puede utilizarse en una ",(0,t.kt)("strong",{parentName:"li"},"colecci\xf3n compartida")," o en un ",(0,t.kt)("strong",{parentName:"li"},"objeto compartido"),". Si su c\xf3digo necesita modificar uno o m\xe1s elementos de la colecci\xf3n o de las propiedades del objeto, debe utilizar las palabras clave ",(0,t.kt)("inlineCode",{parentName:"li"},"Use...End use"),". Dependiendo de sus necesidades, puede llamar a las palabras clave ",(0,t.kt)("inlineCode",{parentName:"li"},"Use...End use"),":",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"antes de entrar no loop, se os elementos devem ser modificados juntos por raz\xf5es de integridade, ou"),(0,t.kt)("li",{parentName:"ul"},"dentro do loop quando s\xf3 tiver que modificar alguns elementos/propriedades e n\xe3o \xe9 necess\xe1rio gerenciar a integridade.")))),(0,t.kt)("p",null,"Las instrucciones ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"continue")," se ",(0,t.kt)("a",o({parentName:"p"},{href:"#break-and-continue"}),"describen a continuaci\xf3n"),"."),(0,t.kt)("h3",o({},{id:"loop-atrav\xe9s-da-cole\xe7\xe3o"}),"Loop atrav\xe9s da cole\xe7\xe3o"),(0,t.kt)("p",null,"When ",(0,t.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,t.kt)("em",{parentName:"p"},"Expression")," of the ",(0,t.kt)("em",{parentName:"p"},"Collection")," type, the ",(0,t.kt)("em",{parentName:"p"},"Current_Item")," parameter is a variable of the same type as the collection elements. Como padr\xe3o, o n\xfamero de loops \xe9 baseado no n\xfamero de elementos da cole\xe7\xe3o."),(0,t.kt)("p",null,"The collection must contain only elements of the same type, otherwise an error will be returned as soon as the ",(0,t.kt)("em",{parentName:"p"},"Current_Item")," variable is assigned the first mismatched value type."),(0,t.kt)("p",null,"At each loop iteration, the ",(0,t.kt)("em",{parentName:"p"},"Current_Item")," variable is automatically filled with the matching element of the collection. Os pontos abaixo devem ser considerados:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"If the ",(0,t.kt)("em",{parentName:"li"},"Current_Item")," variable is of the object type or collection type (i.e. if ",(0,t.kt)("em",{parentName:"li"},"Expression")," is a collection of objects or of collections), modifying this variable will automatically modify the matching element of the collection (because objects and collections share the same references). Se a vari\xe1vel for de tipo escalar, s\xf3 se modificar\xe1 a vari\xe1vel."),(0,t.kt)("li",{parentName:"ul"},"The ",(0,t.kt)("em",{parentName:"li"},"Current_Item")," variable must be of the same type as the collection elements. Se algum elemento da cole\xe7\xe3o n\xe3o for do mesmo tipo que a vari\xe1vel, um erro \xe9 gerado e o loop para."),(0,t.kt)("li",{parentName:"ul"},"If the collection contains elements with a ",(0,t.kt)("strong",{parentName:"li"},"Null")," value, an error will be generated if the ",(0,t.kt)("em",{parentName:"li"},"Current_Item")," variable type does not support ",(0,t.kt)("strong",{parentName:"li"},"Null")," values (such as longint variables).")),(0,t.kt)("h4",o({},{id:"exemplo-4"}),"Exemplo"),(0,t.kt)("p",null,"Se quiser computar algumas estat\xedsticas para uma cole\xe7\xe3o de n\xfameros:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," var $nums : Collection\n $nums:=New collection(10;5001;6665;33;1;42;7850)\n var $item;$vEven;$vOdd;$vUnder;$vOver : Integer\n For each($item;$nums)\n    If($item%2=0)\n       $vEven:=$vEven+1\n    Else\n       $vOdd:=$vOdd+1\n    End if\n    Case of\n       :($item<5000)\n          $vUnder:=$vUnder+1\n       :($item>6000)\n          $vOver:=$vOver+1\n    End case\n End for each\n  //$vEven=3, $vOdd=4\n  //$vUnder=4,$vOver=2\n")),(0,t.kt)("h3",o({},{id:"loop-nas-sele\xe7\xf5es-de-entidades"}),"Loop nas sele\xe7\xf5es de entidades"),(0,t.kt)("p",null,"Cuando ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each")," se utiliza con una ",(0,t.kt)("em",{parentName:"p"},"Expression")," del tipo ",(0,t.kt)("em",{parentName:"p"},"Collection"),", el par\xe1metro ",(0,t.kt)("em",{parentName:"p"},"Current_Item")," es una variable del mismo tipo que los elementos de la colecci\xf3n."),(0,t.kt)("p",null,"O n\xfamero de loops \xe9 baseado no n\xfamero de entidades da sele\xe7\xe3o de entidades. En cada iteraci\xf3n del bucle, el par\xe1metro ",(0,t.kt)("em",{parentName:"p"},"Current_Item")," se llena autom\xe1ticamente con la entidad de la selecci\xf3n de entidades que se procesa actualmente."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," si la selecci\xf3n de entidades contiene una entidad que fue eliminada mientras tanto por otro proceso, se salta autom\xe1ticamente durante el bucle."),(0,t.kt)("p",null,"Tenga en cuenta que cualquier modificaci\xf3n aplicada en la entidad actual debe ser guardada expl\xedcitamente utilizando ",(0,t.kt)("inlineCode",{parentName:"p"},"entity.save()"),"."),(0,t.kt)("h4",o({},{id:"exemplo-5"}),"Exemplo"),(0,t.kt)("p",null,"Se quiser aumentar o sal\xe1rio de todos os empregados brit\xe2nicos em uma sele\xe7\xe3o de entidades:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," var emp : Object\n For each(emp;ds.Employees.query(\"country='UK'\"))\n    emp.salary:=emp.salary*1,03\n    emp.save()\n End for each\n")),(0,t.kt)("h3",o({},{id:"loops-nas-propriedades-de-objetos"}),"Loops nas propriedades de objetos"),(0,t.kt)("p",null,"Cuando se utiliza ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each")," con una ",(0,t.kt)("em",{parentName:"p"},"Expression")," de tipo Object, el par\xe1metro ",(0,t.kt)("em",{parentName:"p"},"Current_Item")," es una variable texto que se llena autom\xe1ticamente con el nombre de la propiedad actualmente procesada."),(0,t.kt)("p",null,"As propriedades do objeto s\xe3o processadas de acordo com sua ordem de cria\xe7\xe3o. Durante o loop, propriedades podem ser adicionadas ou eliminadas no objeto, sem modificar o n\xfamero de loops que permanecer\xe3o no n\xfamero original de propriedades do objeto."),(0,t.kt)("h4",o({},{id:"exemplo-6"}),"Exemplo"),(0,t.kt)("p",null,"Se quiser trocar os nomes para mai\xfasculas no objeto a seguir:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'{\n    "firstname": "gregory",\n    "lastname": "badikora",\n    "age": 20\n}\n')),(0,t.kt)("p",null,"Voc\xea pode escrever:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," For each($property;$vObject)\n    If(Value type($vObject[$property])=Is text)\n       $vObject[$property]:=Uppercase($vObject[$property])\n    End if\n End for each\n")),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{}),'{\n    "firstname": "GREGORY",\n    "lastname": "BADIKORA",\n    "age": 20\n}\n')),(0,t.kt)("h3",o({},{id:"par\xe2metros-begin--end"}),"Par\xe2metros begin / end"),(0,t.kt)("p",null,"Pode definir limites para a itera\xe7\xe3o usando os par\xe2metros opcionais inicio e fim."),(0,t.kt)("p",null,"*","*","Nota:","*","*","los par\xe1metros ",(0,t.kt)("em",{parentName:"p"},"inicio")," y ",(0,t.kt)("em",{parentName:"p"},"fin")," s\xf3lo pueden utilizarse en iteraciones a trav\xe9s de colecciones y selecciones de entidades (se ignoran en las propiedades de objetos)."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"En el par\xe1metro ",(0,t.kt)("em",{parentName:"li"},"begin"),", pase la posici\xf3n del elemento en ",(0,t.kt)("em",{parentName:"li"},"Expression")," en la que se iniciar\xe1 la iteraci\xf3n (se incluye ",(0,t.kt)("em",{parentName:"li"},"begin"),")."),(0,t.kt)("li",{parentName:"ul"},"En el par\xe1metro ",(0,t.kt)("em",{parentName:"li"},"end"),", tambi\xe9n se puede pasar la posici\xf3n del elemento en ",(0,t.kt)("em",{parentName:"li"},"Expression")," en la que se debe detener la iteraci\xf3n (se excluye ",(0,t.kt)("em",{parentName:"li"},"end"),").")),(0,t.kt)("p",null,"Si se omite ",(0,t.kt)("em",{parentName:"p"},"fin")," o si ",(0,t.kt)("em",{parentName:"p"},"fin_es mayor que el n\xfamero de elementos de _Expression"),", se iteran los elementos desde ",(0,t.kt)("em",{parentName:"p"},"inicio")," hasta el \xfaltimo (incluido).\nSi los par\xe1metros ",(0,t.kt)("em",{parentName:"p"},"inicio")," y ",(0,t.kt)("em",{parentName:"p"},"fin")," son valores positivos, representan posiciones reales de elementos en ",(0,t.kt)("em",{parentName:"p"},"Expression"),".\nSi ",(0,t.kt)("em",{parentName:"p"},"comienzo")," es un valor negativo, se recalcula como ",(0,t.kt)("inlineCode",{parentName:"p"},"comienzo:=comienzo+tama\xf1o de la expresi\xf3n")," (se considera como el desplazamiento desde el final de ",(0,t.kt)("em",{parentName:"p"},"Expression"),"). Si el valor calculado es negativo, ",(0,t.kt)("em",{parentName:"p"},"inicio")," toma el valor 0.\n",(0,t.kt)("strong",{parentName:"p"},"Nota:")," aunque inicio sea negativo, la iteraci\xf3n se sigue realizando en el orden est\xe1ndar.\nSi ",(0,t.kt)("em",{parentName:"p"},"fin")," es un valor negativo, se recalcula como ",(0,t.kt)("inlineCode",{parentName:"p"},"fin:=fin+tama\xf1o de la expresi\xf3n")),(0,t.kt)("p",null,"Por exemplo:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"uma cole\xe7\xe3o cont\xe9m 10 elementos (numerada de 0 a 9)"),(0,t.kt)("li",{parentName:"ul"},"begin=-4 > -> begin=-4+10=6 >-> la iteraci\xf3n comienza en el sexto elemento (#5)"),(0,t.kt)("li",{parentName:"ul"},"end=-2 -> end=-2+10=8 -> la iteraci\xf3n se detiene antes del 8\xba elemento (#7), es decir, en el 7\xba elemento.")),(0,t.kt)("h4",o({},{id:"exemplo-7"}),"Exemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' var $col;$col2 : Collection\n $col:=New collection("a";"b";"c";"d";"e")\n $col2:=New collection(1;2;3)\n var $item : Text\n For each($item;$col;0;3)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c"]\n For each($item;$col;-2;-1)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c","d"]\n')),(0,t.kt)("h3",o({},{id:"condi\xe7\xf5es-until-e-while"}),"Condi\xe7\xf5es Until e While"),(0,t.kt)("p",null,"Puede controlar la ejecuci\xf3n de ",(0,t.kt)("inlineCode",{parentName:"p"},"For each... End for each")," a\xf1adiendo una condici\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"Until")," o una condici\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"While")," al bucle. When an ",(0,t.kt)("inlineCode",{parentName:"p"},"Until(condition)")," statement is associated to the loop, the iteration will stop as soon as the condition is evaluated to ",(0,t.kt)("inlineCode",{parentName:"p"},"True"),", whereas when is case of a ",(0,t.kt)("inlineCode",{parentName:"p"},"While(condition)")," statement, the iteration will stop when the condition is first evaluated to ",(0,t.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,t.kt)("p",null,"Pode passar qualquer uma das duas palavras chave em fun\xe7\xe3o das suas necessidades:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"La condici\xf3n ",(0,t.kt)("inlineCode",{parentName:"li"},"Until")," se comprueba al final de cada iteraci\xf3n, por lo que si ",(0,t.kt)("em",{parentName:"li"},"Expression")," no est\xe1 vac\xeda o es nula, el bucle se ejecutar\xe1 al menos una vez."),(0,t.kt)("li",{parentName:"ul"},"La condici\xf3n ",(0,t.kt)("inlineCode",{parentName:"li"},"While")," se prueba al principio de cada iteraci\xf3n, por lo que seg\xfan el resultado de la condici\xf3n, el bucle puede no ejecutarse en absoluto.")),(0,t.kt)("h4",o({},{id:"exemplo-8"}),"Exemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," $colNum:=New collection(1;2;3;4;5;6;7;8;9;10)\n \n $total:=0\n For each($num;$colNum)While($total<30) //tested at the beginning\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 36 (1+2+3+4+5+6+7+8)\n \n $total:=1000\n For each($num;$colNum)Until($total>30) //tested at the end\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 1001 (1000+1)\n")),(0,t.kt)("h2",o({},{id:"break-e-continue"}),"break e continue"),(0,t.kt)("p",null,"Todas las estructuras de bucle anteriores soportan las instrucciones ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"continue"),". Estas instru\xe7\xf5es d\xe3o-lhe mais controlo sobre os loops, permitindo-lhe sair do \u2018loop\u2019 e ignorar a itera\xe7\xe3o atual a qualquer momento."),(0,t.kt)("h3",o({},{id:"break"}),"break"),(0,t.kt)("p",null,"La instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," termina el bucle que la contiene. Control of the program flows to the statement immediately after the body of the loop."),(0,t.kt)("p",null,"Si la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," est\xe1 dentro de un bucle al interior de un ",(0,t.kt)("a",o({parentName:"p"},{href:"#nested-forend-for-looping-structures"}),"bucle anidado")," (bucle dentro de otro bucle), la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"break")," terminar\xe1 el bucle m\xe1s interno."),(0,t.kt)("h4",o({},{id:"exemplo-9"}),"Exemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'For (vCounter;1;100)\n    If ($tab{vCounter}="") //if a condition becomes true\n        break //end of the for loop\n    End if\nEnd for\n')),(0,t.kt)("h3",o({},{id:"continue"}),"continue"),(0,t.kt)("p",null,"La instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"continue")," termina la ejecuci\xf3n de las instrucciones en la iteraci\xf3n actual del bucle actual, y contin\xfaa la ejecuci\xf3n del bucle con la siguiente iteraci\xf3n."),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'var $text : Text\nFor ($i; 0; 9)\n    If ($i=3)\n        continue //go directly to the next iteration\n    End if\n    $text:=$text+String($i)\nEnd for\n// $text="012456789" \n\n')),(0,t.kt)("h2",o({},{id:"return-expression"}),"return {expression}"),(0,t.kt)("details",null,(0,t.kt)("summary",null,"Hist\xf3ria"),(0,t.kt)("table",null,(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",o({parentName:"tr"},{align:null}),"Release"),(0,t.kt)("th",o({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",o({parentName:"tr"},{align:null}),"19 R4"),(0,t.kt)("td",o({parentName:"tr"},{align:null}),"Adicionado"))))),(0,t.kt)("p",null,"La instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"return")," puede ser llamada desde cualquier lugar. Cuando se utiliza una instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"return")," en una funci\xf3n o un m\xe9todo, se detiene la ejecuci\xf3n de la funci\xf3n o del m\xe9todo. O c\xf3digo restante n\xe3o \xe9 executado e o controlo \xe9 devolvido ao autor da chamada."),(0,t.kt)("p",null,"La instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"return")," puede utilizarse para ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/Concepts/parameters#return-expression"}),"devolver un valor")," al llamante."),(0,t.kt)("h4",o({},{id:"exemplo-10"}),"Exemplo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer\n\nWhile (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}u.isMDXComponent=!0}}]);