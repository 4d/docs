"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[45898],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=m(n),c=l,u=s["".concat(p,".").concat(c)]||s[c]||b[c]||r;return n?a.createElement(u,o(o({ref:t},d),{},{components:n})):a.createElement(u,o({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},90063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>p,toc:()=>d});n(67294);var a=n(3905);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const o={id:"BlobClass",title:"Blob"},i=void 0,p={unversionedId:"API/BlobClass",id:"version-19-R7/API/BlobClass",title:"Blob",description:"La clase Blob permite crear y manipular los blob objects (4D.Blob).",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-19-R7/API/BlobClass.md",sourceDirName:"API",slug:"/API/BlobClass",permalink:"/docs/es/API/BlobClass",draft:!1,tags:[],version:"19-R7",frontMatter:{id:"BlobClass",title:"Blob"},sidebar:"docs",previous:{title:"Generalidades - API de clases",permalink:"/docs/es/API/overview"},next:{title:"Class",permalink:"/docs/es/API/ClassClass"}},m={},d=[{value:"Resumen",id:"resumen",level:3},{value:"4D.Blob.new()",id:"4dblobnew",level:2},{value:"Descripci\xf3n",id:"descripci\xf3n",level:4},{value:".size",id:"size",level:2},{value:"Descripci\xf3n",id:"descripci\xf3n-1",level:4},{value:".slice()",id:"slice",level:2},{value:"Descripci\xf3n",id:"descripci\xf3n-2",level:4},{value:"Ejemplo",id:"ejemplo",level:4}],b={toc:d};function s(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",l({},b,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"La clase Blob permite crear y manipular los ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/es/Concepts/blob#blob-types"}),"blob objects")," (",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob"),")."),(0,a.kt)("h3",l({},{id:"resumen"}),"Resumen"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null})))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),(0,a.kt)("a",l({parentName:"td"},{href:"#4dblobnew"}),(0,a.kt)("strong",{parentName:"a"},"4D.Blob.new()")," : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"a"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"a"},"blobScal")," : Blob ) : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"a"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"a"},"blobObj")," : 4D.Blob ) : 4D.Blob"),"\xa0","\xa0","\xa0","\xa0","crea un nuevo objeto ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob")," encapsulando opcionalmente una copia de los datos de otro blob (blob escalar o ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),(0,a.kt)("a",l({parentName:"td"},{href:"#size"}),(0,a.kt)("strong",{parentName:"a"},".size")," : Real"),"\xa0","\xa0","\xa0","\xa0","devuelve el tama\xf1o de un ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob"),", expresado en bytes.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),(0,a.kt)("a",l({parentName:"td"},{href:"#slice"}),(0,a.kt)("strong",{parentName:"a"},".slice()")," : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"a"},".slice"),"( ",(0,a.kt)("em",{parentName:"a"},"start")," : Real ) : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"a"},".slice"),"( ",(0,a.kt)("em",{parentName:"a"},"start")," : Real; ",(0,a.kt)("em",{parentName:"a"},"end")," : Real ) : 4D.Blob"),"\xa0","\xa0","\xa0","\xa0"," crea y devuelve un ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob")," que hace referencia a los datos de un subconjunto del blob en el que se llama. El blob original no se altera.")))),(0,a.kt)("h2",l({},{id:"4dblobnew"}),"4D.Blob.new()"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Hist\xf3rico"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Modificaciones"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"v19 R2"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"4D.Blob.new()")," : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"p"},"blobScal")," : Blob ) : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"p"},"blobObj")," : 4D.Blob ) : 4D.Blob"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Par\xe1metros"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Tipo"),(0,a.kt)("th",l({parentName:"tr"},{align:"center"})),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Descripci\xf3n"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"blob"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Blob o 4D.Blob"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"->"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Blob a copiar")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Result"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"4D.Blob"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"<-"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Nuevo 4D.Blob")))),(0,a.kt)("p",null,"|"),(0,a.kt)("h4",l({},{id:"descripci\xf3n"}),"Descripci\xf3n"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob.new")," crea un nuevo objeto ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob")," encapsulando opcionalmente una copia de los datos de otro blob (blob escalar o ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob"),")."),(0,a.kt)("p",null,"Si el par\xe1metro ",(0,a.kt)("inlineCode",{parentName:"p"},"blob")," se omite, el m\xe9todo devuelve un 4D.Blob vac\xedo."),(0,a.kt)("h2",l({},{id:"size"}),".size"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},".size")," : Real"),(0,a.kt)("h4",l({},{id:"descripci\xf3n-1"}),"Descripci\xf3n"),(0,a.kt)("p",null,"La propiedad ",(0,a.kt)("inlineCode",{parentName:"p"},".size")," devuelve el tama\xf1o de un ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob"),", expresado en bytes."),(0,a.kt)("h2",l({},{id:"slice"}),".slice()"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Hist\xf3rico"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Modificaciones"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"v19 R2"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},".slice()")," : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},".slice"),"( ",(0,a.kt)("em",{parentName:"p"},"start")," : Real ) : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},".slice"),"( ",(0,a.kt)("em",{parentName:"p"},"start")," : Real; ",(0,a.kt)("em",{parentName:"p"},"end")," : Real ) : 4D.Blob"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Par\xe1metros"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Tipo"),(0,a.kt)("th",l({parentName:"tr"},{align:"center"})),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Descripci\xf3n"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"start"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Real"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"->"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"\xedndice del primer byte a incluir en el nuevo ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"end"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Real"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"->"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"\xedndice del primer byte que no se incluir\xe1 en el nuevo ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Result"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"4D.Blob"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"<-"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Nuevo ",(0,a.kt)("inlineCode",{parentName:"td"},"4D.Blob"))))),(0,a.kt)("p",null,"|"),(0,a.kt)("h4",l({},{id:"descripci\xf3n-2"}),"Descripci\xf3n"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".slice()"),"  crea y devuelve un ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob")," que hace referencia a los datos de un subconjunto del blob en el que se llama. El blob original no se altera.\nEl par\xe1metro ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," es un \xedndice en el blob que indica el primer byte a incluir en el nuevo ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob"),". Si indica un valor negativo, 4D lo trata como un desplazamiento desde el final del blob hacia el inicio. Por ejemplo, -10 ser\xeda el d\xe9cimo desde el \xfaltimo byte del blob. El valor por defecto es 0. Si indica un valor de inicio mayor al tama\xf1o del blob fuente, el tama\xf1o del ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob")," devuelto es 0, y no contiene datos."),(0,a.kt)("p",null,"El par\xe1metro ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," es un \xedndice en el blob que indica el primer byte que no se incluir\xe1 en el nuevo ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob")," (es decir, el byte situado exactamente en este \xedndice no se incluye). Si indica un valor negativo, 4D lo trata como un desplazamiento desde el final del blob hacia el inicio. Por ejemplo, -10 ser\xeda el d\xe9cimo desde el \xfaltimo byte del blob. El valor por defecto es el tama\xf1o del blob."),(0,a.kt)("h4",l({},{id:"ejemplo"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'var $myBlob : 4D.Blob\n\n// Store text in a 4D.Blob\nCONVERT FROM TEXT("Hello, World!"; "UTF-8"; $myBlob)\n$is4DBlob:=OB Instance of($myBlob; 4D.Blob);   //True\n\n$myString:=Convert to text($myBlob; "UTF-8")\n// $myString contains "Hello, World!"\n\n// Create a new 4D.Blob from $myBlob\n$myNewBlob:=$myBlob.slice(0; 5)\n\n$myString:=Convert to text($myNewBlob; "UTF-8")\n// $myString contains "Hello"\n\n// Crear un nuevo 4D.Blob a partir de $myBlob\n$myNewBlob:=$myBlob.slice(0; 5)\n\n$myString:=Convert to text($myNewBlob; "UTF-8")\n// $myString contiene "Hello"\n')))}s.isMDXComponent=!0}}]);