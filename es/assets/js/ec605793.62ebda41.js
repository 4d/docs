"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6846"],{81669:function(e,n,o){o.r(n),o.d(n,{frontMatter:()=>l,default:()=>u,toc:()=>d,metadata:()=>a,assets:()=>i,contentTitle:()=>t});var a=JSON.parse('{"id":"Concepts/blob","title":"BLOB","description":"- Un campo, variable o expresi\xf3n BLOB (Binary Large OBjects) es una serie contigua de bytes que puede ser tratada como un objeto completo o cuyos bytes pueden ser direccionados individualmente. Un BLOB puede estar vac\xedo (longitud nula) o contener hasta 2147483647 bytes (2 GB).","source":"@site/i18n/es/docusaurus-plugin-content-docs/version-18/Concepts/dt_blob.md","sourceDirName":"Concepts","slug":"/Concepts/blob","permalink":"/docs/es/18/Concepts/blob","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fdt_blob.md%20(18)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"18","frontMatter":{"id":"blob","title":"BLOB"},"sidebar":"docs","previous":{"title":"Tipos de datos","permalink":"/docs/es/18/Concepts/data-types"},"next":{"title":"Boolean","permalink":"/docs/es/18/Concepts/boolean"}}'),s=o(785893),r=o(250065);let l={id:"blob",title:"BLOB"},t=void 0,i={},d=[{value:"Paso de par\xe1metros, punteros y resultados de funciones",id:"paso-de-par\xe1metros-punteros-y-resultados-de-funciones",level:2},{value:"Asignaci\xf3n",id:"asignaci\xf3n",level:2},{value:"Direccionar el contenido de un BLOB",id:"direccionar-el-contenido-de-un-blob",level:2}];function c(e){let n={blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Un campo, variable o expresi\xf3n BLOB (Binary Large OBjects) es una serie contigua de bytes que puede ser tratada como un objeto completo o cuyos bytes pueden ser direccionados individualmente. Un BLOB puede estar vac\xedo (longitud nula) o contener hasta 2147483647 bytes (2 GB)."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Por defecto, 4D define el tama\xf1o m\xe1ximo de los blob en 2GB, pero este l\xedmite de tama\xf1o puede ser menor dependiendo de su sistema operativo y del espacio disponible."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Un BLOB se carga en la memoria en su totalidad. Una variable BLOB se mantiene y existe s\xf3lo en la memoria. Un campo BLOB se carga en memoria desde el disco, como el resto del registro al que pertenece."}),"\n",(0,s.jsxs)(n.li,{children:["Al igual que los otros tipos de campo que pueden retener una gran cantidad de datos (como el tipo de campo Imagen), los campos BLOB no se duplican en la memoria cuando se modifica un registro. Por consiguiente, el resultado devuelto por los comandos ",(0,s.jsx)(n.code,{children:"Old"})," y ",(0,s.jsx)(n.code,{children:"Modified"})," no es significativo cuando se aplica a un campo BLOB."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"paso-de-par\xe1metros-punteros-y-resultados-de-funciones",children:"Paso de par\xe1metros, punteros y resultados de funciones"}),"\n",(0,s.jsx)(n.p,{children:"Los BLOBs en 4D pueden pasarse como par\xe1metros a los comandos 4D o a las rutinas de los plugins que esperan par\xe1metros BLOB. Los BLOBS tambi\xe9n pueden ser pasados como par\xe1metros a un m\xe9todo de usuario o ser devueltos como resultado de una funci\xf3n."}),"\n",(0,s.jsx)(n.p,{children:"Para pasar un BLOB a sus propios m\xe9todos, tambi\xe9n puede definir un puntero al BLOB y pasar el puntero como par\xe1metro."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplos:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"  ` Declarar una variable de tipo BLOB\n C_BLOB(anyBlobVar)\n  ` El BLOB se pasa como par\xe1metro a un comando 4D\n SET BLOB SIZE(anyBlobVar;1024*1024)\n  El BLOB se pasa como par\xe1metro a una rutina externa\n $errCode:=Haga algo con este BLOB(anyBlobVar)\n  ` El BLOB se pasa como par\xe1metro a un m\xe9todo que devuelve un BLOB\n C_BLOB(recuperarBlob)\n recuperarBlob:=Rellenar_Blob(cualquierBlobVar)\n  ` Se pasa un puntero al BLOB como par\xe1metro a un m\xe9todo de usuario\n COMPUTE BLOB(->anyBlobVar)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Nota para los desarrolladores de plugins:"}),' un par\xe1metro BLOB se declara como "&O" (la letra "O", no el d\xedgito "0").']}),"\n",(0,s.jsx)(n.h2,{id:"asignaci\xf3n",children:"Asignaci\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"Se pueden asignar BLOBs entre s\xed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ejemplo:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"  ` Declarar dos variables de tipo BLOB\n C_BLOB(vBlobA;vBlobB)\n  ` Fijar el tama\xf1o del primer BLOB en 10K\n SET BLOB SIZE(vBlobA;10*1024)\n  ` Asignar el primer BLOB al segundo\n vBlobB:=vBlobA\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sin embargo, no se puede aplicar ning\xfan operador a los BLOB."}),"\n",(0,s.jsx)(n.h2,{id:"direccionar-el-contenido-de-un-blob",children:"Direccionar el contenido de un BLOB"}),"\n",(0,s.jsx)(n.p,{children:"Cada byte de un BLOB se puede direccionar individualmente utilizando los s\xedmbolos de corchetes {...}. Dentro de un BLOB, los bytes se numeran de 0 a N-1, donde N es el tama\xf1o del BLOB. Ejemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"  ` Declarar una variable de tipo BLOB\n C_BLOB(vBlob)\n  ` Fijar el tama\xf1o del BLOB en 256 bytes\n SET BLOB SIZE(vBlob;256)\n  ` El bucle siguiente inicializa los 256 bytes del BLOB en cero\n For(vByte;0;BLOB size(vBlob)-1)\n    vBlob{vByte}:=0\n End for\n"})}),"\n",(0,s.jsx)(n.p,{children:"Como se pueden direccionar todos los bytes de un BLOB de forma individual, se puede almacenar lo que se quiera en un campo o variable BLOB."})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,n,o){o.d(n,{Z:()=>t,a:()=>l});var a=o(667294);let s={},r=a.createContext(s);function l(e){let n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);