"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[82946],{603905:(e,o,a)=>{a.d(o,{Zo:()=>p,kt:()=>m});var r=a(667294);function n(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function s(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);o&&(r=r.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,r)}return a}function t(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?s(Object(a),!0).forEach((function(o){n(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function l(e,o){if(null==e)return{};var a,r,n=function(e,o){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],o.indexOf(a)>=0||(n[a]=e[a]);return n}(e,o);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var o=r.useContext(i),a=o;return e&&(a="function"==typeof e?e(o):t(t({},o),e)),a},p=function(e){var o=c(e.components);return r.createElement(i.Provider,{value:o},e.children)},d={inlineCode:"code",wrapper:function(e){var o=e.children;return r.createElement(r.Fragment,{},o)}},u=r.forwardRef((function(e,o){var a=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,k=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return a?r.createElement(k,t(t({ref:o},p),{},{components:a})):r.createElement(k,t({ref:o},p))}));function m(e,o){var a=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var s=a.length,t=new Array(s);t[0]=u;var l={};for(var i in o)hasOwnProperty.call(o,i)&&(l[i]=o[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,t[1]=l;for(var c=2;c<s;c++)t[c]=a[c];return r.createElement.apply(null,t)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},537264:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>p});a(667294);var r=a(603905);function n(){return n=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var a=arguments[o];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},n.apply(this,arguments)}function s(e,o){if(null==e)return{};var a,r,n=function(e,o){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],o.indexOf(a)>=0||(n[a]=e[a]);return n}(e,o);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}const t={id:"processes",title:"Procesos y Workers"},l=void 0,i={unversionedId:"Develop/processes",id:"version-20-R4/Develop/processes",title:"Procesos y Workers",description:"Multitarea en 4D es la posibilidad de ejecutar simult\xe1neamente varias operaciones de bases de datos distintas. Estas operaciones son llamadas procesos. M\xfaltiples procesos equivalen a tener m\xfaltiples usuarios trabajando en el mismo ordenador, cada uno trabajando en su propia tarea. Esto significa principalmente que un m\xe9todo puede ser ejecutado como una tarea distinta de base de datos.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-20-R4/Develop/processes.md",sourceDirName:"Develop",slug:"/Develop/processes",permalink:"/docs/es/20-R4/Develop/processes",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Develop%2Fprocesses.md%20(20-R4)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R4",frontMatter:{id:"processes",title:"Procesos y Workers"},sidebar:"docs",previous:{title:"ZIPFolder",permalink:"/docs/es/20-R4/API/ZipFolderClass"},next:{title:"Procesos apropiativos",permalink:"/docs/es/20-R4/Develop/preemptive-processes"}},c={},p=[{value:"Crear y borrar procesos",id:"crear-y-borrar-procesos",level:2},{value:"Elementos de un proceso",id:"elementos-de-un-proceso",level:2},{value:"Elementos del lenguaje",id:"elementos-del-lenguaje",level:3},{value:"Elementos de la interfaz",id:"elementos-de-la-interfaz",level:3},{value:"Procesos globales y locales",id:"procesos-globales-y-locales",level:2},{value:"4D Server",id:"4d-server",level:3},{value:"Procesos worker",id:"procesos-worker",level:2},{value:"Utilizar workers",id:"utilizar-workers",level:3},{value:"Identificaci\xf3n de los procesos workers",id:"identificaci\xf3n-de-los-procesos-workers",level:3},{value:"Ver tambi\xe9n",id:"ver-tambi\xe9n",level:3}],d={toc:p};function u(e){var{components:o}=e,t=s(e,["components"]);return(0,r.kt)("wrapper",n({},d,t,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Multitarea en 4D es la posibilidad de ejecutar simult\xe1neamente varias operaciones de bases de datos distintas. Estas operaciones son llamadas ",(0,r.kt)("strong",{parentName:"p"},"procesos"),". M\xfaltiples procesos equivalen a tener m\xfaltiples usuarios trabajando en el mismo ordenador, cada uno trabajando en su propia tarea. Esto significa principalmente que un m\xe9todo puede ser ejecutado como una tarea distinta de base de datos."),(0,r.kt)("p",null,"Si escribe c\xf3digo hilo seguro, puede crear ",(0,r.kt)("a",n({parentName:"p"},{href:"/docs/es/20-R4/Develop/preemptive-processes"}),(0,r.kt)("strong",{parentName:"a"},"procesos apropiativos"))," que podr\xe1n aprovechar los ordenadores multi n\xfacleo en sus aplicaciones compiladas, para una ejecuci\xf3n m\xe1s r\xe1pida."),(0,r.kt)("admonition",n({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"La aplicaci\xf3n 4D crea procesos para sus propias necesidades, por ejemplo el proceso Principal para gestionar las ventanas de visualizaci\xf3n de la interfaz de usuario, el proceso de Dise\xf1o para gestionar las ventanas y editores del entorno de Dise\xf1o (note que ambos son ",(0,r.kt)("a",n({parentName:"p"},{href:"#worker-processes"}),"procesos worker"),"), el proceso Servidor Web, el proceso Gestor de Cach\xe9, el proceso de Indexaci\xf3n, o el proceso On Event Manager.")),(0,r.kt)("h2",n({},{id:"crear-y-borrar-procesos"}),"Crear y borrar procesos"),(0,r.kt)("p",null,"Hay varias formas de crear un nuevo proceso:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ejecute un m\xe9todo en el entorno Dise\xf1o despu\xe9s de seleccionar la casilla ","*","*","Nuevo proceso ","*","*",' en la caja de di\xe1logo "Ejecutar M\xe9todo". El m\xe9todo elegido en la caja de di\xe1logo Ejecutar m\xe9todo es el m\xe9todo proceso.'),(0,r.kt)("li",{parentName:"ul"},"Utilice el comando ",(0,r.kt)("a",n({parentName:"li"},{href:"https://doc.4d.com/4dv20/help/command/en/page317.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"New process")),". El m\xe9todo pasado como un par\xe1metro al comando ",(0,r.kt)("inlineCode",{parentName:"li"},"New process")," es el m\xe9todo proceso."),(0,r.kt)("li",{parentName:"ul"},"Utilice el comando ",(0,r.kt)("a",n({parentName:"li"},{href:"https://doc.4d.com/4dv20/help/command/en/page373.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"Execute on server"))," para crear un procedimiento almacenado en el servidor. El m\xe9todo pasado como par\xe1metro del comando es el m\xe9todo proceso."),(0,r.kt)("li",{parentName:"ul"},"Utilice el comando ",(0,r.kt)("a",n({parentName:"li"},{href:"https://doc.4d.com/4dv20/help/command/en/page1389.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"CALL WORKER")),". Si el proceso del worker no existe, se crea.")),(0,r.kt)("admonition",n({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"En las aplicaciones de escritorio, los procesos pueden ejecutarse seleccionando comandos de men\xfa. En el ",(0,r.kt)("a",n({parentName:"p"},{href:"/docs/es/20-R4/Menus/creating"}),"Editor de Barra de men\xfa"),", seleccione el comando de men\xfa y haga clic en la casilla de verificaci\xf3n ",(0,r.kt)("strong",{parentName:"p"},"Iniciar un nuevo proceso"),". El m\xe9todo asociado al comando de men\xfa es el m\xe9todo de proceso.")),(0,r.kt)("p",null,"Un proceso puede borrarse en las siguientes condiciones (las dos primeras son autom\xe1ticas):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Cuando el m\xe9todo proceso termina de ejecutarse"),(0,r.kt)("li",{parentName:"ul"},"Cuando el usuario sale de la aplicaci\xf3n"),(0,r.kt)("li",{parentName:"ul"},"Si detienes el proceso de forma formal o utiliza el bot\xf3n ",(0,r.kt)("strong",{parentName:"li"},"Abortar")," en el depurador o en el Explorador de Ejecuci\xf3n"),(0,r.kt)("li",{parentName:"ul"},"Si llama al comando ",(0,r.kt)("a",n({parentName:"li"},{href:"https://doc.4d.com/4dv20/help/command/en/page1390.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"KILL WORKER"))," (s\xf3lo para borrar un proceso worker).")),(0,r.kt)("p",null,'Un proceso puede crear otro proceso. Los procesos no est\xe1n organizados jer\xe1rquicamente: todos los procesos son iguales, independientemente del proceso a partir del cual se hayan creado. Una vez que el proceso "padre" crea un proceso "hijo", el proceso hijo continuar\xe1 independientemente de si el proceso padre sigue ejecut\xe1ndose o no.'),(0,r.kt)("h2",n({},{id:"elementos-de-un-proceso"}),"Elementos de un proceso"),(0,r.kt)("p",null,"Cada proceso contiene elementos espec\xedficos que puede manejar independientemente de otros procesos."),(0,r.kt)("h3",n({},{id:"elementos-del-lenguaje"}),"Elementos del lenguaje"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Variables: cada proceso tiene sus propias ",(0,r.kt)("a",n({parentName:"li"},{href:"../Concepts/variables#variables-de-proceso"}),"variables de proceso"),". Las variables proceso solo se reconocen dentro del dominio de su proceso nativo."),(0,r.kt)("li",{parentName:"ul"},"Conjuntos de proceso: cada proceso tiene sus propios conjuntos de proceso. ",(0,r.kt)("inlineCode",{parentName:"li"},"LockedSet")," es un conjunto de procesos. Los conjuntos proceso se borran en cuanto termina el m\xe9todo proceso."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",n({parentName:"li"},{href:"../Concepts/error-handling#installing-an-error-handling-method"}),"M\xe9todo de gesti\xf3n de errores"),": cada proceso puede tener su propio m\xe9todo de gesti\xf3n de errores."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",n({parentName:"li"},{href:"../Debugging/debugger#calling-the-debugger"}),"Ventana del depurador"),": cada proceso puede tener su propia ventana Depurador.")),(0,r.kt)("h3",n({},{id:"elementos-de-la-interfaz"}),"Elementos de la interfaz"),(0,r.kt)("p",null,"Los elementos de interfaz se utilizan en ",(0,r.kt)("a",n({parentName:"p"},{href:"../category/desktop-applications"}),"Aplicaciones de escritorio"),". Consisten en lo siguiente:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",n({parentName:"li"},{href:"/docs/es/20-R4/Menus/creating"}),"Barra de men\xfas"),": cada proceso puede tener su propia barra de men\xfas actual. La barra de men\xfas del proceso del primer plano es la barra de men\xfas actual de la aplicaci\xf3n."),(0,r.kt)("li",{parentName:"ul"},"Una o m\xe1s ventanas: cada proceso puede tener varias ventanas abiertas simult\xe1neamente. Por el contrario, algunos procesos no tienen ventanas."),(0,r.kt)("li",{parentName:"ul"},"Una ventana activa (primer plano): aunque un proceso puede tener varias ventanas abiertas simult\xe1neamente, cada proceso tiene s\xf3lo una ventana activa. Para tener m\xe1s de una ventana activa, debe iniciar m\xe1s de un proceso."),(0,r.kt)("li",{parentName:"ul"},"Formularios de entrada y salida: los formularios de entrada y salida predeterminados pueden definirse por procedimiento para cada tabla de cada proceso.")),(0,r.kt)("admonition",n({},{type:"info"}),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Los procesos no incluyen barras de men\xfa por defecto, lo que significa que los atajos de men\xfa est\xe1ndar de ",(0,r.kt)("strong",{parentName:"li"},"Edici\xf3n")," (en particular, cortar/copiar/pegar) no est\xe1n disponibles en las ventanas de proceso. Cuando se llama a los di\xe1logos o a los editores 4D (editor de formularios, editor de b\xfasquedas, Request, etc.) desde un proceso, si desea que el usuario pueda beneficiarse de atajos de teclado como copiar/pegar, debe asegurarse de que el equivalente a un men\xfa ",(0,r.kt)("strong",{parentName:"li"},"Edici\xf3n")," est\xe9 instalado en el proceso."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",n({parentName:"li"},{href:"/docs/es/20-R4/Develop/preemptive-processes"}),"Procesos apropiativos")," y los procesos que se ejecutan en el servidor (procedimientos almacenados) no deben contener elementos de la interfaz."))),(0,r.kt)("admonition",n({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Cada proceso tiene tambi\xe9n una selecci\xf3n actual y un registro actual por tabla. Para m\xe1s informaci\xf3n sobre estos conceptos, consulte ",(0,r.kt)("a",n({parentName:"p"},{href:"https://doc.4d.com/4Dv20/4D/20.1/Displaying-and-selecting-records.300-6602144.en.html"}),"doc.4d.com"),".")),(0,r.kt)("h2",n({},{id:"procesos-globales-y-locales"}),"Procesos globales y locales"),(0,r.kt)("p",null,"El alcance de los procesos puede ser local o global. Por defecto, todos los procesos son globales."),(0,r.kt)("p",null,"Los procesos globales pueden realizar cualquier operaci\xf3n, incluido el acceso y la manipulaci\xf3n de datos. En la mayor\xeda de los casos, querr\xe1 utilizar procesos globales. Los procesos locales s\xf3lo deben utilizarse para operaciones que no accedan a datos. Por ejemplo, puede utilizar un proceso local para ejecutar un m\xe9todo de gesti\xf3n de eventos o para controlar elementos de la interfaz como ventanas flotantes."),(0,r.kt)("p",null,"Especifica que un proceso es local en alcance a trav\xe9s de su nombre. El nombre del proceso local debe comenzar con un signo de d\xf3lar ($)."),(0,r.kt)("admonition",n({},{type:"warning"}),(0,r.kt)("p",{parentName:"admonition"},"Si intenta acceder a los datos desde un proceso local, accede a los datos por medio del proceso principal (proceso #1) y toma el riesgo de entrar en conflicto con las operaciones efectuadas en ese proceso.")),(0,r.kt)("h3",n({},{id:"4d-server"}),"4D Server"),(0,r.kt)("p",null,"El uso de procesos locales del lado del Cliente para operaciones que no requieran acceso a datos, reserva m\xe1s tiempo de procesamiento para tareas que requieren el servidor intensivamente. Cuando crea un proceso local para el cliente (utilizando por ejemplo New process), solo existe del lado del cliente."),(0,r.kt)("p",null,'Cuando crea un proceso global, se crea un proceso "doble" en el servidor, que consume recursos del servidor, para manejar el acceso a los datos y el contexto de la base de datos. Sin embargo, por razones de optimizaci\xf3n, el proceso doble se crea solo si es necesario, es decir, la primera vez que el proceso global necesita acceder a los datos.'),(0,r.kt)("h2",n({},{id:"procesos-worker"}),"Procesos worker"),(0,r.kt)("p",null,"Un proceso Worker es una forma sencilla y poderosa de intercambiar informaci\xf3n entre procesos. Esta funcionalidad se basa en un sistema de mensajer\xeda as\xedncrono que permite a los procesos y formularios ser llamados y se les pide ejecutar m\xe9todos con par\xe1metros en su propio contexto."),(0,r.kt)("p",null,'Un worker puede ser "contratado" por cualquier proceso (utilizando el comando ',(0,r.kt)("a",n({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1389.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"CALL WORKER")),") para ejecutar m\xe9todos de proyecto con par\xe1metros en su propio contexto, permitiendo as\xed el acceso a informaci\xf3n compartida."),(0,r.kt)("admonition",n({},{type:"info"}),(0,r.kt)("p",{parentName:"admonition"},"En aplicaciones de escritorio, un m\xe9todo de proyecto tambi\xe9n puede ser ejecutado con par\xe1metros en el contexto de cualquier formulario utilizando el comando ",(0,r.kt)("a",n({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1391.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"CALL FORM")),".")),(0,r.kt)("p",null,"Esta funcionalidad responde a las siguientes necesidades en materia de comunicaci\xf3n entre procesos en 4D:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ya que son compatibles con ambos procesos cooperativos y apropiativos, son la soluci\xf3n perfecta para la comunicaci\xf3n entre procesos en los ",(0,r.kt)("a",n({parentName:"li"},{href:"/docs/es/20-R4/Develop/preemptive-processes"}),"procesos apropiativos")," (",(0,r.kt)("a",n({parentName:"li"},{href:"https://doc.4d.com/4Dv20/4D/20/Deprecated-or-Removed-Features.100-6259787.en.html#5868705"}),"las variables interproceso son obsoletas")," y no est\xe1n permitidas en los procesos apropiativos)."),(0,r.kt)("li",{parentName:"ul"},"Ofrecen una alternativa sencilla a los sem\xe1foros, que puede ser engorrosos de definir y dif\xedciles de usar")),(0,r.kt)("admonition",n({},{type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Aunque se han dise\xf1ado principalmente para la comunicaci\xf3n entre procesos en el contexto de los procesos apropiativos, ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," y",(0,r.kt)("inlineCode",{parentName:"p"},"CALL FORM")," se pueden utilizar con los procesos cooperativos.")),(0,r.kt)("h3",n({},{id:"utilizar-workers"}),"Utilizar workers"),(0,r.kt)("p",null,"Un worker se utiliza para pedir a un proceso que ejecute m\xe9todos proyecto. Un worker consiste de:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"un nombre \xfanico (",(0,r.kt)("em",{parentName:"li"},"atenci\xf3n: el nombre es sensible a may\xfasculas"),"), tambi\xe9n utilizado para nombrar su proceso asociado"),(0,r.kt)("li",{parentName:"ul"},"un proceso asociado, que puede existir o no en un momento dado"),(0,r.kt)("li",{parentName:"ul"},"un buz\xf3n de mensajes"),(0,r.kt)("li",{parentName:"ul"},"un m\xe9todo de inicio (opcional)")),(0,r.kt)("p",null,"Se le pide a un worker ejecutar un m\xe9todo proyecto mediante una llamada al comando ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER"),". El worker y su buz\xf3n de mensajes se crean en el primer uso; su proceso asociado tambi\xe9n se ejecuta autom\xe1ticamente en el primer uso. Si el proceso worker muere luego, el buz\xf3n de mensajes permanece abierto y cualquier nuevo mensaje en el buz\xf3n iniciar\xe1 un nuevo proceso worker."),(0,r.kt)("p",null,"La siguiente animaci\xf3n ilustra esta secuencia:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(531289).Z,width:"1128",height:"684"})),(0,r.kt)("p",null,"A diferencia de un proceso creado con el comando ",(0,r.kt)("inlineCode",{parentName:"p"},"New process"),", un proceso worker ",(0,r.kt)("strong",{parentName:"p"},"permanece vivo despu\xe9s de que termine la ejecuci\xf3n del m\xe9todo proceso"),". Esto significa que todas las ejecuciones del m\xe9todo para el mismo worker se llevar\xe1n a cabo en el mismo proceso, que mantiene toda la informaci\xf3n de estado del proceso (variables de proceso, registro actual y selecci\xf3n actual...). En consecuencia, los m\xe9todos ejecutados sucesivamente tendr\xe1n acceso y de este modo compartir\xe1n la misma informaci\xf3n, lo que permite las comunicaciones entre procesos. El buz\xf3n de mensajes del worker maneja las llamadas sucesivas de forma as\xedncrona."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," encapsula tanto el nombre del m\xe9todo como los argumentos del comando en un mensaje que se publica en el buz\xf3n de mensajes del worker. El proceso worker se inicia a continuaci\xf3n, si no existe, y se pide ejecutar el mensaje. Esto significa que ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," normalmente volver\xe1 antes de que el m\xe9todo se ejecute realmente (el procesamiento es as\xedncrono). Por esta raz\xf3n, ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," no devuelve ning\xfan valor. Si necesita un worker para enviar informaci\xf3n al proceso que lo llam\xf3 (retrollamada), es necesario utilizar ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," nuevamente para pasar al llamante la informaci\xf3n necesaria. Por supuesto, en este caso, el propio llamante debe ser un worker."),(0,r.kt)("p",null,"No es posible utilizar ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," para ejecutar un m\xe9todo en un proceso creado por el comando ",(0,r.kt)("inlineCode",{parentName:"p"},"New process"),". S\xf3lo los procesos worker tienen un buz\xf3n de mensajes y, por tanto, pueden ser llamados por ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER"),". Tenga en cuenta que un proceso creado por ",(0,r.kt)("inlineCode",{parentName:"p"},"New process")," puede llamar a un worker, pero no puede llamarse de nuevo."),(0,r.kt)("p",null,"Los procesos worker se pueden crear en 4D Server a trav\xe9s de procedimientos almacenados: por ejemplo, puede utilizar el comando ",(0,r.kt)("inlineCode",{parentName:"p"},"Execute on server")," para ejecutar un m\xe9todo que llama al comando ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER"),"."),(0,r.kt)("p",null,"Un proceso worker se cierra mediante una llamada al comando ",(0,r.kt)("a",n({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1390.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"KILL WORKER")),", que vac\xeda el buz\xf3n de mensajes del worker y pide al proceso asociado que deje de procesar mensajes y termine su ejecuci\xf3n actual en cuanto termine la tarea actual."),(0,r.kt)("p",null,"El m\xe9todo de inicio de un worker es el m\xe9todo utilizado para crear el worker (primer uso). Si ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER")," es llamado con un par\xe1metro ",(0,r.kt)("em",{parentName:"p"},"method")," vac\xedo, entonces el m\xe9todo de inicio se reutiliza autom\xe1ticamente como m\xe9todo para ejecutar."),(0,r.kt)("p",null,"El proceso principal creado por 4D al abrir una base de datos para los modos usuario y aplicaci\xf3n es un proceso worker y puede ser llamado utilizando ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER"),". Tenga en cuenta que el nombre del proceso principal puede variar dependiendo del idioma de localizaci\xf3n de 4D, pero siempre tiene el n\xfamero de proceso 1; como resultado, es m\xe1s conveniente designarlo por el n\xfamero de proceso en lugar del nombre de proceso cuando se llama a ",(0,r.kt)("inlineCode",{parentName:"p"},"CALL WORKER"),"."),(0,r.kt)("h3",n({},{id:"identificaci\xf3n-de-los-procesos-workers"}),"Identificaci\xf3n de los procesos workers"),(0,r.kt)("p",null,"Todos los procesos worker, excepto el proceso principal, tienen el tipo de proceso ",(0,r.kt)("inlineCode",{parentName:"p"},"Worker process")," (5) devuelto por el comando ",(0,r.kt)("a",n({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page336.html"}),(0,r.kt)("inlineCode",{parentName:"a"},"PROCESS PROPERTIES")),"."),(0,r.kt)("p",null,(0,r.kt)("a",n({parentName:"p"},{href:"../ServerWindow/processes#process-type"}),"Iconos espec\xedficos")," identifican los procesos worker."),(0,r.kt)("h3",n({},{id:"ver-tambi\xe9n"}),"Ver tambi\xe9n"),(0,r.kt)("p",null,"Para m\xe1s informaci\xf3n, consulte ",(0,r.kt)("a",n({parentName:"p"},{href:"https://blog.4d.com/4d-summit-2016-laurent-esnault-presents-workers-and-ui-in-preemptive-mode/"}),"este art\xedculo de blog")," sobre c\xf3mo utilizar los workers."))}u.isMDXComponent=!0},531289:(e,o,a)=>{a.d(o,{Z:()=>r});const r=a.p+"assets/images/WorkerAnimation-1bf9fb3826432ab21e7c2bec57036409.gif"}}]);