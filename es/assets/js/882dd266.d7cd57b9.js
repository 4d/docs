"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[22246],{603905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>m});var n=o(667294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(o),m=a,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||r;return o?n.createElement(h,s(s({ref:t},d),{},{components:o})):n.createElement(h,s({ref:t},d))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,s=new Array(r);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=o[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},79398:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>d});o(667294);var n=o(603905);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},a.apply(this,arguments)}function r(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}const s={id:"shared",title:"Objetos y colecciones compartidos"},i=void 0,c={unversionedId:"Concepts/shared",id:"version-20-R5/Concepts/shared",title:"Objetos y colecciones compartidos",description:"Shared objects and shared collections are specific objects and collections whose contents are shared between processes. In contrast to interprocess variables, shared objects and shared collections have the advantage of being compatible with preemptive 4D processes: they can be passed by reference as parameters to commands such as New process or CALL WORKER.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-20-R5/Concepts/shared.md",sourceDirName:"Concepts",slug:"/Concepts/shared",permalink:"/docs/es/Concepts/shared",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fshared.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"shared",title:"Objetos y colecciones compartidos"},sidebar:"docs",previous:{title:"Par\xe1metros",permalink:"/docs/es/Concepts/parameters"},next:{title:"Clases",permalink:"/docs/es/Concepts/classes"}},l={},d=[{value:"Utilizaci\xf3n de objetos o colecciones compartidos",id:"utilizaci\xf3n-de-objetos-o-colecciones-compartidos",level:2},{value:"Modificaci\xf3n",id:"modificaci\xf3n",level:3},{value:"Lectura",id:"lectura",level:3},{value:"Duplication",id:"duplication",level:3},{value:"Storage",id:"storage",level:3},{value:"Use...End use",id:"useend-use",level:2},{value:"Ejemplo 1",id:"ejemplo-1",level:2},{value:"Ejemplo 2",id:"ejemplo-2",level:2}],p={toc:d};function u(e){var{components:t}=e,o=r(e,["components"]);return(0,n.kt)("wrapper",a({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Shared objects")," and ",(0,n.kt)("strong",{parentName:"p"},"shared collections")," are specific ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/es/Concepts/object"}),"objects")," and ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/es/Concepts/collection"}),"collections")," whose contents are shared between processes. In contrast to ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/es/Concepts/variables#interprocess-variables"}),"interprocess variables"),", shared objects and shared collections have the advantage of being compatible with ",(0,n.kt)("strong",{parentName:"p"},"preemptive 4D processes"),": they can be passed by reference as parameters to commands such as ",(0,n.kt)("a",a({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page317.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"New process"))," or ",(0,n.kt)("a",a({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1389.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"CALL WORKER")),"."),(0,n.kt)("p",null,"Shared objects and shared collections are stored in standard ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/es/Concepts/object"}),(0,n.kt)("inlineCode",{parentName:"a"},"Object"))," and ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/es/Concepts/collection"}),(0,n.kt)("inlineCode",{parentName:"a"},"Collection"))," type variables, but must be instantiated using specific commands:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"to create a shared object, use the ",(0,n.kt)("a",a({parentName:"li"},{href:"https://doc.4d.com/4dv20/help/command/en/page1471.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"New shared object"))," command or call the ",(0,n.kt)("a",a({parentName:"li"},{href:"/docs/es/API/ClassClass#new"}),(0,n.kt)("inlineCode",{parentName:"a"},"new()"))," function of a ",(0,n.kt)("a",a({parentName:"li"},{href:"/docs/es/Concepts/classes#shared-classes"}),"shared class"),","),(0,n.kt)("li",{parentName:"ul"},"to create a shared collection, use the ",(0,n.kt)("a",a({parentName:"li"},{href:"/docs/es/API/CollectionClass#new-shared-collection"}),(0,n.kt)("inlineCode",{parentName:"a"},"New shared collection"))," command.")),(0,n.kt)("admonition",a({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Los objetos y colecciones compartidos pueden definirse como propiedades de objetos o colecciones est\xe1ndar (no compartidos).")),(0,n.kt)("p",null,"In order to modify a shared object/collection, the ",(0,n.kt)("strong",{parentName:"p"},"Use...End use")," structure must be called. Reading a shared object/collection value does not require ",(0,n.kt)("strong",{parentName:"p"},"Use...End use"),"."),(0,n.kt)("p",null,"A unique, global catalog returned by the ",(0,n.kt)("a",a({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1525.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Storage"))," command is always available throughout the application and its components, and can be used to store all shared objects and collections."),(0,n.kt)("h2",a({},{id:"utilizaci\xf3n-de-objetos-o-colecciones-compartidos"}),"Utilizaci\xf3n de objetos o colecciones compartidos"),(0,n.kt)("p",null,"Once instantiated with the ",(0,n.kt)("inlineCode",{parentName:"p"},"New shared object")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"New shared collection")," commands, shared object/collection properties and elements can be modified or read from any process of the application, under certain conditions."),(0,n.kt)("h3",a({},{id:"modificaci\xf3n"}),"Modificaci\xf3n"),(0,n.kt)("p",null,"Las siguientes modificaciones pueden efectuarse en objetos y colecciones compartidos:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a\xf1adir o eliminar propiedades de los objetos,"),(0,n.kt)("li",{parentName:"ul"},"a\xf1adir o editar valores (siempre que se soporten en objetos compartidos), incluyendo otros objetos compartidos o colecciones (lo que crea un grupo compartido, ver abajo).")),(0,n.kt)("p",null,"All modification instructions in a shared object or collection require to be protected inside a ",(0,n.kt)("a",a({parentName:"p"},{href:"#use-end-use"}),(0,n.kt)("inlineCode",{parentName:"a"},"Use...End use"))," block, otherwise an error is generated."),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"}),' $s_obj:=New shared object("prop1";"alpha")\n Use($s_obj)\n    $s_obj.prop1:="omega"\n End Use\n')),(0,n.kt)("p",null,"For conveniency, all ",(0,n.kt)("a",a({parentName:"p"},{href:"/docs/es/API/CollectionClass"}),"collection functions")," that modify the shared object or collection insert an internal ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," block so you do not have to code it yourself. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"}),'$col:=Nueva colecci\xf3n compartida()\n$col.push("alpha") //.push() desencadena internamente el uso de Use/End, por lo que no es necesario que lo hagan ustedes mismos\n')),(0,n.kt)("p",null,"If you need to execute several modifications on the same collection, you can protect all modifications with a single ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," so that modifications are performed atomically."),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"}),'$col:=Storage.mySharedCollection\nUse($col)\n    $col[0]:="omega" //modifying an element requires to be performed inside Use/End use\n    $col.push("alpha") //.push() internally triggers Use/End use, but we want to do both modifications atomically\nEnd Use\n')),(0,n.kt)("p",null,"Un objeto/una colecci\xf3n compartido(a) s\xf3lo puede modificarse por un proceso a la vez. ",(0,n.kt)("inlineCode",{parentName:"p"},"Use")," locks the shared object/collection from other threads, while ",(0,n.kt)("inlineCode",{parentName:"p"},"End use")," unlocks the shared object/collection (if the locking counter is at 0, see below). . Trying to modify a shared object/collection without at least one ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," generates an error. When a process calls ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," on a shared object/collection that is already in use by another process, it is simply put on hold until the ",(0,n.kt)("inlineCode",{parentName:"p"},"End use")," unlocks it (no error is generated). Consequently, instructions within ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," structures should execute quickly and unlock the elements as soon as possible. Por lo tanto, se recomienda enf\xe1ticamente evitar modificar un objeto o colecci\xf3n compartido directamente desde la interfaz, por ejemplo, a trav\xe9s de una caja de di\xe1logo."),(0,n.kt)("p",null,"Assigning shared objects/collections to properties or elements of other shared objects/collections is allowed and creates ",(0,n.kt)("strong",{parentName:"p"},"shared groups"),". Un grupo compartido se crea autom\xe1ticamente cuando un objeto/colecci\xf3n compartido se define como valor de propiedad o elemento de otro objeto/colecci\xf3n compartido. Los grupos compartidos permiten anidar objetos y colecciones compartidos, pero imponen reglas adicionales:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Calling ",(0,n.kt)("inlineCode",{parentName:"li"},"Use")," on a shared object/collection belonging to a group locks properties/elements of all shared objects/collections of the group and increments its locking counter. Calling ",(0,n.kt)("inlineCode",{parentName:"li"},"End use")," decrements the locking counter of the group and when the counter is at 0, all the linked shared objects/collections are unlocked."),(0,n.kt)("li",{parentName:"ul"},"Un objeto/colecci\xf3n compartido s\xf3lo puede pertenecer a un grupo compartido. Se devuelve un error si se intenta asignar un objeto/colecci\xf3n compartido ya agrupado a un grupo diferente."),(0,n.kt)("li",{parentName:"ul"},"Los objetos/colecciones compartidos agrupados no se pueden desagrupar. Una vez incluido en un grupo compartido, un objeto/colecci\xf3n compartido queda vinculado permanentemente a ese grupo durante toda la sesi\xf3n. Incluso si todas las referencias de un objeto/colecci\xf3n se eliminan del objeto/colecci\xf3n padre, seguir\xe1n vinculadas.")),(0,n.kt)("p",null,"Consulte el ejemplo 2 para ver una ilustraci\xf3n de las reglas de los grupos compartidos."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note:")," Shared groups are managed through an internal property named ",(0,n.kt)("em",{parentName:"p"},"locking identifier"),". Para obtener informaci\xf3n detallada sobre este valor, consulte la Referencia del Lenguaje 4D."),(0,n.kt)("h3",a({},{id:"lectura"}),"Lectura"),(0,n.kt)("p",null,"Reading properties or elements of a shared object/collection is allowed without having to call the ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," structure, even if the shared object/collection is in use by another process."),(0,n.kt)("p",null,"However, it is necessary to read a shared object/collection within ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," when several values are linked together and must be read at once, for consistency reasons."),(0,n.kt)("h3",a({},{id:"duplication"}),"Duplication"),(0,n.kt)("p",null,"Calling ",(0,n.kt)("inlineCode",{parentName:"p"},"OB Copy")," with a shared object (or with an object containing shared object(s) as properties) is possible, but will return a standard (not shared) object including its contained objects (if any)."),(0,n.kt)("h3",a({},{id:"storage"}),"Storage"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Storage")," is a unique shared object, automatically available on each application and machine. This shared object is returned by the ",(0,n.kt)("a",a({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1525.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Storage"))," command. Puede utilizar este objeto para hacer referencia a todos los objetos/colecciones compartidos definidos durante la sesi\xf3n que desee que est\xe9n disponibles desde cualquier proceso preventivo o est\xe1ndar."),(0,n.kt)("p",null,"Note that, unlike standard shared objects, the ",(0,n.kt)("inlineCode",{parentName:"p"},"storage")," object does not create a shared group when shared objects/collections are added as its properties. This exception allows the ",(0,n.kt)("strong",{parentName:"p"},"Storage")," object to be used without locking all connected shared objects or collections."),(0,n.kt)("p",null,"For more information, refer to the ",(0,n.kt)("a",a({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page1525.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Storage"))," command description."),(0,n.kt)("h2",a({},{id:"useend-use"}),"Use...End use"),(0,n.kt)("p",null,"The formal syntax of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," structure is:"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"})," Use(Shared_object_or_Shared_collection)\n    instrucci\xf3n(es)\n End use\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," structure defines a sequence of statements that will execute tasks on the ",(0,n.kt)("em",{parentName:"p"},"Shared_object_or_Shared_collection")," parameter under the protection of an internal semaphore. ",(0,n.kt)("em",{parentName:"p"},"Shared_object_or_Shared_collection")," can be any valid shared object or shared collection."),(0,n.kt)("p",null,"Shared objects and shared collections are designed to allow communication between processes, in particular, ",(0,n.kt)("strong",{parentName:"p"},"preemptive 4D processes"),". Se pueden pasar por referencia como par\xe1metros de un proceso a otro. Surrounding modifications on shared objects or shared collections by the ",(0,n.kt)("inlineCode",{parentName:"p"},"Use...End use")," keywords is mandatory to prevent concurrent access between processes."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Once the ",(0,n.kt)("strong",{parentName:"li"},"Use")," line is successfully executed, all ",(0,n.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties/elements are locked for all other process in write access until the corresponding ",(0,n.kt)("inlineCode",{parentName:"li"},"End use")," line is executed."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("em",{parentName:"li"},"statement(s)")," sequence can execute any modification on the Shared_object_or_Shared_collection properties/elements without risk of concurrent access."),(0,n.kt)("li",{parentName:"ul"},"If another shared object or collection is added as a property of the ",(0,n.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," parameter, they become connected within the same shared group."),(0,n.kt)("li",{parentName:"ul"},"If another process tries to access one of the ",(0,n.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties or connected properties while a ",(0,n.kt)("strong",{parentName:"li"},"Use...End use")," sequence is being executed, it is automatically put on hold and waits until the current sequence is terminated."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"End use")," line unlocks the ",(0,n.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties and all objects of the same group."),(0,n.kt)("li",{parentName:"ul"},"Several ",(0,n.kt)("strong",{parentName:"li"},"Use...End use")," structures can be nested in the 4D code. In the case of a group, each ",(0,n.kt)("strong",{parentName:"li"},"Use")," increments the locking counter of the group and each ",(0,n.kt)("strong",{parentName:"li"},"End use")," decrements it; all properties/elements will be released only when the last ",(0,n.kt)("strong",{parentName:"li"},"End use")," call sets the locking counter to 0.")),(0,n.kt)("admonition",a({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"The following functions automatically trigger an internal ",(0,n.kt)("strong",{parentName:"p"},"Use/End use"),", making an explicit call to the structure unnecessary when the function is executed:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",a({parentName:"li"},{href:"/docs/es/API/CollectionClass"}),"collection functions")," that modify shared collections"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",a({parentName:"li"},{href:"/docs/es/Concepts/classes#shared-functions"}),"shared functions")," (defined in ",(0,n.kt)("a",a({parentName:"li"},{href:"/docs/es/Concepts/classes#shared-classes"}),"shared classes"),")."))),(0,n.kt)("h2",a({},{id:"ejemplo-1"}),"Ejemplo 1"),(0,n.kt)("p",null,"Se desea lanzar varios procesos que realicen una tarea de inventario en diferentes productos y que actualicen el mismo objeto compartido. El proceso principal instancia un objeto compartido vac\xedo y luego, lanza los otros procesos, pasando el objeto compartido y los productos a contar como par\xe1metros:"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"}),' ARRAY TEXT($_items;0)\n ... //llenar el array con los elementos a contar\n $nbItems:=Size of array($_items)\n var $inventory : Object\n $inventory:=New shared object\n Use($inventory)\n    $inventory.nbItems:=$nbItems\n End use\n\n  //Crear procesos\n For($i;1;$nbItems)\n    $ps:=New process("HowMany";0;"HowMany_"+$_items{$i};$_items{$i};$inventory)\n  //$inventory object sent by reference\n End for\n')),(0,n.kt)("p",null,'En el m\xe9todo "HowMany", el inventario se realiza y el objeto compartido $inventory se actualiza lo antes posible:'),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"}),"    //HowMany\n #DECLARE ($what : Text ; $inventory : Object)\n\n $count:=CountMethod($what) //method to count products\n Use($inventory) //use shared object\n    $inventory[$what]:=$count  //save the results for this item\n End use\n")),(0,n.kt)("h2",a({},{id:"ejemplo-2"}),"Ejemplo 2"),(0,n.kt)("p",null,"Los siguientes ejemplos ilustran las reglas espec\xedficas para el manejo de los grupos compartidos:"),(0,n.kt)("pre",null,(0,n.kt)("code",a({parentName:"pre"},{className:"language-4d"})," $ob1:=New shared object\n $ob2:=New shared object\n Use($ob1)\n    $ob1.a:=$ob2  //group 1 is created\n End use\n\n $ob3:=New shared object\n $ob4:=New shared object\n Use($ob3)\n    $ob3.a:=$ob4  //group 2 is created\n End use\n\n Use($ob1) //use an object from group 1\n    $ob1.b:=$ob4  //ERROR\n  //$ob4 already belongs to another group\n  //assignment is not allowed\n End use\n\n Use($ob3)\n    $ob3.a:=Null //remove any reference to $ob4 from group 2\n End use\n\n Use($ob1) //use an object from group 1\n    $ob1.b:=$ob4  //ERROR\n  //$ob4 still belongs to group 2\n  //assignment is not allowed\n End use\n")))}u.isMDXComponent=!0}}]);