"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[29950],{603905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=s(a),c=r,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},665784:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});a(667294);var n=a(603905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const o={id:"operators",title:"Operadores"},i=void 0,p={unversionedId:"Concepts/operators",id:"version-20/Concepts/operators",title:"Operadores",description:"Un operador es un s\xedmbolo o un grupo de s\xedmbolos que utiliza para verificar, modificar o combinar los valores. Usted ya conoce a la mayor\xeda de los operadores. Por ejemplo, 1 + 2 utiliza el operador de adici\xf3n (o signo m\xe1s) para sumar dos n\xfameros, y el resultado es 3. Los operadores de comparaci\xf3n, como = o >, le permiten comparar dos o m\xe1s valores.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-20/Concepts/operators.md",sourceDirName:"Concepts",slug:"/Concepts/operators",permalink:"/docs/es/20/Concepts/operators",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Foperators.md%20(20)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20",frontMatter:{id:"operators",title:"Operadores"},sidebar:"docs",previous:{title:"Un recorrido r\xe1pido",permalink:"/docs/es/20/Concepts/quick-tour"},next:{title:"Tipos de datos",permalink:"/docs/es/20/Concepts/data-types"}},s={},d=[{value:"Terminolog\xeda",id:"terminolog\xeda",level:2},{value:"Asignaci\xf3n",id:"asignaci\xf3n",level:2},{value:"Operadores b\xe1sicos",id:"operadores-b\xe1sicos",level:2},{value:"Operadores de asignaci\xf3n compuestos",id:"operadores-de-asignaci\xf3n-compuestos",level:2},{value:"Operadores en cortocircuito",id:"operadores-en-cortocircuito",level:2},{value:"Operador en corto-circuito AND (&amp;&amp;)",id:"operador-en-corto-circuito-and-",level:3},{value:"Ejemplo 1",id:"ejemplo-1",level:4},{value:"Ejemplo 2",id:"ejemplo-2",level:4},{value:"Ejemplo 3",id:"ejemplo-3",level:4},{value:"Operador en corto-circuito OR (||)",id:"operador-en-corto-circuito-or-",level:3},{value:"Ejemplo 1",id:"ejemplo-1-1",level:4},{value:"Ejemplo 2",id:"ejemplo-2-1",level:4},{value:"Prioridad",id:"prioridad",level:3},{value:"Operador ternario",id:"operador-ternario",level:2},{value:"Sintaxis",id:"sintaxis",level:3},{value:"Ejemplos",id:"ejemplos-1",level:3},{value:"Un ejemplo sencillo",id:"un-ejemplo-sencillo",level:4},{value:"Gesti\xf3n de los datos de una tabla",id:"gesti\xf3n-de-los-datos-de-una-tabla",level:4},{value:"Truthy y falsy",id:"truthy-y-falsy",level:2}],u={toc:d};function m(e){var{components:t}=e,a=l(e,["components"]);return(0,n.kt)("wrapper",r({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Un operador es un s\xedmbolo o un grupo de s\xedmbolos que utiliza para verificar, modificar o combinar los valores. Usted ya conoce a la mayor\xeda de los operadores. Por ejemplo, ",(0,n.kt)("inlineCode",{parentName:"p"},"1 + 2")," utiliza el operador de adici\xf3n (o signo m\xe1s) para sumar dos n\xfameros, y el resultado es 3. Los operadores de comparaci\xf3n, como = o >, le permiten comparar dos o m\xe1s valores."),(0,n.kt)("p",null,"El lenguaje 4D es compatible con los operadores que ya conoce de otros lenguajes como C o JavaScript. Sin embargo, el operador de asignaci\xf3n es ",(0,n.kt)("inlineCode",{parentName:"p"},":="),' para evitar que se utilice de forma err\xf3nea cuando el operador "igual a" (',(0,n.kt)("inlineCode",{parentName:"p"},"="),") est\xe1 planeado. ",(0,n.kt)("a",r({parentName:"p"},{href:"#basic-operators"}),"Los operadores b\xe1sicos")," como los operadores aritm\xe9ticos (+, -, *, /, %...) y los operadores de comparaci\xf3n (=, >, >=.) puede utilizarse con n\xfameros, pero tambi\xe9n con datos booleanos, textos, fecha, hora, puntero o imagen. Al igual que JavaScript, el lenguaje 4D soporta el concepto de valores ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy y falsy"),", que se utilizan en ",(0,n.kt)("a",r({parentName:"p"},{href:"#short-circuit-operators"}),"los operadores de corto-cicrcuit"),"."),(0,n.kt)("h2",r({},{id:"terminolog\xeda"}),"Terminolog\xeda"),(0,n.kt)("p",null,"El lenguaje 4D soporta los operadores ",(0,n.kt)("strong",{parentName:"p"},"binarios")," y ",(0,n.kt)("strong",{parentName:"p"},"ternarios"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"los operadores binarios operan en dos objetivos (como ",(0,n.kt)("inlineCode",{parentName:"li"},"2 + 3"),") y aparecen entre sus dos objetivos."),(0,n.kt)("li",{parentName:"ul"},"los operadores ternarios operan en tres objetivos. Like C, 4D has only one ternary operator, the ",(0,n.kt)("a",r({parentName:"li"},{href:"#ternary-operator"}),"ternary conditional operator")," (",(0,n.kt)("inlineCode",{parentName:"li"},"a ? b : c"),").")),(0,n.kt)("p",null,"Los valores que los operadores afectan son los operandos. En la expresi\xf3n ",(0,n.kt)("inlineCode",{parentName:"p"},"1 + 2"),", el s\xedmbolo + es un operador binario y sus dos operandos son los valores 1 y 2."),(0,n.kt)("h2",r({},{id:"asignaci\xf3n"}),"Asignaci\xf3n"),(0,n.kt)("p",null,"El ",(0,n.kt)("strong",{parentName:"p"},"operador de asignaci\xf3n")," (",(0,n.kt)("inlineCode",{parentName:"p"},"a:=b"),") inicializa o actualiza el valor de ",(0,n.kt)("inlineCode",{parentName:"p"},"a")," con el valor de ",(0,n.kt)("inlineCode",{parentName:"p"},"b"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$myNumber:=3 //assigns 3 to MyNumber variable  \n$myDate:=!2018/01/21! $myNumber:=3 //assigns 3 to MyNumber variable  \n$myDate:=!2018/01/21! //assigns a date literal\n$myLength:=Length("Acme") //assigns the result of the command (4) to $myLength\n$col:=New collection //$col is initialized with an empty collection $myNumber:=3 //assigns 3 to MyNumber variable  \n$myDate:=!2018/01/21! //assigns a date literal\n$myLength:=Length("Acme") //assigns the result of the command (4) to $myLength\n$col:=New collection //$col is initialized with an empty collection $myNumber:=3 //assigns 3 to MyNumber variable  \n$myDate:=!2018/01/21! //assigns a date literal\n$myLength:=Length("Acme") //assigns the result of the command (4) to $myLength\n$col:=New collection //$col is initialized with an empty collection $myNumber:=3 //assigns 3 to MyNumber variable  \n$myDate:=!2018/01/21! //assigns a date literal\n$myLength:=Length("Acme") //assigns the result of the command (4) to $myLength\n$col:=New collection //$col is initialized with an empty collection\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"NO confunda el operador de asignaci\xf3n ",(0,n.kt)("inlineCode",{parentName:"p"},":=")," con el operador de comparaci\xf3n de igualdad ",(0,n.kt)("inlineCode",{parentName:"p"},"="),". Se ha elegido deliberadamente un operador de asignaci\xf3n diferente (y no ",(0,n.kt)("inlineCode",{parentName:"p"},"="),") para evitar los problemas y la confusi\xf3n que suelen producirse con == o === en otros lenguajes de programaci\xf3n. Estos errores son a menudo dif\xedciles de reconocer por el compilador y conducen a una soluci\xf3n de problemas que requiere mucho tiempo.")),(0,n.kt)("h2",r({},{id:"operadores-b\xe1sicos"}),"Operadores b\xe1sicos"),(0,n.kt)("p",null,"Los resultados del operador dependen de los ",(0,n.kt)("strong",{parentName:"p"},"tipos de datos")," a los que se aplican. 4D soporta diferentes operadores en tipos de datos escalares. Se describen con los tipos de datos, en las siguientes secciones:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/boolean#logical-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores l\xf3gicos"))," (en las expresiones ",(0,n.kt)("strong",{parentName:"li"},"booleanas"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/date#date-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores de fechas"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/time#time-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores de horas"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/number#number-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores num\xe9ricos"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/number#bitwise-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores binarios"))," (en las expresiones ",(0,n.kt)("strong",{parentName:"li"},"de enteros largos"),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/picture#picture-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores de im\xe1genes"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/pointer#pointer-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores en punteros"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/string#string-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores de cadenas"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/null-undefined#null-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores Null"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/es/20/Concepts/null-undefined#undefined-operators"}),(0,n.kt)("strong",{parentName:"a"},"Operadores indefinidos")))),(0,n.kt)("h2",r({},{id:"operadores-de-asignaci\xf3n-compuestos"}),"Operadores de asignaci\xf3n compuestos"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hist\xf3rico"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modificaciones"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,n.kt)("p",null,"4D ofrece ",(0,n.kt)("strong",{parentName:"p"},"operadores de asignaci\xf3n compuestos")," que combinan la asignaci\xf3n con otra operaci\xf3n. Un ejemplo es el operador de asignaci\xf3n adicional (",(0,n.kt)("inlineCode",{parentName:"p"},"+="),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$a:=1 \n$a+=2 // $a=3\n")),(0,n.kt)("p",null,"Se admiten los siguientes operadores de asignaci\xf3n compuestos:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Operador"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Sintaxis"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Asigna"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Ejemplo"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Adici\xf3n"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text += Text"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},'$t+=" World"  //$t:=$t+" World"'))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n+=5 //$n:=$n+5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Date += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Fecha"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$d+=5 //$d:=$d+5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time += Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Hora"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1+=$t2 //$t1:=$t1+$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1+=5 //$t1:=$t1+5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture += Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1+=$p2 //$p1:=$p1+$p2 (add $p2 to the right of $p1)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1+=5 //$p1:=$p1+5 (move $p1 horizontally 5 pixels to the right)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Resta"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n-=5 //$n:=$n-5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Date -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Fecha"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$d-=5 //$d:=$d-5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time -= Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Hora"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1-=$t2 //$t1:=$t1-$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1-=5 //$t1:=$t1-5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1-=5 //$p1:=$p1-5 (mover horizontalemente $p1 de 5 p\xedxeles a la izquierda)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Divisi\xf3n"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number /= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n/=5 //$n:=$n/5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time /= Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Hora"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1/=$t2 //$t1:=$t1/$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time /= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1/=5 //$t1:=$t1/5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture /= Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1/=$p2 //$p1:=$p1/$p2 (a\xf1adir $p2 debajo de $p1)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture /= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1/=5 //$p1:=$p1/5 (desplazar verticalmente $p1 de 5 p\xedxeles)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Multiplicaci\xf3n"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text *= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},'$t*="abc"  //$t:=$t*"abc"'))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number *= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n*=5 //$n:=$n*5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time *= Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Hora"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1*=$t2 //$t1:=$t1*$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time *= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1*=5 //$t1:=$t1*5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture *= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1*=5 //$p1:=$p1*5 (redimensionar $p1 de 5)"))))),(0,n.kt)("p",null,"Estos operadores se aplican a todas las ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/es/20/Concepts/quick-tour#assignable-vs-non-assignable-expressions"}),"expresiones asignables")," (excepto de las im\xe1genes como propiedades de objeto o elementos de colecci\xf3n)."),(0,n.kt)("p",null,'La operaci\xf3n "source ',(0,n.kt)("inlineCode",{parentName:"p"},"operator"),' value" no es estrictamente equivalente a "source := source ',(0,n.kt)("inlineCode",{parentName:"p"},"operator"),' value" porque la expresi\xf3n que designa la fuente (variable, campo, propiedad del objeto, elemento de colecci\xf3n) s\xf3lo se eval\xfaa una vez. Por ejemplo, en una expresi\xf3n tal como ',(0,n.kt)("inlineCode",{parentName:"p"},"getPointer()->+=1")," el m\xe9todo ",(0,n.kt)("inlineCode",{parentName:"p"},"getPointer")," es llamado s\xf3lo una vez."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("a",r({parentName:"p"},{href:"/docs/es/20/Concepts/string#character-reference-symbols"}),"La indexaci\xf3n de caracteres en el texto")," y ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/es/20/Concepts/blob#accessing-a-scalar-blobs-bytes"}),"la indexaci\xf3n de bytes en el blob")," no soporta a estos operadores."),(0,n.kt)("h4",r({parentName:"blockquote"},{id:"ejemplos"}),"Ejemplos")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'// Addition\n$x:=2\n$x+=5 //$x=7\n\n$t:="Hello" \n$t+=" World" //$t="Hello World" \n\n$d:=!2000-11-10!\n$d+=10 //$d=!2000-11-20!\n\n// Subtraction\n$x1:=10\n$x1-=5 //$x1=5\n\n$d1:=!2000-11-10!\n$d1-=10 // $d1=!2000-10-31!\n\n// Division\n$x3:=10\n$x3/=2 // $x3=5\n\n\n// Multiplication\n$x2:=10\n$x2*=5 // $x2=10\n\n$t2:="Hello" \n$t2*=2 // $t2="HelloHello"\n$d+=10 //$d=!2000-11-20!\n\n// Resta\n$x1:=10\n$x1-=5 //$x1=5\n\n$d1:=!2000-11-10!\n$d1-=10 // $d1=!2000-10-31!\n\n// Divisi\xf3n\n$x3:=10\n$x3/=2 // $x3=5\n\n\n// Multiplicaci\xf3n\n$x2:=10\n$x2*=5 // $x2=10\n\n$t2:="Hello" \n$t2*=2 // $t2="HelloHello"\n\n')),(0,n.kt)("h2",r({},{id:"operadores-en-cortocircuito"}),"Operadores en cortocircuito"),(0,n.kt)("p",null,"Los operadores ",(0,n.kt)("strong",{parentName:"p"},"&&")," y ",(0,n.kt)("strong",{parentName:"p"},"||")," son los ",(0,n.kt)("strong",{parentName:"p"},"operadores en cortocircuito"),". Un operador en cortocircuito es aquel que no necesariamente eval\xfaa todos sus operandos."),(0,n.kt)("p",null,"La diferencia con los operadores booleanos simples ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/es/20/Concepts/boolean#logical-operators"}),(0,n.kt)("strong",{parentName:"a"},"&")," y ",(0,n.kt)("strong",{parentName:"a"},"||"))," es que los operadores en cortocircuito ",(0,n.kt)("strong",{parentName:"p"},"&&")," y ",(0,n.kt)("strong",{parentName:"p"},"||")," no devuelven un valor booleano. Eval\xfaan las expresiones como ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy o falsy"),", y luego devuelven una de las expresiones."),(0,n.kt)("h3",r({},{id:"operador-en-corto-circuito-and-"}),"Operador en corto-circuito AND (&&)"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hist\xf3rico"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modificaciones"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,n.kt)("p",null,"La regla es la siguiente:"),(0,n.kt)("p",null,"Dado ",(0,n.kt)("inlineCode",{parentName:"p"},"Expr1 && Expr2"),":"),(0,n.kt)("p",null,"El operador en cortocircuito AND eval\xfaa los operandos de izquierda a derecha, devolviendo inmediatamente el valor del primer operando falso que encuentra; si todos los valores son ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy"),", se devuelve el valor del \xfaltimo operando."),(0,n.kt)("p",null,"La siguiente tabla resume los diferentes casos para el operador ",(0,n.kt)("strong",{parentName:"p"},"&&"),":"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr1"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr2"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Valor devuelto"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")))),(0,n.kt)("h4",r({},{id:"ejemplo-1"}),"Ejemplo 1"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $v : Variant\n\n$v:= "Hello" && "World" //"World"\n$v:=False && 0 // False\n$v:=0 && False // False\n$v:=5 && !00-00-00! // 00/00/00\n$v := 5 && 10 && "hello" //"hello" // 00/00/00\n$v := 5 && 10 && "hello" //"hello"\n')),(0,n.kt)("h4",r({},{id:"ejemplo-2"}),"Ejemplo 2"),(0,n.kt)("p",null,"Digamos que tiene una tienda en l\xednea, y algunos productos tienen un tipo de impuesto aplicado, y otros no."),(0,n.kt)("p",null,"Para calcular el impuesto, se multiplica el precio por el tipo impositivo, que puede no haberse especificado."),(0,n.kt)("p",null,"As\xed que puede escribir esto:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"var $tax : Variant\n\n$tax:=$item.taxRate && ($item.price*$item.taxRate)\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"$tax")," sera NULL si taxRate es NULL (o indefinido), de lo contrario almacenar\xe1 el resultado del c\xe1lculo."),(0,n.kt)("h4",r({},{id:"ejemplo-3"}),"Ejemplo 3"),(0,n.kt)("p",null,"Los operadores de cortocircuito son \xfatiles en pruebas como:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"If(($myObject#Null) && ($myObject.value>10))\n    //code\nEnd if\n")),(0,n.kt)("p",null,"Si $myObject es Null, el segundo argumento no se ejecuta, por lo que no se lanza ning\xfan error."),(0,n.kt)("h3",r({},{id:"operador-en-corto-circuito-or-"}),"Operador en corto-circuito OR (||)"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hist\xf3rico"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modificaciones"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,n.kt)("p",null,'El operador || devuelve el valor de uno de los operandos especificados. La expresi\xf3n se eval\xfaa de izquierda a derecha y se comprueba la posible evaluaci\xf3n en "cortocircuito" utilizando la siguiente regla:'),(0,n.kt)("p",null,"Dado ",(0,n.kt)("inlineCode",{parentName:"p"},"Expr1 || Expr2"),":"),(0,n.kt)("p",null,"Si Expr1 es ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy"),", Expr2 no se eval\xfaa y el c\xe1lculo devuelve Expr1."),(0,n.kt)("p",null,"Si Expr1 es ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"falsy"),", el c\xe1lculo devuelve Expr2."),(0,n.kt)("p",null,"La siguiente tabla resume los diferentes casos y el valor devuelto por el operador ",(0,n.kt)("strong",{parentName:"p"},"||"),":"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr1"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr2"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Valor devuelto"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")))),(0,n.kt)("h4",r({},{id:"ejemplo-1-1"}),"Ejemplo 1"),(0,n.kt)("p",null,"Supongamos que tiene una tabla llamada Employee. Algunos empleados han introducido un n\xfamero de tel\xe9fono y otros no. Esto significa que ",(0,n.kt)("inlineCode",{parentName:"p"},"$emp.phone")," podr\xeda ser NULL, y no se puede asignar NULL a una variable texto. Pero puede escribir lo siguiente:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $phone : Text\n\n$phone:=$emp.phone || "n/a"\n')),(0,n.kt)("p",null,"En este caso, ",(0,n.kt)("inlineCode",{parentName:"p"},"$phone"),' almacenar\xe1 un n\xfamero de tel\xe9fono o la cadena "n/a".'),(0,n.kt)("h4",r({},{id:"ejemplo-2-1"}),"Ejemplo 2"),(0,n.kt)("p",null,"Dada una tabla llamada Person con un campo ",(0,n.kt)("em",{parentName:"p"},"name"),", as\xed como un campo ",(0,n.kt)("em",{parentName:"p"},"maiden name")," para las mujeres casadas."),(0,n.kt)("p",null,"El siguiente ejemplo comprueba si hay un apellido de soltera y lo almacena en una variable, de lo contrario simplemente almacena el nombre de la persona:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"var $name: Text\n\n$name:=$person.maidenName || $person.name\n")),(0,n.kt)("h3",r({},{id:"prioridad"}),"Prioridad"),(0,n.kt)("p",null,"Los operadores ",(0,n.kt)("inlineCode",{parentName:"p"},"&&")," y ",(0,n.kt)("inlineCode",{parentName:"p"},"||")," tienen la misma prioridad que los operadores l\xf3gicos ",(0,n.kt)("inlineCode",{parentName:"p"},"&")," y ",(0,n.kt)("inlineCode",{parentName:"p"},"|"),", y se eval\xfaan de izquierda a derecha."),(0,n.kt)("p",null,"Esto significa que ",(0,n.kt)("inlineCode",{parentName:"p"},"a || b && c")," se eval\xfaa como ",(0,n.kt)("inlineCode",{parentName:"p"},"(a || b) && c"),"."),(0,n.kt)("h2",r({},{id:"operador-ternario"}),"Operador ternario"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hist\xf3rico"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modificaciones"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,n.kt)("p",null,"El operador condicional ternario permite escribir expresiones condicionales de una l\xednea. Por ejemplo, puede reemplazar una secuencia completa de instrucciones ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/es/20/Concepts/control-flow#ifelseend-if"}),"If\u2026Else"),"."),(0,n.kt)("p",null,"Se necesitan tres operandos en el siguiente orden:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"una condici\xf3n seguida de un signo de interrogaci\xf3n (?)"),(0,n.kt)("li",{parentName:"ul"},"una expresi\xf3n a ejecutar si la condici\xf3n es ",(0,n.kt)("a",r({parentName:"li"},{href:"#truthy-and-falsy"}),"truthy"),", seguida de dos puntos (:)"),(0,n.kt)("li",{parentName:"ul"},"una expresi\xf3n a ejecutar si la condici\xf3n es ",(0,n.kt)("a",r({parentName:"li"},{href:"#truthy-and-falsy"}),"falsy"))),(0,n.kt)("h3",r({},{id:"sintaxis"}),"Sintaxis"),(0,n.kt)("p",null,"La sintaxis es la siguiente:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"condition ? condition ? exprIfTruthy : exprIfFalsy condition ? exprIfTruthy : exprIfFalsy condition ? exprIfTruthy : exprIfFalsy")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Dado que la ",(0,n.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4Dv19/4D/19.5/Using-tokens-in-formulas.300-6136716.en.html"}),"sintaxis con tokens")," utiliza dos puntos, se recomienda insertar un espacio despu\xe9s de los dos puntos ",(0,n.kt)("inlineCode",{parentName:"p"},":")," o encerrar los tokens utilizando par\xe9ntesis para evitar cualquier conflicto.")),(0,n.kt)("h3",r({},{id:"ejemplos-1"}),"Ejemplos"),(0,n.kt)("h4",r({},{id:"un-ejemplo-sencillo"}),"Un ejemplo sencillo"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $age : Integer\nvar $beverage : Text\n\n$age:=26\n$beverage:=($age>=21) ? "Beer" : "Juice"\n\nALERT($beverage) // "Beer" "Beer" : "Juice"\n\nALERT($beverage) // "Beer"\n')),(0,n.kt)("h4",r({},{id:"gesti\xf3n-de-los-datos-de-una-tabla"}),"Gesti\xf3n de los datos de una tabla"),(0,n.kt)("p",null,"Este ejemplo almacena el nombre completo de una persona en una variable, y maneja el caso cuando no se ha especificado el nombre o el apellido:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $fullname : Text\n\n// If one of the names is missing, store the one that exists, otherwise store an empty string\n$fullname:=($person.firstname && $person.lastname) ? ($person.firstname+" "+$person.lastname) : ($person.lastname || $person.firstname) || "" ($person.firstname+" "+$person.lastname) : ($person.lastname || $person.firstname) || ""\n')),(0,n.kt)("h2",r({},{id:"truthy-y-falsy"}),"Truthy y falsy"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Hist\xf3rico"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Versi\xf3n"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modificaciones"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,n.kt)("p",null,"Adem\xe1s de un tipo, cada valor tambi\xe9n tiene un valor booleano inherente, conocido generalmente como ",(0,n.kt)("strong",{parentName:"p"},"truthy")," o ",(0,n.kt)("strong",{parentName:"p"},"falsy<"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Los valores ",(0,n.kt)("strong",{parentName:"p"},"truthy")," y ",(0,n.kt)("strong",{parentName:"p"},"falsy")," s\xf3lo son evaluados por los operadores ",(0,n.kt)("a",r({parentName:"p"},{href:"#short-circuit-operators"}),"en cortocircuito")," y ",(0,n.kt)("a",r({parentName:"p"},{href:"#ternary-operator"}),"ternarios"),".")),(0,n.kt)("p",null,"Los siguientes valores son ",(0,n.kt)("strong",{parentName:"p"},"falsy"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"false"),(0,n.kt)("li",{parentName:"ul"},"Null"),(0,n.kt)("li",{parentName:"ul"},"indefinido"),(0,n.kt)("li",{parentName:"ul"},"Null object"),(0,n.kt)("li",{parentName:"ul"},"Null collection"),(0,n.kt)("li",{parentName:"ul"},"Null pointer"),(0,n.kt)("li",{parentName:"ul"},"Null picture"),(0,n.kt)("li",{parentName:"ul"},"Null date !00-00-00!"),(0,n.kt)("li",{parentName:"ul"},'"" - Cadenas vac\xedas'),(0,n.kt)("li",{parentName:"ul"},"[] - Colecciones vac\xedas"),(0,n.kt)("li",{parentName:"ul"},"{} - Objetos vacios")),(0,n.kt)("p",null,"Todos los dem\xe1s valores se consideran ",(0,n.kt)("strong",{parentName:"p"},"truthy"),", incluyendo:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - cero num\xe9rico (Entero u otro)")),(0,n.kt)("p",null,"En 4D, la evaluaci\xf3n ",(0,n.kt)("strong",{parentName:"p"},"truthy")," y ",(0,n.kt)("strong",{parentName:"p"},"falsy")," refleja la ",(0,n.kt)("strong",{parentName:"p"},"usabilidad")," de un valor, lo que significa que un valor truthy existe y puede ser procesado por el c\xf3digo sin generar errores o resultados inesperados. La raz\xf3n de ser de esto es ofrecer una forma conveniente de manejar valores ",(0,n.kt)("em",{parentName:"p"},"undefined")," y ",(0,n.kt)("em",{parentName:"p"},"null")," en objetos y colecciones, de modo que un n\xfamero reducido de instrucciones ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/es/20/Concepts/control-flow#ifelseend-if"}),"If\u2026Else")," sean necesarias para evitar errores de ejecuci\xf3n."),(0,n.kt)("p",null,"Por ejemplo, cuando se utiliza un operador en ",(0,n.kt)("a",r({parentName:"p"},{href:"#short-circuit-or-operator-"}),"cortocircuito OR"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$value:=$object.value || $defaultValue\n")),(0,n.kt)("p",null,"... se obtiene el valor por defecto cada vez que ",(0,n.kt)("em",{parentName:"p"},"$object")," no contenga la propieda ",(0,n.kt)("inlineCode",{parentName:"p"},"valor ")," O cuando sea ",(0,n.kt)("em",{parentName:"p"},"null"),". Por lo tanto, este operador comprueba la existencia o utilidad del valor en lugar de un valor espec\xedfico. Obs\xe9rvese que como el valor num\xe9rico 0 existe y es utilizable, no se le da un tratamiento especial, por lo que es ",(0,n.kt)("strong",{parentName:"p"},"truthy"),"."),(0,n.kt)("p",null,'En cuanto a los valores que representan las colecciones, los objetos o las cadenas, los valores "vac\xedos" se consideran como ',(0,n.kt)("strong",{parentName:"p"},"falsy"),". Es \xfatil cuando se quiere asignar un valor por defecto cuando se encuentra un valor vac\xedo."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$phone:=$emp.phone || "n/a"\n')))}m.isMDXComponent=!0}}]);