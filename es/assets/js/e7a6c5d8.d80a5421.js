/*! For license information please see e7a6c5d8.d80a5421.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11054],{38120:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=o(474848),n=o(28453);const s={id:"parameters",title:"Par\xe1metros"},l=void 0,d={id:"Concepts/parameters",title:"Par\xe1metros",description:"A menudo encontrar\xe1 que necesita pasar datos a sus m\xe9todos y funciones. Esto se hace f\xe1cilmente con par\xe1metros.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-19/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/es/19/Concepts/parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(19)&body=Please%20enter%20your%20comment%3A",tags:[],version:"19",frontMatter:{id:"parameters",title:"Par\xe1metros"},sidebar:"docs",previous:{title:"M\xe9todos",permalink:"/docs/es/19/Concepts/methods"},next:{title:"Objetos y colecciones compartidos",permalink:"/docs/es/19/Concepts/shared"}},i={},c=[{value:"Generalidades",id:"generalidades",level:2},{value:"Inicializaci\xf3n",id:"inicializaci\xf3n",level:3},{value:"Par\xe1metro con nombre",id:"par\xe1metro-con-nombre",level:2},{value:"Valor devuelto",id:"valor-devuelto",level:3},{value:"Tipos de datos soportados",id:"tipos-de-datos-soportados",level:3},{value:"Par\xe1metros secuenciales",id:"par\xe1metros-secuenciales",level:2},{value:"Valor devuelto",id:"valor-devuelto-1",level:3},{value:"Tipos de datos soportados",id:"tipos-de-datos-soportados-1",level:3},{value:"Indirecci\xf3n de par\xe1metros (${N})",id:"indirecci\xf3n-de-par\xe1metros-n",level:2},{value:"Utilizaci\xf3n de los par\xe1metros gen\xe9ricos",id:"utilizaci\xf3n-de-los-par\xe1metros-gen\xe9ricos",level:3},{value:"Declaraci\xf3n de par\xe1metros gen\xe9ricos",id:"declaraci\xf3n-de-par\xe1metros-gen\xe9ricos",level:3},{value:"Declaraci\xf3n de los par\xe1metros para el modo compilado",id:"declaraci\xf3n-de-los-par\xe1metros-para-el-modo-compilado",level:2},{value:"Tipo de par\xe1metro equivocado",id:"tipo-de-par\xe1metro-equivocado",level:2},{value:"Variables de entrada/salida",id:"variables-de-entradasalida",level:2},{value:"Utilizaci\xf3n de las propiedades de objeto como par\xe1metros con nombre",id:"utilizaci\xf3n-de-las-propiedades-de-objeto-como-par\xe1metros-con-nombre",level:2},{value:"Par\xe1metros opcionales",id:"par\xe1metros-opcionales",level:2},{value:"Valores o referencias",id:"valores-o-referencias",level:2},{value:"Casos particulares: objetos y colecciones",id:"casos-particulares-objetos-y-colecciones",level:3}];function t(e){const a={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.p,{children:"A menudo encontrar\xe1 que necesita pasar datos a sus m\xe9todos y funciones. Esto se hace f\xe1cilmente con par\xe1metros."}),"\n",(0,r.jsx)(a.h2,{id:"generalidades",children:"Generalidades"}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"Los par\xe1metros"})," (o ",(0,r.jsx)(a.strong,{children:"argumentos"}),") son piezas de datos que un m\xe9todo o una funci\xf3n de clase necesita para realizar su tarea. Los t\xe9rminos ",(0,r.jsx)(a.em,{children:"par\xe1metros"})," y ",(0,r.jsx)(a.em,{children:"argumentos"}),' se utilizan indistintamente en este manual. Los par\xe1metros tambi\xe9n se pasan a los comandos integrados de 4D. En este ejemplo, la cadena "Hello" es un argumento para el comando integrado ',(0,r.jsx)(a.code,{children:"ALERT"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'ALERT("Hello")\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Los par\xe1metros se pasan de la misma manera a los m\xe9todos o las funciones de clase. Por ejemplo, si una funci\xf3n de clase llamada ",(0,r.jsx)(a.code,{children:"getArea()"})," acepta dos par\xe1metros, una llamada a la funci\xf3n de clase podr\xeda verse as\xed:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"$area:=$o.getArea(50;100)\n"})}),"\n",(0,r.jsxs)(a.p,{children:["O, si un m\xe9todo proyecto llamado ",(0,r.jsx)(a.code,{children:"DO_SOMETHING"})," acepta tres par\xe1metros, una llamada al m\xe9todo podr\xeda verse as\xed:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"DO_SOMETHING($WithThis;$AndThat;$ThisWay)\n"})}),"\n",(0,r.jsx)(a.p,{children:"Los par\xe1metros de entrada est\xe1n separados por punto y coma (;)."}),"\n",(0,r.jsx)(a.p,{children:"Los mismos principios se aplican cuando los m\xe9todos se ejecutan a trav\xe9s de comandos dedicados, por ejemplo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/20!)  \n//pass the !05/05/20! date as parameter to the SetCalendarDate  \n//in the context of a subform  \n//pase la fecha !05/05/20! como par\xe1metro de SetCalendarDate  \n//en el contexto de un subformulario\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Los datos tambi\xe9n pueden ser ",(0,r.jsx)(a.strong,{children:"devueltos"}),"desde m\xe9todos y funciones de clase. Por ejemplo, la siguiente l\xednea de instrucci\xf3n utiliza el comando integrado, ",(0,r.jsx)(a.code,{children:"Length"}),", para devolver la longitud de una cadena. La instrucci\xf3n pone el valor devuelto por ",(0,r.jsx)(a.code,{children:"Length"})," en una variable llamada ",(0,r.jsx)(a.em,{children:"MyLength"}),". Esta es la instrucci\xf3n:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'MyLength:=Length("How did I get here?")\n'})}),"\n",(0,r.jsx)(a.p,{children:"Toda subrutina puede devolver un valor. S\xf3lo se puede declarar un \xfanico par\xe1metro de salida por m\xe9todo o funci\xf3n de clase."}),"\n",(0,r.jsxs)(a.p,{children:["Los valores de entrada y salida son ",(0,r.jsx)(a.a,{href:"#values-or-references",children:"evaluados"})," en el momento de la llamada y copiados en variables locales dentro de la funci\xf3n o m\xe9todo de la clase llamada. Se proponen dos sintaxis para declarar los par\xe1metros de las variables en el c\xf3digo llamado:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.a,{href:"#named-parameters",children:"named variables"})," (recomendado en la mayor\xeda de los casos) o"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.a,{href:"#sequential-parameters",children:"variables numeradas secuencialmente"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Las sintaxis ",(0,r.jsx)(a.a,{href:"#named-parameters",children:"nombradas"})," y ",(0,r.jsx)(a.a,{href:"#sequential-parameters",children:"secuenciales"})," se pueden combinar sin restricci\xf3n para declarar los par\xe1metros. Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"```4d\n  Function add($x : Integer)\n    var $0;$2 : Integer\n    $0:=$x+$2\n"})}),"\n",(0,r.jsx)(a.h3,{id:"inicializaci\xf3n",children:"Inicializaci\xf3n"}),"\n",(0,r.jsxs)(a.p,{children:["Cuando se declaran los par\xe1metros, se inicializan con el valor por defecto ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/data-types#default-values",children:(0,r.jsx)(a.strong,{children:"correspondiente a su tipo"})}),", que mantendr\xe1n durante la sesi\xf3n mientras no hayan sido asignados."]}),"\n",(0,r.jsx)(a.h2,{id:"par\xe1metro-con-nombre",children:"Par\xe1metro con nombre"}),"\n",(0,r.jsxs)(a.p,{children:["En los m\xe9todos llamados o en las funciones de clase, los valores de los par\xe1metros se asignan a las variables locales. Puedes declarar par\xe1metros utilizando un ",(0,r.jsx)(a.strong,{children:"nombre de par\xe1metro"})," con un ",(0,r.jsx)(a.strong,{children:"tipo de par\xe1metro"}),", separados por dos puntos."]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Para las funciones de clase, los par\xe1metros se declaran junto con la palabra clave ",(0,r.jsx)(a.code,{children:"Function"}),"."]}),"\n",(0,r.jsxs)(a.li,{children:["Para los m\xe9todos (m\xe9todos proyecto, m\xe9todos objeto formulario, m\xe9todos base y triggers), los par\xe1metros se declaran utilizando la palabra clave ",(0,r.jsx)(a.code,{children:"#DECLARE"})," al principio del c\xf3digo del m\xe9todo."]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Ejemplos:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"Function getArea($width : Integer; $height : Integer) -> $area : Integer\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:" //myProjectMethod\n#DECLARE ($i : Integer) -> $myResult : Object\n"})}),"\n",(0,r.jsx)(a.p,{children:"Se aplican las siguientes reglas:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"La l\xednea de declaraci\xf3n debe ser la primera l\xednea del c\xf3digo del m\xe9todo o de la funci\xf3n, de lo contrario se mostrar\xe1 un error (s\xf3lo los comentarios o los saltos de l\xednea pueden preceder la declaraci\xf3n)."}),"\n",(0,r.jsxs)(a.li,{children:["Los nombres de los par\xe1metros deben comenzar con un car\xe1cter ",(0,r.jsx)(a.code,{children:"$"})," y cumplir con ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/identifiers#object-properties",children:"reglas de denominaci\xf3n de las propiedades"}),"."]}),"\n",(0,r.jsx)(a.li,{children:"M\xfaltiples par\xe1metros (y tipos) est\xe1n separados por punto y coma (;)."}),"\n",(0,r.jsx)(a.li,{children:'Las sintaxis multil\xednea est\xe1n soportadas (utilizando el car\xe1cter "\\").'}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Por ejemplo, cuando se llama a una funci\xf3n ",(0,r.jsx)(a.code,{children:"getArea()"})," con dos par\xe1metros:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"$area:=$o.getArea(50;100)\n"})}),"\n",(0,r.jsx)(a.p,{children:"En el c\xf3digo de la funci\xf3n clase, el valor de cada par\xe1metro se copia en el par\xe1metro declarado correspondiente:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"// Class: Polygon\nFunction getArea($width : Integer; $height : Integer)-> $area : Integer\n    $area:=$width*$height\n"})}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsxs)(a.p,{children:["Si no se define el tipo, el par\xe1metro se definir\xe1 como ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/variant",children:(0,r.jsx)(a.code,{children:"Variant"})}),"."]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Todos los tipos de m\xe9todos de 4D soportan la palabra clave ",(0,r.jsx)(a.code,{children:"#DECLARE"}),", incluidos los m\xe9todos base. Por ejemplo, en el m\xe9todo base ",(0,r.jsx)(a.code,{children:"On Web Authentication"}),", puede declarar par\xe1metros temporales:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'    // M\xe9todo base On Web Authentication\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text) \\\n  -> $RequestAccepted : Boolean\n$entitySelection:=ds.User.query("login=:1"; $user)\n// Verificar la contrase\xf1a hash...\n'})}),"\n",(0,r.jsx)(a.h3,{id:"valor-devuelto",children:"Valor devuelto"}),"\n",(0,r.jsx)(a.p,{children:"El par\xe1metro de retorno de una funci\xf3n se declara a\xf1adiendo una flecha (->) y la definici\xf3n del par\xe1metro despu\xe9s de la lista de par\xe1metros de entrada. Por ejemplo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"Function add($x : Variant; $y : Integer) -> $result : Integer\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Tambi\xe9n puedes declarar el par\xe1metro de retorno s\xf3lo a\xf1adiendo ",(0,r.jsx)(a.code,{children:": type"}),", en cuyo caso estar\xe1 disponible autom\xe1ticamente a trav\xe9s de ",(0,r.jsx)(a.code,{children:"$0"})," (",(0,r.jsx)(a.a,{href:"#returned-value-1",children:"ver sintaxis secuencial m\xe1s abajo"}),"). Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"Function add($x : Variant; $y : Integer): Integer\n    $0:=$x+$y\n"})}),"\n",(0,r.jsxs)(a.admonition,{type:"warning",children:[(0,r.jsx)(a.p,{children:"Los par\xe1metros, que incluyen el valor devuelto, deben declararse una sola vez. En particular, no se puede declarar el mismo par\xe1metro como entrada y salida, incluso con el mismo tipo. Por ejemplo:"}),(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-qs",children:"    ///declaraci\xf3n inv\xe1lida\nmyTransform de funci\xf3n ($x : Integerto) -> $x : Integer \n    //error: $x se declara dos veces\n"})})]}),"\n",(0,r.jsx)(a.h3,{id:"tipos-de-datos-soportados",children:"Tipos de datos soportados"}),"\n",(0,r.jsxs)(a.p,{children:["Con los par\xe1metros con nombre, puede utilizar los mismos tipos de datos ",(0,r.jsxs)(a.a,{href:"/docs/es/19/Concepts/variables#using-the-var-keyword",children:["soportados por la palabra clave ",(0,r.jsx)(a.code,{children:"var"})]}),", incluidos los objetos de las clases.  Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"Function saveToFile($entity : cs.ShapesEntity; $file : 4D.File)\n"})}),"\n",(0,r.jsx)(a.h2,{id:"par\xe1metros-secuenciales",children:"Par\xe1metros secuenciales"}),"\n",(0,r.jsxs)(a.p,{children:["Como alternativa a la sintaxis ",(0,r.jsx)(a.a,{href:"#named-parameters",children:"par\xe1metros nombrados"}),", puede declarar los par\xe1metros utilizando variables numeradas secuencialmente: ",(0,r.jsx)(a.strong,{children:"$1"}),", ",(0,r.jsx)(a.strong,{children:"$2"}),", ",(0,r.jsx)(a.strong,{children:"$3"}),", etc. La numeraci\xf3n de las variables locales representa el orden de los par\xe1metros."]}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsxs)(a.p,{children:["Aunque esta sintaxis es soportada por las funciones clase, se recomienda utilizar la sintaxis ",(0,r.jsx)(a.a,{href:"#named-parameters",children:"par\xe1metros nombrados"})," en este caso."]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Por ejemplo, cuando se llama a un m\xe9todo proyecto ",(0,r.jsx)(a.code,{children:"DO_SOMETHING"})," con tres par\xe1metros:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"DO_SOMETHING($WithThis;$AndThat;$ThisWay)\n"})}),"\n",(0,r.jsx)(a.p,{children:"En el c\xf3digo del m\xe9todo, el valor de cada par\xe1metro se copia autom\xe1ticamente en las variables $1, $2, $3:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'  //C\xf3digo del m\xe9todo DO_SOMETHING\n  //Asumiendo que todos los par\xe1metros son de tipo texto\n C_TEXT($1;$2;$3)\n ALERT("I received "+$1+" and "+$2+" and also "+$3)\n  //$1 contiene el par\xe1metro $WithThis\n  //$2 contiene el par\xe1metro $AndThat\n  //$3 contiene el par\xe1metro $ThisWay\n'})}),"\n",(0,r.jsx)(a.h3,{id:"valor-devuelto-1",children:"Valor devuelto"}),"\n",(0,r.jsxs)(a.p,{children:["El valor a devolver se pone autom\xe1ticamente en la variable local ",(0,r.jsx)(a.code,{children:"$0"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["Por ejemplo, el siguiente m\xe9todo, llamado ",(0,r.jsx)(a.code,{children:"Uppercase4"}),", devuelve una cadena con los cuatro primeros caracteres de la cadena que se han pasado en may\xfasculas:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"$0:=Uppercase(Substring($1;1;4))+Substring($1;5)\n"})}),"\n",(0,r.jsx)(a.p,{children:"El siguiente es un ejemplo que utiliza el m\xe9todo Uppercase4:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'$NewPhrase:=Uppercase4("This is good.")\n'})}),"\n",(0,r.jsxs)(a.p,{children:["En este ejemplo, la variable ",(0,r.jsx)(a.em,{children:"$NewPhrase"})," recibe \u201cTHIS is good.\u201d"]}),"\n",(0,r.jsxs)(a.p,{children:["El valor devuelto, ",(0,r.jsx)(a.code,{children:"$0"}),", es una variable local dentro de la subrutina. Puede utilizarse como tal dentro de la subrutina. Por ejemplo, puede escribir:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"// Do_something\n$0:=Uppercase($1)\nALERT($0)\n"})}),"\n",(0,r.jsxs)(a.p,{children:["En este ejemplo, ",(0,r.jsx)(a.code,{children:"$0"})," se le asign\xf3 primero el valor de ",(0,r.jsx)(a.code,{children:"$1"}),", y luego se us\xf3 como par\xe1metro del comando ",(0,r.jsx)(a.code,{children:"ALERT"}),". Dentro de la subrutina, puede utilizar ",(0,r.jsx)(a.code,{children:"$0"})," de la misma manera que utilizar\xeda cualquier otra variable local. Es 4D quien devuelve el valor de ",(0,r.jsx)(a.code,{children:"$0"})," (tal y como est\xe1 cuando la subrutina termina) al m\xe9todo llamado."]}),"\n",(0,r.jsx)(a.h3,{id:"tipos-de-datos-soportados-1",children:"Tipos de datos soportados"}),"\n",(0,r.jsxs)(a.p,{children:["Puede utilizar toda ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/quick-tour#expression-types",children:"expresi\xf3n"})," como par\xe1metro secuencial, excepto:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"tablas"}),"\n",(0,r.jsx)(a.li,{children:"arrays"}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Las expresiones de tablas o arrays s\xf3lo pueden pasarse ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/pointer#pointers-as-parameters-to-methods",children:"como referencia utilizando un puntero"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"indirecci\xf3n-de-par\xe1metros-n",children:"Indirecci\xf3n de par\xe1metros (${N})"}),"\n",(0,r.jsxs)(a.p,{children:["Los m\xe9todos proyecto 4D aceptan un n\xfamero variable de par\xe1metros. Puede dirigirse a esos par\xe1metros con un bucle ",(0,r.jsx)(a.code,{children:"For...End for"}),", el comando ",(0,r.jsx)(a.a,{href:"https://doc.4d.com/4dv19/help/command/en/page259.html",children:(0,r.jsx)(a.code,{children:"Count parameters"})}),"y ",(0,r.jsx)(a.strong,{children:"la sintaxis de indirecci\xf3n de par\xe1metros"}),". Dentro del m\xe9todo, una direcci\xf3n de indirecci\xf3n tiene el formato ",(0,r.jsx)(a.code,{children:"${N}"}),", donde ",(0,r.jsx)(a.code,{children:"N"})," es una expresi\xf3n num\xe9rica. ",(0,r.jsx)(a.code,{children:"${N}"})," se denomina ",(0,r.jsx)(a.strong,{children:"par\xe1metro gen\xe9rico"}),"."]}),"\n",(0,r.jsx)(a.h3,{id:"utilizaci\xf3n-de-los-par\xe1metros-gen\xe9ricos",children:"Utilizaci\xf3n de los par\xe1metros gen\xe9ricos"}),"\n",(0,r.jsx)(a.p,{children:"Por ejemplo, considere un m\xe9todo que suma valores y devuelve la suma formateada seg\xfan un formato que se pasa como par\xe1metro. Cada vez que se llama a este m\xe9todo, el n\xfamero de valores a sumar puede variar. Debemos pasar los valores como par\xe1metros al m\xe9todo y el formato en forma de cadena de caracteres. El n\xfamero de valores puede variar de una llamada a otra."}),"\n",(0,r.jsxs)(a.p,{children:["Aqu\xed est\xe1 el m\xe9todo, llamado ",(0,r.jsx)(a.code,{children:"MySum"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:" #DECLARE($format : Text) -> $result : Text\n $sum:=0\n For($i;2;Count parameters)\n    $sum:=$sum+${$i}\n End for\n $result:=String($sum;$format)\n"})}),"\n",(0,r.jsx)(a.p,{children:"Los par\xe1metros del m\xe9todo deben pasarse en el orden correcto, primero el formato y luego un n\xfamero variable de valores:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:' Result:=MySum("##0.00";125,2;33,5;24) //"182.70"\n Result:=MySum("000";1;2;200) //"203"\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Tenga en cuenta que aunque haya declarado 0, 1 o m\xe1s par\xe1metros en el m\xe9todo, siempre puede pasar el n\xfamero de par\xe1metros que desee. Los par\xe1metros est\xe1n disponibles dentro del m\xe9todo llamado a trav\xe9s de la sintaxis ",(0,r.jsx)(a.code,{children:"${N}"})," y el tipo de los par\xe1metros extra es ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/variant",children:"Variant"})," por defecto (puede declararlos utilizando una ",(0,r.jsx)(a.a,{href:"#declaring-generic-parameters",children:"directiva del compilador"}),"). S\xf3lo hay que asegurarse de que los par\xe1metros existen, gracias al comando ",(0,r.jsx)(a.a,{href:"https://doc.4d.com/4dv19/help/command/en/page259.html",children:(0,r.jsx)(a.code,{children:"Count parameters"})}),". Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'//m\xe9todo foo\n#DECLARE($p1: Text;$p2 : Text; $p3 : Date) \nFor($i;1;Count parameters)\n    ALERT("param "+String($i)+" = "+String(${$i}))\nEnd for\n'})}),"\n",(0,r.jsx)(a.p,{children:"Este m\xe9todo se puede llamar:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'foo("hello";"world";!01/01/2021!;42;?12:00:00?) //extra parameters are passed //se pasan par\xe1metros adicionales\n'})}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsx)(a.p,{children:"La indirecci\xf3n de par\xe1metros se gestiona mejor si se respeta la siguiente convenci\xf3n: si s\xf3lo algunos de los par\xe1metros se dirigen por indirecci\xf3n, deben pasarse despu\xe9s de los dem\xe1s."}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"declaraci\xf3n-de-par\xe1metros-gen\xe9ricos",children:"Declaraci\xf3n de par\xe1metros gen\xe9ricos"}),"\n",(0,r.jsxs)(a.p,{children:["Al igual que con otras variables locales, no es obligatorio declarar los par\xe1metros gen\xe9ricos mediante una directiva del compilador. Sin embargo, se recomienda para evitar toda ambig\xfcedad. Los par\xe1metros gen\xe9ricos no declarados obtienen autom\xe1ticamente el tipo ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/variant",children:"Variant"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"Para declarar par\xe1metros gen\xe9ricos, se utiliza una directiva del compilador a la que se pasa ${N} como par\xe1metro, donde N especifica el primer par\xe1metro gen\xe9rico."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:" C_TEXT(${4})\n"})}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsxs)(a.p,{children:["La declaraci\xf3n de par\xe1metros gen\xe9ricos s\xf3lo puede hacerse con ",(0,r.jsx)(a.a,{href:"#sequential-parameters",children:"la sintaxis secuencial"}),"."]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"Este comando significa que a partir del cuarto par\xe1metro (incluido), el m\xe9todo puede recibir un n\xfamero variable de par\xe1metros de tipo texo. $1, $2 y $3 pueden ser de cualquier tipo de datos. Sin embargo, si se utiliza $2 por indirecci\xf3n, el tipo de datos utilizado ser\xe1 el tipo gen\xe9rico. As\xed, ser\xe1 del tipo de datos texto, aunque para usted fuera, por ejemplo, del tipo de datos Real."}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsx)(a.p,{children:"El n\xfamero en la declaraci\xf3n tiene que ser una constante y no una variable."}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"declaraci\xf3n-de-los-par\xe1metros-para-el-modo-compilado",children:"Declaraci\xf3n de los par\xe1metros para el modo compilado"}),"\n",(0,r.jsxs)(a.p,{children:["Aunque no sea obligatorio en ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/interpreted-compiled",children:"modo interpretado"}),", debe declarar cada par\xe1metro en los m\xe9todos o funciones llamados para evitar problemas."]}),"\n",(0,r.jsxs)(a.p,{children:["Cuando se utiliza la ",(0,r.jsx)(a.a,{href:"#named-parameters",children:"sintaxis de variables nombradas"}),", los par\xe1metros se declaran autom\xe1ticamente a trav\xe9s de la palabra clave ",(0,r.jsx)(a.code,{children:"#DECLARE"})," o del prototipo ",(0,r.jsx)(a.code,{children:"Function"}),". Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"Function add($x : Variant; $y : Integer)-> $result : Integer\n    // todos los par\xe1metros se declaran con su tipo\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Cuando se utiliza ",(0,r.jsx)(a.a,{href:"#sequential-parameters",children:"la sintaxis de la variable secuencial"}),", hay que asegurarse de que todos los par\xe1metros se declaran correctamente. En el siguiente ejemplo, el m\xe9todo ",(0,r.jsx)(a.code,{children:"Capitalize"})," proyecto acepta un par\xe1metro texto y devuelve un resultado texto:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"  // M\xe9todo proyecto Mayusculas\n  // Mayusculas( Texto ) -> Texto\n  // Mayusculas( Cadena fuente ) -> Cadena con la primera letra en may\xfascula\n\n C_TEXT($0;$1)\n $0:=Uppercase(Substring($1;1;1))+Lowercase(Substring($1;2))\n"})}),"\n",(0,r.jsxs)(a.p,{children:["La utilizaci\xf3n de comandos tales como ",(0,r.jsx)(a.code,{children:"New process"})," con m\xe9todos proceso que aceptan par\xe1metros tambi\xe9n requiere que los par\xe1metros se declaren expl\xedcitamente en el m\xe9todo llamado. Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'C_TEXT($string)\nC_LONGINT($idProc;$int)\nC_OBJECT($obj)\n\n$idProc:=New process("foo_method";0;"foo_process";$string;$int;$obj)\n'})}),"\n",(0,r.jsx)(a.p,{children:'Este c\xf3digo puede ser ejecutado en modo compilado s\xf3lo si "foo_method" declara sus par\xe1metros:'}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"//foo_method\nC_TEXT($1)\nC_LONGINT($2)\nC_OBJECT($3)\n...\n"})}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsx)(a.p,{children:'En modo compilado, puede agrupar todos los par\xe1metros de las variables locales de los m\xe9todos proyecto en un m\xe9todo espec\xedfico con un nombre que empiece por "Compiler". Dentro de este m\xe9todo, se pueden predeclarar los par\xe1metros de cada m\xe9todo, por ejemplo:'}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:" // Compiler_method\n C_REAL(OneMethodAmongOthers;$1) \n"})}),"\n",(0,r.jsxs)(a.p,{children:["Ver la p\xe1gina ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/interpreted-compiled",children:"Modos interpretado y compilado"})," para m\xe1s informaci\xf3n."]}),"\n",(0,r.jsx)(a.p,{children:'La declaraci\xf3n de par\xe1metros tambi\xe9n es obligatoria en los siguientes contextos (estos contextos no soportan la declaraci\xf3n en un m\xe9todo "Compiler"):'}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["M\xe9todos base - Por ejemplo, el ",(0,r.jsx)(a.code,{children:"m\xe9todo base On Web Connection"})," recibe seis par\xe1metros, de $1 a $6, de tipo Texto. Al principio del m\xe9todo base, debe escribir (incluso si no se utilizan todos los par\xe1metros):"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"// On Web Connection\nC_TEXT($1;$2;$3;$4;$5;$6)\n"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:"Triggers - El par\xe1metro $0 (Entero largo), que es el resultado de un trigger, ser\xe1 digitado por el compilador si el par\xe1metro no ha sido declarado expl\xedcitamente. Sin embargo, si quiere declararlo, debe hacerlo en el propio trigger."}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:["Objetos formulario que aceptan el evento formulario ",(0,r.jsx)(a.code,{children:"On Drag Over"})," - El par\xe1metro $0 (Entero largo), que es el resultado del evento formulario ",(0,r.jsx)(a.code,{children:"On Drag Over"}),", ser\xe1 digitado por el compilador si el par\xe1metro no ha sido declarado expl\xedcitamente. Sin embargo, si quiere declararlo, debe hacerlo en el propio m\xe9todo proyecto. ",(0,r.jsx)(a.strong,{children:"Nota:"})," el compilador no inicializa el par\xe1metro $0. Por lo tanto, tan pronto como utilice el evento formulario ",(0,r.jsx)(a.code,{children:"On Drag Over"}),", debe inicializar $0. Por ejemplo:"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:" C_LONGINT($0)\n If(Form event code=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n"})}),"\n",(0,r.jsx)(a.h2,{id:"tipo-de-par\xe1metro-equivocado",children:"Tipo de par\xe1metro equivocado"}),"\n",(0,r.jsxs)(a.p,{children:["Llamar a un par\xe1metro con un tipo incorrecto es un ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/error-handling",children:"error"})," que impide la correcta ejecuci\xf3n. Por ejemplo, si escribe los siguientes m\xe9todos:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"// method1\n#DECLARE($value : Text)\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"// method2\nmethod1(42) //tipo incorrecto, texto esperado\n"})}),"\n",(0,r.jsx)(a.p,{children:"Este caso es tratado por 4D en funci\xf3n del contexto:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["en ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/interpreted-compiled",children:"proyectos compilados"}),", se genera un error en el paso de compilaci\xf3n siempre que sea posible. En caso contrario, se genera un error cuando se llama al m\xe9todo."]}),"\n",(0,r.jsxs)(a.li,{children:["en los proyectos interpretados:\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["si el par\xe1metro se declar\xf3 utilizando la ",(0,r.jsx)(a.a,{href:"#named-parameters",children:"sintaxis nombrada"})," (",(0,r.jsx)(a.code,{children:"#DECLARE"})," o ",(0,r.jsx)(a.code,{children:"Function"}),"), se genera un error cuando se llama al m\xe9todo."]}),"\n",(0,r.jsxs)(a.li,{children:["si el par\xe1metro fue declarado utilizando ",(0,r.jsx)(a.a,{href:"#sequential-parameters",children:"la sintaxis secuencial "}),"(",(0,r.jsx)(a.code,{children:"C_XXX"}),"), no se genera ning\xfan error, el m\xe9todo llamado recibe un valor vac\xedo del tipo esperado."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"variables-de-entradasalida",children:"Variables de entrada/salida"}),"\n",(0,r.jsxs)(a.p,{children:["Dentro de la subrutina, puede utilizar los par\xe1metros $1, $2... de la misma manera que utilizar\xeda cualquier otra variable local. Sin embargo, en el caso de que utilice comandos que modifiquen el valor de la variable pasada como par\xe1metro (por ejemplo ",(0,r.jsx)(a.code,{children:"Find in field"}),"), los par\xe1metros $1, $2, etc. no pueden utilizarse directamente. Primero debe copiarlos en las variables locales est\xe1ndar (por ejemplo: ",(0,r.jsx)(a.code,{children:"$myvar:=$1"}),")."]}),"\n",(0,r.jsx)(a.h2,{id:"utilizaci\xf3n-de-las-propiedades-de-objeto-como-par\xe1metros-con-nombre",children:"Utilizaci\xf3n de las propiedades de objeto como par\xe1metros con nombre"}),"\n",(0,r.jsxs)(a.p,{children:["La utilizaci\xf3n de objetos como par\xe1metros permite manejar ",(0,r.jsx)(a.strong,{children:"par\xe1metros con nombre"}),". Este estilo de programaci\xf3n es simple, flexible y f\xe1cil de leer."]}),"\n",(0,r.jsxs)(a.p,{children:["Por ejemplo, utilizando el m\xe9todo ",(0,r.jsx)(a.code,{children:"CreatePerson"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n'})}),"\n",(0,r.jsxs)(a.p,{children:["En el m\xe9todo ",(0,r.jsx)(a.code,{children:"ChangeAge"})," puede escribir:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Name+" is "+String($para.Age)+" years old.")\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Esto ofrece una poderosa manera de definir ",(0,r.jsx)(a.a,{href:"#optional-parameters",children:"par\xe1metros opcionales"})," (ver tambi\xe9n abajo). Para manejar los par\xe1metros que faltan, puede:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["verificar si se suministran todos los par\xe1metros esperados compar\xe1ndolos con el valor ",(0,r.jsx)(a.code,{children:"Null"}),", o"]}),"\n",(0,r.jsx)(a.li,{children:"predefinir los valores de los par\xe1metros, o"}),"\n",(0,r.jsx)(a.li,{children:"utilizarlos como valores vac\xedos."}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["En el m\xe9todo ",(0,r.jsx)(a.code,{children:"ChangeAge"})," anterior, las propiedades Age y Name son obligatorias y producir\xedan errores si faltaran. Para evitar este caso, puede escribir simplemente:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'\n  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n'})}),"\n",(0,r.jsx)(a.p,{children:'Entonces ambos par\xe1metros son opcionales; si no se llenan, el resultado ser\xe1 " is 10 years old", pero no se generar\xe1 ning\xfan error.'}),"\n",(0,r.jsx)(a.p,{children:"Por \xfaltimo, con los par\xe1metros con nombre, el mantenimiento o la reproducci\xf3n de las aplicaciones es muy sencillo y seguro. Imagine que m\xe1s adelante se da cuenta de que a\xf1adir 10 a\xf1os no siempre es apropiado. Necesita otro par\xe1metro para definir cu\xe1ntos a\xf1os hay que a\xf1adir. Escriba:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'$person:=New object("Name";"Smith";"Age";40;"toAdd";10)\nChangeAge($person)\n\n//ChangeAge\nvar $1;$para : Object\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n'})}),"\n",(0,r.jsx)(a.p,{children:"El poder aqu\xed es que no tendr\xe1 que cambiar su c\xf3digo existente. Siempre funcionar\xe1 como en la versi\xf3n anterior, pero si es necesario, puede utilizar otro valor que no sea 10 a\xf1os."}),"\n",(0,r.jsx)(a.p,{children:"Con las variables con nombre, cualquier par\xe1metro puede ser opcional. En el ejemplo anterior, todos los par\xe1metros son opcionales y se puede dar cualquiera, en cualquier orden."}),"\n",(0,r.jsx)(a.h2,{id:"par\xe1metros-opcionales",children:"Par\xe1metros opcionales"}),"\n",(0,r.jsxs)(a.p,{children:["En el manual ",(0,r.jsx)(a.em,{children:"Lenguaje de 4D"}),", los caracteres { } (llaves) indican par\xe1metros opcionales. Por ejemplo, ",(0,r.jsx)(a.code,{children:"ALERT (message{; okButtonTitle})"})," significa que el par\xe1metro ",(0,r.jsx)(a.em,{children:"okButtonTitle"})," puede omitirse al llamar al comando. Se puede llamar de las siguientes maneras:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'ALERT("Are you sure?";"Yes I am") //2 par\xe1metros\nALERT("Time is over") //1 par\xe1metro\n'})}),"\n",(0,r.jsx)(a.p,{children:"Los m\xe9todos proyecto 4D tambi\xe9n aceptan estos par\xe1metros opcionales, empezando por la derecha. El problema con los par\xe1metros opcionales es c\xf3mo manejar el caso en que algunos de ellos falten en el m\xe9todo llamado, nunca deber\xeda producir un error. Una buena pr\xe1ctica es asignar valores por defecto a los par\xe1metros no utilizados."}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsxs)(a.p,{children:["Cuando los par\xe1metros opcionales son necesarios en sus m\xe9todos, tambi\xe9n puede considerar el uso de ",(0,r.jsx)(a.a,{href:"#using-objects-properties-as-named-parameters",children:"propiedades de objeto como par\xe1metros con nombre"})," que ofrecen una forma flexible de manejar un n\xfamero variable de par\xe1metros."]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Utilizando el comando ",(0,r.jsx)(a.code,{children:"Count parameters"})," desde dentro del m\xe9todo llamado, puede detectar el n\xfamero real de par\xe1metros y realizar diferentes operaciones dependiendo de lo que haya recibido."]}),"\n",(0,r.jsx)(a.p,{children:"El siguiente ejemplo muestra un mensaje de texto y puede insertar el texto en un documento en el disco o en un \xe1rea de 4D Write Pro:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"// APPEND TEXT Project Method\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n\n #DECLARE($message : Text; $path : Text; $wpArea : Object)\n\n ALERT($message)\n If(Count parameters>=3)\n    WP SET TEXT($wpArea;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($path;$message)\n    End if\n End if\n"})}),"\n",(0,r.jsx)(a.p,{children:"Despu\xe9s de a\xf1adir este m\xe9todo proyecto a su aplicaci\xf3n, puede escribir:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'APPEND TEXT(vtSomeText) //S\xf3lo mostrar\xe1 el mensaje\nAPPEND TEXT(vtSomeText;$path) //Muestra el mensaje y el anexo al documento en $path\nAPPEND TEXT(vtSomeText;"";$wpArea) //Muestra el mensaje y lo escribe en $wpArea\n'})}),"\n",(0,r.jsx)(a.h2,{id:"valores-o-referencias",children:"Valores o referencias"}),"\n",(0,r.jsxs)(a.p,{children:["Cuando pasa un par\xe1metro, 4D siempre eval\xfaa la expresi\xf3n del par\xe1metro en el contexto del m\xe9todo que llama y define el ",(0,r.jsx)(a.strong,{children:"valor resultante"})," en las variables locales en la funci\xf3n de clase o la subrutina. Las variables/par\xe1metros locales no son los campos, variables o expresiones reales pasados por el m\xe9todo que llama; s\xf3lo contienen los valores que se han pasado. Las variables/par\xe1metros locales no son los campos, variables o expresiones reales pasados por el m\xe9todo que llama; s\xf3lo contienen los valores que se han pasado. Por ejemplo:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'    //Esta es una parte del c\xf3digo del m\xe9todo MY_METHOD\nDO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\nALERT([People]Name)\n\n    //Este es el c\xf3digo del m\xe9todo DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n'})}),"\n",(0,r.jsxs)(a.p,{children:["La caja de alerta mostrada por ",(0,r.jsx)(a.code,{children:"DO_SOMETHING"}),' dir\xe1 "WILLIAMS" y la caja de alerta mostrada por ',(0,r.jsx)(a.code,{children:"MY_METHOD"}),' dir\xe1 "williams". El m\xe9todo cambi\xf3 localmente el valor del par\xe1metro $1, pero esto no afecta al valor del campo ',(0,r.jsx)(a.code,{children:"[People]Name"})," pasado como par\xe1metro por el m\xe9todo ",(0,r.jsx)(a.code,{children:"MY_METHOD"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["Hay dos formas de hacer que el m\xe9todo ",(0,r.jsx)(a.code,{children:"DO_SOMETHING"})," cambie el valor del campo:"]}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsx)(a.li,{children:"En lugar de pasar el campo al m\xe9todo, se pasa un puntero al mismo, por lo que se escribir\xeda:"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'  //Esta es una parte del c\xf3digo del m\xe9todo MY_METHOD\n DO_SOMETHING(->[People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Last Name)\n\n  //Este es el c\xf3digo del m\xe9todo DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Aqu\xed el par\xe1metro no es el campo, sino un puntero al mismo. Por lo tanto, dentro del m\xe9todo ",(0,r.jsx)(a.code,{children:"DO SOMETHING"}),", $1 ya no es el valor del campo sino un puntero al campo. El objeto ",(0,r.jsx)(a.strong,{children:"referenciado"}),' por $1 ($1-> en el c\xf3digo anterior) es el campo real. Por lo tanto, cambiar el objeto referenciado va m\xe1s all\xe1 del alcance de la subrutina, y el campo real se ve afectado. En este ejemplo, las dos cajas de alerta dir\xe1n "WILLIAMS".']}),"\n",(0,r.jsxs)(a.ol,{start:"2",children:["\n",(0,r.jsxs)(a.li,{children:["En lugar de que el m\xe9todo ",(0,r.jsx)(a.code,{children:"DO_SOMETHING"}),' "haga algo", puede reescribir el m\xe9todo para que devuelva un valor. Por lo tanto, escribir\xeda:']}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'    //Esta es una parte del c\xf3digo del m\xe9todo MY_METHO\n [People]Name:=DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Name)\n\n    //Este es el c\xf3digo del m\xe9todo DO_SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n'})}),"\n",(0,r.jsxs)(a.p,{children:['Esta segunda t\xe9cnica de retornar un valor por una subrutina se llama " utilizar una funci\xf3n" Se describe en el p\xe1rrafo ',(0,r.jsx)(a.a,{href:"#functions",children:"Funciones"}),". Se describe en el p\xe1rrafo ",(0,r.jsx)(a.a,{href:"#returning-values",children:"Valores devueltos"}),"."]}),"\n",(0,r.jsx)(a.h3,{id:"casos-particulares-objetos-y-colecciones",children:"Casos particulares: objetos y colecciones"}),"\n",(0,r.jsxs)(a.p,{children:["Debe prestar atenci\xf3n al hecho de que los tipos de datos Objeto y Colecci\xf3n s\xf3lo pueden manejarse a trav\xe9s de una referencia (es decir, un ",(0,r.jsx)(a.em,{children:"puntero"})," interno)."]}),"\n",(0,r.jsxs)(a.p,{children:["Por consiguiente, cuando se utilizan estos tipos de datos como par\xe1metros, ",(0,r.jsx)(a.code,{children:"$1, $2..."})," no contienen ",(0,r.jsx)(a.em,{children:"valores"})," sino ",(0,r.jsx)(a.em,{children:"referencias"}),". La modificaci\xf3n del valor de los par\xe1metros ",(0,r.jsx)(a.code,{children:"$1, $2..."})," dentro de la subrutina se propagar\xe1 a cualquier lugar donde se utilice el objeto o colecci\xf3n fuente. Este es el mismo principio que para ",(0,r.jsx)(a.a,{href:"/docs/es/19/Concepts/pointer#pointers-as-parameters-to-methods",children:"los punteros"}),", excepto que los par\xe1metros ",(0,r.jsx)(a.code,{children:"$1, $2..."})," no necesitan ser desreferenciados en la subrutina."]}),"\n",(0,r.jsxs)(a.p,{children:["Por ejemplo, considere el m\xe9todo ",(0,r.jsx)(a.code,{children:"CreatePerson"})," que crea un objeto y lo env\xeda como par\xe1metro:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n'})}),"\n",(0,r.jsxs)(a.p,{children:["El m\xe9todo ",(0,r.jsx)(a.code,{children:"ChangeAge"})," a\xf1ade 10 al atributo Age del objeto recibido"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-4d",children:"  //ChangeAge\n #DECLARE ($person : Object)\n $person.Age:=$person.Age+10\n ALERT(String($person.Age))\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Cuando se ejecuta el m\xe9todo ",(0,r.jsx)(a.code,{children:"CreatePerson"}),', las dos cajas de alerta dir\xe1n "50" ya que la misma referencia de objeto es manejada por ambos m\xe9todos.']}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"4D Server:"}),' cuando se pasan par\xe1metros entre m\xe9todos que no se ejecutan en la misma m\xe1quina (utilizando por ejemplo la opci\xf3n "Ejecutar en el servidor"), las referencias no son utilizables. En estos casos, se env\xedan copias de los par\xe1metros de objetos y colecciones en lugar de referencias.']})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},221020:(e,a,o)=>{var r=o(296540),n=Symbol.for("react.element"),s=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,d=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function c(e,a,o){var r,s={},c=null,t=null;for(r in void 0!==o&&(c=""+o),void 0!==a.key&&(c=""+a.key),void 0!==a.ref&&(t=a.ref),a)l.call(a,r)&&!i.hasOwnProperty(r)&&(s[r]=a[r]);if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===s[r]&&(s[r]=a[r]);return{$$typeof:n,type:e,key:c,ref:t,props:s,_owner:d.current}}a.Fragment=s,a.jsx=c,a.jsxs=c},474848:(e,a,o)=>{e.exports=o(221020)},28453:(e,a,o)=>{o.d(a,{R:()=>l,x:()=>d});var r=o(296540);const n={},s=r.createContext(n);function l(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);