"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["93715"],{235737:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>d,toc:()=>c,default:()=>m,metadata:()=>r,assets:()=>o,contentTitle:()=>l});var r=JSON.parse('{"id":"commands/num","title":"Num","description":"Num ( expression {; separator} ) Real","source":"@site/i18n/es/docusaurus-plugin-content-docs/version-21/commands/num.md","sourceDirName":"commands","slug":"/commands/num","permalink":"/docs/es/commands/num","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20commands%2Fnum.md%20(21)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"21","frontMatter":{"id":"num","title":"Num","slug":"/commands/num","displayed_sidebar":"docs"},"sidebar":"docs","previous":{"title":"Match regex","permalink":"/docs/es/commands/match-regex"},"next":{"title":"Position","permalink":"/docs/es/commands/position"}}'),a=s(785893),i=s(250065);let d={id:"num",title:"Num",slug:"/commands/num",displayed_sidebar:"docs"},l=void 0,o={},c=[{value:"Descripci\xf3n",id:"descripci\xf3n",level:2},{value:"Expresiones de tipo cadena",id:"expresiones-de-tipo-cadena",level:3},{value:"Num(string{;separator})",id:"numstringseparator",level:4},{value:"Par\xe1metro <em>separador</em>",id:"par\xe1metro-separador",level:4},{value:"Num(string;base)",id:"numstringbase",level:4},{value:"Expresiones booleanas",id:"expresiones-booleanas",level:3},{value:"Expresiones num\xe9ricas",id:"expresiones-num\xe9ricas",level:3},{value:"Expresiones indefinidas",id:"expresiones-indefinidas",level:3},{value:"Ejemplo 1",id:"ejemplo-1",level:2},{value:"Ejemplo 2",id:"ejemplo-2",level:2},{value:"Ejemplo 3",id:"ejemplo-3",level:2},{value:"Ejemplo 4",id:"ejemplo-4",level:2},{value:"Ver tambi\xe9n",id:"ver-tambi\xe9n",level:2},{value:"Propiedades",id:"propiedades",level:2}];function t(e){let n={a:"a",admonition:"admonition",br:"br",code:"code",details:"details",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",summary:"summary",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Num"})," ( ",(0,a.jsx)(n.em,{children:"expression"})," {; ",(0,a.jsx)(n.em,{children:"separator"}),"} ) : Real",(0,a.jsx)(n.br,{}),(0,a.jsx)(n.strong,{children:"Num"})," ( ",(0,a.jsx)(n.em,{children:"expression"})," ; ",(0,a.jsx)(n.em,{children:"base"})," ) : Real"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Par\xe1metros"}),(0,a.jsx)(n.th,{children:"Tipo"}),(0,a.jsx)(n.th,{}),(0,a.jsx)(n.th,{children:"Descripci\xf3n"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"expresi\xf3n"}),(0,a.jsx)(n.td,{children:"Text, Boolean, Integer"}),(0,a.jsx)(n.td,{children:"\u2192"}),(0,a.jsx)(n.td,{children:"Cadena a convertir en num\xe9rica o Booleano para devolver 0 o 1, o Expresi\xf3n num\xe9rica"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"separador"}),(0,a.jsx)(n.td,{children:"Text"}),(0,a.jsx)(n.td,{children:"\u2192"}),(0,a.jsx)(n.td,{children:"Separador decimal"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"base"}),(0,a.jsx)(n.td,{children:"Integer"}),(0,a.jsx)(n.td,{children:"\u2192"}),(0,a.jsx)(n.td,{children:"Valor entre 2 y 36 que representa la base"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Resultado"}),(0,a.jsx)(n.td,{children:"Real"}),(0,a.jsx)(n.td,{children:"\u2190"}),(0,a.jsx)(n.td,{children:"Forma num\xe9rica del par\xe1metro de expresi\xf3n"})]})]})]}),"\n",(0,a.jsxs)(n.details,{children:[(0,a.jsx)(n.summary,{children:"Historia"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Lanzamiento"}),(0,a.jsx)(n.th,{children:"Modificaciones"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"21"}),(0,a.jsxs)(n.td,{children:["Soporte del par\xe1metro ",(0,a.jsx)(n.em,{children:"base"})]})]})})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,a.jsxs)(n.p,{children:["El comando ",(0,a.jsx)(n.strong,{children:"Num"})," devuelve la forma num\xe9rica de la cadena, booleano o expresi\xf3n num\xe9rica que se pasa en ",(0,a.jsx)(n.em,{children:"expression"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Cuando ",(0,a.jsx)(n.em,{children:"expression"})," es de tipo cadena, puede utilizar un par\xe1metro ",(0,a.jsx)(n.em,{children:"separator"})," o un par\xe1metro ",(0,a.jsx)(n.em,{children:"base"})," (ver abajo)."]}),"\n",(0,a.jsx)(n.h3,{id:"expresiones-de-tipo-cadena",children:"Expresiones de tipo cadena"}),"\n",(0,a.jsxs)(n.p,{children:["Cuando se utiliza el comando ",(0,a.jsx)(n.strong,{children:"Num"})," con una ",(0,a.jsx)(n.em,{children:"expression"})," cadena, hay dos sintaxis disponibles:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Num(string{;separator})"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Num(string;base)"})}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"numstringseparator",children:"Num(string{;separator})"}),"\n",(0,a.jsxs)(n.p,{children:["Si ",(0,a.jsx)(n.em,{children:"expression"})," contiene s\xf3lo uno o m\xe1s caracteres alfab\xe9ticos, ",(0,a.jsx)(n.strong,{children:"Num"})," devuelve un cero. Si ",(0,a.jsx)(n.em,{children:"expression"}),' incluye caracteres alfab\xe9ticos y num\xe9ricos, el comando ignora los caracteres alfab\xe9ticos. As\xed, transforma la cadena "a1b2c3" en el n\xfamero 123.']}),"\n",(0,a.jsxs)(n.p,{children:["Hay tres caracteres reservados que ",(0,a.jsx)(n.strong,{children:"Num"})," trata de forma especial: el separador decimal definido en el sistema (si no se pasa el par\xe1metro ",(0,a.jsx)(n.em,{children:"separator"}),'), el gui\xf3n "',(0,a.jsx)(n.em,{children:"-"}),'" y "',(0,a.jsx)(n.em,{children:"e"}),'". ',(0,a.jsx)(n.em,{children:"o"}),' "E". Estos caracteres se interpretan como caracteres de formato num\xe9rico.']}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["El separador decimal se interpreta como un decimal y debe aparecer incluido en una cadena num\xe9rica. Por defecto, el comando utiliza el separador decimal definido por el sistema operativo. Puede modificar este car\xe1cter utilizando el par\xe1metro ",(0,a.jsx)(n.em,{children:"separator"})," (ver abajo)."]}),"\n",(0,a.jsxs)(n.li,{children:['El gui\xf3n hace que el n\xfamero o exponente sea negativo. El gui\xf3n debe aparecer antes de todo car\xe1cter num\xe9rico negativo o despu\xe9s de la "e" para un exponente. Excepto en el caso del car\xe1cter "e", si se introduce un gui\xf3n en una cadena num\xe9rica, se ignora la parte de la cadena que va despu\xe9s del gui\xf3n. Por ejemplo, ',(0,a.jsx)(n.code,{children:'Num("123-456")'})," devuelve 123, pero ",(0,a.jsx)(n.code,{children:'Num("-9")'})," devuelve -9."]}),"\n",(0,a.jsxs)(n.li,{children:['La e o E hace que todo caracter num\xe9rico a su derecha se interprete como la potencia de un exponente. La "e" debe estar incluida en una cadena num\xe9rica. Entonces, ',(0,a.jsx)(n.code,{children:'Num("123e-2")'})," devuelve 1.23.",(0,a.jsx)(n.br,{}),'\nTenga en cuenta que cuando la cadena incluye m\xe1s de una "e", la conversi\xf3n puede dar resultados diferentes en macOS y en Windows.']}),"\n"]}),"\n",(0,a.jsxs)(n.h4,{id:"par\xe1metro-separador",children:["Par\xe1metro ",(0,a.jsx)(n.em,{children:"separador"})]}),"\n",(0,a.jsxs)(n.p,{children:["El par\xe1metro ",(0,a.jsx)(n.em,{children:"separator"})," designa un separador decimal personalizado para evaluar la ",(0,a.jsx)(n.em,{children:"expression"}),". Cuando la cadena a evaluar se expresa con un separador decimal distinto del operador del sistema, el comando devuelve un resultado incorrecto. El par\xe1metro ",(0,a.jsx)(n.em,{children:"separator"})," puede utilizarse en este caso para obtener una evaluaci\xf3n correcta. Cuando se pasa este par\xe1metro, el comando no tiene en cuenta el separador decimal del sistema. Puede pasar uno o m\xe1s caracteres."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["El comando ",(0,a.jsx)(n.a,{href:"/docs/es/commands/get-system-format",children:(0,a.jsx)(n.code,{children:"GET SYSTEM FORMAT"})})," puede utilizarse para averiguar el separador decimal actual, as\xed como otros par\xe1metros del sistema regional."]})}),"\n",(0,a.jsx)(n.h4,{id:"numstringbase",children:"Num(string;base)"}),"\n",(0,a.jsxs)(n.p,{children:["El uso de un par\xe1metro ",(0,a.jsx)(n.em,{children:"base"})," (entero) activa un modo espec\xedfico en el que se especifica el radix (base) del n\xfamero expresado como cadena en ",(0,a.jsx)(n.em,{children:"expression"}),". En particular, esta sintaxis permite convertir cadenas hexadecimales a n\xfameros."]}),"\n",(0,a.jsxs)(n.p,{children:["En el par\xe1metro ",(0,a.jsx)(n.em,{children:"base"}),", pase la base del n\xfamero en ",(0,a.jsx)(n.em,{children:"expression"}),". Puede pasar cualquier valor entero entre 2 y 36."]}),"\n",(0,a.jsxs)(n.p,{children:["Si pasa 0 en ",(0,a.jsx)(n.em,{children:"base"}),", el comando determina la base dependiendo del valor de ",(0,a.jsx)(n.em,{children:"expression"}),". Si ",(0,a.jsx)(n.em,{children:"expression"}),' empieza por "0x", se utiliza base 16. En caso contrario, se utiliza la base 10.']}),"\n",(0,a.jsxs)(n.p,{children:["Si ",(0,a.jsx)(n.em,{children:"expression"})," se eval\xfaa como un n\xfamero decimal, s\xf3lo se convierte la parte entera."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Esta sintaxis sigue estrictamente la especificaci\xf3n ",(0,a.jsxs)(n.a,{href:"https://tc39.es/ecma262/multipage/global-object.html#sec-parseint-string-radix",children:[(0,a.jsx)(n.code,{children:"parseInt"})," EcmaScript"]}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Utilizar esta sintaxis con ",(0,a.jsx)(n.em,{children:"base"}),"=10 no dar\xe1 exactamente los mismos resultados que utilizar la sintaxis sin el par\xe1metro ",(0,a.jsx)(n.em,{children:"base"}),". Por ejemplo, de acuerdo con la especificaci\xf3n EcmaScript, todo caracter que no pertenezca a la base se considera un separador (ver los ejemplos)."]}),"\n"]})}),"\n",(0,a.jsx)(n.h3,{id:"expresiones-booleanas",children:"Expresiones booleanas"}),"\n",(0,a.jsxs)(n.p,{children:["Si pasa una expresi\xf3n booleana, ",(0,a.jsx)(n.strong,{children:"Num"})," devuelve 1 si la expresi\xf3n es True; en caso contrario, devuelve ",(0,a.jsx)(n.em,{children:"0"})," (cero)."]}),"\n",(0,a.jsx)(n.h3,{id:"expresiones-num\xe9ricas",children:"Expresiones num\xe9ricas"}),"\n",(0,a.jsxs)(n.p,{children:["Si pasa una expresi\xf3n num\xe9rica en el par\xe1metro ",(0,a.jsx)(n.em,{children:"expression"}),", ",(0,a.jsx)(n.strong,{children:"Num"})," devuelve el valor pasado en el par\xe1metro ",(0,a.jsx)(n.em,{children:"expression"})," tal cual. Esto puede ser \xfatil sobre todo en el caso de la programaci\xf3n gen\xe9rica que utiliza punteros."]}),"\n",(0,a.jsx)(n.h3,{id:"expresiones-indefinidas",children:"Expresiones indefinidas"}),"\n",(0,a.jsxs)(n.p,{children:["Si la evaluaci\xf3n de ",(0,a.jsx)(n.em,{children:"expression"})," da un valor indefinido, el comando devuelve 0 (cero). Esto es \xfatil cuando se espera que el resultado de una expresi\xf3n (por ejemplo, un atributo de objeto) sea un n\xfamero, aunque pueda ser indefinido."]}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-1",children:"Ejemplo 1"}),"\n",(0,a.jsxs)(n.p,{children:["El siguiente ejemplo ilustra c\xf3mo funciona ",(0,a.jsx)(n.strong,{children:"Num"})," cuando se le pasa un \xfanico argumento de cadena:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-4d",children:'$result:=Num("ABCD")\xa0// 0\n$result:=Num("A1B2C3")\xa0// 123\n$result:=Num("123")\xa0// 123\n$result:=Num("123.4")\xa0// 123.4\n$result:=Num("\u2013123")\xa0// \u2013123\n$result:=Num("\u2013123e2")\xa0// \u201312300\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-2",children:"Ejemplo 2"}),"\n",(0,a.jsxs)(n.p,{children:["Aqu\xed, ",(0,a.jsx)(n.em,{children:"[Client]Debt"})," se compara con ",(0,a.jsx)(n.em,{children:"1000$"}),". El comando Num aplicado a estas comparaciones devuelve 1 \xf3 0. Multiplicar 1 o 0 por una cadena repite la cadena una vez o devuelve la cadena vac\xeda. Como resultado, el campo ",(0,a.jsx)(n.em,{children:"[Client]Risk"})," obtiene el valor \u201CGood\u201D or \u201CBad\u201D:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-4d",children:'\xa0\xa0// If client owes less than 1000, a good risk.\n\xa0\xa0// If client owes more than 1000, a bad risk.\n\xa0[Client]Risk:=("Good"*Num([Client]Debt<1000))+("Bad"*Num([Client]Debt>=1000))\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-3",children:"Ejemplo 3"}),"\n",(0,a.jsx)(n.p,{children:"This example compares the results obtained depending on the \u201Ccurrent\u201D separator:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-4d",children:'\xa0$thestring:="33,333.33"\n\xa0$thenum:=Num($thestring)\n\xa0\xa0// by default, $thenum equals 33,33333 on a French system\n\xa0$thenum:=Num($thestring;".")\n\xa0\xa0// $thenum will be correctly evaluated regardless of the system;\n\xa0\xa0// for example, 33 333,33 on a French system\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-4",children:"Ejemplo 4"}),"\n",(0,a.jsxs)(n.p,{children:["Este ejemplo ilustra el uso de la sintaxis ",(0,a.jsx)(n.em,{children:"base"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-4d",children:'$result:=Num("ff";16) // 255 (lower-case hexadecimal)\n$result:=Num("0xFF") // 0\n$result:=Num("0xFF";16) // 255\n$result:=Num("2";2) // 0\n$result:=Num("10.3";16) // 16\n$result:=Num("123.20") // 12320 (standard base 10 syntax)\n$result:=Num("123.20"; 10) // 123 (explicitly specify base 10)\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"ver-tambi\xe9n",children:"Ver tambi\xe9n"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/docs/es/commands/bool",children:"Bool"}),(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.a,{href:"/docs/es/commands/get-system-format",children:"GET SYSTEM FORMAT"}),(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.a,{href:"/docs/es/commands/string",children:"String"})]}),"\n",(0,a.jsx)(n.h2,{id:"propiedades",children:"Propiedades"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{}),(0,a.jsx)(n.th,{})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"N\xfamero de comando"}),(0,a.jsx)(n.td,{children:"11"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Hilo seguro"}),(0,a.jsx)(n.td,{children:"\u2713"})]})]})]})]})}function m(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}},250065:function(e,n,s){s.d(n,{Z:()=>l,a:()=>d});var r=s(667294);let a={},i=r.createContext(a);function d(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);