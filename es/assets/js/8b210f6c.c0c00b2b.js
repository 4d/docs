"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53914],{603905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(667294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=l,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},406328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});n(667294);var a=n(603905);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const r={id:"control-flow",title:"Flujo de control"},i=void 0,s={unversionedId:"Concepts/control-flow",id:"version-20-R5/Concepts/control-flow",title:"Flujo de control",description:"Independientemente de la simplicidad o la complejidad de un m\xe9todo o de una funci\xf3n, siempre utilizar\xe1 uno o varios de los tres tipos de estructuras de programaci\xf3n. Las estructuras de programaci\xf3n determinan el flujo de ejecuci\xf3n, si se ejecutan y el orden de las l\xedneas de instrucciones dentro de un m\xe9todo. Hay tres tipos de estructuras:",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-20-R5/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/es/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"control-flow",title:"Flujo de control"},sidebar:"docs",previous:{title:"Comandos",permalink:"/docs/es/Concepts/commands"},next:{title:"Gesti\xf3n de errores",permalink:"/docs/es/Concepts/error-handling"}},p={},d=[{value:"If...Else...End if",id:"ifelseend-if",level:2},{value:"Ejemplo",id:"ejemplo",level:4},{value:"Case of... Else...End case",id:"case-of-elseend-case",level:2},{value:"Ejemplo",id:"ejemplo-1",level:4},{value:"While...End while",id:"whileend-while",level:2},{value:"Ejemplo",id:"ejemplo-2",level:4},{value:"Repeat...Until",id:"repeatuntil",level:2},{value:"Ejemplo",id:"ejemplo-3",level:4},{value:"For...End for",id:"forend-for",level:2},{value:"Ejemplos b\xe1sicos",id:"ejemplos-b\xe1sicos",level:4},{value:"Variable contador",id:"variable-contador",level:3},{value:"Variable contador decreciente",id:"variable-contador-decreciente",level:4},{value:"Incrementar la variable del contador en m\xe1s de uno",id:"incrementar-la-variable-del-contador-en-m\xe1s-de-uno",level:4},{value:"Optimizing the execution of the For... End for loops",id:"optimizing-the-execution-of-the-for-end-for-loops",level:4},{value:"Comparaci\xf3n de estructuras de bucle",id:"comparaci\xf3n-de-estructuras-de-bucle",level:3},{value:"Nested For... End for looping structures",id:"nested-for-end-for-looping-structures",level:3},{value:"For each... End for each",id:"for-each-end-for-each",level:2},{value:"Bucle en las colecciones",id:"bucle-en-las-colecciones",level:3},{value:"Ejemplo",id:"ejemplo-4",level:4},{value:"Bucle en las selecciones de entidades",id:"bucle-en-las-selecciones-de-entidades",level:3},{value:"Ejemplo",id:"ejemplo-5",level:4},{value:"Bucles en las propiedades de objetos",id:"bucles-en-las-propiedades-de-objetos",level:3},{value:"Ejemplo",id:"ejemplo-6",level:4},{value:"Par\xe1metros begin / end",id:"par\xe1metros-begin--end",level:3},{value:"Ejemplo",id:"ejemplo-7",level:4},{value:"Condiciones Until y While",id:"condiciones-until-y-while",level:3},{value:"Ejemplo",id:"ejemplo-8",level:4},{value:"break y continue",id:"break-y-continue",level:2},{value:"break",id:"break",level:3},{value:"Ejemplo",id:"ejemplo-9",level:4},{value:"continue",id:"continue",level:3},{value:"return {expression}",id:"return-expression",level:2},{value:"Ejemplo",id:"ejemplo-10",level:4}],c={toc:d};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",l({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Independientemente de la simplicidad o la complejidad de un m\xe9todo o de una funci\xf3n, siempre utilizar\xe1 uno o varios de los tres tipos de estructuras de programaci\xf3n. Las estructuras de programaci\xf3n determinan el flujo de ejecuci\xf3n, si se ejecutan y el orden de las l\xedneas de instrucciones dentro de un m\xe9todo. Hay tres tipos de estructuras:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Sequential"),": a sequential structure is a simple, linear structure. Una secuencia es una serie de sentencias que 4D ejecuta una tras otra, de la primera a la \xfaltima. Una instrucci\xf3n de una l\xednea, utilizada frecuentemente para los m\xe9todos de los objetos, es el caso m\xe1s simple de una estructura secuencial. For example: ",(0,a.kt)("inlineCode",{parentName:"p"},"[People]lastName:=Uppercase([People]lastName)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Branching"),": A branching structure allows methods to test a condition and take alternative paths, depending on the result. La condici\xf3n es una expresi\xf3n booleana, una expresi\xf3n que eval\xfaa TRUE o FALSE. One branching structure is the ",(0,a.kt)("a",l({parentName:"p"},{href:"#ifelseend-if"}),(0,a.kt)("inlineCode",{parentName:"a"},"If...Else...End if"))," structure, which directs program flow along one of two paths. The other branching structure is the ",(0,a.kt)("a",l({parentName:"p"},{href:"#case-ofelseend-case"}),(0,a.kt)("inlineCode",{parentName:"a"},"Case of...Else...End case"))," structure, which directs program flow to one of many paths.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Looping"),": When writing methods, it is very common to find that you need a sequence of statements to repeat a number of times. Para hacer frente a esta necesidad, el lenguaje 4D ofrece las siguientes estructuras de bucle:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#whileend-while"}),(0,a.kt)("inlineCode",{parentName:"a"},"While...End while"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#repeatuntil"}),(0,a.kt)("inlineCode",{parentName:"a"},"Repeat...Until"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#forend-for"}),(0,a.kt)("inlineCode",{parentName:"a"},"For...End for"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#for-eachend-for-each"}),(0,a.kt)("inlineCode",{parentName:"a"},"For each...End for each")))))),(0,a.kt)("p",null,"Los bucles se controlan de dos maneras: o bien se repiten hasta que se cumple una condici\xf3n, o bien se repiten un n\xfamero determinado de veces. Each looping structure can be used in either way, but ",(0,a.kt)("inlineCode",{parentName:"p"},"While")," loops and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat")," loops are more appropriate for repeating until a condition is met, and ",(0,a.kt)("inlineCode",{parentName:"p"},"For")," loops are more appropriate for looping a specified number of times. ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," allows mixing both ways and is designed to loop within objects and collections."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:"),' 4D allows you to embed programming structures up to a "depth" of 512 levels.'),(0,a.kt)("h2",l({},{id:"ifelseend-if"}),"If...Else...End if"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n    statement(s)\n End if\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is optional; you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n End if\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure lets your method choose between two actions, depending on whether a test (a Boolean expression) is TRUE or FALSE. Cuando la expresi\xf3n booleana es TRUE, se ejecutan las sentencias que siguen inmediatamente a la prueba. Si la expresi\xf3n booleana es FALSE, se ejecutan las instrucciones que siguen a la l\xednea Else. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," statement is optional; if you omit Else, execution continues with the first statement (if any) following the ",(0,a.kt)("inlineCode",{parentName:"p"},"End if"),"."),(0,a.kt)("p",null,"Tenga en cuenta que la expresi\xf3n booleana siempre se eval\xfaa completamente. Considere en particular la siguiente prueba:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(MethodA & MethodB)\n    ...\n End if\n")),(0,a.kt)("p",null,"La expresi\xf3n es TRUE s\xf3lo si los dos m\xe9todos son TRUE. However, even if ",(0,a.kt)("em",{parentName:"p"},"MethodA")," returns FALSE, 4D will still evaluate ",(0,a.kt)("em",{parentName:"p"},"MethodB"),", which is a useless waste of time. En este caso, es m\xe1s interesante utilizar una estructura como:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(MethodA)\n    If(MethodB)\n       ...\n    End if\n End if\n")),(0,a.kt)("p",null,"The result is similar and ",(0,a.kt)("em",{parentName:"p"},"MethodB")," is evaluated only if necessary."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/es/Concepts/operators#ternary-operator"}),"ternary operator")," allows writing one-line conditional expressions and can replace a full sequence of If..Else statements.")),(0,a.kt)("h4",l({},{id:"ejemplo"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'  // Ask the user to enter a name\n $Find:=Request(Type a name)\n If(OK=1)\n    QUERY([People];[People]LastName=$Find)\n Else\n    ALERT("You did not enter a name.")\n End if \n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," Branching can be performed without statements to be executed in one case or the other. Al desarrollar un algoritmo o una aplicaci\xf3n especializada, nada le impide escribir:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n Else\n    statement(s)\n End if\n")),(0,a.kt)("p",null,"o:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    statement(s)\n Else\n End if\n")),(0,a.kt)("h2",l({},{id:"case-of-elseend-case"}),"Case of... Else...End case"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is optional; you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"As with the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure also lets your method choose between alternative actions. Unlike the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End")," if structure, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure can test a reasonable unlimited number of Boolean expressions and take action depending on which one is TRUE."),(0,a.kt)("p",null,"Cada expresi\xf3n booleana va precedida de dos puntos (",(0,a.kt)("inlineCode",{parentName:"p"},":"),"). Esta combinaci\xf3n de los dos puntos y la expresi\xf3n booleana se llama un caso. Por ejemplo, la siguiente l\xednea es un caso:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),":(bValidate=1)\n")),(0,a.kt)("p",null,"S\xf3lo se ejecutar\xe1n las instrucciones que sigan al primer caso TRUE (y hasta el siguiente). If none of the cases are TRUE, none of the statements will be executed (if no ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is included)."),(0,a.kt)("p",null,"Puede incluir una instrucci\xf3n Else despu\xe9s del \xfaltimo caso. If all of the cases are FALSE, the statements following the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," will be executed."),(0,a.kt)("h4",l({},{id:"ejemplo-1"}),"Ejemplo"),(0,a.kt)("p",null,"Este ejemplo comprueba una variable num\xe9rica y muestra un cuadro de alerta con una palabra:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' Case of\n    :(vResult=1) //Test if the number is 1\n       ALERT("One.") //If it is 1, display an alert\n    :(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    :(vResult=3) //Test if the number is 3\n       ALERT("Three.") //If it is 3, display an alert\n    Else //If it is not 1, 2, or 3, display an alert\n       ALERT("It was not one, two, or three.")\n End case\n')),(0,a.kt)("p",null,"For comparison, here is the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," version of the same method:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' If(vResult=1) //Test if the number is 1\n    ALERT("One.") //If it is 1, display an alert\n Else\n    If(vResult=2) //Test if the number is 2\n       ALERT("Two.") //If it is 2, display an alert\n    Else\n       If(vResult=3) //Test if the number is 3\n          ALERT("Three.") //If it is 3, display an alert\n       Else //If it is not 1, 2, or 3, display an alert\n          ALERT("It was not one, two, or three.")\n       End if\n    End if\n End if\n')),(0,a.kt)("p",null,"Remember that with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure, only the first TRUE case is executed. Aunque dos o m\xe1s casos sean TRUE, s\xf3lo se ejecutar\xe1n las instrucciones que siguen al primer caso TRUE."),(0,a.kt)("p",null,"En consecuencia, cuando quiera implementar pruebas jer\xe1rquicas, debe asegurarse de que las declaraciones de condici\xf3n que est\xe1n m\xe1s abajo en el esquema jer\xe1rquico aparezcan primero en la secuencia de pruebas. For example, the test for the presence of condition1 covers the test for the presence of condition1&condition2 and should therefore be located last in the test sequence. Por ejemplo, el siguiente c\xf3digo nunca ver\xe1 detectada su \xfaltima condici\xf3n:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(vResult=1)\n       ... //statement(s)\n    :((vResult=1) & (vCondition#2)) //this case will never be detected\n       ... //statement(s)\n End case\n")),(0,a.kt)("p",null,'En el c\xf3digo anterior, la presencia de la segunda condici\xf3n no se detecta, ya que la prueba "vResult=1" ramifica el c\xf3digo antes de cualquier otra prueba. Para que el c\xf3digo funcione correctamente, puedes escribirlo as\xed:'),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :((vResult=1) & (vCondition#2)) //this case will be detected first\n       ... //statement(s)\n    :(vResult=1)\n       ... //statement(s)\n End case\n")),(0,a.kt)("p",null,"Adem\xe1s, si quiere implementar pruebas jer\xe1rquicas, puede considerar el uso de c\xf3digo jer\xe1rquico."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," Branching can be performed without statements to be executed in one case or another. Al desarrollar un algoritmo o una aplicaci\xf3n especializada, nada le impide escribir:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n      ...\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"o:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n       statement(s)\n       ...\n        \n    :(Boolean_Expression)\n       statement(s)\n    Else\n End case\n")),(0,a.kt)("p",null,"o:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("h2",l({},{id:"whileend-while"}),"While...End while"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," While(Boolean_Expression)\n    statement(s)\n    {break}  \n    {continue}\n End while\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop executes the statements inside the loop as long as the Boolean expression is TRUE. Comprueba la expresi\xf3n booleana al inicio del bucle y no entra en el bucle si la expresi\xf3n es FALSE."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("p",null,"It is common to initialize the value tested in the Boolean expression immediately before entering the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop. Initializing the value means setting it to something appropriate, usually so that the Boolean expression will be TRUE and ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," executes the loop."),(0,a.kt)("p",null,"El valor de la expresi\xf3n booleana debe poder ser modificado por un elemento dentro del bucle, de lo contrario se ejecutar\xe1 indefinidamente. The following loop continues forever because ",(0,a.kt)("em",{parentName:"p"},"NeverStop")," is always TRUE:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," NeverStop:=True\n While(NeverStop)\n End while\n")),(0,a.kt)("p",null,"Si se encuentra en una situaci\xf3n de este tipo, en la que un m\xe9todo se ejecuta de forma incontrolada, puede utilizar las funciones de rastreo para detener el bucle y localizar el problema. For more information about tracing a method, see the ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/es/Concepts/error-handling"}),"Error handling")," page."),(0,a.kt)("h4",l({},{id:"ejemplo-2"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' CONFIRM("Add a new record?") //The user wants to add a record?\n While(OK=1) //Loop as long as the user wants to\n    ADD RECORD([aTable]) //Add a new record\n End while //The loop always ends with End while\n')),(0,a.kt)("p",null,"In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set by the ",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIRM")," command before the loop starts. If the user clicks the ",(0,a.kt)("strong",{parentName:"p"},"OK")," button in the confirmation dialog box, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 1 and the loop starts. Otherwise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 0 and the loop is skipped. Once the loop starts, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ADD RECORD")," command keeps the loop going because it sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable to 1 when the user saves the record. When the user cancels (does not save) the last record, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 0 and the loop stops."),(0,a.kt)("h2",l({},{id:"repeatuntil"}),"Repeat...Until"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),"Repeat\n    statement(s)\n    {break}  \n    {continue}\nUntil(Boolean_Expression)\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is similar to a ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/es/Concepts/control-flow#whileend-while"}),"While...End while")," loop, except that it tests the Boolean expression after the loop rather than before. Thus, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop always executes the loop once, whereas if the Boolean expression is initially False, a ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop does not execute the loop at all."),(0,a.kt)("p",null,"The other difference with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is that the loop continues until the Boolean expression is TRUE."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h4",l({},{id:"ejemplo-3"}),"Ejemplo"),(0,a.kt)("p",null,"Compare the following example with the example for the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop. Note that the Boolean expression does not need to be initialized\u2014there is no ",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIRM")," command to initialize the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," variable."),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Repeat\n    ADD RECORD([aTable])\n Until(OK=0)\n")),(0,a.kt)("h2",l({},{id:"forend-for"}),"For...End for"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),"For(Counter_Variable;Start_Expression;End_Expression{;Increment_Expression})\n   statement(s)\n    {break}  \n    {continue}\nEnd for\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop is a loop controlled by a counter variable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The counter variable ",(0,a.kt)("em",{parentName:"li"},"Counter_Variable")," is a numeric variable (Real or Long Integer) that the ",(0,a.kt)("inlineCode",{parentName:"li"},"For...End for")," loop initializes to the value specified by ",(0,a.kt)("em",{parentName:"li"},"Start_Expression"),"."),(0,a.kt)("li",{parentName:"ul"},"Each time the loop is executed, the counter variable is incremented by the value specified in the optional value ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),". If you do not specify ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),", the counter variable is incremented by one (1), which is the default."),(0,a.kt)("li",{parentName:"ul"},"When the counter variable passes the ",(0,a.kt)("em",{parentName:"li"},"End_Expression")," value, the loop stops.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," The numeric expressions ",(0,a.kt)("em",{parentName:"p"},"Start_Expression"),", ",(0,a.kt)("em",{parentName:"p"},"End_Expression")," and ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression")," are evaluated once at the beginning of the loop. Si estas expresiones son variables, el cambio de una de estas variables dentro del bucle no afectar\xe1 al bucle."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," However, for special purposes, you can change the value of the counter variable ",(0,a.kt)("em",{parentName:"p"},"Counter_Variable")," within the loop; this will affect the loop."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Usually ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," is less than ",(0,a.kt)("em",{parentName:"li"},"End_Expression"),"."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," and ",(0,a.kt)("em",{parentName:"li"},"End_Expression")," are equal, the loop will execute only once."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," is greater than ",(0,a.kt)("em",{parentName:"li"},"End_Expression"),", the loop will not execute at all unless you specify a negative ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),". Ver los ejemplos.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h4",l({},{id:"ejemplos-b\xe1sicos"}),"Ejemplos b\xe1sicos"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo ejecuta 100 iteraciones:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Hacer algo\n End for\n")),(0,a.kt)("ol",l({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre todos los elementos del array anArray:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("ol",l({},{start:3}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre todos los caracteres del texto vtSomeText:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlChar;1;Length(vtSomeText))\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,a.kt)("ol",l({},{start:4}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre los registros seleccionados para la tabla ","[aTable]",":")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," FIRST RECORD([aTable])\n For($vlRecord;1;Records in selection([aTable]))\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the next record\n    NEXT RECORD([aTable])\n End for\n")),(0,a.kt)("p",null,"Most of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loops you will write in your projects will look like the ones listed in these examples."),(0,a.kt)("h3",l({},{id:"variable-contador"}),"Variable contador"),(0,a.kt)("h4",l({},{id:"variable-contador-decreciente"}),"Variable contador decreciente"),(0,a.kt)("p",null,"En algunos casos, puede querer tener un bucle cuya variable de contador sea decreciente en lugar de creciente. To do so, you must specify ",(0,a.kt)("em",{parentName:"p"},"Start_Expression")," greater than ",(0,a.kt)("em",{parentName:"p"},"End_Expression")," and a negative ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression"),". Los siguientes ejemplos hacen lo mismo que los anteriores, pero en orden inverso:"),(0,a.kt)("ol",l({},{start:5}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo ejecuta 100 iteraciones:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For(vCounter;100;1;-1)\n  //Hacer algo\n End for\n")),(0,a.kt)("ol",l({},{start:6}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre todos los elementos del array anArray:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;Size of array(anArray);1;-1)\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("ol",l({},{start:7}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre todos los caracteres del texto vtSomeText:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlChar;Length(vtSomeText);1;-1)\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,a.kt)("ol",l({},{start:8}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre los registros seleccionados para la tabla ","[aTable]",":")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," LAST RECORD([aTable])\n For($vlRecord;Records in selection([aTable]);1;-1)\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the previous record\n    PREVIOUS RECORD([aTable])\n End for\n")),(0,a.kt)("h4",l({},{id:"incrementar-la-variable-del-contador-en-m\xe1s-de-uno"}),"Incrementar la variable del contador en m\xe1s de uno"),(0,a.kt)("p",null,"If you need to, you can use an ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression")," (positive or negative) whose absolute value is greater than one."),(0,a.kt)("ol",l({},{start:9}),(0,a.kt)("li",{parentName:"ol"},"El siguiente bucle aborda s\xf3lo los elementos pares del array anArray:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;2;Size of array(anArray);2)\n  //Do something with the element #2,#4...#2n\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("h4",l({},{id:"optimizing-the-execution-of-the-for-end-for-loops"}),"Optimizing the execution of the For... End for loops"),(0,a.kt)("p",null,"Puede utilizar variables reales y enteras, as\xed como contadores interproceso, proceso y variables locales. Para bucles repetitivos largos, especialmente en modo compilado, utilice variables locales de tipo Entero largo."),(0,a.kt)("ol",l({},{start:10}),(0,a.kt)("li",{parentName:"ol"},"Aqu\xed un ejemplo:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," var $vlCounter : Integer //utilizar variables Integer locales \n For($vlCounter;1;10000)\n  //Hacer algo\n End for\n")),(0,a.kt)("h3",l({},{id:"comparaci\xf3n-de-estructuras-de-bucle"}),"Comparaci\xf3n de estructuras de bucle"),(0,a.kt)("p",null,"Let's go back to the first ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," example. El siguiente ejemplo ejecuta 100 iteraciones:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Hacer algo\n End for\n")),(0,a.kt)("p",null,"It is interesting to see how the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop would perform the same action. Here is the equivalent ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initialize the counter\n While($i<=100) //Loop 100 times\n  //Do something\n    $i:=$i+1 //Need to increment the counter\n End while\n")),(0,a.kt)("p",null,"Here is the equivalent ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," $i:=1 //Inicializar el contador\n Repeat\n  //Hacer algo\n    $i:=$i+1 //Necesita incrementar el contador\n Until($i=100) //Bucle 100 veces\n")),(0,a.kt)("admonition",l({},{type:"tip"}),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop is usually faster than the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loops, because 4D tests the condition internally for each cycle of the loop and increments the counter. Therefore, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop whenever possible.")),(0,a.kt)("h3",l({},{id:"nested-for-end-for-looping-structures"}),"Nested For... End for looping structures"),(0,a.kt)("p",null,"Puede anidar tantas estructuras de control como necesite (razonablemente). This includes nesting ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loops. Para evitar errores, aseg\xfarese de utilizar diferentes variables de contador para cada estructura de bucle."),(0,a.kt)("p",null,"He aqu\xed dos ejemplos:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo recorre todos los elementos de un array de dos dimensiones:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //...\n  //Do something with the row\n  //...\n    For($vlSubElem;1;Size of array(anArray{$vlElem}))\n  //Do something with the element\n       anArray{$vlElem}{$vlSubElem}:=...\n    End for\n End for\n")),(0,a.kt)("ol",l({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"El siguiente ejemplo construye un array de punteros a todos los campos de fecha presentes en la base:")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," ARRAY POINTER($apDateFields;0)\n $vlElem:=0\n For($vlTable;1;Get last table number)\n    If(Is table number valid($vlTable))\n       For($vlField;1;Get last field number($vlTable))\n          If(Is field number valid($vlTable;$vlField))\n             $vpField:=Field($vlTable;$vlField)\n             If(Type($vpField->)=Is date)\n                $vlElem:=$vlElem+1\n                INSERT IN ARRAY($apDateFields;$vlElem)\n                $apDateFields{$vlElem}:=$vpField\n             End if\n          End if\n       End for\n    End if\n End for\n")),(0,a.kt)("h2",l({},{id:"for-each-end-for-each"}),"For each... End for each"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For each(Current_Item;Expression{;begin{;end}}){Until|While}(Boolean_Expression)}\n    statement(s)\n    {break}  \n    {continue}\n End for each\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," structure iterates a specified ",(0,a.kt)("em",{parentName:"p"},"Current_item")," over all values of the ",(0,a.kt)("em",{parentName:"p"},"Expression"),". The ",(0,a.kt)("em",{parentName:"p"},"Current_item")," type depends on the ",(0,a.kt)("em",{parentName:"p"},"Expression")," type. The ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," loop can iterate through three ",(0,a.kt)("em",{parentName:"p"},"Expression")," types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"colecciones: bucle en cada elemento de la colecci\xf3n,"),(0,a.kt)("li",{parentName:"ul"},"selecciones de entidades: bucle en cada entidad,"),(0,a.kt)("li",{parentName:"ul"},"objetos: bucle en cada propiedad del objeto.")),(0,a.kt)("p",null,"The following table compares the three types of ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null})),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Bucle en las colecciones"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Bucle en las selecciones de entidades"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Bucle en los objetos"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Tipo Current_Item"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Variable del mismo tipo que los elementos de la colecci\xf3n"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Entity"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Variable texto")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Tipos de expresiones"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Colecci\xf3n (con elementos del mismo tipo)"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Entity selection"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Object")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"N\xfamero de bucles (por defecto)"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"N\xfamero de elementos de la colecci\xf3n"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"N\xfamero de entidades en la selecci\xf3n"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"N\xfamero de propiedades del objeto")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Soporte de par\xe1metros begin / end"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"S\xed"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"S\xed"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"No")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"El n\xfamero de bucles se eval\xfaa al inicio y no cambiar\xe1 durante el proceso. La adici\xf3n o eliminaci\xf3n de elementos durante el bucle no suele ser recomendable, ya que puede resultar en redundancia o perdidas de iteraciones."),(0,a.kt)("li",{parentName:"ul"},"By default, the enclosed ",(0,a.kt)("em",{parentName:"li"},"statement(s)")," are executed for each value in ",(0,a.kt)("em",{parentName:"li"},"Expression"),". It is, however, possible to exit the loop by testing a condition either at the begining of the loop (",(0,a.kt)("inlineCode",{parentName:"li"},"While"),") or at the end of the loop (",(0,a.kt)("inlineCode",{parentName:"li"},"Until"),")."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"begin")," and ",(0,a.kt)("em",{parentName:"li"},"end")," optional parameters can be used with collections and entity selections to define boundaries for the loop."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"For each...End for each")," loop can be used on a ",(0,a.kt)("strong",{parentName:"li"},"shared collection")," or a ",(0,a.kt)("strong",{parentName:"li"},"shared object"),". If your code needs to modify one or more element(s) of the collection or object properties, you need to use the ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," keywords. Depending on your needs, you can call the ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," keywords:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"antes de entrar en el bucle, si los elementos deben modificarse juntos por razones de integridad, o"),(0,a.kt)("li",{parentName:"ul"},"dentro del bucle cuando s\xf3lo hay que modificar algunos elementos/propiedades y no es necesario gestionar la integridad.")))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h3",l({},{id:"bucle-en-las-colecciones"}),"Bucle en las colecciones"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the ",(0,a.kt)("em",{parentName:"p"},"Collection")," type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is a variable of the same type as the collection elements. El n\xfamero de bucles se basa en el n\xfamero de elementos de la colecci\xf3n."),(0,a.kt)("p",null,"The collection must contain only elements of the same type, otherwise an error will be returned as soon as the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," variable is assigned the first mismatched value type."),(0,a.kt)("p",null,"At each loop iteration, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," variable is automatically filled with the matching element of the collection. Hay que tener en cuenta los siguientes puntos:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable is of the object type or collection type (i.e. if ",(0,a.kt)("em",{parentName:"li"},"Expression")," is a collection of objects or of collections), modifying this variable will automatically modify the matching element of the collection (because objects and collections share the same references). Si la variable es de tipo escalar, s\xf3lo se modificar\xe1 la variable."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable must be of the same type as the collection elements. Si alg\xfan elemento de la colecci\xf3n no es del mismo tipo que la variable, se genera un error y el bucle se detiene."),(0,a.kt)("li",{parentName:"ul"},"If the collection contains elements with a ",(0,a.kt)("strong",{parentName:"li"},"Null")," value, an error will be generated if the ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable type does not support ",(0,a.kt)("strong",{parentName:"li"},"Null")," values (such as longint variables).")),(0,a.kt)("h4",l({},{id:"ejemplo-4"}),"Ejemplo"),(0,a.kt)("p",null,"Usted quiere calcular algunas estad\xedsticas para una colecci\xf3n de n\xfameros:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," var $nums : Collection\n $nums:=New collection(10;5001;6665;33;1;42;7850)\n var $item;$vEven;$vOdd;$vUnder;$vOver : Integer\n For each($item;$nums)\n    If($item%2=0)\n       $vEven:=$vEven+1\n    Else\n       $vOdd:=$vOdd+1\n    End if\n    Case of\n       :($item<5000)\n          $vUnder:=$vUnder+1\n       :($item>6000)\n          $vOver:=$vOver+1\n    End case\n End for each\n  //$vEven=3, $vOdd=4\n  //$vUnder=4,$vOver=2\n")),(0,a.kt)("h3",l({},{id:"bucle-en-las-selecciones-de-entidades"}),"Bucle en las selecciones de entidades"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the ",(0,a.kt)("em",{parentName:"p"},"Entity selection")," type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is the entity that is currently processed."),(0,a.kt)("p",null,"El n\xfamero de bucles se basa en el n\xfamero de entidades de la selecci\xf3n de entidades. On each loop iteration, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is automatically filled with the entity of the entity selection that is currently processed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," If the entity selection contains an entity that was removed meanwhile by another process, it is automatically skipped during the loop."),(0,a.kt)("p",null,"Keep in mind that any modifications applied on the current entity must be saved explicitly using ",(0,a.kt)("inlineCode",{parentName:"p"},"entity.save()"),"."),(0,a.kt)("h4",l({},{id:"ejemplo-5"}),"Ejemplo"),(0,a.kt)("p",null,"Quiere aumentar el salario de todos los empleados brit\xe1nicos en una selecci\xf3n de entidades:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," var emp : Object\n For each(emp;ds.Employees.query(\"country='UK'\"))\n    emp.salary:=emp.salary*1,03\n    emp.save()\n End for each\n")),(0,a.kt)("h3",l({},{id:"bucles-en-las-propiedades-de-objetos"}),"Bucles en las propiedades de objetos"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the Object type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is a text variable automatically filled with the name of the currently processed property."),(0,a.kt)("p",null,"Las propiedades del objeto se procesan de acuerdo con su orden de creaci\xf3n. Durante el bucle, se pueden a\xf1adir o eliminar propiedades en el objeto, sin modificar el n\xfamero de bucles que quedar\xe1n en funci\xf3n del n\xfamero original de propiedades del objeto."),(0,a.kt)("h4",l({},{id:"ejemplo-6"}),"Ejemplo"),(0,a.kt)("p",null,"Quiere pasar los nombres a may\xfasculas en el siguiente objeto:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'{\n    "firstname": "gregory",\n    "lastname": "badikora",\n    "age": 20\n}\n')),(0,a.kt)("p",null,"Puede escribir:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For each($property;$vObject)\n    If(Value type($vObject[$property])=Is text)\n       $vObject[$property]:=Uppercase($vObject[$property])\n    End if\n End for each\n")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{}),'{\n    "firstname": "GREGORY",\n    "lastname": "BADIKORA",\n    "age": 20\n}\n')),(0,a.kt)("h3",l({},{id:"par\xe1metros-begin--end"}),"Par\xe1metros begin / end"),(0,a.kt)("p",null,"Puede definir los l\xedmites de la iteraci\xf3n utilizando los par\xe1metros opcionales inicio y fin."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("em",{parentName:"p"},"begin")," and ",(0,a.kt)("em",{parentName:"p"},"end")," parameters can only be used in iterations through collections and entity selections (they are ignored on object properties)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the ",(0,a.kt)("em",{parentName:"li"},"begin")," parameter, pass the element position in ",(0,a.kt)("em",{parentName:"li"},"Expression")," at which to start the iteration (",(0,a.kt)("em",{parentName:"li"},"begin")," is included)."),(0,a.kt)("li",{parentName:"ul"},"In the ",(0,a.kt)("em",{parentName:"li"},"end")," parameter, you can also pass the element position in ",(0,a.kt)("em",{parentName:"li"},"Expression")," at which to stop the iteration (",(0,a.kt)("em",{parentName:"li"},"end")," is excluded).")),(0,a.kt)("p",null,"If ",(0,a.kt)("em",{parentName:"p"},"end")," is omitted or if ",(0,a.kt)("em",{parentName:"p"},"end")," is greater than the number of elements in ",(0,a.kt)("em",{parentName:"p"},"Expression"),", elements are iterated from ",(0,a.kt)("em",{parentName:"p"},"begin")," until the last one (included).\nIf the ",(0,a.kt)("em",{parentName:"p"},"begin")," and ",(0,a.kt)("em",{parentName:"p"},"end")," parameters are positive values, they represent actual positions of elements in ",(0,a.kt)("em",{parentName:"p"},"Expression"),".\nIf ",(0,a.kt)("em",{parentName:"p"},"begin")," is a negative value, it is recalculed as ",(0,a.kt)("inlineCode",{parentName:"p"},"begin:=begin+Expression size")," (it is considered as the offset from the end of ",(0,a.kt)("em",{parentName:"p"},"Expression"),"). If the calculated value is negative, ",(0,a.kt)("em",{parentName:"p"},"begin")," is set to 0.\n",(0,a.kt)("strong",{parentName:"p"},"Note:")," Even if begin is negative, the iteration is still performed in the standard order.\nIf ",(0,a.kt)("em",{parentName:"p"},"end")," is a negative value, it is recalculed as ",(0,a.kt)("inlineCode",{parentName:"p"},"end:=end+Expression size")),(0,a.kt)("p",null,"Por ejemplo:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"una colecci\xf3n contiene 10 elementos (numerados de 0 a 9)"),(0,a.kt)("li",{parentName:"ul"},"begin=-4 -> begin=-4+10=6 -> iteration starts at the 6th element (#5)"),(0,a.kt)("li",{parentName:"ul"},"end=-2 -> end=-2+10=8 -> iteration stops before the 8th element (#7), i.e. at the 7th element.")),(0,a.kt)("h4",l({},{id:"ejemplo-7"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' var $col;$col2 : Collection\n $col:=New collection("a";"b";"c";"d";"e")\n $col2:=New collection(1;2;3)\n var $item : Text\n For each($item;$col;0;3)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c"]\n For each($item;$col;-2;-1)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c","d"]\n')),(0,a.kt)("h3",l({},{id:"condiciones-until-y-while"}),"Condiciones Until y While"),(0,a.kt)("p",null,"You can control the ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," execution by adding an ",(0,a.kt)("inlineCode",{parentName:"p"},"Until")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"While")," condition to the loop. When an ",(0,a.kt)("inlineCode",{parentName:"p"},"Until(condition)")," statement is associated to the loop, the iteration will stop as soon as the condition is evaluated to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),", whereas when is case of a ",(0,a.kt)("inlineCode",{parentName:"p"},"While(condition)")," statement, the iteration will stop when the condition is first evaluated to ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Puede pasar cualquiera de las dos palabras clave en funci\xf3n de sus necesidades:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Until")," condition is tested at the end of each iteration, so if the ",(0,a.kt)("em",{parentName:"li"},"Expression")," is not empty or null, the loop will be executed at least once."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"While")," condition is tested at the beginning of each iteration, so according to the condition result, the loop may not be executed at all.")),(0,a.kt)("h4",l({},{id:"ejemplo-8"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," $colNum:=New collection(1;2;3;4;5;6;7;8;9;10)\n \n $total:=0\n For each($num;$colNum)While($total<30) //tested at the beginning\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 36 (1+2+3+4+5+6+7+8)\n \n $total:=1000\n For each($num;$colNum)Until($total>30) //tested at the end\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 1001 (1000+1)\n")),(0,a.kt)("h2",l({},{id:"break-y-continue"}),"break y continue"),(0,a.kt)("p",null,"All looping structures above support both ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements. Estas instrucciones le dan m\xe1s control sobre los bucles al permitir salir del bucle y pasar por alto la iteraci\xf3n actual en cualquier momento."),(0,a.kt)("h3",l({},{id:"break"}),"break"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement terminates the loop containing it. El control del programa fluye hacia la instrucci\xf3n inmediatamente posterior al cuerpo del bucle."),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement is inside a ",(0,a.kt)("a",l({parentName:"p"},{href:"#nested-forend-for-looping-structures"}),"nested loop")," (loop inside another loop), the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement will terminate the innermost loop."),(0,a.kt)("h4",l({},{id:"ejemplo-9"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'For (vCounter;1;100)\n    If ($tab{vCounter}="") //if a condition becomes true\n        break //end of the for loop\n    End if\nEnd for\n')),(0,a.kt)("h3",l({},{id:"continue"}),"continue"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statement terminates execution of the statements in the current iteration of the current loop, and continues execution of the loop with the next iteration."),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'var $text : Text\nFor ($i; 0; 9)\n    If ($i=3)\n        continue //go directly to the next iteration\n    End if\n    $text:=$text+String($i)\nEnd for\n// $text="012456789" \n\n')),(0,a.kt)("h2",l({},{id:"return-expression"}),"return {expression}"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Historia"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Lanzamiento"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Modificaciones"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"19 R4"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"A\xf1adidos"))))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement can be called from anywhere. When a ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement is used in a function or method, the execution of the function or method is stopped. El c\xf3digo restante no se ejecuta y el control se devuelve al llamante."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement can be used to ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/es/Concepts/parameters#return-expression"}),"return a value")," to the caller."),(0,a.kt)("h4",l({},{id:"ejemplo-10"}),"Ejemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer\n\nWhile (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}m.isMDXComponent=!0}}]);