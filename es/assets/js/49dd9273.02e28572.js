/*! For license information please see 49dd9273.02e28572.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[50301],{307950:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=s(474848),d=s(28453);const i={id:"number",title:"N\xfamero (Real, Entero largo, Entero)"},l=void 0,o={id:"Concepts/number",title:"N\xfamero (Real, Entero largo, Entero)",description:"N\xfamero es un t\xe9rmino gen\xe9rico que significa:",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-20/Concepts/dt_number.md",sourceDirName:"Concepts",slug:"/Concepts/number",permalink:"/docs/es/20/Concepts/number",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fdt_number.md%20(20)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20",frontMatter:{id:"number",title:"N\xfamero (Real, Entero largo, Entero)"},sidebar:"docs",previous:{title:"Null e indefinido",permalink:"/docs/es/20/Concepts/null-undefined"},next:{title:"Object",permalink:"/docs/es/20/Concepts/object"}},t={},a=[{value:"Constantes literales num\xe9ricas",id:"Constantes-literales-num\xe9ricas",level:2},{value:"Operadores num\xe9ricos",id:"Operadores-num\xe9ricos",level:2},{value:"M\xf3dulo",id:"M\xf3dulo",level:3},{value:"Divisi\xf3n entera",id:"Divisi\xf3n-entera",level:3},{value:"Comparaci\xf3n real",id:"Comparaci\xf3n-real",level:3},{value:"Prioridad",id:"Prioridad",level:3},{value:"Operadores de bits",id:"Operadores-de-bits",level:2},{value:"Notas",id:"Notas",level:4},{value:"Ejemplos",id:"Ejemplos",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"N\xfamero es un t\xe9rmino gen\xe9rico que significa:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Los campos, variables o expresiones de tipo real. El rango del tipo Real es \xb11,7e\xb1308 (13 d\xedgitos significativos)."}),"\n",(0,r.jsx)(n.li,{children:"Los campos, variables o expresiones de tipo Entero largo. El rango para el tipo de datos Entero largo (4 bytes) es -2^31..(2^31)-1."}),"\n",(0,r.jsx)(n.li,{children:"Los campos, variables o expresiones de tipo Entero. El rango para el tipo de datos Entero (2 bytes) es -32.768..32.767 (2^15..(2^15)-1)."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Nota:"})," los valores de los campos enteros se convierten autom\xe1ticamente en enteros largos cuando se utilizan en el lenguaje 4D."]}),"\n",(0,r.jsx)(n.p,{children:"Puede asignar cualquier tipo de dato num\xe9rico a otro; 4D realiza la conversi\xf3n, truncando o redondeando si es necesario. Sin embargo, cuando los valores est\xe1n fuera del rango, la conversi\xf3n no devolver\xe1 un valor v\xe1lido. Se pueden mezclar los tipos de datos num\xe9ricos en las expresiones."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Nota:"})," en el manual de referencia del lenguaje 4D, sin importar el tipo de datos real, los par\xe1metros de tipo Real, Entero y Entero largo en las descripciones de los comandos se indican como n\xfamero, salvo que se indique lo contrario."]}),"\n",(0,r.jsx)(n.h2,{id:"Constantes-literales-num\xe9ricas",children:"Constantes literales num\xe9ricas"}),"\n",(0,r.jsx)(n.p,{children:"Una constante literal num\xe9rica se escribe como un n\xfamero real. Estos son algunos ejemplos de constantes num\xe9ricas:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:"27\n123.76\n0.0076\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'El separador decimal por defecto es el punto (.), independientemente del lenguaje del sistema. Si ha marcado la opci\xf3n "Utilizar la configuraci\xf3n regional del sistema" en la p\xe1gina de M\xe9todos de las Preferencias, debe utilizar el separador definido en su sistema.'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Los n\xfameros negativos se especifican con el signo menos (-). Por ejemplo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:"-27\n-123.76\n-0.0076\n"})}),"\n",(0,r.jsx)(n.h2,{id:"Operadores-num\xe9ricos",children:"Operadores num\xe9ricos"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operaci\xf3n"}),(0,r.jsx)(n.th,{children:"Sintaxis"}),(0,r.jsx)(n.th,{children:"Devuelve"}),(0,r.jsx)(n.th,{children:"Expression"}),(0,r.jsx)(n.th,{children:"Valor"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Adici\xf3n"}),(0,r.jsx)(n.td,{children:"N\xfamero + N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"2 + 3"}),(0,r.jsx)(n.td,{children:"5"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Resta"}),(0,r.jsx)(n.td,{children:"N\xfamero - N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"3 \u2013 2"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Multiplicaci\xf3n"}),(0,r.jsx)(n.td,{children:"N\xfamero * N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"5 * 2"}),(0,r.jsx)(n.td,{children:"10"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Divisi\xf3n"}),(0,r.jsx)(n.td,{children:"N\xfamero / N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"5 / 2"}),(0,r.jsx)(n.td,{children:"2.5"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Divisi\xf3n entera"}),(0,r.jsx)(n.td,{children:"N\xfamero \\ N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"5 \\ 2"}),(0,r.jsx)(n.td,{children:"2"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"M\xf3dulo"}),(0,r.jsx)(n.td,{children:"N\xfamero % N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"5 % 2"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Exponenciaci\xf3n"}),(0,r.jsx)(n.td,{children:"N\xfamero ^ N\xfamero"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"2 ^ 3"}),(0,r.jsx)(n.td,{children:"8"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Igual"}),(0,r.jsx)(n.td,{children:"N\xfamero = N\xfamero"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"10 = 10"}),(0,r.jsx)(n.td,{children:"True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"10 = 11"}),(0,r.jsx)(n.td,{children:"False"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Desigualdad"}),(0,r.jsx)(n.td,{children:"N\xfamero # N\xfamero"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"10 #11"}),(0,r.jsx)(n.td,{children:"True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"10 # 10"}),(0,r.jsx)(n.td,{children:"False"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mayor que"}),(0,r.jsx)(n.td,{children:"N\xfamero > N\xfamero"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"11 > 10"}),(0,r.jsx)(n.td,{children:"True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"10 > 11"}),(0,r.jsx)(n.td,{children:"False"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Menor que"}),(0,r.jsx)(n.td,{children:"N\xfamero < N\xfamero"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"10 < 11"}),(0,r.jsx)(n.td,{children:"True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"11 < 10"}),(0,r.jsx)(n.td,{children:"False"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mayor o igual que"}),(0,r.jsx)(n.td,{children:"N\xfamero >= N\xfamero"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"11 >= 10"}),(0,r.jsx)(n.td,{children:"True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"10 >= 11"}),(0,r.jsx)(n.td,{children:"False"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Menor o igual que"}),(0,r.jsx)(n.td,{children:"N\xfamero <= N\xfamero"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"10 <= 11"}),(0,r.jsx)(n.td,{children:"True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"11 <= 10"}),(0,r.jsx)(n.td,{children:"False"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"M\xf3dulo",children:"M\xf3dulo"}),"\n",(0,r.jsx)(n.p,{children:"El operador modulo % divide el primer n\xfamero entre el segundo y devuelve un resto de n\xfamero entero. He aqu\xed algunos ejemplos:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"10 % 2 devuelve 0 porque 10 est\xe1 dividido uniformemente por 2."}),"\n",(0,r.jsx)(n.li,{children:"10 % 3 devuelve 1 porque el resto es 1."}),"\n",(0,r.jsx)(n.li,{children:"10,5 % 2 devuelve 0 porque el resto no es un n\xfamero entero."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["El operador modulo % devuelve valores significativos con n\xfameros que est\xe1n en el rango de los enteros largos (de \u20132^31 hasta 2^31 menos 1). Para calcular el m\xf3dulo con n\xfameros fuera de este rango, utilice el comando [",(0,r.jsx)(n.code,{children:"Mod"}),"(",(0,r.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page98.html",children:"https://doc.4d.com/4dv20/help/command/en/page98.html"}),")]."]})}),"\n",(0,r.jsx)(n.h3,{id:"Divisi\xf3n-entera",children:"Divisi\xf3n entera"}),"\n",(0,r.jsx)(n.p,{children:"El operador de divisi\xf3n entero largo \\ devuelve valores significativos s\xf3lo con n\xfameros enteros."}),"\n",(0,r.jsx)(n.h3,{id:"Comparaci\xf3n-real",children:"Comparaci\xf3n real"}),"\n",(0,r.jsxs)(n.p,{children:["Para comparar dos reales por igualdad, el lenguaje 4D realmente compara el valor absoluto de la diferencia con el ",(0,r.jsx)(n.em,{children:"\xe9psilon"}),". Ver el comando ",(0,r.jsx)(n.a,{href:"https://doc.4d.com/4dv20/help/command/en/page623.html",children:(0,r.jsx)(n.code,{children:"SET REAL COMPARISON LEVEL"})}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Por coherencia, el motor de base de datos 4D siempre compara los campos de base de datos de tipo real utilizando un valor de 10^-6 para ",(0,r.jsx)(n.em,{children:"\xe9psilon"})," y no tiene en cuenta el par\xe1metro ",(0,r.jsx)(n.code,{children:"SET REAL COMPARISON LEVEL"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"Prioridad",children:"Prioridad"}),"\n",(0,r.jsx)(n.p,{children:"El orden en que se eval\xfaa una expresi\xf3n se llama prioridad. 4D tiene una precedencia estricta de izquierda a derecha, en la que no se aplica el orden algebraico. Por ejemplo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:" 3+4*5\n"})}),"\n",(0,r.jsx)(n.p,{children:"devuelve 35, porque la expresi\xf3n se eval\xfaa como 3 + 4, dando como resultado 7, que luego se multiplica por 5, con el resultado final de 35."}),"\n",(0,r.jsx)(n.p,{children:"Para anular la precedencia de izquierda a derecha, DEBE utilizar par\xe9ntesis. Por ejemplo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-4d",children:" 3+(4*5)\n"})}),"\n",(0,r.jsx)(n.p,{children:"devuelve 23 porque la expresi\xf3n (4 * 5) se eval\xfaa primero, debido a los par\xe9ntesis. El resultado es 20, que se suma a 3 para el resultado final de 23."}),"\n",(0,r.jsx)(n.p,{children:"Los par\xe9ntesis pueden anidarse dentro de otros conjuntos de par\xe9ntesis. Aseg\xfarese de que cada par\xe9ntesis de la izquierda tenga un par\xe9ntesis de la derecha que coincida para garantizar la evaluaci\xf3n correcta de las expresiones. La falta o el uso incorrecto de los par\xe9ntesis puede provocar resultados inesperados o expresiones no v\xe1lidas. Adem\xe1s, si pretende compilar sus aplicaciones, debe tener par\xe9ntesis coincidentes: el compilador detecta la falta de par\xe9ntesis como un error de sintaxis."}),"\n",(0,r.jsx)(n.h2,{id:"Operadores-de-bits",children:"Operadores de bits"}),"\n",(0,r.jsxs)(n.p,{children:["Los operadores de bits operan sobre expresiones o valores ",(0,r.jsx)(n.strong,{children:"Entero largo"}),"."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Si se pasa un valor de tipo Entero o Real a un operador de tipo bit, 4D eval\xfaa el valor como un valor de tipo Entero Largo antes de calcular el resultado de la expresi\xf3n."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Cuando se utilizan los operadores de bits, hay que pensar en un valor de tipo Entero largo como un array de 32 bits. Los bits est\xe1n numerados de 0 a 31, de derecha a izquierda."}),"\n",(0,r.jsxs)(n.p,{children:["Dado que cada bit puede ser igual a 0 o 1, tambi\xe9n se puede pensar en un valor Entero largo como un valor en el que se pueden almacenar 32 valores booleanos. Un bit igual a 1 significa ",(0,r.jsx)(n.strong,{children:"Verdadero"})," y un bit igual a 0 significa ",(0,r.jsx)(n.strong,{children:"Falso"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Una expresi\xf3n que utiliza un operador bitwise devuelve un valor Entero largo, excepto para el operador Bit Test, donde la expresi\xf3n devuelve un valor Booleano. La siguiente tabla lista los operadores a nivel de bits y su sintaxis:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operaci\xf3n"}),(0,r.jsx)(n.th,{children:"Operador"}),(0,r.jsx)(n.th,{children:"Sintaxis"}),(0,r.jsx)(n.th,{children:"Devuelve"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"&"}),(0,r.jsx)(n.td,{children:"Long & Long"}),(0,r.jsx)(n.td,{children:"Long"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"O (inclusive)"}),(0,r.jsx)(n.td,{children:"|"}),(0,r.jsx)(n.td,{children:"Long | Long"}),(0,r.jsx)(n.td,{children:"Long"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"O (exclusivo)"}),(0,r.jsx)(n.td,{children:"^ |"}),(0,r.jsx)(n.td,{children:"Long ^ | Long"}),(0,r.jsx)(n.td,{children:"Long"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Left Bit Shift"}),(0,r.jsx)(n.td,{children:"<<"}),(0,r.jsx)(n.td,{children:"Long << Long"}),(0,r.jsx)(n.td,{children:"Long (ver nota 1)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Right Bit Shift"}),(0,r.jsx)(n.td,{children:">>"}),(0,r.jsx)(n.td,{children:"Long >> Long"}),(0,r.jsx)(n.td,{children:"Long (ver nota 1)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Bit Set"}),(0,r.jsx)(n.td,{children:"?+"}),(0,r.jsx)(n.td,{children:"Long ?+ Long"}),(0,r.jsx)(n.td,{children:"Long (ver nota 2)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Poner el bit en 0"}),(0,r.jsx)(n.td,{children:"?-"}),(0,r.jsx)(n.td,{children:"Long ?- Long"}),(0,r.jsx)(n.td,{children:"Long (ver nota 2)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Probar bit"}),(0,r.jsx)(n.td,{children:"??"}),(0,r.jsx)(n.td,{children:"Long ?? Long Long"}),(0,r.jsx)(n.td,{children:"Boolean (ver nota 2)"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"Notas",children:"Notas"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Para las operaciones ",(0,r.jsx)(n.code,{children:"Left Bit Shift"})," and ",(0,r.jsx)(n.code,{children:"Right Bit Shift"}),", el segundo operando indica el n\xfamero de posiciones en que se desplazar\xe1n los bits del primer operando en el valor resultante. Por lo tanto, este segundo operando debe estar entre 0 y 31. Tenga en cuenta, sin embargo, que el desplazamiento de 0 devuelve un valor sin cambios y el desplazamiento de m\xe1s de 31 bits devuelve 0x00000000 porque todos los bits se pierden. Si se pasa otro valor como segundo operando, el resultado no es significativo."]}),"\n",(0,r.jsxs)(n.li,{children:["En las operaciones ",(0,r.jsx)(n.code,{children:"Bit Set"}),", ",(0,r.jsx)(n.code,{children:"Bit Clear"})," y ",(0,r.jsx)(n.code,{children:"Bit Test"})," , el segundo operando indica el n\xfamero del bit sobre el que hay que actuar. Por lo tanto, este segundo operando debe estar entre 0 y 31; de lo contrario, el resultado de la expresi\xf3n no es significativo."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"La siguiente tabla lista los operadores a nivel de bits y sus efectos:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operaci\xf3n"}),(0,r.jsx)(n.th,{children:"Descripci\xf3n"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsxs)(n.td,{children:["Cada bit resultante es el resultado de la operaci\xf3n AND l\xf3gica aplicada a los bits de los dos operandos. Aqu\xed est\xe1 la tabla del AND l\xf3gico:",(0,r.jsx)(n.li,{children:"1 & 1 --\x3e 1"}),(0,r.jsx)(n.li,{children:"0 & 1 --\x3e 0"}),(0,r.jsx)(n.li,{children:"1 & 0 --\x3e 0"}),(0,r.jsx)(n.li,{children:"0 & 0 --\x3e 0"}),"Es decir, el bit resultante es 1 si los dos bits del operando son 1; en caso contrario, el bit resultante es 0."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"O (inclusive)"}),(0,r.jsxs)(n.td,{children:["Cada bit resultante es la OR l\xf3gica de los bits de los dos operandos. Aqu\xed est\xe1 la tabla OR l\xf3gica:",(0,r.jsx)(n.li,{children:"1 | 1 --\x3e 1"}),(0,r.jsx)(n.li,{children:"0 | 1 --\x3e 1"}),(0,r.jsx)(n.li,{children:"1 | 0 --\x3e 1"}),(0,r.jsx)(n.li,{children:"0 | 0 --\x3e 0"}),"Es decir, el bit resultante es 1 si al menos uno de los dos bits del operando es 1; en caso contrario, el bit resultante es 0."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"O (exclusivo)"}),(0,r.jsxs)(n.td,{children:["Cada bit resultante es el XOR l\xf3gico de los bits de los dos operandos. Aqu\xed est\xe1 la tabla XOR l\xf3gica:",(0,r.jsx)(n.li,{children:"1 ^ | 1 --\x3e 0"}),(0,r.jsx)(n.li,{children:"0 ^ | 1 --\x3e 1"}),(0,r.jsx)(n.li,{children:"1 ^ | 0 --\x3e 1"}),(0,r.jsx)(n.li,{children:"0 ^ | 0 --\x3e 0"}),"Es decir, el bit resultante es 1 si solo uno de los dos bits del operando es 1; en caso contrario, el bit resultante es 0."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Left Bit Shift"}),(0,r.jsx)(n.td,{children:"El valor resultante se ajusta al valor del primer operando, luego los bits resultantes se desplazan a la izquierda el n\xfamero de posiciones indicado por el segundo operando. Los bits de la izquierda se pierden y los nuevos bits de la derecha se ponen en 0. The bits on the left are lost and the new bits on the right are set to 0."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Right Bit Shift"}),(0,r.jsxs)(n.td,{children:["El valor resultante se ajusta al valor del primer operando, luego los bits resultantes se desplazan a la derecha el n\xfamero de posici\xf3n indicado por el segundo operando. Los bits de la derecha se pierden y los nuevos bits de la izquierda se ponen en 0.",(0,r.jsx)(n.strong,{children:"Nota:"})," Teniendo en cuenta s\xf3lo los valores positivos, desplazar a la derecha N bits es lo mismo que dividir por 2^N."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Bit Set"}),(0,r.jsx)(n.td,{children:"El valor resultante se establece en el valor del primer operando, luego el bit resultante, cuyo n\xfamero es indicado por el segundo operando, se coloca en 1. Los dem\xe1s bits no se modifican."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Poner el bit en 0"}),(0,r.jsx)(n.td,{children:"El valor resultante se establece en el valor del primer operando, luego el bit resultante, cuyo n\xfamero es indicado por el segundo operando, se coloca en 0. Los dem\xe1s bits no se modifican."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Probar bit"}),(0,r.jsx)(n.td,{children:"Devuelve True si, en el primer operando, el bit cuyo n\xfamero indica el segundo operando es igual a 1. Devuelve False si, en el primer operando, el bit cuyo n\xfamero indica el segundo operando es igual a 0."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"Ejemplos",children:"Ejemplos"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operaci\xf3n"}),(0,r.jsx)(n.th,{children:"Ejemplo"}),(0,r.jsx)(n.th,{children:"Result"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Y"}),(0,r.jsx)(n.td,{children:"0x0000FFFF & 0xFF00FF00"}),(0,r.jsx)(n.td,{children:"0x0000FF00"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"O (inclusive)"}),(0,r.jsx)(n.td,{children:"0x0000FFFF | 0xFF00FF00"}),(0,r.jsx)(n.td,{children:"0xFF00FFFF"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"O (exclusivo)"}),(0,r.jsx)(n.td,{children:"0x0000FFFF ^ | 0xFF00FF00"}),(0,r.jsx)(n.td,{children:"0xFF0000FF"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Left Bit Shift"}),(0,r.jsx)(n.td,{children:"0x0000FFFF << 8"}),(0,r.jsx)(n.td,{children:"0x00FFFF00"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Right Bit Shift"}),(0,r.jsx)(n.td,{children:"0x0000FFFF >> 8"}),(0,r.jsx)(n.td,{children:"0x000000FF"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Bit Set"}),(0,r.jsx)(n.td,{children:"0x00000000 ?+ 16"}),(0,r.jsx)(n.td,{children:"0x00010000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Poner el bit en 0"}),(0,r.jsx)(n.td,{children:"0x00010000 ?- 16"}),(0,r.jsx)(n.td,{children:"0x00000000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Probar bit"}),(0,r.jsx)(n.td,{children:"0x00010000 ?? 16 16"}),(0,r.jsx)(n.td,{children:"True"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},221020:(e,n,s)=>{var r=s(296540),d=Symbol.for("react.element"),i=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,t={key:!0,ref:!0,__self:!0,__source:!0};function a(e,n,s){var r,i={},a=null,c=null;for(r in void 0!==s&&(a=""+s),void 0!==n.key&&(a=""+n.key),void 0!==n.ref&&(c=n.ref),n)l.call(n,r)&&!t.hasOwnProperty(r)&&(i[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===i[r]&&(i[r]=n[r]);return{$$typeof:d,type:e,key:a,ref:c,props:i,_owner:o.current}}n.Fragment=i,n.jsx=a,n.jsxs=a},474848:(e,n,s)=>{e.exports=s(221020)},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(296540);const d={},i=r.createContext(d);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);