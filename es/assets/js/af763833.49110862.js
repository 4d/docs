/*! For license information please see af763833.49110862.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[96734],{756939:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>t});var o=n(474848),r=n(28453);const s={id:"parameters",title:"Par\xe1metros"},l=void 0,i={id:"Concepts/parameters",title:"Par\xe1metros",description:"Utilizar param\xe9tros",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-18/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/es/18/Concepts/parameters",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"parameters",title:"Par\xe1metros"},sidebar:"docs",previous:{title:"M\xe9todos",permalink:"/docs/es/18/Concepts/methods"},next:{title:"Objetos y colecciones compartidos",permalink:"/docs/es/18/Concepts/shared"}},d={},t=[{value:"Utilizar param\xe9tros",id:"utilizar-param\xe9tros",level:2},{value:"Expresiones soportadas",id:"expresiones-soportadas",level:3},{value:"Funciones",id:"funciones",level:2},{value:"Declaraci\xf3n de par\xe1metros",id:"declaraci\xf3n-de-par\xe1metros",level:2},{value:"Valores o referencias",id:"valores-o-referencias",level:2},{value:"Casos particulares: objetos y colecciones",id:"casos-particulares-objetos-y-colecciones",level:3},{value:"Par\xe1metro con nombre",id:"par\xe1metro-con-nombre",level:2},{value:"Par\xe1metros opcionales",id:"par\xe1metros-opcionales",level:2},{value:"Indirecci\xf3n de par\xe1metros",id:"indirecci\xf3n-de-par\xe1metros",level:2},{value:"Declaraci\xf3n de par\xe1metros gen\xe9ricos",id:"declaraci\xf3n-de-par\xe1metros-gen\xe9ricos",level:3}];function c(e){const a={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"utilizar-param\xe9tros",children:"Utilizar param\xe9tros"}),"\n",(0,o.jsx)(a.p,{children:"A menudo encontrar\xe1 que necesita pasar datos a sus m\xe9todos. Esto se hace f\xe1cilmente con par\xe1metros."}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Los par\xe1metros"})," (o ",(0,o.jsx)(a.strong,{children:"argumentos"}),") son piezas de datos que un m\xe9todo necesita para realizar su tarea. Los t\xe9rminos ",(0,o.jsx)(a.em,{children:"par\xe1metros"})," y ",(0,o.jsx)(a.em,{children:"argumentos"}),' se utilizan indistintamente en este manual. Los par\xe1metros tambi\xe9n se pasan a los comandos integrados de 4D. En este ejemplo, la cadena "Hello" es un argumento para el comando integrado ',(0,o.jsx)(a.code,{children:"ALERT"}),":"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'ALERT("Hello")\n'})}),"\n",(0,o.jsx)(a.p,{children:"Los par\xe1metros se pasan a los m\xe9todos de la misma manera. Por ejemplo, si un m\xe9todo proyecto llamado DO SOMETHING acepta tres par\xe1metros, una llamada al m\xe9todo podr\xeda tener la siguiente forma:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"DO SOMETHING(WithThis;AndThat;ThisWay)\n"})}),"\n",(0,o.jsx)(a.p,{children:"Los par\xe1metros est\xe1n separados por punto y coma (;). Su valor se eval\xfaa al momento de la llamada."}),"\n",(0,o.jsx)(a.p,{children:"En la subrutina (el m\xe9todo llamado), el valor de cada par\xe1metro se copia autom\xe1ticamente en variables locales numeradas secuencialmente: $1, $2, $3, etc. La numeraci\xf3n de las variables locales representa el orden de los par\xe1metros."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'  //C\xf3digo del m\xe9todo DO SOMETHING\n  //Asumiendo que todos los par\xe1metros son de tipo texto\n C_TEXT($1;$2;$3)\n ALERT("I received "+$1+" and "+$2+" and also "+$3)\n  //$1 contiene el par\xe1metro WithThis\n  //$2 contiene el par\xe1metro AndThat\n  //$3 contiene el par\xe1metro ThisWay\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Dentro de la subrutina, puede utilizar los par\xe1metros $1, $2... de la misma manera que utilizar\xeda cualquier otra variable local. Sin embargo, en el caso de que utilice comandos que modifiquen el valor de la variable pasada como par\xe1metro (por ejemplo ",(0,o.jsx)(a.code,{children:"Find in field"}),"), los par\xe1metros $1, $2, etc. no pueden utilizarse directamente. Primero debe copiarlos en las variables locales est\xe1ndar (por ejemplo: ",(0,o.jsx)(a.code,{children:"$myvar:=$1"}),")."]}),"\n",(0,o.jsx)(a.p,{children:"Los mismos principios se aplican cuando los m\xe9todos se ejecutan a trav\xe9s de comandos dedicados, por ejemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/10!)  \n//pass the !05/05/10! date as parameter to the SetCalendarDate  \n// in the context of a subform  \n//pase la fecha !05/05/10! como par\xe1metro del SetCalendarDate  \n// en el contexto de un subformulario\n'})}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Nota:"})," para una buena ejecuci\xf3n del c\xf3digo, es necesario asegurarse de que todos los par\xe1metros ",(0,o.jsx)(a.code,{children:"$1"}),", ",(0,o.jsx)(a.code,{children:"$2"}),"... est\xe9n correctamente declarados dentro de los m\xe9todos llamados (ver ",(0,o.jsx)(a.a,{href:"#declaring-parameters",children:"Declaraci\xf3n de par\xe1metros"})," m\xe1s abajo)."]}),"\n",(0,o.jsx)(a.h3,{id:"expresiones-soportadas",children:"Expresiones soportadas"}),"\n",(0,o.jsxs)(a.p,{children:["Puede utilizar toda ",(0,o.jsx)(a.a,{href:"/docs/es/18/Concepts/quick-tour#expression-types",children:"expresi\xf3n"})," como par\xe1metro, excepto:"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"tablas"}),"\n",(0,o.jsx)(a.li,{children:"arrays"}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:["Las expresiones de tablas o arrays s\xf3lo pueden pasarse ",(0,o.jsx)(a.a,{href:"/docs/es/18/Concepts/pointer#pointers-as-parameters-to-methods",children:"como referencia utilizando un puntero"}),"."]}),"\n",(0,o.jsx)(a.h2,{id:"funciones",children:"Funciones"}),"\n",(0,o.jsx)(a.p,{children:"Los datos pueden ser devueltos por los m\xe9todos. Un m\xe9todo que devuelve un valor se llama funci\xf3n."}),"\n",(0,o.jsx)(a.p,{children:"Los comandos de 4D o 4D Plug-in que devuelven un valor tambi\xe9n se llaman funciones."}),"\n",(0,o.jsxs)(a.p,{children:["Por ejemplo, la siguiente l\xednea es una sentencia que utiliza la funci\xf3n integrada, ",(0,o.jsx)(a.code,{children:"Length"}),", para devolver la longitud de una cadena. La instrucci\xf3n pone el valor devuelto por ",(0,o.jsx)(a.code,{children:"Length"})," en una variable llamada ",(0,o.jsx)(a.em,{children:"MyLength"}),". Esta es la instrucci\xf3n:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'MyLength:=Length("How did I get here?")\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Toda subrutina puede devolver un valor. El valor a devolver se pone en la variable local ",(0,o.jsx)(a.code,{children:"$0"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:["Por ejemplo, la siguiente funci\xf3n, llamada ",(0,o.jsx)(a.code,{children:"Uppercase4"}),", devuelve una cadena con los cuatro primeros caracteres de la cadena que se han pasado en may\xfasculas:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"$0:=Uppercase(Substring($1;1;4))+Substring($1;5)\n"})}),"\n",(0,o.jsx)(a.p,{children:"El siguiente es un ejemplo que utiliza la funci\xf3n Uppercase4:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'NewPhrase:=Uppercase4("This is good.")\n'})}),"\n",(0,o.jsxs)(a.p,{children:["En este ejemplo, la variable ",(0,o.jsx)(a.em,{children:"NewPhrase"})," recibe \u201cTHIS is good.\u201d"]}),"\n",(0,o.jsxs)(a.p,{children:["El resultado de la funci\xf3n, ",(0,o.jsx)(a.code,{children:"$0"}),", es una variable local dentro de la subrutina. Puede utilizarse como tal dentro de la subrutina. It can be used as such within the subroutine. Dentro de la subrutina, puede utilizar ",(0,o.jsx)(a.code,{children:"$0"})," de la misma manera que utilizar\xeda cualquier otra variable local. Es 4D quien devuelve el valor de ",(0,o.jsx)(a.code,{children:"$0"})," (tal y como est\xe1 cuando la subrutina termina) al m\xe9todo llamado."]}),"\n",(0,o.jsx)(a.h2,{id:"declaraci\xf3n-de-par\xe1metros",children:"Declaraci\xf3n de par\xe1metros"}),"\n",(0,o.jsxs)(a.p,{children:["Aunque no sea obligatorio en ",(0,o.jsx)(a.a,{href:"/docs/es/18/Concepts/interpreted-compiled",children:"modo interpretado"}),", debe declarar cada par\xe1metro en los m\xe9todos llamados para evitar problemas."]}),"\n",(0,o.jsxs)(a.p,{children:["En el siguiente ejemplo, el m\xe9todo proyecto ",(0,o.jsx)(a.code,{children:"OneMethodAmongOthers"})," declara tres par\xe1metros:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"  // M\xe9todo proyecto OneMethodAmongOthers\n  // OneMethodAmongOthers ( Real ; Date { ; Long } )\n  // OneMethodAmongOthers ( Amount ; Date { ; Ratio } )\n\n C_REAL($1) // El primer par\xe1metro es de tipo Real\n C_DATE($2) // El segundo par\xe1metro es de tipo Fecha\n C_LONGINT($3) // El tercer par\xe1metro es de tipo Entero largo\n"})}),"\n",(0,o.jsxs)(a.p,{children:["En el siguiente ejemplo, el m\xe9todo ",(0,o.jsx)(a.code,{children:"Capitalize"})," proyecto acepta un par\xe1metro texto y devuelve un resultado texto:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"  // M\xe9todo proyecto Mayusculas\n  // Mayusculas( Texto ) -> Texto\n  // Mayusculas( Cadena fuente ) -> Cadena con la primera letra en may\xfascula\n\n C_TEXT($0;$1)\n $0:=Uppercase(Substring($1;1;1))+Lowercase(Substring($1;2))\n"})}),"\n",(0,o.jsxs)(a.p,{children:["La utilizaci\xf3n de comandos tales como ",(0,o.jsx)(a.code,{children:"New process"})," con m\xe9todos proceso que aceptan par\xe1metros tambi\xe9n requiere que los par\xe1metros se declaren expl\xedcitamente en el m\xe9todo llamado. Por ejemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'C_TEXT($string)\nC_LONGINT($idProc;$int)\nC_OBJECT($obj)\n\n$idProc:=New process("foo_method";0;"foo_process";$string;$int;$obj)\n'})}),"\n",(0,o.jsx)(a.p,{children:'Este c\xf3digo puede ser ejecutado en modo compilado s\xf3lo si "foo_method" declara sus par\xe1metros:'}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"//foo_method\nC_TEXT($1)\nC_LONGINT($2)\nC_OBJECT($3)\n...\n"})}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Nota:"}),' en modo compilado, puede agrupar todos los par\xe1metros de las variables locales de los m\xe9todos proyecto en un m\xe9todo espec\xedfico con un nombre que empiece por "Compiler". Dentro de este m\xe9todo, se pueden predeclarar los par\xe1metros de cada m\xe9todo, por ejemplo:']}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:" C_REAL(OneMethodAmongOthers;$1)\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Ver la p\xe1gina ",(0,o.jsx)(a.a,{href:"/docs/es/18/Concepts/interpreted-compiled",children:"Modos interpretado y compilado"})," para m\xe1s informaci\xf3n."]}),"\n",(0,o.jsx)(a.p,{children:'La declaraci\xf3n de par\xe1metros tambi\xe9n es obligatoria en los siguientes contextos (estos contextos no soportan la declaraci\xf3n en un m\xe9todo "Compiler"):'}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Database methods For example, the ",(0,o.jsx)(a.code,{children:"On Web Connection Database Method"})," receives six parameters, $1 to $6, of the data type Text. Al principio del m\xe9todo base, debe escribir (incluso si no se utilizan todos los par\xe1metros):"]}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"// On Web Connection\nC_TEXT($1;$2;$3;$4;$5;$6)\n"})}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsx)(a.p,{children:"Triggers The $0 parameter (Longint), which is the result of a trigger, will be typed by the compiler if the parameter has not been explicitly declared. Sin embargo, si quiere declararlo, debe hacerlo en el propio trigger."}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:["Form objects that accept the ",(0,o.jsx)(a.code,{children:"On Drag Over"})," form event The $0 parameter (Longint), which is the result of the ",(0,o.jsx)(a.code,{children:"On Drag Over"})," form event, is typed by the compiler if the parameter has not been explicitly declared. Sin embargo, si quiere declararlo, debe hacerlo en el propio m\xe9todo proyecto. ",(0,o.jsx)(a.strong,{children:"Nota:"})," el compilador no inicializa el par\xe1metro $0. Por lo tanto, tan pronto como utilice el evento formulario ",(0,o.jsx)(a.code,{children:"On Drag Over"}),", debe inicializar $0. Por ejemplo:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:" C_LONGINT($0)\n If(Form event=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n"})}),"\n",(0,o.jsx)(a.h2,{id:"valores-o-referencias",children:"Valores o referencias"}),"\n",(0,o.jsxs)(a.p,{children:["Cuando pasa un par\xe1metro, 4D siempre eval\xfaa la expresi\xf3n del par\xe1metro en el contexto del m\xe9todo que llama y define el ",(0,o.jsx)(a.strong,{children:"valor resultante"})," en las variables locales $1, $2... de la subrutina (ver ",(0,o.jsx)(a.a,{href:"#using-parameters",children:"Utilizaci\xf3n de los par\xe1metros"}),"). Las variables/par\xe1metros locales no son los campos, variables o expresiones reales pasados por el m\xe9todo que llama; s\xf3lo contienen los valores que se han pasado. Como su alcance es local, si el valor de un par\xe1metro se modifica en la subrutina, no cambia el valor en el m\xe9todo que llama. Por ejemplo:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'    //Esta es una parte del c\xf3digo del m\xe9todo MY_METHOD\nDO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\nALERT([People]Name)\n\n    //Este es el c\xf3digo del m\xe9todo DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n'})}),"\n",(0,o.jsxs)(a.p,{children:["La caja de alerta mostrada por ",(0,o.jsx)(a.code,{children:"DO_SOMETHING"}),' dir\xe1 "WILLIAMS" y la caja de alerta mostrada por ',(0,o.jsx)(a.code,{children:"MY_METHOD"}),' dir\xe1 "williams". El m\xe9todo cambi\xf3 localmente el valor del par\xe1metro $1, pero esto no afecta al valor del campo ',(0,o.jsx)(a.code,{children:"[People]Name"})," pasado como par\xe1metro por el m\xe9todo ",(0,o.jsx)(a.code,{children:"MY_METHOD"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:["Hay dos formas de hacer que el m\xe9todo ",(0,o.jsx)(a.code,{children:"DO_SOMETHING"})," cambie el valor del campo:"]}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsx)(a.li,{children:"En lugar de pasar el campo al m\xe9todo, se pasa un puntero al mismo, por lo que se escribir\xeda:"}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'  //Esta es una parte del c\xf3digo del m\xe9todo MY_METHOD\n DO_SOMETHING(->[People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Last Name)\n\n  //Este es el c\xf3digo del m\xe9todo DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Aqu\xed el par\xe1metro no es el campo, sino un puntero al mismo. Por lo tanto, dentro del m\xe9todo ",(0,o.jsx)(a.code,{children:"DO SOMETHING"}),", $1 ya no es el valor del campo sino un puntero al campo. El objeto ",(0,o.jsx)(a.strong,{children:"referenciado"}),' por $1 ($1-> en el c\xf3digo anterior) es el campo real. Por lo tanto, cambiar el objeto referenciado va m\xe1s all\xe1 del alcance de la subrutina, y el campo real se ve afectado. En este ejemplo, las dos cajas de alerta dir\xe1n "WILLIAMS".']}),"\n",(0,o.jsxs)(a.ol,{start:"2",children:["\n",(0,o.jsxs)(a.li,{children:["En lugar de que el m\xe9todo ",(0,o.jsx)(a.code,{children:"DO_SOMETHING"}),' "haga algo", puede reescribir el m\xe9todo para que devuelva un valor. Por lo tanto, escribir\xeda:']}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'    //Esta es una parte del c\xf3digo del m\xe9todo MY_METHO\n [People]Name:=DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Name)\n\n    //Este es el c\xf3digo del m\xe9todo DO_SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n'})}),"\n",(0,o.jsxs)(a.p,{children:['Esta segunda t\xe9cnica de retornar un valor por una subrutina se llama " utilizar una funci\xf3n" Se describe en el p\xe1rrafo ',(0,o.jsx)(a.a,{href:"#functions",children:"Funciones"}),". Se describe en el p\xe1rrafo ",(0,o.jsx)(a.a,{href:"#functions",children:"Funciones"}),"."]}),"\n",(0,o.jsx)(a.h3,{id:"casos-particulares-objetos-y-colecciones",children:"Casos particulares: objetos y colecciones"}),"\n",(0,o.jsxs)(a.p,{children:["Debe prestar atenci\xf3n al hecho de que los tipos de datos Objeto y Colecci\xf3n s\xf3lo pueden manejarse a trav\xe9s de una referencia (es decir, un ",(0,o.jsx)(a.em,{children:"puntero"})," interno)."]}),"\n",(0,o.jsxs)(a.p,{children:["Por consiguiente, cuando se utilizan estos tipos de datos como par\xe1metros, ",(0,o.jsx)(a.code,{children:"$1, $2..."})," no contienen ",(0,o.jsx)(a.em,{children:"valores"})," sino ",(0,o.jsx)(a.em,{children:"referencias"}),". La modificaci\xf3n del valor de los par\xe1metros ",(0,o.jsx)(a.code,{children:"$1, $2..."})," dentro de la subrutina se propagar\xe1 a cualquier lugar donde se utilice el objeto o colecci\xf3n fuente. Este es el mismo principio que para ",(0,o.jsx)(a.a,{href:"/docs/es/18/Concepts/pointer#pointers-as-parameters-to-methods",children:"los punteros"}),", excepto que los par\xe1metros ",(0,o.jsx)(a.code,{children:"$1, $2..."})," no necesitan ser desreferenciados en la subrutina."]}),"\n",(0,o.jsxs)(a.p,{children:["Por ejemplo, considere el m\xe9todo ",(0,o.jsx)(a.code,{children:"CreatePerson"})," que crea un objeto y lo env\xeda como par\xe1metro:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'  //CreatePerson\n C_OBJECT($person)\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n'})}),"\n",(0,o.jsxs)(a.p,{children:["El m\xe9todo ",(0,o.jsx)(a.code,{children:"ChangeAge"})," a\xf1ade 10 al atributo Age del objeto recibido"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"  //ChangeAge\n C_OBJECT($1)\n $1.Age:=$1.Age+10\n ALERT(String($1.Age))\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Cuando se ejecuta el m\xe9todo ",(0,o.jsx)(a.code,{children:"CreatePerson"}),', las dos cajas de alerta dir\xe1n "50" ya que la misma referencia de objeto es manejada por ambos m\xe9todos.']}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"4D Server:"}),' cuando se pasan par\xe1metros entre m\xe9todos que no se ejecutan en la misma m\xe1quina (utilizando por ejemplo la opci\xf3n "Ejecutar en el servidor"), las referencias no son utilizables. En estos casos, se env\xedan copias de los par\xe1metros de objetos y colecciones en lugar de referencias.']}),"\n",(0,o.jsx)(a.h2,{id:"par\xe1metro-con-nombre",children:"Par\xe1metro con nombre"}),"\n",(0,o.jsxs)(a.p,{children:["La utilizaci\xf3n de objetos como par\xe1metros permite manejar ",(0,o.jsx)(a.strong,{children:"par\xe1metros con nombre"}),". Este estilo de programaci\xf3n es simple, flexible y f\xe1cil de leer."]}),"\n",(0,o.jsxs)(a.p,{children:["Por ejemplo, utilizando el m\xe9todo ",(0,o.jsx)(a.code,{children:"CreatePerson"}),":"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'  //CreatePerson\n C_OBJECT($person)\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n'})}),"\n",(0,o.jsxs)(a.p,{children:["En el m\xe9todo ",(0,o.jsx)(a.code,{children:"ChangeAge"})," puede escribir:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'  //ChangeAge\n C_OBJECT($1;$para)\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Name+" is "+String($para.Age)+" years old.")\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Esto ofrece una poderosa manera de definir ",(0,o.jsx)(a.a,{href:"#optional-parameters",children:"par\xe1metros opcionales"})," (ver tambi\xe9n abajo). Para manejar los par\xe1metros que faltan, puede:"]}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["verificar si se suministran todos los par\xe1metros esperados compar\xe1ndolos con el valor ",(0,o.jsx)(a.code,{children:"Null"}),", o"]}),"\n",(0,o.jsx)(a.li,{children:"predefinir los valores de los par\xe1metros, o"}),"\n",(0,o.jsx)(a.li,{children:"utilizarlos como valores vac\xedos."}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:["En el m\xe9todo ",(0,o.jsx)(a.code,{children:"ChangeAge"})," anterior, las propiedades Age y Name son obligatorias y producir\xedan errores si faltaran. Para evitar este caso, puede escribir simplemente:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'  //ChangeAge\n C_OBJECT($1;$para)\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n'})}),"\n",(0,o.jsx)(a.p,{children:'Entonces ambos par\xe1metros son opcionales; si no se llenan, el resultado ser\xe1 " is 10 years old", pero no se generar\xe1 ning\xfan error.'}),"\n",(0,o.jsx)(a.p,{children:"Por \xfaltimo, con los par\xe1metros con nombre, el mantenimiento o la reproducci\xf3n de las aplicaciones es muy sencillo y seguro. Imagine que m\xe1s adelante se da cuenta de que a\xf1adir 10 a\xf1os no siempre es apropiado. Necesita otro par\xe1metro para definir cu\xe1ntos a\xf1os hay que a\xf1adir. Escriba:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'$person:=New object("Name";"Smith";"Age";40;"toAdd";10)\nChangeAge($person)\n\n//ChangeAge\nC_OBJECT($1;$para)\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n'})}),"\n",(0,o.jsx)(a.p,{children:"El poder aqu\xed es que no tendr\xe1 que cambiar su c\xf3digo existente. Siempre funcionar\xe1 como en la versi\xf3n anterior, pero si es necesario, puede utilizar otro valor que no sea 10 a\xf1os."}),"\n",(0,o.jsx)(a.p,{children:"Con las variables con nombre, cualquier par\xe1metro puede ser opcional. En el ejemplo anterior, todos los par\xe1metros son opcionales y se puede dar cualquiera, en cualquier orden."}),"\n",(0,o.jsx)(a.h2,{id:"par\xe1metros-opcionales",children:"Par\xe1metros opcionales"}),"\n",(0,o.jsxs)(a.p,{children:["En el manual ",(0,o.jsx)(a.em,{children:"Lenguaje de 4D"}),", los caracteres { } (llaves) indican par\xe1metros opcionales. Por ejemplo, ",(0,o.jsx)(a.code,{children:"ALERT (message{; okButtonTitle})"})," significa que el par\xe1metro ",(0,o.jsx)(a.em,{children:"okButtonTitle"})," puede omitirse al llamar al comando. Se puede llamar de las siguientes maneras:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'ALERT("Are you sure?";"Yes I am") //2 par\xe1metros\nALERT("Time is over") //1 par\xe1metro\n'})}),"\n",(0,o.jsx)(a.p,{children:"Los m\xe9todos proyecto 4D tambi\xe9n aceptan estos par\xe1metros opcionales, empezando por la derecha. El problema con los par\xe1metros opcionales es c\xf3mo manejar el caso en que algunos de ellos falten en el m\xe9todo llamado, nunca deber\xeda producir un error. Una buena pr\xe1ctica es asignar valores por defecto a los par\xe1metros no utilizados."}),"\n",(0,o.jsxs)(a.blockquote,{children:["\n",(0,o.jsxs)(a.p,{children:["Cuando los par\xe1metros opcionales son necesarios en sus m\xe9todos, tambi\xe9n puede considerar el uso de ",(0,o.jsx)(a.a,{href:"#named-parameters",children:"par\xe1metros con nombre"})," que ofrecen una forma flexible de manejar un n\xfamero variable de par\xe1metros."]}),"\n"]}),"\n",(0,o.jsxs)(a.p,{children:["Utilizando el comando ",(0,o.jsx)(a.code,{children:"Count parameters"})," desde dentro del m\xe9todo llamado, puede detectar el n\xfamero real de par\xe1metros y realizar diferentes operaciones dependiendo de lo que haya recibido."]}),"\n",(0,o.jsx)(a.p,{children:"El siguiente ejemplo muestra un mensaje de texto y puede insertar el texto en un documento en el disco o en un \xe1rea de 4D Write Pro:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"// M\xe9todo proyecto APPEND TEXT\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n\n C_TEXT($1;$2)\n C_OBJECT($3)\n\n ALERT($1)\n If(Count parameters>=3)\n    WP SET TEXT($3;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($2;$1)\n    End if\n End if\n"})}),"\n",(0,o.jsx)(a.p,{children:"Despu\xe9s de a\xf1adir este m\xe9todo proyecto a su aplicaci\xf3n, puede escribir:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:'APPEND TEXT(vtSomeText) //S\xf3lo mostrar\xe1 el mensaje\nAPPEND TEXT(vtSomeText;$path) //Muestra el mensaje y el anexo al documento en $path\nAPPEND TEXT(vtSomeText;"";$wpArea) //Muestra el mensaje y lo escribe en $wpArea\n'})}),"\n",(0,o.jsx)(a.h2,{id:"indirecci\xf3n-de-par\xe1metros",children:"Indirecci\xf3n de par\xe1metros"}),"\n",(0,o.jsxs)(a.p,{children:["Los m\xe9todos proyecto 4D aceptan un n\xfamero variable de par\xe1metros del mismo tipo, empezando por la derecha. Este principio se llama ",(0,o.jsx)(a.strong,{children:"la indirecci\xf3n de par\xe1metros"}),". Al utilizar el comando ",(0,o.jsx)(a.code,{children:"Count parameters"})," puede dirigirse a esos par\xe1metros con un bucle ",(0,o.jsx)(a.code,{children:"For...End for"})," y la sintaxis de indirecci\xf3n de par\xe1metros."]}),"\n",(0,o.jsxs)(a.p,{children:["En el siguiente ejemplo, el m\xe9todo proyecto ",(0,o.jsx)(a.code,{children:"SEND PACKETS"})," acepta un par\xe1metro de tiempo seguido de un n\xfamero variable de par\xe1metros de texto:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:"  //M\xe9todo proyecto SEND PACKETS\n  //SEND PACKETS ( Time ; Text { ; Text2... ; TextN } )\n  //SEND PACKETS ( docRef ; Data { ; Data2... ; DataN } )\n\n C_TIME($1)\n C_TEXT(${2})\n C_LONGINT($vlPacket)\n\n For($vlPacket;2;Count parameters)\n    SEND PACKET($1;${$vlPacket})\n End for\n"})}),"\n",(0,o.jsxs)(a.p,{children:["La indirecci\xf3n de par\xe1metros se gestiona mejor si se respeta la siguiente convenci\xf3n: si s\xf3lo algunos de los par\xe1metros se dirigen por indirecci\xf3n, deben pasarse despu\xe9s de los dem\xe1s. Dentro del m\xe9todo, una direcci\xf3n de indirecci\xf3n tiene el formato: ${$i}, donde $i es una variable num\xe9rica. ${$i} se denomina un ",(0,o.jsx)(a.strong,{children:"par\xe1metro gen\xe9rico"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"Por ejemplo, considere una funci\xf3n que suma valores y devuelve la suma formateada seg\xfan un formato que se pasa como par\xe1metro. Cada vez que se llama a este m\xe9todo, el n\xfamero de valores a sumar puede variar. Debemos pasar los valores como par\xe1metros al m\xe9todo y el formato en forma de cadena de caracteres. El n\xfamero de valores puede variar de una llamada a otra."}),"\n",(0,o.jsx)(a.p,{children:"Esta funci\xf3n se llama de la siguiente manera:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:' Result:=MySum("##0.00";125,2;33,5;24)\n\n'})}),"\n",(0,o.jsx)(a.p,{children:'En este caso, el m\xe9todo que llama obtendr\xe1 la cadena "182,70", que es la suma de los n\xfameros, con el formato especificado. Los par\xe1metros de la funci\xf3n deben pasarse en el orden correcto: primero el formato y luego los valores.'}),"\n",(0,o.jsxs)(a.p,{children:["Aqu\xed est\xe1 la funci\xf3n, llamada ",(0,o.jsx)(a.code,{children:"MySum"}),":"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:" $Sum:=0\n For($i;2;Count parameters)\n    $Sum:=$Sum+${$i}\n End for\n $0:=String($Sum;$1)\n"})}),"\n",(0,o.jsx)(a.p,{children:"Esta funci\xf3n puede llamarse ahora de varias formas:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:' Result:=MySum("##0.00";125,2;33,5;24)\n Result:=MySum("000";1;18;4;23;17)\n'})}),"\n",(0,o.jsx)(a.h3,{id:"declaraci\xf3n-de-par\xe1metros-gen\xe9ricos",children:"Declaraci\xf3n de par\xe1metros gen\xe9ricos"}),"\n",(0,o.jsx)(a.p,{children:"Al igual que con otras variables locales, no es obligatorio declarar los par\xe1metros gen\xe9ricos mediante una directiva del compilador. Sin embargo, se recomienda para evitar toda ambig\xfcedad. Para declarar estos par\xe1metros, se utiliza una directiva del compilador a la que se pasa ${N} como par\xe1metro, donde N especifica el primer par\xe1metro gen\xe9rico."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-4d",children:" C_LONGINT(${4})\n"})}),"\n",(0,o.jsx)(a.p,{children:"Este comando significa que a partir del cuarto par\xe1metro (incluido), el m\xe9todo puede recibir un n\xfamero variable de par\xe1metros de tipo entero largo. $1, $2 y $3 pueden ser de cualquier tipo de datos. Sin embargo, si se utiliza $2 por indirecci\xf3n, el tipo de datos utilizado ser\xe1 el tipo gen\xe9rico. $1, $2 and $3 can be of any data type."}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Nota:"})," el n\xfamero en la declaraci\xf3n tiene que ser una constante y no una variable."]})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},221020:(e,a,n)=>{var o=n(296540),r=Symbol.for("react.element"),s=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,i=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function t(e,a,n){var o,s={},t=null,c=null;for(o in void 0!==n&&(t=""+n),void 0!==a.key&&(t=""+a.key),void 0!==a.ref&&(c=a.ref),a)l.call(a,o)&&!d.hasOwnProperty(o)&&(s[o]=a[o]);if(e&&e.defaultProps)for(o in a=e.defaultProps)void 0===s[o]&&(s[o]=a[o]);return{$$typeof:r,type:e,key:t,ref:c,props:s,_owner:i.current}}a.Fragment=s,a.jsx=t,a.jsxs=t},474848:(e,a,n)=>{e.exports=n(221020)},28453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>i});var o=n(296540);const r={},s=o.createContext(r);function l(e){const a=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(s.Provider,{value:a},e.children)}}}]);