"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["37867"],{828579:function(e,t,s){s.r(t),s.d(t,{metadata:()=>n,contentTitle:()=>u,default:()=>a,assets:()=>l,toc:()=>c,frontMatter:()=>i});var n=JSON.parse('{"id":"Concepts/control-flow","title":"Conditions et boucles","description":"Quelle que soit la simplicit\xe9 ou la complexit\xe9 d\u2019une m\xe9thode, vous utiliserez toujours un ou plusieurs types de structure de programmation. Les structures de programmation d\xe9terminent si et dans quel ordre les lignes d\u2019instructions sont ex\xe9cut\xe9es \xe0 l\u2019int\xe9rieur d\u2019une m\xe9thode. Il existe trois types de structures :","source":"@site/i18n/fr/docusaurus-plugin-content-docs/version-19/Concepts/flow-control.md","sourceDirName":"Concepts","slug":"/Concepts/control-flow","permalink":"/docs/fr/19/Concepts/control-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(19)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"19","frontMatter":{"id":"control-flow","title":"Conditions et boucles"},"sidebar":"docs","previous":{"title":"Classes","permalink":"/docs/fr/19/Concepts/classes"},"next":{"title":"Structures conditionnelles","permalink":"/docs/fr/19/Concepts/branching"}}'),r=s("785893"),o=s("250065");let i={id:"control-flow",title:"Conditions et boucles"},u=void 0,l={},c=[];function d(e){let t={a:"a",br:"br",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Quelle que soit la simplicit\xe9 ou la complexit\xe9 d\u2019une m\xe9thode, vous utiliserez toujours un ou plusieurs types de structure de programmation. Les structures de programmation d\xe9terminent si et dans quel ordre les lignes d\u2019instructions sont ex\xe9cut\xe9es \xe0 l\u2019int\xe9rieur d\u2019une m\xe9thode. Il existe trois types de structures :"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"S\xe9quentielle"}),": une structure s\xe9quentielle est une structure simple et lin\xe9aire. Une s\xe9quence est une s\xe9rie d'instructions que 4D ex\xe9cute l'une apr\xe8s l'autre, de la premi\xe8re \xe0 la derni\xe8re. Une routine d'une ligne, fr\xe9quemment utilis\xe9e pour les m\xe9thodes objets, est le cas le plus simple d'une structure s\xe9quentielle. Par exemple : ",(0,r.jsx)(t.code,{children:"[People]lastName:=Uppercase([People]lastName)"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/docs/fr/19/Concepts/branching",children:"Conditionnelle"})})," : une structure conditionnelle permet aux m\xe9thodes de tester une condition et d\u2019ex\xe9cuter des s\xe9quences d\u2019instructions diff\xe9rentes en fonction du r\xe9sultat. La condition est une expression bool\xe9enne, c'est-\xe0-dire une expression qui est \xe9valu\xe9e \xe0 vrai ou faux. L\u2019une des structures conditionnelles est la structure ",(0,r.jsx)(t.code,{children:"If...Else...End if"}),", qui aiguille le d\xe9roulement du programme vers une s\xe9quence ou une autre. L\u2019autre structure conditionnelle est la structure ",(0,r.jsx)(t.code,{children:"Case of...Else...End case"}),", qui aiguille le programme vers une s\xe9quence parmi une ou plusieurs alternatives."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/docs/fr/19/Concepts/looping",children:"R\xe9p\xe9titive"})})," : il est tr\xe8s courant, lorsque vous \xe9crivez des m\xe9thodes, de rencontrer des cas o\xf9 vous devez r\xe9p\xe9ter une s\xe9quence d\u2019instructions un certain nombre de fois. Pour traiter ces besoins, le langage 4D vous propose plusieurs structures r\xe9p\xe9titives :\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"While...End while"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"Repeat...Until"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"For...End for"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"For each...End for each"}),(0,r.jsx)(t.br,{})," The loops are controlled in two ways: either they loop until a condition is met, or they loop a specified number of times. Chaque structure r\xe9p\xe9titive peut \xeatre utilis\xe9e de l\u2019une ou l\u2019autre mani\xe8re, mais les boucles ",(0,r.jsx)(t.code,{children:"While"})," et ",(0,r.jsx)(t.code,{children:"Repeat"})," sont mieux adapt\xe9es \xe0 la r\xe9p\xe9tition jusqu\u2019\xe0 ce qu\u2019une condition soit remplie, alors que les boucles ",(0,r.jsx)(t.code,{children:"For"})," sont mieux adapt\xe9es \xe0 la r\xe9p\xe9tition un certain nombre de fois. ",(0,r.jsx)(t.code,{children:"For each...End for each"}),", destin\xe9e \xe0 effectuer des boucles dans les objets et les collections, permet de combiner les deux mani\xe8res."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note :"})," 4D vous permet d\u2019imbriquer des structures de programmation jusqu\u2019\xe0 une \u201Cprofondeur\u201D de 512 niveaux."]})]})}function a(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,t,s){s.d(t,{Z:function(){return u},a:function(){return i}});var n=s(667294);let r={},o=n.createContext(r);function i(e){let t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);