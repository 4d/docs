"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39883],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,b=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(b,l(l({ref:t},c),{},{components:n})):a.createElement(b,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},756220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});n(667294);var a=n(603905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={id:"object",title:"Object"},s=void 0,i={unversionedId:"Concepts/object",id:"version-20-R4/Concepts/object",title:"Object",description:'Les variables, champs ou expressions de type objet peuvent contenir des donn\xe9es de divers types. La structure des objets 4D natifs est bas\xe9e sur le principe classique des paires "propri\xe9t\xe9/valeur". La syntaxe de ces objets s\u2019inspire du JSON :',source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-20-R4/Concepts/dt_object.md",sourceDirName:"Concepts",slug:"/Concepts/object",permalink:"/docs/fr/Concepts/object",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fdt_object.md%20(20-R4)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R4",frontMatter:{id:"object",title:"Object"},sidebar:"docs",previous:{title:"Num\xe9rique (R\xe9el, Entier, Entier long)",permalink:"/docs/fr/Concepts/number"},next:{title:"Picture",permalink:"/docs/fr/Concepts/picture"}},p={},c=[{value:"Instanciation",id:"instanciation",level:2},{value:"<code>New object</code> command",id:"new-object-command",level:3},{value:"<code>{}</code> operator",id:"-operator",level:3},{value:"Objet standard ou partag\xe9",id:"objet-standard-ou-partag\xe9",level:3},{value:"Propri\xe9t\xe9s",id:"propri\xe9t\xe9s",level:2},{value:"Valeur Null",id:"valeur-null",level:3},{value:"Valeur Ind\xe9finie",id:"valeur-ind\xe9finie",level:3},{value:"Pointeurs",id:"pointeurs",level:3},{value:"Resources",id:"resources",level:2},{value:"Exemples",id:"exemples",level:2}],u={toc:c};function d(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",r({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'Les variables, champs ou expressions de type objet peuvent contenir des donn\xe9es de divers types. La structure des objets 4D natifs est bas\xe9e sur le principe classique des paires "propri\xe9t\xe9/valeur". La syntaxe de ces objets s\u2019inspire du JSON :'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Un nom de propri\xe9t\xe9 est toujours un texte, par exemple "Nom". It must follow ',(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/identifiers#object-properties"}),"specific rules"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Une valeur de propri\xe9t\xe9 peut \xeatre du type suivant :"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Num\xe9rique (r\xe9el, entier long, etc.)"),(0,a.kt)("li",{parentName:"ul"},"text"),(0,a.kt)("li",{parentName:"ul"},"Null"),(0,a.kt)("li",{parentName:"ul"},"boolean"),(0,a.kt)("li",{parentName:"ul"},"pointer (stored as such, evaluated using the ",(0,a.kt)("inlineCode",{parentName:"li"},"JSON Stringify")," command or when copying),"),(0,a.kt)("li",{parentName:"ul"},"Date (type date ou cha\xeene au format date ISO)"),(0,a.kt)("li",{parentName:"ul"},"Objet(1) (les objets peuvent \xeatre imbriqu\xe9s sur plusieurs niveaux)"),(0,a.kt)("li",{parentName:"ul"},"Image(2)"),(0,a.kt)("li",{parentName:"ul"},"collection")))),(0,a.kt)("p",null,"(1) ",(0,a.kt)("strong",{parentName:"p"},"Non-streamable objects")," such as ORDA objects (",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/ORDA/dsmapping#entity"}),"entities"),", ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/ORDA/dsmapping#entity-selection"}),"entity selections"),", etc.), ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/API/FileHandleClass"}),"file handles"),", ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/API/WebServerClass"}),"web server"),"... cannot be stored in ",(0,a.kt)("strong",{parentName:"p"},"object fields"),". An error is returned if you try to do it; however, they are fully supported in ",(0,a.kt)("strong",{parentName:"p"},"object variables")," in memory."),(0,a.kt)("p",null,'(2) When exposed as text in the debugger or exported to JSON, picture object properties print "',"[object Picture]",'".'),(0,a.kt)("admonition",r({},{type:"caution"}),(0,a.kt)("p",{parentName:"admonition"},"N'oubliez pas que les noms de propri\xe9t\xe9s font la diff\xe9rence entre les majuscules et les minuscules.")),(0,a.kt)("p",null,"You manage Object type variables, fields or expressions using the standard ",(0,a.kt)("a",r({parentName:"p"},{href:"#properties"}),"object notation")," or the commands available in the ",(0,a.kt)("strong",{parentName:"p"},"Objects (Language)")," theme. Note that specific commands of the ",(0,a.kt)("strong",{parentName:"p"},"Queries")," theme such as ",(0,a.kt)("inlineCode",{parentName:"p"},"QUERY BY ATTRIBUTE"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"QUERY SELECTION BY ATTRIBUTE"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"ORDER BY ATTRIBUTE")," can be used to carry out processing on object fields."),(0,a.kt)("p",null,"Chaque valeur de propri\xe9t\xe9 accessible par la notation objet est consid\xe9r\xe9e comme une expression. Vous pouvez utiliser ces valeurs partout o\xf9 des expressions 4D sont attendues :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in 4D code, either written in the methods (Code Editor) or externalized (formulas, 4D tags files processed by ",(0,a.kt)("inlineCode",{parentName:"li"},"PROCESS 4D TAGS")," or the Web Server, export files, 4D Write Pro documents...),"),(0,a.kt)("li",{parentName:"ul"},"Dans les zones d'expressions du d\xe9bogueur et l'explorateur d'ex\xe9cution,"),(0,a.kt)("li",{parentName:"ul"},"Dans la liste de propri\xe9t\xe9s de l'\xe9diteur de formulaires pour les objets formulaires : champ Variable ou Expression et plusieurs expressions de list box et colonnes (source de donn\xe9es, couleur de fond, style ou couleur de police).")),(0,a.kt)("h2",r({},{id:"instanciation"}),"Instanciation"),(0,a.kt)("p",null,"Les objets doivent avoir \xe9t\xe9 instanci\xe9s, sinon toute tentative de lecture ou de modification de leurs propri\xe9t\xe9s g\xe9n\xe8re une erreur de syntaxe."),(0,a.kt)("p",null,"L'instanciation d'un objet peut se faire de l'une des mani\xe8res suivantes :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"using the ",(0,a.kt)("a",r({parentName:"li"},{href:"https://doc.4d.com/4dv19R/help/command/en/page1471.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"New object"))," command,"),(0,a.kt)("li",{parentName:"ul"},"using the ",(0,a.kt)("inlineCode",{parentName:"li"},"{}")," operator.")),(0,a.kt)("admonition",r({},{type:"info"}),(0,a.kt)("p",{parentName:"admonition"},"Several 4D commands and functions return objects, for example ",(0,a.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4Dv19R7/4D/19-R7/Get-database-measures.301-5945423.en.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"Get database measures"))," or ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/API/FileClass#file"}),(0,a.kt)("inlineCode",{parentName:"a"},"File")),". Dans ce cas, il n'est pas n\xe9cessaire d'instancier explicitement l'objet, le langage 4D le fait pour vous.")),(0,a.kt)("h3",r({},{id:"new-object-command"}),(0,a.kt)("inlineCode",{parentName:"h3"},"New object")," command"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4dv19R/help/command/en/page1471.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"New object"))," command creates a new empty or prefilled object and returns its reference."),(0,a.kt)("p",null,"Exemples :"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' var $obVar : Object //declaration of an object type 4D variable\n $obVar:=New object //instantiation of an object and assignment to the 4D variable\n \n var $obFilled : Object \n $obFilled:=New object("name";"Smith";"age";42) //instantiation and assignment of a prefilled object\n')),(0,a.kt)("h3",r({},{id:"-operator"}),(0,a.kt)("inlineCode",{parentName:"h3"},"{}")," operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," operator allows you to create an ",(0,a.kt)("strong",{parentName:"p"},"object literal"),". An object literal is a semi-column separated list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (",(0,a.kt)("inlineCode",{parentName:"p"},"{}"),"). La syntaxe d'objet litt\xe9rale permet de cr\xe9er des objets vides ou remplis."),(0,a.kt)("p",null,"Since any property value is considered an expression, you can create sub-objects using ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," in property values.  You can also create and reference ",(0,a.kt)("strong",{parentName:"p"},"collection literals"),"."),(0,a.kt)("p",null,"Exemples :"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' var $o ; $o2 ; $o3 : Object //declaration of object variables\n $o := {} // instantiation of an empty object \n $o2 := {a: "foo"; b: 42; c: {}; d: ($toto) ? true : false } // instantiation of an object\n        // with properties {"a":"foo","b":42,"c":{},"d":false})\n\n    // same properties using variables\n var $a : Text\n var $b : Number\n var $c : Object\n $a:="foo"\n $b:=42\n $c:={}\n $o3:={ a: $a; b: $b; c: $c } // {"a":"foo";b":42;"c":{}}\n\n')),(0,a.kt)("p",null,"You can mix the ",(0,a.kt)("inlineCode",{parentName:"p"},"New object")," and literal syntaxes:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$o:={\\\n    ob1: {age: 42}; \\\n    ob2: New object("message"; "Hello"); \\\n    form1: Formula(return This.ob1.age+10); \\\n    form2 : Formula(ALERT($1)); \\\n    col: [1; 2; 3; 4; 5; 6]\\\n    }\n\n$o.form1()  //52\n$o.form2($o.ob2.message)  // displays Hello\n$col:=$o.col[5] //6\n')),(0,a.kt)("h3",r({},{id:"objet-standard-ou-partag\xe9"}),"Objet standard ou partag\xe9"),(0,a.kt)("p",null,"Vous pouvez cr\xe9er deux types d'objets :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"regular (non-shared) objects, using the ",(0,a.kt)("a",r({parentName:"li"},{href:"https://doc.4d.com/4Dv20/4D/20/New-object.301-6237618.en.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"New object"))," command or object literal syntax (",(0,a.kt)("inlineCode",{parentName:"li"},"{}"),"). Ces objets peuvent \xeatre modifi\xe9s sans contr\xf4le d'acc\xe8s sp\xe9cifique mais ne peuvent pas \xeatre partag\xe9s entre les process."),(0,a.kt)("li",{parentName:"ul"},"shared objects, using the ",(0,a.kt)("a",r({parentName:"li"},{href:"https://doc.4d.com/4Dv20/4D/20/New-shared-object.301-6237617.en.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"New shared object"))," command. Le contenu de ces objets peut \xeatre partag\xe9 entre les process, y compris des process (thread) pr\xe9emptifs. Access to these objects is controlled by ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," structures.\nFor more information, refer to the ",(0,a.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/shared"}),"Shared objects and collections")," section.")),(0,a.kt)("h2",r({},{id:"propri\xe9t\xe9s"}),"Propri\xe9t\xe9s"),(0,a.kt)("p",null,"You access object property values through a chain of tokens. Object properties can be accessed in two ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'using a "dot" symbol:',(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"object.propertyName")))),(0,a.kt)("p",null,"Voici un exemple :"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'     employee.name:="Smith"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"using a string within square brackets:",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"object",'["propertyName"]')))),(0,a.kt)("p",null,"Exemples :"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'     $vName:=employee["name"]\n     //or also:\n     $property:="name"\n     $vName:=employee[$property]\n\n')),(0,a.kt)("p",null,"Since an object property value can be an object or a collection, you can use a sequence of symbols to access sub-properties, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"})," $vAge:=employee.children[2].age\n")),(0,a.kt)("p",null,"La notation objet est utilisable avec tout \xe9l\xe9ment de langage qui contient ou retourne un objet, c'est-\xe0-dire :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Objects")," themselves (stored in variables, fields, object properties, object arrays, or collection elements).\nExemples :")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"     $age:=$myObjVar.employee.age //variable\n     $addr:=[Emp]data_obj.address //field\n     $city:=$addr.city //property of an object\n     $pop:=$aObjCountries{2}.population //object array\n     $val:=$myCollection[3].subvalue //collection element\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"4D commands")," that return objects.\nVoici un exemple :")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"     $measures:=Get database measures.DB.tables\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Project methods")," or ",(0,a.kt)("strong",{parentName:"li"},"Functions")," that return objects.\nVoici un exemple :")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'      // MyMethod1\n     #DECLARE -> $o : Object\n     $o:=New object("a";10;"b";20)\n     \n      //myMethod2\n     $result:=MyMethod1.a //10\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Collections"),"\nExample:")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"     myColl.length //size of the collection\n")),(0,a.kt)("h3",r({},{id:"valeur-null"}),"Valeur Null"),(0,a.kt)("p",null,"When using the objects, the ",(0,a.kt)("strong",{parentName:"p"},"null")," value is supported though the ",(0,a.kt)("strong",{parentName:"p"},"Null")," command. This command can be used to assign or compare the null value to object properties, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"})," myObject.address.zip:=Null\n If(myColl[2]=Null)\n")),(0,a.kt)("p",null,"For more information, please refer to ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/null-undefined"}),"Null and Undefined"),"."),(0,a.kt)("h3",r({},{id:"valeur-ind\xe9finie"}),"Valeur Ind\xe9finie"),(0,a.kt)("p",null,"L'\xe9valuation d'une propri\xe9t\xe9 d'objet peut parfois produire une valeur ind\xe9finie (undefined). Assigning an undefined value to an existing object property reinitializes or clears its value. L'affectation d'une valeur ind\xe9finie \xe0 une propri\xe9t\xe9 d'objet inexistante ne fait rien."),(0,a.kt)("p",null,"For more information, please refer to ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/null-undefined"}),"Null and Undefined")),(0,a.kt)("h3",r({},{id:"pointeurs"}),"Pointeurs"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Preliminary Note:")," Since objects are always passed by reference, there is usually no need to use pointers. En passant un objet, 4D utilise automatiquement, en interne, un m\xe9canisme similaire \xe0 un pointeur pour minimiser la m\xe9moire n\xe9cessaire, pour vous permettre de modifier le param\xe8tre et de retourner les modifications. Par cons\xe9quent, vous n'aurez pas besoin d'utiliser des pointeurs. Cependant, si vous souhaitez utiliser des pointeurs, il est possible d'acc\xe9der aux valeurs de propri\xe9t\xe9s via des pointeurs."),(0,a.kt)("p",null,'La notation objet pour les pointeurs est semblable \xe0 la notation objet standard, \xe0 la seule diff\xe9rence que le symbole "point" doit \xeatre omis.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Acc\xe8s direct :")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"pointerOnObject->propertyName")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Acc\xe8s par le nom :")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"pointerOnObject->",'["propertyName"]')),(0,a.kt)("p",null,"Voici un exemple :"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"})," var vObj : Object\n var vPtr : Pointer\n vObj:=New object\n vObj.a:=10\n vPtr:=->vObj\n x:=vPtr->a //x=10\n")),(0,a.kt)("h2",r({},{id:"resources"}),"Resources"),(0,a.kt)("p",null,"Objects use ",(0,a.kt)("em",{parentName:"p"},"resources")," such a documents, entity locks, and of course, memory. These resources are retained as long as objects need them. Usually, you do not have to worry about them, 4D automatically releases all resources attached to an object when it detects that the object itself is no longer referenced by any variable or other object."),(0,a.kt)("p",null,"For instance, when there is no more references to an entity on which you have set a lock with ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/API/EntityClass#lock"}),(0,a.kt)("inlineCode",{parentName:"a"},"$entity.lock()")),", 4D will free the memory but also automatically release the associated lock, a call to ",(0,a.kt)("a",r({parentName:"p"},{href:"/docs/fr/API/EntityClass#unlock"}),(0,a.kt)("inlineCode",{parentName:"a"},"$entity.unlock()"))," is useless."),(0,a.kt)("p",null,"If you want to release immediately all resources occupied by an object without having to wait that 4D does it automatically (at the end of the method execution for local variables for example), you just have to ",(0,a.kt)("strong",{parentName:"p"},"nullify all its references"),". Par exemple :"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'\n$doc:=WP Import document("large_novel.4wp")\n    ... // do something with $doc\n$doc:=Null  // free resources occupied by $doc\n    ... // continue execution with more free memory\n\n')),(0,a.kt)("h2",r({},{id:"exemples"}),"Exemples"),(0,a.kt)("p",null,'L\'utilisation de la notation objet simplifie grandement le code 4D de manipulation des objets. A noter toutefois que la notation utilisant les commandes "OB" reste enti\xe8rement prise en charge.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ecriture et lecture de propri\xe9t\xe9s d'objets (cet exemple compare la notation objet et la syntaxe avec commandes) :")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  // Using the object notation\n var $myObj : Object //declares a 4D variable object\n $myObj:={} //creates an object literal and assigns it to the variable\n $myObj.age:=56\n $age:=$myObj.age //56\n \n  // Using the command notation\n var $myObj2 : Object //declares a 4D variable object\n OB SET($myObj2;"age";42) //creates an object and adds the age property\n $age:=OB Get($myObj2;"age") //42\n \n  // Of course, both notations can be mixed\n var $myObj3 : Object\n OB SET($myObj3;"age";10)\n $age:=$myObj3.age //10\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cr\xe9ation de propri\xe9t\xe9s et affectation de valeurs, y compris d'autres objets :")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' var $Emp : Object\n $Emp:=New object\n $Emp.city:="London" //creates the city property and sets its value to "London"\n $Emp.city:="Paris" //modifies the city property\n $Emp.phone:=New object("office";"123456789";"home";"0011223344")\n  //creates the phone property and sets its value to an object\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Lire une valeur dans un sous-objet est tr\xe8s simple avec la notation objet :")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' $vCity:=$Emp.city //"Paris"\n $vPhone:=$Emp.phone.home //"0011223344"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can access properties as strings using the ",(0,a.kt)("inlineCode",{parentName:"li"},"[]")," operator")),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' $Emp["city"]:="Berlin" //modifies the city property\n  //this can be useful for creating properties through variables\n var $addr : Text\n $addr:="address"\n For($i;1;4)\n    $Emp[$addr+String($i)]:=""\n End for\n  // creates 4 empty properties "address1...address4" in the $Emp object\n')))}d.isMDXComponent=!0}}]);