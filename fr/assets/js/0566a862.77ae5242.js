"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[30660],{603905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(a),k=r,c=d["".concat(p,".").concat(k)]||d[k]||m[k]||l;return a?n.createElement(c,o(o({ref:t},s),{},{components:a})):n.createElement(c,o({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},879077:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>s});a(667294);var n=a(603905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const o={id:"operators",title:"Op\xe9rateurs"},i=void 0,p={unversionedId:"Concepts/operators",id:"version-20-R5/Concepts/operators",title:"Op\xe9rateurs",description:"Un op\xe9rateur est un symbole ou un groupe de symboles que vous utilisez pour v\xe9rifier, modifier ou combiner des valeurs. Vous connaissez d\xe9j\xe0 la plupart des op\xe9rateurs. For example, 1 + 2 uses the addition (or plus sign) operator to add two numbers together, and the result is 3. Comparison operators, like = or >, let you compare two or more values.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-20-R5/Concepts/operators.md",sourceDirName:"Concepts",slug:"/Concepts/operators",permalink:"/docs/fr/Concepts/operators",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Foperators.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"operators",title:"Op\xe9rateurs"},sidebar:"docs",previous:{title:"Tour d'horizon",permalink:"/docs/fr/Concepts/quick-tour"},next:{title:"Types de donn\xe9es",permalink:"/docs/fr/Concepts/data-types"}},u={},s=[{value:"Terminologie",id:"terminologie",level:2},{value:"Op\xe9rateur d&#39;assignation",id:"op\xe9rateur-dassignation",level:2},{value:"Op\xe9rateurs basiques",id:"op\xe9rateurs-basiques",level:2},{value:"Op\xe9rateurs d&#39;affectation compos\xe9s",id:"op\xe9rateurs-daffectation-compos\xe9s",level:2},{value:"Exemples",id:"exemples",level:4},{value:"Op\xe9rateurs en court-circuit",id:"op\xe9rateurs-en-court-circuit",level:2},{value:"Op\xe9rateur en court-circuit AND (&amp;&amp;)",id:"op\xe9rateur-en-court-circuit-and-",level:3},{value:"Exemple 1",id:"exemple-1",level:4},{value:"Exemple 2",id:"exemple-2",level:4},{value:"Exemple 3",id:"exemple-3",level:4},{value:"Op\xe9rateur en court-circuit OR (||)",id:"op\xe9rateur-en-court-circuit-or-",level:3},{value:"Exemple 1",id:"exemple-1-1",level:4},{value:"Exemple 2",id:"exemple-2-1",level:4},{value:"Priorit\xe9",id:"priorit\xe9",level:3},{value:"Op\xe9rateur ternaire",id:"op\xe9rateur-ternaire",level:2},{value:"Syntaxe",id:"syntaxe",level:3},{value:"Exemples",id:"exemples-1",level:3},{value:"Exemple simple",id:"exemple-simple",level:4},{value:"Traitement des donn\xe9es depuis une table",id:"traitement-des-donn\xe9es-depuis-une-table",level:4},{value:"Truthy et falsy",id:"truthy-et-falsy",level:2}],m={toc:s};function d(e){var{components:t}=e,a=l(e,["components"]);return(0,n.kt)("wrapper",r({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Un op\xe9rateur est un symbole ou un groupe de symboles que vous utilisez pour v\xe9rifier, modifier ou combiner des valeurs. Vous connaissez d\xe9j\xe0 la plupart des op\xe9rateurs. For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"1 + 2")," uses the addition (or plus sign) operator to add two numbers together, and the result is 3. Comparison operators, like = or >, let you compare two or more values."),(0,n.kt)("p",null,"Le langage 4D prend en charge les op\xe9rateurs que vous connaissez peut-\xeatre d\xe9j\xe0 dans d'autres langages tels que le C ou JavaScript. However, the assignment operator is ",(0,n.kt)("inlineCode",{parentName:"p"},":=")," to prevent it from being mistakenly used when the equal to operator (",(0,n.kt)("inlineCode",{parentName:"p"},"="),") is intended. ",(0,n.kt)("a",r({parentName:"p"},{href:"#basic-operators"}),"Basic operators")," such as arithmetic operators (+, -, ","*",", /, %...) and comparison operators (=, >, >=...) can be used with numbers, but also with boolean, text, date, time, pointer, or picture data types. Like JavaScript, the 4D language supports the concept of ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy and falsy values"),", which in use in ",(0,n.kt)("a",r({parentName:"p"},{href:"#short-circuit-operators"}),"short-cicrcuit operators"),"."),(0,n.kt)("h2",r({},{id:"terminologie"}),"Terminologie"),(0,n.kt)("p",null,"The 4D language supports ",(0,n.kt)("strong",{parentName:"p"},"binary")," and ",(0,n.kt)("strong",{parentName:"p"},"ternary")," operators:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"binary operators operate on two targets (such as ",(0,n.kt)("inlineCode",{parentName:"li"},"2 + 3"),") and appear in between their two targets."),(0,n.kt)("li",{parentName:"ul"},"les op\xe9rateurs ternaires op\xe8rent sur trois cibles. Like C, 4D has only one ternary operator, the ",(0,n.kt)("a",r({parentName:"li"},{href:"#ternary-operator"}),"ternary conditional operator")," (",(0,n.kt)("inlineCode",{parentName:"li"},"a ? b : c"),").")),(0,n.kt)("p",null,"Les valeurs que les op\xe9rateurs affectent sont des op\xe9randes. In the expression ",(0,n.kt)("inlineCode",{parentName:"p"},"1 + 2"),", the + symbol is a binary operator and its two operands are the values 1 and 2."),(0,n.kt)("h2",r({},{id:"op\xe9rateur-dassignation"}),"Op\xe9rateur d'assignation"),(0,n.kt)("p",null,"The ",(0,n.kt)("strong",{parentName:"p"},"assignment operator")," (",(0,n.kt)("inlineCode",{parentName:"p"},"a:=b"),") initializes or updates the value of ",(0,n.kt)("inlineCode",{parentName:"p"},"a")," with the value of ",(0,n.kt)("inlineCode",{parentName:"p"},"b"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$myNumber:=3 //assigns 3 to MyNumber variable  \n$myDate:=!2018/01/21! //assigns a date literal\n$myLength:=Length("Acme") //assigns the result of the command (4) to $myLength\n$col:=New collection //$col is initialized with an empty collection\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Do NOT confuse the assignment operator ",(0,n.kt)("inlineCode",{parentName:"p"},":=")," with the equality comparison operator ",(0,n.kt)("inlineCode",{parentName:"p"},"="),". A different assignment operator (and not ",(0,n.kt)("inlineCode",{parentName:"p"},"="),") was deliberately chosen to avoid issues and confusion which often occur with == or === in other programming languages. De telles erreurs sont souvent difficiles \xe0 reconna\xeetre pour le compilateur et conduisent \xe0 un d\xe9pannage fastidieux.")),(0,n.kt)("h2",r({},{id:"op\xe9rateurs-basiques"}),"Op\xe9rateurs basiques"),(0,n.kt)("p",null,"Operator results depend on the ",(0,n.kt)("strong",{parentName:"p"},"data types")," they are applied to. 4D supports different operators on scalar data types. Ils sont d\xe9crits avec les types de donn\xe9es, dans les sections suivantes :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/boolean#logical-operators"}),(0,n.kt)("strong",{parentName:"a"},"Logical operators"))," (on ",(0,n.kt)("strong",{parentName:"li"},"boolean")," expressions)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/date#date-operators"}),(0,n.kt)("strong",{parentName:"a"},"Date operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/time#time-operators"}),(0,n.kt)("strong",{parentName:"a"},"Time operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/number#number-operators"}),(0,n.kt)("strong",{parentName:"a"},"Number operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/number#bitwise-operators"}),(0,n.kt)("strong",{parentName:"a"},"Bitwise operators"))," (on ",(0,n.kt)("strong",{parentName:"li"},"long integer")," expressions)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/picture#picture-operators"}),(0,n.kt)("strong",{parentName:"a"},"Picture operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/pointer#pointer-operators"}),(0,n.kt)("strong",{parentName:"a"},"Pointer operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/string#string-operators"}),(0,n.kt)("strong",{parentName:"a"},"String operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/null-undefined#null-operators"}),(0,n.kt)("strong",{parentName:"a"},"Null operators"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/null-undefined#undefined-operators"}),(0,n.kt)("strong",{parentName:"a"},"Undefined operators")))),(0,n.kt)("h2",r({},{id:"op\xe9rateurs-daffectation-compos\xe9s"}),"Op\xe9rateurs d'affectation compos\xe9s"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Release"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"4D provides ",(0,n.kt)("strong",{parentName:"p"},"compound assignment operators")," that combine assignment with another operation. One example is the addition assignment operator (",(0,n.kt)("inlineCode",{parentName:"p"},"+="),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$a:=1 \n$a+=2 // $a=3\n")),(0,n.kt)("p",null,"Les op\xe9rateurs d'affectation compos\xe9s suivants sont pris en charge :"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Op\xe9rateur"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Syntaxe"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Assigne"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Exemple"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Addition"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text += Text"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},'$t+=" World"  //$t:=$t+" World"'))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n+=5 //$n:=$n+5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Date += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Date"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$d+=5 //$d:=$d+5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time += Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1+=$t2 //$t1:=$t1+$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1+=5 //$t1:=$t1+5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture += Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1+=$p2 //$p1:=$p1+$p2 (add $p2 to the right of $p1)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture += Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1+=5 //$p1:=$p1+5 (move $p1 horizontally 5 pixels to the right)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Soustraction"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n-=5 //$n:=$n-5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Date -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Date"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$d-=5 //$d:=$d-5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time -= Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1-=$t2 //$t1:=$t1-$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1-=5 //$t1:=$t1-5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture -= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1-=5 //$p1:=$p1-5 (d\xe9placer horizontalement $p1 de 5 pixels vers la gauche)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Division"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number /= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n/=5 //$n:=$n/5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time /= Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1/=$t2 //$t1:=$t1/$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time /= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1/=5 //$t1:=$t1/5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture /= Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1/=$p2 //$p1:=$p1/$p2 (ajouter $p2 vers le bas de $p1)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture /= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1/=5 //$p1:=$p1/5 (d\xe9placer verticalement $p1 de 5 pixels)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Multiplication"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text ","*","= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Text"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},'$t*="abc"  //$t:=$t*"abc"'))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number ","*","= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$n*=5 //$n:=$n*5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time ","*","= Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1*=$t2 //$t1:=$t1*$t2"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Time ","*","= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$t1*=5 //$t1:=$t1*5"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null})),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture ","*","= Number"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Picture"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"$p1*=5 //$p1:=$p1*5 (redimensionner $p1 de 5)"))))),(0,n.kt)("p",null,"These operators apply on any ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/quick-tour#assignable-vs-non-assignable-expressions"}),"assignable expressions")," (except pictures as object properties or collection elements)."),(0,n.kt)("p",null,'The operation "source ',(0,n.kt)("inlineCode",{parentName:"p"},"operator"),' value" is not strictly equivalent to "source := source ',(0,n.kt)("inlineCode",{parentName:"p"},"operator"),' value" because the expression designating the source (variable, field, object property, collection element) is only evaluated once. For example, in such expression as ',(0,n.kt)("inlineCode",{parentName:"p"},"getPointer()->+=1")," the ",(0,n.kt)("inlineCode",{parentName:"p"},"getPointer")," method is called only once."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/string#character-reference-symbols"}),"Character indexing in text")," and ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/blob#accessing-a-scalar-blobs-bytes"}),"byte indexing in blob")," do not support these operators.")),(0,n.kt)("h4",r({},{id:"exemples"}),"Exemples"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'// Addition\n$x:=2\n$x+=5 //$x=7\n\n$t:="Hello" \n$t+=" World" //$t="Hello World" \n\n$d:=!2000-11-10!\n$d+=10 //$d=!2000-11-20!\n\n// Subtraction\n$x1:=10\n$x1-=5 //$x1=5\n\n$d1:=!2000-11-10!\n$d1-=10 // $d1=!2000-10-31!\n\n// Division\n$x3:=10\n$x3/=2 // $x3=5\n\n\n// Multiplication\n$x2:=10\n$x2*=5 // $x2=10\n\n$t2:="Hello" \n$t2*=2 // $t2="HelloHello"\n\n')),(0,n.kt)("h2",r({},{id:"op\xe9rateurs-en-court-circuit"}),"Op\xe9rateurs en court-circuit"),(0,n.kt)("p",null,"The ",(0,n.kt)("strong",{parentName:"p"},"&&")," and ",(0,n.kt)("strong",{parentName:"p"},"||")," operators are ",(0,n.kt)("strong",{parentName:"p"},"short circuit operators"),". Un op\xe9rateur en court-circuit est un op\xe9rateur qui n'\xe9value pas n\xe9cessairement toutes ses op\xe9randes."),(0,n.kt)("p",null,"The difference with the single ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/boolean#logical-operators"}),(0,n.kt)("strong",{parentName:"a"},"&")," and ",(0,n.kt)("strong",{parentName:"a"},"|")," boolean operators")," is that the short-circuit operators ",(0,n.kt)("strong",{parentName:"p"},"&&")," and ",(0,n.kt)("strong",{parentName:"p"},"||")," don't return a boolean value. They evaluate expressions as ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy or falsy"),", then return one of the expressions."),(0,n.kt)("h3",r({},{id:"op\xe9rateur-en-court-circuit-and-"}),"Op\xe9rateur en court-circuit AND (&&)"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Release"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"La r\xe8gle est la suivante :"),(0,n.kt)("p",null,"Given ",(0,n.kt)("inlineCode",{parentName:"p"},"Expr1 && Expr2"),":"),(0,n.kt)("p",null,"The short-circuit AND operator evaluates operands from left to right, returning immediately with the value of the first falsy operand it encounters; if all values are ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy"),", the value of the last operand is returned."),(0,n.kt)("p",null,"The following table summarizes the different cases for the ",(0,n.kt)("strong",{parentName:"p"},"&&")," operator:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr1"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr2"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Valeur retourn\xe9e"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")))),(0,n.kt)("h4",r({},{id:"exemple-1"}),"Exemple 1"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $v : Variant\n\n$v:= "Hello" && "World" //"World"\n$v:=False && 0 // False\n$v:=0 && False // False\n$v:=5 && !00-00-00! // 00/00/00\n$v := 5 && 10 && "hello" //"hello"\n')),(0,n.kt)("h4",r({},{id:"exemple-2"}),"Exemple 2"),(0,n.kt)("p",null,"Supposons que vous ayez une boutique en ligne et que certains produits soient soumis \xe0 une taxe, alors que d'autres ne le sont pas."),(0,n.kt)("p",null,"Pour calculer la taxe, vous multipliez le prix par le taux de taxe, qui peut ne pas avoir \xe9t\xe9 sp\xe9cifi\xe9."),(0,n.kt)("p",null,"Vous pouvez donc \xe9crire ceci :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"var $tax : Variant\n\n$tax:=$item.taxRate && ($item.price*$item.taxRate)\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"$tax")," will be NULL if taxRate is NULL (or undefined), otherwise it will store the result of the calculation."),(0,n.kt)("h4",r({},{id:"exemple-3"}),"Exemple 3"),(0,n.kt)("p",null,"Les op\xe9rateurs en court-circuit sont utiles dans les tests tels que :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"If(($myObject#Null) && ($myObject.value>10))\n    //code\nEnd if\n")),(0,n.kt)("p",null,"Si $myObject est Null, le second argument n'est pas ex\xe9cut\xe9, donc aucune erreur n'est lev\xe9e."),(0,n.kt)("h3",r({},{id:"op\xe9rateur-en-court-circuit-or-"}),"Op\xe9rateur en court-circuit OR (||)"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Release"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"L'op\xe9rateur || retourne la valeur d'une des op\xe9randes sp\xe9cifi\xe9es. L'expression est \xe9valu\xe9e de gauche \xe0 droite et test\xe9e pour une \xe9ventuelle \xe9valuation en \"court-circuit\" en utilisant la r\xe8gle suivante :"),(0,n.kt)("p",null,"Given ",(0,n.kt)("inlineCode",{parentName:"p"},"Expr1 || Expr2"),":"),(0,n.kt)("p",null,"If Expr1 is ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"truthy"),", Expr2 is not evaluated and the calculation returns Expr1."),(0,n.kt)("p",null,"If Expr1 is ",(0,n.kt)("a",r({parentName:"p"},{href:"#truthy-and-falsy"}),"falsy"),", the calculation returns Expr2."),(0,n.kt)("p",null,"The following table summarizes the different cases and the value returned for the ",(0,n.kt)("strong",{parentName:"p"},"||")," operator:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr1"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Expr2"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Valeur retourn\xe9e"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr1")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"truthy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"falsy"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Expr2")))),(0,n.kt)("h4",r({},{id:"exemple-1-1"}),"Exemple 1"),(0,n.kt)("p",null,"Supposons que vous avez une table appel\xe9e Employee. Certains employ\xe9s ont saisi un num\xe9ro de t\xe9l\xe9phone, d'autres non. This means that ",(0,n.kt)("inlineCode",{parentName:"p"},"$emp.phone")," could be NULL, and you cannot assign NULL to a Text variable. Mais vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $phone : Text\n\n$phone:=$emp.phone || "n/a"\n')),(0,n.kt)("p",null,"In which case ",(0,n.kt)("inlineCode",{parentName:"p"},"$phone"),' will store either a phone number or the "n/a" string.'),(0,n.kt)("h4",r({},{id:"exemple-2-1"}),"Exemple 2"),(0,n.kt)("p",null,"Given a table called Person with a ",(0,n.kt)("em",{parentName:"p"},"name")," field, as well as a ",(0,n.kt)("em",{parentName:"p"},"maiden name")," field for married women."),(0,n.kt)("p",null,"L'exemple suivant v\xe9rifie s'il y a un nom de jeune fille et le stocke dans une variable, sinon il stocke simplement le nom de la personne :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"var $name: Text\n\n$name:=$person.maidenName || $person.name\n")),(0,n.kt)("h3",r({},{id:"priorit\xe9"}),"Priorit\xe9"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"&&")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"||")," operators have the same precedence as the logical operators ",(0,n.kt)("inlineCode",{parentName:"p"},"&")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"|"),", and are evaluated left to right."),(0,n.kt)("p",null,"This means that ",(0,n.kt)("inlineCode",{parentName:"p"},"a || b && c")," is evaluated as ",(0,n.kt)("inlineCode",{parentName:"p"},"(a || b) && c"),"."),(0,n.kt)("h2",r({},{id:"op\xe9rateur-ternaire"}),"Op\xe9rateur ternaire"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Release"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"L'op\xe9rateur conditionnel ternaire vous permet d'\xe9crire des expressions conditionnelles sur une seule ligne. For example, it can replace a full sequence of ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/control-flow#ifelseend-if"}),"If\u2026Else")," statements."),(0,n.kt)("p",null,"Il prend trois op\xe9randes dans l'ordre suivant :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"une condition suivie d'un point d'interrogation (?)"),(0,n.kt)("li",{parentName:"ul"},"an expression to execute if the condition is ",(0,n.kt)("a",r({parentName:"li"},{href:"#truthy-and-falsy"}),"truthy"),", followed by a colon (:)"),(0,n.kt)("li",{parentName:"ul"},"an expression to execute if the condition is ",(0,n.kt)("a",r({parentName:"li"},{href:"#truthy-and-falsy"}),"falsy"))),(0,n.kt)("h3",r({},{id:"syntaxe"}),"Syntaxe"),(0,n.kt)("p",null,"La syntaxe est la suivante :"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"condition ? exprIfTruthy : exprIfFalsy")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Since the ",(0,n.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4Dv19/4D/19.5/Using-tokens-in-formulas.300-6136716.en.html"}),"token syntax")," uses colons, we recommend inserting a space after the colon ",(0,n.kt)("inlineCode",{parentName:"p"},":")," or enclosing tokens using parentheses to avoid any conflicts.")),(0,n.kt)("h3",r({},{id:"exemples-1"}),"Exemples"),(0,n.kt)("h4",r({},{id:"exemple-simple"}),"Exemple simple"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $age : Integer\nvar $beverage : Text\n\n$age:=26\n$beverage:=($age>=21) ? "Beer" : "Juice"\n\nALERT($beverage) // "Beer"\n')),(0,n.kt)("h4",r({},{id:"traitement-des-donn\xe9es-depuis-une-table"}),"Traitement des donn\xe9es depuis une table"),(0,n.kt)("p",null,"Cet exemple stocke le nom complet d'une personne dans une variable, et g\xe8re le cas o\xf9 aucun pr\xe9nom ou nom de famille n'a \xe9t\xe9 sp\xe9cifi\xe9 :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'var $fullname : Text\n\n// If one of the names is missing, store the one that exists, otherwise store an empty string\n$fullname:=($person.firstname && $person.lastname) ? ($person.firstname+" "+$person.lastname) : ($person.lastname || $person.firstname) || ""\n')),(0,n.kt)("h2",r({},{id:"truthy-et-falsy"}),"Truthy et falsy"),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Release"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"As well as a type, each value also has an inherent Boolean value, generally known as either ",(0,n.kt)("strong",{parentName:"p"},"truthy")," or ",(0,n.kt)("strong",{parentName:"p"},"falsy"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"truthy")," and ",(0,n.kt)("strong",{parentName:"p"},"falsy")," values are only evaluated by ",(0,n.kt)("a",r({parentName:"p"},{href:"#short-circuit-operators"}),"short-circuit")," and ",(0,n.kt)("a",r({parentName:"p"},{href:"#ternary-operator"}),"ternary")," operators.")),(0,n.kt)("p",null,"The following values are ",(0,n.kt)("strong",{parentName:"p"},"falsy"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"false"),(0,n.kt)("li",{parentName:"ul"},"Null"),(0,n.kt)("li",{parentName:"ul"},"undefined"),(0,n.kt)("li",{parentName:"ul"},"Null object"),(0,n.kt)("li",{parentName:"ul"},"Null collection"),(0,n.kt)("li",{parentName:"ul"},"Null pointer"),(0,n.kt)("li",{parentName:"ul"},"Null picture"),(0,n.kt)("li",{parentName:"ul"},"Null date !00-00-00!"),(0,n.kt)("li",{parentName:"ul"},'"" - Cha\xeenes vides'),(0,n.kt)("li",{parentName:"ul"},"[] - Collections vides"),(0,n.kt)("li",{parentName:"ul"},"{} - Objets vides")),(0,n.kt)("p",null,"All other values are considered ",(0,n.kt)("strong",{parentName:"p"},"truthy"),", including:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"0 - z\xe9ro num\xe9rique (Entier ou autre)")),(0,n.kt)("p",null,"In 4D, ",(0,n.kt)("strong",{parentName:"p"},"truthy")," and ",(0,n.kt)("strong",{parentName:"p"},"falsy")," evaluation reflects the ",(0,n.kt)("strong",{parentName:"p"},"usability")," of a value, which means that a truthy value exists and can be processed by the code without generating errors or unexpected results. The rationale behind this is to provide a convenient way to handle ",(0,n.kt)("em",{parentName:"p"},"undefined")," and ",(0,n.kt)("em",{parentName:"p"},"null")," values in objects and collections, so that a reduced number of ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/control-flow#ifelseend-if"}),"If\u2026Else")," statements are necessary to avoid runtime errors."),(0,n.kt)("p",null,"For example, when you use a ",(0,n.kt)("a",r({parentName:"p"},{href:"#short-circuit-or-operator-"}),"short-circuit OR operator"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$value:=$object.value || $defaultValue\n")),(0,n.kt)("p",null,"... you get the default value whenever ",(0,n.kt)("em",{parentName:"p"},"$object")," does not contain the ",(0,n.kt)("inlineCode",{parentName:"p"},"value")," property OR when it is ",(0,n.kt)("em",{parentName:"p"},"null"),". Cet op\xe9rateur v\xe9rifie donc l'existence ou la possibilit\xe9 d'utilisation de la valeur et non une valeur sp\xe9cifique. Note that because the numerical value 0 exists and is usable, it is not treated specially, thus it is ",(0,n.kt)("strong",{parentName:"p"},"truthy"),"."),(0,n.kt)("p",null,'Regarding values representing collections, objects, or strings, "empty" values are considered ',(0,n.kt)("strong",{parentName:"p"},"falsy"),". C'est pratique lorsque vous voulez assigner une valeur par d\xe9faut chaque fois qu'une valeur vide est rencontr\xe9e."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$phone:=$emp.phone || "n/a"\n')))}d.isMDXComponent=!0}}]);