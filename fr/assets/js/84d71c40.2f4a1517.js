"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[44558],{603905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(667294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=l,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},375559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});n(667294);var a=n(603905);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const o={id:"control-flow",title:"Conditions et boucles"},i=void 0,s={unversionedId:"Concepts/control-flow",id:"version-20-R5/Concepts/control-flow",title:"Conditions et boucles",description:"Quelle que soit la simplicit\xe9 ou la complexit\xe9 d\u2019une m\xe9thode ou d'une fonction, vous utiliserez toujours un ou plusieurs types de structure de programmation. Les structures de programmation d\xe9terminent si et dans quel ordre les lignes d\u2019instructions sont ex\xe9cut\xe9es \xe0 l\u2019int\xe9rieur d\u2019une m\xe9thode. Il existe trois types de structures :",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-20-R5/Concepts/flow-control.md",sourceDirName:"Concepts",slug:"/Concepts/control-flow",permalink:"/docs/fr/Concepts/control-flow",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fflow-control.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"control-flow",title:"Conditions et boucles"},sidebar:"docs",previous:{title:"Commandes",permalink:"/docs/fr/Concepts/commands"},next:{title:"Gestion des erreurs",permalink:"/docs/fr/Concepts/error-handling"}},p={},u=[{value:"If...Else...End if",id:"ifelseend-if",level:2},{value:"Exemple",id:"exemple",level:4},{value:"Case of...Else...End case",id:"case-ofelseend-case",level:2},{value:"Exemple",id:"exemple-1",level:4},{value:"While...End while",id:"whileend-while",level:2},{value:"Exemple",id:"exemple-2",level:4},{value:"Repeat...Until",id:"repeatuntil",level:2},{value:"Exemple",id:"exemple-3",level:4},{value:"For...End for",id:"forend-for",level:2},{value:"Exemples \xe9l\xe9mentaires",id:"exemples-\xe9l\xe9mentaires",level:4},{value:"Variable compteur",id:"variable-compteur",level:3},{value:"D\xe9cr\xe9menter la variable compteur",id:"d\xe9cr\xe9menter-la-variable-compteur",level:4},{value:"Incrementer la variable compteur de plus de 1",id:"incrementer-la-variable-compteur-de-plus-de-1",level:4},{value:"Optimiser l&#39;ex\xe9cution de For...End for",id:"optimiser-lex\xe9cution-de-forend-for",level:4},{value:"Comparaison des structures r\xe9p\xe9titives",id:"comparaison-des-structures-r\xe9p\xe9titives",level:3},{value:"Structures For...End for embo\xeet\xe9es",id:"structures-forend-for-embo\xeet\xe9es",level:3},{value:"For each...End for each",id:"for-eachend-for-each",level:2},{value:"Boucle sur collections",id:"boucle-sur-collections",level:3},{value:"Exemple",id:"exemple-4",level:4},{value:"Boucle sur entity selections",id:"boucle-sur-entity-selections",level:3},{value:"Exemple",id:"exemple-5",level:4},{value:"Boucles sur des propri\xe9t\xe9s d&#39;objets",id:"boucles-sur-des-propri\xe9t\xe9s-dobjets",level:3},{value:"Exemple",id:"exemple-6",level:4},{value:"Param\xe8tres d\xe9but / fin",id:"param\xe8tres-d\xe9but--fin",level:3},{value:"Exemple",id:"exemple-7",level:4},{value:"Conditions Until et While",id:"conditions-until-et-while",level:3},{value:"Exemple",id:"exemple-8",level:4},{value:"break et continue",id:"break-et-continue",level:2},{value:"break",id:"break",level:3},{value:"Exemple",id:"exemple-9",level:4},{value:"continue",id:"continue",level:3},{value:"return {expression}",id:"return-expression",level:2},{value:"Exemple",id:"exemple-10",level:4}],m={toc:u};function d(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",l({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Quelle que soit la simplicit\xe9 ou la complexit\xe9 d\u2019une m\xe9thode ou d'une fonction, vous utiliserez toujours un ou plusieurs types de structure de programmation. Les structures de programmation d\xe9terminent si et dans quel ordre les lignes d\u2019instructions sont ex\xe9cut\xe9es \xe0 l\u2019int\xe9rieur d\u2019une m\xe9thode. Il existe trois types de structures :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Sequential"),": a sequential structure is a simple, linear structure. Une s\xe9quence est une s\xe9rie d'instructions que 4D ex\xe9cute l'une apr\xe8s l'autre, de la premi\xe8re \xe0 la derni\xe8re. Une routine d'une ligne, fr\xe9quemment utilis\xe9e pour les m\xe9thodes objets, est le cas le plus simple d'une structure s\xe9quentielle. For example: ",(0,a.kt)("inlineCode",{parentName:"p"},"[People]lastName:=Uppercase([People]lastName)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Branching"),": A branching structure allows methods to test a condition and take alternative paths, depending on the result. La condition est une expression bool\xe9enne, c'est-\xe0-dire une expression qui est \xe9valu\xe9e \xe0 vrai ou faux. One branching structure is the ",(0,a.kt)("a",l({parentName:"p"},{href:"#ifelseend-if"}),(0,a.kt)("inlineCode",{parentName:"a"},"If...Else...End if"))," structure, which directs program flow along one of two paths. The other branching structure is the ",(0,a.kt)("a",l({parentName:"p"},{href:"#case-ofelseend-case"}),(0,a.kt)("inlineCode",{parentName:"a"},"Case of...Else...End case"))," structure, which directs program flow to one of many paths.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Looping"),": When writing methods, it is very common to find that you need a sequence of statements to repeat a number of times. Pour traiter ces besoins, le langage 4D vous propose plusieurs structures r\xe9p\xe9titives :"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#whileend-while"}),(0,a.kt)("inlineCode",{parentName:"a"},"While...End while"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#repeatuntil"}),(0,a.kt)("inlineCode",{parentName:"a"},"Repeat...Until"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#forend-for"}),(0,a.kt)("inlineCode",{parentName:"a"},"For...End for"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",l({parentName:"li"},{href:"#for-eachend-for-each"}),(0,a.kt)("inlineCode",{parentName:"a"},"For each...End for each")))))),(0,a.kt)("p",null,"Les boucles sont contr\xf4l\xe9es de deux mani\xe8res : soit elles bouclent jusqu'\xe0 ce qu'une condition soit remplie, soit elles bouclent un certain nombre de fois. Each looping structure can be used in either way, but ",(0,a.kt)("inlineCode",{parentName:"p"},"While")," loops and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat")," loops are more appropriate for repeating until a condition is met, and ",(0,a.kt)("inlineCode",{parentName:"p"},"For")," loops are more appropriate for looping a specified number of times. ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," allows mixing both ways and is designed to loop within objects and collections."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:"),' 4D allows you to embed programming structures up to a "depth" of 512 levels.'),(0,a.kt)("h2",l({},{id:"ifelseend-if"}),"If...Else...End if"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    instruction(s)\n Else\n    instruction(s)\nEnd if\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is optional; you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Boolean_Expression)\n    instruction(s)\n End if\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure lets your method choose between two actions, depending on whether a test (a Boolean expression) is TRUE or FALSE. Si l\u2019expression bool\xe9enne est TRUE, les instructions qui suivent imm\xe9diatement le test sont ex\xe9cut\xe9es. Si l\u2019expression bool\xe9enne est FALSE, les instructions suivant la ligne Else sont ex\xe9cut\xe9es. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," statement is optional; if you omit Else, execution continues with the first statement (if any) following the ",(0,a.kt)("inlineCode",{parentName:"p"},"End if"),"."),(0,a.kt)("p",null,"A noter que l'expression bool\xe9enne est toujours \xe9valu\xe9e en totalit\xe9. Examinons en particulier le test suivant :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(MethodA & MethodB)\n    ...\n End if\n")),(0,a.kt)("p",null,"L'expression n'est TRUE que si les deux m\xe9thodes sont mises \xe0 TRUE. However, even if ",(0,a.kt)("em",{parentName:"p"},"MethodA")," returns FALSE, 4D will still evaluate ",(0,a.kt)("em",{parentName:"p"},"MethodB"),", which is a useless waste of time. Dans ce cas, il est pr\xe9f\xe9rable d'utiliser une structure du type :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(MethodA)\n    If(MethodB)\n       ...\n    End if\n End if\n")),(0,a.kt)("p",null,"The result is similar and ",(0,a.kt)("em",{parentName:"p"},"MethodB")," is evaluated only if necessary."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/fr/Concepts/operators#ternary-operator"}),"ternary operator")," allows writing one-line conditional expressions and can replace a full sequence of If..Else statements.")),(0,a.kt)("h4",l({},{id:"exemple"}),"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'  // Demander \xe0 l\'utilisateur de saisir un nom\n $Find:=Request(Type a name)\n If(OK=1)\n    QUERY([People];[People]LastName=$Find)\n Else\n    ALERT("You did not enter a name.")\n End if \n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," Branching can be performed without statements to be executed in one case or the other. Lorsque vous d\xe9veloppez un algorithme, ou lorsque vous poursuivez un but pr\xe9cis, rien ne vous emp\xeache d'\xe9crire :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Expression_bool\xe9enne)\n Else\n    instruction(s)\n End if\n")),(0,a.kt)("p",null,"ou :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," If(Expression_bool\xe9enne)\n    instruction(s)\n Else\n End if\n")),(0,a.kt)("h2",l({},{id:"case-ofelseend-case"}),"Case of...Else...End case"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is optional; you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n       statement(s)\n    :(Boolean_Expression)\n       statement(s)\n       .\n       .\n       .\n \n    :(Boolean_Expression)\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"As with the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," structure, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure also lets your method choose between alternative actions. Unlike the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End")," if structure, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure can test a reasonable unlimited number of Boolean expressions and take action depending on which one is TRUE."),(0,a.kt)("p",null,"Chaque expression bool\xe9enne d\xe9bute par le caract\xe8re deux points (",(0,a.kt)("inlineCode",{parentName:"p"},":"),"). La combinaison de deux points et d\u2019une expression bool\xe9enne est appel\xe9e un cas. Par exemple, la ligne suivante est un cas :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),":(bValidate=1)\n")),(0,a.kt)("p",null,"Seules les instructions suivant le premier cas TRUE (et ce, jusqu\u2019au cas suivant) seront ex\xe9cut\xe9es. If none of the cases are TRUE, none of the statements will be executed (if no ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," part is included)."),(0,a.kt)("p",null,"Vous pouvez placer une instruction Else apr\xe8s le dernier cas. If all of the cases are FALSE, the statements following the ",(0,a.kt)("inlineCode",{parentName:"p"},"Else")," will be executed."),(0,a.kt)("h4",l({},{id:"exemple-1"}),"Exemple"),(0,a.kt)("p",null,"Cet exemple teste une variable num\xe9rique et affiche une bo\xeete de dialogue d\u2019alerte comportant un simple mot :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' Case of\n    :(vResult=1) // Teste si le num\xe9ro est 1\n       ALERT("One.") // Si c\u2019est 1, afficher une alerte\n    :(vResult=2) // Teste si le num\xe9ro est 2\n       ALERT("Two.") // Si c\u2019est 2, afficher une alerte\n    :(vResult=3) // Teste si le num\xe9ro est 3\n       ALERT("Three.") // Si c\u2019est 3, afficher une alerte\n    Else  // Si ce n\u2019est ni 1 ni 2 ni 3, afficher une alerte\n       ALERT("It was not one, two, or three.")\n End case\n')),(0,a.kt)("p",null,"For comparison, here is the ",(0,a.kt)("inlineCode",{parentName:"p"},"If...Else...End if")," version of the same method:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' If(vResult=1) //Teste si le num\xe9ro est 1\n    ALERT("One.") //Si c\u2019est 1, afficher une alerte\n Else\n    If(vResult=2) //Test si le num\xe9ro est 2\n       ALERT("Two.") //Si c\u2019est 2, afficher une alerte\n    Else\n       If(vResult=3) //Teste si le num\xe9ro est 3\n          ALERT("Three.") //Si c\u2019est 3, afficher une alerte\n       Else //Si ce n\u2019est ni 1, 2 ni 3, afficher l\u2019alerte\n          ALERT("It was not one, two, or three.")\n       End if\n    End if\n End if\n')),(0,a.kt)("p",null,"Remember that with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Case of...Else...End case")," structure, only the first TRUE case is executed. M\xeame si d\u2019autres cas sont TRUE, seules les instructions suivant le premier cas TRUE seront prises en compte."),(0,a.kt)("p",null,"Par cons\xe9quent, lorsque vous testez dans la m\xeame m\xe9thode des cas simples et des cas complexes, vous devez placer les cas complexes avant les cas simples, sinon ils ne seront jamais ex\xe9cut\xe9s. For example, the test for the presence of condition1 covers the test for the presence of condition1&condition2 and should therefore be located last in the test sequence."),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(vResult=1)\n       ... //statement(s)\n    :((vResult=1) & (vCondition#2)) //this case will never be detected\n       ... //statement(s)\n End case\n")),(0,a.kt)("p",null,"... les instructions associ\xe9es au cas complexe ne seront jamais ex\xe9cut\xe9es. En effet, pour que ce cas soit TRUE, ses deux conditions bool\xe9ennes doivent l\u2019\xeatre. Or, la premi\xe8re condition est celle du cas simple situ\xe9 pr\xe9c\xe9demment. Lorsqu'elle est TRUE, le cas simple est ex\xe9cut\xe9 et 4D sort de la structure conditionnelle, sans \xe9valuer le cas complexe. Pour que ce type de m\xe9thode fonctionne, vous devez \xe9crire :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :((vResult=1) & (vCondition#2)) //this case will be detected first\n       ... //statement(s)\n    :(vResult=1)\n       ... //statement(s)\n End case\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," Branching can be performed without statements to be executed in one case or another. Lorsque vous d\xe9veloppez un algorithme, ou lorsque vous poursuivez un but pr\xe9cis, rien ne vous emp\xeache d'\xe9crire :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n      ...\n \n    :(Boolean_Expression)\n       statement(s)\n    Else\n       statement(s)\n End case\n")),(0,a.kt)("p",null,"ou :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    :(Boolean_Expression)\n    :(Boolean_Expression)\n       statement(s)\n       ...\n        \n    :(Boolean_Expression)\n       statement(s)\n    Else\n End case\n")),(0,a.kt)("p",null,"ou :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Case of\n    Else\n       instruction(s)\n End case\n")),(0,a.kt)("h2",l({},{id:"whileend-while"}),"While...End while"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," While(Boolean_Expression)\n    statement(s)\n    {break}  \n    {continue}\n End while\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop executes the statements inside the loop as long as the Boolean expression is TRUE. Elle teste l\u2019expression bool\xe9enne initiale et n\u2019entre pas dans la boucle (et donc n'ex\xe9cute aucune instruction) si l\u2019expression est \xe0 FALSE."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("p",null,"It is common to initialize the value tested in the Boolean expression immediately before entering the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop. Initializing the value means setting it to something appropriate, usually so that the Boolean expression will be TRUE and ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," executes the loop."),(0,a.kt)("p",null,"La valeur de l'expression bool\xe9enne doit pouvoir \xeatre modifi\xe9e par un \xe9l\xe9ment situ\xe9 \xe0 l'int\xe9rieur de la boucle, sinon elle s'ex\xe9cutera ind\xe9finiment. The following loop continues forever because ",(0,a.kt)("em",{parentName:"p"},"NeverStop")," is always TRUE:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," NeverStop:=True\n While(NeverStop)\n End while\n")),(0,a.kt)("p",null,"Si vous vous retrouvez dans une telle situation (o\xf9 une m\xe9thode s'ex\xe9cute de mani\xe8re incontr\xf4l\xe9e), vous pouvez utiliser les fonctions de d\xe9bogage de 4D et remonter \xe0 la source du probl\xe8me. For more information about tracing a method, see the ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/fr/Concepts/error-handling"}),"Error handling")," page."),(0,a.kt)("h4",l({},{id:"exemple-2"}),"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' CONFIRM("Add a new record?") //The user wants to add a record?\n While(OK=1) //Loop as long as the user wants to\n    ADD RECORD([aTable]) //Add a new record\n End while //The loop always ends with End while\n')),(0,a.kt)("p",null,"In this example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set by the ",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIRM")," command before the loop starts. If the user clicks the ",(0,a.kt)("strong",{parentName:"p"},"OK")," button in the confirmation dialog box, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 1 and the loop starts. Otherwise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 0 and the loop is skipped. Once the loop starts, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ADD RECORD")," command keeps the loop going because it sets the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable to 1 when the user saves the record. When the user cancels (does not save) the last record, the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," system variable is set to 0 and the loop stops."),(0,a.kt)("h2",l({},{id:"repeatuntil"}),"Repeat...Until"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),"Repeat\n    statement(s)\n    {break}  \n    {continue}\nUntil(Boolean_Expression)\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is similar to a ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/fr/Concepts/control-flow#whileend-while"}),"While...End while")," loop, except that it tests the Boolean expression after the loop rather than before. Thus, a ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop always executes the loop once, whereas if the Boolean expression is initially False, a ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop does not execute the loop at all."),(0,a.kt)("p",null,"The other difference with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop is that the loop continues until the Boolean expression is TRUE."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h4",l({},{id:"exemple-3"}),"Exemple"),(0,a.kt)("p",null,"Compare the following example with the example for the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop. Note that the Boolean expression does not need to be initialized\u2014there is no ",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIRM")," command to initialize the ",(0,a.kt)("inlineCode",{parentName:"p"},"OK")," variable."),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," Repeat\n    ADD RECORD([aTable])\n Until(OK=0)\n")),(0,a.kt)("h2",l({},{id:"forend-for"}),"For...End for"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),"For(Counter_Variable;Start_Expression;End_Expression{;Increment_Expression})\n   statement(s)\n    {break}  \n    {continue}\nEnd for\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop is a loop controlled by a counter variable:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The counter variable ",(0,a.kt)("em",{parentName:"li"},"Counter_Variable")," is a numeric variable (Real or Long Integer) that the ",(0,a.kt)("inlineCode",{parentName:"li"},"For...End for")," loop initializes to the value specified by ",(0,a.kt)("em",{parentName:"li"},"Start_Expression"),"."),(0,a.kt)("li",{parentName:"ul"},"Each time the loop is executed, the counter variable is incremented by the value specified in the optional value ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),". If you do not specify ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),", the counter variable is incremented by one (1), which is the default."),(0,a.kt)("li",{parentName:"ul"},"When the counter variable passes the ",(0,a.kt)("em",{parentName:"li"},"End_Expression")," value, the loop stops.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," The numeric expressions ",(0,a.kt)("em",{parentName:"p"},"Start_Expression"),", ",(0,a.kt)("em",{parentName:"p"},"End_Expression")," and ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression")," are evaluated once at the beginning of the loop. Si ces expressions sont des variables, leur modification depuis l'int\xe9rieur de la boucle n'affectera pas l'ex\xe9cution de la boucle."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," However, for special purposes, you can change the value of the counter variable ",(0,a.kt)("em",{parentName:"p"},"Counter_Variable")," within the loop; this will affect the loop."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Usually ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," is less than ",(0,a.kt)("em",{parentName:"li"},"End_Expression"),"."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," and ",(0,a.kt)("em",{parentName:"li"},"End_Expression")," are equal, the loop will execute only once."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("em",{parentName:"li"},"Start_Expression")," is greater than ",(0,a.kt)("em",{parentName:"li"},"End_Expression"),", the loop will not execute at all unless you specify a negative ",(0,a.kt)("em",{parentName:"li"},"Increment_Expression"),". Reportez-vous ci-dessous au paragraphe d\xe9crivant ce point.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h4",l({},{id:"exemples-\xe9l\xe9mentaires"}),"Exemples \xe9l\xe9mentaires"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"La boucle suivante s'ex\xe9cute 100 fois :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faire quelque chose\n End for\n")),(0,a.kt)("ol",l({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet de traiter tous les \xe9l\xe9ments du tableau anArray :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("ol",l({},{start:3}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet d'examiner chaque caract\xe8re du texte vtSomeText :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlChar;1;Length(vtSomeText))\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,a.kt)("ol",l({},{start:4}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet de traiter tous les enregistrements de la s\xe9lection de la table ","[aTable]"," :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," FIRST RECORD([aTable])\n For($vlRecord;1;Records in selection([aTable]))\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the next record\n    NEXT RECORD([aTable])\n End for\n")),(0,a.kt)("p",null,"Most of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loops you will write in your projects will look like the ones listed in these examples."),(0,a.kt)("h3",l({},{id:"variable-compteur"}),"Variable compteur"),(0,a.kt)("h4",l({},{id:"d\xe9cr\xe9menter-la-variable-compteur"}),"D\xe9cr\xe9menter la variable compteur"),(0,a.kt)("p",null,"Dans certains cas, vous pouvez souhaiter disposer d'une boucle dont la valeur de la variable compteur d\xe9cro\xeet au lieu de cro\xeetre. To do so, you must specify ",(0,a.kt)("em",{parentName:"p"},"Start_Expression")," greater than ",(0,a.kt)("em",{parentName:"p"},"End_Expression")," and a negative ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression"),". Les exemples suivants effectuent les m\xeames t\xe2ches que les pr\xe9c\xe9dents, mais en sens inverse :"),(0,a.kt)("ol",l({},{start:5}),(0,a.kt)("li",{parentName:"ol"},"La boucle suivante s'ex\xe9cute 100 fois :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For(vCounter;100;1;-1)\n  //Faire quelque chose\n End for\n")),(0,a.kt)("ol",l({},{start:6}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet de traiter tous les \xe9l\xe9ments du tableau anArray :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;Size of array(anArray);1;-1)\n  //Do something with the element\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("ol",l({},{start:7}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet d'examiner chaque caract\xe8re du texte vtSomeText :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlChar;Length(vtSomeText);1;-1)\n  //Do something with the character if it is a TAB\n    If(Character code(vtSomeText[[$vlChar]])=Tab)\n  //...\n    End if\n End for\n")),(0,a.kt)("ol",l({},{start:8}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet de traiter tous les enregistrements de la s\xe9lection de la table ","[aTable]"," :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," LAST RECORD([aTable])\n For($vlRecord;Records in selection([aTable]);1;-1)\n  //Do something with the record\n    SEND RECORD([aTable])\n  //...\n  //Go to the previous record\n    PREVIOUS RECORD([aTable])\n End for\n")),(0,a.kt)("h4",l({},{id:"incrementer-la-variable-compteur-de-plus-de-1"}),"Incrementer la variable compteur de plus de 1"),(0,a.kt)("p",null,"If you need to, you can use an ",(0,a.kt)("em",{parentName:"p"},"Increment_Expression")," (positive or negative) whose absolute value is greater than one."),(0,a.kt)("ol",l({},{start:9}),(0,a.kt)("li",{parentName:"ol"},"La boucle suivante ne traite que les \xe9l\xe9ments pairs du tableau anArray :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;2;Size of array(anArray);2)\n  //Do something with the element #2,#4...#2n\n    anArray{$vlElem}:=...\n End for\n")),(0,a.kt)("h4",l({},{id:"optimiser-lex\xe9cution-de-forend-for"}),"Optimiser l'ex\xe9cution de For...End for"),(0,a.kt)("p",null,"Vous pouvez utiliser comme compteurs des variables r\xe9elles et enti\xe8res, interprocess, process et locales. Pour des boucles longues, et particuli\xe8rement en mode compil\xe9, nous vous conseillons d'employer des variables locales de type Entier long."),(0,a.kt)("ol",l({},{start:10}),(0,a.kt)("li",{parentName:"ol"},"Voici un exemple :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," var $vlCounter : Integer //use local Integer variables\n For($vlCounter;1;10000)\n  //Faire quelque chose\n End for\n")),(0,a.kt)("h3",l({},{id:"comparaison-des-structures-r\xe9p\xe9titives"}),"Comparaison des structures r\xe9p\xe9titives"),(0,a.kt)("p",null,"Let's go back to the first ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," example. La boucle suivante s'ex\xe9cute 100 fois :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For(vCounter;1;100)\n  //Faire quelque chose\n End for\n")),(0,a.kt)("p",null,"It is interesting to see how the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop would perform the same action. Here is the equivalent ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," $i:=1 //Initialize the counter\n While($i<=100) //Loop 100 times\n  //Do something\n    $i:=$i+1 //Need to increment the counter\n End while\n")),(0,a.kt)("p",null,"Here is the equivalent ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," $i :=1 // Initialisation du compteur\n Repeat\n  // Faire quelque chose\n    $i :=$i +1 // Il faut incr\xe9menter le compteur\nUntil($i=100) // Boucle 100 fois\n")),(0,a.kt)("admonition",l({},{type:"tip"}),(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop is usually faster than the ",(0,a.kt)("inlineCode",{parentName:"p"},"While...End while")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Repeat...Until")," loops, because 4D tests the condition internally for each cycle of the loop and increments the counter. Therefore, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loop whenever possible.")),(0,a.kt)("h3",l({},{id:"structures-forend-for-embo\xeet\xe9es"}),"Structures For...End for embo\xeet\xe9es"),(0,a.kt)("p",null,"Vous pouvez embo\xeeter autant de structures r\xe9p\xe9titives que vous voulez (dans les limites du raisonnable). This includes nesting ",(0,a.kt)("inlineCode",{parentName:"p"},"For...End for")," loops. Il y a dans ce cas une erreur courante \xe0 \xe9viter : assurez-vous d'utiliser une variable compteur diff\xe9rente par structure de boucle."),(0,a.kt)("p",null,"Voici deux exemples :"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant permet de traiter tous les \xe9l\xe9ments d'un tableau \xe0 deux dimensions :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For($vlElem;1;Size of array(anArray))\n  //...\n  //Do something with the row\n  //...\n    For($vlSubElem;1;Size of array(anArray{$vlElem}))\n  //Do something with the element\n       anArray{$vlElem}{$vlSubElem}:=...\n    End for\n End for\n")),(0,a.kt)("ol",l({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"L'exemple suivant construit un tableau de pointeurs vers tous les champs de type Date pr\xe9sents dans la base :")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," ARRAY POINTER($apDateFields;0)\n $vlElem:=0\n For($vlTable;1;Get last table number)\n    If(Is table number valid($vlTable))\n       For($vlField;1;Get last field number($vlTable))\n          If(Is field number valid($vlTable;$vlField))\n             $vpField:=Field($vlTable;$vlField)\n             If(Type($vpField->)=Is date)\n                $vlElem:=$vlElem+1\n                INSERT IN ARRAY($apDateFields;$vlElem)\n                $apDateFields{$vlElem}:=$vpField\n             End if\n          End if\n       End for\n    End if\n End for\n")),(0,a.kt)("h2",l({},{id:"for-eachend-for-each"}),"For each...End for each"),(0,a.kt)("p",null,"The formal syntax of the ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," control flow structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For each(Current_Item;Expression{;begin{;end}}){Until|While}(Boolean_Expression)}\n    statement(s)\n    {break}  \n    {continue}\n End for each\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," structure iterates a specified ",(0,a.kt)("em",{parentName:"p"},"Current_item")," over all values of the ",(0,a.kt)("em",{parentName:"p"},"Expression"),". The ",(0,a.kt)("em",{parentName:"p"},"Current_item")," type depends on the ",(0,a.kt)("em",{parentName:"p"},"Expression")," type. The ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," loop can iterate through three ",(0,a.kt)("em",{parentName:"p"},"Expression")," types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"collections : boucle sur chaque \xe9l\xe9ment de la collection,"),(0,a.kt)("li",{parentName:"ul"},"entity selections : boucle sur chaque entity,"),(0,a.kt)("li",{parentName:"ul"},"objets : boucle sur chaque propri\xe9t\xe9 d'objet.")),(0,a.kt)("p",null,"The following table compares the three types of ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null})),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Boucle sur collections"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Boucle sur entity selections"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Boucle sur objets"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Type El\xe9ment_courant"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Variable du m\xeame type que les \xe9l\xe9ments de la collection"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Entity"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Variable texte")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Types d\u2019expressions"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Collection (avec des \xe9l\xe9ments du m\xeame type)"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Entity selection"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Object")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Nombre de boucles (par d\xe9faut)"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Nombre d'\xe9l\xe9ments de la collection"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Nombre d'entit\xe9s dans la s\xe9lection"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Nombre de propri\xe9t\xe9s d'objets")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Prise en charge de Param\xe8tres d\xe9but / fin"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Oui"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Oui"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Non")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Le nombre de boucles est \xe9valu\xe9 au d\xe9marrage et ne changera pas en cours de traitement. L'ajout ou la suppression d'\xe9l\xe9ments pendant la boucle est donc d\xe9conseill\xe9 car il pourra en r\xe9sulter une redondance ou un manque d'it\xe9rations."),(0,a.kt)("li",{parentName:"ul"},"By default, the enclosed ",(0,a.kt)("em",{parentName:"li"},"statement(s)")," are executed for each value in ",(0,a.kt)("em",{parentName:"li"},"Expression"),". It is, however, possible to exit the loop by testing a condition either at the begining of the loop (",(0,a.kt)("inlineCode",{parentName:"li"},"While"),") or at the end of the loop (",(0,a.kt)("inlineCode",{parentName:"li"},"Until"),")."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"begin")," and ",(0,a.kt)("em",{parentName:"li"},"end")," optional parameters can be used with collections and entity selections to define boundaries for the loop."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"For each...End for each")," loop can be used on a ",(0,a.kt)("strong",{parentName:"li"},"shared collection")," or a ",(0,a.kt)("strong",{parentName:"li"},"shared object"),". If your code needs to modify one or more element(s) of the collection or object properties, you need to use the ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," keywords. Depending on your needs, you can call the ",(0,a.kt)("inlineCode",{parentName:"li"},"Use...End use")," keywords:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"avant de saisir la boucle, si les \xe9l\xe9ments doivent \xeatre modifi\xe9s ensemble pour des raisons d'int\xe9grit\xe9, ou bien"),(0,a.kt)("li",{parentName:"ul"},"dans la boucle, lorsque quelques \xe9l\xe9ments/propri\xe9t\xe9s seulement doivent \xeatre modifi\xe9s et qu'aucune gestion de l'int\xe9grit\xe9 n'est requise.")))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements are ",(0,a.kt)("a",l({parentName:"p"},{href:"#break-and-continue"}),"described below"),"."),(0,a.kt)("h3",l({},{id:"boucle-sur-collections"}),"Boucle sur collections"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the ",(0,a.kt)("em",{parentName:"p"},"Collection")," type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is a variable of the same type as the collection elements. Par d\xe9faut, le nombre de boucles est bas\xe9 sur le nombre d'\xe9l\xe9ments de la collection."),(0,a.kt)("p",null,"The collection must contain only elements of the same type, otherwise an error will be returned as soon as the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," variable is assigned the first mismatched value type."),(0,a.kt)("p",null,"At each loop iteration, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," variable is automatically filled with the matching element of the collection. Vous devez tenir compte des points suivants :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable is of the object type or collection type (i.e. if ",(0,a.kt)("em",{parentName:"li"},"Expression")," is a collection of objects or of collections), modifying this variable will automatically modify the matching element of the collection (because objects and collections share the same references). If any collection item is not of the same type as the variable, an error is generated and the loop stops."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable must be of the same type as the collection elements. Si un seul \xe9l\xe9ment de la collection n'est pas du m\xeame type que la variable, une erreur est g\xe9n\xe9r\xe9e et la boucle s'arr\xeate."),(0,a.kt)("li",{parentName:"ul"},"If the collection contains elements with a ",(0,a.kt)("strong",{parentName:"li"},"Null")," value, an error will be generated if the ",(0,a.kt)("em",{parentName:"li"},"Current_Item")," variable type does not support ",(0,a.kt)("strong",{parentName:"li"},"Null")," values (such as longint variables).")),(0,a.kt)("h4",l({},{id:"exemple-4"}),"Exemple"),(0,a.kt)("p",null,"Vous souhaitez calculer quelques statistiques sur une collection de nombres :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," var $nums : Collection\n $nums:=New collection(10;5001;6665;33;1;42;7850)\n var $item;$vEven;$vOdd;$vUnder;$vOver : Integer\n For each($item;$nums)\n    If($item%2=0)\n       $vEven:=$vEven+1\n    Else\n       $vOdd:=$vOdd+1\n    End if\n    Case of\n       :($item<5000)\n          $vUnder:=$vUnder+1\n       :($item>6000)\n          $vOver:=$vOver+1\n    End case\n End for each\n  //$vEven=3, $vOdd=4\n  //$vUnder=4,$vOver=2\n")),(0,a.kt)("h3",l({},{id:"boucle-sur-entity-selections"}),"Boucle sur entity selections"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the ",(0,a.kt)("em",{parentName:"p"},"Entity selection")," type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is the entity that is currently processed."),(0,a.kt)("p",null,"Le nombre de boucles est bas\xe9 sur le nombre d'entities pr\xe9sentes dans l'entity selection. On each loop iteration, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is automatically filled with the entity of the entity selection that is currently processed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," If the entity selection contains an entity that was removed meanwhile by another process, it is automatically skipped during the loop."),(0,a.kt)("p",null,"Keep in mind that any modifications applied on the current entity must be saved explicitly using ",(0,a.kt)("inlineCode",{parentName:"p"},"entity.save()"),"."),(0,a.kt)("h4",l({},{id:"exemple-5"}),"Exemple"),(0,a.kt)("p",null,"Vous souhaitez augmenter le salaire de tous les employ\xe9s britanniques dans une entity selection :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," var emp : Object\n For each(emp;ds.Employees.query(\"country='UK'\"))\n    emp.salary:=emp.salary*1,03\n    emp.save()\n End for each\n")),(0,a.kt)("h3",l({},{id:"boucles-sur-des-propri\xe9t\xe9s-dobjets"}),"Boucles sur des propri\xe9t\xe9s d'objets"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," is used with an ",(0,a.kt)("em",{parentName:"p"},"Expression")," of the Object type, the ",(0,a.kt)("em",{parentName:"p"},"Current_Item")," parameter is a text variable automatically filled with the name of the currently processed property."),(0,a.kt)("p",null,"Les propri\xe9t\xe9s de l'objet sont it\xe9r\xe9es en fonction de leur ordre de cr\xe9ation. Pendant la boucle, il est possible d'ajouter ou de supprimer des propri\xe9t\xe9s dans l'objet, sans pour autant modifier le nombre de boucles qui reste bas\xe9 sur le nombre de propri\xe9t\xe9s initial de l'objet."),(0,a.kt)("h4",l({},{id:"exemple-6"}),"Exemple"),(0,a.kt)("p",null,"Vous souhaitez passer en majuscules les propri\xe9t\xe9s contenant des noms dans l'objet suivant :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'{\n    "firstname": "gregory",\n    "lastname": "badikora",\n    "age": 20\n}\n')),(0,a.kt)("p",null,"Vous pouvez \xe9crire :"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," For each($property;$vObject)\n    If(Value type($vObject[$property])=Is text)\n       $vObject[$property]:=Uppercase($vObject[$property])\n    End if\n End for each\n")),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{}),'{\n    "firstname": "GREGORY",\n    "lastname": "BADIKORA",\n    "age": 20\n}\n')),(0,a.kt)("h3",l({},{id:"param\xe8tres-d\xe9but--fin"}),"Param\xe8tres d\xe9but / fin"),(0,a.kt)("p",null,"Vous pouvez d\xe9finir des bornes pour l'it\xe9ration \xe0 l'aide des param\xe8tres optionnels d\xe9but et fin."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("em",{parentName:"p"},"begin")," and ",(0,a.kt)("em",{parentName:"p"},"end")," parameters can only be used in iterations through collections and entity selections (they are ignored on object properties)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the ",(0,a.kt)("em",{parentName:"li"},"begin")," parameter, pass the element position in ",(0,a.kt)("em",{parentName:"li"},"Expression")," at which to start the iteration (",(0,a.kt)("em",{parentName:"li"},"begin")," is included)."),(0,a.kt)("li",{parentName:"ul"},"In the ",(0,a.kt)("em",{parentName:"li"},"end")," parameter, you can also pass the element position in ",(0,a.kt)("em",{parentName:"li"},"Expression")," at which to stop the iteration (",(0,a.kt)("em",{parentName:"li"},"end")," is excluded).")),(0,a.kt)("p",null,"If ",(0,a.kt)("em",{parentName:"p"},"end")," is omitted or if ",(0,a.kt)("em",{parentName:"p"},"end")," is greater than the number of elements in ",(0,a.kt)("em",{parentName:"p"},"Expression"),", elements are iterated from ",(0,a.kt)("em",{parentName:"p"},"begin")," until the last one (included).\nIf the ",(0,a.kt)("em",{parentName:"p"},"begin")," and ",(0,a.kt)("em",{parentName:"p"},"end")," parameters are positive values, they represent actual positions of elements in ",(0,a.kt)("em",{parentName:"p"},"Expression"),".\nIf ",(0,a.kt)("em",{parentName:"p"},"begin")," is a negative value, it is recalculed as ",(0,a.kt)("inlineCode",{parentName:"p"},"begin:=begin+Expression size")," (it is considered as the offset from the end of ",(0,a.kt)("em",{parentName:"p"},"Expression"),"). If the calculated value is negative, ",(0,a.kt)("em",{parentName:"p"},"begin")," is set to 0.\n",(0,a.kt)("strong",{parentName:"p"},"Note:")," Even if begin is negative, the iteration is still performed in the standard order.\nIf ",(0,a.kt)("em",{parentName:"p"},"end")," is a negative value, it is recalculed as ",(0,a.kt)("inlineCode",{parentName:"p"},"end:=end+Expression size")),(0,a.kt)("p",null,"Par exemple :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"une collection contient 10 \xe9l\xe9ments (num\xe9rot\xe9s de 0 \xe0 9)"),(0,a.kt)("li",{parentName:"ul"},"d\xe9but=-4 -> d\xe9but=-4+10=6 -> l'it\xe9ration d\xe9marre au 6e \xe9l\xe9ment (num\xe9ro 5)"),(0,a.kt)("li",{parentName:"ul"},"fin=-2 -> fin=-2+10=8 -> l'it\xe9ration stoppe avant le 8e \xe9l\xe9ment (num\xe9ro 7), i.e. apr\xe8s le 7e \xe9l\xe9ment.")),(0,a.kt)("h4",l({},{id:"exemple-7"}),"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),' var $col;$col2 : Collection\n $col:=New collection("a";"b";"c";"d";"e")\n $col2:=New collection(1;2;3)\n var $item : Text\n For each($item;$col;0;3)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c"]\n For each($item;$col;-2;-1)\n    $col2.push($item)\n End for each\n  //$col2=[1,2,3,"a","b","c","d"]\n')),(0,a.kt)("h3",l({},{id:"conditions-until-et-while"}),"Conditions Until et While"),(0,a.kt)("p",null,"You can control the ",(0,a.kt)("inlineCode",{parentName:"p"},"For each...End for each")," execution by adding an ",(0,a.kt)("inlineCode",{parentName:"p"},"Until")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"While")," condition to the loop. When an ",(0,a.kt)("inlineCode",{parentName:"p"},"Until(condition)")," statement is associated to the loop, the iteration will stop as soon as the condition is evaluated to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),", whereas when is case of a ",(0,a.kt)("inlineCode",{parentName:"p"},"While(condition)")," statement, the iteration will stop when the condition is first evaluated to ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"Vous pouvez passer un mot-cl\xe9 ou l'autre en fonction de vos besoins :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Until")," condition is tested at the end of each iteration, so if the ",(0,a.kt)("em",{parentName:"li"},"Expression")," is not empty or null, the loop will be executed at least once."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"While")," condition is tested at the beginning of each iteration, so according to the condition result, the loop may not be executed at all.")),(0,a.kt)("h4",l({},{id:"exemple-8"}),"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"})," $colNum:=New collection(1;2;3;4;5;6;7;8;9;10)\n \n $total:=0\n For each($num;$colNum)While($total<30) //tested at the beginning\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 36 (1+2+3+4+5+6+7+8)\n \n $total:=1000\n For each($num;$colNum)Until($total>30) //tested at the end\n    $total:=$total+$num\n End for each\n ALERT(String($total)) //$total = 1001 (1000+1)\n")),(0,a.kt)("h2",l({},{id:"break-et-continue"}),"break et continue"),(0,a.kt)("p",null,"All looping structures above support both ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statements. Ces instructions vous donnent plus de contr\xf4le sur les boucles en vous permettant de sortir de la boucle et de contourner, \xe0 tout moment, l'it\xe9ration en cours."),(0,a.kt)("h3",l({},{id:"break"}),"break"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement terminates the loop containing it. Le contr\xf4le du programme passe \xe0 l'instruction situ\xe9e imm\xe9diatement apr\xe8s le corps de la boucle."),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement is inside a ",(0,a.kt)("a",l({parentName:"p"},{href:"#nested-forend-for-looping-structures"}),"nested loop")," (loop inside another loop), the ",(0,a.kt)("inlineCode",{parentName:"p"},"break")," statement will terminate the innermost loop."),(0,a.kt)("h4",l({},{id:"exemple-9"}),"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'For (vCounter;1;100)\n    If ($tab{vCounter}="") //if a condition becomes true\n        break //end of the for loop\n    End if\nEnd for\n')),(0,a.kt)("h3",l({},{id:"continue"}),"continue"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," statement terminates execution of the statements in the current iteration of the current loop, and continues execution of the loop with the next iteration."),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'var $text : Text\nFor ($i; 0; 9)\n    If ($i=3)\n        continue //go directly to the next iteration\n    End if\n    $text:=$text+String($i)\nEnd for\n// $text="012456789" \n\n')),(0,a.kt)("h2",l({},{id:"return-expression"}),"return {expression}"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Historique"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Release"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Modifications"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"19 R4"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Ajout"))))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement can be called from anywhere. When a ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement is used in a function or method, the execution of the function or method is stopped. Le code restant n'est pas ex\xe9cut\xe9 et le contr\xf4le est renvoy\xe9 \xe0 l'appelant."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," statement can be used to ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/fr/Concepts/parameters#return-expression"}),"return a value")," to the caller."),(0,a.kt)("h4",l({},{id:"exemple-10"}),"Exemple"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'var $message : Text\nvar $i : Integer\n\nWhile (True) //infinite loop\n    $i:=$i+1\n    $message+=String($i)+"A\\r"  // until 5\n    logConsole($message)\n    If ($i=5)\n        return //stops the loop\n    End if \n    $message+=String($i)+"B\\r"  // until 4\n    logConsole($message)\nEnd while \n$message+=String($i)+"C\\r"  //never executed \nlogConsole($message)\n\n// 1A\n// 1B\n// 2A\n// 2B\n// 3A\n// 3B\n// 4A\n// 4B\n// 5A\n\n')))}d.isMDXComponent=!0}}]);