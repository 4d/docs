"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[59356],{603905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=i(a),c=r,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||s;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var i=2;i<s;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},40768:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});a(667294);var n=a(603905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const l={id:"parameters",title:"Param\xe8tres"},o=void 0,p={unversionedId:"Concepts/parameters",id:"version-20-R2/Concepts/parameters",title:"Param\xe8tres",description:"Vous aurez souvent besoin de fournir des valeurs \xe0 vos m\xe9thodes et fonctions. Vous pouvez facilement effectuer cette op\xe9ration gr\xe2ce aux param\xe8tres.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-20-R2/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/fr/20-R2/Concepts/parameters",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(20-R2)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R2",frontMatter:{id:"parameters",title:"Param\xe8tres"},sidebar:"docs",previous:{title:"Methods",permalink:"/docs/fr/20-R2/Concepts/methods"},next:{title:"Objets et collections partag\xe9s",permalink:"/docs/fr/20-R2/Concepts/shared"}},i={},u=[{value:"Vue d\u2019ensemble",id:"vue-densemble",level:2},{value:"D\xe9claration des param\xe8tres",id:"d\xe9claration-des-param\xe8tres",level:2},{value:"Valeur retourn\xe9e",id:"valeur-retourn\xe9e",level:3},{value:"Type de donn\xe9es pris en charge",id:"type-de-donn\xe9es-pris-en-charge",level:3},{value:"Initialisation",id:"initialisation",level:3},{value:"<code>return {expression}</code>",id:"return-expression",level:2},{value:"Indirections sur les param\xe8tres (${N})",id:"indirections-sur-les-param\xe8tres-n",level:2},{value:"Utilisation des param\xe8tres g\xe9n\xe9riques",id:"utilisation-des-param\xe8tres-g\xe9n\xe9riques",level:3},{value:"D\xe9claration des param\xe8tres g\xe9n\xe9riques",id:"d\xe9claration-des-param\xe8tres-g\xe9n\xe9riques",level:3},{value:"M\xe9thode <code>Compiler</code>",id:"m\xe9thode-compiler",level:2},{value:"Type de param\xe8tre erron\xe9",id:"type-de-param\xe8tre-erron\xe9",level:2},{value:"Utilisation des propri\xe9t\xe9s d&#39;objet comme param\xe8tres nomm\xe9s",id:"utilisation-des-propri\xe9t\xe9s-dobjet-comme-param\xe8tres-nomm\xe9s",level:2},{value:"Param\xe8tres optionnels",id:"param\xe8tres-optionnels",level:2},{value:"Valeurs ou r\xe9f\xe9rences",id:"valeurs-ou-r\xe9f\xe9rences",level:2},{value:"Cas particuliers : objets et collections",id:"cas-particuliers--objets-et-collections",level:3}],m={toc:u};function d(e){var{components:t}=e,a=s(e,["components"]);return(0,n.kt)("wrapper",r({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Vous aurez souvent besoin de fournir des valeurs \xe0 vos m\xe9thodes et fonctions. Vous pouvez facilement effectuer cette op\xe9ration gr\xe2ce aux param\xe8tres."),(0,n.kt)("h2",r({},{id:"vue-densemble"}),"Vue d\u2019ensemble"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Les param\xe8tres")," (ou ",(0,n.kt)("strong",{parentName:"p"},"arguments"),") sont des donn\xe9es dont une m\xe9thode ou une fonction de classe a besoin pour s\u2019ex\xe9cuter. Le terme ",(0,n.kt)("em",{parentName:"p"},"param\xe8tres")," ou ",(0,n.kt)("em",{parentName:"p"},"arguments")," est utilis\xe9 indiff\xe9remment dans ce manuel. Des param\xe8tres sont \xe9galement pass\xe9s aux commandes int\xe9gr\xe9es de 4D. Dans l\u2019exemple ci-dessous, la cha\xeene \u201cBonjour\u201d est un param\xe8tre de la commande ",(0,n.kt)("inlineCode",{parentName:"p"},"ALERT")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Bonjour")\n')),(0,n.kt)("p",null,"Les param\xe8tres sont pass\xe9s de la m\xeame mani\xe8re aux m\xe9thodes ou aux fonctions de classe (class functions). Par exemple, si une fonction de classe nomm\xe9e ",(0,n.kt)("inlineCode",{parentName:"p"},"getArea()")," accepte deux param\xe8tres, voil\xe0 \xe0 quoi pourrait ressembler un appel \xe0 la fonction de classe :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$area:=$o.getArea(50;100)\n")),(0,n.kt)("p",null,"Ou si une m\xe9thode projet ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE")," accepte trois param\xe8tres, l'appel \xe0 cette m\xe9thode pourrait \xeatre de la forme suivante :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"FAIRE QUELQUE CHOSE($AvecCeci;$EtCela;$CommeCeci)\n")),(0,n.kt)("p",null,"Les param\xe8tres d'entr\xe9e sont s\xe9par\xe9s par des points-virgules (;)."),(0,n.kt)("p",null,"Les m\xeames principes s'appliquent lorsque des m\xe9thodes sont ex\xe9cut\xe9es via des commandes d\xe9di\xe9es, comme par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/20!)  \n//passez la date du !05/05/20! comme param\xe8tre de SetCalendarDate  \n// dans le contexte d\'un sous-formulaire\n')),(0,n.kt)("p",null,"Les donn\xe9es peuvent \xe9galement \xeatre ",(0,n.kt)("strong",{parentName:"p"},"retourn\xe9es")," \xe0 partir de m\xe9thodes et de fonctions de classe. Par exemple, la ligne d\u2019instruction suivante utilise une commande 4D, ",(0,n.kt)("inlineCode",{parentName:"p"},"Length"),", qui retourne la longueur d\u2019une cha\xeene. La valeur retourn\xe9e par ",(0,n.kt)("inlineCode",{parentName:"p"},"Longueur")," est plac\xe9e dans une variable appel\xe9e ",(0,n.kt)("em",{parentName:"p"},"MaLongueur"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'MaLongueur:=Length("Comment suis-je arriv\xe9 l\xe0 ?")\n')),(0,n.kt)("p",null,"Toute sous-routine peut retourner une valeur. Un seul param\xe8tre de sortie peut \xeatre d\xe9clar\xe9 par m\xe9thode ou fonction de classe."),(0,n.kt)("p",null,"Les valeurs d'entr\xe9e et de sortie sont ",(0,n.kt)("a",r({parentName:"p"},{href:"#values-or-references"}),"\xe9valu\xe9es")," au moment de l'appel et copi\xe9es dans ou \xe0 partir de variables locales au sein de la fonction ou de la m\xe9thode appel\xe9e. Les variables de param\xe8tres doivent \xeatre ",(0,n.kt)("a",r({parentName:"p"},{href:"#declaring-parameters"}),"d\xe9clar\xe9es")," dans le code appel\xe9."),(0,n.kt)("admonition",r({},{title:"Compatibilit\xe9",type:"info"}),(0,n.kt)("p",{parentName:"admonition"},"Dans la documentation de 4D, vous pouvez voir des exemples o\xf9 les param\xe8tres sont automatiquement copi\xe9s dans des variables locales num\xe9rot\xe9es s\xe9quentiellement ($0, $1, etc.) et d\xe9clar\xe9es \xe0 l'aide de directives de compilation. Ex : ",(0,n.kt)("inlineCode",{parentName:"p"},"C_TEXT($1;$2)"),". Cette ancienne syntaxe est toujours prise en charge mais n'est plus recommand\xe9e.")),(0,n.kt)("h2",r({},{id:"d\xe9claration-des-param\xe8tres"}),"D\xe9claration des param\xe8tres"),(0,n.kt)("p",null,"Dans les m\xe9thodes et fonctions de classe qui sont appel\xe9es, les valeurs des param\xe8tres sont assign\xe9es aux variables locales. Vous d\xe9clarez g\xe9n\xe9ralement les param\xe8tres en utilisant un ",(0,n.kt)("strong",{parentName:"p"},"nom de param\xe8tre")," et un ",(0,n.kt)("strong",{parentName:"p"},"type de param\xe8tre"),", s\xe9par\xe9s par deux points."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Pour les fonctions de classe, les param\xe8tres sont d\xe9clar\xe9s via le mot cl\xe9 ",(0,n.kt)("inlineCode",{parentName:"li"},"Function"),"."),(0,n.kt)("li",{parentName:"ul"},"Pour les m\xe9thodes (m\xe9thodes projet, m\xe9thodes objet, m\xe9thodes base et triggers), les param\xe8tres sont d\xe9clar\xe9s \xe0 l'aide du mot cl\xe9 ",(0,n.kt)("inlineCode",{parentName:"li"},"#DECLARE")," saisi au d\xe9but du code de la m\xe9thode.")),(0,n.kt)("p",null,"Exemples :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function getArea($width : Integer; $height : Integer) -> $area : Integer\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," //myProjectMethod\n#DECLARE ($i : Integer) -> $myResult : Object\n")),(0,n.kt)("p",null,"Les r\xe8gles suivantes s'appliquent :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La ligne de d\xe9claration doit \xeatre la premi\xe8re ligne de code de la m\xe9thode ou de la fonction, sinon une erreur est affich\xe9e (seuls des commentaires ou des sauts de ligne peuvent pr\xe9c\xe9der la d\xe9claration)."),(0,n.kt)("li",{parentName:"ul"},"Les noms des param\xe8tres doivent commencer par un caract\xe8re ",(0,n.kt)("inlineCode",{parentName:"li"},"$")," et \xeatre conformes aux ",(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/20-R2/Concepts/identifiers#propri%C3%A9t%C3%A9s-des-objets"}),"r\xe8gles de nommage des propri\xe9t\xe9s"),"."),(0,n.kt)("li",{parentName:"ul"},"Les param\xe8tres multiples (et leurs types) sont s\xe9par\xe9s par des points-virgules (;)."),(0,n.kt)("li",{parentName:"ul"},'Les syntaxes multilignes sont prises en charge (en utilisant le caract\xe8re "\\").')),(0,n.kt)("p",null,"Par exemple, lorsque vous appelez une fonction ",(0,n.kt)("inlineCode",{parentName:"p"},"getArea()")," avec deux param\xe8tres :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$area:=$o.getArea(50;100)\n")),(0,n.kt)("p",null,"Dans le code de la fonction de classe, la valeur de chaque param\xe8tre est copi\xe9e dans le param\xe8tre d\xe9clar\xe9 correspondant :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// Class: Polygon\nFunction getArea($width : Integer; $height : Integer)-> $area : Integer\n    $area:=$width*$height\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Si le type n'est pas d\xe9fini, le param\xe8tre sera d\xe9fini comme ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/variant"}),(0,n.kt)("inlineCode",{parentName:"a"},"Variant")),".")),(0,n.kt)("p",null,"Tous les types de m\xe9thodes 4D prennent en charge le mot-cl\xe9 ",(0,n.kt)("inlineCode",{parentName:"p"},"#DECLARE"),", y compris les m\xe9thodes base. Par exemple, dans la m\xe9thode base ",(0,n.kt)("inlineCode",{parentName:"p"},"On Web Authentication"),", vous pouvez d\xe9clarer des param\xe8tres nomm\xe9s :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    // m\xe9thode base On Web Authentication\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text) \\\n  -> $RequestAccepted : Boolean\n$entitySelection:=ds.User.query("login=:1"; $user)\n// v\xe9rifier le hash du mot de passe...\n')),(0,n.kt)("h3",r({},{id:"valeur-retourn\xe9e"}),"Valeur retourn\xe9e"),(0,n.kt)("p",null,"Vous d\xe9clarez le param\xe8tre de retour d'une fonction en ajoutant une fl\xe8che (->) et la d\xe9finition du param\xe8tre apr\xe8s la liste des param\xe8tres d'entr\xe9e. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer) -> $result : Integer\n")),(0,n.kt)("p",null,"Vous pouvez \xe9galement d\xe9clarer le param\xe8tre de retour en ajoutant uniquement ",(0,n.kt)("inlineCode",{parentName:"p"},": type"),", auquel cas il peut \xeatre trait\xe9 par un ",(0,n.kt)("a",r({parentName:"p"},{href:"#return-expression"}),"return"),". Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer): Integer\n    return $x+$y\n")),(0,n.kt)("h3",r({},{id:"type-de-donn\xe9es-pris-en-charge"}),"Type de donn\xe9es pris en charge"),(0,n.kt)("p",null,"Avec les param\xe8tres nomm\xe9s, vous pouvez utiliser les m\xeames types de donn\xe9es que ceux qui sont ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/variables#utilisation-du-mot-cl%C3%A9-var"}),"pris en charge par le mot-cl\xe9 ",(0,n.kt)("inlineCode",{parentName:"a"},"var")),", y compris les objets des classes. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function saveToFile($entity : cs.ShapesEntity; $file : 4D.File)\n")),(0,n.kt)("admonition",r({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Les expressions tables ou arrays (tableaux) peuvent \xeatre pass\xe9es uniquement ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/pointer#pointers-as-parameters-to-methods"}),"par r\xe9f\xe9rence en utilisant un pointeur"),".")),(0,n.kt)("h3",r({},{id:"initialisation"}),"Initialisation"),(0,n.kt)("p",null,"Lorsque les param\xe8tres sont d\xe9clar\xe9s, ils sont initialis\xe9s \xe0 la ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/data-types#valeurs-par-defaut"}),(0,n.kt)("strong",{parentName:"a"},"valeur par d\xe9faut correspondant \xe0 leur type")),", qu'ils conserveront pendant la session tant que l'on ne leur aura pas affect\xe9 une valeur."),(0,n.kt)("h2",r({},{id:"return-expression"}),(0,n.kt)("inlineCode",{parentName:"h2"},"return {expression}")),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Version"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"v19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"L'instruction ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," met fin \xe0 l'ex\xe9cution d'une fonction ou d'une m\xe9thode et peut \xeatre utilis\xe9e pour retourner une expression \xe0 l'appelant."),(0,n.kt)("p",null,"Par exemple, la fonction suivante retourne le carr\xe9 de son argument, $x, o\xf9 $x est un nombre."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function square($x : Integer) \n   return $x * $x\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"En interne, ",(0,n.kt)("inlineCode",{parentName:"p"},"return x")," ex\xe9cute ",(0,n.kt)("inlineCode",{parentName:"p"},"$0:=x")," ou (si elle est d\xe9clar\xe9e) ",(0,n.kt)("inlineCode",{parentName:"p"},"myReturnValue:=x"),", et retourne \xe0 l'appelant. Si ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," est utilis\xe9 sans expression, la fonction ou la m\xe9thode retourne une valeur nulle du type de retour d\xe9clar\xe9 (le cas \xe9ch\xe9ant), sinon elle est ",(0,n.kt)("em",{parentName:"p"},"ind\xe9finie"),".")),(0,n.kt)("p",null,"L'instruction ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," peut \xeatre utilis\xe9e avec la syntaxe standard pour les ",(0,n.kt)("a",r({parentName:"p"},{href:"#returned-value"}),"valeurs retourn\xe9es")," (la valeur retourn\xe9e doit \xeatre du type d\xe9clar\xe9). Cependant, notez qu'elle met imm\xe9diatement fin \xe0 l'ex\xe9cution du code. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function getValue\n    $0:=10\n    return 20\n    // retourne 20\n\nFunction getValue -> $v : Integer\n    return 10\n    $v:=20 // jamais ex\xe9cut\xe9e\n    // retourne 10\n")),(0,n.kt)("h2",r({},{id:"indirections-sur-les-param\xe8tres-n"}),"Indirections sur les param\xe8tres (${N})"),(0,n.kt)("p",null,"Les m\xe9thodes projets 4D acceptent un nombre variable de param\xe8tres. Vous pouvez adresser ces param\xe8tres avec une boucle ",(0,n.kt)("inlineCode",{parentName:"p"},"For...End for"),", la commande ",(0,n.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4dv19/help/command/en/page259.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Count parameters"))," et ",(0,n.kt)("strong",{parentName:"p"},"la syntaxe d'indirection des param\xe8tres"),". Au sein de la m\xe9thode, une adresse d'indirection est format\xe9e ",(0,n.kt)("inlineCode",{parentName:"p"},"${N}"),", o\xf9 ",(0,n.kt)("inlineCode",{parentName:"p"},"N")," est une expression num\xe9rique. On qualifie ",(0,n.kt)("inlineCode",{parentName:"p"},"${N}")," de ",(0,n.kt)("strong",{parentName:"p"},"param\xe8tre g\xe9n\xe9rique"),"."),(0,n.kt)("h3",r({},{id:"utilisation-des-param\xe8tres-g\xe9n\xe9riques"}),"Utilisation des param\xe8tres g\xe9n\xe9riques"),(0,n.kt)("p",null,"Par un exemple, consid\xe9rons une m\xe9thode qui calcule une somme de valeurs retourn\xe9e suivant un format pass\xe9 comme param\xe8tre. A chaque appel \xe0 cette m\xe9thode, le nombre de valeurs \xe0 additionner peut varier. Il faudra donc passer comme param\xe8tre \xe0 notre m\xe9thode les valeurs, en nombre variable, et le format, exprim\xe9 sous forme d\u2019une cha\xeene de caract\xe8res."),(0,n.kt)("p",null,"Voici la m\xe9thode nomm\xe9e ",(0,n.kt)("inlineCode",{parentName:"p"},"MySum")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," #DECLARE($format : Text) -> $result : Text\n $sum:=0\n For($i;2;Count parameters)\n    $sum:=$sum+${$i}\n End for\n $result:=String($sum;$format)\n")),(0,n.kt)("p",null,"Les param\xe8tres de la m\xe9thode doivent \xeatre pass\xe9s dans le bon ordre : le format d\u2019abord et ensuite les valeurs, dont le nombre peut varier :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' Result:=MySum("##0.00";125,2;33,5;24) //"182.70"\n Result:=MySum("000";1;2;200) //"203"\n')),(0,n.kt)("p",null,"Notez que m\xeame si vous avez d\xe9clar\xe9 0, 1, ou plus param\xe8tres dans la m\xe9thode, vous pouvez toujours passer le nombre de param\xe8tres que vous voulez. Tous les param\xe8tres sont accessibles dans la m\xe9thode appel\xe9e via la syntaxe ",(0,n.kt)("inlineCode",{parentName:"p"},"${N}"),", et leur type est ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/variant"}),"Variant")," par d\xe9faut (vous pouvez d\xe9clarer ces param\xe8tres \xe0 l'aide d'une ",(0,n.kt)("a",r({parentName:"p"},{href:"#d%C3%A9claration-des-param%C3%A8tres-g%C3%A9n%C3%A9riques"}),"directive de compilation"),"). Il vous suffit simplement de vous assurer que ces param\xe8tres existent, gr\xe2ce \xe0 la commande ",(0,n.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4dv19/help/command/en/page259.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Count parameters")),". Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'//foo method\n#DECLARE($p1: Text;$p2 : Text; $p3 : Date) \nFor($i;1;Count parameters)\n    ALERT("param "+String($i)+" = "+String(${$i}))\nEnd for\n')),(0,n.kt)("p",null,"Cette m\xe9thode peut \xeatre appel\xe9e :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'foo("hello";"world";!01/01/2021!;42;?12:00:00?) //des param\xe8tres suppl\xe9mentaires sont pass\xe9s\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Pour une bonne gestion de cette indirection, il est important de respecter la convention suivante : si tous les param\xe8tres ne sont pas adress\xe9s par indirection, ce qui est le cas le plus fr\xe9quent, il faut que les param\xe8tres adress\xe9s par indirection soient pass\xe9s en fin de liste.")),(0,n.kt)("h3",r({},{id:"d\xe9claration-des-param\xe8tres-g\xe9n\xe9riques"}),"D\xe9claration des param\xe8tres g\xe9n\xe9riques"),(0,n.kt)("p",null,"De m\xeame que pour les autres variables locales, la d\xe9claration du param\xe8tre g\xe9n\xe9rique par directive de compilation n\u2019est pas obligatoire. Il est n\xe9anmoins recommand\xe9 d'\xe9viter toute ambigu\xeft\xe9. Les param\xe8tres g\xe9n\xe9riques non d\xe9clar\xe9s obtiennent automatiquement le type ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/variant"}),"Variant"),"."),(0,n.kt)("p",null,"Pour d\xe9clarer des param\xe8tres g\xe9n\xe9riques, utilisez une directive du compilateur \xe0 laquelle vous passez ${N} comme param\xe8tre, o\xf9 N sp\xe9cifie le premier param\xe8tre g\xe9n\xe9rique."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_TEXT(${4})\n")),(0,n.kt)("p",null,"La commande ci-dessus signifie que tous les param\xe8tres \xe0 partir du quatri\xe8me (inclus) seront adress\xe9s par indirection. Ils seront tous de type text. Les trois premiers param\xe8tres peuvent \xeatre de n'importe quel type. En revanche, si vous utilisez $2 par indirection, le type utilis\xe9 sera le type g\xe9n\xe9rique. Il sera donc de type texte, m\xeame si pour vous, par exemple, il \xe9tait de type R\xe9el."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Le nombre, dans la d\xe9claration, doit \xeatre une constante et non une variable.")),(0,n.kt)("h2",r({},{id:"m\xe9thode-compiler"}),"M\xe9thode ",(0,n.kt)("inlineCode",{parentName:"h2"},"Compiler")),(0,n.kt)("p",null,"M\xeame si ce n'est pas obligatoire en ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/interpreted-compiled"}),"mode interpr\xe9t\xe9"),", vous devez d\xe9clarer chaque param\xe8tre dans les m\xe9thodes ou fonctions appel\xe9es d\xe8s que vous avez l'intention de compiler votre projet."),(0,n.kt)("p",null,"Lors de l'utilisation du mot-cl\xe9 ",(0,n.kt)("inlineCode",{parentName:"p"},"#DECLARE")," ou du prototype ",(0,n.kt)("inlineCode",{parentName:"p"},"Function")," , les param\xe8tres sont automatiquement d\xe9clar\xe9s. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer)-> $result : Integer\n    // tous les param\xe8tres sont d\xe9clar\xe9s avec leur type\n")),(0,n.kt)("p",null,"Cependant, une fonctionnalit\xe9 du compilateur 4D vous permet de d\xe9clarer tous vos param\xe8tres dans une m\xe9thode sp\xe9cifique \xe0 l'aide d'une syntaxe sp\xe9ciale :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"vous pouvez regrouper tous les param\xe8tres des variables locales des m\xe9thodes projet dans une ou plusieurs m\xe9thode(s) projet"),(0,n.kt)("li",{parentName:"ul"},'le nom de la ou des m\xe9thode(s) doit commencer par "',(0,n.kt)("strong",{parentName:"li"},"Compiler"),'", par exemple "Compiler_MyParameters".'),(0,n.kt)("li",{parentName:"ul"},"\xe0 l'int\xe9rieur d'une telle m\xe9thode, vous pouvez pr\xe9d\xe9clarer les param\xe8tres de chaque m\xe9thode en utilisant la syntaxe suivante : ",(0,n.kt)("inlineCode",{parentName:"li"},"C_XXX(nomM\xe9thode;param\xe8tre)"),".")),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," // Compiler_method\n C_REAL(OneMethodAmongOthers;$myParam) \n")),(0,n.kt)("admonition",r({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Cette syntaxe n'est pas ex\xe9cutable en mode interpr\xe9t\xe9.")),(0,n.kt)("p",null,"Vous pouvez cr\xe9er et remplir automatiquement une m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"Compiler")," contenant tous vos param\xe8tres en utilisant le bouton ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Project/compiler#compiler-methods-for"}),(0,n.kt)("strong",{parentName:"a"},"M\xe9thodes Compilateur pour..."))," ",(0,n.kt)("strong",{parentName:"p"},"M\xe9thodes")," dans la bo\xeete de dialogue des Propri\xe9t\xe9s du compilateur."),(0,n.kt)("p",null,'La d\xe9claration des param\xe8tres est \xe9galement obligatoire dans les contextes suivants (ces contextes ne prennent pas en charge les d\xe9clarations dans une m\xe9thode "Compiler") :'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"M\xe9thodes base - Par exemple, la m\xe9thode base ",(0,n.kt)("inlineCode",{parentName:"li"},"On Web Connection")," re\xe7oit six param\xe8tres de type Texte. Au d\xe9but de la m\xe9thode base, vous devez \xe9crire (m\xeame si tous les param\xe8tres ne sont pas utilis\xe9s) :")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// On Web Connection\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text) \\\n  -> $RequestAccepted : Boolean\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Triggers - Le param\xe8tre $0 (Entier long), qui r\xe9sulte d'un trigger, sera typ\xe9 par le compilateur si le param\xe8tre n'a pas \xe9t\xe9 explicitement d\xe9clar\xe9. N\xe9anmoins, si vous souhaitez le d\xe9clarer, vous devez le faire dans le trigger lui-m\xeame.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Objets formulaires qui acceptent l'\xe9v\xe9nement formulaire ",(0,n.kt)("inlineCode",{parentName:"p"},"Sur glisser")," - Le param\xe8tre $0 (Entier long), qui r\xe9sulte de l'\xe9v\xe9nement formulaire ",(0,n.kt)("inlineCode",{parentName:"p"},"Sur glisser")," est typ\xe9 par le compilateur si le param\xe8tre n'a pas \xe9t\xe9 explicitement d\xe9clar\xe9. N\xe9anmoins, si vous souhaitez le d\xe9clarer, vous devez le faire dans la m\xe9thode projet. ",(0,n.kt)("strong",{parentName:"p"},"Note :")," Le compilateur n'initialise pas le param\xe8tre $0. Ainsi, d\xe8s que vous utilisez l'\xe9v\xe9nement formulaire ",(0,n.kt)("inlineCode",{parentName:"p"},"Sur glisser"),", vous devez initialiser $0. Par exemple :"))),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_LONGINT($0)\n If(Form event=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n")),(0,n.kt)("h2",r({},{id:"type-de-param\xe8tre-erron\xe9"}),"Type de param\xe8tre erron\xe9"),(0,n.kt)("p",null,"L'appel d'un param\xe8tre de type incorrect est une ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/error-handling"}),"erreur")," qui emp\xeache une ex\xe9cution correcte. Par exemple, si vous \xe9crivez les m\xe9thodes suivantes :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// method1\n#DECLARE($value : Text)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// method2\nmethod1(42) //mauvais type, texte attendu\n")),(0,n.kt)("p",null,"Ce cas est trait\xe9 par 4D en fonction du contexte :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"dans les ",(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/20-R2/Concepts/interpreted-compiled"}),"projets compil\xe9s"),", une erreur est g\xe9n\xe9r\xe9e \xe0 l'\xe9tape de compilation lorsque cela est possible. Sinon, une erreur est g\xe9n\xe9r\xe9e lorsque la m\xe9thode est appel\xe9e."),(0,n.kt)("li",{parentName:"ul"},"dans les projets interpr\xe9t\xe9s :",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"si le param\xe8tre a \xe9t\xe9 d\xe9clar\xe9 en utilisant ",(0,n.kt)("a",r({parentName:"li"},{href:"#named-parameters"}),"la syntaxe nomm\xe9e")," (",(0,n.kt)("inlineCode",{parentName:"li"},"#DECLARE")," ou ",(0,n.kt)("inlineCode",{parentName:"li"},"Function"),"), une erreur est g\xe9n\xe9r\xe9e lorsque la m\xe9thode est appel\xe9e."),(0,n.kt)("li",{parentName:"ul"},"si le param\xe8tre a \xe9t\xe9 d\xe9clar\xe9 \xe0 l'aide de (",(0,n.kt)("inlineCode",{parentName:"li"},"C_XXX"),"), aucune erreur n'est g\xe9n\xe9r\xe9e, la m\xe9thode appel\xe9e re\xe7oit une valeur vide du type attendu.")))),(0,n.kt)("h2",r({},{id:"utilisation-des-propri\xe9t\xe9s-dobjet-comme-param\xe8tres-nomm\xe9s"}),"Utilisation des propri\xe9t\xe9s d'objet comme param\xe8tres nomm\xe9s"),(0,n.kt)("p",null,"L'utilisation d'objets en tant que param\xe8tres vous permet de g\xe9rer des ",(0,n.kt)("strong",{parentName:"p"},"param\xe8tres nomm\xe9s"),". Ce style de programmation est simple, souple et facile \xe0 lire."),(0,n.kt)("p",null,"Par exemple, si vous utilisez la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,n.kt)("p",null,"Dans la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge"),", vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Name+" is "+String($para.Age)+" years old.")\n')),(0,n.kt)("p",null,"C'est un moyen puissant de d\xe9finir des ",(0,n.kt)("a",r({parentName:"p"},{href:"#optional-parameters"}),"param\xe8tres optionnels")," (voir ci-dessous \xe9galement). Pour g\xe9rer les param\xe8tres manquants, vous pouvez :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"v\xe9rifier si tous les param\xe8tres attendus sont fournis en les comparant \xe0 la valeur ",(0,n.kt)("inlineCode",{parentName:"li"},"Null"),", ou"),(0,n.kt)("li",{parentName:"ul"},"pr\xe9d\xe9finir les valeurs des param\xe8tres, ou"),(0,n.kt)("li",{parentName:"ul"},"les utiliser sous forme de valeurs vides.")),(0,n.kt)("p",null,"Dans la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," ci-dessus, les propri\xe9t\xe9s Age et Nom sont obligatoires et pourraient g\xe9n\xe9rer des erreurs si elles sont manquantes. Pour \xe9viter cela, vous pouvez simplement \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,n.kt)("p",null,'Les deux param\xe8tres sont alors optionnels. S\'ils ne sont pas renseign\xe9s, le r\xe9sultat sera "a 10 ans", mais aucune erreur ne sera g\xe9n\xe9r\xe9e.'),(0,n.kt)("p",null,"Enfin, les param\xe8tres nomm\xe9s permettent de maintenir et de reproduire des applications en toutes simplicit\xe9 et s\xe9curit\xe9. Imaginez que vous r\xe9alisez, par la suite, qu'ajouter 10 ans n'est pas toujours appropri\xe9. Vous aurez besoin d'un autre param\xe8tre pour d\xe9finir le nombre d'ann\xe9es \xe0 ajouter. Vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$person:=New object("Name";"Smith";"Age";40;"toAdd";10)\nChangeAge($person)\n\n//ChangeAge\nvar $1;$para : Object\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,n.kt)("p",null,"Ici, toute la puissance r\xe9side dans le fait de ne pas avoir \xe0 changer votre code existant. Cela fonctionnera toujours dans l'ancienne version, mais le cas \xe9ch\xe9ant, vous pouvez utiliser une autre valeur que 10 ans."),(0,n.kt)("p",null,"Avec les variables nomm\xe9es, n'importe quel param\xe8tre peut \xeatre optionnel. Dans l'exemple ci-dessus, tous les param\xe8tres sont optionnels et peuvent \xeatre donn\xe9s, dans n'importe quel ordre."),(0,n.kt)("h2",r({},{id:"param\xe8tres-optionnels"}),"Param\xe8tres optionnels"),(0,n.kt)("p",null,"Dans le manuel ",(0,n.kt)("em",{parentName:"p"},"Langage de 4D"),", les caract\xe8res { } (accolades) indiquent des param\xe8tres facultatifs. Par exemple, ",(0,n.kt)("inlineCode",{parentName:"p"},"ALERT (message{; okButtonTitle})")," signifie que le param\xe8tre ",(0,n.kt)("em",{parentName:"p"},"okButtonTitle")," doit \xeatre omis lors de l'appel de la commande. Vous pouvez l'appeler comme suit :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Etes*vous s\xfbr?";"Oui, je le suis") //2 param\xe8tres\nALERT("Temps \xe9coul\xe9") //1 param\xe8tre\n')),(0,n.kt)("p",null,"Les m\xe9thodes et les fonctions 4D acceptent \xe9galement de ces param\xe8tres optionnels. Vous pouvez d\xe9clarer un nombre quelconque de param\xe8tres. Si vous appelez une m\xe9thode ou une fonction avec moins de param\xe8tres que ceux d\xe9clar\xe9s, les param\xe8tres manquants sont trait\xe9s comme des valeurs par d\xe9faut dans le code appel\xe9, ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/data-types#default-values"}),"en fonction de leur type"),". Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'// fonction "concate" de myClass\nFunction concate ($param1 : Text ; $param2 : Text)->$result : Text\n$result:=$param1+" "+$param2\n')),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  // M\xe9thode appelante\n $class:=cs.myClass.new()\n $class.concate("Hello") // "Hello "\n $class.concate() // Affiche " "\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Vous pouvez \xe9galement appeler une m\xe9thode ou une fonction avec plus de param\xe8tres que ceux d\xe9clar\xe9s. Ils seront disponibles dans le code appel\xe9 gr\xe2ce \xe0 la ",(0,n.kt)("a",r({parentName:"p"},{href:"#parameter-indirection-n"}),"syntaxe ${N}"),".")),(0,n.kt)("p",null,"A l'aide de la commande ",(0,n.kt)("inlineCode",{parentName:"p"},"Count parameters")," contenue dans la m\xe9thode appel\xe9e, vous pouvez d\xe9tecter le nombre de param\xe8tres et effectuer des op\xe9rations diff\xe9rentes en fonction de ce nombre."),(0,n.kt)("p",null,"L'exemple suivant affiche un message et peut ins\xe9rer le texte dans un document sur disque ou dans une zone 4D Write Pro :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// APPEND TEXT Project Method\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n\n #DECLARE ($message : Text; $path : Text; $wpArea : Object)\n\n ALERT($message)\n If(Count parameters>=3)\n    WP SET TEXT($wpArea;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($path;$message)\n    End if\n End if\n")),(0,n.kt)("p",null,"Une fois que cette m\xe9thode projet a \xe9t\xe9 ajout\xe9e \xe0 votre application, vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"APPEND TEXT(vtSomeText) //Affichera uniquement le message\nAPPEND TEXT(vtSomeText;$path) //Affiche le message et l'annexe au document dans $path\nAPPEND TEXT(vtSomeText;\"\";$wpArea) //Affiche le message et l'\xe9crit dans $wpArea\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Lorsque les param\xe8tres sont n\xe9cessaires dans vos m\xe9thodes, vous pouvez \xe9galement envisager des ",(0,n.kt)("a",r({parentName:"p"},{href:"#using-objects-properties-as-named-parameters"}),"propri\xe9t\xe9s d'objet comme param\xe8tres nomm\xe9s")," pour g\xe9rer plusieurs param\xe8tres de mani\xe8re flexible.")),(0,n.kt)("h2",r({},{id:"valeurs-ou-r\xe9f\xe9rences"}),"Valeurs ou r\xe9f\xe9rences"),(0,n.kt)("p",null,"Lorsque vous passez un param\xe8tre, 4D \xe9value toujours l'expression du param\xe8tre dans le contexte de la m\xe9thode appel\xe9e et d\xe9finit la",(0,n.kt)("strong",{parentName:"p"},"valeur r\xe9sultante")," sur les variables locales dans la fonction de classe ou la sous-routine. Les variables/param\xe8tres locaux ne correspondent pas aux v\xe9ritables champs, variables ou expressions pass\xe9s par la m\xe9thode appel\xe9e; ils contiennent uniquement les valeurs qui n'ont pas \xe9t\xe9 pass\xe9es. Les variables/param\xe8tres locaux ne correspondent pas aux v\xe9ritables champs, variables ou expressions pass\xe9s par la m\xe9thode appel\xe9e; ils contiennent uniquement les valeurs qui n'ont pas \xe9t\xe9 pass\xe9es. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Voici du code extrait de la m\xe9thode MY_METHOD\nDO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\nALERT([People]Name)\n\n    //Voici du code extrait de la m\xe9thode  DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n')),(0,n.kt)("p",null,"La bo\xeete de dialogue d'alerte affich\xe9e par ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE"),' contiendra "WILLIAM" et celle affich\xe9e par ',(0,n.kt)("inlineCode",{parentName:"p"},"MA METHODE"),' contiendra "william". La m\xe9thode a modifi\xe9 localement la valeur du param\xe8tre $1, mais cela n\'affecte pas la valeur du champ ',(0,n.kt)("inlineCode",{parentName:"p"},"[Personnes]Nom")," pass\xe9 en param\xe8tre par la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"MA METHODE"),"."),(0,n.kt)("p",null,"Si vous voulez r\xe9ellement que la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE")," modifie la valeur du champ, deux solutions s'offrent \xe0 vous :"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Plut\xf4t que de passer le champ \xe0 la m\xe9thode, vous lui passez un pointeur :")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //Voici du code extrait de la m\xe9thode  MY_METHOD\n DO_SOMETHING(->[People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Last Name)\n\n  //Voici du code extrait de la m\xe9thode  DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n')),(0,n.kt)("p",null,"Ici, le param\xe8tre n'est pas le champ lui-m\xeame, mais un pointeur vers le champ. Ainsi, \xe0 l'int\xe9rieur de la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE"),", $1 ne contient plus la valeur du champ mais un pointeur vers le champ. L'objet ",(0,n.kt)("strong",{parentName:"p"},"r\xe9f\xe9renc\xe9")," par $1 ($1-> dans le code ci-dessus) est le champ lui-m\xeame. Par cons\xe9quent, la modification de l'objet r\xe9f\xe9renc\xe9 d\xe9passe les limites de la sous-routine et le champ lui-m\xeame est affect\xe9. Dans cet exemple, les deux bo\xeetes de dialogue d'alerte afficheront \"WILLIAM\"."),(0,n.kt)("ol",r({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"Plut\xf4t que la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"li"},"FAIRE QUELQUE CHOSE")," \u201cfasse quelque chose\u201d, vous pouvez la r\xe9\xe9crire de mani\xe8re \xe0 ce qu'elle retourne une valeur.")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Voici du code extrait de la m\xe9thode MY METHOD\n [People]Name:=DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Name)\n\n    //Voici du code extrait de la m\xe9thode DO SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n')),(0,n.kt)("p",null,"This second technique of returning a value by a subroutine is called \u201cusing a function.\u201d This is described in the ",(0,n.kt)("a",r({parentName:"p"},{href:"#returning-values"}),"Returning values")," paragraph. Ceci est d\xe9crit dans le paragraphe ",(0,n.kt)("a",r({parentName:"p"},{href:"#returning-values"}),"Valeurs retourn\xe9es"),"."),(0,n.kt)("h3",r({},{id:"cas-particuliers--objets-et-collections"}),"Cas particuliers : objets et collections"),(0,n.kt)("p",null,"Veillez \xe0 ce que les types de donn\xe9es d'Objet et Collection ne puissent \xeatre g\xe9r\xe9s que via une r\xe9f\xe9rence (c'est-\xe0-dire un",(0,n.kt)("em",{parentName:"p"}," pointeur")," interne)."),(0,n.kt)("p",null,"Par cons\xe9quent, lorsque vous utilisez des types de donn\xe9es comme param\xe8tres, ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2 ...")," ne contiennent pas des ",(0,n.kt)("em",{parentName:"p"},"valeurs"),", mais des ",(0,n.kt)("em",{parentName:"p"},"r\xe9f\xe9rences"),". La modification de la valeur des param\xe8tres ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2 ...")," dans la sous-routine sera propag\xe9e \xe0 chaque fois que l'objet ou la collection source est utilis\xe9(e). C'est le m\xeame principe que pour ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/20-R2/Concepts/pointer#passer-des-pointeurs-aux-m%C3%A9thodes"}),"les pointeurs"),", \xe0 la diff\xe9rence que les param\xe8tres ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2...")," n'ont pas besoin d'\xeatre d\xe9r\xe9f\xe9renc\xe9s dans la sous-routine."),(0,n.kt)("p",null,"Par exemple, consid\xe9rons que la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson"),", qui cr\xe9e un objet et qui l'envoie comme param\xe8tre :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,n.kt)("p",null,"La m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," ajoute 10 \xe0 l'attribut Age de l'objet re\xe7u"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  //ChangeAge\n #DECLARE ($person : Object)\n $person.Age:=$person.Age+10\n ALERT(String($person.Age))\n")),(0,n.kt)("p",null,"Si vous ex\xe9cutez la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson"),', les deux messages d\'alerte contiendront "50" car le m\xeame objet est trait\xe9 par les deux m\xe9thodes.'),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"4D Server :")," Lorsque des param\xe8tres sont pass\xe9s entre des m\xe9thodes qui ne sont pas ex\xe9cut\xe9es sur la m\xeame machine (lors de l'utilisation de l'option Ex\xe9cuter sur serveur par exemple), il n'est pas possible d'utiliser des r\xe9f\xe9rences. Dans ce cas, ce sont des copies des param\xe8tres objet ou collection qui sont envoy\xe9es au lieu de r\xe9f\xe9rences."))}d.isMDXComponent=!0}}]);