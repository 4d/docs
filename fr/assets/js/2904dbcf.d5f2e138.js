/*! For license information please see 2904dbcf.d5f2e138.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[27405],{758269:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});var r=n(474848),a=n(28453);const i={id:"variables",title:"Variables"},l=void 0,t={id:"Concepts/variables",title:"Variables",description:"Fondamentalement, dans 4D, les donn\xe9es peuvent \xeatre stock\xe9es de deux mani\xe8res. Fields store data permanently on disk; variables store data temporarily in memory.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-20-R5/Concepts/variables.md",sourceDirName:"Concepts",slug:"/Concepts/variables",permalink:"/docs/fr/20-R5/Concepts/variables",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fvariables.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"variables",title:"Variables"},sidebar:"docs",previous:{title:"Variant",permalink:"/docs/fr/20-R5/Concepts/variant"},next:{title:"Tableaux",permalink:"/docs/fr/20-R5/Concepts/arrays"}},o={},d=[{value:"D\xe9claration des variables",id:"d\xe9claration-des-variables",level:2},{value:"Exemples",id:"exemples",level:3},{value:"Initializing Variables in the Declaration Line",id:"initializing-variables-in-the-declaration-line",level:2},{value:"Assigner des valeurs",id:"assigner-des-valeurs",level:2},{value:"Variables locales, process et interprocess",id:"variables-locales-process-et-interprocess",level:2},{value:"Variables locales",id:"variables-locales",level:3},{value:"Variables process",id:"variables-process",level:3},{value:"Variables interprocess",id:"variables-interprocess",level:3}];function c(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["Fondamentalement, dans 4D, les donn\xe9es peuvent \xeatre stock\xe9es de deux mani\xe8res. ",(0,r.jsx)(s.strong,{children:"Fields"})," store data permanently on disk; ",(0,r.jsx)(s.strong,{children:"variables"})," store data temporarily in memory."]}),"\n",(0,r.jsxs)(s.p,{children:["Lorsque vous d\xe9finissez votre base, vous indiquez \xe0 4D les noms et les types de champs que vous voulez utiliser. Variables are much the same\u2014you also give them names and different types (see ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/data-types",children:"Data types"}),")."]}),"\n",(0,r.jsx)(s.p,{children:"Une fois cr\xe9\xe9e, vous pouvez utiliser une variable partout dans votre application. Par exemple, vous pouvez stocker une variable de type texte dans un champ du m\xeame type :"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:" [MaTable]MonChamp:=MonTexte\n"})}),"\n",(0,r.jsx)(s.p,{children:"Les variables sont des objets du langage; vous pouvez cr\xe9er et utiliser des variables qui n\u2019appara\xeetront jamais \xe0 l'\xe9cran. Dans vos formulaires, vous pouvez afficher des variables \xe0 l\u2019\xe9cran (\xe0 l'exception des pointeurs et des BLOB), les utiliser pour saisir des donn\xe9es, et les imprimer dans des \xe9tats. Dans ces cas, elles se comportent exactement comme des champs, et les m\xeames contr\xf4les int\xe9gr\xe9s sont disponibles lorsque vous les cr\xe9ez . Les variables peuvent \xe9galement servir \xe0 contr\xf4ler des boutons, des list box, des zones de d\xe9filement, des boutons image, etc., ou \xe0 afficher les r\xe9sultats de calculs ne devant pas \xeatre sauvegard\xe9s."}),"\n",(0,r.jsx)(s.h2,{id:"d\xe9claration-des-variables",children:"D\xe9claration des variables"}),"\n",(0,r.jsx)(s.p,{children:"You usually create variables by declaring them. Le langage 4D propose deux mani\xe8res de d\xe9clarer des variables :"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["using the ",(0,r.jsx)(s.code,{children:"var"})," keyword (recommended specially if your code uses objects and classes, and this syntax enhances code editor suggestions and type-ahead features),"]}),"\n",(0,r.jsx)(s.li,{children:'using one of the "Compiler" or "Arrays" theme 4D language commands (legacy syntax).'}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["When variables are declared, they are initialized to the ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/data-types#default-values",children:(0,r.jsx)(s.strong,{children:"default value corresponding to their type"})}),", which they will keep during the session as long as they have not been ",(0,r.jsx)(s.a,{href:"#assigning-data",children:"assigned"}),". Alternatively, when declaring variables, you can ",(0,r.jsx)(s.a,{href:"#initializing-variables-in-the-declaration-line",children:"initialize"})," their value along with their data type all within one line."]}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsx)(s.p,{children:"Although it is not recommended, you can create variables simply by using them; you do not necessarily need to formally declare them. For example, to create a variable that will hold the current date plus 30 days, you can write:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:" MyDate:=Current date+30 //MyDate est cr\xe9\xe9 \n // 4D identifie le type date  \n // et affecte la date courante + 30 jours\n"})}),(0,r.jsx)(s.p,{children:"When a variable is created before being declared, it is not initialized at the declaration step."})]}),"\n",(0,r.jsx)(s.p,{children:"To declare a variable of any type, use the following syntax:"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"var <varName>{; <varName2>;...}{ : <varType>}"})}),"\n",(0,r.jsx)(s.p,{children:"Par exemple :"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"var $myText : Text  //une variable de type texte\nvar myDate1; myDate2 : Date  //plusieurs variables de type texte\nvar $myFile : 4D.File  //une variable objet de classe de fichier\nvar $myVar //une variable variant\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"varName"})," is the variable name, it must comply with the ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/identifiers",children:"4D rules"})," about identifiers.\nThis syntax only supports ",(0,r.jsx)(s.a,{href:"#local-process-and-interprocess-variables",children:"local and process variables"})," declarations, thus excluding ",(0,r.jsx)(s.a,{href:"#interprocess-variables",children:"interprocess variables"})," and ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/arrays",children:"arrays"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"varType"})," can be:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["a ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/data-types",children:"basic type"}),", in which case the variable contains a value of the declared type,"]}),"\n",(0,r.jsxs)(s.li,{children:["a ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/classes",children:"class reference"})," (4D class or user class), in which case the variable contains a reference to an object of the defined class."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["If ",(0,r.jsx)(s.code,{children:"varType"})," is omitted, a variable of the ",(0,r.jsx)(s.strong,{children:"variant"})," type is created."]}),"\n",(0,r.jsxs)(s.p,{children:["The following table lists all supported ",(0,r.jsx)(s.code,{children:"varType"})," values:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"varType"}),(0,r.jsx)(s.th,{children:"Contenu"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Text"})}),(0,r.jsx)(s.td,{children:"Valeur texte"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Date"})}),(0,r.jsx)(s.td,{children:"Valeur date"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Time"})}),(0,r.jsx)(s.td,{children:"Valeur Heure"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Boolean"})}),(0,r.jsx)(s.td,{children:"Valeur bool\xe9en"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Entier"})}),(0,r.jsx)(s.td,{children:"Valeur entier long"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Real"})}),(0,r.jsx)(s.td,{children:"Valeur r\xe9el"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Pointer"})}),(0,r.jsx)(s.td,{children:"Valeur pointeur"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Picture"})}),(0,r.jsx)(s.td,{children:"Valeur image"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Blob"})}),(0,r.jsx)(s.td,{children:"Valeur Blob scalaire"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Collection"})}),(0,r.jsx)(s.td,{children:"Valeur collection"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Variant"})}),(0,r.jsx)(s.td,{children:"Valeur variant"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Object"})}),(0,r.jsx)(s.td,{children:"Objet de classe par d\xe9faut (4D.Object)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"4D.<className>"})}),(0,r.jsx)(s.td,{children:"Object de la classe 4D className"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"cs.<className>"})}),(0,r.jsx)(s.td,{children:"Object de la classe utilisateur className"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"cs.<namespace><className>"})}),(0,r.jsxs)(s.td,{children:["Object de la classe className du composant ",(0,r.jsx)(s.code,{children:"<namespace>"})]})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"exemples",children:"Exemples"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Pour d\xe9clarer les variables locales et les variables process basiques :"}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"var $myText; myText; $vt : Text\nvar myVar //variant\n\nvar $o : Object    \n//\xe9quivalent \xe0 :  \nvar $o : 4D.Object\n//\xe9galement \xe9quivalent \xe0 C_OBJECT($o)\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Pour d\xe9clarer les variables objet de classe 4D :"}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"var $myFolder : 4D.Folder\nvar $myFile : 4D.File\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Pour d\xe9clarer les variables objet de classe utilisateur :"}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"var $myClass : cs.MyClass\nvar $dataclass : cs.Employee\nvar $entity : cs.EmployeeEntity\n"})}),"\n",(0,r.jsx)(s.h2,{id:"initializing-variables-in-the-declaration-line",children:"Initializing Variables in the Declaration Line"}),"\n",(0,r.jsx)(s.p,{children:"When declaring variables, you have the flexibility to specify their data type and provide an initial value in one statement. Voici quelques exemples :"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:'var $a : Text:="hello"\nvar $b : Date:=!2023-09-12!\nvar $c : Object:=New object()\nvar $d : cs.Customer:=cs.Customer.new()\n'})}),"\n",(0,r.jsx)(s.p,{children:"Variables can also be declared and initialized without explicitly mentioning their data type, in which case their type will be inferred by 4D. Voici quelques exemples :"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:'var $text:="hello"  // Inferred as Text \nvar $number:=20  // Inferred as Real \nvar $obj:={}  // Inferred as an Object \nvar $mycol:=[]  // Inferred as a Collection  \n\n'})}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsxs)(s.p,{children:["The inferred type might be different between ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/interpreted-compiled",children:"interpreted and compiled mode"})," if the evaluation of the value is too ambiguous. In this case, a warning is generated by the compiler and a variant type is used. For example, in the following $a type will be correctly inferred in interpreted mode (Text), but the syntax checking will generate a warning and $a will be typed as a variant for the compiled mode."]}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:'var $class:={test: "a"}\nvar $a:=$class.test\n\n'})})]}),"\n",(0,r.jsxs)(s.p,{children:["4D tries to deduce the most general type. For instance, it uses the Real type rather than the Integer type when a variable is initialized with an integer value (e.g., ",(0,r.jsx)(s.code,{children:"var $a:=10 //Real type is inferred"}),"). In such cases, or when initializing a variable with a complex type such as class instantiation, it is recommended to pass the type explicitly."]}),"\n",(0,r.jsx)(s.p,{children:"In most cases, all variable types are automatically determined. The exception is when you assign a value to a process or interprocess variable, which then triggers a warning message."}),"\n",(0,r.jsxs)(s.admonition,{type:"note",children:[(0,r.jsx)(s.p,{children:"Multiple assignments in one line are not supported:"}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"var $a; $b : Integer:=15 //error\n\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"assigner-des-valeurs",children:"Assigner des valeurs"}),"\n",(0,r.jsxs)(s.p,{children:["Vous pouvez donner des valeurs aux variables ou aux tableaux et/ou r\xe9cup\xe9rer leur valeur. Putting data into a variable is called ",(0,r.jsx)(s.strong,{children:"assigning the data to the variable"})," and is done with the assignment operator (:=). L\u2019op\xe9rateur d\u2019assignation est \xe9galement utilis\xe9 pour assigner des valeurs aux champs."]}),"\n",(0,r.jsx)(s.p,{children:"L\u2019op\xe9rateur d\u2019assignation est un premier moyen pour cr\xe9er une variable et lui donner une valeur. Vous placez le nom de la variable que vous voulez cr\xe9er \xe0 gauche de l\u2019op\xe9rateur. Par exemple :"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"MonNombre:=3\n"})}),"\n",(0,r.jsxs)(s.p,{children:["creates the variable ",(0,r.jsx)(s.em,{children:"MyNumber"})," and puts the number 3 into it. Si MonNombre existait d\xe9j\xe0, elle prend simplement la valeur 3."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["It is usually not recommended to create variables without ",(0,r.jsx)(s.a,{href:"#declaring-variables",children:"declaring their type"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Bien entendu, les variables ne seraient pas tr\xe8s utiles si vous ne pouviez pas r\xe9cup\xe9rer les valeurs qu\u2019elles contiennent. De nouveau, vous utilisez l\u2019op\xe9rateur d\u2019assignation. If you need to put the value of MyNumber in a field called [Products]Size, you would write ",(0,r.jsx)(s.em,{children:"MyNumber"})," on the right side of the assignment operator:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:"[Produits]Taille:=MonNombre\n"})}),"\n",(0,r.jsxs)(s.p,{children:["In this case, ",(0,r.jsx)(s.em,{children:"[Products]Size"})," would be equal to 3. Cet exemple est plut\xf4t simple, mais il illustre le moyen \xe9l\xe9mentaire dont vous disposez pour transf\xe9rer des donn\xe9es d\u2019un objet vers un autre en utilisant le langage."]}),"\n",(0,r.jsx)(s.p,{children:"Vous assignez des valeurs aux \xe9l\xe9ments du tableau \xe0 l'aide d'accolades ({...}) :"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:'atNoms{1}:="Richard"\n'})}),"\n",(0,r.jsx)(s.h2,{id:"variables-locales-process-et-interprocess",children:"Variables locales, process et interprocess"}),"\n",(0,r.jsxs)(s.p,{children:["You can create three types of variables: ",(0,r.jsx)(s.strong,{children:"local"}),", ",(0,r.jsx)(s.strong,{children:"process"}),", and ",(0,r.jsx)(s.strong,{children:"interprocess"}),". La diff\xe9rence entre ces trois types de variables est leur port\xe9e, ou les objets pour lesquels elles sont disponibles."]}),"\n",(0,r.jsx)(s.h3,{id:"variables-locales",children:"Variables locales"}),"\n",(0,r.jsx)(s.p,{children:"Une variable locale, comme son nom l\u2019indique, est locale \xe0 une m\xe9thode \u2014 c\u2019est-\xe0-dire accessible uniquement \xe0 l\u2019int\xe9rieur de la m\xe9thode dans laquelle elle a \xe9t\xe9 cr\xe9\xe9e et inaccessible \xe0 l\u2019ext\xe9rieur de cette m\xe9thode. Le fait d'\xeatre local \xe0 une m\xe9thode est formellement qualifi\xe9 de \xabport\xe9e locale\xbb. Les variables locales sont utilis\xe9es pour restreindre une variable afin qu'elle ne fonctionne que dans la m\xe9thode."}),"\n",(0,r.jsx)(s.p,{children:"Vous pouvez choisir d'utiliser une variable locale pour :"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Eviter des conflits de noms avec les autres variables"}),"\n",(0,r.jsx)(s.li,{children:"Utiliser temporairement des valeurs,"}),"\n",(0,r.jsx)(s.li,{children:"R\xe9duire le nombre de variables process"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Le nom d\u2019une variable locale commence toujours par le signe dollar ($) et peut contenir jusqu\u2019\xe0 31 autres caract\xe8res. Si vous saisissez un nom plus long, 4D le tronque pour le ramener \xe0 31 caract\xe8res."}),"\n",(0,r.jsx)(s.p,{children:"Lorsque vous d\xe9veloppez un projet d'application comportant de nombreuses m\xe9thodes et variables, il arrive souvent que vous n\u2019ayez besoin d\u2019utiliser une variable que dans une m\xe9thode. Vous pouvez alors cr\xe9er et utiliser une variable locale, sans devoir vous soucier de l\u2019existence d\u2019une autre variable du m\xeame nom ailleurs dans la base."}),"\n",(0,r.jsxs)(s.p,{children:["Souvent, dans une application, des informations ponctuelles sont demand\xe9es \xe0 l\u2019utilisateur. The ",(0,r.jsx)(s.code,{children:"Request"})," command can obtain this information. Elle affiche une bo\xeete de dialogue comportant un message demandant \xe0 l\u2019utilisateur de r\xe9pondre et, lorsque la r\xe9ponse est valid\xe9e, la retourne.   G\xe9n\xe9ralement, il n\u2019est pas n\xe9cessaire de conserver cette information tr\xe8s longtemps dans vos m\xe9thodes. C\u2019est l\u2019endroit parfait pour utiliser une variable locale. Voici un exemple :"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-4d",children:' $vsID:=Request("Saisissez votre num\xe9ro d\'identification :")\nIf(OK=1)\n    QUERY([Personnes];[Personnes]ID=$vsID)\n End if\n'})}),"\n",(0,r.jsx)(s.p,{children:"Cette m\xe9thode demande simplement \xe0 l\u2019utilisateur de saisir un num\xe9ro d\u2019identification. La r\xe9ponse est plac\xe9e dans une variable locale, $vsID, puis la m\xe9thode la recherche parmi les champs [Personnes]ID. Une fois la m\xe9thode termin\xe9e, la variable locale $vsID est effac\xe9e de la m\xe9moire. Ce fonctionnement est bien adapt\xe9 puisque la variable n\u2019est utile qu\u2019une seule fois et dans cette m\xe9thode uniquement."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note:"})," Parameters $1, $2... pass\xe9s \xe0 des m\xe9thodes sont des variables locales. For more information, please refer to ",(0,r.jsx)(s.a,{href:"/docs/fr/20-R5/Concepts/parameters",children:"Parameters"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"variables-process",children:"Variables process"}),"\n",(0,r.jsx)(s.p,{children:"Une variable process est \u201cvisible\u201d uniquement dans le process o\xf9 elle a \xe9t\xe9 cr\xe9\xe9e. Elle est utilisable par toutes les m\xe9thodes du process et toutes les m\xe9thodes appel\xe9es depuis le process."}),"\n",(0,r.jsx)(s.p,{children:"Le nom d\u2019une variable process ne comporte aucun pr\xe9fixe. Ce nom peut contenir jusqu\u2019\xe0 31 caract\xe8res."}),"\n",(0,r.jsx)(s.p,{children:"En mode interpr\xe9t\xe9, les variables sont g\xe9r\xe9es dynamiquement; elles sont cr\xe9\xe9es et effac\xe9es de la m\xe9moire \xab\xe0 la vol\xe9e\xbb. En mode compil\xe9, tous les process que vous cr\xe9ez (process utilisateur) partagent la m\xeame d\xe9finition de variables process, mais chaque process a une instance diff\xe9rente pour chaque variable. Par exemple, la variable maVar est une certaine variable dans le process P_1 et une autre variable dans le process P_2."}),"\n",(0,r.jsxs)(s.p,{children:["A process can \u201cpeek and poke\u201d process variables from another process using the commands ",(0,r.jsx)(s.code,{children:"GET PROCESS VARIABLE"})," and ",(0,r.jsx)(s.code,{children:"SET PROCESS VARIABLE"}),". Nous vous recommandons de n'utiliser ces commandes que dans le cadre des besoins d\xe9crits ci-dessous (qui sont les raisons pour lesquelles ces commandes ont \xe9t\xe9 cr\xe9\xe9es dans 4D) :"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Communication interprocess \xe0 des endroits particuliers de votre code"}),"\n",(0,r.jsx)(s.li,{children:"Gestion du glisser-d\xe9poser interprocess"}),"\n",(0,r.jsx)(s.li,{children:"En client/serveur, communication entre les process sur les postes clients et les proc\xe9dures stock\xe9es ex\xe9cut\xe9es sur le serveur"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["For more information, see the chapter ",(0,r.jsx)(s.strong,{children:"Processes"})," and the description of these commands."]}),"\n",(0,r.jsx)(s.h3,{id:"variables-interprocess",children:"Variables interprocess"}),"\n",(0,r.jsx)(s.p,{children:"Les variables interprocess sont visibles dans tout le projet et sont disponibles pour tous les process. Les variables interprocess sont principalement utilis\xe9es pour le partage d\u2019informations entre les process."}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"L'utilisation de variables interprocess n'est pas recommand\xe9e car elles ne sont pas disponibles depuis le process pr\xe9emptif et peuvent rendre le code moins maintenable."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["The name of an interprocess variable always begins with the symbols ",(0,r.jsx)(s.code,{children:"<>"})," \u2014 a \u201cless than\u201d sign followed by a \u201cgreater than\u201d sign\u2014 followed by 31 characters."]}),"\n",(0,r.jsx)(s.p,{children:"En mode client/serveur, chaque poste (client et serveur) partage la m\xeame d\xe9finition des variables interprocess, mais chacun utilise une instance diff\xe9rente de chaque variable."})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},221020:(e,s,n)=>{var r=n(296540),a=Symbol.for("react.element"),i=Symbol.for("react.fragment"),l=Object.prototype.hasOwnProperty,t=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function d(e,s,n){var r,i={},d=null,c=null;for(r in void 0!==n&&(d=""+n),void 0!==s.key&&(d=""+s.key),void 0!==s.ref&&(c=s.ref),s)l.call(s,r)&&!o.hasOwnProperty(r)&&(i[r]=s[r]);if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:a,type:e,key:d,ref:c,props:i,_owner:t.current}}s.Fragment=i,s.jsx=d,s.jsxs=d},474848:(e,s,n)=>{e.exports=n(221020)},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>t});var r=n(296540);const a={},i=r.createContext(a);function l(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);