"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["50091"],{832711:function(e,s,n){n.r(s),n.d(s,{frontMatter:()=>i,toc:()=>a,default:()=>u,metadata:()=>o,assets:()=>c,contentTitle:()=>r});var o=JSON.parse('{"id":"aikit/asynchronous-call","title":"Appel asynchrone","description":"If you do not want to wait for the OpenAPI response when making a request to its API, you need to use asynchronous code.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/version-21/aikit/asynchronous-call.md","sourceDirName":"aikit","slug":"/aikit/asynchronous-call","permalink":"/docs/fr/aikit/asynchronous-call","draft":false,"unlisted":false,"editUrl":"https://github.com/4d/docs/issues/new?title=Comment%20on%20aikit%2Fasynchronous-call.md%20(21)&body=Please%20enter%20your%20comment%3A","tags":[],"version":"21","frontMatter":{"id":"asynchronous-call","title":"Appel asynchrone"},"sidebar":"docs","previous":{"title":"4D-AIKit","permalink":"/docs/fr/aikit/overview"},"next":{"title":"Fournisseurs (Providers)","permalink":"/docs/fr/aikit/compatible-openai"}}'),t=n(785893),l=n(250065);let i={id:"asynchronous-call",title:"Appel asynchrone"},r="Appel asynchrone",c={},a=[{value:"Process Considerations",id:"process-considerations",level:2},{value:"Exemples d\u2019utilisation",id:"exemples-dutilisation",level:2},{value:"liste de mod\xe8les",id:"liste-de-mod\xe8les",level:3},{value:"compl\xe9tions de chat",id:"compl\xe9tions-de-chat",level:3}];function d(e){let s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"appel-asynchrone",children:"Appel asynchrone"})}),"\n",(0,t.jsx)(s.p,{children:"If you do not want to wait for the OpenAPI response when making a request to its API, you need to use asynchronous code."}),"\n",(0,t.jsxs)(s.p,{children:["To make asynchronous calls, you must provide a callback ",(0,t.jsx)(s.code,{children:"4D.Function"}),"(",(0,t.jsx)(s.code,{children:"Formula"}),") in the ",(0,t.jsx)(s.a,{href:"/docs/fr/aikit/Classes/openaiparameters",children:"OpenAIParameters"})," object parameter to receive the result."]}),"\n",(0,t.jsxs)(s.p,{children:["The callback function will receive the same result object type (one of ",(0,t.jsx)(s.a,{href:"/docs/fr/aikit/Classes/openairesult",children:"OpenAIResult"})," child classes) that would be returned by the function in synchronous code. Voir les exemples ci-dessous."]}),"\n",(0,t.jsx)(s.h2,{id:"process-considerations",children:"Process Considerations"}),"\n",(0,t.jsxs)(s.p,{children:["The asynchronous method is based on ",(0,t.jsx)(s.a,{href:"https://developer.4d.com/docs/API/HTTPRequestClass",children:"4D.HTTPRequest"}),", so the response will be received within the current process."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["\u26A0\uFE0F If your process ends at the conclusion of the current method (e.g., using New process, or playing in the method editor), the callback formula might not be called asynchronously. In such cases, consider using ",(0,t.jsx)(s.code,{children:"CALL WORKER"})," or ",(0,t.jsx)(s.code,{children:"CALL FORM"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"exemples-dutilisation",children:"Exemples d\u2019utilisation"}),"\n",(0,t.jsx)(s.h3,{id:"liste-de-mod\xe8les",children:"liste de mod\xe8les"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-4d",children:"$client.models.list({formula: Formula(MyReceiveMethod($1))})\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"$1"})," sera une instance de [OpenAIModelListResult] (Classes/OpenAIModelListResult.md), donc la m\xe9thode ",(0,t.jsx)(s.code,{children:"MyReceiveMethod"})," pourrait \xeatre :"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-4d",children:'#DECLARE($result: cs.AIKit.OpenAIModelListResult)\n\nIf($result.success)\n\n   Form.models:=$result.models\n\nElse\n\n  Alert($result.errors.formula(Formula(JSON Stringify($1))).join("\\n"))\n\nEnd if\n'})}),"\n",(0,t.jsx)(s.h3,{id:"compl\xe9tions-de-chat",children:"compl\xe9tions de chat"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-4d",children:'var $messages:=[{role: "system"; content: "You are a helpful assistant."}]\n$messages.push({role: "user"; content: "Could you explain me why 42 is a special number"})\n\n$client.chat.completions.create($messages; { onResponse: Formula(MyChatCompletionsReceiveMethod($1))})\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"$1"})," sera une instance de ",(0,t.jsx)(s.a,{href:"/docs/fr/aikit/Classes/openaichatcompletionsresult",children:"OpenAIChatCompletionsResult"}),", donc la m\xe9thode ",(0,t.jsx)(s.code,{children:"MyChatCompletionsReceiveMethod"})," pourrait \xeatre :"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-4d",children:"#DECLARE($result: cs.AIKit.OpenAIChatCompletionsResult)\n\nASSERT($result.success) // Nous utilisons ici onResponse, le callback n'est re\xe7u qu'en cas de succ\xe8s.\nForm.assistantMessage:=$result.choices[0].text\n"})})]})}function u(e={}){let{wrapper:s}={...(0,l.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},250065:function(e,s,n){n.d(s,{Z:()=>r,a:()=>i});var o=n(667294);let t={},l=o.createContext(t);function i(e){let s=o.useContext(l);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(l.Provider,{value:s},e.children)}}}]);