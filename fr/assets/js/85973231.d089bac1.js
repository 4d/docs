"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[46356],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>c});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),i=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=i(e.components);return n.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=i(t),c=r,v=d["".concat(p,".").concat(c)]||d[c]||m[c]||s;return t?n.createElement(v,l(l({ref:a},u),{},{components:t})):n.createElement(v,l({ref:a},u))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=d;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var i=2;i<s;i++)l[i]=t[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},94751:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>u});t(67294);var n=t(3905);function r(){return r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},r.apply(this,arguments)}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const l={id:"parameters",title:"Param\xe8tres"},o=void 0,p={unversionedId:"Concepts/parameters",id:"version-18/Concepts/parameters",title:"Param\xe8tres",description:"Utiliser des param\xe8tres",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-18/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/fr/18/Concepts/parameters",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"parameters",title:"Param\xe8tres"},sidebar:"docs",previous:{title:"Methods",permalink:"/docs/fr/18/Concepts/methods"},next:{title:"Objets et collections partag\xe9s",permalink:"/docs/fr/18/Concepts/shared"}},i={},u=[{value:"Utiliser des param\xe8tres",id:"utiliser-des-param\xe8tres",level:2},{value:"Expressions prises en charge",id:"expressions-prises-en-charge",level:3},{value:"Fonctions",id:"fonctions",level:2},{value:"D\xe9claration des param\xe8tres",id:"d\xe9claration-des-param\xe8tres",level:2},{value:"Valeurs ou r\xe9f\xe9rences",id:"valeurs-ou-r\xe9f\xe9rences",level:2},{value:"Cas particuliers : objets et collections",id:"cas-particuliers--objets-et-collections",level:3},{value:"Param\xe8tres nomm\xe9s",id:"param\xe8tres-nomm\xe9s",level:2},{value:"Param\xe8tres optionnels",id:"param\xe8tres-optionnels",level:2},{value:"Indirections sur les param\xe8tres",id:"indirections-sur-les-param\xe8tres",level:2},{value:"D\xe9claration des param\xe8tres g\xe9n\xe9riques",id:"d\xe9claration-des-param\xe8tres-g\xe9n\xe9riques",level:3}],m={toc:u};function d(e){var{components:a}=e,t=s(e,["components"]);return(0,n.kt)("wrapper",r({},m,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",r({},{id:"utiliser-des-param\xe8tres"}),"Utiliser des param\xe8tres"),(0,n.kt)("p",null,"Vous aurez souvent besoin de fournir des valeurs \xe0 vos m\xe9thodes. Vous pouvez facilement effectuer cette op\xe9ration gr\xe2ce aux param\xe8tres."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Les param\xe8tres")," (ou ",(0,n.kt)("strong",{parentName:"p"},"arguments"),") sont des donn\xe9es dont les m\xe9thodes ont besoin pour s\u2019ex\xe9cuter. Le terme ",(0,n.kt)("em",{parentName:"p"},"param\xe8tres")," ou ",(0,n.kt)("em",{parentName:"p"},"arguments")," est utilis\xe9 indiff\xe9remment dans ce manuel. Des param\xe8tres sont \xe9galement pass\xe9s aux commandes int\xe9gr\xe9es de 4D. Dans l\u2019exemple ci-dessous, la cha\xeene \u201cBonjour\u201d est un param\xe8tre de la commande ",(0,n.kt)("inlineCode",{parentName:"p"},"ALERTE")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Bonjour")\n')),(0,n.kt)("p",null,"Les param\xe8tres sont pass\xe9s de la m\xeame mani\xe8re aux m\xe9thodes. Par exemple, si la m\xe9thode DO SOMETHING accepte trois param\xe8tres, l'appel \xe0 cette m\xe9thode pourrait \xeatre de la forme suivante :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"FAIRE QUELQUE CHOSE(AvecCeci;EtCela;CommeCeci)\n")),(0,n.kt)("p",null,"Les param\xe8tres sont s\xe9par\xe9s par des points-virgules (;). Leur valeur est calcul\xe9e lorsqu'ils sont appel\xe9s."),(0,n.kt)("p",null,"Dans la sous-routine (la m\xe9thode appel\xe9e), la valeur de chaque param\xe8tre est automatiquement copi\xe9e s\xe9quentiellement dans des variables locales num\xe9rot\xe9es : $1, $2, $3, etc. La num\xe9rotation des variables locales repr\xe9sente l\u2019ordre des param\xe8tres."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //Code de la m\xe9thode FAIRE QUELQUE CHOSE\n  //Supposons que tous les param\xe8tres sont de type texte\n C_TEXT($1;$2;$3)\n ALERT("J\'ai re\xe7u "+$1+" et "+$2+" et aussi "+$3)\n  //$1 contient le param\xe8tre AvecCeci\n  //$2 contient le param\xe8tre EtCela\n  //$3 contient le param\xe8tre CommeCeci\n')),(0,n.kt)("p",null,"Dans une sous-m\xe9thode, vous pouvez utiliser les param\xe8tres $1, $2... comme n'importe quelle autre variable locale. Toutefois, dans le cas o\xf9 vous utilisez des commandes qui modifient la valeur de la variable pass\xe9e en param\xe8tre (par exemple ",(0,n.kt)("inlineCode",{parentName:"p"},"Trouver dans champ"),"), les param\xe8tres $1, $2, etc. ne peuvent pas \xeatre utilis\xe9s directement. Vous devez d'abord les recopier dans des variables locales standard (par exemple ",(0,n.kt)("inlineCode",{parentName:"p"},"$mavar:=$1"),")."),(0,n.kt)("p",null,"Les m\xeames principes s'appliquent lorsque des m\xe9thodes sont ex\xe9cut\xe9es via des commandes d\xe9di\xe9es, comme par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/10!)  \n//passez la date du !05/05/10! comme param\xe8tre de SetCalendarDate\n// dans le contexte d\'un sous-formulaire\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note :")," Pour une bonne ex\xe9cution du code, assurez-vous que tous les param\xe8tres ",(0,n.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"$2")," etc. sont correctement d\xe9clar\xe9s dans les m\xe9thodes appel\xe9es (voir ",(0,n.kt)("a",r({parentName:"p"},{href:"#declaring-parameters"}),"D\xe9claration des param\xe8tres")," ci-dessous)."),(0,n.kt)("h3",r({},{id:"expressions-prises-en-charge"}),"Expressions prises en charge"),(0,n.kt)("p",null,"Vous pouvez utiliser n'importe quelle ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/18/Concepts/quick-tour#expression-types"}),"expression")," comme param\xe8tre, \xe0 l'exception des :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"tables"),(0,n.kt)("li",{parentName:"ul"},"arrays")),(0,n.kt)("p",null,"Les expressions de tables ou de tableaux peuvent \xeatre pass\xe9es uniquement ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/18/Concepts/pointer#pointers-as-parameters-to-methods"}),"comme une r\xe9f\xe9rence utilisant un pointeur"),"."),(0,n.kt)("h2",r({},{id:"fonctions"}),"Fonctions"),(0,n.kt)("p",null,"Les m\xe9thodes peuvent retourner des valeurs. Une m\xe9thode qui retourne une valeur est appel\xe9e une fonction."),(0,n.kt)("p",null,"Les commandes de 4D ou de plug-ins qui retournent une valeur sont \xe9galement appel\xe9es fonctions."),(0,n.kt)("p",null,"Par exemple, la ligne d\u2019instruction suivante utilise une fonction int\xe9gr\xe9e, ",(0,n.kt)("inlineCode",{parentName:"p"},"Longueur"),", qui retourne la longueur d\u2019une cha\xeene. La valeur retourn\xe9e par ",(0,n.kt)("inlineCode",{parentName:"p"},"Longueur")," est plac\xe9e dans une variable appel\xe9e ",(0,n.kt)("em",{parentName:"p"},"MaLongueur"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'MaLongueur:=Length("Comment suis-je arriv\xe9 l\xe0 ?")\n')),(0,n.kt)("p",null,"Toute sous-routine peut retourner une valeur. La valeur \xe0 retourner est plac\xe9e dans la variable locale ",(0,n.kt)("inlineCode",{parentName:"p"},"$0"),"."),(0,n.kt)("p",null,"Par exemple, la fonction suivante, appel\xe9e ",(0,n.kt)("inlineCode",{parentName:"p"},"Majuscules4"),", retourne une cha\xeene dont les quatre premiers caract\xe8res ont \xe9t\xe9 pass\xe9s en majuscules :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$0:=Uppercase(Substring($1;1;4))+Substring($1;5)\n")),(0,n.kt)("p",null,"Voici un exemple qui utilise la fonction Majuscules4 :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'NouvellePhrase:=Majuscules4("Bien jou\xe9.")\n')),(0,n.kt)("p",null,"Dans ce cas, la variable ",(0,n.kt)("em",{parentName:"p"},"NouvellePhrase")," prend la valeur \u201cBIEN jou\xe9.\u201d"),(0,n.kt)("p",null,"Le retour de fonction, ",(0,n.kt)("inlineCode",{parentName:"p"},"$0"),", est une variable locale \xe0 la sous-routine. Elle peut \xeatre utilis\xe9e en tant que telle \xe0 l'int\xe9rieur de la sous-routine. It can be used as such within the subroutine. Dans une sous-m\xe9thode, vous pouvez utiliser ",(0,n.kt)("inlineCode",{parentName:"p"},"$0")," comme n'importe quelle autre variable locale. C'est 4D qui retourne la valeur finale de ",(0,n.kt)("inlineCode",{parentName:"p"},"$0")," (sa valeur au moment o\xf9 la sous-routine se termine) \xe0 la m\xe9thode appel\xe9e."),(0,n.kt)("h2",r({},{id:"d\xe9claration-des-param\xe8tres"}),"D\xe9claration des param\xe8tres"),(0,n.kt)("p",null,"Pour \xe9viter tout conflit, vous devez d\xe9clarer chaque param\xe8tre dans les m\xe9thodes appel\xe9es en ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/18/Concepts/interpreted-compiled"}),"mode interpr\xe9t\xe9"),", m\xeame si cela est facultatif."),(0,n.kt)("p",null,"Dans l'exemple ci-dessous, la m\xe9thode projet ",(0,n.kt)("inlineCode",{parentName:"p"},"OneMethodAmongOthers")," d\xe9clare trois param\xe8tres :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  // M\xe9thode projet OneMethodAmongOthers\n  // OneMethodAmongOthers ( R\xe9el ; Date { ; Entier long} )\n  // OneMethodAmongOthers ( Amount ; Date { ; Pourcentage } )\n\n C_REAL($1) // 1er param\xe8tre de type R\xe9el\n C_DATE($2) // 2\xe8me param\xe8tre de type Date\n C_LONGINT($3) // 3\xe8me param\xe8tre de type Entier long\n")),(0,n.kt)("p",null,"Dans l'exemple suivant, la m\xe9thode projet ",(0,n.kt)("inlineCode",{parentName:"p"},"ajoutCapitale")," accepte un param\xe8tre texte et retourne un r\xe9sultat texte :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  // M\xe9thode projet ajoutCapitale\n  // ajoutCapitale ( Texte ) -> Texte\n  // ajoutCapitale( Cha\xeene source ) -> cha\xeene avec la premi\xe8re lettre capitale\n\n C_TEXTE($0;$1)\n $0:=Majusc(Sous chaine($1;1;1))+Minusc(Sous chaine($1;2))\n")),(0,n.kt)("p",null,"L'utilisation de commandes telles que ",(0,n.kt)("inlineCode",{parentName:"p"},"New process")," avec les m\xe9thodes process qui acceptent les param\xe8tres n\xe9cessite \xe9galement que les param\xe8tres soient explicitement d\xe9clar\xe9s dans la m\xe9thode appel\xe9e. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'C_TEXT($string)\nC_LONGINT($idProc;$int)\nC_OBJECT($obj)\n\n$idProc:=New process("foo_method";0;"foo_process";$string;$int;$obj)\n')),(0,n.kt)("p",null,'Ce code peut \xeatre ex\xe9cut\xe9 en mode compil\xe9, uniquement si "foo_method" d\xe9clare ses param\xe8tres :'),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"//foo_method\nC_TEXT($1)\nC_LONGINT($2)\nC_OBJECT($3)\n...\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note :"),' En mode compil\xe9, vous pouvez regrouper tous les param\xe8tres de variables locales pour les m\xe9thodes projets dans un m\xe9thode sp\xe9cifique avec un nom commen\xe7ant par "Compiler". Dans cette m\xe9thode, vous pouvez pr\xe9d\xe9clarer les param\xe8tres de chaque m\xe9thode, comme par exemple :'),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_REAL(OneMethodAmongOthers;$1)\n")),(0,n.kt)("p",null,"Pour plus d'informations, consultez la page ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/18/Concepts/interpreted-compiled"}),"Modes interpr\xe9t\xe9 et compil\xe9"),"."),(0,n.kt)("p",null,'La d\xe9claration des param\xe8tres est \xe9galement obligatoire dans les contextes suivants (ces contextes ne prennent pas en charge les d\xe9clarations dans une m\xe9thode "Compiler") :'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Database methods For example, the ",(0,n.kt)("inlineCode",{parentName:"li"},"On Web Connection Database Method")," receives six parameters, $1 to $6, of the data type Text. Au d\xe9but de la m\xe9thode base, vous devez \xe9crire (m\xeame si tous les param\xe8tres ne sont pas utilis\xe9s) :")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// Sur connexion Web\nC_TEXT($1;$2;$3;$4;$5;$6)\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Triggers The $0 parameter (Longint), which is the result of a trigger, will be typed by the compiler if the parameter has not been explicitly declared. N\xe9anmoins, si vous souhaitez le d\xe9clarer, vous devez le faire dans le trigger lui-m\xeame.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Form objects that accept the ",(0,n.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event The $0 parameter (Longint), which is the result of the ",(0,n.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event, is typed by the compiler if the parameter has not been explicitly declared. N\xe9anmoins, si vous souhaitez le d\xe9clarer, vous devez le faire dans la m\xe9thode projet. ",(0,n.kt)("strong",{parentName:"p"},"Note :")," Le compilateur n'initialise pas le param\xe8tre $0. Ainsi, d\xe8s que vous utilisez l'\xe9v\xe9nement formulaire ",(0,n.kt)("inlineCode",{parentName:"p"},"Sur glisser"),", vous devez initialiser $0. Par exemple :"))),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_LONGINT($0)\n If(Form event=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n")),(0,n.kt)("h2",r({},{id:"valeurs-ou-r\xe9f\xe9rences"}),"Valeurs ou r\xe9f\xe9rences"),(0,n.kt)("p",null,"Lorsque vous passez un param\xe8tre, 4D \xe9value toujours l'expression du param\xe8tre dans le contexte de la m\xe9thode appel\xe9e et d\xe9finit la ",(0,n.kt)("strong",{parentName:"p"},"valeur r\xe9sultante")," sur les variables locales $1, $2 etc. dans la sous-routine (voir ",(0,n.kt)("a",r({parentName:"p"},{href:"#using-parameters"}),"Utilisation des param\xe8tres"),"). Les variables/param\xe8tres locaux ne correspondent pas aux v\xe9ritables champs, variables ou expressions pass\xe9s par la m\xe9thode appel\xe9e; ils contiennent uniquement les valeurs qui n'ont pas \xe9t\xe9 pass\xe9es. Cette port\xe9e \xe9tant locale, si la valeur d'un param\xe8tre est modifi\xe9e dans la sous-routine, elle ne modifie pas la valeur dans la m\xe9thode appel\xe9e. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Voici du code extrait de la m\xe9thode MY_METHOD\nDO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\nALERT([People]Name)\n\n    //Voici du code extrait de la m\xe9thode  DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n')),(0,n.kt)("p",null,"La bo\xeete de dialogue d'alerte affich\xe9e par ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE"),' contiendra "WILLIAM" et celle affich\xe9e par ',(0,n.kt)("inlineCode",{parentName:"p"},"MA METHODE"),' contiendra "william". La m\xe9thode a modifi\xe9 localement la valeur du param\xe8tre $1, mais cela n\'affecte pas la valeur du champ ',(0,n.kt)("inlineCode",{parentName:"p"},"[Personnes]Nom")," pass\xe9 en param\xe8tre par la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"MA METHODE"),"."),(0,n.kt)("p",null,"Si vous voulez r\xe9ellement que la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE")," modifie la valeur du champ, deux solutions s'offrent \xe0 vous :"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Plut\xf4t que de passer le champ \xe0 la m\xe9thode, vous lui passez un pointeur :")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //Voici du code extrait de la m\xe9thode  MY_METHOD\n DO_SOMETHING(->[People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Last Name)\n\n  //Voici du code extrait de la m\xe9thode  DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n')),(0,n.kt)("p",null,"Ici, le param\xe8tre n'est pas le champ lui-m\xeame, mais un pointeur vers le champ. Ainsi, \xe0 l'int\xe9rieur de la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"FAIRE QUELQUE CHOSE"),", $1 ne contient plus la valeur du champ mais un pointeur vers le champ. L'objet ",(0,n.kt)("strong",{parentName:"p"},"r\xe9f\xe9renc\xe9")," par $1 ($1-> dans le code ci-dessus) est le champ lui-m\xeame. Par cons\xe9quent, la modification de l'objet r\xe9f\xe9renc\xe9 d\xe9passe les limites de la sous-routine et le champ lui-m\xeame est affect\xe9. Dans cet exemple, les deux bo\xeetes de dialogue d'alerte afficheront \"WILLIAM\"."),(0,n.kt)("ol",r({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"Plut\xf4t que la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"li"},"FAIRE QUELQUE CHOSE")," \u201cfasse quelque chose\u201d, vous pouvez la r\xe9\xe9crire de mani\xe8re \xe0 ce qu'elle retourne une valeur.")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Voici du code extrait de la m\xe9thode MY METHOD\n [People]Name:=DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Name)\n\n    //Voici du code extrait de la m\xe9thode DO SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n')),(0,n.kt)("p",null,"This second technique of returning a value by a subroutine is called \u201cusing a function.\u201d This is described in the ",(0,n.kt)("a",r({parentName:"p"},{href:"#returning-values"}),"Returning values")," paragraph. Ceci est d\xe9crit dans le paragraphe ",(0,n.kt)("a",r({parentName:"p"},{href:"#functions"}),"Fonctions"),"."),(0,n.kt)("h3",r({},{id:"cas-particuliers--objets-et-collections"}),"Cas particuliers : objets et collections"),(0,n.kt)("p",null,"Veillez \xe0 ce que les types de donn\xe9es d'Objet et Collection ne puissent \xeatre g\xe9r\xe9s que via une r\xe9f\xe9rence (c'est-\xe0-dire un",(0,n.kt)("em",{parentName:"p"}," pointeur")," interne)."),(0,n.kt)("p",null,"Par cons\xe9quent, lorsque vous utilisez des types de donn\xe9es comme param\xe8tres, ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2 ...")," ne contiennent pas des ",(0,n.kt)("em",{parentName:"p"},"valeurs"),", mais des ",(0,n.kt)("em",{parentName:"p"},"r\xe9f\xe9rences"),". La modification de la valeur des param\xe8tres ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2 ...")," dans la sous-routine sera propag\xe9e \xe0 chaque fois que l'objet ou la collection source est utilis\xe9(e). C'est le m\xeame principe que pour ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/18/Concepts/pointer#pointers-as-parameters-to-methods"}),"les pointeurs"),", \xe0 l'exception des param\xe8tres ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2 ...")," n'ont pas besoin d'\xeatre d\xe9r\xe9f\xe9renc\xe9s dans la sous-routine."),(0,n.kt)("p",null,"Par exemple, consid\xe9rons que la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson"),", qui cr\xe9e un objet et qui l'envoie comme param\xe8tre :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //La m\xe9thode CreatePerson cr\xe9e un objet et l\'envoie en tant que param\xe8tre\n C_OBJECT($person)\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(Chaine(OB Lire($person;"Age")))  \n')),(0,n.kt)("p",null,"La m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," ajoute 10 \xe0 l'attribut Age de l'objet re\xe7u"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  //ChangeAge\n C_OBJECT($1)\n$1.Age:=$1.Age+10\n ALERT(String($1;Age))\n")),(0,n.kt)("p",null,"Si vous ex\xe9cutez la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson"),', les deux messages d\'alerte contiendront "50" car le m\xeame objet est trait\xe9 par les deux m\xe9thodes.'),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"4D Server :")," Lorsque des param\xe8tres sont pass\xe9s entre des m\xe9thodes qui ne sont pas ex\xe9cut\xe9es sur la m\xeame machine (lors de l'utilisation de l'option Ex\xe9cuter sur serveur par exemple), il n'est pas possible d'utiliser des r\xe9f\xe9rences. Dans ce cas, ce sont des copies des param\xe8tres objet ou collection qui sont envoy\xe9es au lieu de r\xe9f\xe9rences."),(0,n.kt)("h2",r({},{id:"param\xe8tres-nomm\xe9s"}),"Param\xe8tres nomm\xe9s"),(0,n.kt)("p",null,"L'utilisation d'objets en tant que param\xe8tres vous permet de g\xe9rer des ",(0,n.kt)("strong",{parentName:"p"},"param\xe8tres nomm\xe9s"),". Ce style de programmation est simple, souple et facile \xe0 lire."),(0,n.kt)("p",null,"Par exemple, si vous utilisez la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //La m\xe9thode CreatePerson cr\xe9e un objet et l\'envoie en tant que param\xe8tre\n C_OBJECT($person)\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(Chaine(OB Lire($person;"Age")))  \n')),(0,n.kt)("p",null,"Dans la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge"),", vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n C_OBJECT($1;$para)\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Nom+" a "+String($para.Age)+" ans.")\n')),(0,n.kt)("p",null,"C'est un moyen puissant de d\xe9finir des ",(0,n.kt)("a",r({parentName:"p"},{href:"#optional-parameters"}),"param\xe8tres optionnels")," (voir ci-dessous \xe9galement). Pour g\xe9rer les param\xe8tres manquants, vous pouvez :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"v\xe9rifier si tous les param\xe8tres attendus sont fournis en les comparant \xe0 la valeur ",(0,n.kt)("inlineCode",{parentName:"li"},"Null"),", ou"),(0,n.kt)("li",{parentName:"ul"},"pr\xe9d\xe9finir les valeurs des param\xe8tres, ou"),(0,n.kt)("li",{parentName:"ul"},"les utiliser sous forme de valeurs vides.")),(0,n.kt)("p",null,"Dans la m\xe9thode ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," ci-dessus, les propri\xe9t\xe9s Age et Nom sont obligatoires et pourraient g\xe9n\xe9rer des erreurs si elles sont manquantes. Pour \xe9viter cela, vous pouvez simplement \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n C_OBJECT($1;$para)\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Nom+" a "+String($para.Age)+" ans.")\n')),(0,n.kt)("p",null,'Les deux param\xe8tres sont alors optionnels. S\'ils ne sont pas renseign\xe9s, le r\xe9sultat sera "a 10 ans", mais aucune erreur ne sera g\xe9n\xe9r\xe9e.'),(0,n.kt)("p",null,"Enfin, les param\xe8tres nomm\xe9s permettent de maintenir et de reproduire des applications en toutes simplicit\xe9 et s\xe9curit\xe9. Imaginez que vous r\xe9alisez, par la suite, qu'ajouter 10 ans n'est pas toujours appropri\xe9. Vous aurez besoin d'un autre param\xe8tre pour d\xe9finir le nombre d'ann\xe9es \xe0 ajouter. Vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$person:=New object("Nom";"Smith";"Age";40;"\xe0Ajouter";10)\nChangeAge($person)\n\n//ChangeAge\nC_OBJECT($1;$para)\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Nom)+" a "+String($para.Age)+" ans.")\n')),(0,n.kt)("p",null,"Ici, toute la puissance r\xe9side dans le fait de ne pas avoir \xe0 changer votre code existant. Cela fonctionnera toujours dans l'ancienne version, mais le cas \xe9ch\xe9ant, vous pouvez utiliser une autre valeur que 10 ans."),(0,n.kt)("p",null,"Avec les variables nomm\xe9es, n'importe quel param\xe8tre peut \xeatre optionnel. Dans l'exemple ci-dessus, tous les param\xe8tres sont optionnels et peuvent \xeatre donn\xe9s, dans n'importe quel ordre."),(0,n.kt)("h2",r({},{id:"param\xe8tres-optionnels"}),"Param\xe8tres optionnels"),(0,n.kt)("p",null,"Dans le manuel ",(0,n.kt)("em",{parentName:"p"},"Langage de 4D"),", les caract\xe8res { } (accolades) indiquent des param\xe8tres facultatifs. Par exemple, ",(0,n.kt)("inlineCode",{parentName:"p"},"ALERT (message{; okButtonTitle})")," signifie que le param\xe8tre ",(0,n.kt)("em",{parentName:"p"},"okButtonTitle")," doit \xeatre omis lors de l'appel de la commande. Vous pouvez l'appeler comme suit :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Etes*vous s\xfbr?";"Oui, je le suis") //2 param\xe8tres\nALERT("Temps \xe9coul\xe9") //1 param\xe8tre\n')),(0,n.kt)("p",null,"Les m\xe9thodes projet 4D acceptent \xe9galement des param\xe8tres optionnels, en commen\xe7ant par la droite. Cependant, il est difficile de g\xe9rer les param\xe8tres optionnels lorsque certains d'entre eux sont manquants dans la m\xe9thode appel\xe9e - cela ne devrait jamais g\xe9n\xe9rer d'erreur. Une bonne pratique consisterait \xe0 assigner des valeurs par d\xe9faut aux param\xe8tres non utilis\xe9s."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Lorsque les param\xe8tres sont n\xe9cessaires dans vos m\xe9thodes, vous pouvez \xe9galement envisager des ",(0,n.kt)("a",r({parentName:"p"},{href:"#named-parameters"}),"param\xe8tres nomm\xe9s")," pour g\xe9rer plusieurs param\xe8tres de mani\xe8re flexible.")),(0,n.kt)("p",null,"A l'aide de la commande ",(0,n.kt)("inlineCode",{parentName:"p"},"Count parameters")," contenue dans la m\xe9thode appel\xe9e, vous pouvez d\xe9tecter le nombre de param\xe8tres et effectuer des op\xe9rations diff\xe9rentes en fonction de ce nombre."),(0,n.kt)("p",null,"L'exemple suivant affiche un message et peut ins\xe9rer le texte dans un document sur disque ou dans une zone 4D Write Pro :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// M\xe9thode projet APPEND TEXT\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n\n C_TEXT($1;$2)\n C_OBJECT($3)\n\n ALERT($1)\n If(Count parameters>=3)\n    WP SET TEXT($3;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($2;$1)\n    End if\n End if\n")),(0,n.kt)("p",null,"Une fois que cette m\xe9thode projet a \xe9t\xe9 ajout\xe9e \xe0 votre application, vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"APPEND TEXT(vtSomeText) //Affichera uniquement le message\nAPPEND TEXT(vtSomeText;$path) //Affiche le message et l'annexe au document dans $path\nAPPEND TEXT(vtSomeText;\"\";$wpArea) //Affiche le message et l'\xe9crit dans $wpArea\n")),(0,n.kt)("h2",r({},{id:"indirections-sur-les-param\xe8tres"}),"Indirections sur les param\xe8tres"),(0,n.kt)("p",null,"Les m\xe9thodes projets 4D acceptent un grand nombre de param\xe8tres de m\xeame type, commen\xe7ant par la droite. Ce principe est appel\xe9 ",(0,n.kt)("strong",{parentName:"p"},"l'indirection des param\xe8tres"),". L'utilisation de la commande ",(0,n.kt)("inlineCode",{parentName:"p"},"Count parameters")," vous permet d'adresser ces param\xe8tres avec la boucle ",(0,n.kt)("inlineCode",{parentName:"p"},"For...End for")," ainsi que la syntaxe de l'indirection des param\xe8tres."),(0,n.kt)("p",null,"Dans l'exemple qui suit, la m\xe9thode projet ",(0,n.kt)("inlineCode",{parentName:"p"},"ENVOYER PAQUET")," accepte le param\xe8tre de temps suivi d'un nombre de variables des param\xe8tres de texte :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  //SEND PACKETS Project Method\n  //SEND PACKETS ( Time ; Text { ; Text2... ; TextN } )\n  //SEND PACKETS ( docRef ; Data { ; Data2... ; DataN } )\n\n C_TIME($1)\n C_TEXT(${2})\n C_LONGINT($vlPacket)\n\n For($vlPacket;2;Count parameters)\n    SEND PACKET($1;${$vlPacket})\n End for\n")),(0,n.kt)("p",null,"Pour une bonne gestion de cette indirection, il est important de respecter la convention suivante : si tous les param\xe8tres ne sont pas adress\xe9s par indirection, ce qui est le cas le plus fr\xe9quent, il faut que les param\xe8tres adress\xe9s par indirection soient pass\xe9s en fin de liste. A l\u2019int\xe9rieur de la m\xe9thode, l\u2019adressage par indirection se fait sous la forme : ${$i}, $i \xe9tant une variable num\xe9rique. ${$i} est appel\xe9 ",(0,n.kt)("strong",{parentName:"p"},"param\xe8tre g\xe9n\xe9rique"),"."),(0,n.kt)("p",null,"Illustrons notre propos par un exemple : \xe9crivons une fonction qui prend des valeurs, fait leur somme et renvoie cette somme format\xe9e suivant un format qui peut varier avec les valeurs. A chaque appel \xe0 cette m\xe9thode, le nombre de valeurs \xe0 additionner peut varier. Il faudra donc passer comme param\xe8tre \xe0 notre m\xe9thode les valeurs, en nombre variable, et le format, exprim\xe9 sous forme d\u2019une cha\xeene de caract\xe8res."),(0,n.kt)("p",null,"Un appel \xe0 cette fonction se fera de la fa\xe7on suivante :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' R\xe9sultat:=LaSomme("##0,00";125,2;33,5;24)\n\n')),(0,n.kt)("p",null,"La m\xe9thode appelante r\xe9cup\xe9rera dans ce cas la cha\xeene : 182,70, somme des nombres pass\xe9s, format\xe9e suivant le format sp\xe9cifi\xe9. Les param\xe8tres de la fonction doivent \xeatre pass\xe9s dans un ordre pr\xe9cis : le format d\u2019abord et ensuite les valeurs, dont le nombre peut varier d\u2019un appel \xe0 l\u2019autre."),(0,n.kt)("p",null,"Examinons maintenant la fonction que nous appelons ",(0,n.kt)("inlineCode",{parentName:"p"},"LaSomme")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," $Somme:=0\n For($i;2;Nombre de param\xe8tres)\n    $Somme:=$Somme+${$i}\n End for\n $0:=String($Somme;$1)\n")),(0,n.kt)("p",null,"Cette fonction pourra \xeatre appel\xe9e de diverses mani\xe8res :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' R\xe9sultat:=LaSomme("##0,00";125,2;33,5;24)\n R\xe9sultat:=LaSomme("000";1;18;4;23;17)\n')),(0,n.kt)("h3",r({},{id:"d\xe9claration-des-param\xe8tres-g\xe9n\xe9riques"}),"D\xe9claration des param\xe8tres g\xe9n\xe9riques"),(0,n.kt)("p",null,"De m\xeame que pour les autres variables locales, la d\xe9claration du param\xe8tre g\xe9n\xe9rique par directive de compilation n\u2019est pas obligatoire. Il est n\xe9anmoins recommand\xe9 d'\xe9viter toute ambigu\xeft\xe9. Pour d\xe9clarer ces param\xe8tres, utilisez une directive de compilateur \xe0 laquelle vous passez ${N} comme param\xe8tre, o\xf9 N est le premier param\xe8tre g\xe9n\xe9rique."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_LONGINT(${4})\n")),(0,n.kt)("p",null,"La commande ci-dessus signifie que tous les param\xe8tres \xe0 partir du quatri\xe8me (inclus) seront adress\xe9s par indirection. Ils seront tous de type Entier long. Les types de $1, $2 et $3 pourront \xeatre quelconques. En revanche, si vous utilisez $2 par indirection, le type utilis\xe9 sera le type g\xe9n\xe9rique. $1, $2 and $3 can be of any data type."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note :")," Le nombre, dans la d\xe9claration, doit toujours \xeatre une constante et jamais une variable."))}d.isMDXComponent=!0}}]);