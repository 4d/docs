"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3645],{603905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(667294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,h=u["".concat(i,".").concat(c)]||u[c]||d[c]||o;return a?n.createElement(h,s(s({ref:t},m),{},{components:a})):n.createElement(h,s({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},134343:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>m});a(667294);var n=a(603905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},r.apply(this,arguments)}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const s={id:"parameters",title:"Param\xe8tres"},l=void 0,i={unversionedId:"Concepts/parameters",id:"version-20-R5/Concepts/parameters",title:"Param\xe8tres",description:"Vous aurez souvent besoin de fournir des valeurs \xe0 vos m\xe9thodes et fonctions. Vous pouvez facilement effectuer cette op\xe9ration gr\xe2ce aux param\xe8tres.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-20-R5/Concepts/parameters.md",sourceDirName:"Concepts",slug:"/Concepts/parameters",permalink:"/docs/fr/Concepts/parameters",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fparameters.md%20(20-R5)&body=Please%20enter%20your%20comment%3A",tags:[],version:"20-R5",frontMatter:{id:"parameters",title:"Param\xe8tres"},sidebar:"docs",previous:{title:"Methods",permalink:"/docs/fr/Concepts/methods"},next:{title:"Objets et collections partag\xe9s",permalink:"/docs/fr/Concepts/shared"}},p={},m=[{value:"Vue d\u2019ensemble",id:"vue-densemble",level:2},{value:"D\xe9claration des param\xe8tres",id:"d\xe9claration-des-param\xe8tres",level:2},{value:"Valeur retourn\xe9e",id:"valeur-retourn\xe9e",level:3},{value:"Type de donn\xe9es pris en charge",id:"type-de-donn\xe9es-pris-en-charge",level:3},{value:"Initialisation",id:"initialisation",level:3},{value:"<code>return {expression}</code>",id:"return-expression",level:2},{value:"Indirections sur les param\xe8tres (${N})",id:"indirections-sur-les-param\xe8tres-n",level:2},{value:"Utilisation des param\xe8tres variadiques",id:"utilisation-des-param\xe8tres-variadiques",level:3},{value:"D\xe9claration des param\xe8tres variadiques",id:"d\xe9claration-des-param\xe8tres-variadiques",level:3},{value:"Exemple",id:"exemple",level:4},{value:"Compilation",id:"compilation",level:2},{value:"Parameters declared in prototypes",id:"parameters-declared-in-prototypes",level:3},{value:"Method parameters declared outside prototypes",id:"method-parameters-declared-outside-prototypes",level:3},{value:"<code>Compiler_Methods</code> method",id:"compiler_methods-method",level:4},{value:"Conflicts between declarations",id:"conflicts-between-declarations",level:3},{value:"Type de param\xe8tre erron\xe9",id:"type-de-param\xe8tre-erron\xe9",level:2},{value:"Utilisation des propri\xe9t\xe9s d&#39;objet comme param\xe8tres nomm\xe9s",id:"utilisation-des-propri\xe9t\xe9s-dobjet-comme-param\xe8tres-nomm\xe9s",level:2},{value:"Param\xe8tres optionnels",id:"param\xe8tres-optionnels",level:2},{value:"Valeurs ou r\xe9f\xe9rences",id:"valeurs-ou-r\xe9f\xe9rences",level:2},{value:"Cas particuliers : objets et collections",id:"cas-particuliers--objets-et-collections",level:3}],d={toc:m};function u(e){var{components:t}=e,a=o(e,["components"]);return(0,n.kt)("wrapper",r({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Vous aurez souvent besoin de fournir des valeurs \xe0 vos m\xe9thodes et fonctions. Vous pouvez facilement effectuer cette op\xe9ration gr\xe2ce aux param\xe8tres."),(0,n.kt)("h2",r({},{id:"vue-densemble"}),"Vue d\u2019ensemble"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters")," (or ",(0,n.kt)("strong",{parentName:"p"},"arguments"),") are pieces of data that a method or a class function needs in order to perform its task. The terms ",(0,n.kt)("em",{parentName:"p"},"parameter")," and ",(0,n.kt)("em",{parentName:"p"},"argument")," are used interchangeably throughout this manual. Des param\xe8tres sont \xe9galement pass\xe9s aux commandes int\xe9gr\xe9es de 4D. In this example, the string \u201cHello\u201d is an argument to the ",(0,n.kt)("inlineCode",{parentName:"p"},"ALERT")," built-in command:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Bonjour")\n')),(0,n.kt)("p",null,"Les param\xe8tres sont pass\xe9s de la m\xeame mani\xe8re aux m\xe9thodes ou aux fonctions de classe (class functions). For example, if a class function named ",(0,n.kt)("inlineCode",{parentName:"p"},"getArea()")," accepts two parameters, a call to the class function might look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$area:=$o.getArea(50;100)\n")),(0,n.kt)("p",null,"Or, if a project method named ",(0,n.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING")," accepts three parameters, a call to the method might look like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"FAIRE QUELQUE CHOSE($AvecCeci;$EtCela;$CommeCeci)\n")),(0,n.kt)("p",null,"Les param\xe8tres d'entr\xe9e sont s\xe9par\xe9s par des points-virgules (;)."),(0,n.kt)("p",null,"Les m\xeames principes s'appliquent lorsque des m\xe9thodes sont ex\xe9cut\xe9es via des commandes d\xe9di\xe9es, comme par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'EXECUTE METHOD IN SUBFORM("Cal2";"SetCalendarDate";*;!05/05/20!)  \n//pass the !05/05/20! date as parameter to the SetCalendarDate  \n//in the context of a subform\n')),(0,n.kt)("p",null,"Data can also be ",(0,n.kt)("strong",{parentName:"p"},"returned")," from methods and class functions. For example, the following line is a statement that uses the built-in command, ",(0,n.kt)("inlineCode",{parentName:"p"},"Length"),", to return the length of a string. The statement puts the value returned by ",(0,n.kt)("inlineCode",{parentName:"p"},"Length")," in a variable called ",(0,n.kt)("em",{parentName:"p"},"MyLength"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'MaLongueur:=Length("Comment suis-je arriv\xe9 l\xe0 ?")\n')),(0,n.kt)("p",null,"Toute sous-routine peut retourner une valeur. Un seul param\xe8tre de sortie peut \xeatre d\xe9clar\xe9 par m\xe9thode ou fonction de classe."),(0,n.kt)("p",null,"Input and output values are ",(0,n.kt)("a",r({parentName:"p"},{href:"#values-or-references"}),"evaluated")," at the moment of the call and copied into or from local variables within the called class function or method. Variable parameters must be ",(0,n.kt)("a",r({parentName:"p"},{href:"#declaring-parameters"}),"declared")," in the called code."),(0,n.kt)("admonition",r({},{title:"Compatibilit\xe9",type:"info"}),(0,n.kt)("p",{parentName:"admonition"},"Throughout the 4D documentation, you might see examples where parameters are automatically copied in sequentially numbered local variables ($0, $1, etc.) and declared using compiler directives. Ex: ",(0,n.kt)("inlineCode",{parentName:"p"},"C_TEXT($1;$2)"),". Cette ancienne syntaxe est toujours prise en charge mais n'est plus recommand\xe9e.")),(0,n.kt)("h2",r({},{id:"d\xe9claration-des-param\xe8tres"}),"D\xe9claration des param\xe8tres"),(0,n.kt)("p",null,"Dans les m\xe9thodes et fonctions de classe qui sont appel\xe9es, les valeurs des param\xe8tres sont assign\xe9es aux variables locales. You usually declare parameters using a ",(0,n.kt)("strong",{parentName:"p"},"parameter name")," along with a ",(0,n.kt)("strong",{parentName:"p"},"parameter type"),", separated by colon."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"For class functions, parameters are declared along with the ",(0,n.kt)("inlineCode",{parentName:"li"},"Function")," keyword."),(0,n.kt)("li",{parentName:"ul"},"For methods (project methods, form object methods, database methods, and triggers), parameters are declared using the ",(0,n.kt)("inlineCode",{parentName:"li"},"#DECLARE")," keyword at the beginning of the method code.")),(0,n.kt)("p",null,"Exemples :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function getArea($width : Integer; $height : Integer) -> $area : Integer\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," //myProjectMethod\n#DECLARE ($i : Integer) -> $myResult : Object\n")),(0,n.kt)("p",null,"Les r\xe8gles suivantes s'appliquent :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La ligne de d\xe9claration doit \xeatre la premi\xe8re ligne de code de la m\xe9thode ou de la fonction, sinon une erreur est affich\xe9e (seuls des commentaires ou des sauts de ligne peuvent pr\xe9c\xe9der la d\xe9claration)."),(0,n.kt)("li",{parentName:"ul"},"Parameter names must start with a ",(0,n.kt)("inlineCode",{parentName:"li"},"$")," character and be compliant with ",(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/identifiers#object-properties"}),"property naming rules"),"."),(0,n.kt)("li",{parentName:"ul"},"Les param\xe8tres multiples (et leurs types) sont s\xe9par\xe9s par des points-virgules (;)."),(0,n.kt)("li",{parentName:"ul"},'Les syntaxes multilignes sont prises en charge (en utilisant le caract\xe8re "\\").')),(0,n.kt)("p",null,"For example, when you call a ",(0,n.kt)("inlineCode",{parentName:"p"},"getArea()")," function with two parameters:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"$area:=$o.getArea(50;100)\n")),(0,n.kt)("p",null,"Dans le code de la fonction de classe, la valeur de chaque param\xe8tre est copi\xe9e dans le param\xe8tre d\xe9clar\xe9 correspondant :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// Class: Polygon\nFunction getArea($width : Integer; $height : Integer)-> $area : Integer\n    $area:=$width*$height\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"If the type is not defined, the parameter will be defined as ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/variant"}),(0,n.kt)("inlineCode",{parentName:"a"},"Variant")),".")),(0,n.kt)("p",null,"All 4D method kinds support the ",(0,n.kt)("inlineCode",{parentName:"p"},"#DECLARE")," keyword, including database methods. For example, in the ",(0,n.kt)("inlineCode",{parentName:"p"},"On Web Authentication")," database method, you can declare named parameters:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    // On Web Authentication database method\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text) \\\n  -> $RequestAccepted : Boolean\n$entitySelection:=ds.User.query("login=:1"; $user)\n// Check hash password...\n')),(0,n.kt)("h3",r({},{id:"valeur-retourn\xe9e"}),"Valeur retourn\xe9e"),(0,n.kt)("p",null,"You declare the return parameter of a function by adding an arrow (->) and the parameter definition after the input parameter(s) list. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer) -> $result : Integer\n")),(0,n.kt)("p",null,"You can also declare the return parameter only by adding ",(0,n.kt)("inlineCode",{parentName:"p"},": type"),", in which case it can be handled by a ",(0,n.kt)("a",r({parentName:"p"},{href:"#return-expression"}),"return statement"),". Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer): Integer\n    return $x+$y\n")),(0,n.kt)("admonition",r({},{type:"warning"}),(0,n.kt)("p",{parentName:"admonition"},"Parameters, which include the returned value, must be declared only once. In particular, you cannot declare the same parameter as input and output, even with the same type. Par exemple :"),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",r({parentName:"pre"},{className:"language-qs"}),"    //invalid declaration\nFunction myTransform ($x : Integer) -> $x : Integer \n    //error: $x is declared twice\n"))),(0,n.kt)("h3",r({},{id:"type-de-donn\xe9es-pris-en-charge"}),"Type de donn\xe9es pris en charge"),(0,n.kt)("p",null,"With named parameters, you can use the same data types as those which are ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/variables#using-the-var-keyword"}),"supported by the ",(0,n.kt)("inlineCode",{parentName:"a"},"var")," keyword"),", including class objects. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function saveToFile($entity : cs.ShapesEntity; $file : 4D.File)\n")),(0,n.kt)("admonition",r({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Tables or array expressions can only be passed ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/pointer#pointers-as-parameters-to-methods"}),"as reference using a pointer"),".")),(0,n.kt)("h3",r({},{id:"initialisation"}),"Initialisation"),(0,n.kt)("p",null,"When parameters are declared, they are initialized to the ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/data-types#default-values"}),(0,n.kt)("strong",{parentName:"a"},"default value corresponding to their type")),", which they will keep during the session as long as they have not been assigned."),(0,n.kt)("h2",r({},{id:"return-expression"}),(0,n.kt)("inlineCode",{parentName:"h2"},"return {expression}")),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Historique"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Release"),(0,n.kt)("th",r({parentName:"tr"},{align:null}),"Modifications"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",r({parentName:"tr"},{align:null}),"19 R4"),(0,n.kt)("td",r({parentName:"tr"},{align:null}),"Ajout"))))),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," statement ends function or method execution and can be used to return an expression to the caller."),(0,n.kt)("p",null,"Par exemple, la fonction suivante retourne le carr\xe9 de son argument, $x, o\xf9 $x est un nombre."),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function square($x : Integer) \n   return $x * $x\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Internally, ",(0,n.kt)("inlineCode",{parentName:"p"},"return x")," executes ",(0,n.kt)("inlineCode",{parentName:"p"},"$0:=x")," or (if declared) ",(0,n.kt)("inlineCode",{parentName:"p"},"myReturnValue:=x"),", and returns to the caller. If ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," is used without an expression, the function or method returns a null value of the declared return type (if any), otherwise ",(0,n.kt)("em",{parentName:"p"},"undefined"),".")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"return")," statement can be used along with the standard syntax for ",(0,n.kt)("a",r({parentName:"p"},{href:"#returned-value"}),"returned values")," (the returned value must be of the declared type). Cependant, notez qu'elle met imm\xe9diatement fin \xe0 l'ex\xe9cution du code. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function getValue\n    $0:=10\n    return 20\n    // returns 20\n\nFunction getValue -> $v : Integer\n    return 10\n    $v:=20 // never executed\n    // returns 10\n")),(0,n.kt)("h2",r({},{id:"indirections-sur-les-param\xe8tres-n"}),"Indirections sur les param\xe8tres (${N})"),(0,n.kt)("p",null,"Les m\xe9thodes et fonctions 4D acceptent un nombre variable de param\xe8tres. You can address those parameters with a ",(0,n.kt)("inlineCode",{parentName:"p"},"For...End for")," loop, the ",(0,n.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page259.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Count parameters"))," command and the ",(0,n.kt)("strong",{parentName:"p"},"parameter indirection syntax"),". Within the method, an indirection address is formatted ",(0,n.kt)("inlineCode",{parentName:"p"},"${N}"),", where ",(0,n.kt)("inlineCode",{parentName:"p"},"N")," is a numeric expression."),(0,n.kt)("h3",r({},{id:"utilisation-des-param\xe8tres-variadiques"}),"Utilisation des param\xe8tres variadiques"),(0,n.kt)("p",null,"Par un exemple, consid\xe9rons une m\xe9thode qui calcule une somme de valeurs retourn\xe9e suivant un format pass\xe9 comme param\xe8tre. A chaque appel \xe0 cette m\xe9thode, le nombre de valeurs \xe0 additionner peut varier. Il faudra donc passer comme param\xe8tre \xe0 notre m\xe9thode les valeurs, en nombre variable, et le format, exprim\xe9 sous forme d\u2019une cha\xeene de caract\xe8res."),(0,n.kt)("p",null,"Here is the method, named ",(0,n.kt)("inlineCode",{parentName:"p"},"MySum"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," #DECLARE($format : Text) -> $result : Text\n $sum:=0\n For($i;2;Count parameters)\n    $sum:=$sum+${$i}\n End for\n $result:=String($sum;$format)\n")),(0,n.kt)("p",null,"Les param\xe8tres de la m\xe9thode doivent \xeatre pass\xe9s dans le bon ordre : le format d\u2019abord et ensuite les valeurs, dont le nombre peut varier :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),' Result:=MySum("##0.00";125,2;33,5;24) //"182.70"\n Result:=MySum("000";1;2;200) //"203"\n')),(0,n.kt)("p",null,"Notez que m\xeame si vous avez d\xe9clar\xe9 0, 1, ou plus param\xe8tres, vous pouvez toujours passer le nombre de param\xe8tres que vous voulez. Parameters are all available within the called code through the ",(0,n.kt)("inlineCode",{parentName:"p"},"${N}")," syntax and extra parameters type is ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/variant"}),"Variant")," by default (you can declare them using the ",(0,n.kt)("a",r({parentName:"p"},{href:"#declaring-variadic-parameters"}),"variadic notation"),"). You just need to make sure parameters exist, thanks to the ",(0,n.kt)("a",r({parentName:"p"},{href:"https://doc.4d.com/4dv20/help/command/en/page259.html"}),(0,n.kt)("inlineCode",{parentName:"a"},"Count parameters"))," command. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'//foo method\n#DECLARE($p1: Text;$p2 : Text; $p3 : Date) \nFor($i;1;Count parameters)\n    ALERT("param "+String($i)+" = "+String(${$i}))\nEnd for\n')),(0,n.kt)("p",null,"Cette m\xe9thode peut \xeatre appel\xe9e :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'foo("hello";"world";!01/01/2021!;42;?12:00:00?) //extra parameters are passed\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Pour une bonne gestion de cette indirection, il est important de respecter la convention suivante : si tous les param\xe8tres ne sont pas adress\xe9s par indirection, ce qui est le cas le plus fr\xe9quent, il faut que les param\xe8tres adress\xe9s par indirection soient pass\xe9s en fin de liste.")),(0,n.kt)("h3",r({},{id:"d\xe9claration-des-param\xe8tres-variadiques"}),"D\xe9claration des param\xe8tres variadiques"),(0,n.kt)("p",null,"Il n'est pas obligatoire de d\xe9clarer les param\xe8tres variadiques. Non-declared variadic parameters automatically get the ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/variant"}),"Variant")," type."),(0,n.kt)("p",null,'Toutefois, pour \xe9viter les erreurs de correspondance de type lors de l\'ex\xe9cution du code, vous pouvez d\xe9clarer un nombre variable de param\xe8tres en utilisant la notation "..." dans les prototypes de vos fonctions, constructeurs de classes et m\xe9thodes (param\xe8tres variadiques). Vous sp\xe9cifiez le type du param\xe8tre en suivant la notation "..." avec le type d\xe9sir\xe9.'),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"#DECLARE ( ... : Text ) // Undefined number of 'Text' parameters\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function myfunction ( ... : Text)\n\n")),(0,n.kt)("p",null,"Lors de la d\xe9claration de plusieurs param\xe8tres, la notation variadique doit \xeatre employ\xe9e en derni\xe8re position, par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"#DECLARE ( param: Real ; ... : Text )\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function myfunction (var1: Integer ; ... : Text)\n")),(0,n.kt)("h4",r({},{id:"exemple"}),"Exemple"),(0,n.kt)("p",null,"Here we have a method called ",(0,n.kt)("inlineCode",{parentName:"p"},"SumNumbers")," that returns the calculated total for all the numbers passed as parameters:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"\n#DECLARE( ... : Real) : Real \n\n\n\nvar $number; $total : Real \n\nFor each ($number; 1; Count parameters)\n    $total+=${$number}\nEnd for each \n\nreturn $total\n\n")),(0,n.kt)("p",null,"Cette m\xe9thode peut \xeatre appel\xe9e avec un nombre variable de param\xe8tres Real. Dans le cas d'un param\xe8tre de type incorrect, une erreur sera renvoy\xe9e avant que la m\xe9thode ne soit ex\xe9cut\xe9e :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'\n$total1:=SumNumbers // returns 0 \n$total2:=SumNumbers(1; 2; 3; 4; 5) // returns 15\n$total3:=SumNumbers(1; 2; "hello"; 4; 5) // error\n\n')),(0,n.kt)("admonition",r({},{title:"Compatibility Note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"The legacy syntax for declaring variadic parameters (",(0,n.kt)("inlineCode",{parentName:"p"},"C_TEXT(${4})"),") is still supported for compatibility but the variadic notation is now preferred.")),(0,n.kt)("h2",r({},{id:"compilation"}),"Compilation"),(0,n.kt)("p",null,"Even if it is not mandatory in ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/interpreted-compiled"}),"interpreted mode"),", you must make sure that all method and function parameters are properly declared as soon as you intend to compile your project."),(0,n.kt)("admonition",r({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"You can delegate the declaration of parameters (as well as all variables) to the compiler by checking the ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Project/compiler#compilation-path"}),(0,n.kt)("strong",{parentName:"a"},"Type the variable")," compilation path option"),". However this option significantly increases compilation time.")),(0,n.kt)("h3",r({},{id:"parameters-declared-in-prototypes"}),"Parameters declared in prototypes"),(0,n.kt)("p",null,"When using the ",(0,n.kt)("inlineCode",{parentName:"p"},"#DECLARE")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"Function")," keywords, parameters are automatically declared and no additional information is needed for the compiler. Exemples :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"#DECLARE($myParam : Text; $myOtherParam : Integer) : Boolean\n    // all method parameters are declared with their type\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"    // On Web Connection Database Method\n#DECLARE ($url : Text; $header : Text; \\\n  $BrowserIP : Text; $ServerIP : Text; \\\n  $user : Text; $password : Text)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"Function add($x : Variant; $y : Integer)-> $result : Integer\n    // all function parameters are declared with their type\n")),(0,n.kt)("admonition",r({},{type:"tip"}),(0,n.kt)("p",{parentName:"admonition"},"Declaring parameters in prototypes is a good practice, even in non-compiled projects.")),(0,n.kt)("h3",r({},{id:"method-parameters-declared-outside-prototypes"}),"Method parameters declared outside prototypes"),(0,n.kt)("p",null,"It can happen that method parameters are not declared in ",(0,n.kt)("inlineCode",{parentName:"p"},"#DECLARE")," prototypes. Such statements can be found in particular in legacy 4D code. In this case, you must configure a ",(0,n.kt)("inlineCode",{parentName:"p"},"Compiler_Methods")," method to gather the declarations for these method parameters."),(0,n.kt)("h4",r({},{id:"compiler_methods-method"}),(0,n.kt)("inlineCode",{parentName:"h4"},"Compiler_Methods")," method"),(0,n.kt)("p",null,"When some method parameters are not declared in ",(0,n.kt)("inlineCode",{parentName:"p"},"#DECLARE")," prototypes, the 4D compiler needs that you declare them in a specific method using a special syntax:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"vous pouvez regrouper tous les param\xe8tres des variables locales des m\xe9thodes projet dans une ou plusieurs m\xe9thode(s) projet"),(0,n.kt)("li",{parentName:"ul"},'the method name(s) must start with "',(0,n.kt)("strong",{parentName:"li"},"Compiler_"),'", by default "Compiler_Methods".'),(0,n.kt)("li",{parentName:"ul"},"within such a method, you predeclare the parameters for each method using the following syntax: ",(0,n.kt)("inlineCode",{parentName:"li"},"C_XXX(methodName;parameter)"),".")),(0,n.kt)("p",null,"Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," // Compiler_Methods\n C_REAL(OneMethodAmongOthers;$1;$2) \n")),(0,n.kt)("admonition",r({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Cette syntaxe n'est pas ex\xe9cutable en mode interpr\xe9t\xe9.")),(0,n.kt)("p",null,"You can create and fill automatically a ",(0,n.kt)("inlineCode",{parentName:"p"},"Compiler_Methods")," method containing all your parameters declared outside prototypes using the ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Project/compiler#compiler-methods-for"}),(0,n.kt)("strong",{parentName:"a"},"Compiler Methods for..."))," ",(0,n.kt)("strong",{parentName:"p"},"Methods")," button in the Compiler Settings dialog box."),(0,n.kt)("admonition",r({},{type:"info"}),(0,n.kt)("h4",r({parentName:"admonition"},{id:"particular-cases"}),"Particular cases"),(0,n.kt)("p",{parentName:"admonition"},'Some contexts do not support declaration in a "Compiler_" method, thus they are handled specifically:'),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Triggers - Le param\xe8tre $0 (Entier long), qui r\xe9sulte d'un trigger, sera typ\xe9 par le compilateur si le param\xe8tre n'a pas \xe9t\xe9 explicitement d\xe9clar\xe9. N\xe9anmoins, si vous souhaitez le d\xe9clarer, vous devez le faire dans le trigger lui-m\xeame.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Form objects that accept the ",(0,n.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event - The $0 parameter (Longint), which is the result of the ",(0,n.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event, is typed by the compiler if the parameter has not been explicitly declared. N\xe9anmoins, si vous souhaitez le d\xe9clarer, vous devez le faire dans la m\xe9thode projet.\n",(0,n.kt)("strong",{parentName:"p"},"Note:")," The compiler does not initialize the $0 parameter. So, as soon as you use the ",(0,n.kt)("inlineCode",{parentName:"p"},"On Drag Over")," form event, you must initialize $0. Par exemple :"))),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"})," C_LONGINT($0)\n If(Form event code=On Drag Over)\n    $0:=0\n    ...\n    If($DataType=Is picture)\n       $0:=-1\n    End if\n    ...\n End if\n"))),(0,n.kt)("h3",r({},{id:"conflicts-between-declarations"}),"Conflicts between declarations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If a parameter is declared in both a ",(0,n.kt)("inlineCode",{parentName:"li"},"#DECLARE")," prototype and a _Compiler",(0,n.kt)("strong",{parentName:"li"}," method, the entry from the  _Compiler")," method is ignored."),(0,n.kt)("li",{parentName:"ul"},"If a parameter is declared in both a ",(0,n.kt)("inlineCode",{parentName:"li"},"#DECLARE")," prototype and a _Compiler__ method but with a different data type, the Code Live Checker generates an error during syntax checking and compilation.")),(0,n.kt)("h2",r({},{id:"type-de-param\xe8tre-erron\xe9"}),"Type de param\xe8tre erron\xe9"),(0,n.kt)("p",null,"Calling a parameter with an wrong type is an ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/error-handling"}),"error")," that prevents correct execution. Par exemple, si vous \xe9crivez les m\xe9thodes suivantes :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// method1\n#DECLARE($value : Text)\n")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// method2\nmethod1(42) //mauvais type, texte attendu\n")),(0,n.kt)("p",null,"Ce cas est trait\xe9 par 4D en fonction du contexte :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"in ",(0,n.kt)("a",r({parentName:"li"},{href:"/docs/fr/Concepts/interpreted-compiled"}),"compiled projects"),", an error is generated at the compilation step whenever possible. Sinon, une erreur est g\xe9n\xe9r\xe9e lorsque la m\xe9thode est appel\xe9e."),(0,n.kt)("li",{parentName:"ul"},"dans les projets interpr\xe9t\xe9s :",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"if the parameter was declared using the ",(0,n.kt)("a",r({parentName:"li"},{href:"#named-parameters"}),"named syntax")," (",(0,n.kt)("inlineCode",{parentName:"li"},"#DECLARE")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"Function"),"), an error is generated when the method is called."),(0,n.kt)("li",{parentName:"ul"},"if the parameter was declared using (",(0,n.kt)("inlineCode",{parentName:"li"},"C_XXX"),"), no error is generated, the called method receives an empty value of the expected type.")))),(0,n.kt)("h2",r({},{id:"utilisation-des-propri\xe9t\xe9s-dobjet-comme-param\xe8tres-nomm\xe9s"}),"Utilisation des propri\xe9t\xe9s d'objet comme param\xe8tres nomm\xe9s"),(0,n.kt)("p",null,"Using objects as parameters allow you to handle ",(0,n.kt)("strong",{parentName:"p"},"named parameters"),". Ce style de programmation est simple, souple et facile \xe0 lire."),(0,n.kt)("p",null,"For example, using the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson")," method:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,n.kt)("p",null,"In the ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," method you can write:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=$para.Age+10\n ALERT($para.Name+" is "+String($para.Age)+" years old.")\n')),(0,n.kt)("p",null,"This provides a powerful way to define ",(0,n.kt)("a",r({parentName:"p"},{href:"#optional-parameters"}),"optional parameters")," (see also below). Pour g\xe9rer les param\xe8tres manquants, vous pouvez :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"check if all expected parameters are provided by comparing them to the ",(0,n.kt)("inlineCode",{parentName:"li"},"Null")," value, or"),(0,n.kt)("li",{parentName:"ul"},"pr\xe9d\xe9finir les valeurs des param\xe8tres, ou"),(0,n.kt)("li",{parentName:"ul"},"les utiliser sous forme de valeurs vides.")),(0,n.kt)("p",null,"In the ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," method above, both Age and Name properties are mandatory and would produce errors if they were missing. Pour \xe9viter cela, vous pouvez simplement \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //ChangeAge\n var $1; $para : Object\n $para:=$1  \n $para.Age:=Num($para.Age)+10\n ALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,n.kt)("p",null,'Les deux param\xe8tres sont alors optionnels. S\'ils ne sont pas renseign\xe9s, le r\xe9sultat sera "a 10 ans", mais aucune erreur ne sera g\xe9n\xe9r\xe9e.'),(0,n.kt)("p",null,"Enfin, les param\xe8tres nomm\xe9s permettent de maintenir et de reproduire des applications en toutes simplicit\xe9 et s\xe9curit\xe9. Imaginez que vous r\xe9alisez, par la suite, qu'ajouter 10 ans n'est pas toujours appropri\xe9. Vous aurez besoin d'un autre param\xe8tre pour d\xe9finir le nombre d'ann\xe9es \xe0 ajouter. Vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'$person:=New object("Name";"Smith";"Age";40;"toAdd";10)\nChangeAge($person)\n\n//ChangeAge\nvar $1;$para : Object\n$para:=$1  \nIf ($para.toAdd=Null)\n    $para.toAdd:=10\nEnd if\n$para.Age:=Num($para.Age)+$para.toAdd\nALERT(String($para.Name)+" is "+String($para.Age)+" years old.")\n')),(0,n.kt)("p",null,"Ici, toute la puissance r\xe9side dans le fait de ne pas avoir \xe0 changer votre code existant. Cela fonctionnera toujours dans l'ancienne version, mais le cas \xe9ch\xe9ant, vous pouvez utiliser une autre valeur que 10 ans."),(0,n.kt)("p",null,"Avec les variables nomm\xe9es, n'importe quel param\xe8tre peut \xeatre optionnel. Dans l'exemple ci-dessus, tous les param\xe8tres sont optionnels et peuvent \xeatre donn\xe9s, dans n'importe quel ordre."),(0,n.kt)("h2",r({},{id:"param\xe8tres-optionnels"}),"Param\xe8tres optionnels"),(0,n.kt)("p",null,"In the ",(0,n.kt)("em",{parentName:"p"},"4D Language Reference")," manual, the { } characters (braces) indicate optional parameters. For example, ",(0,n.kt)("inlineCode",{parentName:"p"},"ALERT (message{; okButtonTitle})")," means that the ",(0,n.kt)("em",{parentName:"p"},"okButtonTitle")," parameter may be omitted when calling the command. Vous pouvez l'appeler comme suit :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'ALERT("Etes*vous s\xfbr?";"Oui, je le suis") //2 param\xe8tres\nALERT("Temps \xe9coul\xe9") //1 param\xe8tre\n')),(0,n.kt)("p",null,"Les m\xe9thodes et les fonctions 4D acceptent \xe9galement de ces param\xe8tres optionnels. Vous pouvez d\xe9clarer un nombre quelconque de param\xe8tres. If you call a method or function with less parameters than declared, missing parameters are processed as default values in the called code, ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/data-types#default-values"}),"according to their type"),". Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'// "concate" function of myClass\nFunction concate ($param1 : Text ; $param2 : Text)->$result : Text\n$result:=$param1+" "+$param2\n')),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  // M\xe9thode appelante\n $class:=cs.myClass.new()\n $class.concate("Hello") // "Hello "\n $class.concate() // Affiche " "\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Vous pouvez \xe9galement appeler une m\xe9thode ou une fonction avec plus de param\xe8tres que ceux d\xe9clar\xe9s. They will be available within the called code through the ",(0,n.kt)("a",r({parentName:"p"},{href:"#parameter-indirection-n"}),"${N} syntax"),".")),(0,n.kt)("p",null,"Using the ",(0,n.kt)("inlineCode",{parentName:"p"},"Count parameters")," command from within the called method, you can detect the actual number of parameters and perform different operations depending on what you have received."),(0,n.kt)("p",null,"L'exemple suivant affiche un message et peut ins\xe9rer le texte dans un document sur disque ou dans une zone 4D Write Pro :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"// APPEND TEXT Project Method\n// APPEND TEXT ( Text { ; Text { ; Object } } )\n// APPEND TEXT ( Message { ; Path { ; 4DWPArea } } )\n \n #DECLARE ($message : Text; $path : Text; $wpArea : Object)\n  \n ALERT($message)\n If(Count parameters>=3)\n    WP SET TEXT($wpArea;$1;wk append)\n Else\n    If(Count parameters>=2)\n       TEXT TO DOCUMENT($path;$message)\n    End if\n End if\n")),(0,n.kt)("p",null,"Une fois que cette m\xe9thode projet a \xe9t\xe9 ajout\xe9e \xe0 votre application, vous pouvez \xe9crire :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"APPEND TEXT(vtSomeText) //Affichera uniquement le message\nAPPEND TEXT(vtSomeText;$path) //Affiche le message et l'annexe au document dans $path\nAPPEND TEXT(vtSomeText;\"\";$wpArea) //Affiche le message et l'\xe9crit dans $wpArea\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"When optional parameters are needed in your methods, you might also consider using ",(0,n.kt)("a",r({parentName:"p"},{href:"#using-objects-properties-as-named-parameters"}),"object properties as named parameters")," which provide a flexible way to handle variable numbers of parameters.")),(0,n.kt)("h2",r({},{id:"valeurs-ou-r\xe9f\xe9rences"}),"Valeurs ou r\xe9f\xe9rences"),(0,n.kt)("p",null,"When you pass a parameter, 4D always evaluates the parameter expression in the context of the calling method and sets the ",(0,n.kt)("strong",{parentName:"p"},"resulting value")," to the local variables in the class function or subroutine. Les variables/param\xe8tres locaux ne correspondent pas aux v\xe9ritables champs, variables ou expressions pass\xe9s par la m\xe9thode appel\xe9e; ils contiennent uniquement les valeurs qui n'ont pas \xe9t\xe9 pass\xe9es. Les variables/param\xe8tres locaux ne correspondent pas aux v\xe9ritables champs, variables ou expressions pass\xe9s par la m\xe9thode appel\xe9e; ils contiennent uniquement les valeurs qui n'ont pas \xe9t\xe9 pass\xe9es. Par exemple :"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Here is some code from the method MY_METHOD\nDO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\nALERT([People]Name)\n \n    //Here is the code of the method DO_SOMETHING\n $1:=Uppercase($1)\n ALERT($1)\n')),(0,n.kt)("p",null,"The alert box displayed by ",(0,n.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING"),' will read "WILLIAMS" and the alert box displayed by ',(0,n.kt)("inlineCode",{parentName:"p"},"MY_METHOD"),' will read "williams". The method locally changed the value of the parameter $1, but this does not affect the value of the field ',(0,n.kt)("inlineCode",{parentName:"p"},"[People]Name")," passed as parameter by the method ",(0,n.kt)("inlineCode",{parentName:"p"},"MY_METHOD"),"."),(0,n.kt)("p",null,"There are two ways to make the method ",(0,n.kt)("inlineCode",{parentName:"p"},"DO_SOMETHING")," change the value of the field:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Plut\xf4t que de passer le champ \xe0 la m\xe9thode, vous lui passez un pointeur :")),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //Here is some code from the method MY_METHOD\n DO_SOMETHING(->[People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Last Name)\n \n  //Here the code of the method DO_SOMETHING\n $1->:=Uppercase($1->)\n ALERT($1->)\n')),(0,n.kt)("p",null,"Ici, le param\xe8tre n'est pas le champ lui-m\xeame, mais un pointeur vers le champ. Therefore, within the ",(0,n.kt)("inlineCode",{parentName:"p"},"DO SOMETHING")," method, $1 is no longer the value of the field but a pointer to the field. The object ",(0,n.kt)("strong",{parentName:"p"},"referenced")," by $1 ($1-> in the code above) is the actual field. Par cons\xe9quent, la modification de l'objet r\xe9f\xe9renc\xe9 d\xe9passe les limites de la sous-routine et le champ lui-m\xeame est affect\xe9. Dans cet exemple, les deux bo\xeetes de dialogue d'alerte afficheront \"WILLIAM\"."),(0,n.kt)("ol",r({},{start:2}),(0,n.kt)("li",{parentName:"ol"},"Rather than having the method ",(0,n.kt)("inlineCode",{parentName:"li"},"DO_SOMETHING"),' "doing something," you can rewrite the method so it returns a value.')),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'    //Here is some code from the method MY METHOD\n [People]Name:=DO_SOMETHING([People]Name) //Let\'s say [People]Name value is "williams"\n ALERT([People]Name)\n\n    //Here the code of the method DO SOMETHING\n $0:=Uppercase($1)\n ALERT($0)\n')),(0,n.kt)("p",null,"This second technique of returning a value by a subroutine is called \u201cusing a function.\u201d This is described in the ",(0,n.kt)("a",{href:"#returning-values"},"Returning values")," paragraph. This is described in the ",(0,n.kt)("a",r({parentName:"p"},{href:"#returning-values"}),"Returning values")," paragraph."),(0,n.kt)("h3",r({},{id:"cas-particuliers--objets-et-collections"}),"Cas particuliers : objets et collections"),(0,n.kt)("p",null,"You need to pay attention to the fact that Object and Collection data types can only be handled through a reference (i.e. an internal ",(0,n.kt)("em",{parentName:"p"},"pointer"),")."),(0,n.kt)("p",null,"Consequently, when using such data types as parameters, ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2...")," do not contain ",(0,n.kt)("em",{parentName:"p"},"values")," but ",(0,n.kt)("em",{parentName:"p"},"references"),". Modifying the value of the ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2...")," parameters within the subroutine will be propagated wherever the source object or collection is used. This is the same principle as for ",(0,n.kt)("a",r({parentName:"p"},{href:"/docs/fr/Concepts/pointer#pointers-as-parameters-to-methods"}),"pointers"),", except that ",(0,n.kt)("inlineCode",{parentName:"p"},"$1, $2...")," parameters do not need to be dereferenced in the subroutine."),(0,n.kt)("p",null,"For example, consider the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson")," method that creates an object and sends it as a parameter:"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'  //CreatePerson\n var $person : Object\n $person:=New object("Name";"Smith";"Age";40)\n ChangeAge($person)\n ALERT(String($person.Age))  \n')),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"ChangeAge")," method adds 10 to the Age attribute of the received object"),(0,n.kt)("pre",null,(0,n.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"  //ChangeAge\n #DECLARE ($person : Object)\n $person.Age:=$person.Age+10\n ALERT(String($person.Age))\n")),(0,n.kt)("p",null,"When you execute the ",(0,n.kt)("inlineCode",{parentName:"p"},"CreatePerson"),' method, both alert boxes will read "50" since the same object reference is handled by both methods.'),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"4D Server:"),' When parameters are passed between methods that are not executed on the same machine (using for example the "Execute on Server" option), references are not usable. Dans ce cas, ce sont des copies des param\xe8tres objet ou collection qui sont envoy\xe9es au lieu de r\xe9f\xe9rences.'))}u.isMDXComponent=!0}}]);