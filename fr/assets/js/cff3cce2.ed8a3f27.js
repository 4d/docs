"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99770],{901813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var s=t(474848),o=t(28453);const r={id:"blob",title:"BLOB"},a=void 0,l={id:"Concepts/blob",title:"BLOB",description:"- Un champ, une variable ou une expression de type BLOB (Binary Large OBjects) est une s\xe9rie contigu\xeb d'octets qui peut \xeatre trait\xe9e comme un seul objet ou dont les octets peuvent \xeatre adress\xe9s individuellement. Un BLOB peut \xeatre vide (longueur nulle) ou contenir jusqu'\xe0 2147483647 octets (2 Go).",source:"@site/i18n/fr/docusaurus-plugin-content-docs/version-18/Concepts/dt_blob.md",sourceDirName:"Concepts",slug:"/Concepts/blob",permalink:"/docs/fr/18/Concepts/blob",draft:!1,unlisted:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fdt_blob.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"blob",title:"BLOB"},sidebar:"docs",previous:{title:"Types de donn\xe9es",permalink:"/docs/fr/18/Concepts/data-types"},next:{title:"Boolean",permalink:"/docs/fr/18/Concepts/boolean"}},u={},i=[{value:"Passage des param\xe8tres, pointeurs et r\xe9sultats de fonctions",id:"passage-des-param\xe8tres-pointeurs-et-r\xe9sultats-de-fonctions",level:2},{value:"Op\xe9rateur d&#39;affectation",id:"op\xe9rateur-daffectation",level:2},{value:"Adresser le contenu d&#39;un BLOB",id:"adresser-le-contenu-dun-blob",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Un champ, une variable ou une expression de type BLOB (Binary Large OBjects) est une s\xe9rie contigu\xeb d'octets qui peut \xeatre trait\xe9e comme un seul objet ou dont les octets peuvent \xeatre adress\xe9s individuellement. Un BLOB peut \xeatre vide (longueur nulle) ou contenir jusqu'\xe0 2147483647 octets (2 Go)."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Par d\xe9faut, la taille maximale d'un blob dans 4D est de 2 Go, mais cette taille peut \xeatre inf\xe9rieure en fonction de votre OS et l'espace m\xe9moire disponible."}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lorsque vous travaillez avec un BLOB, il est stock\xe9 enti\xe8rement en m\xe9moire. Si vous travaillez avec une variable, le BLOB n'existe qu'en m\xe9moire. Si vous travaillez avec un champ de type BLOB, il est charg\xe9 en m\xe9moire \xe0 partir du disque, comme le reste de l'enregistrement auquel il appartient."}),"\n",(0,s.jsxs)(n.li,{children:["A l'instar des autres types de champs pouvant contenir une grande quantit\xe9 de donn\xe9es (comme les champs de type Image), les champs de type BLOB ne sont pas dupliqu\xe9s en m\xe9moire lorsque vous modifiez un enregistrement. Par cons\xe9quent, les r\xe9sultats renvoy\xe9s par ",(0,s.jsx)(n.code,{children:"Ancien"})," et ",(0,s.jsx)(n.code,{children:"Modifie"})," ne sont pas significatifs lorsque ces fonctions sont appliqu\xe9es \xe0 des champs de type BLOB."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"passage-des-param\xe8tres-pointeurs-et-r\xe9sultats-de-fonctions",children:"Passage des param\xe8tres, pointeurs et r\xe9sultats de fonctions"}),"\n",(0,s.jsx)(n.p,{children:"Les BLOBs dans 4D peuvent \xeatre pass\xe9s comme param\xe8tres aux commandes 4D ou aux routines des plug-ins qui attendent un param\xe8tre de type BLOB. Les BLOBs peuvent \xe9galement \xeatre pass\xe9s aux m\xe9thodes que vous cr\xe9ez ou \xeatre retourn\xe9s comme r\xe9sultats de fonctions."}),"\n",(0,s.jsx)(n.p,{children:"Pour passer un BLOB \xe0 une de vos m\xe9thodes, vous pouvez aussi d\xe9finir un pointeur vers le BLOB et passer le pointeur comme param\xe8tre."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Exemples :"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"  // D\xe9clarer une variable de type BLOB\n C_BLOB(touteVarBLOB)\n  // Le BLOB est pass\xe9 comme param\xe8tre \xe0 une commande 4D\n SET BLOB SIZE(touteVarBLOB;1024*1024)\n  // Le BLOB est pass\xe9 comme param\xe8tre \xe0 une routine externe\n $CodeErr:=Faites_Quelque_chose_avec_ce_BLOB(touteVarBLOB)\n  // Le BLOB est pass\xe9 comme param\xe8tre \xe0 une m\xe9thode qui retourne un BLOB\n C_BLOB(recupBlob)\n recupBlob:=Remplir_Blob(touteVarBLOB)\n  // Un pointeur vers le BLOB est pass\xe9 comme param\xe8tre \xe0 une de vos m\xe9thodes\n COMPUTE BLOB(->touteVarBLOB)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note pour les d\xe9veloppeurs de plug ins 4D :"})," Un param\xe8tre de type BLOB se d\xe9clare \u201c&O\u201d (la lettre \u201cO\u201d et non le chiffre \u201c0\u201d)."]}),"\n",(0,s.jsx)(n.h2,{id:"op\xe9rateur-daffectation",children:"Op\xe9rateur d'affectation"}),"\n",(0,s.jsx)(n.p,{children:"Vous pouvez assigner la valeur d'un BLOB \xe0 d'autres BLOBs, comme dans l'exemple suivant."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Voici un exemple :"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"  // D\xe9clarer deux variables de type BLOB\n C_BLOB(vBlobA;vBlobB)\n  // Fixer la taille du premier BLOB \xe0 10Ko\n SET BLOB SIZE(vBlobA;10*1024)\n  // Assigner le premier BLOB au second\n vBlobB:=vBlobA\n"})}),"\n",(0,s.jsx)(n.p,{children:"En revanche, il n'existe pas d'op\xe9rateur pouvant \xeatre utilis\xe9 avec des BLOB."}),"\n",(0,s.jsx)(n.h2,{id:"adresser-le-contenu-dun-blob",children:"Adresser le contenu d'un BLOB"}),"\n",(0,s.jsx)(n.p,{children:"Chaque octet d'un BLOB peut \xeatre adress\xe9 individuellement, \xe0 l'aide des accolades {...}. Dans un BLOB, les octets sont num\xe9rot\xe9s de 0 \xe0 N-1, N \xe9tant la taille du BLOB. Voici un exemple :"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-4d",children:"  // D\xe9clarer une variable de type BLOB\n C_BLOB(vBlob)\n  // Fixer la taille du BLOB \xe0 256 octets\n SET BLOB SIZE(vBlob;256)\n  // La boucle suivante initialise les 256 octets du BLOB \xe0 z\xe9ro\n Boucle(vOctet;0;Taille BLOB(vBlob)-1)\n    vBlob{vOctet}:=0\n Fin de boucle\n"})}),"\n",(0,s.jsx)(n.p,{children:"Comme vous pouvez adresser individuellement tous les octets d'un BLOB, vous pouvez litt\xe9ralement stocker tout ce que vous voulez dans une variable ou un champ de type BLOB."})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(296540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);