{
	"4D": {
		"Blob": {
			"new()": {
				"Syntax": "**4D.Blob.new()** : 4D.Blob<br/>**4D.Blob.new**( *blobScal* : Blob ) : 4D.Blob<br/>**4D.Blob.new**( *blobObj* : 4D.Blob ) : 4D.Blob",
				"Params": [
					[
						"blob",
						"BLOB または 4D.Blob",
						"->",
						"コピーする BLOB"
					],
					[
						"戻り値",
						"4D.Blob",
						"<-",
						"新規 4D.Blob"
					]
				],
				"Summary": "は新規の `4D.Blob` オブジェクトを作成し、(任意) 別の BLOBデータ (スカラーBLOB または `4D.Blob`) のコピーを格納します"
			}
		},
		"CryptoKey": {
			"new()": {
				"Syntax": "**4D.CryptoKey.new**( *settings* : Object ) : 4D.CryptoKey",
				"Params": [
					[
						"settings",
						"Object",
						"->",
						"キーペアを生成またはロードするための設定"
					],
					[
						"戻り値",
						"4D.CryptoKey",
						"<-",
						"暗号化キーペアをカプセル化したオブジェクト"
					]
				],
				"Summary": "暗号化キーペアをカプセル化する `4D.CryptoKey` オブジェクトを新規作成します"
			}
		},
		"File": {
			"new()": {
				"Syntax": "**4D.File.new** ( *path* : Text { ; *pathType* : Integer } ) : 4D.File<br/>**4D.File.new** ( *fileConstant* : Integer ) : 4D.File",
				"Summary": "`4D.File` 型の新しいオブジェクトを作成して返します"
			}
		},
		"Folder": {
			"new()": {
				"Syntax": "**4D.Folder.new** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**4D.Folder.new** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
				"Summary": "`4D.Folder` 型の新しいオブジェクトを作成して返します"
			}
		},
		"HTTPAgent": {
			"new()": {
				"Syntax": "**4D.HTTPAgent.new**( { *options* : Object } ) : 4D.HTTPAgent",
				"Params": [
					[
						"options",
						"Object",
						"->",
						"HTTPAgent のデフォルトのオプション"
					],
					[
						"戻り値",
						"4D.HTTPAgent",
						"<-",
						"新規 HTTPAgent オブジェクト"
					]
				],
				"Summary": "*options* 引数で定義される設定で共有可能な HTTPAgent オブジェクトを作成し、`4D.HTTPAgent` オブジェクトを返します"
			}
		},
		"HTTPRequest": {
			"new()": {
				"Syntax": "**4D.HTTPRequest.new**( *url* : Text { ; *options* : Object } ) : 4D.HTTPRequest",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"リクエストの送信先URL"
					],
					[
						"options",
						"Object",
						"->",
						"リクエスト設定プロパティ"
					],
					[
						"戻り値",
						"4D.HTTPRequest",
						"<-",
						"新規 HTTPRequest オブジェクト"
					]
				],
				"Summary": "*options* 引数で指定した設定に基づいて HTTPリクエストを作成し、*url* 引数で定義される HTTPサーバーに送信して、`4D.HTTPRequest` オブジェクトを返します"
			}
		},
		"IMAPTransporter": {
			"new()": {
				"Syntax": "**4D.IMAPTransporter.new**( *server* : Object ) : 4D.IMAPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"メールサーバー情報"
					],
					[
						"戻り値",
						"4D.IMAPTransporter",
						"<-",
						"IMAP transporter オブジェクト"
					]
				],
				"Summary": "新規の `4D.IMAPTransporter`型オブジェクトを作成して返します"
			}
		},
		"MailAttachment": {
			"new()": {
				"Syntax": "**4D.MailAttachment.new**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
				"Params": [
					[
						"file",
						"4D.File",
						"->",
						"添付ファイル"
					],
					[
						"zipFile",
						"4D.ZipFile",
						"->",
						"添付 Zipファイル"
					],
					[
						"blob",
						"4D.Blob",
						"->",
						"添付を格納した BLOB"
					],
					[
						"path",
						"Text",
						"->",
						"添付ファイルのパス"
					],
					[
						"name",
						"Text",
						"->",
						"メールクライアントが添付を指定するのに使用する名前 + 拡張子"
					],
					[
						"cid",
						"Text",
						"->",
						"添付の ID (HTMLメッセージのみ)、あるいは cid が不要な場合は \"\" (空の文字列)"
					],
					[
						"type",
						"Text",
						"->",
						"content-type ヘッダーの値"
					],
					[
						"disposition",
						"Text",
						"->",
						"content-disposition ヘッダーの値: \"inline\" あるいは \"attachment\""
					],
					[
						"戻り値",
						"4D.MailAttachment",
						"<-",
						"Attachment オブジェクト"
					]
				],
				"Summary": "`4D.MailAttachment` 型の新規オブジェクト作成して返します"
			}
		},
		"POP3Transporter": {
			"new()": {
				"Syntax": "**4D.POP3Transporter.new**( *server* : Object ) : 4D.POP3Transporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"メールサーバー情報"
					],
					[
						"戻り値",
						"4D.POP3Transporter",
						"<-",
						"POP3 transporter オブジェクト"
					]
				],
				"Summary": "新規の `4D.POP3Transporter`型オブジェクトを作成して返します"
			}
		},
		"SMTPTransporter": {
			"new()": {
				"Syntax": "**4D.SMTPTransporter.new**( *server* : Object ) : 4D.SMTPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"メールサーバー情報"
					],
					[
						"戻り値",
						"4D.SMTPTransporter",
						"<-",
						"SMTP transporter object"
					]
				],
				"Summary": "新規の `4D.SMTPTransporter`型オブジェクトを作成して返します"
			}
		},
		"SystemWorker": {
			"new()": {
				"Syntax": "**4D.SystemWorker.new** ( *commandLine* : Text { ; options : Object } ) : 4D.SystemWorker",
				"Params": [
					[
						"commandLine",
						"Text",
						"->",
						"実行するコマンドライン"
					],
					[
						"options",
						"Object",
						"->",
						"ワーカーパラメーター"
					],
					[
						"戻り値",
						"4D.SystemWorker",
						"<-",
						"非同期の新規システムワーカー (プロセスが開始されなかった場合は null)"
					]
				],
				"Summary": "外部プロセスを開始するために *commandLine* に渡したコマンドラインを実行する `4D.SystemWorker` オブジェクトを作成し、返します"
			}
		},
		"TCPConnection": {
			"new()": {
				"Syntax": "**4D.TCPConnection.new**( *serverAddress* : Text ; *serverPort* : Number ; *options* : Object  ) : 4D.TCPConnection",
				"params": [
					[
						"serverAddress",
						"Text",
						"->",
						"サーバーのドメイン名またはIP アドレス"
					],
					[
						"serverPort",
						"Integer",
						"->",
						"サーバーのポート番号"
					],
					[
						"options",
						"Object",
						"->",
						"接続の設定オプション"
					],
					[
						"戻り値",
						"4D.TCPConnection",
						"<-",
						"新しいTCPConnection オブジェクト"
					]
				],
				"Summary": "creates a new TCP connection to the specified *serverAddress* and *serverPort*, using the defined *options*, and returns a `4D.TCPConnection` object"
			}
		},
		"TCPListener": {
			"new()": {
				"Syntax": "**4D.TCPListener.new**( *port* : Number ; *options* : Object  ) : 4D.TCPListener",
				"params": [
					[
						"port",
						"Number",
						"->",
						"リッスンするTCP ポート番号"
					],
					[
						"options",
						"Object",
						"->",
						"リスナーの設定オプション"
					],
					[
						"戻り値",
						"4D.TCPListener",
						"<-",
						"新規TCPListener オブジェクト"
					]
				],
				"Summary": "*port* 引数で指定したポートをリッスンする新規のサーバーを、*options* 引数で定義されたオプションを使用して作成し、`4D.TCPListener` オブジェクトを返します"
			}
		},
		"UDPSocket": {
			"new()": {
				"Syntax": "**4D.UDPSocket.new**() : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *options* : Object ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ; *options* : Object ) : 4D.UDPSocket",
				"params": [
					[
						"port",
						"Integer",
						"->",
						"UDP ソケットに使用されるローカルのポート番号(0 または省略時には使用されていないポートを探して使用)"
					],
					[
						"options",
						"Object",
						"->",
						"ソケットの接続オプション"
					],
					[
						"戻り値",
						"UDPSocket",
						"<-",
						"新規UDPSocket オブジェクト"
					]
				],
				"Summary": "creates a new UDP socket using the defined *options* (if any) on the specified *port* (if any) or on a random unused port, and returns a `4D.UDPSocket` object"
			}
		},
		"Vector": {
			"new()": {
				"Syntax": "**4D.Vector.new** ( *parameter* : Collection ) : 4D.Vector",
				"Params": [
					[
						"引数",
						"実数のCollection",
						"->",
						"ベクトルを表せる実数値のコレクション"
					],
					[
						"戻り値",
						"4D.Vector",
						"<-",
						"新規ベクトルオブジェクト"
					]
				],
				"Summary": "新しい`4D.Vector`型のオブジェクト作成して返します"
			}
		},
		"WebSocket": {
			"new()": {
				"Syntax": "**4D.WebSocket.new**( *url* : Text { ; *connectionHandler* : Object } ) : 4D.WebSocket",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"接続先の URL"
					],
					[
						"connectionHandler",
						"Object",
						"->",
						"WebSocket用コールバックを宣言しているオブジェクト"
					],
					[
						"戻り値",
						"4D.WebSocket",
						"<-",
						"新しい WebSocket オブジェクト"
					]
				],
				"Summary": "*url* で指定したアドレスの WebSocketサーバーに接続された新しい `4D.WebSocket` オブジェクト を作成して返します"
			}
		},
		"WebSocketServer": {
			"new()": {
				"Syntax": "**4D.WebSocketServer.new**( *WSSHandler* : Object { ; *options* : Object } ) : 4D.WebSocketServer",
				"Params": [
					[
						"WSSHandler",
						"Object",
						"->",
						"WebSocketサーバー用コールバックを宣言しているユーザークラスのオブジェクト"
					],
					[
						"options",
						"Object",
						"->",
						"WebSocket の設定パラメーター"
					],
					[
						"戻り値",
						"4D.WebSocketServer",
						"<-",
						"新しい WebSocketServer オブジェクト"
					]
				],
				"Summary": "指定した *WSSHandler* コールバックと、*options* の設定 (任意) を使用して WebSocketサーバーを作成および起動し、`4D.WebSocketServer` オブジェクトを返します"
			}
		}
	},
	"Blob": {
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "`4D.Blob` のサイズを返します (バイト単位)"
		},
		"slice()": {
			"Syntax": "**.slice()** : 4D.Blob<br/>**.slice**( *start* : Real ) : 4D.Blob<br/>**.slice**( *start* : Real; *end* : Real ) : 4D.Blob",
			"Params": [
				[
					"start",
					"Real",
					"->",
					"新しい `4D.Blob` に含める最初のバイトのインデックス"
				],
				[
					"end",
					"Real",
					"->",
					"新しい `4D.Blob` に含めない最初のバイトのインデックス"
				],
				[
					"戻り値",
					"4D.Blob",
					"<-",
					"新規 `4D.Blob`"
				]
			],
			"Summary": "呼び出し対象である BLOB のデータの一部を参照する新規の `4D.Blob` を作成して返します。 元の BLOB は変更されません。"
		}
	},
	"Class": {
		"isSessionSingleton": {
			"Syntax": "**.isSessionSingleton** : Boolean",
			"Summary": "ユーザークラスが セッションシングルトンクラスとして定義されている場合は `true` を返します"
		},
		"isShared": {
			"Syntax": "**.isShared** : Boolean",
			"Summary": "ユーザークラスが 共有クラスとして定義されている場合は `true` を返します"
		},
		"isSingleton": {
			"Syntax": "**.isSingleton** : Boolean",
			"Summary": "ユーザークラスが シングルトンクラスとして定義されている場合は `true` を返します"
		},
		"me": {
			"Syntax": "**.me** : 4D.Object",
			"Summary": "`cs.className` シングルトンクラスのシングルトンインスタンスを返します"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "`4D.Class` オブジェクトの名称を格納します"
		},
		"new()": {
			"Syntax": "**.new**( { *...param* : any } ) : 4D.Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"コンストラクター関数に渡す引数"
				],
				[
					"戻り値",
					"4D.Object",
					"<-",
					"クラスの新規オブジェクト"
				]
			],
			"Summary": "対象クラスの新規インスタンスである `cs.className` オブジェクトを作成して返します"
		},
		"superclass": {
			"Syntax": "**.superclass** : 4D.Class",
			"Summary": "対象クラスの親クラスを返します"
		}
	},
	"Collection": {
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : any",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"取得する要素のインデックス"
				],
				[
					"戻り値",
					"any",
					"<-",
					"そのインデックスにある要素"
				]
			],
			"Summary": "*index* の位置にある要素を返します (*index* は正負の整数)"
		},
		"average()": {
			"Syntax": "**.average**( {*propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Real, Undefined",
					"<-",
					"コレクションの値の算術平均"
				]
			],
			"Summary": "コレクションインスタンス内で定義されている値の算術平均を返します"
		},
		"clear()": {
			"Syntax": "**.clear()** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"全要素が削除された元のコレクション"
				]
			],
			"Summary": "コレクションインスタンス内の全要素を削除し、空のコレクションを返します"
		},
		"combine()": {
			"Syntax": "**.combine**( *col2* : Collection {; *index* : Integer } ) : Collection",
			"Params": [
				[
					"col2",
					"Collection",
					"->",
					"追加するコレクション"
				],
				[
					"index",
					"Integer",
					"->",
					"追加要素を挿入する位置 (デフォルトは length+1)"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"追加要素を格納した元のコレクション"
				]
			],
			"Summary": "コレクションインスタンスの最後、あるいは *index* で指定した位置に *col2* の要素を挿入し、変更された元のコレクションを返します"
		},
		"concat()": {
			"Syntax": "**.concat**( *value* : any { *;...valueN* } ) : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Object, Collection, Date, Time, Boolean, Picture",
					"->",
					"連結する値。 *value* がコレクションの場合、コレクションの全要素が元のコレクションに追加されます。"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"元のコレクションに値が追加された新規コレクション"
				]
			],
			"Summary": "*value* に指定した要素を元のコレクションの最後に追加した、新しいコレクションを返します"
		},
		"copy()": {
			"Syntax": "**.copy**() : Collection<br/>**.copy**( *option* : Integer ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithCol* : Collection ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithObj* : Object ) : Collection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck resolve pointers`: コピー前にポインターを解決する<br/>`ck shared`: 共有コレクションを返す"
				],
				[
					"groupWithCol",
					"Collection",
					"->",
					"結果のコレクションとグループする共有コレクション"
				],
				[
					"groupWithObj",
					"Object",
					"->",
					"結果のコレクションとグループする共有オブジェクト"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"元のコレクションのディープ・コピー"
				]
			],
			"Summary": "コレクションインスタンスのディープ・コピーを返します"
		},
		"count()": {
			"Syntax": "**.count**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"コレクション内の要素の数"
				]
			],
			"Summary": "コレクション内の、null ではない要素の個数を返します"
		},
		"countValues()": {
			"Syntax": "**.countValues**( *value* : any {; *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"value",
					"Text, Number, Boolean, Date, Object, Collection",
					"->",
					"数える値"
				],
				[
					"propertyPath",
					"Text",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"値の出現回数"
				]
			],
			"Summary": "*value* 引数に指定した値がコレクション内において見つかった回数を返します"
		},
		"distinct()": {
			"Syntax": "**.distinct**( {*options* : Integer} ) : Collection<br/>**.distinct**( *propertyPath* : Text {; *options* : Integer } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"重複しない値を取得する属性のパス"
				],
				[
					"options",
					"Integer",
					"->",
					"`ck diacritical`, `ck count values`"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"重複しない値のみを格納した新規コレクション"
				]
			],
			"Summary": "元のコレクションから重複しない (異なる) 値のみを格納した新しいコレクションを返します"
		},
		"equal()": {
			"Syntax": "**.equal**( *collection2* : Collection {; *option* : Integer } ) : Boolean",
			"Params": [
				[
					"collection2",
					"Collection",
					"->",
					"比較するコレクション"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck diacritical`: アクセント等の発音区別符号を無視しない評価 (たとえば \"A\" # \"a\")"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"コレクションが同一の場合には true、それ以外は false"
				]
			],
			"Summary": "コレクションの内容と *collection2* を再帰的に比較し (ディープ比較)、同一であれば **true** を返します"
		},
		"every()": {
			"Syntax": "**.every**( { *startFrom* : Integer ; } *formula* : 4D.Function { ;*...param* : any } ) : Boolean<br/>**.every**( { *startFrom* : Integer ; } *methodName* : Text { ;*...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"テストを開始するインデックス"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*formula* または *methodName* に渡す引数"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"すべての要素がテストをパスすれば true"
				]
			],
			"Summary": "コレクション内の全要素が、*formula* オブジェクトまたは *methodName* に指定したメソッドで実装されたテストにパスした場合には **true** を返します"
		},
		"extract()": {
			"Syntax": "**.extract**( *propertyPath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *propertyPath* : Text ;  *targetPath* : Text  { ;...*propertyPathOrTargetPathN* : Text } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"新しいコレクションに抽出する値のオブジェクトプロパティパス"
				],
				[
					"targetpath",
					"Text",
					"->",
					"抽出先のプロパティパスあるいはプロパティ名"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: 返されるコレクションに null プロパティを含めます (デフォルトでは無視されます)。 *targetPath* を渡した場合には、この引数は無視されます。"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"抽出した値を格納した新しいコレクション"
				]
			],
			"Summary": "元のオブジェクトのコレクションから、*propertyPath* 引数が指定するプロパティ値を抽出し、新しいコレクションに格納して返します"
		},
		"fill()": {
			"Syntax": "**.fill**( *value* : any ) : Collection<br/>**.fill**( *value* : any ;  *startFrom*  : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"value",
					"number, Text, Collection, Object, Date, Boolean",
					"->",
					"代入する値"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"開始インデックス (含まれる)"
				],
				[
					"end",
					"Integer",
					"->",
					"終了インデックス (含まれない)"
				],
				[
					"戻り値",
					"collection",
					"<-",
					"値が代入された元のコレクション"
				]
			],
			"Summary": "コレクションを *value* 引数の値で満たし、同コレクションを返します。オプションとして、*startFrom* および *end* インデックスを渡して代入開始位置および終了位置を指定することもできます"
		},
		"filter()": {
			"Syntax": "**.filter**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.filter**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*formula* または *methodName* に渡す引数"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"フィルターされた要素を格納した新しいコレクション(シャロウ・コピー)"
				]
			],
			"Summary": "元のコレクション要素のうち、*formula* または *methodName*　の結果が **true** になる要素をすべて格納した新しいコレクションを返します"
		},
		"find()": {
			"Syntax": "**.find**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : any<br/>**.find**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : any",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"検索を開始するインデックス"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*formula* または *methodName* に渡す引数"
				],
				[
					"戻り値",
					"any",
					"<-",
					"最初に見つかった値。見つからなかった場合には Undefined"
				]
			],
			"Summary": "*formula* 引数のフォーミュラまたは *methodName* 引数のメソッドを各コレクション要素に適用して、**true** を返す最初の要素を返します"
		},
		"findIndex()": {
			"Syntax": "**.findIndex**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : Integer<br/>**.findIndex**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : Integer",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"検索を開始するインデックス"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*formula* または *methodName* に渡す引数"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"最初に見つかった値のインデックス。見つからなかった場合には -1"
				]
			],
			"Summary": "*formula* 引数のフォーミュラまたは *methodName* 引数のメソッドを各コレクション要素に適用して、**true** を返す最初の要素のインデックスを返します"
		},
		"first()": {
			"Syntax": "**.first**() : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"コレクションの先頭要素"
				]
			],
			"Summary": "コレクションの先頭要素を返します"
		},
		"flat()": {
			"Syntax": "**.flat**( { *depth* : Integer } ) : Collection",
			"Params": [
				[
					"depth",
					"Integer",
					"->",
					"ネストされたコレクションの階層をどの範囲まで平坦化するか。 デフォルト = 1"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"平坦化されたコレクション"
				]
			],
			"Summary": "*depth* に指定した階層の深さまで、すべてのサブコレクション要素を再帰的に連結した新しいコレクションを作成します"
		},
		"flatMap()": {
			"Syntax": "**.flatMap**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.flatMap**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*formula* または *methodName* に渡す引数"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"変換された値を格納し、1レベルのネストが解除された新しいコレクション"
				]
			],
			"Summary": "元のコレクションの各要素に対して *formula* または *methodName* を呼び出した結果に基づき、1レベルのネストが解除された新しいコレクションを作成します"
		},
		"includes()": {
			"Syntax": "**.includes**( *toSearch* : expression { ; *startFrom* : Integer } ) : Boolean",
			"Params": [
				[
					"toSearch",
					"式",
					"->",
					"コレクション内を検索する式"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"検索を開始するインデックス"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"*toSearch* がコレクションにある場合は true。"
				]
			],
			"Summary": "*toSearch* に指定した式がコレクション内で見つかれば **true** を、そうでなければ **false** を返します"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**(  *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"式",
					"->",
					"コレクション内を検索する式"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"検索を開始するインデックス"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"最初に見つかった toSearch のインデックス。見つからなかった場合には -1"
				]
			],
			"Summary": "*toSearch* 引数の式をコレクション要素の中から検索し、最初に見つかった要素のインデックス (見つからなかった場合には -1) を返します"
		},
		"indices()": {
			"Syntax": "**.indices**(  *queryString* : Text { ; *...value* : any } ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"検索条件"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー使用時: 比較する値"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"queryString に合致するコレクション要素のインデックス"
				]
			],
			"Summary": "*queryString* 引数の検索条件に合致する、元のコレクション要素のインデックスを返します"
		},
		"insert()": {
			"Syntax": "**.insert**( *index* : Integer ; *element* : any ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"要素の挿入位置"
				],
				[
					"element",
					"any",
					"->",
					"コレクションに挿入する要素"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"要素の挿入された元のコレクション"
				]
			],
			"Summary": "*index* で指定したコレクションインスタンスの位置に *element* 要素を挿入し、変更された元のコレクションを返します"
		},
		"join()": {
			"Syntax": "**.join**( *delimiter* : Text { ; *option* : Integer } ) : Text",
			"Params": [
				[
					"delimiter",
					"Text",
					"->",
					"要素間に用いる区切り文字"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck ignore null or empty`: 戻り値に null と空の文字列を含めない"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"区切り文字を使ってコレクションの全要素をつなげた文字列"
				]
			],
			"Summary": "*delimiter* に渡した文字列を区切り文字として、コレクションの全要素を一つの文字列につなげます"
		},
		"last()": {
			"Syntax": "**.last**() : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"コレクションの最後の要素"
				]
			],
			"Summary": "コレクションの最後の要素を返します"
		},
		"lastIndexOf()": {
			"Syntax": "**.lastIndexOf**( *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"式",
					"->",
					"コレクション内を検索する要素"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"検索を開始するインデックス"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"最後に見つかった toSearch のインデックス。見つからなかった場合には -1"
				]
			],
			"Summary": "toSearch 引数の式をコレクション要素の中から検索し、最後に見つかった要素のインデックス (見つからなかった場合には -1) を返します"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "コレクション内の要素数を返します"
		},
		"map()": {
			"Syntax": "**.map**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.map**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"*formula* または *methodName* に渡す引数"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"変換された値を格納する新しいコレクション"
				]
			],
			"Summary": "元のコレクションの各要素に対して *formula* または *methodName* を呼び出した結果に基づいた、新しいコレクションを作成します"
		},
		"max()": {
			"Syntax": "**.max**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"評価するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"コレクション内の最大値"
				]
			],
			"Summary": "コレクション内の最大値を持つ要素を返します"
		},
		"min()": {
			"Syntax": "**.min**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"評価するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"コレクション内の最小値"
				]
			],
			"Summary": "コレクション内の最小値を持つ要素を返します"
		},
		"multiSort()": {
			"Syntax": "**.multiSort**() : Collection<br/>**.multiSort**( *colsToSort* : Collection ) : Collection<br/>**.multiSort**( *formula* : 4D.Function ; *colsToSort* : Collection ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"colsToSort",
					"Collection",
					"->",
					"コレクションのコレクション、または {`collection`:*colToSort*;`order`:`ck ascending` / `ck descending`} プロパティを持つオブジェクトのコレクション"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"並べ替えられた元のコレクション"
				]
			],
			"Summary": "複数のコレクションに対して複数レベルの同期ソートを実行します"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( ) : Collection<br/>**.orderBy**( *pathStrings* : Text ) : Collection<br/>**.orderBy**( *pathObjects* : Collection ) : Collection<br/>**.orderBy**( *ascOrDesc* : Integer ) : Collection",
			"Params": [
				[
					"pathStrings",
					"Text",
					"->",
					"コレクションの並べ替え基準とするプロパティパス"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"条件オブジェクトのコレクション"
				],
				[
					"ascOrDesc",
					"Integer",
					"->",
					"`ck ascending` または `ck descending` (スカラー値)"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"並べ替えられたコレクションのコピー (シャロウ・コピー)"
				]
			],
			"Summary": "コレクションの要素を指定順に並べ替えた新しいコレクションを返します"
		},
		"orderByMethod()": {
			"Syntax": "**.orderByMethod**( *formula* : 4D.Function { ; ...*extraParam* : expression } ) : Collection<br/>**.orderByMethod**( *methodName* : Text { ; ...*extraParam* : expression } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"extraParam",
					"any",
					"->",
					"渡す引数"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"並べ替えられたコレクションのコピー (シャロウ・コピー)"
				]
			],
			"Summary": "*formula* または *methodName* によって定義された順番でコレクション要素を並べ替えた新しいコレクションを返します"
		},
		"pop()": {
			"Syntax": "**.pop()** : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"コレクションの最後の要素"
				]
			],
			"Summary": "コレクションから最後の要素を取り除き、それを戻り値として返します"
		},
		"push()": {
			"Syntax": "**.push**( *element* : any { ;...*elementN* } ) : Collection",
			"Params": [
				[
					"element",
					"any",
					"->",
					"コレクションに追加する要素"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"要素の追加された元のコレクション"
				]
			],
			"Summary": "一つ以上の *element* 引数をコレクションインスタンスの最後に追加し、変更された元のコレクションを返します"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text ) : Collection<br/>**.query**( *queryString* : Text ; *...value* : any ) : Collection<br/>**.query**( *queryString* : Text ; *querySettings* : Object ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"検索条件"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー使用時: 比較する値"
				],
				[
					"querySettings",
					"Object",
					"->",
					"クエリオプション: parameters, attributes 他"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"queryString に合致するコレクション要素"
				]
			],
			"Summary": "検索条件に合致するオブジェクトコレクションの要素をすべて返します"
		},
		"reduce()": {
			"Syntax": "**.reduce**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduce**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"*formula* または *methodName* の最初の呼び出しに最初の引数として使用する値"
				],
				[
					"param",
					"式",
					"->",
					"渡す引数"
				],
				[
					"戻り値",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"アキュムレーター値の結果"
				]
			],
			"Summary": "*formula* または *methodName* コールバックをアキュムレーターおよびコレクションの各要素に (左から右へ) 適用して、単一の値にまとめます"
		},
		"reduceRight()": {
			"Syntax": "**.reduceRight**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduceRight**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"*formula* または *methodName* の最初の呼び出しに最初の引数として使用する値"
				],
				[
					"param",
					"式",
					"->",
					"渡す引数"
				],
				[
					"戻り値",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"アキュムレーター値の結果"
				]
			],
			"Summary": "*formula* または *methodName* コールバックをアキュムレーターおよびコレクションの各要素に (右から左へ) 適用して、単一の値にまとめます"
		},
		"remove()": {
			"Syntax": "**.remove**( *index* : Integer { ; *howMany* : Integer } ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"削除を開始する要素の位置"
				],
				[
					"howMany",
					"Integer",
					"->",
					"削除する要素の数、省略時は 1要素を削除"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"要素が削除された元のコレクション"
				]
			],
			"Summary": "*index* で指定した位置から一つまた複数のコレクション要素を削除し、変更されたコレクションを返します"
		},
		"resize()": {
			"Syntax": "**.resize**( *size* : Integer { ; *defaultValue* : any } ) : Collection",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"コレクションの新しいサイズ"
				],
				[
					"defaultValue",
					"Number, Text, Object, Collection, Date, Boolean",
					"->",
					"新規要素のデフォルト値"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"リサイズされた元のコレクション"
				]
			],
			"Summary": "コレクションの length を引数で指定されたサイズに設定し、変更された元のコレクションを返します"
		},
		"reverse()": {
			"Syntax": "**.reverse( )** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"逆順に要素を格納した新しいコレクション"
				]
			],
			"Summary": "全要素が逆順になった、コレクションのディープ・コピーを返します"
		},
		"shift()": {
			"Syntax": "**.shift()** : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"コレクションの先頭要素"
				]
			],
			"Summary": "コレクションの先頭要素を取り除き、それを戻り値として返します"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"開始インデックス (含まれる)"
				],
				[
					"end",
					"Integer",
					"->",
					"終了インデックス (含まれない)"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"抜粋要素を格納した新しいコレクション(シャロウ・コピー)"
				]
			],
			"Summary": "コレクションの一部を、新しいコレクションの中に返します"
		},
		"some()": {
			"Syntax": "**.some**( { *startFrom* : Integer ; } *formula* : 4D.Function { ; *...param* : any } ) : Boolean<br/>**.some**( { *startFrom* : Integer ; } *methodName* : Text { ; *...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"テストを開始するインデックス"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"param",
					"any",
					"->",
					"渡す引数"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"少なくとも一つの要素がテストをパスすれば true"
				]
			],
			"Summary": "少なくとも一つのコレクション要素が、*formula* または *methodName* のコードで実装されたテストにパスした場合に **true** を返します"
		},
		"sort()": {
			"Syntax": "**.sort**() : Collection<br/>**.sort**( *formula* : 4D.Function { ; *...extraParam* : any } ) : Collection<br/>**.sort**( *methodName* : Text { ; *...extraParam* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"extraParam",
					"any",
					"->",
					"methodName に渡す引数"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"並べ替えられた元のコレクション"
				]
			],
			"Summary": "コレクションの要素を並べ替え、並べ替えられた元のコレクションを返します"
		},
		"sum()": {
			"Syntax": "**.sum**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"計算に使用するオブジェクトプロパティのパス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"コレクション要素の値の合計"
				]
			],
			"Summary": "コレクションインスタンスの全要素の値を合計して返します"
		},
		"unshift()": {
			"Syntax": "**.unshift**( *value* : any { ;...*valueN* : any } ) : Collection",
			"Params": [
				[
					"value",
					"Text, Number, Object, Collection, Date",
					"->",
					"コレクションの先頭に挿入する値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"要素の追加された元のコレクション"
				],
				[
					"",
					"",
					"",
					""
				]
			],
			"Summary": "一つ以上の *value* 引数をコレクションインスタンスの先頭に挿入し、変更された元のコレクションを返します"
		}
	},
	"CryptoKey": {
		"curve": {
			"Syntax": "**.curve** : Text",
			"Summary": "キーの楕円曲線名"
		},
		"decrypt()": {
			"Syntax": "**.decrypt**( *message* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"`options.encodingEncrypted` を使ってデコードし復号するメッセージ文字列"
				],
				[
					"options",
					"Object",
					"->",
					"デコーディングオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ステータス"
				]
			],
			"Summary": "**秘密** 鍵を使って *message* を復号します"
		},
		"encrypt()": {
			"Syntax": "**.encrypt**( *message* : Text ; *options* : Object ) : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"`options.encodingDecrypted` を使ってエンコードし暗号化するメッセージ文字列"
				],
				[
					"options",
					"Object",
					"->",
					"エンコーディングオプション"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"`options.encodingEncrypted` を使って暗号化およびエンコードされたメッセージ"
				]
			],
			"Summary": "**公開** 鍵を使って *message* を暗号化します"
		},
		"getPrivateKey()": {
			"Syntax": "**.getPrivateKey()** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"PEM 形式の秘密鍵"
				]
			],
			"Summary": "`CryptoKey` オブジェクトの秘密鍵を返します"
		},
		"getPublicKey()": {
			"Syntax": "**.getPublicKey**() : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"PEM 形式の公開鍵"
				]
			],
			"Summary": "`CryptoKey` オブジェクトの公開鍵を返します"
		},
		"pem": {
			"Syntax": "**.pem** : Text",
			"Summary": "PEM definition of an encryption key to load. If the key is a private key, the RSA or ECDSA public key will be deduced from it."
		},
		"sign()": {
			"Syntax": ".**sign** (*message* : Text ; *options* : Object) : Text<br/>.**sign** (*message* : Blob ; *options* : Object) : Text",
			"Params": [
				[
					"message",
					"Text または Blob",
					"->",
					"署名するメッセージ"
				],
				[
					"options",
					"Object",
					"->",
					"署名オプション"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"\"encoding\" オプションに応じて Base64 または Base64URL 形式の署名"
				]
			],
			"Summary": "utf8 形式の *message* 文字列またはBlob を署名します"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "キーのサイズ (ビット単位)"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "キーのタイプ: \"RSA\", \"ECDSA\", \"PEM\""
		},
		"verify()": {
			"Syntax": "**.verify**( *message* : Text ; *signature* : Text ; *options* : Object) : Object<br/>*.verify**( *message* : Blob ; *signature* : Text ; *options* : Object) : Object",
			"Params": [
				[
					"message",
					"Text または Blob",
					"->",
					"署名の生成に使用されたメッセージ"
				],
				[
					"signature",
					"Text",
					"->",
					"検証の対象である、`options.encoding` に応じて Base64 または Base64URL 形式の署名"
				],
				[
					"options",
					"Object",
					"->",
					"署名オプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"検証ステータス"
				]
			],
			"Summary": "utf8 形式の *message* 文字列の署名を検証します"
		}
	},
	"DataClass": {
		"all()": {
			"Syntax": "**.all** ( { *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"データクラスの全エンティティの参照"
				]
			],
			"Summary": "データクラスの全エンティティをエンティティセレクションとして返します"
		},
		"clearRemoteCache()": {
			"Syntax": "**.clearRemoteCache()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "データクラスの ORDAキャッシュを空にします"
		},
		"fromCollection()": {
			"Syntax": "**.fromCollection**( *objectCol* : Collection { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"objectCol",
					"Collection",
					"->",
					"エンティティにマップするオブジェクトのコレクション"
				],
				[
					"settings",
					"Object",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"コレクションから作成したエンティティセレクション"
				]
			],
			"Summary": "*objectCol* 引数のオブジェクトのコレクションに基づいてデータクラスのエンティティを更新あるいは作成し、対応するエンティティセレクションを返します"
		},
		"get()": {
			"Syntax": "**.get**( *primaryKey* : Integer { ; *settings* : Object } ) : 4D.Entity<br/>**.get**( *primaryKey* : Text { ; *settings* : Object } ) : 4D.Entity",
			"Params": [
				[
					"primaryKey",
					"Integer または Text",
					"->",
					"取得するエンティティのプライマリーキー値"
				],
				[
					"settings",
					"Object",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"指定したプライマリーキーに合致するエンティティ"
				]
			],
			"Summary": "*primaryKey* に渡したプライマリーキーに合致するエンティティを返します"
		},
		"getCount()": {
			"Syntax": "**.getCount()** : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"データクラスに含まれる全エンティティ数"
				]
			],
			"Summary": "データクラスに含まれる総エンティティ数を返します"
		},
		"getDataStore()": {
			"Syntax": "**.getDataStore()** : cs.DataStore",
			"Params": [
				[
					"戻り値",
					"cs.DataStore",
					"<-",
					"データクラスが属しているデータストア"
				]
			],
			"Summary": "指定したデータクラスが属しているデータストアを返します"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"データクラスの情報"
				]
			],
			"Summary": "データクラスの情報を提供するオブジェクトを返します"
		},
		"getRemoteCache()": {
			"Syntax": "**.getRemoteCache**() : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"データクラスの ORDAキャッシュの内容を記述したオブジェクト。"
				]
			],
			"Summary": "データクラスの ORDAキャッシュの内容を記述したオブジェクトを返します"
		},
		"new()": {
			"Syntax": "**.new()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"データクラスの新規エンティティ"
				]
			],
			"Summary": "メモリ内にデータクラスに空のエンティティを新規作成しそれを返します"
		},
		"newSelection()": {
			"Syntax": "**.newSelection**( { *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered`: 順列ありのエンティティセレクションを作成します<br/>`dk non ordered` (あるいは省略時): 順列なしのエンティティセレクションを作成します"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"データクラスの空の新規エンティティセレクション"
				]
			],
			"Summary": "追加可能な、空の新規エンティティセレクションをメモリ内に作成します"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"検索条件 (文字列)"
				],
				[
					"formula",
					"Object",
					"->",
					"検索条件 (フォーミュラオブジェクト)"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー用の値"
				],
				[
					"querySettings",
					"Object",
					"->",
					"クエリオプション: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"*queryString* または *formula* に渡した検索条件に合致するエンティティから構成された新しいエンティティセレクション"
				]
			],
			"Summary": "*queryString* または *formula* と任意の *value* 引数で指定した検索条件に合致するエンティティを検索します"
		},
		"setRemoteCacheSettings()": {
			"Syntax": "**.setRemoteCacheSettings**(*settings* : Object)",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"データクラスの ORDAキャッシュについて、タイムアウトと最大サイズを指定するオブジェクト"
				]
			],
			"Summary": "データクラスの ORDAキャッシュについて、タイムアウトと最大サイズを指定します"
		}
	},
	"DataStore": {
		"cancelTransaction()": {
			"Syntax": "**.cancelTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "トランザクションをキャンセルします"
		},
		"clearAllRemoteContexts()": {
			"Syntax": "**.clearAllRemoteContexts()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "データストアのすべてのアクティブコンテキストの全属性をクリアします"
		},
		"encryptionStatus()": {
			"Syntax": "**.encryptionStatus()**: Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"カレントデータストアと、各テーブルの暗号化についての情報"
				]
			],
			"Summary": "カレントデータファイルの暗号化状態を示すオブジェクトを返します"
		},
		"flushAndLock()": {
			"Syntax": "**.flushAndLock()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "ローカルデータストアのキャッシュをフラッシュし、データベースに対して他のプロセスが書き込み操作をおこなうのを防ぎます"
		},
		"getAllRemoteContexts()": {
			"Syntax": "**.getAllRemoteContexts()** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"最適化コンテキストオブジェクトのコレクション"
				]
			],
			"Summary": "データストア内のすべてのアクティブな最適化コンテキストに関する情報を格納するオブジェクトのコレクションを返します"
		},
		"getGlobalStamp()": {
			"Syntax": "**.getGlobalStamp**() : Real",
			"Params": [
				[
					"戻り値",
					"Real",
					"<-",
					"グローバル変更スタンプのカレント値"
				]
			],
			"Summary": "データストアのグローバル変更スタンプのカレント値を返します"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()**: Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"データストアのプロパティ"
				]
			],
			"Summary": "データストアの情報を提供するオブジェクトを返します"
		},
		"getRemoteContextInfo()": {
			"Syntax": "**.getRemoteContextInfo**(*contextName* : Text) : Object",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"コンテキストの名称"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"最適化コンテキストの詳細"
				]
			],
			"Summary": "*contextName* で指定したデータストアの最適化コンテキストに関する情報を格納するオブジェクトを返します"
		},
		"getRequestLog()": {
			"Syntax": "**.getRequestLog()** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"オブジェクトのコレクション (要素毎に一つのリクエストを記述します)"
				]
			],
			"Summary": "クライアント側のメモリに記録されているORDAリクエストを返します"
		},
		"isAdminProtected()": {
			"Syntax": "**.isAdminProtected()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"データエクスプローラーへのアクセスが無効に設定されているの場合は true、有効の場合は false (デフォルト)"
				]
			],
			"Summary": "現在のセッションにおいて データエクスプローラー へのアクセスが無効に設定されているの場合は **true** を返します"
		},
		"locked()": {
			"Syntax": "**.locked()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"ロックされている場合は true"
				]
			],
			"Summary": "ローカルデータストアが現在ロックされている場合、**true** を返します"
		},
		"makeSelectionsAlterable()": {
			"Syntax": "**.makeSelectionsAlterable()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "カレントアプリケーションのデータストアにおいて、すべての新規エンティティセレクションをデフォルトで追加可能に設定します"
		},
		"provideDataKey()": {
			"Syntax": "**.provideDataKey**( *curPassPhrase* : Text ) : Object <br/>**.provideDataKey**( *curDataKey* : Object ) : Object",
			"Params": [
				[
					"curPassPhrase",
					"Text",
					"->",
					"カレントのパスフレーズ"
				],
				[
					"curDataKey",
					"Object",
					"->",
					"カレントのデータ暗号化キー"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"暗号化キーのチェックの結果"
				]
			],
			"Summary": "データストアのカレントデータファイルのデータ暗号化キーを受け取り、暗号化されたデータと合致するかどうかチェックします。"
		},
		"setAdminProtection()": {
			"Syntax": "**.setAdminProtection**( *status* : Boolean )",
			"Params": [
				[
					"status",
					"Boolean",
					"->",
					"`webAdmin`ポート上で、データエクスプローラーによるデータアクセスを無効にするには true、アクセスを有効にするには false (デフォルト)"
				]
			],
			"Summary": "WebAdminセッションにおける データエクスプローラー 含め、Web管理ポート上でのデータアクセスを無効に設定することができます"
		},
		"setGlobalStamp()": {
			"Syntax": "**.setGlobalStamp**( *newStamp* : Real)",
			"Params": [
				[
					"newStamp",
					"Real",
					"->",
					"グローバル変更スタンプの新しい値"
				]
			],
			"Summary": "データストアのグローバル変更スタンプの新しい値として *newStamp* を設定します"
		},
		"setRemoteContextInfo()": {
			"Syntax": "**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer}})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer }})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"コンテキストの名称"
				],
				[
					"dataClassName",
					"Text",
					"->",
					"データクラスの名称"
				],
				[
					"dataClassObject",
					"4D.DataClass",
					"->",
					"DataClass オブジェクト (例: datastore.Employee)"
				],
				[
					"attributes",
					"Text",
					"->",
					"カンマ区切りの属性リスト"
				],
				[
					"attributesColl",
					"Collection",
					"->",
					"属性名 (テキスト) のコレクション"
				],
				[
					"contextType",
					"Text",
					"->",
					"渡す場合、値は \"main\" または \"currentItem\" のいずれか"
				],
				[
					"pageLength",
					"Integer",
					"->",
					"コンテキストにリンクされたエンティティセレクションのページ長 (デフォルトは 80)"
				]
			],
			"Summary": "指定したデータクラス属性を *contextName* の最適化コンテキストにリンクします"
		},
		"startRequestLog()": {
			"Syntax": "**.startRequestLog**()<br/>**.startRequestLog**( *file* : 4D.File )<br/>**.startRequestLog**( *file* : 4D.File ; *options* : Integer )<br/>**.startRequestLog**( *reqNum* : Integer )",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"File オブジェクト"
				],
				[
					"options",
					"Integer",
					"->",
					"ログレスポンスオプション (サーバーのみ)"
				],
				[
					"reqNum",
					"Integer",
					"->",
					"メモリ内に保管するリクエストの数 (クライアントのみ)"
				]
			],
			"Summary": "クライアント側でまたはサーバーサイドで ORDAリクエストのログを開始します"
		},
		"startTransaction()": {
			"Syntax": "**.startTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "対象データストアに対応するデータベース上で、カレントプロセス内のトランザクションを開始します"
		},
		"stopRequestLog()": {
			"Syntax": "**.stopRequestLog()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "呼び出されたマシン (クライアントまたはサーバー) 上の ORDAリクエストのログをすべて停止します"
		},
		"unlock()": {
			"Syntax": "**.unlock()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "データストアにおける、書き込み操作に対する現在のロックが同じプロセスで設定されていた場合、そのロックを解除します"
		},
		"validateTransaction()": {
			"Syntax": "**.validateTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "トランザクションを受け入れます"
		}
	},
	"Directory": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "フォルダーの作成日"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "フォルダーの作成時刻"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "ディスク上にフォルダーが存在する場合は true"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "フォルダー名の拡張子"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "拡張子 (あれば) を含めたフォルダーの完全な名称"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "フォルダーがシステムレベルで \"非表示\" に設定されていれば true"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "`Folder` オブジェクトに対しては常に **false**"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "フォルダーに対しては常に **false**"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "フォルダーに対しては常に **true**"
		},
		"isPackage": {
			"Syntax": "**.isPackage** : Boolean",
			"Summary": "フォルダーが macOS上のパッケージである (かつディスク上に存在している) 場合に true"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "フォルダーの最終変更日"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "フォルダーの最終変更時刻"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "拡張子 (あれば) を含まないフォルダー名"
		},
		"original": {
			"Syntax": "**.original** : 4D.Folder",
			"Summary": "対象フォルダーと同じフォルダーオブジェクト"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "対象フォルダーの親フォルダーオブジェクト"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "フォルダーの POSIXパス"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "カレントプラットフォームのシンタックスで表現されたフォルダーのパス"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"Text",
					"->",
					"コピー先フォルダーの名前"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"既存要素を上書きするには `fk overwrite` を渡します"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"コピーされたフォルダー"
				]
			],
			"Summary": "`Folder` オブジェクトを、*destinationFolder* 引数で指定したフォルダーへとコピーします"
		},
		"file()": {
			"Syntax": "**.file**( *path* : Text ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"ファイルのPOSIX相対パス名"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"`File` オブジェクト (無効な POSIXパスの場合には null)"
				]
			],
			"Summary": "`Folder` オブジェクト内に `File` オブジェクトを作成し、その参照を返します"
		},
		"files()": {
			"Syntax": "**.files**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"ファイルリストのオプション"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"子ファイルオブジェクトのコレクション"
				]
			],
			"Summary": "フォルダーに格納されている `File` オブジェクトのコレクションを返します"
		},
		"folder()": {
			"Syntax": "**.folder**( *path* : Text ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"ファイルのPOSIX相対パス名"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"作成された `Folder` オブジェクト (無効な POSIX *path* の場合には null)"
				]
			],
			"Summary": "親の `Folder` オブジェクト内に新しい `Folder` オブジェクトを作成し、その参照を返します"
		},
		"folders()": {
			"Syntax": "**.folders**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"フォルダーリストのオプション"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"子フォルダーオブジェクトのコレクション"
				]
			],
			"Summary": "親フォルダーに格納されている `Folder` オブジェクトのコレクションを返します"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"取得するピクチャーの一辺の長さ (ピクセル単位)"
				],
				[
					"戻り値",
					"Picture",
					"<-",
					"アイコン"
				]
			],
			"Summary": "フォルダーのアイコンを返します"
		}
	},
	"Document": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "ファイルの作成日"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "ファイルの作成時刻"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "ディスク上にファイルが存在する場合は true を返します"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "ファイル名の拡張子"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "拡張子 (あれば) を含めたファイルの完全な名称"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "ファイルがシステムレベルで \"非表示\" に設定されていれば true"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "ファイルがエイリアス、ショートカット、シンボリックリンクのいずれかである場合には true"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "ファイルに対しては常に true"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "ファイルに対しては常に false"
		},
		"isWritable": {
			"Syntax": "**.isWritable** : Boolean",
			"Summary": "ファイルがディスク上に存在し、書き込み可能な場合に true"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "ファイルの最終変更日"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "ファイルの最終変更時刻"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "拡張子 (あれば) を含まないファイル名"
		},
		"original": {
			"Syntax": "**.original** : 4D.File<br/>**.original** : 4D.Folder",
			"Summary": "エイリアス、ショートカット、シンボリックリンクファイルのターゲット要素"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "対象ファイルの親フォルダーオブジェクト"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "ファイルの POSIXパス"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "カレントプラットフォームのシンタックスで表現されたファイルのパス"
		},
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "ファイルのサイズ (バイト単位)"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"Text",
					"->",
					"コピー先フォルダーの名前"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"既存要素を上書きするには `fk overwrite` を渡します"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"コピーされたファイル"
				]
			],
			"Summary": "`File` オブジェクトを、*destinationFolder* 引数で指定したフォルダーへとコピーします"
		},
		"getContent()": {
			"Syntax": "**.getContent( )** : 4D.Blob",
			"Params": [
				[
					"戻り値",
					"4D.Blob",
					"<-",
					"ファイルのコンテンツ"
				]
			],
			"Summary": "ファイルの全コンテンツを格納した `4D.Blob` オブジェクトを返します"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"取得するピクチャーの一辺の長さ (ピクセル単位)"
				],
				[
					"戻り値",
					"Picture",
					"<-",
					"アイコン"
				]
			],
			"Summary": "ファイルのアイコンを返します"
		},
		"getText()": {
			"Syntax": "**.getText**( { *charSetName* : Text { ; *breakMode* : Integer } } ) : Text<br/>**.getText**( { *charSetNum* : Integer { ; *breakMode* : Integer } } ) : Text",
			"Params": [
				[
					"charSetName",
					"Text",
					"->",
					"文字セットの名前"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"文字セットの番号"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"改行の処理モード"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ドキュメントから取得したテキスト"
				]
			],
			"Summary": "ファイルのコンテンツをテキストとして返します"
		}
	},
	"Email": {
		"attachments": {
			"Syntax": "**.attachments** : Collection",
			"Summary": "`4D.MailAttachment` オブジェクトのコレクション"
		},
		"bcc": {
			"Syntax": "**.bcc** : Text<br/>**.bcc** : Object<br/>**.bcc** : Collection",
			"Summary": "非表示 (BCC: Blind Carbon Copy) のメール受信者 アドレス"
		},
		"bodyStructure": {
			"Syntax": "**.bodyStructure** : Object",
			"Summary": "(任意) メッセージ本文の完全なMIME ストラクチャーである *EmailBodyPart* オブジェクト"
		},
		"bodyValues": {
			"Syntax": "**.bodyValues** : Object",
			"Summary": "`bodyStructure` の <partID\\> 毎にオブジェクトを格納している *EmailBodyValue* オブジェクト"
		},
		"cc": {
			"Syntax": "**.cc** : Text<br/>**.cc** : Object<br/>**.cc** : Collection",
			"Summary": "追加 (CC: Carbon Copy) のメール受信者 アドレス"
		},
		"comments": {
			"Syntax": "**.comments** : Text",
			"Summary": "追加のコメントのヘッダー"
		},
		"from": {
			"Syntax": "**.from** : Text<br/>**.from** : Object<br/>**.from** : Collection",
			"Summary": "メールの送信元 アドレス"
		},
		"headers": {
			"Syntax": "**.headers** : Collection",
			"Summary": "メッセージ内で現れる順番どおりの `EmailHeader` オブジェクトのコレクション"
		},
		"htmlBody": {
			"Syntax": "**.htmlBody** : Text",
			"Summary": "(任意、SMTPのみ) HTML形式のメールメッセージ (デフォルトの文字セットは UTF-8)"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "IMAP サーバーからの固有ID"
		},
		"inReplyTo": {
			"Syntax": "**.inReplyTo** : Text",
			"Summary": "カレントメッセージが返信している、元のメッセージのメッセージID"
		},
		"keywords": {
			"Syntax": "**.keywords** : Object",
			"Summary": "各プロパティ名がキーワードであり、各値が true であるキーワードセットのオブジェクト"
		},
		"messageId": {
			"Syntax": "**.messageId** : Text",
			"Summary": "メッセージ識別ヘッダー (\"message-id\")"
		},
		"receivedAt": {
			"Syntax": "**.receivedAt** : Text",
			"Summary": "IMAPサーバーにメールが到着した時間の、ISO 8601 UTC フォーマットでのタイムスタンプ (例: 2020-09-13T16:11:53Z)"
		},
		"references": {
			"Syntax": "**.references** : Collection",
			"Summary": "返信チェーン内メッセージの、全メッセージID のコレクション"
		},
		"replyTo": {
			"Syntax": "**.replyTo** : Text<br/>**.replyTo** : Object<br/>**.replyTo** : Collection",
			"Summary": "返信用 アドレス"
		},
		"sendAt": {
			"Syntax": "**.sendAt** : Text",
			"Summary": "メールのタイムスタンプ (ISO 8601 UTCフォーマット)"
		},
		"sender": {
			"Syntax": "**.sender** : Text<br/>**.sender** : Object<br/>**.sender** : Collection",
			"Summary": "メールのソース アドレス"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "IMAPサーバーから返された Email オブジェクトのサイズ (バイト単位)"
		},
		"subject": {
			"Syntax": "**.subject** : Text",
			"Summary": "メールの件名"
		},
		"textBody": {
			"Syntax": "**.textBody** : Text",
			"Summary": "(任意、SMTPのみ) 標準テキスト形式のメールメッセージ (デフォルトの文字セットは UTF-8)"
		},
		"to": {
			"Syntax": "**.to** : Text<br/>**.to** : Object<br/>**.to** : Collection",
			"Summary": "メールのメインの受信者 アドレス"
		}
	},
	"Entity": {
		"clone()": {
			"Syntax": "**.clone()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"同レコードを参照する新しいエンティティ"
				]
			],
			"Summary": "対象エンティティと同じレコードを参照する新規エンティティをメモリ内に作成します"
		},
		"diff()": {
			"Syntax": "**.diff**( *entityToCompare* : 4D.Entity { ; *attributesToCompare* : Collection } ) : Collection",
			"Params": [
				[
					"entityToCompare",
					"4D.Entity",
					"->",
					"対象エンティティと比較するエンティティ"
				],
				[
					"attributesToCompare",
					"Collection",
					"->",
					"比較する属性の名称"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"エンティティ間の差異"
				]
			],
			"Summary": "二つのエンティティの中身を比較し、その差異を返します"
		},
		"drop()": {
			"Syntax": "**.drop**( {*mode* : Integer} ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk force drop if stamp changed`: スタンプが変更されていた場合でも強制的にドロップする"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ドロップの結果"
				]
			],
			"Summary": "データストアのエンティティに格納されているデータをデータストアから削除します"
		},
		"first()": {
			"Syntax": "**.first()**: 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの先頭エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "対象エンティティが所属するエンティティセレクションの先頭エンティティへの参照を返します"
		},
		"fromObject()": {
			"Syntax": "**.fromObject**( *filler* : Object )",
			"Params": [
				[
					"filler",
					"Object",
					"->",
					"エンティティの属性値を設定するオブジェクト"
				]
			],
			"Summary": "*filler* に指定した内容でエンティティの属性値を設定します"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass()** : 4D.DataClass",
			"Params": [
				[
					"戻り値",
					"4D.DataClass",
					"<-",
					"エンティティが所属している DataClass オブジェクト"
				]
			],
			"Summary": "エンティティのデータクラスを返します"
		},
		"getKey()": {
			"Syntax": "**.getKey**( { *mode* : Integer } ) : any",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk key as string`: プライマリーキーの型にかかわらず、プライマリーキーを文字列として返します"
				],
				[
					"戻り値",
					"any",
					"<-",
					"エンティティのプライマリーキーの値(整数またはテキスト)"
				]
			],
			"Summary": "エンティティのプライマリーキー値を返します"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes()** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"エンティティにリンクされたコンテキスト属性 (カンマ区切り)"
				]
			],
			"Summary": "エンティティによって使われている最適化コンテキストの情報を返します"
		},
		"getSelection()": {
			"Syntax": "**.getSelection()**: 4D.EntitySelection",
			"Params": [
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"エンティティが所属するエンティティセレクション (見つからなければ null)"
				]
			],
			"Summary": "エンティティが所属するエンティティセレクションを返します"
		},
		"getStamp()": {
			"Syntax": "**.getStamp()** : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"エンティティのスタンプ (エンティティが作成されたばかりの場合には 0)"
				]
			],
			"Summary": "エンティティのスタンプの値を返します"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**( { *entitySelection* : 4D.EntitySelection } ) : Integer",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"エンティティの位置を取得する対象のエンティティセレクション"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"エンティティセレクション内でのエンティティの位置"
				]
			],
			"Summary": "エンティティセレクション内におけるエンティティの位置を返します"
		},
		"isNew()": {
			"Syntax": "**.isNew()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"エンティティが作成されたばかりで未保存の場合は true。 それ以外は false。"
				]
			],
			"Summary": "対象エンティティが作成されたばかりで、まだデータストアに保存されていない場合にtrue を返します"
		},
		"last()": {
			"Syntax": "**.last()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの最終エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "対象エンティティが所属するエンティティセレクションの最終エンティティへの参照を返します"
		},
		"lock()": {
			"Syntax": "**.lock**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk reload if stamp changed`: スタンプが変更されてる場合はロック前にリロードします"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ロックの結果"
				]
			],
			"Summary": "対象エンティティが参照するレコードにペシミスティック・ロック をかけます"
		},
		"next()": {
			"Syntax": "**.next()** : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクション内の次のエンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティが所属するエンティティセレクションの次のエンティティへの参照を返します"
		},
		"previous()": {
			"Syntax": "**.previous()**  : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクション内の前のエンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティが所属するエンティティセレクションの前のエンティティへの参照を返します"
		},
		"reload()": {
			"Syntax": "**.reload()** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "エンティティの中身をメモリ内にリロードします"
		},
		"save()": {
			"Syntax": "**.save**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk auto merge`: 自動マージモードを有効化します"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"保存の結果"
				]
			],
			"Summary": "エンティティの変更内容を保存します"
		},
		"toObject()": {
			"Syntax": "**.toObject**() : Object<br/>**.toObject**( *filterString* : Text { ; *options* : Integer}  ) : Object<br/>**.toObject**( *filterCol* : Collection { ; *options* : Integer } ) : Object",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"取得する属性 (カンマ区切り)"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"取得する属性のコレクション"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: \\_\\_KEY プロパティを追加;<br/>`dk with stamp`: \\_STAMP プロパティを追加"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"エンティティを元にビルドされたオブジェクト"
				]
			],
			"Summary": "エンティティからビルトされたオブジェクトを返します"
		},
		"touched()": {
			"Syntax": "**.touched()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"少なくとも一つのエンティティ属性が編集されていて未保存の場合に true、それ以外の場合には false"
				]
			],
			"Summary": "エンティティがメモリに読み込まれてから、あるいは保存されてから、少なくとも1つのエンティティ属性が変更されていた場合にはTrue を返します"
		},
		"touchedAttributes()": {
			"Syntax": "**.touchedAttributes()** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"変更された属性の名前、あるいは空のコレクション"
				]
			],
			"Summary": "メモリに読み込み後に変更されたエンティティの属性名を返します"
		},
		"unlock()": {
			"Syntax": "**.unlock()** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "対象エンティティが参照するレコードのペシミスティック・ロックを解除します"
		}
	},
	"EntitySelection": {
		"add()": {
			"Syntax": "**.add**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.add**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"エンティティセレクションに追加するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"エンティティセレクションに追加するエンティティセレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"追加した *entity* または *entitySelection* を含むエンティティセレクション"
				]
			],
			"Summary": "*entity* または *entitySelection* で渡したエンティティを対象のエンティティセレクションに追加し、編集されたエンティティセレクションを返します"
		},
		"and()": {
			"Syntax": "**.and**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.and**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"交差するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"交差するエンティティセレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"AND論理演算子による共通部分の結果を格納する新しいエンティティセレクション"
				]
			],
			"Summary": "エンティティセレクションと *entity* あるいは *entitySelection* 引数をAND論理演算子を使用して結合します"
		},
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : 4D.Entity",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"取得するエンティティのインデックス"
				],
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"そのインデックスにあるエンティティ"
				]
			],
			"Summary": "*index* の位置にあるエンティティを返します (*index* は正負の整数)"
		},
		"average()": {
			"Syntax": "**.average**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"エンティティの属性値の算術平均 (相加平均) (エンティティセレクションがからの場合には undefined を返します)"
				]
			],
			"Summary": "*attributePath* に指定した、エンティティセレクション内の null でない値の算術平均 (相加平均) を返します"
		},
		"clean()": {
			"Syntax": "**.clean**() : 4D.EntitySelection",
			"Params": [
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"削除されたエンティティを含まない新規エンティティセレクション"
				]
			],
			"Summary": "元のエンティティセレクションに基づいた、削除済エンティティを含まない新しいエンティティセレクションを返します"
		},
		"contains()": {
			"Syntax": "**.contains**( *entity* : 4D.Entity ) : Boolean",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"評価するエンティティ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"エンティティがエンティティセレクションに属している場合には true、そうでない場合は false"
				]
			],
			"Summary": "エンティティ参照がエンティティセレクションに属している場合には true を返します"
		},
		"count()": {
			"Syntax": "**.count**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"エンティティセレクション内の *attributePath* が null でない値の個数"
				]
			],
			"Summary": "エンティティセレクション内で *attributePath* に指定したパスの値が null でないエンティティの数を返します"
		},
		"copy()": {
			"Syntax": "**.copy**( { *option* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck shared`: 共有可能なエンティティセレクションを返します"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"エンティティセレクションのコピー"
				]
			],
			"Summary": "元のエンティティセレクションのコピーを返します"
		},
		"distinct()": {
			"Syntax": "**.distinct**( *attributePath* : Text { ; *options* : Integer } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"重複しない値を取得する属性のパス"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk diacritical`, `dk count values`"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"重複しない値のみを格納したコレクション"
				]
			],
			"Summary": "*attributePath* に指定した、エンティティセレクション内の重複しない (異なる) 値のみを格納したコレクションを返します"
		},
		"distinctPaths()": {
			"Syntax": "**.distinctPaths**( *attribute* : Text ) : Collection",
			"Params": [
				[
					"属性",
					"Text",
					"->",
					"取得したいパスを持つオブジェクト属性名"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"重複しないパスを格納した新規コレクション"
				]
			],
			"Summary": "対象のエンティティセレクションにおいて *attribute* に指定した、インデックスされているオブジェクト属性の重複しない (異なる) パスを格納したコレクションを返します"
		},
		"drop()": {
			"Syntax": "**.drop**( { *mode* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk stop dropping on first error`: 最初のドロップ不可エンティティで実行を止めます"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"成功した場合には空のエンティティセレクション、そうでない場合にはドロップ不可エンティティを格納したエンティティセレクション"
				]
			],
			"Summary": "データストアのデータクラスに対応するテーブルから、エンティティセレクションに所属しているエンティティを削除します"
		},
		"extract()": {
			"Syntax": "**.extract**( *attributePath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *attributePath* { ; *targetPath* } { ; *...attributePathN* : Text ; *targetPathN* : Text } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"新しいコレクションに抽出する値の属性パス"
				],
				[
					"targetPath",
					"Text",
					"->",
					"抽出先の属性パスあるいは属性名"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: 返されるコレクションに null 属性を含めます (デフォルトでは無視されます)。"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"抽出した値を格納したコレクション"
				]
			],
			"Summary": "*attributePath* で指定した値をエンティティセレクションから抽出し、コレクションに格納して返します"
		},
		"first()": {
			"Syntax": "**.first**() : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの先頭エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティセレクションの先頭エンティティへの参照を返します"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass**() : 4D.DataClass",
			"Params": [
				[
					"戻り値",
					"4D.DataClass",
					"<-",
					"エンティティセレクションが所属しているデータクラス"
				]
			],
			"Summary": "エンティティセレクションのデータクラスを返します"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes**() : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"エンティティセレクションにリンクされたコンテキスト属性 (カンマ区切り)"
				]
			],
			"Summary": "エンティティセレクションによって使われている最適化コンテキストの情報を返します"
		},
		"isAlterable()": {
			"Syntax": "**.isAlterable**() : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"エンティティセレクションが追加可能であれば true、それ以外の場合には false"
				]
			],
			"Summary": "エンティティセレクションが追加可能の場合には true を返します"
		},
		"isOrdered()": {
			"Syntax": "**.isOrdered**() : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"順列ありエンティティセレクションの場合には true、そうでない場合は false"
				]
			],
			"Summary": "エンティティセレクションが順列ありであれば true を返します"
		},
		"last()": {
			"Syntax": "**.last**() : 4D.Entity",
			"Params": [
				[
					"戻り値",
					"4D.Entity",
					"<-",
					"エンティティセレクションの最終エンティティへの参照 (見つからなければ null)"
				]
			],
			"Summary": "エンティティセレクションの最終エンティティへの参照を返します"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "エンティティセレクション内のエンティティの数を返します"
		},
		"max()": {
			"Syntax": "**.max**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"any",
					"<-",
					"属性の最大値"
				]
			],
			"Summary": "*attributePath* に指定したエンティティセレクションの属性値のうち最高の (あるいは最大の) 値を返します"
		},
		"min()": {
			"Syntax": "**.min**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"any",
					"<-",
					"属性の最小値"
				]
			],
			"Summary": "*attributePath* に指定したエンティティセレクションの属性値のうち最低の (あるいは最小の) 値を返します"
		},
		"minus()": {
			"Syntax": "**.minus**( *entity* : 4D.Entity { ; *keepOrder* : Integer } ) : 4D.EntitySelection<br/>**.minus**( *entitySelection* : 4D.EntitySelection { ; *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"除外するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"除外するエンティティセレクション"
				],
				[
					"keepOrder",
					"Integer",
					"->",
					"結果のエンティティセレクションにおいて元の順列を維持するには `dk keep ordered` (整数) を渡します"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"新しいエンティティセレクション、あるいは既存のエンティティセレクションへの新しい参照"
				]
			],
			"Summary": "元のエンティティセレクションから、*entity* 引数のエンティティ、あるいは *entitySelection* 引数のエンティティセレクションに含まれるエンティティを除外し、結果のエンティティセレクションを返します"
		},
		"or()": {
			"Syntax": "**.or**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.or**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"交差するエンティティ"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"交差するエンティティセレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"新しいエンティティセレクション、あるいは元のエンティティセレクションへの新しい参照"
				]
			],
			"Summary": "OR論理演算子を使用して、*entity* または *entitySelection* のエンティティと対象エンティティセレクションを組み合わせます"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( *pathString* : Text ) : 4D.EntitySelection<br/>**.orderBy**( *pathObjects* : Collection ) : 4D.EntitySelection",
			"Params": [
				[
					"pathString",
					"Text",
					"->",
					"エンティティセレクションの属性パスと並べ替えの指定"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"条件オブジェクトのコレクション"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"指定された順番に並べ替えられた新規エンティティセレクション"
				]
			],
			"Summary": "エンティティセレクションの全エンティティが *pathString* または *pathObjects* が指定する順番に並べ替えられた、新規の順列ありのエンティティセレクションを返します"
		},
		"orderByFormula()": {
			"Syntax": "**.orderByFormula**( *formulaString* : Text { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection<br/>**.orderByFormula**( *formulaObj* : Object { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"フォーミュラ文字列"
				],
				[
					"formulaObj",
					"Object",
					"->",
					"フォーミュラオブジェクト"
				],
				[
					"sortOrder",
					"Integer",
					"->",
					"`dk ascending` (デフォルト) または `dk descending`"
				],
				[
					"settings",
					"Object",
					"->",
					"フォーミュラに渡す引数"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"順列ありの新規エンティティセレクション"
				]
			],
			"Summary": "順列ありの新規エンティティセレクションを返します"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"検索条件 (文字列)"
				],
				[
					"formula",
					"Object",
					"->",
					"検索条件 (フォーミュラオブジェクト)"
				],
				[
					"value",
					"any",
					"->",
					"プレースホルダー用の値"
				],
				[
					"querySettings",
					"Object",
					"->",
					"クエリオプション: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"*queryString* または *formula* に渡した検索条件に合致する、エンティティセレクション内のエンティティから構成された新しいエンティティセレクション\\*"
				]
			],
			"Summary": "エンティティセレクションの全エンティティから、*queryString* または *formula* と任意の *value* 引数で指定した検索条件に合致するエンティティを検索します"
		},
		"queryPath": {
			"Syntax": "**.queryPath** : Text",
			"Summary": "実際に 4Dで実行されたクエリの詳細な情報"
		},
		"queryPlan": {
			"Syntax": "**.queryPlan** : Text",
			"Summary": "実行前のクエリの詳細な情報 (クエリプラン) を格納します"
		},
		"refresh()": {
			"Syntax": "**.refresh**()",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "ローカルの ORDAキャッシュ にあるエンティティセレクションデータを即座に \"無効化\" します"
		},
		"selected()": {
			"Syntax": "**.selected**( *selectedEntities* : 4D.EntitySelection ) : Object",
			"Params": [
				[
					"selectedEntities",
					"4D.EntitySelection",
					"->",
					"呼び出し対象のエンティティセレクションにおける、選別したエンティティの位置範囲"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"呼び出し対象のエンティティセレクション内での位置を取得したい、選別されたエンティティのセレクション"
				]
			],
			"Summary": "呼び出し対象のエンティティセレクションにおける、*selectedEntities* に含まれるエンティティの位置を表すオブジェクトを返します"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"処理を開始するインデックス)"
				],
				[
					"end",
					"Integer",
					"->",
					"終了インデックス (含まれない)"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"抜粋エンティティを格納した新しいエンティティセレクション (シャロウ・コピー)"
				]
			],
			"Summary": "エンティティセレクションの一部を、新規エンティティセレクションとして返します"
		},
		"sum()": {
			"Syntax": "**.sum**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"計算に使用する属性パス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"エンティティセレクションの値の合計"
				]
			],
			"Summary": "*attributePath* に指定したエンティティセレクションの属性値の総和を返します"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**( { *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer } } ) : Collection<br/>**.toCollection**( *filterString* : Text {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection<br/>**.toCollection**( *filterCol* : Collection {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"抽出するエンティティの属性パスの文字列"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"抽出するエンティティの属性パスのコレクション"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: プライマリーキーを追加<br/>`dk with stamp`: スタンプを追加"
				],
				[
					"begin",
					"Integer",
					"->",
					"開始インデックス"
				],
				[
					"howMany",
					"Integer",
					"->",
					"抽出するエンティティ数"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"エンティティセレクションの属性と値を格納したオブジェクトのコレクション"
				]
			],
			"Summary": "プロパティと値のセットを持つオブジェクト要素を格納するコレクションを作成し、返します"
		}
	},
	"File": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"ファイルが正常に作成された場合に true、それ以外の場合は false"
				]
			],
			"Summary": "`File` オブジェクトのプロパティに基づいてディスク上にファイルを作成します"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"エイリアスまたはショートカットの作成先フォルダー"
				],
				[
					"aliasName",
					"Text",
					"->",
					"エイリアスまたはショートカットの名称"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"エイリアスリンクのタイプ"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"エイリアスまたはショートカットのファイル参照"
				]
			],
			"Summary": "エイリアス (macOS) またはショートカット (Windows) を作成します"
		},
		"delete()": {
			"Syntax": "**.delete**()",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "ファイルを削除します"
		},
		"getAppInfo()": {
			"Syntax": "**.getAppInfo**() : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"アプリケーションファイル情報"
				]
			],
			"Summary": "アプリケーションファイル情報のコンテンツをオブジェクトとして返します"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"Text",
					"->",
					"移動先でのファイルの完全な名称"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"移動したファイル"
				]
			],
			"Summary": "`File` オブジェクトを *destinationFolder* が指定する移行先へと移動すると同時に、<em x-id=\"3\">newName</em> を指定した場合は名称も変更します"
		},
		"open()": {
			"Syntax": "**.open**( { *mode* : Text } ) : 4D.FileHandle<br/>**.open**( { *options* : Object } ) : 4D.FileHandle",
			"Params": [
				[
					"mode",
					"Text",
					"->",
					"開くモード: \"read\", \"write\", \"append\""
				],
				[
					"options",
					"Object",
					"->",
					"開くオプション"
				],
				[
					"戻り値",
					"4D.FileHandle",
					"<-",
					"新規の FileHandle オブジェクト"
				]
			],
			"Summary": "対象のファイルについて、指定のモード (*mode*) またはオプション (*options*) で新規の `4D.FileHandle` オブジェクトを作成し、返します"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.File",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"ファイルの新しい完全な名称"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"名称変更されたファイル"
				]
			],
			"Summary": "ファイル名を *newName* に指定した名称に変更し、名称変更後の `File` オブジェクトを返します"
		},
		"setAppInfo()": {
			"Syntax": "**.setAppInfo**( *info* : Object )",
			"Params": [
				[
					"info",
					"Object",
					"->",
					"アプリケーションファイル情報内に書き込むプロパティ"
				]
			],
			"Summary": "*info* に渡したプロパティをアプリケーションファイルの情報として書き込みます"
		},
		"setContent()": {
			"Syntax": "**.setContent** ( *content* : Blob )",
			"Params": [
				[
					"content",
					"BLOB",
					"->",
					"ファイルの新しいコンテンツ"
				]
			],
			"Summary": "*content* 引数の BLOB に保存されているデータを使用して、ファイルの全コンテンツを上書きします"
		},
		"setText()": {
			"Syntax": "**.setText** ( *text* : Text {; *charSetName* : Text { ; *breakMode* : Integer } } )<br/>**.setText** ( *text* : Text {; *charSetNum* : Integer { ; *breakMode* : Integer } } )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"ファイルに保存するテキスト"
				],
				[
					"charSetName",
					"Text",
					"->",
					"文字セットの名前"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"文字セットの番号"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"改行の処理モード"
				]
			],
			"Summary": "*text* に渡されたテキストをファイルの新しいコンテンツとして書き込みます"
		},
		"_inheritedFrom_": "Document"
	},
	"FileHandle": {
		"breakModeRead": {
			"Syntax": "**.breakModeRead** : Text",
			"Summary": "ファイル読み取り時に使用される改行の処理モードを返します"
		},
		"breakModeWrite": {
			"Syntax": "**.breakModeWrite** : Text",
			"Summary": "ファイル書き込み時に使用される改行の処理モードを返します"
		},
		"charset": {
			"Syntax": "**.charset** : Text",
			"Summary": "ファイルの読み取りや書き込みに使用される文字セットを返します"
		},
		"eof": {
			"Syntax": "**.eof** : Boolean",
			"Summary": "`offset` がファイルの終端に達した場合に true、それ以外は false を返します"
		},
		"file": {
			"Syntax": "**.file** : 4D.File",
			"Summary": "作成された FileHandle の対象である 4D.File オブジェクトを格納します"
		},
		"getSize()": {
			"Syntax": "**.getSize()** : Real",
			"Params": [
				[
					"戻り値",
					"Real",
					"<-",
					"ドキュメントのサイズ (バイト単位)"
				]
			],
			"Summary": "ドキュメントの現在のサイズをバイト単位で返します"
		},
		"mode": {
			"Syntax": "**.mode** : Text",
			"Summary": "FileHandle が作成されたモード (\"read\"、\"write\"、\"append\" のいずれか) を返します"
		},
		"offset": {
			"Syntax": "**.offset** : Real",
			"Summary": "データストリームの現在のオフセット (ドキュメント内の位置) を返します"
		},
		"readBlob()": {
			"Syntax": "**.readBlob**( *bytes* : Real ) : 4D.Blob",
			"Params": [
				[
					"bytes",
					"Real",
					"->",
					"読み取るバイト数"
				],
				[
					"戻り値",
					"4D.Blob",
					"<-",
					"ファイルから読み取ったバイト"
				]
			],
			"Summary": "ファイルの現在の位置から bytes サイズの Blob を返します"
		},
		"readLine()": {
			"Syntax": "**.readLine()** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"1行のテキスト"
				]
			],
			"Summary": "現在の位置から次の改行文字まで、あるいはドキュメントの終端に到達するまでのテキストを返します"
		},
		"readText()": {
			"Syntax": "**.readText**( { *stopChar* : Text } ) : Text",
			"Params": [
				[
					"stopChar",
					"Text",
					"->",
					"読み取りを停止する文字"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ファイルのテキスト"
				]
			],
			"Summary": "現在の位置から、最初の stopChar 文字列まで (渡された場合)、あるいはファイルの終端に達するまでのテキストを返します"
		},
		"setSize()": {
			"Syntax": "**.setSize**( *size* : Real )",
			"Params": [
				[
					"size",
					"Real",
					"->",
					"ドキュメントの新しいサイズ (バイト単位)"
				]
			],
			"Summary": "ドキュメントの新しいサイズをバイト単位で設定します"
		},
		"writeBlob()": {
			"Syntax": "**.writeBlob**( *blob* : 4D.Blob )",
			"Params": [
				[
					"blob",
					"4D.Blob",
					"->",
					"ファイルに書き込む Blob"
				]
			],
			"Summary": "ファイルの現在の位置から *blob* に渡した Blob を書き込みます"
		},
		"writeLine()": {
			"Syntax": "**.writeLine**( *lineOfText* : Text )",
			"Params": [
				[
					"lineOfText",
					"Text",
					"->",
					"書き込むテキスト"
				]
			],
			"Summary": "現在の位置に *lineOfText* の内容を書き込み、改行文字を挿入します"
		},
		"writeText()": {
			"Syntax": "**.writeText**( *textToWrite* : Text )",
			"Params": [
				[
					"textToWrite",
					"Text",
					"->",
					"書き込むテキスト"
				]
			],
			"Summary": "現在の位置に *textToWrite* の内容を書き込み、改行文字は挿入しません"
		}
	},
	"Folder": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"フォルダーが正常に作成された場合には true、それ以外の場合は false"
				]
			],
			"Summary": "`Folder` オブジェクトのプロパティに基づいてディスク上にフォルダーを作成します"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"エイリアスまたはショートカットの作成先フォルダー"
				],
				[
					"aliasName",
					"Text",
					"->",
					"エイリアスまたはショートカットの名称"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"エイリアスリンクのタイプ"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"エイリアスまたはショートカットのフォルダー参照"
				]
			],
			"Summary": "エイリアス (macOS) またはショートカット (Windows) を作成します"
		},
		"delete()": {
			"Syntax": "**.delete**( { *option* : Integer } )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"フォルダー削除のオプション"
				]
			],
			"Summary": "フォルダーを削除します"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"宛先フォルダー"
				],
				[
					"newName",
					"Text",
					"->",
					"移動先でのフォルダーの完全な名称"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"移動したフォルダー"
				]
			],
			"Summary": "`Folder` オブジェクト (ソースフォルダー) を *destinationFolder* が指定する移行先へと移動すると同時に、*newName* を指定した場合は名称も変更します"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.Folder",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"フォルダーの新しい完全な名称"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"名称変更されたフォルダー"
				]
			],
			"Summary": "*newName* に指定した名称にフォルダー名を変更し、名称変更後の `Folder` オブジェクトを返します"
		},
		"_inheritedFrom_": "Directory"
	},
	"Function": {
		"apply()": {
			"Syntax": "**.apply**() : any<br/>**.apply**( *thisObj* : Object { ; *formulaParams* : Collection } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"フォーミュラ内で This コマンドによって返されるオブジェクト"
				],
				[
					"formulaParams",
					"Collection",
					"->",
					"フォーミュラが実行される際に $1...$n として渡される値のコレクション"
				],
				[
					"戻り値",
					"any",
					"<-",
					"フォーミュラの実行結果"
				]
			],
			"Summary": "対象の `Formula` オブジェクトを実行し、その結果の値を返します"
		},
		"call()": {
			"Syntax": "**.call**() : any<br/>**.call**( *thisObj* : Object { ; ...*params* : any } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"フォーミュラ内で This コマンドによって返されるオブジェクト"
				],
				[
					"params",
					"any",
					"->",
					"フォーミュラが実行される際に $1...$n として渡される値"
				],
				[
					"戻り値",
					"any",
					"<-",
					"フォーミュラの実行結果"
				]
			],
			"Summary": "対象の `Formula` オブジェクトを実行し、その結果の値を返します"
		},
		"source": {
			"Syntax": "**.source** : Text",
			"Summary": "対象フォーミュラのテキスト型のソース式"
		}
	},
	"HTTPAgent": {
		"params": {
			"Syntax": "**options** : Object",
			"Summary": "HTTPAgent が現在使用しているオプション"
		},
		"requestsCount": {
			"Syntax": "**requestsCount** : Integer",
			"Summary": "HTTPAgent によって現在管理されているリクエストの数"
		},
		"freeSocketsCount": {
			"Syntax": "**freeSocketsCount** : Integer",
			"Summary": "HTTPAgent に関連付けられた `maxSockets` に対する空きソケット数"
		}
	},
	"HTTPRequest": {
		"agent": {
			"Syntax": "**agent** : 4D.HTTPAgent",
			"Summary": "`options` で渡された `agent` オブジェクト、もしくは省略された場合はグローバルなエージェントオブジェクト"
		},
		"dataType": {
			"Syntax": "**dataType** : Text",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された `dataType` を格納します (省略時は \"auto\""
		},
		"encoding": {
			"Syntax": "**encoding** : Text",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された `encoding` を格納します (省略時は \"UTF-8\")"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "少なくとも 1つのエラーが発生した場合、全エラーのコレクションを格納します"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された `headers` を格納します"
		},
		"method": {
			"Syntax": "**method** : Text",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された `method` を格納します"
		},
		"protocol": {
			"Syntax": "**protocol** : Text",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された `protocol` を格納します"
		},
		"response": {
			"Syntax": "**response** : Object",
			"Summary": "少なくともステータスコードを受け取った場合には、リクエストへのレスポンスを格納します (それ以外の場合は未定義)"
		},
		"returnResponseBody": {
			"Syntax": "**returnResponseBody** : Boolean",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された` returnResponseBody` を格納します"
		},
		"terminate()": {
			"Syntax": "**.terminate()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "HTTPリクエストを中止します"
		},
		"terminated": {
			"Syntax": "**terminated** : Boolean",
			"Summary": "リクエストが終了された場合 (`onTerminate` への呼び出し後) は true を格納します (それ以外は false)"
		},
		"timeout": {
			"Syntax": "**timeout** : Real",
			"Summary": "new() を呼び出す際に `options` オブジェクトに渡された `timeout` を格納します"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "HTTPリクエストの URL を格納します"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : 4D.HTTPRequest",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"最大待機時間(秒)"
				],
				[
					"戻り値",
					"4D.HTTPRequest",
					"<-",
					"HTTPRequest オブジェクト"
				]
			],
			"Summary": "サーバーからのレスポンスが来るか、`timeout` 引数で指定した秒数に達するまで待ちます"
		}
	},
	"IMAPTransporter": {
		"addFlags()": {
			"Syntax": "**.addFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Longint  ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"文字列のコレクション: メッセージの固有ID (テキスト型)<br/>&#xA;テキスト: メッセージの固有ID<br/>&#xA;倍長整数 (IMAP all): 選択されたメールボックス内の全メッセージ"
				],
				[
					"keywords",
					"Object",
					"->",
					"追加するキーワードフラグ"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"addFlags処理のステータス"
				]
			],
			"Summary": "`msgIDs` のメッセージに対して、`keywords` で指定したフラグを追加します"
		},
		"append()": {
			"Syntax": "**.append**( *mailObj* : Object ; *destinationBox* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"mailObj",
					"Object",
					"->",
					"Email オブジェクト"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Emailオブジェクトを受信するメールボックス"
				],
				[
					"options",
					"Object",
					"->",
					"文字セット情報を格納したオブジェクト"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"append処理のステータス"
				]
			],
			"Summary": "`destinationBox` に指定したメールボックスに、`mailObj` のメールを追加します"
		},
		"checkConnectionDelay": {
			"Syntax": "**.checkConnectionDelay** : Integer",
			"Summary": "サーバー接続をチェックするまでの最長時間 (秒単位)"
		},
		"copy()": {
			"Syntax": "**.copy**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.copy**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"メッセージの固有ID のコレクション (テキスト)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: 選択されたメールボックスの全メッセージ"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"メッセージのコピー先のメールボックス"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"copy処理のステータス"
				]
			],
			"Summary": "*msgsIDs* または *allMsgs* で定義されたメッセージを IMAP サーバーの *destinationBox* へとコピーします"
		},
		"createBox()": {
			"Syntax": "**.createBox**( *name* :  Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"新規メールボックスの名称"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"createBox処理のステータス"
				]
			],
			"Summary": "`name` に指定した名称の新規メールボックスを作成します"
		},
		"delete()": {
			"Syntax": "**.delete**( *msgsIDs* : Collection ) : Object<br/>**.delete**( *allMsgs* : Integer ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"メッセージの固有ID のコレクション (テキスト)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: 選択されたメールボックスの全メッセージ"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"delete処理のステータス"
				]
			],
			"Summary": "`msgsIDs` または `allMsgs` が指定するメッセージに対して \"削除済み\" フラグを設定します"
		},
		"deleteBox()": {
			"Syntax": "**.deleteBox**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"削除するメールボックスの名称"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"deleteBox処理のステータス"
				]
			],
			"Summary": "`name` に指定した名称のメールボックスを IMAPサーバーから完全に削除します"
		},
		"expunge()": {
			"Syntax": "**.expunge()** : Object",
			"Summary": "\"deleted\" フラグがつけられたメッセージをすべて IMAP メールサーバーから削除します"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo**( { *name* : Text }) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"メールボックスの名称"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"boxInfo オブジェクト"
				]
			],
			"Summary": "カレントメールボックス、または *name* が指定するメールボックスに対応する `boxInfo` オブジェクトを返します"
		},
		"getBoxList()": {
			"Syntax": "**.getBoxList**( { *parameters* : Object } ) : Collection",
			"Params": [
				[
					"parameters",
					"Object",
					"->",
					"引数のオブジェクト"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"mailbox オブジェクトのコレクション"
				]
			],
			"Summary": "利用可能なメールボックスの情報を mailbox オブジェクトのコレクションとしてを返します"
		},
		"getDelimiter()": {
			"Syntax": "**.getDelimiter()** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"階層区切り文字"
				]
			],
			"Summary": "メールボックス名で階層レベルを区切るのに使用される文字を返します"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber*: Integer { ; *options* : Object } ) : Object<br/>**.getMail**( *msgID*: Text { ; *options* : Object } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"メッセージのシーケンス番号"
				],
				[
					"msgID",
					"Text",
					"->",
					"メッセージの固有ID"
				],
				[
					"options",
					"Object",
					"->",
					"メッセージ管理オプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"Email オブジェクト"
				]
			],
			"Summary": "`IMAP_transporter` が指定するメールボックス内の、*msgNumber* または *msgID* に対応するメールを `Email` オブジェクトとして返します"
		},
		"getMails()": {
			"Syntax": "**.getMails**( *ids* : Collection { ; *options* : Object } ) : Object<br/>**.getMails**( *startMsg* : Integer ; *endMsg* : Integer { ; *options* : Object } ) : Object",
			"Params": [
				[
					"ids",
					"Collection",
					"->",
					"メッセージID のコレクション"
				],
				[
					"startMsg",
					"Integer",
					"->",
					"先頭メッセージのシーケンス番号"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"最後のメッセージのシーケンス番号"
				],
				[
					"options",
					"Object",
					"->",
					"メッセージ管理オプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"次のコレクションを格納したオブジェクト:<br/><ul><li>Email オブジェクト のコレクション</li><li>見つからなかったメッセージの ID または番号のコレクション</li></ul>"
				]
			],
			"Summary": "`Email` オブジェクトのコレクションを格納したオブジェクトを返します"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer { ; *updateSeen* : Boolean } ) : Blob<br/>**.getMIMEAsBlob**( *msgID* : Text { ; *updateSeen* : Boolean } ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"メッセージのシーケンス番号"
				],
				[
					"msgID",
					"Text",
					"->",
					"メッセージの固有ID"
				],
				[
					"updateSeen",
					"Boolean",
					"->",
					"true 時には、メールボックス内でメッセージを \"既読\" にします。 false 時にはメッセージの状態は変化しません。"
				],
				[
					"戻り値",
					"BLOB",
					"<-",
					"メールサーバーから返された MIME文字列の BLOB"
				]
			],
			"Summary": "`IMAP_transporter` が指定するメールボックス内の、*msgNumber* または *msgID* に対応するメッセージの MIMEコンテンツを格納した BLOB を返します"
		},
		"move()": {
			"Syntax": "**.move**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.move**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"メッセージの固有ID のコレクション (テキスト)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: 選択されたメールボックスの全メッセージ"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"メッセージの移動先のメールボックス"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"move処理のステータス"
				]
			],
			"Summary": "*msgsIDs* または *allMsgs* で定義されたメッセージを IMAP サーバーの *destinationBox* へと移動します"
		},
		"numToID()": {
			"Syntax": "**.numToID**( *startMsg* : Integer ; *endMsg* : Integer ) : Collection",
			"Params": [
				[
					"startMsg",
					"Integer",
					"->",
					"先頭メッセージのシーケンス番号"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"最後のメッセージのシーケンス番号"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"固有ID のコレクション"
				]
			],
			"Summary": "*startMsg* および *endMsg* で指定された連続した範囲のメッセージのシーケンス番号を IMAP固有IDへと変換します"
		},
		"removeFlags()": {
			"Syntax": "**.removeFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Longint ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"文字列のコレクション: メッセージの固有ID (テキスト型)<br/>&#xA;テキスト: メッセージの固有ID<br/>&#xA;倍長整数 (IMAP all): 選択されたメールボックス内の全メッセージ"
				],
				[
					"keywords",
					"Object",
					"->",
					"削除するキーワードフラグ"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"removeFlags処理のステータス"
				]
			],
			"Summary": "`msgIDs` のメッセージに対して、`keywords` で指定したフラグを削除します"
		},
		"renameBox()": {
			"Syntax": "**.renameBox**( *currentName* : Text ; *newName* : Text ) : Object",
			"Params": [
				[
					"currentName",
					"Text",
					"->",
					"カレントメールボックスの名称"
				],
				[
					"newName",
					"Text",
					"->",
					"新しいメールボックス名"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"renameBox処理のステータス"
				]
			],
			"Summary": "IMAPサーバー上でメールボックスの名称を変更します"
		},
		"searchMails()": {
			"Syntax": "**.searchMails**( *searchCriteria* : Text ) : Collection",
			"Params": [
				[
					"searchCriteria",
					"Text",
					"->",
					"検索条件"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"メッセージ番号のコレクション"
				]
			],
			"Summary": "カレントメールボックスにおいて *searchCriteria* の検索条件に合致するメッセージを検索します"
		},
		"selectBox()": {
			"Syntax": "**.selectBox**( *name* : Text { ; *state* : Integer } ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"メールボックスの名称"
				],
				[
					"state",
					"Integer",
					"->",
					"メールボックスのアクセス状態"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"boxInfo オブジェクト"
				]
			],
			"Summary": "*name* に指定したメールボックスをカレントメールボックスとして選択します"
		},
		"subscribe()": {
			"Syntax": "**.subscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"メールボックスの名称"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"subscribe処理のステータス"
				]
			],
			"Summary": "IMAPサーバーの購読メールボックスとして任意のメールボックスを追加します"
		},
		"unsubscribe()": {
			"Syntax": "**.unsubscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"メールボックスの名称"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"unsubscribe処理のステータス"
				]
			],
			"Summary": "指定したメールボックスを購読メールボックスから削除します"
		},
		"_inheritedFrom_": "Transporter"
	},
	"IncomingMessage": {
		"getBlob()": {
			"Syntax": "**.getBlob**() : Blob",
			"Params": [
				[
					"戻り値",
					"BLOB",
					"<-",
					"Blob 形式のリクエストの本文"
				]
			],
			"Summary": "リクエストの本文部分をBlob として返します"
		},
		"getHeader()": {
			"Syntax": "**.getHeader**( *key* : Text ) : Text",
			"Params": [
				[
					"key",
					"Text",
					"->",
					"取得したいヘッダープロパティ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ヘッダープロパティの値"
				]
			],
			"Summary": "*key* 引数でキーを指定したヘッダーの値を返しますheader"
		},
		"getJSON()": {
			"Syntax": "**.getJSON**() : Variant",
			"Params": [
				[
					"戻り値",
					"Variant",
					"<-",
					"JSON解決したリクエストの本文"
				]
			],
			"Summary": "JSON 解決をしたリクエストの本文を返します"
		},
		"getPicture()": {
			"Syntax": "**.getPicture**() : Picture",
			"Params": [
				[
					"戻り値",
					"Picture",
					"<-",
					"ピクチャー形式のリクエストの本文"
				]
			],
			"Summary": "リクエストの本文をピクチャーとして返します(本文がピクチャーとして送信されていた場合)"
		},
		"getText()": {
			"Syntax": "**.getText**() : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"テキスト形式のリクエストの本文"
				]
			],
			"Summary": "リクエストの本文部分をテキスト値として返します"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "受信したメッセージのカレントのヘッダーがキー/値のペア(文字列)が格納されています"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "リクエストのURL から*IP:port* 部分を抜いたものが文字列として格納されています"
		},
		"urlPath": {
			"Syntax": "**urlPath** : Collection",
			"Summary": "リクエストのURL から*IP:port* 部分を抜いたものが文字列のコレクションとして格納されています"
		},
		"urlQuery": {
			"Syntax": "**urlQuery** : Object",
			"Summary": "リクエストの引数がURL 内でキー/値のペアとして渡されていた場合にはそれが格納されています"
		},
		"verb": {
			"Syntax": "**verb** : Text",
			"Summary": "リクエストで使用された動詞が格納されています"
		}
	},
	"MailAttachment": {
		"cid": {
			"Syntax": "**.cid** : Text",
			"Summary": "添付ファイルの ID"
		},
		"disposition": {
			"Syntax": "**.disposition** : Text",
			"Summary": "`Content-Disposition` ヘッダーの値"
		},
		"getContent()": {
			"Syntax": "**.getContent()** : 4D.Blob",
			"Params": [
				[
					"戻り値",
					"4D.Blob",
					"<-",
					"添付の中身"
				]
			],
			"Summary": "添付オブジェクトの中身を `4D.Blob` オブジェクトとして返します"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "添付ファイルの名前と拡張子"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "添付ファイルの POSIXパス"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "カレントプラットフォームのシンタックスで表現されたファイルのパス"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "添付ファイルの `size` ヘッダーを格納します"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "添付ファイルの `content-type`"
		}
	},
	"OutgoingMessage": {
		"body": {
			"Syntax": "**body** : any",
			"Summary": "送信されるメッセージ本文"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "送信されるメッセージのカレントのヘッダーがキー/値のペアとして格納されてます"
		},
		"setBody()": {
			"Syntax": "**.setBody**( *body* : any )",
			"Params": [
				[
					"body",
					"any",
					"->",
					"送信メッセージの本文"
				]
			],
			"Summary": "*body* 引数をメッセージの本文として設定します"
		},
		"setHeader()": {
			"Syntax": "**.setHeader**( *key* : Text ; *value* : Text )",
			"Params": [
				[
					"key",
					"Text",
					"->",
					"設定するヘッダープロパティ"
				],
				[
					"value",
					"Text",
					"->",
					"ヘッダープロパティの値"
				]
			],
			"Summary": "送信するメッセージのヘッダーの、*key* 引数で指定したキーを、*value* 引数で指定した値で設定します"
		},
		"setStatus()": {
			"Syntax": "**.setStatus**( *status* : Integer )",
			"Params": [
				[
					"status",
					"Integer",
					"->",
					"設定するステータス"
				]
			],
			"Summary": "*status* 引数で与えられたステータスを`status` プロパティに設定します"
		},
		"status": {
			"Syntax": "**status** : Integer",
			"Summary": "送信メッセージのカレントのステータス"
		}
	},
	"POP3Transporter": {
		"delete()": {
			"Syntax": "**.delete**( *msgNumber* : Integer )",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"削除するメッセージの番号"
				]
			],
			"Summary": "*msgNumber* で指定したメールメッセージに対して、POP3サーバーから削除するためのフラグを立てます"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo()** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"boxInfo オブジェクト"
				]
			],
			"Summary": "対象の `POP3 transporter` が指定するメールボックスに対応する `boxInfo` オブジェクトを返します"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber* : Integer { ; *headerOnly* : Boolean } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"リスト中のメッセージの番号"
				],
				[
					"headerOnly",
					"Boolean",
					"->",
					"メールヘッダーのみをダウンロードする場合は true (デフォルトは false）"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"Email オブジェクト"
				]
			],
			"Summary": "`POP3 transporter` が指定するメールボックス内の、*msgNumber* に対応するメールを `Email` オブジェクトとして返します"
		},
		"getMailInfo()": {
			"Syntax": "**.getMailInfo**( *msgNumber* : Integer ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"リスト中のメッセージの番号"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"MailInfo オブジェクト"
				]
			],
			"Summary": "`POP3 transporter` が指定するメールボックス内の、*msgNumber* に対応するメールの `mailInfo` オブジェクトを返します"
		},
		"getMailInfoList()": {
			"Syntax": "**.getMailInfoList()** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"`mailInfo` オブジェクトのコレクション"
				]
			],
			"Summary": "`POP3 transporter` が指定するメールボックス内の全メッセージについて記述した `mailInfo` オブジェクトのコレクションを返します"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"リスト中のメッセージの番号"
				],
				[
					"戻り値",
					"BLOB",
					"<-",
					"メールサーバーから返された MIME文字列の BLOB"
				]
			],
			"Summary": "`POP3_transporter` が指定するメールボックス内の、*msgNumber* に対応するメッセージの MIMEコンテンツを格納した BLOB を返します"
		},
		"undeleteAll()": {
			"Syntax": "**.undeleteAll()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "`POP3_transporter` 内のメールに設定された削除フラグをすべて除去します"
		},
		"_inheritedFrom_": "Transporter"
	},
	"Session": {
		"clearPrivileges()": {
			"Syntax": "**.clearPrivileges()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行が正常に終わった場合には true"
				]
			],
			"Summary": "対象セッションに紐づいているアクセス権をすべて削除し、実行が成功した場合に **true** を返します"
		},
		"createOTP()": {
			"Syntax": "**.createOTP** ( { *lifespan* : Integer } ) : Text",
			"Params": [
				[
					"lifespan",
					"Integer",
					"->",
					"セッショントークンの有効期限(秒)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"セッションのUUID"
				]
			],
			"Summary": "セッションの新しいOTP(One Time Passcode、ワンタイムパスワード)を作成し、そのトークンUUID を返します。"
		},
		"expirationDate": {
			"Syntax": "**.expirationDate** : Text",
			"Summary": "セッションcookie の有効期限"
		},
		"getPrivileges()": {
			"Syntax": "**.getPrivileges**() : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"アクセス権の名称 (文字列) のコレクション"
				]
			],
			"Summary": "対象セッションに紐づいている全アクセス権の名称のコレクションを返します"
		},
		"hasPrivilege()": {
			"Syntax": "**.hasPrivilege**( *privilege* : Text ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"確認するアクセス権の名称"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"セッションが *privilege* のアクセス権を持っていれば true、それ以外は false"
				]
			],
			"Summary": "対象セッションに *privilege* のアクセス権が紐づいていれば true、でなければ false を返します"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "ユーザーセッションの固有のID を格納しています"
		},
		"idleTimeout": {
			"Syntax": "**.idleTimeout** : Integer",
			"Summary": "対象セッションが 4D によって終了されるまでの、非アクティブタイムアウト時間 (分単位)"
		},
		"info": {
			"Syntax": "**.info** : Object",
			"Summary": "サーバー上のリモートクライアントまたはストアドプロシージャーセッション、あるいはスタンドアロンセッションの情報を格納します"
		},
		"isGuest()": {
			"Syntax": "**.isGuest()** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"ゲストセッションの場合は true、それ以外は false"
				]
			],
			"Summary": "アクセス権のないゲストセッションの場合は true を返します"
		},
		"restore()": {
			"Syntax": "**.restore** ( *token* : Text ) : Boolean",
			"Params": [
				[
					"token",
					"Text",
					"->",
					"セッショントークンUUID"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"カレントのセッションがトークンのセッションで正常に置き換えられた場合にはTrue"
				]
			],
			"Summary": "カレントのWeb ユーザーセッションを*token* 引数のUUIDに対応したオリジナルのセッションで置き換えます"
		},
		"setPrivileges()": {
			"Syntax": "**.setPrivileges**( *privilege* : Text ) : Boolean<br/>**.setPrivileges**( *privileges* : Collection )<br/>**.setPrivileges**( *settings* : Object ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"アクセス権の名称"
				],
				[
					"privileges",
					"Collection",
					"->",
					"アクセス権の名称のコレクション"
				],
				[
					"settings",
					"Object",
					"->",
					"\"privileges\" プロパティ (文字列またはコレクション) を持つオブジェクト"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行が正常に終わった場合には true"
				]
			],
			"Summary": "引数として渡したアクセス権やロールをセッションと紐づけ、実行が成功した場合に **true** を返します"
		},
		"storage": {
			"Syntax": "**.storage** : Object",
			"Summary": "セッションのすべてのプロセスで利用可能な情報を保存しておける共有オブジェクトを格納します"
		},
		"userName": {
			"Syntax": "**.userName** : Text",
			"Summary": "セッションと紐づいたユーザー名"
		}
	},
	"Signal": {
		"description": {
			"Syntax": "**.description** : Text",
			"Summary": "`Signal` オブジェクトのカスタムな詳細"
		},
		"signaled": {
			"Syntax": "**.signaled** : Boolean",
			"Summary": "`Signal` オブジェクトの現在の状態"
		},
		"trigger()": {
			"Syntax": "**.trigger( )**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "シグナルオブジェクトの `signaled` プロパティを **true** に設定します"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : Boolean",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"最大待機時間(秒)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"`.signaled` プロパティの状態"
				]
			],
			"Summary": "シグナルオブジェクトの`.signaled` が**true** になるか、`timeout` で指定したタイムアウト時間が経過するまで、待機します"
		}
	},
	"SMTPTransporter": {
		"keepAlive": {
			"Syntax": "**.keepAlive** : Boolean",
			"Summary": "`transporter` オブジェクトが抹消されるまで、SMTP接続が維持されなければならない場合に **true**"
		},
		"send()": {
			"Syntax": "**.send**( *mail* : Object ) : Object",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"送信する メール"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"SMTP ステータス"
				]
			],
			"Summary": "*mail* オブジェクト 引数が指定するメールメッセージを、`transporter` オブジェクトが定義する SMTPサーバーへと送信し、ステータスオブジェクトを返します"
		},
		"_inheritedFrom_": "Transporter"
	},
	"SystemWorker": {
		"closeInput()": {
			"Syntax": "**.closeInput**()",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "外部プロセスの入力ストリーム (*stdin*) を閉じます"
		},
		"commandLine": {
			"Syntax": "**.commandLine** : Text",
			"Summary": "`new()` 関数に引数として渡したコマンドライン"
		},
		"currentDirectory": {
			"Syntax": "**.currentDirectory** : 4D.Folder",
			"Summary": "外部プロセスが実行される作業ディレクトリ"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "レスポンス本文のデータ型"
		},
		"encoding": {
			"Syntax": "**.encoding** : Text",
			"Summary": "レスポンス本文のエンコーディング"
		},
		"errors": {
			"Syntax": "**.errors** : Collection",
			"Summary": "実行エラーの場合、4Dエラー (あれば) のコレクション"
		},
		"exitCode": {
			"Syntax": "**.exitCode** : Integer",
			"Summary": "外部プロセスから返される終了コード"
		},
		"hideWindow": {
			"Syntax": "**.hideWindow** : Boolean",
			"Summary": "実行ファイルや DOSコンソールのウィンドウを隠すのに使用できます (**Windows のみ**)"
		},
		"pid": {
			"Syntax": "**.pid** : Integer",
			"Summary": "外部プロセスの、システムレベルでの一意的な識別子"
		},
		"postMessage()": {
			"Syntax": "**.postMessage**( *message* : Text)<br/>**.postMessage**( *messageBLOB* : Blob)",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"外部プロセスの入力ストリーム (stdin) に書き込むテキスト"
				],
				[
					"messageBLOB",
					"BLOB",
					"->",
					"入力ストリームに書き込むバイト"
				]
			],
			"Summary": "外部プロセスの入力ストリーム (stdin) への書き込みをおこないます"
		},
		"response": {
			"Syntax": "**.response** : Text<br/>**.response** : Blob",
			"Summary": "リクエストが終了した時点で、返された全データの結合"
		},
		"responseError": {
			"Syntax": "**.responseError** : Text",
			"Summary": "リクエストが終了した時点で、返された全エラーの結合"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "`SystemWorker` の実行を強制終了します"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "外部プロセスが終了された場合に **true**"
		},
		"timeout": {
			"Syntax": "**.timeout** : Integer",
			"Summary": "外部プロセスが生きている場合、キルされるまでの秒数"
		},
		"wait()": {
			"Syntax": "**.wait**( {*timeout* : Real} ) : 4D.SystemWorker",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"最大待機時間(秒)"
				],
				[
					"戻り値",
					"4D.SystemWorker",
					"<-",
					"SystemWorker オブジェクト"
				]
			],
			"Summary": "`SystemWorker` の実行終了まで、または *timeout* で指定した時間に到達するまで待機します"
		}
	},
	"TCPConnection": {
		"address": {
			"Syntax": "**address** : Text",
			"Summary": "リモートマシンのIP アドレスまたはドメイン名"
		},
		"closed": {
			"Syntax": "**closed** : Boolean",
			"Summary": "接続が閉じられているかどうかの情報が格納されています"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "接続に関連したエラーオブジェクトのコレクションが格納されています"
		},
		"listener": {
			"Syntax": "**listener** : Object",
			"Summary": "`TCPConnection` を作成した`TCPListener` オブジェクト(あれば)"
		},
		"noDelay": {
			"Syntax": "**noDelay** : Boolean",
			"Summary": "Nagle のアルゴリズムが無効化されている(`true`) か有効かされている(`false`) かの情報が格納されています"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "リモートマシンのポート番号"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob )",
			"params": [
				[
					"data",
					"BLOB",
					"->",
					"送信するデータ"
				]
			],
			"Summary": "データをサーバーに送信します"
		},
		"shutdown()": {
			"Syntax": "**.shutdown**()",
			"params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "接続の*write* チャンネル(クライアントからサーバーへのストリーム)を閉じます"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } )",
			"params": [
				[
					"timeout",
					"Real",
					"->",
					"最大待機時間(秒)"
				]
			],
			"Summary": "TCP 接続が閉じられるか、あるいは`timeout` 引数で指定した秒数に達するまで待ちます"
		}
	},
	"TCPEvent": {
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "イベントに関連づけられたデータ"
		},
		"ip": {
			"Syntax": "**ip** : Text",
			"Summary": "リモートマシンのIP アドレス"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "リモートマシンのポート番号"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "イベントのタイプ"
		}
	},
	"TCPListener": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "接続に関連したエラーオブジェクトのコレクションが格納されています"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "マシンのポート番号"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "リスナーを閉じ、ポートを閉じます"
		}
	},
	"Transporter": {
		"acceptUnsecureConnection": {
			"Syntax": "**.acceptUnsecureConnection** : Boolean",
			"Summary": "暗号化されていない接続の確立が許可されてれば **true**"
		},
		"authenticationMode": {
			"Syntax": "**.authenticationMode** : Text",
			"Summary": "メールサーバーのセッションを開くのに使用される認証モード"
		},
		"bodyCharset": {
			"Syntax": "**.bodyCharset** : Text",
			"Summary": "メール本文で使用される文字セットとエンコーディング"
		},
		"connectionTimeOut": {
			"Syntax": "**.connectionTimeOut** : Integer",
			"Summary": "サーバー接続の確立までに待機する最長時間 (秒単位)"
		},
		"headerCharset": {
			"Syntax": "**.headerCharset** : Text",
			"Summary": "メールヘッダーで使用される文字セットとエンコーディング"
		},
		"host": {
			"Syntax": "**.host** : Text",
			"Summary": "ホストサーバーの名前または IPアドレス"
		},
		"logFile": {
			"Syntax": "**.logFile** : Text",
			"Summary": "メール接続に対して定義された拡張ログファイル (あれば) へのフルパス"
		},
		"port": {
			"Syntax": "**.port** : Integer",
			"Summary": "メール通信に使用されるポート番号"
		},
		"sendTimeOut": {
			"Syntax": "**.sendTimeOut** : Integer",
			"Summary": "`.send()` 呼び出し時のタイムアウト時間 (秒単位)"
		},
		"user": {
			"Syntax": "**.user** : Text",
			"Summary": "メールサーバーでの認証に使用されたユーザー名"
		},
		"checkConnection()": {
			"Syntax": "**.checkConnection()** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"transporter オブジェクト接続のステータス"
				]
			],
			"Summary": "`transporter` オブジェクトが保存する情報を使用して接続をチェックします"
		}
	},
	"UDPEvent": {
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "イベントに関連づけられたデータ"
		},
		"ip": {
			"Syntax": "**ip** : Text",
			"Summary": "リモートマシンの IP アドレス"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "リモートマシンのポート番号"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "イベントのタイプ"
		}
	},
	"UDPSocket": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "ソケットに関連したエラーオブジェクトのコレクション"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "リッスンするポート番号"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob ; *hostName* : Text ; *remotePort* : Integer )",
			"params": [
				[
					"data",
					"BLOB",
					"->",
					"送信するデータ"
				],
				[
					"hostName",
					"Text",
					"->",
					"サーバーの名前またはIP アドレス"
				],
				[
					"remotePort",
					"Integer",
					"->",
					"接続するリモートポート(0=任意)"
				]
			],
			"Summary": "*data* 引数のデータを*hostName* で指定したリモートサーバーに、*remotePort* 引数で指定したポート番号で送信します"
		}
	},
	"Vector": {
		"cosineSimilarity()": {
			"Syntax": "**.cosineSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"比較するベクトル"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"ベクトル感の距離"
				]
			],
			"Summary": "現在の4D ベクトルと*vector* 引数に渡したベクトルとの間のコサイン類似度を計算します"
		},
		"dotSimilarity()": {
			"Syntax": "**.dotSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"比較するベクトル"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"ベクトル感の距離"
				]
			],
			"Summary": "現在の4D ベクトルと*vector* 引数に渡したベクトルとの間のドット積を計算します"
		},
		"euclideanDistance()": {
			"Syntax": "**.euclideanDistance**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"比較するベクトル"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"ベクトル感の距離"
				]
			],
			"Summary": "現在の4D ベクトルと*vector* 引数に渡したベクトルとの間のユークリッド距離を計算します"
		},
		"length": {
			"Syntax": "**length** : Integer",
			"Summary": "ベクトル成分の数"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**() : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"ベクトル成分を表す実数値のコレクション"
				]
			],
			"Summary": "ベクトル成分を実数値のコレクションとして返します"
		}
	},
	"WebForm": {
		"componentName": {
			"Syntax": "***.componentName*** : 4D.WebFormItem",
			"Summary": "プロパティとして直接利用可能なオブジェクトです"
		},
		"disableState()": {
			"Syntax": "**.disableState**( *state* : string)",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Webフォーム上で無効化する state の名称"
				]
			],
			"Summary": "カレントWeb\nフォーム上の *state* のレンダリングを無効化します"
		},
		"enableState()": {
			"Syntax": "**.enableState**( *state* : string )",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Webフォーム上で有効化する state の名称"
				]
			],
			"Summary": "カレントWeb\nフォーム上の *state* のレンダリングを有効化します"
		},
		"setError()": {
			"Syntax": "**.setError**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Webフォームに表示するエラーメッセージ"
				]
			],
			"Summary": "*msg* をエラーメッセージとして Webフォームに送信します"
		},
		"setMessage()": {
			"Syntax": "**.setMessage**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Webフォームに表示する情報メッセージ"
				]
			],
			"Summary": "*msg* を情報メッセージとして Webフォームに送信します"
		},
		"setWarning()": {
			"Syntax": "**.setWarning**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Webフォームに表示する警告メッセージ"
				]
			],
			"Summary": "*msg* を警告メッセージとして Webフォームに送信します"
		}
	},
	"_command_": {
		"Web Form": {
			"Syntax": "**Web Form** : 4D.WebForm",
			"Params": [
				[
					"戻り値",
					"4D.WebForm",
					"<-",
					"新しい `WebForm` プロキシオブジェクト"
				]
			],
			"Summary": "Webフォームとの対話を可能にする `4D.WebForm` プロキシオブジェクトを返します"
		},
		"Web Event": {
			"Syntax": "**Web Event** : Object",
			"Params": [
				[
					"戻り値",
					"object",
					"<-",
					"object"
				]
			],
			"Summary": "Webフォームコンポーネントにリンクして発生したイベントの情報を持つオブジェクトを返します"
		},
		"Call chain": {
			"Syntax": "**Call chain** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"プロセス内での呼び出しチェーンを記述したオブジェクトのコレクション"
				]
			],
			"Summary": "**Call chain** コマンドは、カレントプロセス内におけるメソッド呼び出しチェーンの各ステップを説明するオブジェクトのコレクションを返します。"
		},
		"Command name": {
			"Syntax": "**Command name** ( *command* {; *info* {; *theme*}} ) : Text",
			"Params": [
				[
					"コマンド",
					"Integer",
					"->",
					"コマンド番号"
				],
				[
					"info",
					"Integer",
					"<-",
					"評価するコマンドのプロパティ"
				],
				[
					"theme",
					"Text",
					"<-",
					"コマンドのランゲージテーマ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ローカライズされたコマンド名"
				]
			],
			"Summary": "*command* 引数にコマンド番号を渡したコマンドの名前と、オプションとしてそのコマンドのプロパティを返します。"
		},
		"Compile project": {
			"Syntax": "**Compile project** {( {*projectFile*}{;}{*options*} )} : Object",
			"Params": [
				[
					"projectFile",
					"4D.File",
					"->",
					"コンパイルする.4DProject ファイル"
				],
				[
					"options",
					"Object",
					"->",
					"コンパイルオプションを指定するオブジェクト"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"コンパイルのステータスの情報を格納したオブジェクト"
				]
			],
			"Summary": "カレントのホストプロジェクト、または*projectFile* 引数で指定したプロジェクトをコンパイルします。"
		},
		"Create deployment license": {
			"Syntax": "**Create deployment license** ( *mergedApp* ; *autoLicenseTarget* ) : Object<br/>**Create deployment license** ( *mergedApp* ; *buildLicense* {; *oemLicense*} ) : Object",
			"Params": [
				[
					"mergedApp",
					"4D.Folder",
					"->",
					"組み込みアプリを格納しているフォルダ"
				],
				[
					"autoLicenseTarget",
					"Integer",
					"->",
					"自動ライセンス埋め込み用のターゲットライセンス"
				],
				[
					"buildLicense",
					"4D.File",
					"->",
					"埋め込みライセンスを生成するのに必要なライセンス"
				],
				[
					"oemLicense",
					"4D.File",
					"->",
					"サーバーライセンスの場合は4D OEM XML キーライセンス"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ステータス"
				]
			],
			"Summary": "**Create deployment license** コマンドは*mergedApp* 引数のビルドアプリケーションのLicenses フォルダ内に埋め込みライセンスファイルを作成します。"
		},
		"Create entity selection": {
			"Syntax": "**Create entity selection** ( *dsTable* : Table { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"dsTable",
					"Table",
					"->",
					"エンティティセレクションの元となるカレントセレクションが属する 4Dデータベースのテーブル"
				],
				[
					"settings",
					"Object",
					"->",
					"ビルドオプション: context"
				],
				[
					"戻り値",
					"4D.EntitySelection",
					"<-",
					"指定したテーブルに対応するデータクラスのエンティティセレクション"
				]
			],
			"Summary": "*dsTable* で指定したテーブルに対応するデータクラスの追加可能な新規エンティティセレくションを、同テーブルのカレントセレクションに基づいてビルドして返します。"
		},
		"DIALOG": {
			"Syntax": "**DIALOG** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームの属するテーブルまたは 省略した場合はデフォルトテーブルまたは プロジェクトフォームを使用"
				],
				[
					"form",
					"Text, Object",
					"->",
					"プロジェクトフォームまたはテーブルフォームのフォーム名(文字列)、&#xA;あるいはフォームを定義した.jsonファイルへのPOSIXパス(文字列)、&#xA;あるいは開くフォームを定義したオブジェクト"
				],
				[
					"formData",
					"Object",
					"->",
					"フォームに関連づけるデータ"
				],
				[
					"\\*",
					"演算子",
					"->",
					"同じプロセスを使用"
				]
			],
			"Summary": "The **DIALOG** command presents the *form* to the user, along with *formData* parameter(s) (optional)."
		},
		"ds": {
			"Syntax": "**ds** { ( *localID* : Text ) } : cs.DataStore",
			"Params": [
				[
					"localID",
					"Text",
					"->",
					"参照を取得したいリモートデータストアのローカルID"
				],
				[
					"戻り値",
					"cs.DataStore",
					"<-",
					"データストア参照"
				]
			],
			"Summary": "カレントの 4Dデータベース、または *localID* で指定したデータベースに合致するデータストアの参照を返します"
		},
		"File": {
			"Syntax": "**File** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.File<br/>**File** ( *fileConstant* : Integer { ; \\* } ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"ファイルパス"
				],
				[
					"fileConstant",
					"Integer",
					"->",
					"4Dファイル定数"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (デフォルト) または `fk platform path`"
				],
				[
					"\\*",
					"operator",
					"->",
					"ホストデータベースのファイルを返すには \\* を渡します"
				],
				[
					"戻り値",
					"4D.File",
					"<-",
					"新規ファイルオブジェクト"
				]
			],
			"Summary": "`4D.File` 型の新しいオブジェクトを作成して返します"
		},
		"Folder": {
			"Syntax": "**Folder** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**Folder** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"フォルダーパス"
				],
				[
					"folderConstant",
					"Integer",
					"->",
					"4Dフォルダー定数"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (デフォルト) または `fk platform path`"
				],
				[
					"\\*",
					"operator",
					"->",
					"ホストデータベースのフォルダーを返すには \\* を渡します"
				],
				[
					"戻り値",
					"4D.Folder",
					"<-",
					"新規フォルダーオブジェクト"
				]
			],
			"Summary": "`4D.Folder` 型の新しいオブジェクトを作成して返します"
		},
		"FORM EDIT": {
			"Syntax": "**FORM EDIT** ( {*aTable* ;} *form* )<br/>**FORM EDIT** ( {*aTable* ;} *form* ; *object* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームの属するテーブルまたは 省略した場合はデフォルトテーブルまたは プロジェクトフォームを使用"
				],
				[
					"form",
					"Text",
					"->",
					"フォーム名"
				],
				[
					"object",
					"Text",
					"->",
					"フォームオブジェクト名またはグループ名"
				]
			],
			"Summary": "The **FORM EDIT** command opens the *form* associated to *aTable* in the 4D Form editor, with optionnally *object* selected."
		},
		"Form event code": {
			"Syntax": "**Form event code**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"フォームイベント番号"
				]
			]
		},
		"FORM Event": {
			"Syntax": "**FORM Event** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"イベントオブジェクト"
				]
			],
			"Summary": "**FORM Event** returns an object containing information about the form event that has just occurred."
		},
		"FORM LOAD": {
			"Syntax": "**FORM LOAD** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"ロードするテーブルフォーム(省略時はプロジェクトフォームをロード)"
				],
				[
					"form",
					"Text, Object",
					"->",
					"(プロジェクトまたはテーブル)フォーム名(文字列)、&#xA;あるいはフォームを定義した.jsonファイルへのPOSIXパス(文字列)、&#xA;あるいは開くフォームを定義したオブジェクト"
				],
				[
					"formData",
					"Object",
					"->",
					"フォームに関連づけるデータ"
				],
				[
					"\\*",
					"演算子",
					"->",
					"指定時、コマンドはコンポーネントから実行した場合にホストのデータベースコマンドが適応されます(それ以外の場合は無視されます)。"
				]
			],
			"Summary": "The **FORM LOAD** command is used to load the *form* in memory in the current process along with *formData* (optional) in order to print its data or parse its contents."
		},
		"Form": {
			"Syntax": "**Form**  : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"カレントのフォームのフォームデータ"
				]
			],
			"Summary": "The **Form** command returns the object associated with the current form (instantiated from the *formData* parameter or the user class assigned in the Form editor)."
		},
		"Formula from string": {
			"Syntax": "**Formula from string**( *formulaString* : Text ) : 4D.Function<br/>**Formula from string**( *formulaString* : Text ; *context* : Longint ) : 4D.Function",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"オブジェクトとして返されるフォーミュラ文字列"
				],
				[
					"context",
					"Number",
					"->",
					"`sk execute in current database` (デフォルト) または `sk execute in host database`"
				],
				[
					"戻り値",
					"4D.Function",
					"<-",
					"フォーミュラを格納しているネイティブなオブジェクト"
				]
			],
			"Summary": "*formulaString* と任意の *context* 引数に基づいた`4D.Function` オブジェクトを作成します"
		},
		"Formula": {
			"Syntax": "**Formula** ( *formulaExp* : Expression ) : 4D.Function",
			"Params": [
				[
					"formulaExp",
					"式",
					"->",
					"オブジェクトとして返されるフォーミュラ"
				],
				[
					"戻り値",
					"4D.Function",
					"<-",
					"フォーミュラを格納しているネイティブな Function オブジェクト"
				]
			],
			"Summary": "*formulaExp* の式に基づいた `4D Function` オブジェクトを作成します"
		},
		"HTTP Parse message": {
			"Syntax": "**HTTP Parse message** ( *data* : Text ) : Object<br/>**HTTP Parse message**( *data* : Blob ) : Object",
			"Params": [
				[
					"data",
					"Text, Blob",
					"->",
					"解析するデータ"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"オブジェクト (各プロパティは、マルチパートの各データです)"
				]
			],
			"Summary": "multipart/form-*data* のテキストまたは Blob (HTTP \"response\" メッセージ) をパースし、コンテンツをオブジェクトに抽出します。 戻り値のオブジェクトの各プロパティは、マルチパートの各データに対応します"
		},
		"IMAP New transporter": {
			"Syntax": "**IMAP New transporter**( *server* : Object ) : 4D.IMAPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"メールサーバー情報"
				],
				[
					"戻り値",
					"4D.IMAPTransporter",
					"<-",
					"IMAP transporter オブジェクト"
				]
			],
			"Summary": "新規の IMAP 接続を設定します"
		},
		"Last errors": {
			"Syntax": "**Last errors** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"エラーオブジェクトのコレクション"
				]
			],
			"Summary": "**Last errors** コマンドは4D アプリケーションのカレントのスタックエラーをエラーオブジェクトのコレクションとして返すか、あるいはエラーが何も起きなかった場合には **null** を返します。"
		},
		"License info": {
			"Syntax": "**License info** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"アクティブなライセンスに関する情報"
				]
			],
			"Summary": "The **License info** command returns an object providing detailed information about the active license."
		},
		"LISTBOX Get property": {
			"Syntax": "**LISTBOX Get property** ( {* ;} *object* ; *property* ) : any",
			"Params": [
				[
					"\\*",
					"演算子",
					"->",
					"指定時、object はオブジェクト名(文字列)。 省略時、object は変数。"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (\\* 指定時) または変数 (\\* 省略時)"
				],
				[
					"property",
					"Integer",
					"->",
					"値を取得したいプロパティ"
				],
				[
					"戻り値",
					"Integer, Text",
					"<-",
					"カレントの値"
				]
			],
			"Summary": "**LISTBOX Get property** コマンドは、*object* 引数および *\\** 引数を使用して指定したリストボックスまたはリストボックスカラムの、 *property* で指定したプロパティの値を返します。"
		},
		"LISTBOX SET PROPERTY": {
			"Syntax": "**LISTBOX SET PROPERTY** ( {* ;} *object* ; *property* ; *value* )",
			"Params": [
				[
					"\\*",
					"演算子",
					"->",
					"指定時、object はオブジェクト名(文字列)。 省略時、object は変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (\\* 指定時) または変数 (\\* 省略時)"
				],
				[
					"property",
					"Integer",
					"->",
					"リストボックスまたはカラムのプロパティ"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"プロパティの値"
				]
			],
			"Summary": "**LISTBOX SET PROPERTY** コマンドは、*object* および *\\** 引数を使用して指定したリストボックスまたはリストボックスカラムの、*property* 引数で指定したプロパティの値を *value* の値で設定します。"
		},
		"MAIL Convert from MIME": {
			"Syntax": "**MAIL Convert from MIME**( *mime* : Blob ) : Object<br/>**MAIL Convert from MIME**( *mime* : Text ) : Object",
			"Params": [
				[
					"mime",
					"Blob, Text",
					"->",
					"MIME形式のメール"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"Email オブジェクト"
				]
			],
			"Summary": "MIMEドキュメントを有効な Emailオブジェクトへと変換します"
		},
		"MAIL Convert to MIME": {
			"Syntax": "**MAIL Convert to MIME**( *mail* : Object { ; *options* : Object } ) : Text",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Email オブジェクト"
				],
				[
					"options",
					"Object",
					"->",
					"文字セットとエンコーディングのメールオプション"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"MIME に変換された Emailオブジェクト"
				]
			],
			"Summary": "Emailオブジェクトを MIMEテキストへと変換します"
		},
		"MAIL New attachment": {
			"Syntax": "**MAIL New attachment**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"添付ファイル"
				],
				[
					"zipFile",
					"4D.ZipFile",
					"->",
					"添付 Zipファイル"
				],
				[
					"blob",
					"4D.Blob",
					"->",
					"添付を格納した BLOB"
				],
				[
					"path",
					"Text",
					"->",
					"添付ファイルのパス"
				],
				[
					"name",
					"Text",
					"->",
					"メールクライアントが添付を指定するのに使用する名前 + 拡張子"
				],
				[
					"cid",
					"Text",
					"->",
					"添付の ID (HTMLメッセージのみ)、あるいは cid が不要な場合は \"\" (空の文字列)"
				],
				[
					"type",
					"Text",
					"->",
					"content-type ヘッダーの値"
				],
				[
					"disposition",
					"Text",
					"->",
					"content-disposition ヘッダーの値: \"inline\" あるいは \"attachment\""
				],
				[
					"戻り値",
					"4D.MailAttachment",
					"<-",
					"Attachment オブジェクト"
				]
			],
			"Summary": "Email オブジェクト に追加することができる添付オブジェクトを作成します"
		},
		"New collection": {
			"Syntax": "**New collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection, Picture, Pointer",
					"->",
					"コレクションの値"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"New collection"
				]
			],
			"Summary": "新しい空の、または値が既に入れられたコレクションを作成し、その参照を返します。"
		},
		"New log file": {
			"Syntax": "**New log file** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"閉じたログファイルの完全パス名"
				]
			],
			"Summary": "**New log file** コマンドはカレントのログファイルを閉じてその名前を変更した後、元のものと同じ名前で新しいログファイルを作成し同じ元のものと同じ場所に保存します"
		},
		"New shared collection": {
			"Syntax": "**New shared collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"数値、テキスト、日付、時間、ブール、オブジェクト、コレクション",
					"->",
					"共有コレクションの値"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"新規共有コレクション"
				]
			],
			"Summary": "空の、あるいは値が入った新規共有コレクションを作成し、その参照を返します"
		},
		"New signal": {
			"Syntax": "**New signal** { ( *description* : Text ) } : 4D.Signal",
			"Params": [
				[
					"description",
					"Text",
					"->",
					"シグナルの詳細"
				],
				[
					"戻り値",
					"4D.Signal",
					"<-",
					"シグナルを格納するネイティブオブジェクト"
				]
			],
			"Summary": "`4D.Signal` オブジェクトを作成します"
		},
		"Num": {
			"Syntax": "**Num** ( *expression* {; *separator*} ) : Real<br/>**Num** ( *expression* ; *base* ) : Real",
			"Params": [
				[
					"式",
					"Text, Boolean, Integer",
					"->",
					"数値形式を返したい文字列、あるいは0か1を返したいブール値、あるいは数値式"
				],
				[
					"separator",
					"Text",
					"->",
					"小数点記号"
				],
				[
					"base",
					"Integer",
					"->",
					"基数を表す2から36までの値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"expression 引数の数値形式"
				]
			],
			"Summary": "**Num** コマンドは、*expression* に渡した文字列、ブール、または数値式の数値型を返します。"
		},
		"OBJECT Get data source formula": {
			"Syntax": "**OBJECT Get data source formula** ( {* ;} *object* ) : *formula*",
			"Params": [
				[
					"\\*",
					"演算子",
					"->",
					"指定時、object はオブジェクト名(文字列)<br/>省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( \\* 指定時)、または<br/>変数やフィールド( \\* 省略時)"
				],
				[
					"formula",
					"4D.Formula",
					"<-",
					"フォームオブジェクトに割り当てられているフォーミュラ(フォーミュラが何も割り当てられていない場合には `Null`)"
				]
			],
			"Summary": "*object* 引数と *\\** で指定したオブジェクトに割り当てられたフォーミュラを(あれば)返します。"
		},
		"OBJECT SET DATA SOURCE FORMULA": {
			"Syntax": "**OBJECT SET DATA SOURCE FORMULA** ( {* ;} *object* ; *formula* )",
			"Params": [
				[
					"\\*",
					"演算子",
					"->",
					"指定時、object はオブジェクト名(文字列)<br/>省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( \\* 指定時)、または<br/>変数やフィールド( \\* 省略時)"
				],
				[
					"formula",
					"4D.Formula",
					"->",
					"データソースとして割り当てるフォーミュラ"
				]
			],
			"Summary": "*object* 引数と *\\** で指定したオブジェクトのデータソースとしてフォーミュラ(式)を割り当てます"
		},
		"Open datastore": {
			"Syntax": "**Open datastore**( *connectionInfo* : Object ; *localID* : Text ) : 4D.DataStoreImplementation",
			"Params": [
				[
					"connectionInfo",
					"Object",
					"->",
					"リモートデータストアへの接続に使用する接続プロパティ"
				],
				[
					"localID",
					"Text",
					"->",
					"ローカルアプリケーション内で、開かれたデータストアに対して割り当てる ID (必須)"
				],
				[
					"戻り値",
					"4D.DataStoreImplementation",
					"<-",
					"データストアオブジェクト"
				]
			],
			"Summary": "*connectionInfo* 引数が指定するリモートデータストアにアプリケーションを接続します"
		},
		"POP3 New transporter": {
			"Syntax": "**POP3 New transporter**( *server* : Object ) : 4D.POP3Transporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"メールサーバー情報"
				],
				[
					"戻り値",
					"4D.POP3Transporter",
					"<-",
					"POP3 transporter オブジェクト"
				]
			],
			"Summary": "新規のPOP3 接続を設定します"
		},
		"Print form": {
			"Syntax": "**Print form** ( {*aTable* ;} *form* {; *formData*} {; *areaStart*{; *areaEnd*}} ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームが属するテーブル, または 省略した場合は、デフォルトテーブル"
				],
				[
					"form",
					"Text, Object",
					"->",
					"フォーム名(文字列)、あるいはフォームを定義した.jsonファイルへのPOSIXパス(文字列)、あるいは印刷するフォームを定義したオブジェクト"
				],
				[
					"formData",
					"Object",
					"->",
					"フォームに関連づけるデータ"
				],
				[
					"areaStart",
					"Integer",
					"->",
					"印刷マーカ、または開始エリア(areaEndが指定された場合)"
				],
				[
					"areaEnd",
					"Integer",
					"->",
					"終了エリア(areaStartが指定された場合)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"印刷されたエリアの高さ"
				]
			],
			"Summary": "The **Print form** command simply prints *form* with the current values of fields and variables of *aTable*."
		},
		"Process activity": {
			"Syntax": "**Process activity** () : Object<br/>**Process activity** ( *options* ) : Object<br/>**Process activity** ( *sessionID* ) : Object<br/>**Process activity** ( *sessionID* ; *options* ) : Object",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"セッションID"
				],
				[
					"options",
					"Integer",
					"->",
					"返される情報を指定するオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"実行中のプロセスまたはユーザーセッション(4D Serverのみ) のスナップショット"
				]
			],
			"Summary": "The **Process activity** command returns a snapshot of running processes and/or (4D Server only) connected user sessions at a given time."
		},
		"Process info": {
			"Syntax": "**Process info** ( *processNumber* : Integer ) : Object",
			"Params": [
				[
					"processNumber",
					"Integer",
					"->",
					"Process number"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"プロセスに関する情報"
				]
			],
			"Summary": "*processNumber* 引数にプロセス番号を渡したプロセスについての詳細な情報を提供するオブジェクトを返します"
		},
		"Process number": {
			"Syntax": "**Process number** ( *name* {; *} ) : Integer<br/>**Process number** ( *id* {; *} ) : Integer",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"プロセス番号を取得したいプロセスの名前"
				],
				[
					"id",
					"Text",
					"->",
					"プロセス番号を取得したいプロセスのID"
				],
				[
					"\\*",
					"演算子",
					"->",
					"サーバーからプロセス番号を返す"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"Process number"
				]
			],
			"Summary": "The `Process number` command returns the number of the process whose *name* or *id* you pass in the first parameter"
		},
		"SELECT LOG FILE": {
			"Syntax": "**SELECT LOG FILE** ( *logFile* )<br/>**SELECT LOG FILE** ( * )",
			"Params": [
				[
					"logFile",
					"Text",
					"->",
					"ログファイルの名前"
				],
				[
					"\\*",
					"演算子",
					"->",
					"カレントのログファイルを閉じる"
				]
			],
			"Summary": "**SELECT LOG FILE** コマンドは引数内に渡した値に応じて、ログファイルを作成するか、または閉じます"
		},
		"Session info": {
			"Syntax": "**Session info** ( *sessionId* : Integer ) : Object",
			"Params": [
				[
					"sessionID",
					"Integer",
					"->",
					"セッションID"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"セッションに関する情報"
				]
			],
			"Summary": "*sessionID* 引数に渡した ID を持つセッションの詳細を記述したオブジェクトを返します"
		},
		"Session storage": {
			"Syntax": "**Session storage** ( *id* ) : Object",
			"Params": [
				[
					"id",
					"Text",
					"->",
					"セッションの固有ID(UUID)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"セッションのStorage オブジェクト"
				]
			],
			"Summary": "The **Session storage** command returns the storage object of the session whose unique identifier you passed in the *id* parameter."
		},
		"Session": {
			"Syntax": "**Session** : 4D.Session",
			"Params": [
				[
					"戻り値",
					"4D.Session",
					"<-",
					"Session オブジェクト"
				]
			],
			"Summary": "カレントのユーザーセッションに対応する `Session` オブジェクトを返します"
		},
		"SET ALLOWED METHODS": {
			"Syntax": "**SET ALLOWED METHODS** ( *methodsArray* )",
			"Params": [
				[
					"methodsArray",
					"テキスト配列",
					"->",
					"メソッド名の配列"
				]
			],
			"Summary": "The **SET ALLOWED METHODS** command designates the project methods that can be entered via the application."
		},
		"SET WINDOW DOCUMENT ICON": {
			"Syntax": "**SET WINDOW DOCUMENT ICON** ( *winRef* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *image* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *file* )<br/>**SET WINDOW DOCUMENT ICON** (  *winRef* ; *image* ; *file* )",
			"Params": [
				[
					"winRef",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				],
				[
					"image",
					"Picture",
					"->",
					"カスタムアイコン"
				],
				[
					"file",
					"4D.File, 4D.Folder",
					"->",
					"ファイルパスまたはフォルダパス"
				]
			],
			"Summary": "*winRef* ウィンドウ参照の引数に合わせて、 *image* または *file* 引数を使用してマルチウィンドウアプリケーションにおいてウィンドウのアイコンを定義することができます"
		},
		"SMTP New transporter": {
			"Syntax": "**SMTP New transporter**( *server* : Object ) : 4D.SMTPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"メールサーバー情報"
				],
				[
					"戻り値",
					"4D.SMTPTransporter",
					"<-",
					"SMTP transporter オブジェクト"
				]
			],
			"Summary": "新規のSMTP 接続を設定します"
		},
		"String": {
			"Syntax": "**String** ( *expression* {; *format* {; *addTime*}} ) : Text<br/>**String** ( *expression* ; *base* ) : Text",
			"Params": [
				[
					"式",
					"式",
					"->",
					"文字列式を返したい式 (実数、整数、倍長整数、日付、時間、文字列、 テキスト、ブール、未定義、Null を指定可能)"
				],
				[
					"format",
					"Integer, Text",
					"->",
					"表示フォーマット"
				],
				[
					"addTime",
					"Time",
					"->",
					"expressionが日付の時、追加する時間"
				],
				[
					"base",
					"Integer",
					"->",
					"式が数値の場合に、基数を表す2 から36 までの値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"式の文字列の形式"
				]
			],
			"Summary": "**String** コマンドは、*expression* に渡した数値、日付、時間、文字列、またはブールを文字列に変換します。"
		},
		"Super": {
			"Syntax": "**Super**( ...param : any )<br/>**Super** : Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"親コンストラクターに受け渡す引数"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"親オブジェクト"
				]
			],
			"Summary": "スーパークラス (親クラス) を呼び出すことができます"
		},
		"This": {
			"Syntax": "**This** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"カレントの要素またはオブジェクト"
				]
			],
			"Summary": "現在処理中のオブジェクトへの参照を返します"
		},
		"Trim end": {
			"Syntax": "**Trim end** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"トリミングするテキスト"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"トリミングされたテキスト"
				]
			],
			"Summary": "*aString* 引数の文字列から終端の**空白** を削除し、元の文字列を変更することなく新しい文字列を返します。"
		},
		"Trim start": {
			"Syntax": "**Trim start** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"トリミングするテキスト"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"トリミングされたテキスト"
				]
			],
			"Summary": "*aString* 引数の文字列の最初の**空白** を削除し、元の文字列を変更することなく新しい文字列を返します。"
		},
		"Trim": {
			"Syntax": "**Trim** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"トリミングするテキスト"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"トリミングされたテキスト"
				]
			],
			"Summary": "*aString* 引数の文字列の前後の **空白** を削除し、元の文字列を変更することなく新しい文字列を返します"
		},
		"USE ENTITY SELECTION": {
			"Syntax": "**USE ENTITY SELECTION** ( *entitySelection* : 4D.EntitySelection )",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"エンティティセレクション"
				]
			],
			"Summary": "*entitySelection* 引数のデータクラスに合致するテーブルのカレントセレクションを、渡したエンティティセレクションの内容で更新します"
		},
		"WA Get context": {
			"Syntax": "**WA Get context** ( {* ;} *object* ) -> *contextObj*",
			"Params": [
				[
					"\\*",
					"演算子",
					"->",
					"指定時、*object* はオブジェクト名(文字列)。 省略時、*object* は変数。"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (\\* 指定時) または変数 (\\* 省略時)"
				],
				[
					"contextObj",
					"Object",
					"<-",
					"事前に定義されていればコンテキストオブジェクト、それ以外の場合には `null`"
				]
			],
			"Summary": "\\* および *object* 引数で指定された Web エリア内の `$4d` に対して `WA SET CONTEXT` を使用して定義されたコンテキストオブジェクトを取得します。"
		},
		"WA SET CONTEXT": {
			"Syntax": "**WA SET CONTEXT** ( {* ;} *object* ; *contextObj* )",
			"Params": [
				[
					"\\*",
					"演算子",
					"->",
					"指定時、*object* はオブジェクト名(文字列)。 省略時、*object* は変数。"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (\\* 指定時) または変数 (\\* 省略時)"
				],
				[
					"contextObj",
					"Object",
					"->",
					"`$4d` を使用して呼び出せる関数を格納したオブジェクト"
				]
			],
			"Summary": "\\* および *object* 引数で指定されたWeb エリア内の `$4d` に対して *contextObj* 引数で指定したコンテキストオブジェクトを定義します。 このコマンドが使用されると、 `$4d` は提供された *contextObj* 内で宣言されたコンテンツのみにアクセスできます。 コンテキストオブジェクトが何も設定されていない場合、 `$4d` はすべての4D メソッドにアクセスできますが、ユーザークラスにはアクセスできません。"
		},
		"WEB Server list": {
			"Syntax": "**WEB Server list** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"利用可能なWeb サーバーオブジェクトのコレクション"
				]
			],
			"Summary": "4Dアプリケーション内で利用可能な Webサーバーオブジェクトのコレクションを返します"
		},
		"WEB Server": {
			"Syntax": "**WEB Server** : 4D.WebServer<br/>**WEB Server**( *option* : Integer ) : 4D.WebServer",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"取得する Webサーバー (省略時のデフォルト = `Web server database`)"
				],
				[
					"戻り値",
					"4D.WebServer",
					"<-",
					"WebServer オブジェクト"
				]
			],
			"Summary": "デフォルトの Webサーバーオブジェクト、または *option* 引数で指定された Webサーバーオブジェクトを返します"
		},
		"ZIP Create archive": {
			"Syntax": "**ZIP Create archive** ( *fileToZip* : 4D.File ; *destinationFile* : 4D.File ) : Object<br/>**ZIP Create archive** ( *folderToZip* : 4D.Folder ; *destinationFile* : 4D.File { ; *options* : Integer }) : Object<br/>**ZIP Create archive** ( *zipStructure* : Object ; *destinationFile* : 4D.File ) : Object",
			"Params": [
				[
					"fileToZip",
					"4D.File",
					"->",
					"圧縮する File または Folder オブジェクト"
				],
				[
					"folderToZip",
					"4D.Folder",
					"->",
					"圧縮する File または Folder オブジェクト"
				],
				[
					"zipStructure",
					"Object",
					"->",
					"圧縮する File または Folder オブジェクト"
				],
				[
					"destinationFile",
					"4D.File",
					"->",
					"アーカイブの保存先ファイル"
				],
				[
					"options",
					"Integer",
					"->",
					"*folderToZip* オプション: `ZIP Without enclosing folder` (外側のフォルダーを除外して ZIP圧縮をおこなう)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "圧縮された ZIPArchive オブジェクトを作成し、その処理のステータスを返します"
		},
		"ZIP Read archive": {
			"Syntax": "**ZIP Read archive** ( *zipFile* : 4D.File { ; *password* : Text }) : 4D.ZipArchive",
			"Params": [
				[
					"zipFile",
					"4D.File",
					"->",
					"ZIPアーカイブファイル"
				],
				[
					"password",
					"Text",
					"->",
					"ZIPアーカイブのパスワード (必要であれば)"
				],
				[
					"戻り値",
					"4D.ZipArchive",
					"<-",
					"アーカイブオブジェクト"
				]
			],
			"Summary": "*zipFile* のコンテンツを取得し、`4D.ZipArchive` オブジェクト形式で返します"
		},
		"ABORT PROCESS BY ID": {
			"Syntax": "**ABORT PROCESS BY ID** ( *uniqueID* )",
			"Params": [
				[
					"uniqueID",
					"Integer",
					"->",
					"固有のプロセスID"
				]
			],
			"Summary": "**ABORT PROCESS BY ID** コマンドは4D Server 上の特定のプロセスを中止します。"
		},
		"ABORT": {
			"Syntax": "**ABORT**",
			"Params": [],
			"Summary": "ABORT コマンドは、 ON ERR CALLコマンドでインストールされたエラー処理プロジェクトメソッド内で使用します。"
		},
		"Abs": {
			"Syntax": "**Abs** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"絶対値を求める数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"絶対値"
				]
			],
			"Summary": "Abs は*number*の絶対値（符号なしの正の値）を返します。"
		},
		"ACCEPT": {
			"Syntax": "**ACCEPT**",
			"Params": [],
			"Summary": "**ACCEPT** はユーザがEnterキーを押したのと同じ動作をします。フォームが受け入れられると、OKシステム変数に1が設定されます"
		},
		"ACCUMULATE": {
			"Syntax": "**ACCUMULATE** ( *data* {; *data2* ; ... ; *dataN*} )",
			"Params": [
				[
					"data",
					"Field, Variable",
					"->",
					"累計する数値型のフィールドまたは変数"
				]
			],
			"Summary": "ACCUMULATEは、PRINT SELECTIONコマンドを使ってプリントするフォームレポート中で累計するフィールドまたは変数を指定します。"
		},
		"Action info": {
			"Syntax": "**Action info** ( *action* {; *target*} ) : Object",
			"Params": [
				[
					"action",
					"Text",
					"->",
					"標準アクション名、あるいは(必要であれば)引数を含めたパターン"
				],
				[
					"target",
					"Integer",
					"->",
					"アクションの情報を取得するターゲットを定義します。メインフォームあるいはカレントフォーム"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"アクションのステータスを表したブール型のプロパティを格納するオブジェクト: isEnabled、isVisible、isChecked、isMixed、isUnknownState"
				]
			],
			"Summary": "**Action info** コマンドはカレントのアプリケーションコンテキストに応じて、*target* 引数で指定したターゲット内で定義されている*action* 引数で指定した標準アクションについて、利用可能状況やステータスなどを含む様々な情報を返します。"
		},
		"Activated": {
			"Syntax": "**Activated**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがactivationである場合にTrueを返す"
				]
			],
			"Summary": "**Activated** コマンドは、(廃止予定)フォームを含むウインドウがプロセスの最前面のウインドウになると、そのフォームメソッドで**True** を返します。"
		},
		"Active transaction": {
			"Syntax": "**Active transaction** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"トランザクションが停止中の場合、FALSE を返します。"
				]
			],
			"Summary": "**Active transaction**コマンドは、カレントプロセスがトランザクション中であり、かつそのトランザクションが停止されていない場合に**True**を返します。"
		},
		"ACTIVITY SNAPSHOT": {
			"Syntax": "**ACTIVITY SNAPSHOT** ( *arrActivities* {; *} )<br/>**ACTIVITY SNAPSHOT** ( *arrUUID* ; *arrStart* ; *arrDuration* ; *arrInfo* {; *arrDetails*}{; *} )",
			"Params": [
				[
					"arrActivities &#124; arrUUID",
					"Object array, テキスト配列",
					"<-",
					"オペレーションの詳細な情報(オブジェクト配列)<br/>またはオペレーションの UUID(テキスト配列)"
				],
				[
					"arrStart",
					"Text array",
					"<-",
					"オペレーションの開始時刻"
				],
				[
					"arrDuration",
					"Integer array",
					"<-",
					"オペレーションの所要時間(ミリ秒単位)"
				],
				[
					"arrInfo",
					"Text array",
					"<-",
					"オペレーションを説明するラベル"
				],
				[
					"arrDetails",
					"Object array",
					"<-",
					"コンテキストと、(あれば)サブオペレーションの詳細"
				],
				[
					"*",
					"演算子",
					"->",
					"渡した場合、サーバーの状態を取得"
				]
			],
			"Summary": "**ACTIVITY SNAPSHOT**コマンドは、4D 上で進行中のデータ操作の詳細を記載した配列を、一つまたは複数の配列に返します。"
		},
		"ADD RECORD": {
			"Syntax": "**ADD RECORD** ( {*aTable*}{;}{*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データ入力に使用するテーブル, または 省略した場合デフォルトテーブル"
				],
				[
					"*",
					"Operator",
					"->",
					"スクロールバーを隠す"
				]
			],
			"Summary": "*このコマンドは4D の初期のリリースに実装されたものでプロトタイプや基本的な開発には引き続き有用です。"
		},
		"Add to date": {
			"Syntax": "**Add to date** ( *date* ; *years* ; *months* ; *days* ) : Date",
			"Params": [
				[
					"date",
					"Date",
					"->",
					"年月日を加算する日付"
				],
				[
					"years",
					"Integer",
					"->",
					"日付に加算する年"
				],
				[
					"months",
					"Integer",
					"->",
					"日付に加算する月"
				],
				[
					"days",
					"Integer",
					"->",
					"日付に加算する日"
				],
				[
					"戻り値",
					"Date",
					"<-",
					"結果の日付"
				]
			],
			"Summary": "**Add to date** コマンドは、*date*に*years*、*months*、*days* を加算し、その結果の日付を返します。"
		},
		"ADD TO SET": {
			"Syntax": "**ADD TO SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードのテーブル, または 省略時デフォルトテーブル"
				],
				[
					"set",
					"Text",
					"->",
					"カレントレコードを追加するセットの名前"
				]
			],
			"Summary": "ADD TO SETは、*set*に*aTable*のカレントレコードを追加します。"
		},
		"ADJUST BLOBS CACHE PRIORITY": {
			"Syntax": "**ADJUST BLOBS CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"\"blob\"データの優先度値を調節するテーブル"
				],
				[
					"priority",
					"Integer",
					"->",
					"テーブル内のBLOBのキャッシュ優先度値"
				]
			],
			"Summary": "このコマンドは特定の用途のために用意されています。"
		},
		"ADJUST INDEX CACHE PRIORITY": {
			"Syntax": "**ADJUST INDEX CACHE PRIORITY** ( *aField* ; *priority* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"優先度値を調整したいインデックスのフィールド"
				],
				[
					"priority",
					"Integer",
					"->",
					"フィールドインデックスのキャッシュ優先度値"
				]
			],
			"Summary": "このコマンドは特定の用途のために用意されています。"
		},
		"ADJUST TABLE CACHE PRIORITY": {
			"Syntax": "**ADJUST TABLE CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"スカラーデータの優先度値を調整したいテーブル"
				],
				[
					"priority",
					"Integer",
					"->",
					"テーブルのキャッシュ優先度値"
				]
			],
			"Summary": "このコマンドは特定の用途のために用意されています。"
		},
		"After": {
			"Syntax": "**After**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがafterである場合にはTrueを返す"
				]
			],
			"Summary": "**After** はAfter 実行サイクルでTrue を返します。"
		},
		"ALERT": {
			"Syntax": "**ALERT** ( *message* {; OK button title} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"アラートダイアログボックスに表示するメッセージ"
				],
				[
					"OK button title",
					"文字",
					"->",
					"OKボタンのタイトル"
				]
			],
			"Summary": "**ALERT** コマンドは、注意アイコンとメッセージ、OKボタンで構成される警告ダイアログボックスを表示します。"
		},
		"ALL RECORDS": {
			"Syntax": "**ALL RECORDS** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"すべてのレコードを選択するテーブル 省略時、デフォルトテーブル"
				]
			],
			"Summary": "ALL RECORDSは、*aTable*の全レコードをカレントプロセスのカレントセレクションにします。"
		},
		"APPEND DATA TO PASTEBOARD": {
			"Syntax": "**APPEND DATA TO PASTEBOARD** ( *dataType* ; *data* )",
			"Params": [
				[
					"dataType",
					"Text",
					"->",
					"追加するデータのタイプ"
				],
				[
					"data",
					"Blob",
					"->",
					"ペーストボードに追加するデータ"
				]
			],
			"Summary": "APPEND DATA TO PASTEBOARD コマンドは、*dataType*で指定されたデータタイプで*data*BLOB内にあるデータをペーストボードに追加します。"
		},
		"Append document": {
			"Syntax": "**Append document** ( *document* {; *fileType*} ) : Time",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名、または 完全なドキュメントパス名、または 標準ファイルダイアログボックスの空の文字列"
				],
				[
					"fileType",
					"Text",
					"->",
					"スクリーンされるドキュメントタイプのリスト、または ドキュメントをスクリーンしない場合 \"*\""
				],
				[
					"戻り値",
					"Time",
					"<-",
					"ドキュメント参照番号"
				]
			],
			"Summary": "Append documentコマンドはOpen documentコマンドと同じ機能を提供します。"
		},
		"APPEND MENU ITEM": {
			"Syntax": "**APPEND MENU ITEM** ( *menu* ; *itemText* {; *subMenu* {; *process* {; *}}} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"itemText",
					"Text",
					"->",
					"新しいメニュー項目のテキスト"
				],
				[
					"subMenu",
					"Text",
					"->",
					"項目に関連付けるサブメニューの参照"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: メタ文字を標準文字として扱う"
				]
			],
			"Summary": "**APPEND MENU ITEM** コマンドは、*menu*引数に渡されたメニュー番号または参照を持つメニューに新規メニュー項目を追加します。"
		},
		"APPEND TO ARRAY": {
			"Syntax": "**APPEND TO ARRAY** ( *array* ; *value* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"要素を追加する配列"
				],
				[
					"value",
					"Expression",
					"->",
					"追加する値"
				]
			],
			"Summary": "APPEND TO ARRAY コマンドは、*array*の最後に新規要素を追加し、その要素に*value*を代入します。"
		},
		"APPEND TO LIST": {
			"Syntax": "**APPEND TO LIST** ( *list* ; *itemText* ; *itemRef* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"itemText",
					"Text",
					"->",
					"新規リスト項目のテキスト"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"新規リスト項目の参照番号"
				],
				[
					"sublist",
					"Integer",
					"->",
					"新規リスト項目に付属するオプションのサブリスト"
				],
				[
					"expanded",
					"Boolean",
					"->",
					"オプションのサブリストの展開/折りたたみ"
				]
			],
			"Summary": "**APPEND TO LIST** コマンドは、*list*に渡した参照番号を持つ階層リストに新規項目を追加します。"
		},
		"Application file": {
			"Syntax": "**Application file**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"4D実行形式のファイルまたはアプリケーションのパス名"
				]
			],
			"Summary": "Application fileコマンドは、 現在使用している4D実行形式のファイルまたはアプリケーションのパス名を返します。"
		},
		"Application info": {
			"Syntax": "**Application info** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"アクティブなアプリケーションのアクティビティについての情報"
				]
			],
			"Summary": "**Application info** コマンドはアクティブなアプリケーションのアクティビティと、ネットワーク設定に関する詳細な情報を格納したオブジェクト型を返します。"
		},
		"Application type": {
			"Syntax": "**Application type**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"アプリケーションタイプを示す数値"
				]
			],
			"Summary": "Application type コマンドは、現在実行している4D 環境のアプリケーションタイプを示す数値を返します。"
		},
		"Application version": {
			"Syntax": "**Application version** {( *buildNum* {; *} )} : Text",
			"Params": [
				[
					"buildNum",
					"Integer",
					"<-",
					"ビルド番号"
				],
				[
					"*",
					"演算子",
					"->",
					"指定した場合、ロングバージョン番号 指定しなかった場合、ショートバージョン番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"バージョン番号のエンコードされた文字列"
				]
			],
			"Summary": "**Application version** コマンドは、現在使用している4D環境のバージョン番号を表すエンコードされた文字列を返します。"
		},
		"APPLY TO SELECTION": {
			"Syntax": "**APPLY TO SELECTION** ( *aTable* ; *statement* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"ステートメントを適用するテーブル"
				],
				[
					"statement",
					"Expression",
					"->",
					"1行のコードで記述されたメソッド"
				]
			],
			"Summary": "**APPLY TO SELECTION** は、*aTable*のカレントセレクションに対して*statement*を適用します。"
		},
		"Arctan": {
			"Syntax": "**Arctan** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"角度を求めるタンジェント値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"ラジアン角度"
				]
			],
			"Summary": "Arctan は*number*の逆正接値をラジアンで返します。"
		},
		"ARRAY BLOB": {
			"Syntax": "**ARRAY BLOB** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素の数、もしくはsize2が指定されていた場合は配列の数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の要素の数"
				]
			],
			"Summary": "**ARRAY BLOB**コマンドは、メモリ上にBLOB型の要素の配列を作成・リサイズします。"
		},
		"ARRAY BOOLEAN": {
			"Syntax": "**ARRAY BOOLEAN** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY BOOLEANコマンドは、メモリ上にブール要素の配列を作成またはリサイズします。"
		},
		"ARRAY DATE": {
			"Syntax": "**ARRAY DATE** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY DATEコマンドは、メモリ上に日付要素の配列を作成またはリサイズします。"
		},
		"ARRAY INTEGER": {
			"Syntax": "**ARRAY INTEGER** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY INTEGERコマンドは、メモリ上に2バイト整数要素の配列を作成またはリサイズします。"
		},
		"ARRAY LONGINT": {
			"Syntax": "**ARRAY LONGINT** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY LONGINTコマンドは、メモリ上に4バイト倍長整数要素の配列を作成またはリサイズします。"
		},
		"ARRAY OBJECT": {
			"Syntax": "**ARRAY OBJECT** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素の数、もしくはsize2が指定されていた場合は配列の数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の要素の数"
				]
			],
			"Summary": "**ARRAY OBJECT**コマンドは、メモリ上にランゲージオブジェクト型の要素の配列を作成・リサイズします。"
		},
		"ARRAY PICTURE": {
			"Syntax": "**ARRAY PICTURE** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY PICTURE コマンドは、メモリ上にピクチャ要素の配列を作成またはリサイズします。"
		},
		"ARRAY POINTER": {
			"Syntax": "**ARRAY POINTER** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "**ARRAY POINTER** コマンドは、メモリ上にポインタ要素の配列を作成またはリサイズします。"
		},
		"ARRAY REAL": {
			"Syntax": "**ARRAY REAL** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY REALコマンドは、メモリ上に実数要素の配列を作成またはリサイズします。"
		},
		"ARRAY TEXT": {
			"Syntax": "**ARRAY TEXT** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素数、またはsize2を指定した場合は配列の行数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の列数"
				]
			],
			"Summary": "ARRAY TEXTコマンドは、メモリ上にテキスト要素の配列を作成またはリサイズします。"
		},
		"ARRAY TIME": {
			"Syntax": "**ARRAY TIME** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"配列名"
				],
				[
					"size",
					"Integer",
					"->",
					"配列の要素の数、もしくはsize2が指定されていた場合は配列の数"
				],
				[
					"size2",
					"Integer",
					"->",
					"2次元配列の要素の数"
				]
			],
			"Summary": "**ARRAY TIME**コマンドは、メモリ上に時間型の要素の配列を作成・リサイズします。"
		},
		"ARRAY TO COLLECTION": {
			"Syntax": "**ARRAY TO COLLECTION** ( *collection* ; *array* {; *propertyName*}{; *array2* ; *propertyName2* ; ... ; *arrayN* ; *propertyNameN*} )",
			"Params": [
				[
					"collection",
					"Collection",
					"<-",
					"配列のデータを受け取るコレクション"
				],
				[
					"array",
					"Array",
					"->",
					"コレクションにコピーする配列。propertyName引数指定時はコレクションのpropertyNameの値にコピーする配列。"
				],
				[
					"propertyName",
					"Text",
					"->",
					"配列の要素を値として格納するオブジェクトのプロパティ名"
				]
			],
			"Summary": "**ARRAY TO COLLECTION** コマンドは*array* 引数で指定した一つあるいはそれ以上の配列を、*collection* 引数で指定したコレクションの要素、あるいは*propertyName* 引数で指定したプロパティの値にコピーします*。"
		},
		"ARRAY TO LIST": {
			"Syntax": "**ARRAY TO LIST** ( *array* ; *list* {; *itemRefs*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"配列要素のコピー元配列"
				],
				[
					"list",
					"Text, Integer",
					"->",
					"配列要素のコピー先リスト"
				],
				[
					"itemRefs",
					"Array",
					"->",
					"項目参照番号の数値配列"
				]
			],
			"Summary": "ARRAY TO LIST コマンドは、配列*array*の要素を使用して、(デザインモードのリストエディタで作成される)階層リストまたは選択リスト*list*リストを作成または置き換えます。"
		},
		"ARRAY TO SELECTION": {
			"Syntax": "**ARRAY TO SELECTION** {( *array* ; *aField* {; *array2* ; *aField2* ; ... ; *arrayN* ; *aFieldN*}{; *} )}",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"コピー元の配列"
				],
				[
					"aField",
					"Field",
					"<-",
					"配列データを受け取るフィールド"
				],
				[
					"*",
					"演算子",
					"->",
					"実行をスタックする"
				]
			],
			"Summary": "**ARRAY TO SELECTION**コマンドは、1つ以上の配列をレコードのセレクションにコピーします。"
		},
		"ASSERT": {
			"Syntax": "**ASSERT** ( *boolExpression* {; *messageText*} )",
			"Params": [
				[
					"boolExpression",
					"Boolean",
					"->",
					"ブール式"
				],
				[
					"messageText",
					"Text",
					"->",
					"エラーメッセージテキスト"
				]
			],
			"Summary": "**ASSERT** コマンドは*boolExpression* 引数に渡されたアサーションを評価し、Falseを返す場合にはコードの実行を中止するとともにエラーメッセージを出します。"
		},
		"Asserted": {
			"Syntax": "**Asserted** ( *boolExpression* {; *messageText*} ) : Boolean",
			"Params": [
				[
					"boolExpression",
					"Boolean",
					"->",
					"ブール式"
				],
				[
					"messageText",
					"Text",
					"->",
					"エラーメッセージテキスト"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"boolExpressionの評価結果"
				]
			],
			"Summary": "**Asserted** コマンドはASSERTコマンドと同様の処理を行います。"
		},
		"Average": {
			"Syntax": "**Average** ( *series* {; *attributePath*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"平均を求めるデータ"
				],
				[
					"attributePath",
					"Text",
					"->",
					"平均を取得したい属性のパス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"seriesの平均値"
				]
			],
			"Summary": "**Average**は、*series*の平均値を返します。"
		},
		"BACKUP INFO": {
			"Syntax": "**BACKUP INFO** ( *selector* ; *info1* ; *info2* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"取得する情報のタイプ"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"セレクタの値1"
				],
				[
					"info2",
					"Time, Text",
					"<-",
					"セレクタの値2"
				]
			],
			"Summary": "BACKUP INFO コマンドを使用して、データベースのデータに対して行われた前回のバックアップに関連する情報を取得できます。"
		},
		"BACKUP": {
			"Syntax": "**BACKUP**",
			"Params": [],
			"Summary": "**BACKUP**コマンドは、現在のバックアップ設定を用いて、データベースのバックアップを開始します。"
		},
		"BASE64 DECODE": {
			"Syntax": "**BASE64 DECODE** ( *encodedText* {; *decoded*}{; *} )",
			"Params": [
				[
					"encodedText",
					"Text, Blob",
					"->",
					"デコードする、エンコード済みの値"
				],
				[
					"<-",
					"デコードされた値(decoded 引数省略時)"
				],
				[
					"decoded",
					"Text, Blob",
					"<-",
					"デコードされた値"
				],
				[
					"*",
					"演算子",
					"->",
					"デコードにBase64URL フォーマットを指定"
				]
			],
			"Summary": "**BASE64 DECODE** コマンドは、*toDecode* 引数に渡された、Base64 または Base64URL フォーマットにエンコードされたテキストまたはBlob をデコードします。"
		},
		"BASE64 ENCODE": {
			"Syntax": "**BASE64 ENCODE** ( *BLOB* {; *encoded*}{; *} )",
			"Params": [
				[
					"Blob",
					"Blob, Text",
					"->",
					"Base 64フォーマットでコード化するBLOB"
				],
				[
					"<-",
					"Base 64フォーマットでコード化したBLOB"
				],
				[
					"encoded",
					"Blob, Text",
					"<-",
					"エンコードされた値"
				],
				[
					"*",
					"演算子",
					"->",
					"Base64URL フォーマットでエンコードする"
				]
			],
			"Summary": "**BASE64 ENCODE** コマンドは、*toEncode* 引数に渡されたテキストまたはBlob値を、Base64 またはBase64URL フォーマットにエンコードします。"
		},
		"BEEP": {
			"Syntax": "**BEEP**",
			"Params": [],
			"Summary": "BEEP コマンドは、PCまたはMacintoshでビーブ音を発生します。"
		},
		"Before selection": {
			"Syntax": "**Before selection** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードポインタがセレクションの先頭より前に あるかをテストするテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"Yes (TRUE) または No (FALSE)"
				]
			],
			"Summary": "**Before selection** は、カレントレコードポインタが*aTable*のカレントセレクションの前にある場合にTRUEを返します。"
		},
		"Before": {
			"Syntax": "**Before**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがbeforeである場合にはTrueを返す"
				]
			],
			"Summary": "**Before** はBefore 実行サイクルでTrue を返します。"
		},
		"Begin SQL": {
			"Syntax": "**Begin SQL**",
			"Params": [],
			"Summary": "**Begin SQL**はメソッドエディタで使用するキーワードで、プロセスのカレントデータソース (4Dの統合SQLエンジン、またはSQL LOGINコマンドで特定されたソース) により解釈されるべき一連のコマンドの始まりを宣言します。"
		},
		"BLOB PROPERTIES": {
			"Syntax": "**BLOB PROPERTIES** ( *BLOB* ; *compressed* {; *expandedSize* {; *currentSize*}} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"情報を取得するBLOB"
				],
				[
					"compressed",
					"Integer",
					"<-",
					"0 = BLOBは圧縮されていない 1 = BLOBは圧縮率優先で圧縮されている 2 = BLOBは速度優先で圧縮されている"
				],
				[
					"expandedSize",
					"Integer",
					"<-",
					"非圧縮時のBLOBのサイズ (バイト単位)"
				],
				[
					"currentSize",
					"Integer",
					"<-",
					"BLOBの現在のサイズ (バイト単位)"
				]
			],
			"Summary": "**BLOB PROPERTIES**コマンドは、BLOB *blob*に関する情報を返します。"
		},
		"BLOB size": {
			"Syntax": "**BLOB size** ( *BLOB* ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOBフィールドまたは変数"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"バイト単位のBLOBサイズ"
				]
			],
			"Summary": "BLOB size は、*blob*のサイズをバイト単位で返します。"
		},
		"BLOB TO DOCUMENT": {
			"Syntax": "**BLOB TO DOCUMENT** ( *document* ; *BLOB* )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名"
				],
				[
					"Blob",
					"Blob",
					"->",
					"ドキュメントの新しいコンテンツ"
				]
			],
			"Summary": "BLOB TO DOCUMENT は、*blob*に格納されているデータを使用して*document*の内容全体を上書きします。"
		},
		"BLOB to integer": {
			"Syntax": "**BLOB to integer** ( *BLOB* ; *byteOrder* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"整数値を取り出すBLOB"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset",
					"Variable",
					"<->",
					"BLOB中のオフセット (バイト単位)"
				],
				[
					"",
					"",
					"",
					"読み込み後、新しいオフセット"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"2バイト整数値"
				]
			],
			"Summary": "BLOB to integer コマンドは、*blob* BLOBから2バイトの整数値を読み込み、その値を返します。"
		},
		"BLOB to list": {
			"Syntax": "**BLOB to list** ( *BLOB* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"階層リストが格納されたBLOB"
				],
				[
					"offset",
					"Integer",
					"<->",
					"BLOB内のオフセット (バイト単位)"
				],
				[
					"",
					"",
					"",
					"読み込み後の新しいオフセット"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"新しく作成されたリスト参照"
				]
			],
			"Summary": "BLOB to list コマンドは*blob*中、*offset*で指定されたバイトオフセット（ゼロから開始）に格納されているデータを使用して新しい階層リストを作成し、このリストのリスト参照番号を返します。"
		},
		"BLOB to longint": {
			"Syntax": "**BLOB to longint** ( *BLOB* ; *byteOrder* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"倍長整数値を取り出すBLOB"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset",
					"Variable",
					"<->",
					"BLOB中のオフセット (バイト単位)"
				],
				[
					"",
					"",
					"",
					"読み込み後、新しいオフセット"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"4バイト整数値"
				]
			],
			"Summary": "BLOB to longint コマンドは、*blob* BLOBから4バイトの整数値を読み込み、その値を返します。"
		},
		"BLOB TO PICTURE": {
			"Syntax": "**BLOB TO PICTURE** ( *pictureBlob* ; *picture* {; *codec*} )",
			"Params": [
				[
					"pictureBlob",
					"Blob",
					"->",
					"ピクチャを格納したBLOB"
				],
				[
					"picture",
					"Picture",
					"<-",
					"BLOBから取り出したピクチャ"
				],
				[
					"codec",
					"Text",
					"->",
					"ピクチャcodec ID"
				]
			],
			"Summary": "BLOB TO PICTURE コマンドは、元のフォーマットに関わらず、BLOBに格納されたピクチャを4Dのピクチャ変数やフィールドに挿入します。"
		},
		"BLOB to print settings": {
			"Syntax": "**BLOB to print settings** ( *printSettings* {; *params*} ) : Integer",
			"Params": [
				[
					"printSettings",
					"Blob",
					"->",
					"印刷設定を格納したBLOB"
				],
				[
					"params",
					"Integer",
					"->",
					"0 = 部数と印刷範囲に関して、BLOB に保存された値を復元；1 = デフォルト値にリセット"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"1 = 処理に成功, 0 = カレントのプリンターがない, -1 = 引数が不正, 2 = プリンターが変更された"
				]
			],
			"Summary": "**BLOB to print settings** コマンドは、4Dの現プリンタ設定を *printSettings* BLOBに格納された内容で置き換えます。"
		},
		"BLOB to real": {
			"Syntax": "**BLOB to real** ( *BLOB* ; *realFormat* {; *offset*} ) : Real",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"実数値を取り出すBLOB"
				],
				[
					"realFormat",
					"Integer",
					"->",
					"0 Native real format 1 Extended real format 2  Macintosh Double real format 3  Windows Double real format"
				],
				[
					"offset",
					"Variable",
					"<->",
					"BLOB中のオフセット (バイト単位)"
				],
				[
					"",
					"",
					"",
					"読み込み後、新しいオフセット"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"実数値"
				]
			],
			"Summary": "BLOB to real コマンドは、*blob* BLOBから実数値を読み込み、その値を返します。"
		},
		"BLOB to text": {
			"Syntax": "**BLOB to text** ( *BLOB* ; *textFormat* {; *offset* {; *textLength*}} )  : Text",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"テキストを取り出すBLOB"
				],
				[
					"textFormat",
					"Integer",
					"->",
					"テキストのフォーマットと文字セット"
				],
				[
					"offset",
					"Variable",
					"<->",
					"BLOB内のオフセット (バイト単位)"
				],
				[
					"",
					"",
					"",
					"読み込み後の新しいオフセット"
				],
				[
					"textLength",
					"Integer",
					"->",
					"読み込む文字数"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"取り出したテキスト"
				]
			],
			"Summary": "BLOB to text コマンドはBLOB *blob*からテキストを読みだして、返します。"
		},
		"BLOB TO USERS": {
			"Syntax": "**BLOB TO USERS** ( *users* )",
			"Params": [
				[
					"users",
					"Blob",
					"->",
					"データベース管理者によって作成・保存されたデータベースユーザーアカウントを格納している、暗号化された BLOB"
				]
			],
			"Summary": "BLOB TO USERS コマンドは、データベース内で管理者によって作成されたユーザーアカウントとグループを *users* BLOBに格納されたアカウントとグループで上書きします。"
		},
		"BLOB TO VARIABLE": {
			"Syntax": "**BLOB TO VARIABLE** ( *BLOB* ; *variable* {; *offset*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"4D変数を格納したBLOB"
				],
				[
					"variable",
					"Variable",
					"<-",
					"BLOBの内容を書き込む変数"
				],
				[
					"offset",
					"Integer",
					"<->",
					"BLOB内の変数の位置"
				],
				[
					"",
					"",
					"",
					"BLOB内の次の変数の位置"
				]
			],
			"Summary": "BLOB TO VARIABLE コマンドは、*offset*引数で指定されたバイトオフセット (ゼロから開始) にある*blob*に格納されているデータを使用して*variable*を上書きします。"
		},
		"Bool": {
			"Syntax": "**Bool** ( *expression* ) : Boolean",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"ブール形式で返したい式"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"式のブール型"
				]
			],
			"Summary": "**Bool** コマンドは、*expression* 引数に渡した式のブール形式を返します。"
		},
		"BOOLEAN ARRAY FROM SET": {
			"Syntax": "**BOOLEAN ARRAY FROM SET** ( *booleanArr* {; *set*} )",
			"Params": [
				[
					"booleanArr",
					"Boolean array",
					"<-",
					"レコードがセットに含まれているかいないかを示す配列"
				],
				[
					"set",
					"Text",
					"->",
					"セット名、または 引数が省略された場合UserSet"
				]
			],
			"Summary": "BOOLEAN ARRAY FROM SETコマンドは、テーブル内の各レコードが指定されたセットに含まれるか含まれないかを示すブール配列を作成します。"
		},
		"BREAK LEVEL": {
			"Syntax": "**BREAK LEVEL** ( *level* {; *pageBreak*} )",
			"Params": [
				[
					"level",
					"Integer",
					"->",
					"ブレークレベルの数"
				],
				[
					"pageBreak",
					"Integer",
					"->",
					"改ページを行うブレークレベル"
				]
			],
			"Summary": "**BREAK LEVEL**は、PRINT SELECTIONコマンドを使ってプリントするレポートのブレークの数を指定します。"
		},
		"BRING TO FRONT": {
			"Syntax": "**BRING TO FRONT** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"最前面に移動させるプロセスのプロセス番号"
				]
			],
			"Summary": "BRING TO FRONTは*process*に属するすべてのウィンドウを最前面に配置します。"
		},
		"BUILD APPLICATION": {
			"Syntax": "**BUILD APPLICATION** {( *projectName* )}",
			"Params": [
				[
					"projectName",
					"Text",
					"->",
					"使用する設定ファイルのフルアクセスパス"
				]
			],
			"Summary": "BUILD APPLICATION コマンドはアプリケーションの生成処理を開始します。"
		},
		"Cache info": {
			"Syntax": "**Cache info** {( *dbFilter* )} : Object",
			"Params": [
				[
					"dbFilter",
					"Object",
					"->",
					"返す属性の一覧を定義(データベースごとにフィルター)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"キャッシュについての情報"
				]
			],
			"Summary": "**Cache info** コマンドは、カレントキャッシュの中身についての詳細な情報を格納したオブジェクトを返します (使用メモリ、読み込まれたテーブルやインデックス、等)"
		},
		"CALL FORM": {
			"Syntax": "**CALL FORM** ( *window* ; *formula* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				],
				[
					"formula",
					"Object, Text",
					"->",
					"実行するプロジェクトメソッドの名前、または Formulaオブジェクト"
				],
				[
					"param",
					"Expression",
					"->",
					"メソッドに渡す引数"
				]
			],
			"Summary": "**CALL FORM** コマンドは、*window* に指定したウィンドウに表示されているフォームのコンテキストにおいて、*formula* 引数のフォーミュラで指定された4D コードを、任意の *param* パラメーターを使って実行します。"
		},
		"CALL SUBFORM CONTAINER": {
			"Syntax": "**CALL SUBFORM CONTAINER** ( *event* )",
			"Params": [
				[
					"event",
					"Integer",
					"->",
					"送信するイベント"
				]
			],
			"Summary": "**CALL SUBFORM CONTAINER** コマンドを使用してサブフォームインスタンスからそれを含むサブフォームコンテナにイベントを送信できます。"
		},
		"CALL WORKER": {
			"Syntax": "**CALL WORKER** ( *process* ; *formula* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"process",
					"Text, Integer",
					"->",
					"プロセス番号、またはプロセス名"
				],
				[
					"formula",
					"Object, Text",
					"->",
					"実行するプロジェクトメソッドの名前、または Formulaオブジェクト"
				],
				[
					"param",
					"Expression",
					"->",
					"メソッドに渡す引数"
				]
			],
			"Summary": "**CALL WORKER** コマンドは、*process* に受け渡した名称または ID のワーカープロセスを作成、または呼び出して、任意の *param* パラメーターを使って *formula* 引数で指定されたコードの実行をそのコンテキスト内において要求します。"
		},
		"CANCEL TRANSACTION": {
			"Syntax": "**CANCEL TRANSACTION**",
			"Params": [],
			"Summary": "**CANCEL TRANSACTION**は、対応するレベルのSTART TRANSACTIONで開始したカレントプロセスのトランザクションをキャンセルします。"
		},
		"CANCEL": {
			"Syntax": "**CANCEL**",
			"Params": [],
			"Summary": "データ入力のコンテキストで、**CANCEL** はキャンセルキー (**Esc**) を押したのと同じ動作をします。"
		},
		"Caps lock down": {
			"Syntax": "**Caps lock down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"Caps Lockキーの状態"
				]
			],
			"Summary": "Caps lock down はCaps Lock キーが押されているとTrueを返します。"
		},
		"CHANGE CURRENT USER": {
			"Syntax": "**CHANGE CURRENT USER** {( *user* ; *password* )}",
			"Params": [
				[
					"user",
					"Text, Integer",
					"->",
					"名前またはユニークなユーザーID"
				],
				[
					"password",
					"Text",
					"->",
					"(暗号化されていない)パスワード"
				]
			],
			"Summary": "**CHANGE CURRENT USER** コマンドを使用すると、データベースを終了させずに、カレントユーザーを変更できます。"
		},
		"CHANGE LICENSES": {
			"Syntax": "**CHANGE LICENSES**",
			"Params": [],
			"Summary": "CHANGE LICENSES コマンドは、4Dライセンス管理ダイアログボックスを表示します。"
		},
		"CHANGE PASSWORD": {
			"Syntax": "**CHANGE PASSWORD** ( *password* )",
			"Params": [
				[
					"password",
					"Text",
					"->",
					"新しいパスワード"
				]
			],
			"Summary": "CHANGE PASSWORD コマンドを使用して、カレントユーザのパスワードを変更できます。"
		},
		"Change string": {
			"Syntax": "**Change string** ( *source* ; *newChars* ; *where* ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"元の文字列"
				],
				[
					"newChars",
					"Text",
					"->",
					"新しい文字"
				],
				[
					"where",
					"Integer",
					"->",
					"入れ替え開始位置"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"結果の文字列"
				]
			],
			"Summary": "Change stringは、*source*の中の文字グループを修正したものを返します。"
		},
		"Char": {
			"Syntax": "**Char** ( *charCode* ) : Text",
			"Params": [
				[
					"charCode",
					"Integer",
					"->",
					"文字コード"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"文字コードによって表現された文字"
				]
			],
			"Summary": "**Char** コマンド は文字コードが*charCode*である文字を返します。"
		},
		"Character code": {
			"Syntax": "**Character code** ( *character* ) : Integer",
			"Params": [
				[
					"character",
					"Text",
					"->",
					"取得したい文字を得るためのコード"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"文字コード"
				]
			],
			"Summary": "**Character code** コマンドは、*character* のUnicode UTF-16 コード(1から65535の間)を返します。"
		},
		"CHECK LOG FILE": {
			"Syntax": "**CHECK LOG FILE**",
			"Params": [],
			"Summary": "**CHECK LOG FILE** コマンドは、データベースのカレントログファイルの内容をブラウズできるダイアログを表示します。"
		},
		"Choose": {
			"Syntax": "**Choose** ( *criterion* ; *value* {; *value2* ; ... ; *valueN*} )  : any",
			"Params": [
				[
					"criterion",
					"Boolean, Integer",
					"->",
					"テストする値"
				],
				[
					"value",
					"Expression",
					"->",
					"可能な値"
				],
				[
					"戻り値",
					"any",
					"<-",
					"条件の値"
				]
			],
			"Summary": "**Choose** コマンドは、引数*criterion* の値に応じて、引数*value1*、*value2* などに渡された値の1つを返します。"
		},
		"CLEAR LIST": {
			"Syntax": "**CLEAR LIST** ( *list* {; *} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"*",
					"Operator",
					"->",
					"指定した場合, サブリストがあればそれもメモリからクリア 省略した場合, サブリストがあってもそれをクリアしない"
				]
			],
			"Summary": "CLEAR LIST コマンドは、*list*に渡したリスト参照番号を持つ階層リストを廃棄します。"
		},
		"CLEAR NAMED SELECTION": {
			"Syntax": "**CLEAR NAMED SELECTION** ( *name* )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"クリアする命名セレクション名"
				]
			],
			"Summary": "CLEAR NAMED SELECTION は、命名セレクション*name*をメモリから消去して、*name*が使用していたメモリを解放します。"
		},
		"CLEAR PASTEBOARD": {
			"Syntax": "**CLEAR PASTEBOARD**",
			"Params": [],
			"Summary": "CLEAR PASTEBOARD コマンドは、クリップボードの内容をすべて消去します。"
		},
		"CLEAR SEMAPHORE": {
			"Syntax": "**CLEAR SEMAPHORE** ( *semaphore* )",
			"Params": [
				[
					"semaphore",
					"Text",
					"->",
					"クリアするセマフォ"
				]
			],
			"Summary": "CLEAR SEMAPHOREは、Semaphoreコマンドで設定された*semaphore*を消去します。"
		},
		"CLEAR SET": {
			"Syntax": "**CLEAR SET** ( *set* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"メモリからクリアするセットの名前"
				]
			],
			"Summary": "CLEAR SETはメモリから*set*を消去し、*set*の占有していたメモリを解放します。"
		},
		"CLEAR VARIABLE": {
			"Syntax": "**CLEAR VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"クリアする変数"
				]
			],
			"Summary": "CLEAR VARIABLE コマンドを使用して、 *variable* をそのデフォルト値へ再設定します (テキスト変数は空の文字列に、数値変数には *0* に、配列はエレメントを空にします) 。"
		},
		"Clickcount": {
			"Syntax": "**Clickcount**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"連続したクリックの回数"
				]
			],
			"Summary": "**Clickcount** コマンドは、マウスクリックイベントのコンテキストにおいて、ユーザー同じマウスボタンを素早く連続でクリックした回数を返します。"
		},
		"CLOSE DOCUMENT": {
			"Syntax": "**CLOSE DOCUMENT** ( *DocRef* )",
			"Params": [
				[
					"Time",
					"Time",
					"->",
					"ドキュメント参照番号"
				]
			],
			"Summary": "CLOSE DOCUMENTは*DocRef*で指定したドキュメントを閉じます。"
		},
		"CLOSE PRINTING JOB": {
			"Syntax": "**CLOSE PRINTING JOB**",
			"Params": [],
			"Summary": "**CLOSE PRINTING JOB** コマンドは、OPEN PRINTING JOB コマンドで開かれたプリントジョブを閉じ、組み立てたプリントドキュメントをカレントプリンタに送信するために使用できます。"
		},
		"CLOSE RESOURCE FILE": {
			"Syntax": "**CLOSE RESOURCE FILE** ( *resFile* )",
			"Params": [
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号"
				]
			],
			"Summary": "**CLOSE RESOURCE FILE**コマンドは、引数*resFile*に渡された参照番号を持つリソースファイルを閉じます。"
		},
		"CLOSE WINDOW": {
			"Syntax": "**CLOSE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または 省略した場合、カレントプロセスの最前面ウィンドウ"
				]
			],
			"Summary": "CLOSE WINDOW はカレントプロセスでOpen window や Open form window コマンドで開かれたアクティブウィンドウを閉じます。"
		},
		"COLLECTION TO ARRAY": {
			"Syntax": "**COLLECTION TO ARRAY** ( *collection* ; *array* {; *propertyName*}{; *array2* ; *propertyName2* ; ... ; *arrayN* ; *propertyNameN*} )",
			"Params": [
				[
					"collection",
					"Collection",
					"->",
					"配列へとコピーしたいコレクション"
				],
				[
					"array",
					"Array",
					"<-",
					"コレクションの要素を受け取る配列。propertyName引数指定時はコレクションのpropertyNameの値を受け取る配列。"
				],
				[
					"propertyName",
					"Text",
					"->",
					"配列へとコピーしたいオブジェクトのプロパティ名(\"\"を指定で全要素をコピー)"
				]
			],
			"Summary": "**COLLECTION TO ARRAY** コマンドは、*collection* 引数のコレクションの要素あるいは*propertyName* 引数で指定したプロパティの値を、*array* 引数で指定した一つまたはそれ以上の配列へと渡します。"
		},
		"COMBINE PICTURES": {
			"Syntax": "**COMBINE PICTURES** ( *resultingPict* ; *pict1* ; *operator* ; *pict2* {; *horOffset* ; *vertOffset*} )",
			"Params": [
				[
					"resultingPict",
					"Picture",
					"<-",
					"重ね合わせた結果のピクチャ"
				],
				[
					"pict1",
					"Picture",
					"->",
					"重ね合わせる1つ目のピクチャ"
				],
				[
					"operator",
					"Integer",
					"->",
					"重ね合わせのタイプ"
				],
				[
					"pict2",
					"Picture",
					"->",
					"重ね合わせる2つ目のピクチャ"
				],
				[
					"horOffset",
					"Integer",
					"->",
					"重ね合わせの横オフセット"
				],
				[
					"vertOffset",
					"Integer",
					"->",
					"重ね合わせの縦オフセット"
				]
			],
			"Summary": "COMBINE PICTURES コマンドは*pict1*と*pict2* ピクチャを、*operator*モードで結合させ、3つめの*resultingPict*ピクチャを得るために使用します。"
		},
		"Compact data file": {
			"Syntax": "**Compact data file** ( *structurePath* ; *dataPath* {; *archiveFolder* {; *option* {; *method*}}} ) : Text",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"ストラクチャーファイルのパス名"
				],
				[
					"dataPath",
					"Text",
					"->",
					"圧縮するデータファイルのパス名"
				],
				[
					"archiveFolder",
					"Text",
					"->",
					"元のデータファイルを置く、フォルダーのパス名"
				],
				[
					"option",
					"Integer",
					"->",
					"圧縮オプション"
				],
				[
					"method",
					"Text",
					"->",
					"4Dコールバックメソッド名"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"元のデータファイルが置かれたフォルダーの完全パス名"
				]
			],
			"Summary": "**Compact data file**コマンドは、ストラクチャー*structurePath*に関連付けられている、*dataPath* 引数で指定されたデータファイルを圧縮します。"
		},
		"Compare strings": {
			"Syntax": "**Compare strings** ( *aString* ; *bString* {; *options*} ) : Integer",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"比較する文字列"
				],
				[
					"bString",
					"Text",
					"->",
					"比較する文字列"
				],
				[
					"options",
					"Integer",
					"->",
					"比較ルール"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"文字列比較の結果"
				]
			],
			"Summary": "**Compare strings** コマンドは、*aString* 引数の文字列が*bString* 引数の文字列比較して低い/等しい/高いと評価されるかによって負の値/ゼロ/正の値を返します。"
		},
		"COMPONENT LIST": {
			"Syntax": "**COMPONENT LIST** ( *componentsArray* )",
			"Params": [
				[
					"componentsArray",
					"Text array",
					"<-",
					"コンポーネント名"
				]
			],
			"Summary": "**COMPONENT LIST**コマンドは、4Dがカレントのホストデータベースにロードしたコンポーネントの名前を、*componentsArray* 配列に返します。"
		},
		"COMPRESS BLOB": {
			"Syntax": "**COMPRESS BLOB** ( *BLOB* {; *compression*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"圧縮するBLOB"
				],
				[
					"compression",
					"Integer",
					"->",
					"省略されない場合: 1, 圧縮率優先で圧縮 2, 速度優先で圧縮"
				]
			],
			"Summary": "**COMPRESS BLOB**コマンドは、圧縮アルゴリズムを使用してBLOB *blob*を圧縮します。"
		},
		"CONFIRM": {
			"Syntax": "**CONFIRM** ( *message* {; OK button title {; cancel button title}} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"確認ダイアログボックスに表示するメッセージ"
				],
				[
					"OK button title",
					"文字",
					"->",
					"OKボタンのタイトル"
				],
				[
					"cancel button title",
					"文字",
					"->",
					"キャンセルボタンのタイトル"
				]
			],
			"Summary": "CONFIRM コマンドは、注意アイコンとメッセージ、OKボタン、キャンセルボタンで構成される確認ダイアログボックスを表示します。"
		},
		"Contextual click": {
			"Syntax": "**Contextual click**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"コンテキストクリックを検知した場合True、 そうでなければFalse"
				]
			],
			"Summary": "Contextual click コマンドは、コンテキストクリックが行われた場合にTrueを返します。"
		},
		"CONVERT COORDINATES": {
			"Syntax": "**CONVERT COORDINATES** ( *xCoord* ; *yCoord* ; *from* ; *to* )",
			"Params": [
				[
					"xCoord",
					"Integer",
					"->",
					"点の水平方向の座標(変換前)"
				],
				[
					"<-",
					"点の水平方向の座標(変換後)"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"点の垂直方向の座標(変換前)"
				],
				[
					"<-",
					"点の垂直方向の座標(変換後)"
				],
				[
					"from",
					"Integer",
					"->",
					"変換前の座標系"
				],
				[
					"to",
					"Integer",
					"->",
					"変換後の座標系"
				]
			],
			"Summary": "**CONVERT COORDINATES**コマンドは、ある点の(x;y)座標を一つの座標系から別の座標系へと変換します。"
		},
		"CONVERT FROM TEXT": {
			"Syntax": "**CONVERT FROM TEXT** ( *4Dtext* ; *charSet* ; *convertedBLOB* )",
			"Params": [
				[
					"4Dtext",
					"Text",
					"->",
					"現在の4Dの文字セットで記述されているテキスト"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"文字セットの番号または名前"
				],
				[
					"convertedBlob",
					"Blob",
					"<-",
					"変換されたテキストを含むBLOB"
				]
			],
			"Summary": "CONVERT FROM TEXTコマンドは、現在の4Dの文字セットで記述されているテキストを、他の文字セットで記述されているテキストへ変換するために使用できます。"
		},
		"Convert path POSIX to system": {
			"Syntax": "**Convert path POSIX to system** ( *posixPath* {; *} ) : Text",
			"Params": [
				[
					"posixPath",
					"Text",
					"->",
					"POSIXパス名"
				],
				[
					"*",
					"演算子",
					"->",
					"エンコーディングオプション"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"システムシンタックスで表現されたパス名"
				]
			],
			"Summary": "Convert path POSIX to system コマンドはPOSIX (Unix) シンタックスで表現されたパス名をシステムシンタックスで表現されたパス名に変換します。"
		},
		"Convert path system to POSIX": {
			"Syntax": "**Convert path system to POSIX** ( *systemPath* {; *} ) : Text",
			"Params": [
				[
					"systemPath",
					"Text",
					"->",
					"システムシンタックスで表現された、相対または絶対パス名"
				],
				[
					"*",
					"演算子",
					"->",
					"エンコーディングオプション"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"POSIX (Unix) シンタックスで表現されたパス名"
				]
			],
			"Summary": "Convert path system to POSIX コマンドはシステムシンタックスで表現されたパス名をPOSIX (Unix) シンタックスで表現されたパス名に変換します。"
		},
		"CONVERT PICTURE": {
			"Syntax": "**CONVERT PICTURE** ( *picture* ; *codec* {; *compression*} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"変換するピクチャ"
				],
				[
					"<-",
					"変換されたピクチャ"
				],
				[
					"codec",
					"Text",
					"->",
					"ピクチャCodec ID"
				],
				[
					"compression",
					"Real",
					"->",
					"圧縮の品質"
				]
			],
			"Summary": "CONVERT PICTURE コマンドは*picture*を新しいタイプに変換します。"
		},
		"Convert to text": {
			"Syntax": "**Convert to text** ( *BLOB* ; *charSet* ) : Text",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"特定の文字セットで記述されている テキストを含むBLOB"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"BLOB文字セットの番号または名前"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"4Dの文字セットで表現されたBLOBの内容"
				]
			],
			"Summary": "Convert to textコマンドは、*blob*引数に含まれているテキストを変換して、4Dの文字セットで記述されているテキストで返します。"
		},
		"COPY ARRAY": {
			"Syntax": "**COPY ARRAY** ( *source* ; *destination* )",
			"Params": [
				[
					"source",
					"Array",
					"->",
					"コピー元の配列"
				],
				[
					"destination",
					"Array",
					"<-",
					"コピー先の配列"
				]
			],
			"Summary": "COPY ARRAY コマンドは*destination* 配列を、*source* 配列と同じ内容、サイズ、およびタイプで作成または上書きします。"
		},
		"COPY BLOB": {
			"Syntax": "**COPY BLOB** ( *srcBLOB* ; *dstBLOB* ; *srcOffset* ; *dstOffset* ; *len* )",
			"Params": [
				[
					"srcBlob",
					"Blob",
					"->",
					"コピー元BLOB"
				],
				[
					"dstBlob",
					"Blob",
					"->",
					"コピー先BLOB"
				],
				[
					"srcOffset",
					"Integer",
					"->",
					"コピー元のコピー開始位置"
				],
				[
					"dstOffset",
					"Integer",
					"->",
					"コピー先のコピー開始位置"
				],
				[
					"len",
					"Integer",
					"->",
					"コピーするバイト数"
				]
			],
			"Summary": "COPY BLOB コマンドは*len*で指定された数のバイトを、*srcBLOB*から*dstBLOB*にコピーします。"
		},
		"COPY DOCUMENT": {
			"Syntax": "**COPY DOCUMENT** ( *sourceName* ; *destinationName* {; *newName*} {; *} )",
			"Params": [
				[
					"sourceName",
					"Text",
					"->",
					"コピーするファイルやフォルダーのパス名"
				],
				[
					"destinationName",
					"Text",
					"->",
					"ファイルやフォルダーコピーの配置先名またはパス名"
				],
				[
					"newName",
					"Text",
					"->",
					"コピーされたファイルまたはフォルダの新しい名前"
				],
				[
					"*",
					"演算子",
					"->",
					"存在する場合、既存のドキュメントを上書きする"
				]
			],
			"Summary": "**COPY DOCUMENT**コマンドを使用して、*sourceName*によって指定されたファイルやフォルダーを*destinationName*によって指定された場所にコピーします。"
		},
		"Copy list": {
			"Syntax": "**Copy list** ( *list* ) : Integer",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"コピーするリストの参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"複製されたリストのリスト参照番号"
				]
			],
			"Summary": "Copy list コマンドは*list*に渡されたリスト参照番号を持つリストの複製を作成し、新しいリストのリスト参照番号を返します。"
		},
		"COPY NAMED SELECTION": {
			"Syntax": "**COPY NAMED SELECTION** ( {*aTable* ;} *name* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションをコピーするテーブル, または 省略した場合デフォルトテーブル"
				],
				[
					"name",
					"Text",
					"->",
					"作成する命名セレクションの名前"
				]
			],
			"Summary": "COPY NAMED SELECTION は*aTable*のカレントセレクションを命名セレクション*name*にコピーします。"
		},
		"Copy parameters": {
			"Syntax": "**Copy parameters** {( *startFrom* )} : Collection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"開始インデックス(指定した引数含む)"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"実際に渡された引数を格納した新しいコレクション"
				]
			],
			"Summary": "Copy parameters コマンドは、メソッドまたは関数に実際に渡された全ての引数を格納したコレクションを返します。"
		},
		"COPY SET": {
			"Syntax": "**COPY SET** ( *srcSet* ; *dstSet* )",
			"Params": [
				[
					"srcSet",
					"Text",
					"->",
					"コピー元のセット名"
				],
				[
					"dstSet",
					"Text",
					"->",
					"コピー先セット名"
				]
			],
			"Summary": "COPY SET コマンドは、*dstSet*セットの中に*srcSet*セットの内容をコピーします。"
		},
		"Cos": {
			"Syntax": "**Cos** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"コサインを求めるラジアン値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"コサイン値"
				]
			],
			"Summary": "Cos は*number*の余弦値を返します。"
		},
		"Count in array": {
			"Syntax": "**Count in array** ( *array* ; *value* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"カウントを行う配列"
				],
				[
					"value",
					"Expression",
					"->",
					"カウントする値"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"見つかったインスタンスの数"
				]
			],
			"Summary": "Count in array コマンドは、*array*内で見つかった*value*の数を返します。"
		},
		"Count list items": {
			"Syntax": "**Count list items** ( {* ;} *list* {; *} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"渡された場合, listはオブジェクト名 (文字列) 省略すると, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* が省略された場合), または リストタイプオブジェクト名 (* が渡された場合)"
				],
				[
					"*",
					"演算子",
					"->",
					"省略すると (デフォルト): 表示されたリスト項目を返す (展開) 指定すると: すべてのリスト項目を返す"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"(展開されて) 表示中のリスト項目数 (2番目の * が省略された場合) またはリスト項目の総数 (2番目の * が指定された場合)"
				]
			],
			"Summary": "**Count list items** コマンドは、*list*に渡した参照番号またはオブジェクト名のリスト上で現在表示中または項目総数を返します。"
		},
		"Count menu items": {
			"Syntax": "**Count menu items** ( *menu* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"メニュー中のメニュー項目数"
				]
			],
			"Summary": "Count menu items コマンドは、*menu*引数に渡されたメニュー番号または参照を持つメニュー内にあるメニュー項目の数を返します。"
		},
		"Count menus": {
			"Syntax": "**Count menus** {( *process* )} : Integer",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カレントメニューバー中のメニュー数"
				]
			],
			"Summary": "Count menus コマンドは、メニューバー上にあるメニューの数を返します。"
		},
		"Count parameters": {
			"Syntax": "**Count parameters**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"実際に渡された引数の数"
				]
			],
			"Summary": "Count parameters コマンドは、プロジェクトメソッドに渡された引数の数を返します。"
		},
		"Count screens": {
			"Syntax": "**Count screens**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"モニターの数"
				]
			],
			"Summary": "Count screensコマンドは、マシンに接続されている画面モニターの数を返します。"
		},
		"Count tasks": {
			"Syntax": "**Count tasks**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"開いているプロセスの (カーネルプロセスを含む)"
				]
			],
			"Summary": "**Count tasks** は4Dスタンドアロン、4Dリモート、あるいは4D Server(ストアドプロシージャー)バージョンにおける、生きているプロセスの番号の最も高いものを返します。"
		},
		"Count user processes": {
			"Syntax": "**Count user processes**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"活動中のプロセス (内部プロセスを除く)"
				]
			],
			"Summary": "Count user processesは4Dアプリケーションで現在活動中のプロセスの数を返します。"
		},
		"Count users": {
			"Syntax": "**Count users**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"サーバに接続しているユーザ数"
				]
			],
			"Summary": "**Count users** コマンドはサーバーに接続しているユーザーの数を返します。"
		},
		"CREATE ALIAS": {
			"Syntax": "**CREATE ALIAS** ( *targetPath* ; *aliasPath* )",
			"Params": [
				[
					"targetPath",
					"Text",
					"->",
					"エイリアス/ショートカットターゲットのアクセスパスまたは名前"
				],
				[
					"aliasPath",
					"Text",
					"->",
					"エイリアスまたはショートカットの完全なパス名または名前"
				]
			],
			"Summary": "CREATE ALIASコマンドを使用して、*targetPath*に渡した目的のファイルまたはフォルダのエイリアス(Windowsでは\"ショートカット\" と呼ばれる) を作成します。"
		},
		"CREATE DATA FILE": {
			"Syntax": "**CREATE DATA FILE** ( *accessPath* )",
			"Params": [
				[
					"accessPath",
					"Text",
					"->",
					"作成するデータファイルの名前または完全パス名"
				]
			],
			"Summary": "**CREATE DATA FILE**コマンドは、オンザフライで新しいデータファイルをディスク上に作成し、4Dアプリケーションで開かれているデータファイルと置き換えます。"
		},
		"Create document": {
			"Syntax": "**Create document** ( *document* {; *fileType*} ) : Time",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名、または 完全なドキュメントのパス名、または 標準ファイルダイアログボックスの空の文字列"
				],
				[
					"fileType",
					"Text",
					"->",
					"スクリーンされるドキュメントタイプのリスト、または ドキュメントをスクリーンしない場合 \"*\""
				],
				[
					"戻り値",
					"Time",
					"<-",
					"ドキュメント参照番号"
				]
			],
			"Summary": "**Create document**コマンドは新しいドキュメントを作成し、ドキュメント参照番号を返します。"
		},
		"CREATE EMPTY SET": {
			"Syntax": "**CREATE EMPTY SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"空のセットを作成するテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"set",
					"Text",
					"->",
					"新しい空のセットの名前"
				]
			],
			"Summary": "CREATE EMPTY SETは、*aTable*に対して新しい空のセット*set*を作成します。"
		},
		"CREATE FOLDER": {
			"Syntax": "**CREATE FOLDER** ( *folderPath* {; *} )",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"作成する新しいフォルダーのパス名"
				],
				[
					"*",
					"演算子",
					"->",
					"パス中に存在しないフォルダーを作成する"
				]
			],
			"Summary": "**CREATE FOLDER**コマンドを使用して、*folderPath*に渡すパス名に応じてフォルダーを作成します。"
		},
		"CREATE INDEX": {
			"Syntax": "**CREATE INDEX** ( *aTable* ; *fieldsArray* ; *indexType* ; *indexName* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"インデックスを作成するためのテーブル"
				],
				[
					"fieldsArray",
					"Pointer array",
					"->",
					"インデックスされるフィールドへのポインタ"
				],
				[
					"indexType",
					"Integer",
					"->",
					"作成されるインデックスのタイプ: -1 = キーワード、 0 = デフォルト、 1 = 標準 B-Tree、 3 = クラスタ B-Tree"
				],
				[
					"indexName",
					"Text",
					"->",
					"作成するインデックスの名前"
				],
				[
					"*",
					"演算子",
					"->",
					"渡されると = 非同期インデックス"
				]
			],
			"Summary": "**CREATE INDEX**コマンドを使用して以下のインデックスを作成します。"
		},
		"Create menu": {
			"Syntax": "**Create menu** {( *menu* )} : Text",
			"Params": [
				[
					"menu",
					"Text, Integer, Text",
					"->",
					"メニュー参照 または 番号 または メニューバー名"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メニュー参照"
				]
			],
			"Summary": "Create menu コマンドはメモリに新しいメニューを作成するために使用します。"
		},
		"CREATE RECORD": {
			"Syntax": "**CREATE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"新規レコードを作成するテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "**CREATE RECORD**は、*aTable*に対して新しい空のレコードを作成しますが、このレコードは表示されません。"
		},
		"CREATE RELATED ONE": {
			"Syntax": "**CREATE RELATED ONE** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"nフィールド"
				]
			],
			"Summary": "CREATE RELATED ONEには2つの機能があります。"
		},
		"CREATE SELECTION FROM ARRAY": {
			"Syntax": "**CREATE SELECTION FROM ARRAY** ( *aTable* ; *recordArray* {; *selectionName*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションを作成するテーブル"
				],
				[
					"recordArray",
					"Integer, Boolean array",
					"->",
					"レコード番号の配列, または ブール配列 (True = レコードをセレクションに含める False = レコードをセレクションに含めない)"
				],
				[
					"selectionName",
					"Text",
					"->",
					"作成する命名セレクションの名前, または 引数を省略した場合、コマンドをカレント セレクションに適用する"
				]
			],
			"Summary": "**CREATE SELECTION FROM ARRAY** コマンドは、以下の方法で*selectionName*"
		},
		"CREATE SET FROM ARRAY": {
			"Syntax": "**CREATE SET FROM ARRAY** ( *aTable* ; *recordsArray* {; *setName*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セットのテーブル"
				],
				[
					"recordsArray",
					"Integer, Boolean array",
					"->",
					"レコード番号配列、または ブール配列 (True = レコードはセットに含まれる, False = レコードはセットに含まれない)"
				],
				[
					"setName",
					"Text",
					"->",
					"作成するセットの名前, または 省略時、UserSetに適用する"
				]
			],
			"Summary": "CREATE SET FROM ARRAY コマンドは、セット*setName*"
		},
		"CREATE SET": {
			"Syntax": "**CREATE SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションからセットを作成するテーブル、または 省略時、デフォルトテーブル"
				],
				[
					"set",
					"Text",
					"->",
					"新規に作成するセットの名前"
				]
			],
			"Summary": "CREATE SETは、*aTable*に対して新しいセット*set*を作成し、*set*にカレントセレクションの内容を置きます。"
		},
		"CREATE THUMBNAIL": {
			"Syntax": "**CREATE THUMBNAIL** ( *source* ; *dest* {; *width* {; *height* {; *mode* {; *depth*}}}} )",
			"Params": [
				[
					"source",
					"Picture",
					"->",
					"サムネイルに変換する4Dピクチャフィールド または変数"
				],
				[
					"dest",
					"Picture",
					"<-",
					"結果のサムネイル"
				],
				[
					"width",
					"Integer",
					"->",
					"サムネイル幅 (ピクセル), デフォルト値 = 48"
				],
				[
					"height",
					"Integer",
					"->",
					"サムネイル高 (ピクセル), デフォルト値 = 48"
				],
				[
					"mode",
					"Integer",
					"->",
					"サムネイル作成モード デフォルト値 = Scaled to fit prop centered (6)"
				],
				[
					"depth",
					"Integer",
					"->",
					"廃止。使用しないでください"
				]
			],
			"Summary": "**CREATE THUMBNAIL**コマンドは、指定した元のピクチャのサムネールを返します。"
		},
		"Current client authentication": {
			"Syntax": "**Current client authentication** {( *domain* ; *protocol* )} : Text",
			"Params": [
				[
					"domain",
					"Text",
					"<-",
					"ドメイン名"
				],
				[
					"protocol",
					"Text",
					"<-",
					"\"Kerberos\"、\"NTLM\"、または空の文字列"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"Windows が返すセッションユーザーのログイン名"
				]
			],
			"Summary": "新しい **Current client authentication** コマンドは Windows の Active Directory サーバーにクライアントの認証を要求し、成功した場合には同クライアントの Windows ログイン名 (セッション ID) を返します。"
		},
		"Current date": {
			"Syntax": "**Current date** {( * )} : Date",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"サーバの日付を返す"
				],
				[
					"戻り値",
					"Date",
					"<-",
					"現在の日付"
				]
			],
			"Summary": "Current date コマンドは、システムクロックに保持された日付を現在の日付として返します。"
		},
		"Current default table": {
			"Syntax": "**Current default table**  : Pointer",
			"Params": [
				[
					"戻り値",
					"Pointer",
					"<-",
					"デフォルトテーブルへのポインタ"
				]
			],
			"Summary": "Current default table は、カレントプロセスに対してDEFAULT TABLEコマンドで最後に指定されたテーブルのポインタを返します。"
		},
		"Current form name": {
			"Syntax": "**Current form name**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"プロセス中のカレントのプロジェクトフォーム名またはカレントのテーブルフォーム名"
				]
			],
			"Summary": "**Current form name**コマンドは、プロセスのために定義されたカレントのフォームの名前を返します。"
		},
		"Current form table": {
			"Syntax": "**Current form table**  : Pointer",
			"Params": [
				[
					"戻り値",
					"Pointer",
					"<-",
					"現在表示されているフォームが属すテーブルへのポインタ"
				]
			],
			"Summary": "Current form tableコマンドは、カレントプロセスで表示または印刷されているフォームが属するテーブルのポインタを返します。"
		},
		"Current form window": {
			"Syntax": "**Current form window**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"カレントフォームウィンドウ参照番号"
				]
			],
			"Summary": "Current form window コマンドはカレントフォームウィンドウの参照を返します。"
		},
		"Current machine": {
			"Syntax": "**Current machine**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"マシンのネットワークの名前"
				]
			],
			"Summary": "Current machineコマンドは、オペレーティングシステムのネットワークパラメタに設定されたマシンの名前を返します。"
		},
		"Current method name": {
			"Syntax": "**Current method name**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"呼び出しメソッド名"
				]
			],
			"Summary": "**Current method name**コマンドは、このコマンドを呼び出したメソッド名を返します。"
		},
		"Current method path": {
			"Syntax": "**Current method path**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"実行中のメソッドの内部的な完全パス名"
				]
			],
			"Summary": "**Current method path**コマンドは実行中のデータベースメソッド、トリガー、プロジェクトメソッド、フォームメソッド、またはオブジェクトメソッドの内部的なパス名を返します。"
		},
		"Current process name": {
			"Syntax": "**Current process name**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"カレントプロセス名"
				]
			],
			"Summary": "**Current process name** コマンドは、このコマンドを呼び出したプロセスのプロセス名を返します。"
		},
		"Current process": {
			"Syntax": "**Current process**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"プロセス番号"
				]
			],
			"Summary": "Current processは、このコマンドを呼び出したプロセスのプロセス番号を返します。"
		},
		"Current system user": {
			"Syntax": "**Current system user**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"マシンオーナーのネットワーク名"
				]
			],
			"Summary": "**Current system user**コマンドは、マシンのカレントユーザアカウントで設定されたマシンのオーナー名を返します。"
		},
		"Current time": {
			"Syntax": "**Current time** {( * )} : Time",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"サーバの時刻を返す"
				],
				[
					"戻り値",
					"Time",
					"<-",
					"現在の時刻"
				]
			],
			"Summary": "Current time コマンドは、システムクロックの現在の時刻を返します。"
		},
		"Current user": {
			"Syntax": "**Current user** {( *user* )} : Text",
			"Params": [
				[
					"user",
					"Integer",
					"->",
					"ユーザーエイリアスまたは4Dユーザーアカウント"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"カレントユーザのユーザ名"
				]
			],
			"Summary": "Current user コマンドは、カレントユーザのエイリアス、またはユーザ名を返します。"
		},
		"CUT NAMED SELECTION": {
			"Syntax": "**CUT NAMED SELECTION** ( {*aTable* ;} *name* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションをカットするテーブル, または 省略した場合デフォルトテーブル"
				],
				[
					"name",
					"Text",
					"->",
					"作成する命名セレクションの名前"
				]
			],
			"Summary": "CUT NAMED SELECTION は、命名セレクション*name*を作成し、*aTable*のカレントセレクションをそこへ移します。"
		},
		"Data file encryption status": {
			"Syntax": "**Data file encryption status** ( structurePath , dataPath ) : Object",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"チェックする4Dストラクチャーファイルへのパス名"
				],
				[
					"dataPath",
					"Text",
					"->",
					"チェックするデータファイルへのパス名"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"データファイルとそれぞれのテーブルの暗号化についての情報"
				]
			],
			"Summary": "**Data file encryption status** コマンドは、*structurePath* および *dataPath* 引数で指定したデータファイルの、暗号化ステータスをあらわすオブジェクトを返します。"
		},
		"Data file": {
			"Syntax": "**Data file** {( *segment* )} : Text",
			"Params": [
				[
					"segment",
					"Integer",
					"->",
					"廃止、使用されません"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"データベースのデータファイルのロング名"
				]
			],
			"Summary": "Data file コマンドは、現在使用しているデータベースのデータファイルのロング名を返します。"
		},
		"Database measures": {
			"Syntax": "**Database measures** {( *options* )} : Object",
			"Params": [
				[
					"options",
					"Object",
					"->",
					"戻り値を指定するオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"データベースの計測値を含んだオブジェクト"
				]
			],
			"Summary": "**Database measures** コマンドは、4Dデータベースエンジンイベントについての詳細な情報を取得します。"
		},
		"Date": {
			"Syntax": "**Date** ( *expression* ) : Date",
			"Params": [
				[
					"expression",
					"Text, Date",
					"->",
					"日付を表す文字列か、日付型の式"
				],
				[
					"戻り値",
					"Date",
					"<-",
					"日付"
				]
			],
			"Summary": "**Date**コマンドは、*expression* を解釈し、日付を返します。"
		},
		"Day number": {
			"Syntax": "**Day number** ( *aDate* ) : Integer",
			"Params": [
				[
					"aDate",
					"Date",
					"->",
					"曜日に対応する数値を得る日付"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"曜日を示す数値"
				]
			],
			"Summary": "Day number コマンドは、*aDate*に対応するの曜日を数値で返します。"
		},
		"Day of": {
			"Syntax": "**Day of** ( *date* ) : Integer",
			"Params": [
				[
					"date",
					"Date",
					"->",
					"日を取り出す日付"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"日を表す数値"
				]
			],
			"Summary": "Day of コマンドは、*date*から日を返します。"
		},
		"Deactivated": {
			"Syntax": "**Deactivated**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがdeactivationである場合にTrueを返す"
				]
			],
			"Summary": "**Deactivated**コマンドはプロセスの最前面のウインドウが後ろに移動すると、そのフォームメソッドでTrue を返します。"
		},
		"Dec": {
			"Syntax": "**Dec** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"小数部を求める数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"小数部の数値"
				]
			],
			"Summary": "Decは*number*の小数部を返します。"
		},
		"DECRYPT BLOB": {
			"Syntax": "**DECRYPT BLOB** ( *toDecrypt* ; *sendPubKey* {; *recipPrivKey*} )",
			"Params": [
				[
					"toDecrypt",
					"Blob",
					"<->",
					"復号するデータ"
				],
				[
					"",
					"",
					"",
					"複合されたデータ"
				],
				[
					"sendPubKey",
					"Blob",
					"->",
					"送信者の公開鍵"
				],
				[
					"recipPrivKey",
					"Blob",
					"->",
					"受信者の秘密鍵"
				]
			],
			"Summary": "DECRYPT BLOB コマンドは、BLOB *toDecrypt*の内容を送信者の公開鍵*sendPubKey*を使用して解読します。"
		},
		"Decrypt data BLOB": {
			"Syntax": "**Decrypt data BLOB** ( *blobToDecrypt* ; *keyObject* ; *salt* ; *decryptedBLOB* ) : Boolean<br/>**Decrypt data BLOB** ( *blobToDecrypt* ; *passPhrase* ; *salt* ; *decryptedBLOB* ) : Boolean",
			"Params": [
				[
					"blobToDecrypt",
					"Blob",
					"->",
					"復号化したいBLOB"
				],
				[
					"keyObject &#124; passPhrase",
					"オブジェクト, テキスト",
					"->",
					"暗号化鍵を格納したJSON オブジェクト、または直接暗号化鍵を生成するためのパスフレーズ(テキスト)"
				],
				[
					"salt",
					"Integer",
					"->",
					"アルゴリズムのための追加のsalt"
				],
				[
					"decryptedBlob",
					"Blob",
					"<-",
					"復号化されたBLOB"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"復号化が正常に実行された場合にはTrue、それ以外の場合にはFalse"
				]
			],
			"Summary": "**Decrypt data BLOB** コマンドは、*blobToDecrypt* 引数のBLOB を、4D がデータの復号化に使用するのと同じアルゴリズム(AES-256) を使用して復号化し、その結果を*decryptedBLOB* 引数に返します\n\nBLOB を復号化するのには、*keyObject* または *passPhrase* のいづれかを使用することができます: \n\n* *keyObject*: 暗号鍵を格納したJSON オブジェクト。"
		},
		"DEFAULT TABLE": {
			"Syntax": "**DEFAULT TABLE** ( *aTable* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"デフォルトとして設定するテーブル"
				]
			],
			"Summary": "**Tip:** **DEFAULT TABLE**の使用やテーブル名の省略により、ステートメントを読みやすくすることが できるかもしれません。"
		},
		"DELAY PROCESS": {
			"Syntax": "**DELAY PROCESS** ( *process* ; *duration* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				],
				[
					"duration",
					"Real",
					"->",
					"遅延時間 (tick)"
				]
			],
			"Summary": "DELAY PROCESSは、*process* 引数で指定したプロセスの実行を指定したtick数 (1tick＝1/60秒) だけ遅らせます。"
		},
		"DELETE DOCUMENT": {
			"Syntax": "**DELETE DOCUMENT** ( *document* )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名、または 完全なドキュメントのパス名"
				]
			],
			"Summary": "**DELETE DOCUMENT** コマンドを使用して、*document*に渡したドキュメント名を持つドキュメントを削除します。"
		},
		"DELETE FOLDER": {
			"Syntax": "**DELETE FOLDER** ( *folder* {; *deleteOption*} )",
			"Params": [
				[
					"folder",
					"Text",
					"->",
					"削除されるフォルダーの名称またはフルパス"
				],
				[
					"deleteOption",
					"Integer",
					"->",
					"フォルダー削除オプション"
				]
			],
			"Summary": "DELETE FOLDER コマンドは*folder* に渡したフルパスまたは名前を持つフォルダーを削除します。"
		},
		"DELETE FROM ARRAY": {
			"Syntax": "**DELETE FROM ARRAY** ( *array* ; *where* {; *howMany*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"要素を削除する配列"
				],
				[
					"where",
					"Integer",
					"->",
					"削除を開始する要素番号"
				],
				[
					"howMany",
					"Integer",
					"->",
					"削除する要素数, または 省略時は1要素"
				]
			],
			"Summary": "**DELETE FROM ARRAY** コマンドは1つまたは複数の要素を*array*から削除します。"
		},
		"DELETE FROM BLOB": {
			"Syntax": "**DELETE FROM BLOB** ( *BLOB* ; *offset* ; *len* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"バイト列を削除するBLOB"
				],
				[
					"offset",
					"Integer",
					"->",
					"バイト削除開始位置"
				],
				[
					"len",
					"Integer",
					"->",
					"削除するバイト数"
				]
			],
			"Summary": "DELETE FROM BLOB コマンドは、*len*で指定されたバイト数を、*blob*の*offset*で指定された位置（BLOBの最初から相対的な位置として表される）から削除します。"
		},
		"DELETE FROM LIST": {
			"Syntax": "**DELETE FROM LIST** ( {* ;} *list* ; itemRef | * {; *} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定した場合, listはオブジェクト名 (文字列) 省略した場合, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* が省略された場合), または リストタイプオブジェクト名 (* を渡した場合)"
				],
				[
					"itemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号, または 0 はリストに最後に追加された項目 または * 現在選択されているリスト項目"
				],
				[
					"*",
					"Operator",
					"->",
					"指定した場合, サブリストがあればそれもメモリから消去 省略した場合, サブリストがあってもそれを消去しない"
				]
			],
			"Summary": "DELETE FROM LIST コマンドは、*list*に指定した参照番号またはオブジェクト名を持つリストから、*itemRef*引数で指定した項目を削除します。"
		},
		"DELETE INDEX": {
			"Syntax": "**DELETE INDEX** ( *fieldPtr* {; *} )<br/>**DELETE INDEX** ( *indexName* {; *} )",
			"Params": [
				[
					"fieldPtr &#124; indexName",
					"ポインター, 文字",
					"->",
					"インデックスを削除するフィールドを指すポインタ 削除されるインデックスの名前"
				],
				[
					"*",
					"演算子",
					"->",
					"渡されると = 非同期オペレーション"
				]
			],
			"Summary": "DELETE INDEXコマンドを使用して、データベースから1つ以上の既存のインデックスを削除できます。"
		},
		"DELETE MENU ITEM": {
			"Syntax": "**DELETE MENU ITEM** ( *menu* ; *menuItem* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				]
			],
			"Summary": "DELETE MENU ITEM コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニューから、*menuItem*引数にメニュー項目番号で指定したメニュー項目を削除します。"
		},
		"DELETE RECORD": {
			"Syntax": "**DELETE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードを削除するテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "DELETE RECORDは、*aTable*のカレントレコードを削除します。"
		},
		"DELETE SELECTION": {
			"Syntax": "**DELETE SELECTION** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントセレクションを削除するテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "**DELETE SELECTION**は、*aTable*のカレントセレクションのレコードを削除します。"
		},
		"Delete string": {
			"Syntax": "**Delete string** ( *source* ; *where* ; *numChars* ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"文字を削除する文字列"
				],
				[
					"where",
					"Integer",
					"->",
					"削除開始位置"
				],
				[
					"numChars",
					"Integer",
					"->",
					"削除する文字数"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"結果の文字列"
				]
			],
			"Summary": "Delete stringは、*where*から*numChars*分の文字を*source*から削除した文字列を返します。"
		},
		"DELETE USER": {
			"Syntax": "**DELETE USER** ( *userID* )",
			"Params": [
				[
					"userID",
					"Integer",
					"->",
					"削除するユーザのID番号"
				]
			],
			"Summary": "DELETE USER コマンドは、引数 *userID* に渡したユニークなユーザID番号を持つユーザを削除します。"
		},
		"DESCRIBE QUERY EXECUTION": {
			"Syntax": "**DESCRIBE QUERY EXECUTION** ( *status* )",
			"Params": [
				[
					"status",
					"Boolean",
					"->",
					"True=内部クエリ分析を有効にする, False=内部クエリ分析を無効にする"
				]
			],
			"Summary": "DESCRIBE QUERY EXECUTION コマンドはカレントプロセスにおいて、クエリの分析を有効にしたり無効にしたりします。"
		},
		"DIFFERENCE": {
			"Syntax": "**DIFFERENCE** ( *set* ; *subtractSet* ; *resultSet* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"セット"
				],
				[
					"subtractSet",
					"Text",
					"->",
					"取り除くセット"
				],
				[
					"resultSet",
					"Text",
					"->",
					"結果のセット"
				]
			],
			"Summary": "DIFFERENCEコマンドは、*set*と*subtractSet*を比較し、*subtractSet*に格納されている全てのレコードを*set*から取り除きます。"
		},
		"DISABLE MENU ITEM": {
			"Syntax": "**DISABLE MENU ITEM** ( *menu* ; *menuItem* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				]
			],
			"Summary": "DISABLE MENU ITEM コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目を選択不可にします。"
		},
		"Discover data key": {
			"Syntax": "**Discover data key**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"現在開かれているデータファイルに対する有効な暗号化キーが見つかった場合にはTrue、そうでない場合にはFalse"
				]
			],
			"Summary": "**Discover data key** コマンドは、現在開かれているデータファイルに対応する有効な暗号化キーを、接続されている全てのデバイスのルートレベルで検索し、それに成功した場合には**True** を返します。"
		},
		"DISPLAY NOTIFICATION": {
			"Syntax": "**DISPLAY NOTIFICATION** ( *title* ; *text* {; *duration*} )",
			"Params": [
				[
					"title",
					"Text",
					"->",
					"通知タイトル"
				],
				[
					"text",
					"Text",
					"->",
					"通知テキスト"
				],
				[
					"duration",
					"Integer",
					"->",
					"表示時間 (秒)"
				]
			],
			"Summary": "DISPLAY NOTIFICATION コマンドは ユーザーへの通知メッセージを表示します。"
		},
		"DISPLAY RECORD": {
			"Syntax": "**DISPLAY RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードを表示するテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "DISPLAY RECORDコマンドは、カレント入力フォームを使って、*aTable*のカレントレコードを表示します。"
		},
		"DISPLAY SELECTION": {
			"Syntax": "**DISPLAY SELECTION** ( {*aTable*}{; *selectMode*}{; *enterList*}{; *}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"表示するテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"selectMode",
					"Integer",
					"->",
					"選択モード"
				],
				[
					"enterList",
					"Boolean",
					"->",
					"リスト入力を許可するオプション"
				],
				[
					"*",
					"Operator",
					"->",
					"1レコードセレクションの場合にも出力フォームを使用し、 入力フォームのスクロールバーを隠す"
				],
				[
					"*",
					"Operator",
					"->",
					"入力フォームでスクロールバーを表示する (最初の*の2番目のオプションを上書きする)"
				]
			],
			"Summary": "DISPLAY SELECTION は、出力フォームを使用して、*aTable*の カレントセレクションを表示します。"
		},
		"Displayed line number": {
			"Syntax": "**Displayed line number**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"表示中の行番号"
				]
			],
			"Summary": "Displayed line number コマンドはOn Display Detailフォームイベントでのみ機能します。"
		},
		"DISTINCT ATTRIBUTE PATHS": {
			"Syntax": "**DISTINCT ATTRIBUTE PATHS** ( *objectField* ; *pathArray* )",
			"Params": [
				[
					"objectField",
					"Field",
					"->",
					"インデックスされたオブジェクトフィールド"
				],
				[
					"pathArray",
					"Text array",
					"<-",
					"重複しないパスのリストを取得させる配列"
				]
			],
			"Summary": "**DISTINCT ATTRIBUTE PATHS** コマンドは、*objectField* に受け渡したインデックスがついているオブジェクトフィールドが所属するテーブルのカレントセレクションについて、同オブジェクトフィールドから検出される、重複しないパスのリストを返します。"
		},
		"DISTINCT ATTRIBUTE VALUES": {
			"Syntax": "**DISTINCT ATTRIBUTE VALUES** ( *objectField* ; *path* ; *valuesArray* )",
			"Params": [
				[
					"objectField",
					"Field",
					"->",
					"重複しない属性値の一覧を取得したいオブジェクトフィールド"
				],
				[
					"path",
					"Text",
					"->",
					"重複しない値を取得したい属性へのパス"
				],
				[
					"valuesArray",
					"Text array, Integer array, Boolean array, Date array, Time array",
					"<-",
					"属性パス内の重複しない値"
				]
			],
			"Summary": "**テーマ:** 配列\n\n**DISTINCT ATTRIBUTE VALUES** コマンドは、フィールドが所属するテーブルのカレントセレクションの*objectField*引数で指定したフィールド内の、*path*引数で指定した属性から取得した重複しない(固有の)値を含む配列*valuesArray*を作成します。"
		},
		"DISTINCT VALUES": {
			"Syntax": "**DISTINCT VALUES** ( *aField* ; *array* {; *countArray*} )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"データとして使用する、インデックス可能なフィールド"
				],
				[
					"array",
					"Array",
					"<-",
					"フィールドデータを受け取る配列"
				],
				[
					"countArray",
					"Integer array, Real array",
					"<-",
					"それぞれの値の数を受け取る配列"
				]
			],
			"Summary": "**DISTINCT VALUES**コマンドは、*aField*が属するテーブルのカレントセレクションの*aField*フィールドからの重複しない(ユニークな)値で構成される*array*配列を作成します。"
		},
		"DOCUMENT LIST": {
			"Syntax": "**DOCUMENT LIST** ( *pathname* ; *documents* {; *options*} )",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"ボリューム、ディレクトリ、またはフォルダーへのパス名"
				],
				[
					"documents",
					"Text array",
					"<-",
					"この場所にあるドキュメントの名前"
				],
				[
					"options",
					"Integer",
					"->",
					"取得するリストを指定するオプション"
				]
			],
			"Summary": "**DOCUMENT LIST**コマンド は、*pathname*に渡すパス名にあるドキュメントの名前を要素とするテキスト配列*documents*を生成します。"
		},
		"DOCUMENT TO BLOB": {
			"Syntax": "**DOCUMENT TO BLOB** ( *document* ; *BLOB* )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名"
				],
				[
					"Blob",
					"Blob",
					"<->",
					"ドキュメントを受け取るBLOBフィールドまたは変数"
				],
				[
					"",
					"",
					"",
					"ドキュメントの内容"
				]
			],
			"Summary": "DOCUMENT TO BLOB は、*document*の内容全体を*blob*にロードします。"
		},
		"Document to text": {
			"Syntax": "**Document to text** ( *fileName* {; *charSet* {; *breakMode*}} ) : Text",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"ドキュメント名またはドキュメントへのパス名"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"文字コード名の名前または数字"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"改行の処理モード"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ドキュメントから取得したテキスト"
				]
			],
			"Summary": "**Document to text**コマンドは、ディスク上のファイルの中身を、4Dのテキスト変数またはテキストフィールドへと直接取り出すことができます。"
		},
		"DOM Append XML child node": {
			"Syntax": "**DOM Append XML child node** ( *elementRef* ; *childType* ; *childValue* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"childType",
					"Integer",
					"->",
					"追加する子のタイプ"
				],
				[
					"childValue",
					"Text, Blob",
					"->",
					"子ノードとして挿入するテキストまたは (テキストあるいはBlob) 変数"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"子XML要素参照"
				]
			],
			"Summary": "DOM Append XML child node コマンドを使用して、*elementRef*で指定したXMLノードに*childValue*の値を追加できます。"
		},
		"DOM Append XML element": {
			"Syntax": "**DOM Append XML element** ( *targetElementRef* ; *sourceElementRef* ) : Text",
			"Params": [
				[
					"targetElementRef",
					"Text",
					"->",
					"XML親要素の参照"
				],
				[
					"sourceElementRef",
					"Text",
					"->",
					"追加するXML要素の参照"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"新しいXML要素参照"
				]
			],
			"Summary": "DOM Append XML element コマンドは*targetElementRef* 引数に渡した参照を持つXML要素の子要素を新しいXML要素に追加します。"
		},
		"DOM CLOSE XML": {
			"Syntax": "**DOM CLOSE XML** ( *elementRef* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XMLルート要素参照"
				]
			],
			"Summary": "DOM CLOSE XML コマンドは*elementRef*で指定されたXMLオブジェクトにより使用されているメモリを開放します。"
		},
		"DOM Count XML attributes": {
			"Syntax": "**DOM Count XML attributes** ( *elementRef* ) : Integer",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"属性数"
				]
			],
			"Summary": "DOM Count XML attributes コマンドは、*elementRef*で指定したXML要素中に現れるXML属性数を返します。"
		},
		"DOM Count XML elements": {
			"Syntax": "**DOM Count XML elements** ( *elementRef* ; *elementName* ) : Integer",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"elementName",
					"Text",
					"->",
					"数えるXML要素名"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"要素数"
				]
			],
			"Summary": "DOM Count XML elements コマンドは*elementRef* で参照されるXML要素中、要素名が*elementName*である子要素の数を返します。"
		},
		"DOM Create XML element arrays": {
			"Syntax": "**DOM Create XML element arrays** ( *elementRef* ; *xPath* {; *attribNamesArray* ; *attribValuesArray*} {; *attribNamesArray2* ; *attribValuesArray2* ; ... ; *attribNamesArrayN* ; *attribValuesArrayN*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XMLルート要素参照"
				],
				[
					"xPath",
					"Text",
					"->",
					"作成するXML要素のXPathパス"
				],
				[
					"attribNamesArray",
					"Text array",
					"->",
					"属性名配列"
				],
				[
					"attribValuesArray",
					"Text array",
					"->",
					"属性値配列"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"作成されたXML要素の参照"
				]
			],
			"Summary": "DOM Create XML element arrays コマンドを使用して*elementRef*要素に新しい要素を追加したり、さらに配列形式で渡された属性とその値も追加できます。"
		},
		"DOM Create XML element": {
			"Syntax": "**DOM Create XML element** ( *elementRef* ; *xPath* {; *attrName* ; *attrValue*} {; *attrName2* ; *attrValue2* ; ... ; *attrNameN* ; *attrValueN*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"ルートXML要素参照"
				],
				[
					"xPath",
					"Text",
					"->",
					"作成するXML要素のXPathパス"
				],
				[
					"attrName",
					"Text",
					"->",
					"設定する属性"
				],
				[
					"attrValue",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"新しい属性値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"作成されたXML要素の参照"
				]
			],
			"Summary": "**DOM Create XML element** コマンドは、*elementRef* で参照されるXML中の*xPath* 引数で指定された位置に新しい要素を作成し、また必要であれば属性を追加します。"
		},
		"DOM Create XML Ref": {
			"Syntax": "**DOM Create XML Ref** ( *root* {; *nameSpace*} {; *nameSpaceName* ; *nameSpaceValue*} {; *nameSpaceName2* ; *nameSpaceValue2* ; ... ; *nameSpaceNameN* ; *nameSpaceValueN*} ) : Text",
			"Params": [
				[
					"root",
					"Text",
					"->",
					"ルート要素名"
				],
				[
					"nameSpace",
					"Text",
					"->",
					"名前空間の値"
				],
				[
					"nameSpaceName",
					"Text",
					"->",
					"名前空間名"
				],
				[
					"nameSpaceValue",
					"Text",
					"->",
					"名前空間値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ルートXML要素参照"
				]
			],
			"Summary": "DOM Create XML Ref コマンドは空のXMLツリーをメモリに作成し、その参照を返します。"
		},
		"DOM EXPORT TO FILE": {
			"Syntax": "**DOM EXPORT TO FILE** ( *elementRef* ; *filePath* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"ルートXML要素参照"
				],
				[
					"filePath",
					"Text",
					"->",
					"ファイルへのフルパス"
				]
			],
			"Summary": "DOM EXPORT TO FILE コマンドは、XMLツリーをディスク上のファイルに格納します。"
		},
		"DOM EXPORT TO VAR": {
			"Syntax": "**DOM EXPORT TO VAR** ( *elementRef* ; *vXmlVar* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"ルートXML要素参照"
				],
				[
					"vXmlVar",
					"Text, Blob",
					"<-",
					"XMLツリーを受け取る変数"
				]
			],
			"Summary": "DOM EXPORT TO VAR コマンドはテキストまたはBLOB変数にXMLツリーを格納します。"
		},
		"DOM Find XML element by ID": {
			"Syntax": "**DOM Find XML element by ID** ( *elementRef* ; *id* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"id",
					"Text",
					"->",
					"検索する要素のID属性値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"見つけた要素の参照 (該当する場合)"
				]
			],
			"Summary": "DOM Find XML element by ID コマンドはXMLドキュメント中で、id属性値が引数として渡した*id*と同じである要素を検索します。"
		},
		"DOM Find XML element": {
			"Syntax": "**DOM Find XML element** ( *elementRef* ; *xPath* {; *arrElementRefs*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"xPath",
					"Text",
					"->",
					"検索する要素のXPathパス"
				],
				[
					"arrElementRefs",
					"Text array",
					"<-",
					"見つかった要素参照のリスト (該当する場合)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"見つかった要素の参照 (該当する場合)"
				]
			],
			"Summary": "DOM Find XML element コマンドはXMLストラクチャ中で特定のXML要素を検索するために使用します。"
		},
		"DOM Get first child XML element": {
			"Syntax": "**DOM Get first child XML element** ( *elementRef* {; *childElemName* {; *childElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"childElemName",
					"Text",
					"<-",
					"子要素名"
				],
				[
					"childElemValue",
					"Text",
					"<-",
					"子要素値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"子要素参照"
				]
			],
			"Summary": "DOM Get first child XML element コマンドは*elementRef*に渡した要素の最初の子要素への参照を返します。"
		},
		"DOM Get last child XML element": {
			"Syntax": "**DOM Get last child XML element** ( *elementRef* {; *childElemName* {; *childElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"childElemName",
					"Text",
					"<-",
					"子要素名"
				],
				[
					"childElemValue",
					"Text",
					"<-",
					"子要素値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"XML要素参照"
				]
			],
			"Summary": "DOM Get last child XML element コマンドは*elementRef*に渡した要素の最後の子要素への参照を返します。"
		},
		"DOM Get next sibling XML element": {
			"Syntax": "**DOM Get next sibling XML element** ( *elementRef* {; *siblingElemName* {; *siblingElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"siblingElemName",
					"Text",
					"<-",
					"兄弟XML要素名"
				],
				[
					"siblingElemValue",
					"Text",
					"<-",
					"兄弟XML要素値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"兄弟XML要素参照"
				]
			],
			"Summary": "DOM Get next sibling XML element コマンドは参照として渡したXML要素の次の兄弟要素の参照を返します。"
		},
		"DOM Get parent XML element": {
			"Syntax": "**DOM Get parent XML element** ( *elementRef* {; *parentElemName* {; *parentElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"parentElemName",
					"Text",
					"<-",
					"親XML要素名"
				],
				[
					"parentElemValue",
					"Text",
					"<-",
					"親XML要素値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"親XML要素参照"
				]
			],
			"Summary": "**DOM Get parent XML element**コマンドは、*elementRef*に参照で渡したXML要素の親要素参照を返します。"
		},
		"DOM Get previous sibling XML element": {
			"Syntax": "**DOM Get previous sibling XML element** ( *elementRef* {; *siblingElemName* {; *siblingElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"siblingElemName",
					"Text",
					"<-",
					"兄弟XML要素名"
				],
				[
					"siblingElemValue",
					"Text",
					"<-",
					"兄弟XML要素値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"兄弟XML要素参照"
				]
			],
			"Summary": "DOM Get previous sibling XML element コマンドは参照として渡したXML要素の前の兄弟要素の参照を返します。"
		},
		"DOM Get root XML element": {
			"Syntax": "**DOM Get root XML element** ( *elementRef* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ルート要素参照 またはエラーの場合 \"\""
				]
			],
			"Summary": "DOM Get root XML element コマンドは*elementRef* 引数に渡したXML要素が属するXMLドキュメントのルート要素参照を返します。"
		},
		"DOM GET XML ATTRIBUTE BY INDEX": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY INDEX** ( *elementRef* ; *attribIndex* ; *attribName* ; *attribValue* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"attribIndex",
					"Integer",
					"->",
					"属性のインデックス番号"
				],
				[
					"attribName",
					"Variable",
					"<-",
					"属性名"
				],
				[
					"attribValue",
					"Variable",
					"<-",
					"属性値"
				]
			],
			"Summary": "**DOM GET XML ATTRIBUTE BY INDEX** コマンドは、属性のインデックスを使用して、属性名と値を取得するために使用します。"
		},
		"DOM GET XML ATTRIBUTE BY NAME": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY NAME** ( *elementRef* ; *attribName* ; *attribValue* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"attribName",
					"Text",
					"->",
					"属性名"
				],
				[
					"attribValue",
					"Variable",
					"<-",
					"属性値"
				]
			],
			"Summary": "DOM GET XML ATTRIBUTE BY NAME コマンドを使用して、属性名に対応する属性値を取得できます。"
		},
		"DOM GET XML CHILD NODES": {
			"Syntax": "**DOM GET XML CHILD NODES** ( *elementRef* ; *childTypesArr* ; *nodeRefsArr* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"childTypesArr",
					"Integer array",
					"<-",
					"子ノードのタイプ"
				],
				[
					"nodeRefsArr",
					"Text array",
					"<-",
					"子ノードの参照または値"
				]
			],
			"Summary": "DOM GET XML CHILD NODES コマンドは*elementRef*で指定したXML要素のすべての子ノードのタイプと参照または値を返します。"
		},
		"DOM Get XML document ref": {
			"Syntax": "**DOM Get XML document ref** ( *elementRef* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"DOMツリー中の既存の要素の参照"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"DOMツリーの最初の要素の参照 (ドキュメントノード)"
				]
			],
			"Summary": "DOM Get XML document ref コマンドを使用して*elementRef*に渡したDOMツリーの\"ドキュメント\"参照を取得できます。"
		},
		"DOM GET XML ELEMENT NAME": {
			"Syntax": "**DOM GET XML ELEMENT NAME** ( *elementRef* ; *elementName* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"elementName",
					"Variable",
					"<-",
					"要素の名前"
				]
			],
			"Summary": "DOM GET XML ELEMENT NAME コマンドは、*elementRef* で指定したXML要素の名前を*elementName* 引数に返します。"
		},
		"DOM GET XML ELEMENT VALUE": {
			"Syntax": "**DOM GET XML ELEMENT VALUE** ( *elementRef* ; *elementValue* {; *cDATA*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"elementValue",
					"Variable",
					"<-",
					"要素値"
				],
				[
					"cDATA",
					"Variable",
					"<-",
					"CDATAセクションの内容"
				]
			],
			"Summary": "**DOM GET XML ELEMENT VALUE** コマンドは *elementRef*に指定したXML要素の値を*elementValue* 引数に返します。"
		},
		"DOM Get XML element": {
			"Syntax": "**DOM Get XML element** ( *elementRef* ; *elementName* ; *index* ; *elementValue* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"elementName",
					"Text",
					"->",
					"取得する要素の名前"
				],
				[
					"index",
					"Integer",
					"->",
					"取得する要素のインデックス番号"
				],
				[
					"elementValue",
					"Variable",
					"<-",
					"要素値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"XML参照 (16 文字)"
				]
			],
			"Summary": "DOM Get XML element コマンドは、*elementName* と *index* 引数に基づき、子要素の参照を返します。"
		},
		"DOM Get XML information": {
			"Syntax": "**DOM Get XML information** ( *elementRef* ; *xmlInfo* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XMLルート要素参照"
				],
				[
					"xmlInfo",
					"Integer",
					"->",
					"取得する情報のタイプ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"XML情報の値"
				]
			],
			"Summary": "DOM Get XML information コマンドを使用して、*elementRef*で指定したXML要素に関する様々な情報を取得できます。"
		},
		"DOM Insert XML element": {
			"Syntax": "**DOM Insert XML element** ( *targetElementRef* ; *sourceElementRef* ; *childIndex* ) : Text",
			"Params": [
				[
					"targetElementRef",
					"Text",
					"->",
					"親XML要素参照"
				],
				[
					"sourceElementRef",
					"Text",
					"->",
					"挿入するXML要素参照"
				],
				[
					"childIndex",
					"Integer",
					"->",
					"新しい要素を挿入するターゲットとなる子要素のインデックス"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"新しいXML要素の参照"
				]
			],
			"Summary": "DOM Insert XML element コマンドを使用して*targetElementRef*引数に渡された参照を持つXML要素の子要素の間に、新しいXML要素を挿入できます。"
		},
		"DOM Parse XML source": {
			"Syntax": "**DOM Parse XML source** ( *document* {; *validation* {; *dtd* }} ) : Text<br/>**DOM Parse XML source** ( *document* {; *validation* {; *schema* }} ) : Text",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメントのパス名"
				],
				[
					"validation",
					"Boolean",
					"->",
					"True = 検証を行う False = 検証を行わない"
				],
				[
					"dtd &#124; schema",
					"文字",
					"->",
					"DTDまたはXMLスキーマの場所"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"XML要素参照"
				]
			],
			"Summary": "DOM Parse XML sourceコマンドはXML構造を含むドキュメントを解析し、XMLツリーへの参照を返します。"
		},
		"DOM Parse XML variable": {
			"Syntax": "**DOM Parse XML variable** ( *variable* {; *validation* {; *dtd* }} ) : Text<br/>**DOM Parse XML variable** ( *variable* {; *validation* {; *schema*}} ) : Text",
			"Params": [
				[
					"variable",
					"Blob, Text",
					"->",
					"変数名"
				],
				[
					"validation",
					"Boolean",
					"->",
					"True = DTDによる検証を行う False = 検証なし"
				],
				[
					"dtd &#124; schema",
					"文字",
					"->",
					"DTDまたはXMLスキーマの場所"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"XML要素参照"
				]
			],
			"Summary": "**DOM Parse XML variable**コマンドはXML構造を格納するBLOBまたはテキスト型変数を解析し、XML構造への参照を返します。"
		},
		"DOM REMOVE XML ATTRIBUTE": {
			"Syntax": "**DOM REMOVE XML ATTRIBUTE** ( *elementRef* ; *attribName* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"attribName",
					"Text",
					"->",
					"取り除く属性"
				]
			],
			"Summary": "DOM REMOVE XML ATTRIBUTE コマンドは*elementRef*で指定されたXML要素に*attrName*で指定された属性が存在すれば、それを取り除きます。"
		},
		"DOM REMOVE XML ELEMENT": {
			"Syntax": "**DOM REMOVE XML ELEMENT** ( *elementRef* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				]
			],
			"Summary": "DOM REMOVE XML ELEMENT コマンドは*elementRef*で指定した要素を取り除きます。"
		},
		"DOM SET XML ATTRIBUTE": {
			"Syntax": "**DOM SET XML ATTRIBUTE** ( *elementRef* ; *attrName* ; *attrValue* {; *attrName2* ; *attrValue2* ; ... ; *attrNameN* ; *attrValueN*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"attrName",
					"Text",
					"->",
					"設定する属性"
				],
				[
					"attrValue",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"新しい属性値"
				]
			],
			"Summary": "DOM SET XML ATTRIBUTE コマンドを使用して、*elementRef* に渡したXML要素に1つ以上の属性を追加できます。"
		},
		"DOM SET XML DECLARATION": {
			"Syntax": "**DOM SET XML DECLARATION** ( *elementRef* ; *encoding* {; *standalone* {; *indentation*}} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"encoding",
					"Text",
					"->",
					"XMLドキュメント文字セット"
				],
				[
					"standalone",
					"Boolean",
					"->",
					"True = ドキュメントはスタンドアロン False (デフォルト) = ドキュメントはスタンドアロンではない"
				],
				[
					"indentation",
					"Boolean",
					"->",
					"***廃止予定、使用しないでください***"
				]
			],
			"Summary": "**DOM SET XML DECLARATION** コマンドを使用して、*elementRef*により設定されるXMLツリーの作成に利用されるさまざまなオプションを設定できます。"
		},
		"DOM SET XML ELEMENT NAME": {
			"Syntax": "**DOM SET XML ELEMENT NAME** ( *elementRef* ; *elementName* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"elementName",
					"Text",
					"->",
					"要素の新しい名前"
				]
			],
			"Summary": "DOM SET XML ELEMENT NAME コマンドを使用して、*elementRef*で指定した要素の名前を変更します。"
		},
		"DOM SET XML ELEMENT VALUE": {
			"Syntax": "**DOM SET XML ELEMENT VALUE** ( *elementRef* {; *xPath*}; *elementValue* {; *} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"xPath",
					"Text",
					"->",
					"XML要素のXPathパス"
				],
				[
					"elementValue",
					"Text, Variable",
					"->",
					"要素の新しい値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 値をCDATAに設定"
				]
			],
			"Summary": "**DOM SET XML ELEMENT VALUE** コマンドを使用して、*elementRef* で指定した要素の値を更新できます。"
		},
		"DRAG WINDOW": {
			"Syntax": "**DRAG WINDOW**",
			"Params": [],
			"Summary": "DRAG WINDOW コマンドは、ユーザがマウスのクリックと移動を行うと、ウィンドウをドラッグします。"
		},
		"Drop position": {
			"Syntax": "**Drop position** {( *columnNumber* )} : Integer<br/>**Drop position** {( *pictPosY* )} : Integer",
			"Params": [
				[
					"columnNumber &#124; pictPosY",
					"倍長整数",
					"<-",
					"リストボックス列番号 (ドロップ位置が最後の列を超えた場合-1)、またはピクチャーの場合Y座標の位置"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"・数値 (配列/リストボックス) または・位置 (階層リスト) または・ドロップ先項目の文字列中の位置 (テキスト/コンボボックス) または・最後の配列要素やリスト項目を超えてドロップされた場合-1 または・ピクチャー中のX座標の位置"
				]
			],
			"Summary": "**Drop position**コマンドは、 “複合” オブジェクトに対して行われたドロップのドロップ位置を知るために使用します。"
		},
		"DROP REMOTE USER": {
			"Syntax": "**DROP REMOTE USER** ( *userSession* )",
			"Params": [
				[
					"userSession",
					"Text",
					"->",
					"ユーザーのセッションID"
				]
			],
			"Summary": "**DROP REMOTE USER** コマンドは4D Server にリモートで接続している特定のユーザーの接続を解除します。"
		},
		"DUPLICATE RECORD": {
			"Syntax": "**DUPLICATE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードを複製するテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "DUPLICATE RECORDは、カレントレコードを複製して同じ*aTable*内に新しいレコードを作成します。"
		},
		"Dynamic pop up menu": {
			"Syntax": "**Dynamic pop up menu** ( *menu* {; *default* {; *xCoord* ; *yCoord*}} )  : Text",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"メニュー参照"
				],
				[
					"default",
					"Text",
					"->",
					"デフォルトで選択される項目のパラメーター"
				],
				[
					"xCoord",
					"Integer",
					"->",
					"左上隅のx座標"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"左上隅のy座標"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"選択されたメニュー項目のパラメーター"
				]
			],
			"Summary": "**Dynamic pop up menu**はマウスの現在位置またはオプションの*xCoord* と *yCoord*引数で指定した位置に階層ポップアップメニューを表示します。"
		},
		"EDIT ACCESS": {
			"Syntax": "**EDIT ACCESS**",
			"Params": [],
			"Summary": "EDIT ACCESS コマンドを使用して、ユーザにパスワードシステムの編集環境を提供します。"
		},
		"EDIT FORMULA": {
			"Syntax": "**EDIT FORMULA** ( *aTable* ; *formula* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォーミュラエディタにデフォルトで表示するテーブル"
				],
				[
					"formula",
					"Text",
					"->",
					"フォーミュラエディタに表示するフォーミュラを含む変 またはエディタの実を表示するには \"\""
				],
				[
					"<-",
					"ユーザが確定したフォーミュラ"
				]
			],
			"Summary": "**EDIT FORMULA**コマンドを使用してフォーミュラーエディターを開き、ユーザーはフォーミュラーを作成したり変更したりできます。"
		},
		"EDIT ITEM": {
			"Syntax": "**EDIT ITEM** ( {* ;} *object* {; *item*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定した場合オブジェクト名（文字列） 省略するとテーブルまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (*が指定されている場合) または テーブルまたは変数 (*が省略された場合)"
				],
				[
					"item",
					"Integer",
					"->",
					"項目番号"
				]
			],
			"Summary": "**EDIT ITEM** コマンドは*object* 引数で指定された項目、または指定された配列やリスト中*item* で指定された項目を編集状態にします。"
		},
		"ENABLE MENU ITEM": {
			"Syntax": "**ENABLE MENU ITEM** ( *menu* ; *menuItem* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				]
			],
			"Summary": "ENABLE MENU ITEM コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目を選択可にします。"
		},
		"ENCRYPT BLOB": {
			"Syntax": "**ENCRYPT BLOB** ( *toEncrypt* ; *sendPrivKey* {; *recipPubKey*} )",
			"Params": [
				[
					"toEncrypt",
					"Blob",
					"<->",
					"暗号化するデータ"
				],
				[
					"",
					"",
					"",
					"暗号化されたデータ"
				],
				[
					"sendPrivKey",
					"Blob",
					"->",
					"送信者の秘密鍵"
				],
				[
					"recipPubKey",
					"Blob",
					"->",
					"受信者の公開鍵"
				]
			],
			"Summary": "ENCRYPT BLOB コマンドは、*toEncrypt* BLOBの内容を送信者の秘密鍵*sendPrivKey*を使用して暗号化します。"
		},
		"Encrypt data BLOB": {
			"Syntax": "**Encrypt data BLOB** ( *blobToEncrypt* ; *keyObject* ; *salt* ; *encryptedBLOB* ) : Boolean<br/>**Encrypt data BLOB** ( *blobToEncrypt* ; *passPhrase* ; *salt* ; *encryptedBLOB* ) : Boolean",
			"Params": [
				[
					"blobToEncrypt",
					"Blob",
					"->",
					"暗号化したいBLOB"
				],
				[
					"keyObject &#124; passPhrase",
					"オブジェクト, テキスト",
					"->",
					"暗号化鍵を格納したJSON オブジェクト、または直接暗号化鍵を生成するためのパスフレーズ(テキスト)"
				],
				[
					"salt",
					"Integer",
					"->",
					"アルゴリズムのための追加のsalt"
				],
				[
					"encryptedBlob",
					"Blob",
					"<-",
					"暗号化されたBLOB"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"暗号化が正常に実行された場合にはTrue、それ以外の場合にはFalse"
				]
			],
			"Summary": "**Encrypt data BLOB** コマンドは、*blobToEncrypt* 引数のBLOB を、4D がデータの暗号化に使用するのと同じアルゴリズム(AES-256) を使用して暗号化し、その結果を*encryptedBlob* 引数に返します。"
		},
		"Encrypt data file": {
			"Syntax": "**Encrypt data file** ( *structurePath* ; *dataPath* {; *newPassPhrase* {; *archiveFolder* {; *curPassPhrase* {; *methodName*}}}} ) : Text<br/>**Encrypt data file** ( *structurePath* ; *dataPath* {; *newDataKey* {; *archiveFolder* {; *curDataKey* {; *methodName*}}}} ) : Text",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"ストラクチャーファイルのパス名"
				],
				[
					"dataPath",
					"Text",
					"->",
					"暗号化するデータファイルへのパス名"
				],
				[
					"newPassPhrase &#124; newDataKey",
					"テキスト, オブジェクト",
					"->",
					"更新したい場合: 新しいパスフレーズ (テキスト)または新しい暗号化キー(オブジェクト)"
				],
				[
					"archiveFolder",
					"Text",
					"->",
					"元のファイルを保存しておくフォルダのパス名"
				],
				[
					"curPassPhrase &#124; curDataKey",
					"テキスト, オブジェクト",
					"->",
					"カレントのパスフレーズ(テキスト)またはカレントの暗号化キー(オブジェクト)"
				],
				[
					"methodName",
					"Text",
					"->",
					"4Dコールバックメソッド名"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"元のファイルが保存されたフォルダの完全なパス名"
				]
			],
			"Summary": "**Encrypt data file** コマンドはを使用数と、*structurePath* 引数で指定されたストラクチャーに割り当てられている、*dataPath* 引数で指定されたデータファイルを暗号化または再暗号化することができます。"
		},
		"End selection": {
			"Syntax": "**End selection** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードポインタがセレクションの最後のレコードよりも 後ろにあるかテストするテーブル、または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"Yes (TRUE) or No (FALSE)"
				]
			],
			"Summary": "**End selection** は、カレントレコードポインタが*aTable*のカレントセレクションの後ろにある場合TRUEを返します。"
		},
		"End SQL": {
			"Syntax": "**End SQL**",
			"Params": [],
			"Summary": "End SQLとはメソッドエディタ中で一連のSQLコマンドの最後を意味するキーワードです。"
		},
		"Equal pictures": {
			"Syntax": "**Equal pictures** ( *picture1* ; *picture2* ; *mask* ) : Boolean",
			"Params": [
				[
					"picture1",
					"Picture, Picture",
					"->",
					"元のソースピクチャー"
				],
				[
					"picture2",
					"Picture, Picture",
					"->",
					"比較するピクチャー"
				],
				[
					"mask",
					"Picture, Picture",
					"<-",
					"結果のマスク"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"2つのピクチャーが同じ場合True、そうでなければFalse"
				]
			],
			"Summary": "**Equal pictures**コマンドは2つのピクチャーの寸法と内容を厳密に比較します。"
		},
		"ERASE WINDOW": {
			"Syntax": "**ERASE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または 省略時、カレントプロセスの最前面ウィンドウ"
				]
			],
			"Summary": "ERASE WINDOW コマンドは*window*で指定されたウィンドウの内容をクリアします。"
		},
		"Euro converter": {
			"Syntax": "**Euro converter** ( *value* ; *fromCurrency* ; *toCurrency* ) : Real",
			"Params": [
				[
					"value",
					"Real",
					"->",
					"変換する値"
				],
				[
					"fromCurrency",
					"Text",
					"->",
					"valueの通貨コード"
				],
				[
					"toCurrency",
					"Text",
					"->",
					"変換先通貨コード"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"変換された値"
				]
			],
			"Summary": "コマンドは\"ユーロ\"に所属するユーロ通貨の元と先の異なった通貨の値を変換します。"
		},
		"EXECUTE FORMULA": {
			"Syntax": "**EXECUTE FORMULA** ( *statement* )",
			"Params": [
				[
					"statement",
					"Text",
					"->",
					"実行するコード"
				]
			],
			"Summary": "**EXECUTE FORMULA** は*statement*をコードとして実行します。"
		},
		"EXECUTE METHOD IN SUBFORM": {
			"Syntax": "**EXECUTE METHOD IN SUBFORM** ( *subformObject* ; *formula* {; *return* {; *param*} {; *param2* ; ... ; *paramN*}} )",
			"Params": [
				[
					"subformObject",
					"Text",
					"->",
					"サブフォームオブジェクトの名称"
				],
				[
					"formula",
					"Object, Text",
					"->",
					"実行するプロジェクトメソッドの名前、または Formulaオブジェクト"
				],
				[
					"return",
					"*, Variable",
					"->",
					"メソッドが値を戻さない場合 *"
				],
				[
					"<-",
					"メソッドから返される値"
				],
				[
					"param",
					"Expression",
					"->",
					"メソッドに渡す引数"
				]
			],
			"Summary": "**EXECUTE METHOD IN SUBFORM** コマンドを使用して サブフォームオブジェクト*subformObject* のコンテキストにおいて*formula* 引数で指定したコードを実行できます。"
		},
		"EXECUTE METHOD": {
			"Syntax": "**EXECUTE METHOD** ( *methodName* {; result | * {; *param*}}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"methodName",
					"Text",
					"->",
					"実行するプロジェクトメソッド名"
				],
				[
					"result &#124; *",
					"変数, 演算子",
					"<-",
					"メソッドの結果を受け取る変数 または *: メソッドが結果を返さない場合"
				],
				[
					"param",
					"Expression",
					"->",
					"メソッドの引数"
				]
			],
			"Summary": "EXECUTE METHOD コマンドは、*param1."
		},
		"EXECUTE ON CLIENT": {
			"Syntax": "**EXECUTE ON CLIENT** ( *clientName* ; *methodName* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"clientName",
					"Text",
					"->",
					"4D Clientの登録名"
				],
				[
					"methodName",
					"Text",
					"->",
					"実行するメソッドの名前"
				],
				[
					"param",
					"->",
					"メソッドの引数"
				]
			],
			"Summary": "EXECUTE ON CLIENT コマンドは、*clientName*という名前で登録されている4D Clientで、必要であれば*param1."
		},
		"Execute on server": {
			"Syntax": "**Execute on server** ( *procedure* ; *stack* {; *name* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"procedure",
					"Text",
					"->",
					"プロセス中で実行するメソッド"
				],
				[
					"stack",
					"Integer",
					"->",
					"スタックサイズ (バイト)"
				],
				[
					"name",
					"Text",
					"->",
					"作成するプロセスの名前"
				],
				[
					"param",
					"Expression",
					"->",
					"メソッドの引数"
				],
				[
					"*",
					"演算子",
					"->",
					"重複しないプロセス"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"新規プロセスのプロセス番号 または既存のプロセス番号"
				]
			],
			"Summary": "Execute on server コマンドはサーバマシン上 (クライアント/サーバで実行された場合) 、または同じマシン上 (シングルユーザで実行された場合) で新しいプロセスを開始し、そのプロセスのプロセス番号を返します。"
		},
		"Exp": {
			"Syntax": "**Exp** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"評価する数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"指数関数値"
				]
			],
			"Summary": "Expは自然対数の底（e = 2."
		},
		"EXPAND BLOB": {
			"Syntax": "**EXPAND BLOB** ( *BLOB* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"展開するBLOB"
				]
			],
			"Summary": "EXPAND BLOB コマンドは、COMPRESS BLOBコマンドを使用して既に圧縮されている*blob*を解凍します。"
		},
		"EXPORT DATA": {
			"Syntax": "**EXPORT DATA** ( *fileName* {; *project* {; *}} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"エクスポートファイルのフルパス名"
				],
				[
					"project",
					"Text, Blob",
					"->",
					"エクスポートプロジェクト"
				],
				[
					"<-",
					"エクスポートプロジェクトの新しい内容 (*引数指定時)"
				],
				[
					"*",
					"演算子",
					"->",
					"エクスポートダイアログを表示し プロジェクトの内容を更新"
				]
			],
			"Summary": "**EXPORT DATA**コマンドは、データを*fileName*ファイルに書き出します。"
		},
		"EXPORT DIF": {
			"Syntax": "**EXPORT DIF** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データを書き出すテーブル, または 省略した場合, デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"データが書き出されるDIFドキュメント"
				]
			],
			"Summary": "EXPORT DIF コマンドは、カレントプロセスにおける*aTable*のカレントセレクションのレコードをディスクに書き出します。"
		},
		"Export structure file": {
			"Syntax": "**Export structure file** ( *folderPath* {; *options*} ) : Object",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"プロジェクトファイルの保存先フォルダのパス"
				],
				[
					"options",
					"Object",
					"->",
					"書き出しオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"書き出しステータスと(あれば)エラーについてのメッセージ"
				]
			],
			"Summary": "**Export structure file** コマンドは、カレントの4D データベースストラクチャーを、*folderPath* 引数で指定したパスに、テキストベースのファイルやネイティブのピクチャーファイルなどのセットに分解し、書き出し、保存します。"
		},
		"EXPORT STRUCTURE": {
			"Syntax": "**EXPORT STRUCTURE** ( *exportedStructure* {; *format*} )",
			"Params": [
				[
					"exportedStructure",
					"Text",
					"<-",
					"4D データベースストラクチャーを書き出したXML定義ファイル"
				],
				[
					"format",
					"Text",
					"->",
					"Export format: xml format (default) or html format"
				]
			],
			"Summary": "**EXPORT STRUCTURE** コマンドは、カレントの4Dデータベースのストラクチャー定義を*exportedStructure* へと書き出します。"
		},
		"EXPORT SYLK": {
			"Syntax": "**EXPORT SYLK** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データを書き出すテーブル, または 省略した場合, デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"データが書き出されるSYLKドキュメント"
				]
			],
			"Summary": "EXPORT SYLK コマンドは、カレントプロセスにおける*aTable*のカレントセレクションのレコードをディスクに書き出します。"
		},
		"EXPORT TEXT": {
			"Syntax": "**EXPORT TEXT** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データを書き出すテーブル, または 省略した場合, デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"データが書き出されるテキストドキュメント"
				]
			],
			"Summary": "EXPORT TEXT コマンドは、カレントプロセスにおける*aTable*のカレントセレクションのレコードをディスクに書き出します。"
		},
		"False": {
			"Syntax": "**False**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"False"
				]
			],
			"Summary": "**False**は、ブール値のFalseを返します。"
		},
		"Field name": {
			"Syntax": "**Field name** ( *fieldPtr* ) : Text<br/>**Field name** ( *tableNum* ; *fieldNum* ) : Text",
			"Params": [
				[
					"fieldPtr &#124; tableNum",
					"ポインター, 倍長整数",
					"->",
					"フィールドポインタ、またはテーブル番号"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"最初の引数にテーブル番号を渡した場合は、 フィールド番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"フィールド名"
				]
			],
			"Summary": "Field name関数は、*tableNum*と*fieldNum*または*fieldPtr*で指定したフィールドの名前を返します。"
		},
		"Field": {
			"Syntax": "**Field** ( *tableNum* ; *fieldNum* ) -> 戻り値 \n        \n            Field ( *fieldPtr* ) -> 戻り値",
			"Params": [
				[
					"tableNum",
					"Integer",
					"->",
					"テーブル番号"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"フィールド番号"
				],
				[
					"戻り値",
					"Pointer",
					"<-",
					"フィールドポインタ"
				],
				[
					"Field ( fieldPtr ) -> 戻り値"
				],
				[
					"引数",
					"型",
					"説明"
				],
				[
					"fieldPtr",
					"Pointer",
					"->",
					"フィールドポインタ"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"フィールド番号"
				]
			],
			"Summary": "Field コマンドには、2つの形式があります。"
		},
		"FILTER EVENT": {
			"Syntax": "**FILTER EVENT**",
			"Params": [],
			"Summary": "**FILTER EVENT** コマンドは、ON EVENT CALL コマンドでインストールされたイベント処理プロジェクトメソッドから呼び出されます。"
		},
		"FILTER KEYSTROKE": {
			"Syntax": "**FILTER KEYSTROKE** ( *filteredChar* )",
			"Params": [
				[
					"filteredChar",
					"Text",
					"->",
					"フィルタされたキーストローク文字、または 空文字の場合キーストロークをキャンセル"
				]
			],
			"Summary": "FILTER KEYSTROKE は、ユーザがフィールドや入力可エリアに入力した文字を、*filteredChar* に渡した文字列の最初の文字で置き換えます。"
		},
		"Find in array": {
			"Syntax": "**Find in array** ( *array* ; *value* {; *start*} ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"検索を行う配列"
				],
				[
					"value",
					"Expression",
					"->",
					"配列タイプと同じタイプの検索値"
				],
				[
					"start",
					"Integer",
					"->",
					"検索を開始する配列要素番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"検索値が見つかった最初の要素番号"
				]
			],
			"Summary": "Find in array コマンドは、*array*から引数*value*と同じものを検索し、最初に発見された要素の番号を返します。"
		},
		"Find in field": {
			"Syntax": "**Find in field** ( *targetField* ; *value* ) : Integer",
			"Params": [
				[
					"targetField",
					"Field",
					"->",
					"検索を実行するフィールド"
				],
				[
					"value",
					"Field, Variable",
					"->",
					"検索する値"
				],
				[
					"<-",
					"検索された値"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"検索されたレコード番号 または レコードが検索されなかった場合、-1"
				]
			],
			"Summary": "Find in field コマンドは、*targetField*フィールドの値が*value*に等しい最初のレコードのレコード番号を返します。"
		},
		"Find in list": {
			"Syntax": "**Find in list** ( {* ;} *list* ; *value* ; *scope* {; *itemsArray* {; *}} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定した場合, listはオブジェクト名 (文字列) 省略した場合, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時) リストオブジェクト名 (* 指定時)"
				],
				[
					"value",
					"Text",
					"->",
					"検索する値"
				],
				[
					"scope",
					"Integer",
					"->",
					"0=メインリスト, 1=サブリスト"
				],
				[
					"itemsArray",
					"Integer array",
					"<-",
					"2番目の * 省略時: 見つけた項目の位置配列 - 2番目の * 指定時: 見つけた項目の項目参照番号配列"
				],
				[
					"*",
					"演算子",
					"->",
					"- 省略時: 項目位置を使用 - 指定時: 項目参照番号使用"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"- 2番目の * 省略時: 見つけた項目の位置 - 2番目の * 指定時: 見つけた項目の項目参照番号"
				]
			],
			"Summary": "Find in list コマンドは、*value*に渡した文字列と同じ値を持つ項目を*list*リスト中で検索し、最初に見つけた項目の位置または項目参照番号を返します。"
		},
		"Find in sorted array": {
			"Syntax": "**Find in sorted array** ( *array* ; *value* ; > or < {; *posFirst* {; *posLast*}} ) : Boolean",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"検索する配列"
				],
				[
					"value",
					"Expression",
					"->",
					"配列内で検索する値(配列と同じ型)"
				],
				[
					"> or <",
					"演算子",
					"->",
					"配列が昇順になっている場合には>、降順になっている場合には<"
				],
				[
					"posFirst",
					"Integer",
					"<-",
					"値が見つかった場合にはそれが見つかった最初の位置/そうでない場合には値が挿入されるべき位置"
				],
				[
					"posLast",
					"Integer",
					"<-",
					"値が見つかった場合にはそれが見つかった最後の位置/そうでない場合にはposFirstと同じ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"配列内にて値と合致する要素が少なくとも一つある場合にはTrue、そうでない場合にはFalse"
				]
			],
			"Summary": "**Find in sorted array** コマンドは *array* 引数で指定した配列内に、*value* 引数で指定した値と合致する要素が少なくとも一つある場合には**true**を返します。"
		},
		"Find window": {
			"Syntax": "**Find window** ( *left* ; *top* {; *windowPart*} ) : Integer",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"グローバル左座標"
				],
				[
					"top",
					"Integer",
					"->",
					"グローバル上座標"
				],
				[
					"windowPart",
					"Integer",
					"<-",
					"ウィンドウパーツID番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ウィンドウ参照番号"
				]
			],
			"Summary": "Find window コマンドは、*left* と *top*に渡した座標のポイントにある最初のウィンドウの参照を返します。"
		},
		"FIRST RECORD": {
			"Syntax": "**FIRST RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションの先頭をカレントレコードにするテーブル または省略時デフォルトテーブル"
				]
			],
			"Summary": "FIRST RECORDは、*aTable*のカレントセレクションの先頭レコードをディスクからロードし、カレントレコードに設定します。"
		},
		"FLUSH CACHE": {
			"Syntax": "**FLUSH CACHE** {( size )}<br/>**FLUSH CACHE** {( * )}",
			"Params": [
				[
					"size &#124; *",
					"実数, 演算子",
					"->",
					"解放するキャッシュサイズ(バイト単位)、* 指定時はキャッシュメモリを完全に空にする"
				]
			],
			"Summary": "FLUSH CACHE コマンドを実行すると、即座にデータバッファの内容をディスクに保存します。"
		},
		"Focus object": {
			"Syntax": "**Focus object**  : Pointer",
			"Params": [
				[
					"戻り値",
					"Pointer",
					"<-",
					"フォーカスを持つオブジェクトへのポインタ"
				]
			],
			"Summary": "このコマンドは互換性の目的で保持されています。"
		},
		"FOLDER LIST": {
			"Syntax": "**FOLDER LIST** ( *pathname* ; *directories* )",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"ボリュームのパス名、ディレクトリ、またはフォルダ"
				],
				[
					"directories",
					"Text array",
					"<-",
					"ロケーションにあるディレクトリの名前"
				]
			],
			"Summary": "FOLDER LIST コマンド は、*pathname*に渡すパス名にあるフォルダの名前を要素とするテキストまたは文字列配列*directories*を生成します。"
		},
		"Font file": {
			"Syntax": "**Font file** ( *fontFamily* {; *fontStyle*} ) : any",
			"Params": [
				[
					"fontFamily",
					"Text",
					"->",
					"フォントファミリー名"
				],
				[
					"fontStyle",
					"Integer",
					"->",
					"フォントスタイル: 0=通常 (デフォルト)、1=太字、2=斜体字"
				],
				[
					"戻り値",
					"Null, Object",
					"<-",
					"フォントファイルオブジェクト"
				]
			],
			"Summary": "**Font file** コマンドは、*fontFamily* 引数で指定したフォントファミリーに対応するOS 内にあるフォントファイルの詳細を格納したオブジェクトを返します。"
		},
		"FONT LIST": {
			"Syntax": "**FONT LIST** ( *fonts* {; *listType* } )<br/>**FONT LIST** ( *fonts* {; *} )",
			"Params": [
				[
					"fonts",
					"Text array",
					"<-",
					"フォント名の配列"
				],
				[
					"listType &#124; *",
					"倍長整数, 演算子",
					"->",
					"取得したいフォント型のリスト、フォント名を取得するために*を指定(OS Xのみ)"
				]
			],
			"Summary": "**FONT LIST**コマンドは、テキスト配列の*fonts*引数を作成し、システム上で使用可能なスケーラブルなフォントの名前を格納します。"
		},
		"FONT STYLE LIST": {
			"Syntax": "**FONT STYLE LIST** ( *fontFamily* ; *fontStyleList* ; *fontNameList* )",
			"Params": [
				[
					"fontFamily",
					"Text",
					"->",
					"フォントファミリー名"
				],
				[
					"fontStyleList",
					"Text array",
					"<-",
					"フォントファミリーによってサポートされるフォントスタイルの一覧"
				],
				[
					"fontNameList",
					"Text array",
					"<-",
					"フォントファミリーによってサポートされるフォント名の完全な一覧"
				]
			],
			"Summary": "**FONT STYLE LIST**コマンドは*fontFamily*引数で定義されたフォントファミリーによってサポートされているフォントスタイルの一覧と、サポートされているフォント名の完全な一覧を返します。"
		},
		"FORM Convert to dynamic": {
			"Syntax": "**FORM Convert to dynamic** ( {*aTable* ;} *formName* ) : Object",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームテーブル"
				],
				[
					"formName",
					"Text",
					"->",
					"\"クラシック\"プロジェクトフォーム名またはテーブルフォーム名"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"formNameのフォームをダイナミックフォームに変換したもの"
				]
			],
			"Summary": "**FORM Convert to dynamic** コマンドは、*formName* 引数で指定したフォーム(クラシックフォーム)をダイナミックフォームへと変換し、それをオブジェクト型で返します。"
		},
		"FORM FIRST PAGE": {
			"Syntax": "**FORM FIRST PAGE**",
			"Params": [],
			"Summary": "FORM FIRST PAGE コマンドは、現在表示されているフォームページを先頭のフォームページに変更します。"
		},
		"FORM Get color scheme": {
			"Syntax": "**FORM Get color scheme**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"カレントフォームのカラースキーム: \"light\" または \"dark\""
				]
			],
			"Summary": "**FORM Get color scheme** コマンドは、現在表示されているフォームの実際のカラースキームの名前を返します。"
		},
		"FORM Get current page": {
			"Syntax": "**FORM Get current page** {( * )} : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"カレントサブフォームページ番号を返す"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"現在表示されているページ番号"
				]
			],
			"Summary": "**FORM Get current page**コマンドは、現在表示されているフォームページ、またはFORM LOAD コマンドによってロードされたカレントフォームの番号を返します。"
		},
		"FORM GET ENTRY ORDER": {
			"Syntax": "**FORM GET ENTRY ORDER** ( *objectNames* {; *pageNumber* } )<br/>**FORM GET ENTRY ORDER** ( *objectNames* {; *} )",
			"Params": [
				[
					"objectNames",
					"Text array",
					"<-",
					"入力順に並べられたオブジェクト名の配列"
				],
				[
					"pageNumber &#124; *",
					"倍長整数, 演算子",
					"->",
					"定義された入力順を取得するページの番号 (省略時はカレントページ)、または * でカレントページの実際の入力順"
				]
			],
			"Summary": "**FORM GET ENTRY ORDER** コマンドは フォーム上のオブジェクトの名前を、その入力順に並べて *objectNames* に返します。"
		},
		"FORM GET HORIZONTAL RESIZING": {
			"Syntax": "**FORM GET HORIZONTAL RESIZING** ( *resize* {; *minWidth* {; *maxWidth*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"<-",
					"True: フォームを水平方向にリサイズ可<br/>False: フォームを水平方向にリサイズ不可"
				],
				[
					"minWidth",
					"Integer",
					"<-",
					"最小フォーム幅 (ピクセル)"
				],
				[
					"maxWidth",
					"Integer",
					"<-",
					"最大フォーム幅 (ピクセル)"
				]
			],
			"Summary": "FORM GET HORIZONTAL RESIZING コマンドはカレントフォームの水平サイズ変更プロパティを*resize*、*minWidth*、そして*maxWidth*変数に返します。"
		},
		"FORM GET NAMES": {
			"Syntax": "**FORM GET NAMES** ( {*aTable* ;} *arrNames* {; *filter* {; *marker*}}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"テーブル参照"
				],
				[
					"arrNames",
					"Text array",
					"<-",
					"フォーム名の配列"
				],
				[
					"filter",
					"Text",
					"->",
					"名前のフィルター"
				],
				[
					"marker",
					"Real",
					"->",
					"返す最古のカウンター"
				],
				[
					"<-",
					"最新のカウンター"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**FORM GET NAMES**コマンドはアプリケーション中のフォーム名を*arrNames*配列に返します。"
		},
		"FORM GET OBJECTS": {
			"Syntax": "**FORM GET OBJECTS** ( *objectsArray* {; *variablesArray* {; *pagesArray*}} {; *formPageOption*} )<br/>**FORM GET OBJECTS** ( *objectsArray* {; *variablesArray* {; *pagesArray*}} {; *} )",
			"Params": [
				[
					"objectsArray",
					"Text array",
					"<-",
					"フォームオブジェクト名"
				],
				[
					"variablesArray",
					"Pointer array",
					"<-",
					"オブジェクトに関連付けられた 変数やフィールドへのポインタ"
				],
				[
					"pagesArray",
					"Array integer",
					"<-",
					"オブジェクトごとのページ番号"
				],
				[
					"formPageOption &#124; *",
					"倍長整数, 演算子",
					"->",
					"1=Form current page, 2=Form all pages, 4=Form inherited<br/>* 指定時(廃止予定) = Form current pageとForm inherited"
				]
			],
			"Summary": "FORM GET OBJECTS コマンドは、カレントフォーム に存在する全オブジェクトのリストを配列形式で返します。"
		},
		"FORM GET PROPERTIES": {
			"Syntax": "**FORM GET PROPERTIES** ( {*aTable* ;} *formName* ; *width* ; *height* {; *numPages* {; *fixedWidth* {; *fixedHeight* {; *title*}}}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームが属するテーブル、省略時はデフォルトテーブル"
				],
				[
					"formName",
					"Text",
					"->",
					"フォーム名"
				],
				[
					"width",
					"Integer",
					"<-",
					"フォームの幅 (ピクセル)"
				],
				[
					"height",
					"Integer",
					"<-",
					"フォームの高さ (ピクセル)"
				],
				[
					"numPages",
					"Integer",
					"<-",
					"フォームのページ数"
				],
				[
					"fixedWidth",
					"Boolean",
					"<-",
					"True = 幅固定, False = 幅可変"
				],
				[
					"fixedHeight",
					"Boolean",
					"<-",
					"True = 高さ固定, False = 高さ可変"
				],
				[
					"title",
					"Text",
					"<-",
					"フォームのウィンドウタイトル"
				]
			],
			"Summary": "FORM GET PROPERTIES コマンドは*formName*フォームのプロパティを返します。"
		},
		"FORM GET VERTICAL RESIZING": {
			"Syntax": "**FORM GET VERTICAL RESIZING** ( *resize* {; *minHeight* {; *maxHeight*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"<-",
					"True: フォームを縦方向にリサイズ可<br/>False: フォームを縦方向にリサイズ不可"
				],
				[
					"minHeight",
					"Integer",
					"<-",
					"最小フォーム高さ (ピクセル)"
				],
				[
					"maxHeight",
					"Integer",
					"<-",
					"最大フォーム高さ (ピクセル)"
				]
			],
			"Summary": "FORM GET VERTICAL RESIZING コマンドは カレントフォームの垂直サイズ変更プロパティを*resize*、*minHeight*、そして*maxHeight*変数に返します。"
		},
		"FORM GOTO PAGE": {
			"Syntax": "**FORM GOTO PAGE** ( *pageNumber* {; *} )",
			"Params": [
				[
					"pageNumber",
					"Integer",
					"->",
					"表示するフォームページ"
				],
				[
					"*",
					"演算子",
					"->",
					"カレントサブフォームのページを変更"
				]
			],
			"Summary": "**FORM GOTO PAGE**コマンドは、現在表示されているフォームページを*pageNumber*で指定したフォームページに変更します。"
		},
		"FORM LAST PAGE": {
			"Syntax": "**FORM LAST PAGE**",
			"Params": [],
			"Summary": "FORM LAST PAGE コマンドは、現在表示されているフォームページを最終のフォームページに変更します。"
		},
		"FORM NEXT PAGE": {
			"Syntax": "**FORM NEXT PAGE**",
			"Params": [],
			"Summary": "FORM NEXT PAGE コマンドは、現在表示されているフォームページから次のフォームページに移動します。"
		},
		"FORM PREVIOUS PAGE": {
			"Syntax": "**FORM PREVIOUS PAGE**",
			"Params": [],
			"Summary": "FORM PREVIOUS PAGE コマンドは、現在表示されているフォームページから前のフォームページに移動します。"
		},
		"FORM SCREENSHOT": {
			"Syntax": "**FORM SCREENSHOT** ( {{*aTable* ;} *formName* ;} *formPict* {; *pageNum*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームテーブル"
				],
				[
					"formName",
					"Text",
					"->",
					"フォーム名"
				],
				[
					"formPict",
					"Picture",
					"<-",
					"第一引数が省略された場合実行中のフォームのピクチャー。フォーム名がが渡された場合フォームエディター中のフォームのピクチャー"
				],
				[
					"pageNum",
					"Integer",
					"->",
					"フォームページ番号"
				]
			],
			"Summary": "FORM SCREENSHOT コマンドはフォームをピクチャーにして返します。"
		},
		"FORM SET ENTRY ORDER": {
			"Syntax": "**FORM SET ENTRY ORDER** ( *objectNames* {; *pageNumber*} )",
			"Params": [
				[
					"objectNames",
					"Text array",
					"->",
					"入力順に並べられたオブジェクト名の配列"
				],
				[
					"pageNumber",
					"Integer",
					"->",
					"入力順を指定するページの番号 (省略時はカレントページ)"
				]
			],
			"Summary": "**FORM SET ENTRY ORDER** コマンドは カレントプロセスのカレントフォームにおいて、*objectNames* に渡した配列に基づき入力順を動的に指定します。"
		},
		"FORM SET HORIZONTAL RESIZING": {
			"Syntax": "**FORM SET HORIZONTAL RESIZING** ( *resize* {; *minWidth* {; *maxWidth*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"->",
					"True: フォームを横方向にリサイズ可能 False: フォームを横方向にリサイズ不可"
				],
				[
					"minWidth",
					"Integer",
					"->",
					"最小幅 (ピクセル)"
				],
				[
					"maxWidth",
					"Integer",
					"->",
					"最大幅 (ピクセル)"
				]
			],
			"Summary": "FORM SET HORIZONTAL RESIZING コマンドを使用すると、プログラムからカレントフォームの水平リサイズプロパティを変更することができます。"
		},
		"FORM SET INPUT": {
			"Syntax": "**FORM SET INPUT** ( {*aTable* ;} *form* {; *userForm* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"入力フォームを設定するテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"form",
					"Text, Object",
					"->",
					"(プロジェクトまたはテーブル)フォーム名(文字列)、<br/>あるいはフォームを定義した.jsonファイルへのPOSIXパス(文字列)、<br/>あるいは開くフォームを定義したオブジェクト"
				],
				[
					"userForm",
					"Text",
					"->",
					"使用するユーザフォーム名"
				],
				[
					"*",
					"Operator",
					"->",
					"自動ウィンドウサイズ"
				]
			],
			"Summary": "**FORM SET INPUT** コマンドは、*aTable*のカレント入力フォームを*form*または*userForm*に設定します。"
		},
		"FORM SET OUTPUT": {
			"Syntax": "**FORM SET OUTPUT** ( {*aTable* ;} *form* {; *userForm*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"出力フォームを設定するテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"form",
					"Text, Object",
					"->",
					"(プロジェクトまたはテーブル)フォーム名(文字列)、<br/>あるいはフォームを定義した.jsonファイルへのPOSIXパス(文字列)、<br/>あるいは開くフォームを定義したオブジェクト"
				],
				[
					"userForm",
					"Text",
					"->",
					"使用するユーザフォーム名"
				]
			],
			"Summary": "**FORM SET OUTPUT** コマンドは、*form*または*userForm*を*aTable*のカレント出力フォームとして設定します。"
		},
		"FORM SET SIZE": {
			"Syntax": "**FORM SET SIZE** ( {*object* ;} *horizontal* ; *vertical* {; *} )",
			"Params": [
				[
					"object",
					"Text",
					"->",
					"フォームの境界を指定するオブジェクト名"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"* が渡されていれば: 水平マージン (ピクセル) * が省略されていれば: 幅 (ピクセル)"
				],
				[
					"vertical",
					"Integer",
					"->",
					"* が渡されていれば: 垂直マージン (ピクセル) * が省略されていれば: 高さ (ピクセル)"
				],
				[
					"*",
					"演算子",
					"->",
					"渡されれば: horizontalとvertical引数で 指定されたマージンを加える  (自動サイズまたはobjectが指定されればそれを基ととしたサイズ) 省略すれば: horizontalとverticalをフォームの幅と高さにする"
				]
			],
			"Summary": "**FORM SET SIZE** コマンドを使用すると、プログラムからカレントフォームのサイズを変更することができます。"
		},
		"FORM SET VERTICAL RESIZING": {
			"Syntax": "**FORM SET VERTICAL RESIZING** ( *resize* {; *minHeight* {; *maxHeight*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"->",
					"True: フォームを縦方向にリサイズ可 False: フォームを縦方向にリサイズ不可"
				],
				[
					"minHeight",
					"Integer",
					"->",
					"最小高さ (ピクセル)"
				],
				[
					"maxHeight",
					"Integer",
					"->",
					"最大高さ (ピクセル)"
				]
			],
			"Summary": "FORM SET VERTICAL RESIZINGコマンドを使用すると、プログラムからカレントフォームの垂直リサイズプロパティを変更することができます。"
		},
		"FORM UNLOAD": {
			"Syntax": "**FORM UNLOAD**",
			"Params": [],
			"Summary": "**FORM UNLOAD**コマンドは、FORM LOADコマンドで指定したカレントのフォームをメモリーから解放します。"
		},
		"Frontmost process": {
			"Syntax": "**Frontmost process** {( * )} : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"フローティングウインドウ以外の最前面のプロセス番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"最前面にあるウィンドウのプロセス番号"
				]
			],
			"Summary": "Frontmost processは、ウィンドウが最前面にあるプロセスの番号を返します。"
		},
		"Frontmost window": {
			"Syntax": "**Frontmost window** {( * )} : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, フローティングウィンドウを考慮する 省略時, フローティングウィンドウを無視"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ウィンドウ参照番号"
				]
			],
			"Summary": "Frontmost window コマンドは最前面のウィンドウの参照番号を返します。"
		},
		"GENERATE CERTIFICATE REQUEST": {
			"Syntax": "**GENERATE CERTIFICATE REQUEST** ( *privKey* ; *certifRequest* ; *codeArray* ; *nameArray* )",
			"Params": [
				[
					"privKey",
					"Blob",
					"->",
					"秘密鍵BLOB"
				],
				[
					"certifRequest",
					"Blob",
					"<-",
					"CSRを受け取るBLOB"
				],
				[
					"codeArray",
					"Integer array",
					"->",
					"情報コードリスト"
				],
				[
					"nameArray",
					"Text array",
					"->",
					"名前リスト"
				]
			],
			"Summary": "**GENERATE CERTIFICATE REQUEST** コマンドは、Verisign(R)等の認証局で使用されているPKCSフォーマットで証明書リクエストを生成します。"
		},
		"Generate digest": {
			"Syntax": "**Generate digest** ( *param* ; *algorithm* {; *} ) : Text",
			"Params": [
				[
					"param",
					"Blob, Text",
					"->",
					"Digestキーを取得するBLOBやテキスト"
				],
				[
					"algorithm",
					"Integer",
					"->",
					"キーの生成に使用するアルゴリズム0= MD5、1 = SHA1、 2=4Dダイジェスト"
				],
				[
					"*",
					"演算子",
					"->",
					"ダイジェストをBase64URL でエンコード"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"Digestキーの値"
				]
			],
			"Summary": "**Generate digest**コマンドはBLOBやテキストのDigestキーを指定したアルゴリズムで生成して返します。"
		},
		"GENERATE ENCRYPTION KEYPAIR": {
			"Syntax": "**GENERATE ENCRYPTION KEYPAIR** ( *privKey* ; *pubKey* {; *length*} )",
			"Params": [
				[
					"privKey",
					"Blob",
					"<-",
					"秘密鍵を受け取るBLOB"
				],
				[
					"pubKey",
					"Blob",
					"<-",
					"公開鍵を受け取るBLOB"
				],
				[
					"length",
					"Integer",
					"->",
					"キー長 (ビット) [512...2048] デフォルト値 = 512"
				]
			],
			"Summary": "GENERATE ENCRYPTION KEYPAIR コマンドは新しく1対のRSA鍵を生成します。"
		},
		"Generate password hash": {
			"Syntax": "**Generate password hash** ( *password* {; *options*} ) : Text",
			"Params": [
				[
					"password",
					"Text",
					"->",
					"ユーザーのパスワード。最初の72文字のみ使用。"
				],
				[
					"options",
					"Object",
					"->",
					"オプションを格納したオブジェクト"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ハッシュされたパスワードを返します。"
				]
			],
			"Summary": "**Generate password hash** ファンクションは*password* 引数のパスワードから暗号化ハッシュアルゴリズムによって生成された、安全なパスワードハッシュを返します。"
		},
		"Generate UUID": {
			"Syntax": "**Generate UUID** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"新しい UUIDテキスト (非整形32 文字)"
				]
			],
			"Summary": "Generate UUID は32文字のUUID識別子を整形されていない形式で返します。"
		},
		"Get 4D file": {
			"Syntax": "**Get 4D file** ( *file* {; *} ) : Text",
			"Params": [
				[
					"file",
					"Integer",
					"->",
					"ファイルタイプ"
				],
				[
					"*",
					"演算子",
					"->",
					"ホストデータベースのファイルを返す"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"指定したファイルのパス名"
				]
			],
			"Summary": "**Get 4D file**コマンドは、*file* パラメーターで指定された4D環境ファイルへのパス名を返します。"
		},
		"Get 4D folder": {
			"Syntax": "**Get 4D folder** {( *folder* {; *options*} {; *})} : Text",
			"Params": [
				[
					"folder",
					"Integer",
					"->",
					"フォルダータイプ (省略時 = Active 4D folder)"
				],
				[
					"options",
					"Object",
					"->",
					"4D Client database folder path configuration"
				],
				[
					"*",
					"演算子",
					"->",
					"ホストデータベースのフォルダーを返す"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"指定したフォルダーのパス名"
				]
			],
			"Summary": "**Get 4D folder**コマンドは、カレントアプリケーションのアクティブな4Dフォルダー、または*folder* 引数と*options* 引数で指定された4D環境フォルダーへのパス名を返します。"
		},
		"Get adjusted blobs cache priority": {
			"Syntax": "**Get adjusted blobs cache priority** ( *aTable* ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"\"blob\"優先度値を取得したいテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"\"blob\"フィールドのカレントの優先度値"
				]
			],
			"Summary": "**Get adjusted blobs cache priority** コマンドは*aTable* 引数で指定されたテーブルの\"blob\"データにキャッシュマネージャーによって適用されたカレントの調整済みキャッシュ優先度値を返します。"
		},
		"Get adjusted index cache priority": {
			"Syntax": "**Get adjusted index cache priority** ( *aField* ) : Integer",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"インデックスの優先度を取得したいフィールド"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"インデックスのカレントの優先度値"
				]
			],
			"Summary": "**Get adjusted index cache priority** コマンドは、*aField* 引数で指定されたフィールドのインデックスに対しキャッシュマネージャーによって適用されたキャッシュ優先度値を返します。"
		},
		"Get adjusted table cache priority": {
			"Syntax": "**Get adjusted table cache priority** ( *aTable* ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"スカラー優先度値を取得するテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"スカラーフィールドのカレントの優先度値"
				]
			],
			"Summary": "**Get adjusted table cache priority**コマンドは *aTable*引数で指定したテーブルのスカラーデータのキャッシュに、キャッシュマネージャーによって適用された、調整されたキャッシュ優先度値を返します。"
		},
		"GET ALLOWED METHODS": {
			"Syntax": "**GET ALLOWED METHODS** ( *methodsArray* )",
			"Params": [
				[
					"methodsArray",
					"Text array",
					"<-",
					"メソッド名配列"
				]
			],
			"Summary": "GET ALLOWED METHODS コマンドは、フォーミュラの作成に使用できるメソッド名を引数*methodsArray*に返します。"
		},
		"Get Application color scheme": {
			"Syntax": "**Get Application color scheme** {( * )} : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"ホストデータベースのカラースキームを返す"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"カレントアプリケーションのカラースキーム"
				]
			],
			"Summary": "**Get Application color scheme** コマンドは、アプリケーションレベルで使用されている実際のカラースキームの名前を返します。"
		},
		"Get assert enabled": {
			"Syntax": "**Get assert enabled** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = アサーションは有効<br/>False = アサーションは無効"
				]
			],
			"Summary": "Get assert enabled コマンドは カレントプロセスでアサーションが有効か無効かによってTrueまたはFalseを返します。"
		},
		"GET AUTOMATIC RELATIONS": {
			"Syntax": "**GET AUTOMATIC RELATIONS** ( *one* ; *many* )",
			"Params": [
				[
					"one",
					"Boolean",
					"<-",
					"すべてのn対1リレートの状態"
				],
				[
					"many",
					"Boolean",
					"<-",
					"すべての1対nリレートの状態"
				]
			],
			"Summary": "GET AUTOMATIC RELATIONS コマンドにより、データベースのすべてのマニュアルn対1リレートおよび1対nリレートに関する自動/マニュアルのステータスがカレントプロセスにおいて変更されたかどうかを知ることができます。"
		},
		"Get cache size": {
			"Syntax": "**Get cache size**  : Real",
			"Params": [
				[
					"戻り値",
					"Real",
					"<-",
					"データベースキャッシュ(バイト単位)"
				]
			],
			"Summary": "**Get cache size**コマンドは、カレントデータベースのキャッシュサイズをバイト単位で返します。"
		},
		"Get current printer": {
			"Syntax": "**Get current printer**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"カレントプリンター名"
				]
			],
			"Summary": "**Get current printer** コマンドは、4Dアプリケーションに定義されたカレントプリンター名を返します。"
		},
		"Get database localization": {
			"Syntax": "**Get database localization** {( {*languageType*}{;}{*} )} : Text",
			"Params": [
				[
					"languageType",
					"Integer",
					"->",
					"ランゲージの種類"
				],
				[
					"*",
					"演算子",
					"->",
					"ホストデータベースについての情報を返す"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"データベースのカレントランゲージ"
				]
			],
			"Summary": "**Get database localization**コマンドは、データベースのデフォルトランゲージ、または*languageType*で指定されたデータベースの言語を、RFC 3066で定義された標準で返します。"
		},
		"Get database parameter": {
			"Syntax": "**Get database parameter** ( {*aTable* ;} *selector* {; *stringValue*} ) : Real",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"パラメタを取得するテーブル、または 引数が省略された場合デフォルトテーブル"
				],
				[
					"selector",
					"Integer",
					"->",
					"データベースパラメタコード"
				],
				[
					"stringValue",
					"Text",
					"<-",
					"パラメタの文字列値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"パラメタの現在の値"
				]
			],
			"Summary": "**Get database parameter**コマンドを使用して、現在の4Dデータベースパラメーターの値を知ることができます。"
		},
		"Get default user": {
			"Syntax": "**Get default user**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"ユニークなユーザーID番号"
				]
			],
			"Summary": "Get default user コマンドは、データベース設定において \"デフォルトユーザー\" として定義されたユーザーのユニークなユーザーIDを返します。"
		},
		"GET DOCUMENT ICON": {
			"Syntax": "**GET DOCUMENT ICON** ( *docPath* ; *icon* {; *size*} )",
			"Params": [
				[
					"docPath",
					"Text",
					"->",
					"アイコンを取得するドキュメントのパスまたは名前、 または空の文字列の場合標準のファイルを開くダイアログ"
				],
				[
					"icon",
					"Picture, Picture",
					"<-",
					"ドキュメントアイコン"
				],
				[
					"size",
					"Integer",
					"->",
					"返されたピクチャのサイズ(ピクセルで)"
				]
			],
			"Summary": "GET DOCUMENT ICONコマンドは、*filePath*に渡した名前または完全なパス名を持つドキュメントのアイコンを4Dのピクチャ変数またはフィールド*icon*に返します。"
		},
		"Get document position": {
			"Syntax": "**Get document position** ( *DocRef* ) : Real",
			"Params": [
				[
					"Time",
					"Time",
					"->",
					"ドキュメント参照番号"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"ドキュメント開始位置からの ファイル位置(バイト単位)"
				]
			],
			"Summary": "このコマンドは*DocRef*に渡したドキュメント参照番号を持つ、現在開いているドキュメントだけに機能します。"
		},
		"GET DOCUMENT PROPERTIES": {
			"Syntax": "**GET DOCUMENT PROPERTIES** ( *document* ; *locked* ; *invisible* ; created on ; created at ; modified on ; modified at )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメントの名前"
				],
				[
					"locked",
					"Boolean",
					"<-",
					"Trueの場合はロック、またはFalseの場合はアンロック"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"Trueの場合は非表示、またはFalseは表示"
				],
				[
					"created on",
					"日付",
					"<-",
					"作成日"
				],
				[
					"created at",
					"時間",
					"<-",
					"作成時間"
				],
				[
					"modified on",
					"日付",
					"<-",
					"更新日"
				],
				[
					"modified at",
					"時間",
					"<-",
					"更新時間"
				]
			],
			"Summary": "GET DOCUMENT PROPERTIESコマンドは、引数*document*に渡した名前またはパス名を持つドキュメントに関する情報を返します。"
		},
		"Get document size": {
			"Syntax": "**Get document size** ( *document* {; *} ) : Real",
			"Params": [
				[
					"document",
					"Text, Time",
					"->",
					"ドキュメント参照番号 または、ドキュメントの名前"
				],
				[
					"*",
					"演算子",
					"->",
					"Mac OSのみ: 省略した場合、データフォークのサイズ 指定した場合、リソースフォークのサイズ"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"ドキュメントのサイズ(バイト単位)"
				]
			],
			"Summary": "Get document sizeコマンドは、ドキュメントのサイズをバイト単位で表示して返します。"
		},
		"Get edited text": {
			"Syntax": "**Get edited text**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"編集中のテキスト"
				]
			],
			"Summary": "**Get edited text**コマンドは、主にOn After Edit フォームイベントで入力中のテキストを取得するために使用します。"
		},
		"Get external data path": {
			"Syntax": "**Get external data path** ( *aField* ) : Text",
			"Params": [
				[
					"aField",
					"Text, Blob, Picture",
					"->",
					"外部ストレージの場所を取得するフィールド"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"外部ストレージファイルのフルパス名"
				]
			],
			"Summary": "**Get external data path**コマンドはカレントレコードの、*aField*引数に渡したフィールドデータの外部ストレージファイルのフルパス名を返します。"
		},
		"GET FIELD ENTRY PROPERTIES": {
			"Syntax": "**GET FIELD ENTRY PROPERTIES** ( *fieldPtr* ; *list* ; *mandatory* ; *nonEnterable* ; *nonModifiable* )<br/>**GET FIELD ENTRY PROPERTIES** ( *tableNum* ; *fieldNum* ; *list* ; *mandatory* ; *nonEnterable* ; *nonModifiable* )",
			"Params": [
				[
					"fieldPtr&#124;tableNum",
					"ポインター, 倍長整数",
					"->",
					"フィールドポインタ、またはテーブル番号"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"第1引数がテーブル番号の場合、 フィールド番号"
				],
				[
					"list",
					"Text",
					"<-",
					"関連づけられた選択リストの名前、または空の文字列"
				],
				[
					"mandatory",
					"Boolean",
					"<-",
					"True = 必須入力、 False = 任意"
				],
				[
					"nonEnterable",
					"Boolean",
					"<-",
					"True = 表示のみ、 False = 入力可"
				],
				[
					"nonModifiable",
					"Boolean",
					"<-",
					"True = 修正不可、False = 修正可"
				]
			],
			"Summary": "GET FIELD ENTRY PROPERTIESコマンドは、*tableNum*および*fieldNum*、または*fieldPtr*で指定したフィールドのデータ入力プロパティを返します。"
		},
		"GET FIELD PROPERTIES": {
			"Syntax": "**GET FIELD PROPERTIES** ( *fieldPtr* ; *fieldType* {; *fieldLength* {; *indexed* {; *unique* {; *invisible*}}}} )<br/>**GET FIELD PROPERTIES** ( *tableNum* ; *fieldNum* ; *fieldType* {; *fieldLength* {; *indexed* {; *unique* {; *invisible*}}}} )",
			"Params": [
				[
					"fieldPtr &#124; tableNum",
					"ポインター, 倍長整数",
					"->",
					"テーブル番号、またはフィールドポインタ"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"テーブル番号を渡した場合は、フィールド番号"
				],
				[
					"fieldType",
					"Integer",
					"<-",
					"フィールドのタイプ"
				],
				[
					"fieldLength",
					"Integer",
					"<-",
					"文字フィールドの場合、長さ"
				],
				[
					"indexed",
					"Boolean",
					"<-",
					"True = インデックス付き、False = インデックスなし"
				],
				[
					"unique",
					"Boolean",
					"<-",
					"True = 重複不可、 False = 重複あり"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"True = 非表示、 False = 表示"
				]
			],
			"Summary": "GET FIELD PROPERTIESコマンドは、*tableNum*と*fieldNum*または*fieldPtr*で指定したフィールドの情報を返します。"
		},
		"GET FIELD RELATION": {
			"Syntax": "**GET FIELD RELATION** ( *manyField* ; *one* ; *many* {; *} )",
			"Params": [
				[
					"manyField",
					"Field",
					"->",
					"リレート開始フィールド"
				],
				[
					"one",
					"Integer",
					"<-",
					"n対1リレートの状態"
				],
				[
					"many",
					"Integer",
					"<-",
					"1対nリレートの状態"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: oneとmanyにはリレーション の現在の状態が返る (値は2または3のみ) 省略時 (デフォルト): プログラムでリレーションが 変更されていなければ、oneとmanyに1が返される"
				]
			],
			"Summary": "GET FIELD RELATIONを使用すると、カレントプロセスの、*manyField*から開始するリレートの自動/マニュアルのステータスを調べることができます。"
		},
		"GET FIELD TITLES": {
			"Syntax": "**GET FIELD TITLES** ( *aTable* ; *fieldTitles* ; *fieldNums* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フィールド名を取得したいテーブル"
				],
				[
					"fieldTitles",
					"Text array",
					"<-",
					"カレントフィールドの名前"
				],
				[
					"fieldNums",
					"Integer array",
					"<-",
					"フィールド番号"
				]
			],
			"Summary": "GET FIELD TITLES コマンドを使用して、目的の *table* に対してデータベースフィールドの名前と番号を配列 *fieldTitles* と *fieldNums* に受け取ります。"
		},
		"Get file from pasteboard": {
			"Syntax": "**Get file from pasteboard** ( *xIndex* ) : Text",
			"Params": [
				[
					"xIndex",
					"Integer",
					"->",
					"ドラッグアクションに含まれるx番目のファイル"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ペーストボードから取り出した、ファイルのパス名"
				]
			],
			"Summary": "Get file from pasteboard コマンドは、ドラッグ＆ドロップ処理に含まれるファイルの完全パス名を返します。"
		},
		"Get group access": {
			"Syntax": "**Get group access** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"ユーザーが所属するグループ名のコレクション"
				]
			],
			"Summary": "**Get group access** コマンドはカレントセッションにおける4D ユーザーアカウントの所属情報を返します。"
		},
		"GET GROUP LIST": {
			"Syntax": "**GET GROUP LIST** ( *groupNames* ; *groupNumbers* )",
			"Params": [
				[
					"groupNames",
					"Text array",
					"<-",
					"パスワードエディター表示されるグループ名"
				],
				[
					"groupNumbers",
					"Integer array",
					"<-",
					"対応するユニークなグループID番号"
				]
			],
			"Summary": "GET GROUP LIST コマンドは、パスワードエディターに表示されるグループ名とユニークなID番号を配列 *groupNames* と *groupNumbers* に返します。"
		},
		"GET GROUP PROPERTIES": {
			"Syntax": "**GET GROUP PROPERTIES** ( *groupID* ; *name* ; *owner* {; *members*} )",
			"Params": [
				[
					"groupID",
					"Integer",
					"->",
					"ユニークなグループID番号"
				],
				[
					"name",
					"Text",
					"<-",
					"グループの名前"
				],
				[
					"owner",
					"Integer",
					"<-",
					"グループオーナーのユーザーID番号 (バイナリデータベースのみ)"
				],
				[
					"members",
					"Integer array",
					"<-",
					"グループメンバー"
				]
			],
			"Summary": "GET GROUP PROPERTIES コマンドは、引数 *groupID* に渡したユニークなグループID番号を持つグループのプロパティを返します。"
		},
		"GET HIGHLIGHT": {
			"Syntax": "**GET HIGHLIGHT** ( {* ;} *object* ; *startSel* ; *endSel* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字列)、省略時: objectはフィールドまたは変数"
				],
				[
					"object",
					"Field, Variable, any",
					"->",
					"オブジェクト名 (*指定時)、またはフィールドや変数 (*省略時)"
				],
				[
					"startSel",
					"Integer",
					"<-",
					"反転表示された先頭位置"
				],
				[
					"endSel",
					"Integer",
					"<-",
					"反転表示された最終位置"
				]
			],
			"Summary": "**GET HIGHLIGHT**コマンドは、*object*中で現在反転表示されているテキストを検出するために使用します。"
		},
		"GET HIGHLIGHTED RECORDS": {
			"Syntax": "**GET HIGHLIGHTED RECORDS** ( {*aTable* ;} *setName* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"ハイライトされたレコードを読みだすテーブル 省略した場合、カレントフォームのテーブル"
				],
				[
					"setName",
					"Text",
					"->",
					"ハイライトしたレコードを格納するセット"
				]
			],
			"Summary": "GET HIGHLIGHTED RECORDS コマンドは、*aTable*中で (例: リストフォームでユーザにより選択されて) ハイライトされたレコードを*setName*で指定したセットに格納します。"
		},
		"Get indexed string": {
			"Syntax": "**Get indexed string** ( *resID* ; *strID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号、または 'group'要素の'id'属性 (XLIFF)"
				],
				[
					"strID",
					"Integer",
					"->",
					"ストリング番号、または 'trans-unit'要素の'id'属性 (XLIFF)"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時: すべてのXLIFFファイル、または 開かれているリソースファイル"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"インデックス付きストリングの値"
				]
			],
			"Summary": "ストリングリスト (“STR#”) リソースに格納された、IDが*resID*の文字列、または"
		},
		"Get list item font": {
			"Syntax": "**Get list item font** ( {* ;} *list* ; *itemRef* ) : Text<br/>**Get list item font** ( * ; *list* ; * ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時) または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号 または 0 の場合最後に追加された項目 または *の場合リストのカレント項目"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"フォント名"
				]
			],
			"Summary": "Get list item font コマンドは、リスト参照またはオブジェクト名で指定した*list*リストの、*itemRef* 引数で指定した項目のフォント名を返します。"
		},
		"GET LIST ITEM ICON": {
			"Syntax": "**GET LIST ITEM ICON** ( {* ;} *list* ; *itemRef* ; *icon* )<br/>**GET LIST ITEM ICON** ( * ; *list* ; * ; *icon*",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時) または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"演算子, 倍長整数",
					"->",
					"項目参照番号 または 0: リストに最後に追加された項目 または *: リストのカレントの項目"
				],
				[
					"icon",
					"Picture",
					"<-",
					"項目に関連付けられたアイコン"
				]
			],
			"Summary": "GET LIST ITEM ICON コマンドは、*list*に参照番号またはオブジェクト名を渡したリスト内の、*itemRef*項目参照の項目に割り当てられたアイコンを*icon*に返します。"
		},
		"GET LIST ITEM PARAMETER ARRAYS": {
			"Syntax": "**GET LIST ITEM PARAMETER ARRAYS** ( {* ;} *list* ; *itemRef* ; *arrSelection* {; *arrValues*} )<br/>**GET LIST ITEM PARAMETER ARRAYS** ( * ; *list* ; * ; *arrSelection* {; *arrValues*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時listはオブジェクト名 (文字列)省略時listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リストタイプのオブジェクト名 (* 指定時)またはリスト参照番号 (* 省略時)"
				],
				[
					"itemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号、または0 = リストに最後に追加された項目、または* = カレントリスト項目"
				],
				[
					"arrSelection",
					"Text array",
					"<-",
					"パラメーター名配列"
				],
				[
					"arrValues",
					"Text array",
					"<-",
					"パラメーター値配列"
				]
			],
			"Summary": "**GET LIST ITEM PARAMETER ARRAYS**コマンドは*list* 引数で指定した参照またはオブジェクト名を持つ階層リスト中で、*itemRef* で指定した項目に割り当てられたパラメーター (およびその値) を一回の呼び出しで取り出すことができます。"
		},
		"GET LIST ITEM PARAMETER": {
			"Syntax": "**GET LIST ITEM PARAMETER** ( {* ;} *list* ; *itemRef* ; *selector* ; *value* )<br/>**GET LIST ITEM PARAMETER** ( * ; *list* ; * ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時) または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号 または 0: リストに最後に追加された項目 または *: カレントのリスト項目"
				],
				[
					"selector",
					"Text",
					"->",
					"パラメタ定数"
				],
				[
					"value",
					"Text, Boolean, Real",
					"<-",
					"パラメタの現在値"
				]
			],
			"Summary": "**GET LIST ITEM PARAMETER** コマンドは、*list* 引数にリスト参照やオブジェクト名で指定したリストの、*itemRef* 項目の、*selector* パラメタに対応する現在値を取得するために使用します。"
		},
		"GET LIST ITEM PROPERTIES": {
			"Syntax": "**GET LIST ITEM PROPERTIES** ( {* ;} *list* ; *itemRef* ; *enterable* {; *styles* {; *icon* {; *color*}}} )<br/>**GET LIST ITEM PROPERTIES** ( * ; *list* ; * ; *enterable* {; *styles* {; *icon* {; *color*}}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"演算子, 倍長整数",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: カレントのリスト項目"
				],
				[
					"enterable",
					"Boolean",
					"<-",
					"TRUE = 入力可, FALSE = 入力不可"
				],
				[
					"styles",
					"Integer",
					"<-",
					"項目のフォントスタイル"
				],
				[
					"icon",
					"Text, Integer",
					"<-",
					"ピクチャー名または番号"
				],
				[
					"color",
					"Integer",
					"<-",
					"RGBカラー値"
				]
			],
			"Summary": "**GET LIST ITEM PROPERTIES** コマンドは、引数*list*に渡されたリスト参照番号またはオブジェクト名のリスト内で、引数*itemRef*によって指定された項目のプロパティを返します。"
		},
		"GET LIST ITEM": {
			"Syntax": "**GET LIST ITEM** ( {* ;} *list* ; *itemPos* ; *itemRef* ; *itemText* {; *sublist* ; *expanded*} )<br/>**GET LIST ITEM** ( {* ;} *list* ; * ; *itemRef* ; *itemText* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemPos &#124; *",
					"演算子, 倍長整数",
					"->",
					"展開/折りたたまれたリスト中の項目位置 * の場合、リスト中のカレント項目"
				],
				[
					"itemRef",
					"Integer",
					"<-",
					"項目参照番号"
				],
				[
					"itemText",
					"Text",
					"<-",
					"リスト項目テキスト"
				],
				[
					"sublist",
					"Integer",
					"<-",
					"サブリストリスト参照番号 (サブリストがある場合)"
				],
				[
					"expanded",
					"Boolean",
					"<-",
					"サブリストが添付されている場合: TRUE = サブリストは現在展開されている FALSE = サブリストは折りたたまれている"
				]
			],
			"Summary": "GET LIST ITEM コマンドは、リスト参照番号またはオブジェクト名が*list*であるリスト中、*itemPos*で指定した項目に関する情報を返します。"
		},
		"GET LIST PROPERTIES": {
			"Syntax": "**GET LIST PROPERTIES** ( *list* ; *appearance* {; *icon* {; *lineHeight* {; *doubleClick* {; *multiSelections* {; *editable*}}}}} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"appearance",
					"Integer",
					"<-",
					"リストの描画スタイル 1 = Macスタイル 2 = Windowsスタイル"
				],
				[
					"icon",
					"Integer",
					"<-",
					"*** 廃止予定、常に0を返します ***"
				],
				[
					"lineHeight",
					"Integer",
					"<-",
					"行の最小高さ (ピクセル単位)"
				],
				[
					"doubleClick",
					"Integer",
					"<-",
					"ダブルクリックでサブリストを展開/折り畳み 0 = Yes, 1= No"
				],
				[
					"multiSelections",
					"Integer",
					"<-",
					"複数行選択: 0 = No, 1 = Yes"
				],
				[
					"editable",
					"Integer",
					"<-",
					"ユーザによる更新可: 0 = No, 1 = Yes"
				]
			],
			"Summary": "**GET LIST PROPERTIES** コマンドは、*list*で指定された参照番号を持つ階層リストについての情報を返します。"
		},
		"GET MACRO PARAMETER": {
			"Syntax": "**GET MACRO PARAMETER** ( *selector* ; *textParam* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"使用するセレクション"
				],
				[
					"textParam",
					"Text",
					"<-",
					"返されたテキスト"
				]
			],
			"Summary": "GET MACRO PARAMETERコマンドは、呼び出されたメソッドテキストのすべてまたは一部を引数*textParam*に返します。"
		},
		"Get menu bar reference": {
			"Syntax": "**Get menu bar reference** {( *process* )} : Text",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メニューバーID"
				]
			],
			"Summary": "**Get menu bar reference** コマンドはカレントのメニューバーあるいは指定されたプロセスのメニューバーのIDを返します。"
		},
		"GET MENU ITEM ICON": {
			"Syntax": "**GET MENU ITEM ICON** ( *menu* ; *menuItem* ; *iconRef* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"iconRef",
					"Text, Integer",
					"<-",
					"メニュー項目に関連付けられたアイコンの ピクチャー名または番号"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "GET MENU ITEM ICON コマンドは*iconRef*変数に、*menu* と *menuItem*引数で指定されたメニュー項目に関連付けられたアイコンの参照を返します。"
		},
		"Get menu item key": {
			"Syntax": "**Get menu item key** ( *menu* ; *menuItem* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"メニュー項目に関連付ける 標準ショートカットキーの文字コード"
				]
			],
			"Summary": "Get menu item key コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目の、Ctrl (Windows) または Command (Macintosh) ショートカットコードを返します。"
		},
		"Get menu item mark": {
			"Syntax": "**Get menu item mark** ( *menu* ; *menuItem* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"カレントメニュー項目のマーク"
				]
			],
			"Summary": "Get menu item mark コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目の、チェックマークを返します。"
		},
		"Get menu item method": {
			"Syntax": "**Get menu item method** ( *menu* ; *menuItem* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メソッド名"
				]
			],
			"Summary": "Get menu item method コマンドは、*menu*と*menuItem*引数で指定されたメニュー項目に関連付けられた4Dプロジェクトメソッド名を返します。"
		},
		"Get menu item modifiers": {
			"Syntax": "**Get menu item modifiers** ( *menu* ; *menuItem* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"メニュー項目に割り当てられたモディファイアキー"
				]
			],
			"Summary": "Get menu item modifiers コマンドは、*menu*と*menuItem*引数で指定したメニュー項目の、標準ショートカットに割り当てられた追加のモディファイアキーを返します。"
		},
		"Get menu item parameter": {
			"Syntax": "**Get menu item parameter** ( *menu* ; *menuItem* ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メニュー項目のカスタムパラメタ"
				]
			],
			"Summary": "Get menu item parameter コマンドは、*menu*と*menuItem*引数で指定されるメニュー項目に割り当てられたカスタム文字列を返します。"
		},
		"GET MENU ITEM PROPERTY": {
			"Syntax": "**GET MENU ITEM PROPERTY** ( *menu* ; *menuItem* ; *property* ; *value* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"property",
					"Text",
					"->",
					"プロパティタイプ"
				],
				[
					"value",
					"any",
					"<-",
					"プロパティ値"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "**GET MENU ITEM PROPERTY** コマンドは、*menu*と*menuItem*引数で指定したメニュー項目の、現在のプロパティ値を返します。"
		},
		"Get menu item style": {
			"Syntax": "**Get menu item style** ( *menu* ; *menuItem* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"現在のメニュー項目スタイル"
				]
			],
			"Summary": "Get menu item style コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目のフォントスタイルを返します。"
		},
		"Get menu item": {
			"Syntax": "**Get menu item** ( *menu* ; *menuItem* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メニュー項目のテキスト"
				]
			],
			"Summary": "Get menu item コマンドは、引数*menu*と*menuItem*に渡されたメニューおよびメニュー項目番号を持つメニュー項目のテキストを返します。"
		},
		"GET MENU ITEMS": {
			"Syntax": "**GET MENU ITEMS** ( *menu* ; *menuTitlesArray* ; *menuRefsArray* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuTitlesArray",
					"Text array",
					"<-",
					"メニュータイトル配列"
				],
				[
					"menuRefsArray",
					"Text array",
					"<-",
					"メニュー参照配列"
				]
			],
			"Summary": "GET MENU ITEMS コマンドは、*menu*引数で指定したメニューまたはメニューバーのタイトルとIDを*menuTitlesArray* と *menuRefsArray* 配列に返します。"
		},
		"Get menu title": {
			"Syntax": "**Get menu title** ( *menu* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メニューのタイトル"
				]
			],
			"Summary": "Get menu title コマンドは、*menu*に渡されたメニュー番号または参照を持つメニューのタイトルを返します。"
		},
		"GET MISSING TABLE NAMES": {
			"Syntax": "**GET MISSING TABLE NAMES** ( *missingTables* )",
			"Params": [
				[
					"missingTables",
					"Text array",
					"<-",
					"データベース中で失われたテーブルの名前"
				]
			],
			"Summary": "GET MISSING TABLE NAMES コマンドは カレントデータベース中ですべての失われたテーブルの名前を*missingTables*配列に返します。"
		},
		"GET PASTEBOARD DATA TYPE": {
			"Syntax": "**GET PASTEBOARD DATA TYPE** ( *4Dsignatures* ; *nativeTypes* {; *formatNames*} )",
			"Params": [
				[
					"4Dsignatures",
					"Text array",
					"<-",
					"データタイプの4D シグネチャ"
				],
				[
					"nativeTypes",
					"Text array",
					"<-",
					"ネイティブデータタイプ"
				],
				[
					"formatNames",
					"Text array",
					"<-",
					"フォーマット名"
				]
			],
			"Summary": "GET PASTEBOARD DATA TYPE コマンドは、ペーストボードに含まれるデータタイプリストを取得するために使用します。"
		},
		"GET PASTEBOARD DATA": {
			"Syntax": "**GET PASTEBOARD DATA** ( *dataType* ; *data* )",
			"Params": [
				[
					"dataType",
					"Text",
					"->",
					"ペーストボードから取り出すデータのタイプ"
				],
				[
					"data",
					"Blob",
					"<-",
					"ペーストボードから取り出されたデータ"
				]
			],
			"Summary": "GET PASTEBOARD DATA コマンドはペーストボード中*dataType*で指定したタイプのデータを、BLOB フィールドまたは変数 *data* に返します。"
		},
		"Get picture file name": {
			"Syntax": "**Get picture file name** ( *picture* ) : Text",
			"Params": [
				[
					"picture",
					"Picture, Picture",
					"->",
					"デフォルト名を取得するピクチャー"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ピクチャーファイルのデフォルト名"
				]
			],
			"Summary": "**Get picture file name**コマンドは引数に渡されたピクチャーのカレントデフォルト名を返します。"
		},
		"GET PICTURE FORMATS": {
			"Syntax": "**GET PICTURE FORMATS** ( *picture* ; *codecIDs* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"解析するピクチャーフィールドあるいは変数"
				],
				[
					"codecIDs",
					"Text array",
					"<-",
					"ピクチャーのコーデックID"
				]
			],
			"Summary": "**GET PICTURE FORMATS**コマンドは、引数として渡された*picture*引数内に含まれている全てのコーデックIDの配列を返します。"
		},
		"GET PICTURE FROM LIBRARY": {
			"Syntax": "**GET PICTURE FROM LIBRARY** ( *picRef * ; *picture* )<br/>**GET PICTURE FROM LIBRARY** ( *picName* ; *picture* )",
			"Params": [
				[
					"picRef &#124; picName",
					"倍長整数, 文字",
					"->",
					"ピクチャライブラリ画像の参照番号 または ピクチャライブラリ画像の名前"
				],
				[
					"picture",
					"Picture",
					"<-",
					"ピクチャライブラリのピクチャ"
				]
			],
			"Summary": "GET PICTURE FROM LIBRARY コマンドは、*picRef*に渡された参照番号または*picName*に渡された名前を持つピクチャライブラリの画像を*picture*引数に返します。"
		},
		"GET PICTURE FROM PASTEBOARD": {
			"Syntax": "**GET PICTURE FROM PASTEBOARD** ( *picture* )",
			"Params": [
				[
					"picture",
					"Picture",
					"<-",
					"ペーストボードから取り出したピクチャ"
				]
			],
			"Summary": "**GET PICTURE FROM PASTEBOARD** は、ペーストボード内に存在するピクチャーを*picture*フィールドや変数に返します。"
		},
		"GET PICTURE KEYWORDS": {
			"Syntax": "**GET PICTURE KEYWORDS** ( *picture* ; *arrKeywords* {; *} )",
			"Params": [
				[
					"picture",
					"Picture, Picture",
					"->",
					"割り当てられたキーワードを取得するピクチャー"
				],
				[
					"arrKeywords",
					"Text array",
					"<-",
					"キーワードを受け取る配列"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 重複するキーワードを取り除く"
				]
			],
			"Summary": "**GET PICTURE KEYWORDS**コマンドは引数に渡したピクチャーに割り当てられたキーワードのリストを*arrKeywords*配列に返します。"
		},
		"GET PICTURE METADATA": {
			"Syntax": "**GET PICTURE METADATA** ( *picture* ; *metaName* ; *metaContents* {; *metaName2* ; *metaContents2* ; ... ; *metaNameN* ; *metaContentsN*} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"メタデータを読むピクチャ"
				],
				[
					"metaName",
					"Text",
					"->",
					"取得するブロックの名前またはパス"
				],
				[
					"metaContents",
					"Variable",
					"<-",
					"メタデータの内容"
				]
			],
			"Summary": "**GET PICTURE METADATA**コマンドを使用して *picture* で指定したピクチャ (4Dのピクチャフィールドや変数) 内のメタデータ (またはメタタグ) の内容を読みだすことができます。"
		},
		"GET PICTURE RESOURCE": {
			"Syntax": "**GET PICTURE RESOURCE** ( *resID* ; *resData* {; *resFile*} )",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号"
				],
				[
					"resData",
					"Field, Variable",
					"->",
					"ピクチャを受け取る、ピクチャフィールドまたは変数"
				],
				[
					"<-",
					"PICTリソースの内容"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				]
			],
			"Summary": "GET PICTURE RESOURCE コマンドは、*resID*のIDを持つピクチャ (\"PICT\") リソースに格納されているピクチャを*resData*のピクチャフィールドまたは変数に返します。"
		},
		"Get plugin access": {
			"Syntax": "**Get plugin access** ( *plugIn* ) : Text",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"プラグイン番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"プラグインに割り当てられたグループ名"
				]
			],
			"Summary": "Get plugin accessコマンドは引数 *plugIn* に渡した番号を持つプラグインの使用を許可されているユーザグループの名前を返します。"
		},
		"Get pointer": {
			"Syntax": "**Get pointer** ( *varName* ) : Pointer",
			"Params": [
				[
					"varName",
					"Text",
					"->",
					"プロセスまたはインタプロセス変数の名前"
				],
				[
					"戻り値",
					"Pointer",
					"<-",
					"プロセスまたはインタープロセス変数へのポインタ"
				]
			],
			"Summary": "**Get pointer** コマンドは、*varName*に渡した名前を持つ変数へのポインタを返します。"
		},
		"Get print marker": {
			"Syntax": "**Get print marker** ( *markNum* ) : Integer",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"マーカ番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"マーカの位置"
				]
			],
			"Summary": "Get print marker コマンドを使用し、印刷中にマーカの現在位置を取得することができます。"
		},
		"GET PRINT OPTION": {
			"Syntax": "**GET PRINT OPTION** ( *option* ; *value1* {; *value2*} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"オプション番号"
				],
				[
					"value1",
					"Integer, Text",
					"<-",
					"オプションの値1"
				],
				[
					"value2",
					"Integer, Text",
					"<-",
					"オプションの値2"
				]
			],
			"Summary": "**GET PRINT OPTION** コマンドは、プリントオプションの現在の値を返します。"
		},
		"Get print preview": {
			"Syntax": "**Get print preview**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: 印刷プレビューを行うFalse: 印刷プレビューを行わない"
				]
			],
			"Summary": "**Get print preview**コマンドはカレントプロセスでSET PRINT PREVIEWが**True**で呼ばれている場合、Trueを返します。"
		},
		"GET PRINTABLE AREA": {
			"Syntax": "**GET PRINTABLE AREA** ( *height* {; *width*} )",
			"Params": [
				[
					"height",
					"Integer",
					"<-",
					"印刷可能領域の高さ"
				],
				[
					"width",
					"Integer",
					"<-",
					"印刷可能領域の幅"
				]
			],
			"Summary": "GET PRINTABLE AREA コマンドは、印刷可能領域のサイズを引数*height*および*width*へピクセル単位で返します。"
		},
		"GET PRINTABLE MARGIN": {
			"Syntax": "**GET PRINTABLE MARGIN** ( *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"left",
					"Integer",
					"<-",
					"左マージン"
				],
				[
					"top",
					"Integer",
					"<-",
					"上マージン"
				],
				[
					"right",
					"Integer",
					"<-",
					"右マージン"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"下マージン"
				]
			],
			"Summary": "GET PRINTABLE MARGIN コマンドは、Print form、PRINT SELECTION そして PRINT RECORD コマンドに使用されるマージンの現在値を返します。"
		},
		"Get printed height": {
			"Syntax": "**Get printed height**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"マーカーの位置"
				]
			],
			"Summary": "**Get printed height** コマンドは、 Print form コマンドを使って印刷された部分全体の高さ（ピクセル単位）を返します。"
		},
		"GET PROCESS VARIABLE": {
			"Syntax": "**GET PROCESS VARIABLE** ( *process* ; *srcVar* ; *dstVar* {; *srcVar2* ; *dstVar2* ; ... ; *srcVarN* ; *dstVarN*} )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"ソースプロセス番号"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"ソース変数"
				],
				[
					"dstVar",
					"Variable",
					"<-",
					"受け取る変数"
				]
			],
			"Summary": "GET PROCESS VARIABLE コマンドは、*process*引数に渡した番号のソースプロセスから*srcVar* (*srvVar2*等) プロセス変数を読み込み、その現在の値をカレントプロセスの*dstVar* (*dstVar2*等) 変数に返します。"
		},
		"GET QUERY DESTINATION": {
			"Syntax": "**GET QUERY DESTINATION** ( *destinationType* ; *destinationObject* ; *destinationPtr* )",
			"Params": [
				[
					"destinationType",
					"Integer",
					"<-",
					"0 = カレントセレクション、1 = セット、2 = 命名セレクション、3 = 変数"
				],
				[
					"destinationObject",
					"Text",
					"<-",
					"セット名、命名セレクション名、または空の文字列"
				],
				[
					"destinationPtr",
					"Pointer",
					"<-",
					"destinationType=3のとき、ローカル変数へのポインター"
				]
			],
			"Summary": "**GET QUERY DESTINATION**コマンドは実行中のプロセスのクエリ結果の格納先を返します。"
		},
		"Get query limit": {
			"Syntax": "**Get query limit** : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"クエリ結果の制限数値0 = 制限なし"
				]
			],
			"Summary": "**Get query limit**コマンドはカレントプロセスでクエリ結果として返されるレコードの上限値を返します。"
		},
		"GET REGISTERED CLIENTS": {
			"Syntax": "**GET REGISTERED CLIENTS** ( *clientList* ; *methods* )",
			"Params": [
				[
					"clientList",
					"Text array",
					"<-",
					"登録されている4D Clientのリスト"
				],
				[
					"methods",
					"Integer array",
					"<-",
					"実行するメソッドのリスト"
				]
			],
			"Summary": "GET REGISTERED CLIENTS コマンドは2つの配列を作成します"
		},
		"GET RELATION PROPERTIES": {
			"Syntax": "**GET RELATION PROPERTIES** ( *fieldPtr* ; *oneTable* ; *oneField* {; *choiceField* {; *autoOne* {; *autoMany*}}} )<br/>**GET RELATION PROPERTIES** ( *tableNum* ; *fieldNum* ; *oneTable* ; *oneField* {; *choiceField* {; *autoOne* {; *autoMany*}}} )",
			"Params": [
				[
					"fieldPtr&#124;tableNum",
					"ポインター, 倍長整数",
					"->",
					"フィールドポインタ、またはテーブル番号"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"第一引数がテーブル番号の場合、 フィールド番号"
				],
				[
					"oneTable",
					"Integer",
					"<-",
					"1テーブルのテーブル番号、または リレーションが未定義の場合は0（ゼロ）"
				],
				[
					"oneField",
					"Integer",
					"<-",
					"1フィールド番号、または リレーションが未定義の場合は0（ゼロ）"
				],
				[
					"choiceField",
					"Integer",
					"<-",
					"選択フィールド番号、または選択フィールドが未定義の場合は0（ゼロ）"
				],
				[
					"autoOne",
					"Boolean",
					"<-",
					"True = 自動1対1リレート False = 1対1マニュアルリレート"
				],
				[
					"autoMany",
					"Boolean",
					"<-",
					"True = 自動1対nリレート False = 1対nマニュアルリレート"
				]
			],
			"Summary": "GET RELATION PROPERTIESコマンドは、*tableNum*および*fieldNum*、または*fieldPtr*で指定した元のフィールドを起点とするリレート（存在する場合）のプロパティを返します。"
		},
		"Get resource name": {
			"Syntax": "**Get resource name** ( *resType* ; *resID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4文字のリソースタイプ"
				],
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"リソースの名前"
				]
			],
			"Summary": "**Get resource name**コマンドは、*resType*のタイプで*resID*のIDを持つリソースの名前を返します。"
		},
		"Get resource properties": {
			"Syntax": "**Get resource properties** ( *resType* ; *resID* {; *resFile*} ) : Integer",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4文字のリソースタイプ"
				],
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"リソースの属性"
				]
			],
			"Summary": "**Get resource properties**コマンドは、*resType*に渡されるタイプかつ*resID*に渡されるIDを持つリソースの属性を返します。"
		},
		"GET RESOURCE": {
			"Syntax": "**GET RESOURCE** ( *resType* ; *resID* ; *resData* {; *resFile*} )",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4文字のリソースタイプ"
				],
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号"
				],
				[
					"resData",
					"Blob",
					"->",
					"データを受け取るBLOBフィールドまたは変数"
				],
				[
					"<-",
					"リソースの内容"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				]
			],
			"Summary": "GET RESOURCE コマンドは、*resType*と*resID*に渡されるタイプとIDを持つリソースの内容を、BLOBフィールドまたはBLOB変数の*resData*に返します。"
		},
		"Get selected menu item parameter": {
			"Syntax": "**Get selected menu item parameter**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"メニュー項目のカスタムパラメタ"
				]
			],
			"Summary": "Get selected menu item parameter コマンドは、選択されたメニュー項目に割り当てられたカスタム文字列を返します。"
		},
		"GET SERIAL PORT MAPPING": {
			"Syntax": "**GET SERIAL PORT MAPPING** ( *numArray* ; *nameArray* )",
			"Params": [
				[
					"numArray",
					"Integer array",
					"<-",
					"ポート番号の配列"
				],
				[
					"nameArray",
					"Text array",
					"<-",
					"ポート名の配列"
				]
			],
			"Summary": "GET SERIAL PORT MAPPING コマンドはマシンのシリアルポート番号とシリアルポート名を、2つの配列*numArray* と *nameArray*に返します。"
		},
		"Get string resource": {
			"Syntax": "**Get string resource** ( *resID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"'STR 'リソースの内容"
				]
			],
			"Summary": "Get string resource コマンドは、*resID*に渡されるIDを持つストリング (\"STR \") リソースに格納されている文字列を返します。"
		},
		"GET STYLE SHEET INFO": {
			"Syntax": "**GET STYLE SHEET INFO** ( *styleSheetName* ; *font* ; *size* ; *styles* )",
			"Params": [
				[
					"styleSheetName",
					"Text",
					"->",
					"スタイルシート名"
				],
				[
					"font",
					"Text",
					"<-",
					"フォント名"
				],
				[
					"size",
					"Integer",
					"<-",
					"フォントサイズ"
				],
				[
					"styles",
					"Integer",
					"<-",
					"書体"
				]
			],
			"Summary": "**GET STYLE SHEET INFO**コマンドは、*styleSheetName*パラメーターで指定したスタイルシートの現在の構成を返します。"
		},
		"Get subrecord key": {
			"Syntax": "**Get subrecord key** ( *idField* ) : Integer",
			"Params": [
				[
					"idField",
					"Field",
					"->",
					"以前のサブテーブルリレーションの\"サブテーブルリレーション\"または\"倍長整数\"型のフィールド"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"リレーションの内部キー"
				]
			],
			"Summary": "**Get subrecord key**コマンドは、変換されたサブテーブルを使用する4Dコードから、標準のテーブルに対して作業を行うコードへの移行を容易にします。"
		},
		"GET SYSTEM FORMAT": {
			"Syntax": "**GET SYSTEM FORMAT** ( *format* ; *value* )",
			"Params": [
				[
					"format",
					"Integer",
					"->",
					"取得するシステムフォーマット"
				],
				[
					"value",
					"Text",
					"<-",
					"システムで定義されるフォーマットの値"
				]
			],
			"Summary": "GET SYSTEM FORMATコマンドは、オペレーティングシステムで定義されている幾つかの領域のパラメタのカレント値を返します。"
		},
		"GET TABLE PROPERTIES": {
			"Syntax": "**GET TABLE PROPERTIES** ( tablePtr| tableNum ; *invisible* {; *trigSaveNew* {; *trigSaveRec* {; *trigDelRec* {; *trigLoadRec*}}}} )",
			"Params": [
				[
					"tablePtr&#124; tableNum",
					"ポインター, 倍長整数",
					"->",
					"テーブルポインタ、またはテーブル番号"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"True = 非表示、False = 表示"
				],
				[
					"trigSaveNew",
					"Boolean",
					"<-",
					"True = トリガ“新規レコード保存時”が有効、 False = それ以外"
				],
				[
					"trigSaveRec",
					"Boolean",
					"<-",
					"True = トリガ“既存レコード保存時”が有効、 False = それ以外"
				],
				[
					"trigDelRec",
					"Boolean",
					"<-",
					"True = トリガ“レコード削除時”が有効、 False = それ以外"
				],
				[
					"trigLoadRec",
					"Boolean",
					"<-",
					"***使用しない (廃止) ***"
				]
			],
			"Summary": "GET TABLE PROPERTIESコマンドは、*tablePtr*または*tableNum*で渡したテーブルのプロパティを返します。"
		},
		"GET TABLE TITLES": {
			"Syntax": "**GET TABLE TITLES** ( *tableTitles* ; *tableNums* )",
			"Params": [
				[
					"tableTitles",
					"Text array",
					"<-",
					"カレントテーブルの名前"
				],
				[
					"tableNums",
					"Integer array",
					"<-",
					"テーブル番号"
				]
			],
			"Summary": "GET TABLE TITLES コマンドを使用して、ストラクチャウィンドウで、またはSET TABLE TITLES コマンドを用いて定義されたデータベーステーブルの番号と名前を配列 *tableTitles* と *tableNums* に取得します。"
		},
		"Get text from pasteboard": {
			"Syntax": "**Get text from pasteboard**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"ペーストボード中のテキスト (あれば)"
				]
			],
			"Summary": "Get text from pasteboard は、ペーストボードに存在するテキストを返します。"
		},
		"GET TEXT KEYWORDS": {
			"Syntax": "**GET TEXT KEYWORDS** ( *text* ; *arrKeywords* {; *} )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"元のテキスト"
				],
				[
					"arrKeywords",
					"Text array",
					"<-",
					"キーワードを受け取る配列"
				],
				[
					"*",
					"演算子",
					"->",
					"指定した場合、ユニークキーワード"
				]
			],
			"Summary": "**GET TEXT KEYWORDS**コマンドは*text*を個々の単語に分割し、*arrKeywords*配列の要素にして返します。"
		},
		"Get text resource": {
			"Syntax": "**Get text resource** ( *resID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"TEXTリソースの内容"
				]
			],
			"Summary": "Get text resource コマンドは、*resID*に渡されるIDを持つテキスト (\"TEXT\") リソースに格納されているテキストを返します。"
		},
		"GET USER LIST": {
			"Syntax": "**GET USER LIST** ( *userNames* ; *userNumbers* )",
			"Params": [
				[
					"userNames",
					"Text array",
					"<-",
					"パスワードエディターに表示されるユーザー名"
				],
				[
					"userNumbers",
					"Integer array",
					"<-",
					"対応するユニークなユーザーID番号"
				]
			],
			"Summary": "GET USER LIST コマンドは、パスワードエディターに表示されるユーザー名とユニークなユーザーID番号を配列 *userNames* と *userNumbers* に返します。"
		},
		"GET USER PROPERTIES": {
			"Syntax": "**GET USER PROPERTIES** ( *userID* ; *name* ; *startup* ; *password* ; *nbLogin* ; *lastLogin* {; *memberships* {; *groupOwner*}} )",
			"Params": [
				[
					"userID",
					"Integer",
					"->",
					"ユニークなユーザーID番号"
				],
				[
					"name",
					"Text",
					"<-",
					"ユーザー名"
				],
				[
					"startup",
					"Text",
					"<-",
					"スタートアップメソッドの名前"
				],
				[
					"password",
					"Text",
					"<-",
					"常に空の文字列"
				],
				[
					"nbLogin",
					"Integer",
					"<-",
					"データベースにログインした回数 (バイナリデータベースのみ)"
				],
				[
					"lastLogin",
					"Date",
					"<-",
					"データベースに最後にログインした日付 (バイナリデータベースのみ)"
				],
				[
					"memberships",
					"Integer array",
					"<-",
					"ユーザーが属するグループのID番号"
				],
				[
					"groupOwner",
					"Integer",
					"<-",
					"ユーザーのグループオーナーのID番号 (バイナリデータベースのみ)"
				]
			],
			"Summary": "GET USER PROPERTIES コマンドは、引数 *userID* に渡したユニークなユーザーID番号を持つユーザーに関する情報を返します。"
		},
		"GET WINDOW RECT": {
			"Syntax": "**GET WINDOW RECT** ( *left* ; *top* ; *right* ; *bottom* {; *window*} )",
			"Params": [
				[
					"left",
					"Integer",
					"<-",
					"ウィンドウの内容領域の左座標"
				],
				[
					"top",
					"Integer",
					"<-",
					"ウィンドウの内容領域の上座標"
				],
				[
					"right",
					"Integer",
					"<-",
					"ウィンドウの内容領域の右座標"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"ウィンドウの内容領域の下座標"
				],
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または 省略時はカレントプロセスの最前面ウィンドウ, または -1のときはMDIウィンドウ (Windows)"
				]
			],
			"Summary": "**GET WINDOW RECT** コマンドは*window*に渡された参照番号を持つウィンドウの座標を返します。"
		},
		"Get window title": {
			"Syntax": "**Get window title** {( *window* )} : Text",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または 省略時はカレントプロセスの最前面ウィンドウ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ウィンドウタイトル"
				]
			],
			"Summary": "Get window title コマンドは、*window*に渡されたウィンドウ参照番号を持つウィンドウのタイトルを返します。"
		},
		"GOTO OBJECT": {
			"Syntax": "**GOTO OBJECT** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定した場合 = objectはオブジェクト名 (文字列) 省略した場合 = object はフィールドまたは変数参照"
				],
				[
					"object",
					"Field, Variable",
					"->",
					"オブジェクト名 (* を指定した場合) または フィールドまたは変数 (* を省略した場合)"
				]
			],
			"Summary": "GOTO OBJECTコマンドは、フォームのアクティブエリアとしてデータ入力オブジェクト*object* を選択するために使用します。"
		},
		"GOTO RECORD": {
			"Syntax": "**GOTO RECORD** ( {*aTable* ;} *record* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードを移動するテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"record",
					"Integer",
					"->",
					"Record numberで返される番号"
				]
			],
			"Summary": "GOTO RECORDは、*aTable*中の指定したレコードをカレントレコードとして選択します。"
		},
		"GOTO SELECTED RECORD": {
			"Syntax": "**GOTO SELECTED RECORD** ( {*aTable* ;} *record* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"指定したレコードをカレントレコードとするテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"record",
					"Integer",
					"->",
					"セレクション中のレコード位置番号"
				]
			],
			"Summary": "**GOTO SELECTED RECORD**は、*aTable*のカレントセレクション内の指定されたレコードに移動し、そのレコードをカレントレコードにします。"
		},
		"GOTO XY": {
			"Syntax": "**GOTO XY** ( *x* ; *y* )",
			"Params": [
				[
					"x",
					"Integer",
					"->",
					"x カーソルの水平位置"
				],
				[
					"y",
					"Integer",
					"->",
					"y カーソルの垂直位置"
				]
			],
			"Summary": "GOTO XY コマンドは、Open windowで開いたウインドウにMESSAGEコマンドでメッセージを表示する際に使用できます。"
		},
		"GRAPH SETTINGS": {
			"Syntax": "**GRAPH SETTINGS** ( *graph* ; *xmin* ; *xmax* ; *ymin* ; *ymax* ; *xprop* ; *xgrid* ; *ygrid* ; *title* {; *title2* ; ... ; *titleN*} )",
			"Params": [
				[
					"graph",
					"Picture",
					"->",
					"グラフエリアまたはピクチャ変数"
				],
				[
					"xmin",
					"Integer, Date, Time",
					"->",
					"比例グラフのｘ軸の最小値  (線または点グラフのプロットのみ)"
				],
				[
					"xmax",
					"Integer, Date, Time",
					"->",
					"比例グラフのｘ軸の最大値  (線または点グラフのプロットのみ)"
				],
				[
					"ymin",
					"Integer",
					"->",
					"ｙ軸の最小値"
				],
				[
					"ymax",
					"Integer",
					"->",
					"ｙ軸の最大値"
				],
				[
					"xprop",
					"Boolean",
					"->",
					"TRUE: プロポーショナルX軸;  FALSE: 通常のX軸 (線または点グラフのプロットのみ)"
				],
				[
					"xgrid",
					"Boolean",
					"->",
					"TRUE: X軸グリッド; FALSE: X軸グリッドなし (xprop=TRUEの場合のみ)"
				],
				[
					"ygrid",
					"Boolean",
					"->",
					"TRUE: Y軸グリッド; FALSE:Y軸グリッドなし"
				],
				[
					"title",
					"Text",
					"->",
					"凡例"
				]
			],
			"Summary": "GRAPH SETTINGS はフォームに表示されるグラフの設定を変更します。"
		},
		"GRAPH": {
			"Syntax": "**GRAPH** ( *graphArea* ; *graphNumber* ; *xLabels* {; *yElements*} {; *yElements2* ; ... ; *yElementsN*} )",
			"Params": [
				[
					"graphArea",
					"Picture",
					"->",
					"ピクチャー変数"
				],
				[
					"graphNumber",
					"Integer, Object",
					"->",
					"倍長整数:グラフタイプ番号 オブジェクト(64-bit版のみ):グラフ設定"
				],
				[
					"xLabels",
					"Array",
					"->",
					"X軸ラベル"
				],
				[
					"yElements",
					"Array",
					"->",
					"グラフにするデータ (最大8個)"
				]
			],
			"Summary": "**GRAPH**コマンドは、ピクチャー変数に、配列のデータを使用してグラフを作成します。"
		},
		"HIDE MENU BAR": {
			"Syntax": "**HIDE MENU BAR**",
			"Params": [],
			"Summary": "HIDE MENU BARコマンドは、メニューバーを隠します。"
		},
		"HIDE PROCESS": {
			"Syntax": "**HIDE PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"隠すプロセスのプロセス番号"
				]
			],
			"Summary": "HIDE PROCESSは*process*に属するすべてのウィンドウを非表示にします。"
		},
		"HIDE TOOL BAR": {
			"Syntax": "**HIDE TOOL BAR**",
			"Params": [],
			"Summary": "**HIDE TOOL BAR** コマンドは、カレントプロセスにおいてOpen form window コマンドで作成されたカスタムのツールバーの表示を管理します。"
		},
		"HIDE WINDOW": {
			"Syntax": "**HIDE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号、または 省略時、カレントプロセスの最前面ウィンドウ"
				]
			],
			"Summary": "HIDE WINDOWコマンドは、*window*で指定したウィンドウ参照番号を持つウィンドウまたはこの引数省略時はカレントプロセスの最前面ウィンドウを、隠すために使用します。"
		},
		"HIGHLIGHT RECORDS": {
			"Syntax": "**HIGHLIGHT RECORDS** ( {*aTable* }{;}{ *setName* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードをハイライトするテーブル 省略時、カレントフォームのテーブル"
				],
				[
					"setName",
					"Text",
					"->",
					"ハイライトさせるレコードのセット、または 省略時、Userset"
				],
				[
					"*",
					"演算子",
					"->",
					"リストの自動スクロールを無効"
				]
			],
			"Summary": "HIGHLIGHT RECORDS コマンドは、出力フォーム内で指定されたレコードをハイライトします。"
		},
		"HIGHLIGHT TEXT": {
			"Syntax": "**HIGHLIGHT TEXT** ( {* ;} *object* ; *startSel* ; *endSel* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字列)、省略時: objectはフィールドまたは変数"
				],
				[
					"object",
					"Field, Variable, any",
					"->",
					"オブジェクト名 (*指定時)、またはフィールドや変数 (*省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"反転表示の先頭位置"
				],
				[
					"endSel",
					"Integer",
					"->",
					"反転表示の最終位置"
				]
			],
			"Summary": "**HIGHLIGHT TEXT**コマンドは、*object* 内にあるテキストの一部を反転表示します。"
		},
		"HTTP AUTHENTICATE": {
			"Syntax": "**HTTP AUTHENTICATE** ( *name* ; *password* {; *authMethod*} {; *} )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"ユーザー名"
				],
				[
					"password",
					"Text",
					"->",
					"ユーザーパスワード"
				],
				[
					"authMethod",
					"Integer",
					"->",
					"認証方式: 0または省略時=指定しない、1=BASIC、2=DIGEST"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: プロクシ認証"
				]
			],
			"Summary": "**HTTP AUTHENTICATE**コマンドはクライアントアプリケーションの認証を要求するサーバーへのHTTPリクエストを可能にします。"
		},
		"HTTP Get certificates folder": {
			"Syntax": "**HTTP Get certificates folder**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"アクティブな証明書フォルダの完全なパス名"
				]
			],
			"Summary": "**HTTP Get certificates folder**コマンドは、アクティブなクライアント証明書フォルダの完全なパス名を返します。"
		},
		"HTTP GET OPTION": {
			"Syntax": "**HTTP GET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"取得するオプションのコード"
				],
				[
					"value",
					"Integer",
					"<-",
					"オプションの現在の値"
				]
			],
			"Summary": "**HTTP GET OPTION**コマンドは (HTTP GetやHTTP Requestコマンドで実行される次のリクエストでクライアントにより使用される) HTTPオプションの現在値を返します。"
		},
		"HTTP Get": {
			"Syntax": "**HTTP Get** ( *url* ; *response* {; *headerNames* ; *headerValues*}{; *} ) : Integer",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"リクエスト送信先URL"
				],
				[
					"response",
					"Text, Blob, Picture, Object",
					"<-",
					"リクエストの結果"
				],
				[
					"headerNames",
					"Text array",
					"->",
					"リクエストのヘッダー名"
				],
				[
					"<-",
					"返されたヘッダー名"
				],
				[
					"headerValues",
					"Text array",
					"->",
					"リクエストのヘッダー値"
				],
				[
					"<-",
					"返されたヘッダー値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 接続を保持する (keep-alive)省略時: 自動で接続を閉じる"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"HTTPステータスコード"
				]
			],
			"Summary": "**HTTP Get**コマンドは指定したURLにHTTP GETリクエストを送信し、HTTPサーバーからのレスポンスを処理します。"
		},
		"HTTP Request": {
			"Syntax": "**HTTP Request** ( *httpMethod* ; *url* ; *contents* ; *response* {; *headerNames* ; *headerValues*}{; *} ) : Integer",
			"Params": [
				[
					"httpMethod",
					"Text",
					"->",
					"リクエストで使用するHTTPメソッド"
				],
				[
					"url",
					"Text",
					"->",
					"リクエストの送信先URL"
				],
				[
					"contents",
					"Text, Blob, Picture, Object",
					"->",
					"リクエストボディの内容"
				],
				[
					"response",
					"Text, Blob, Picture, Object",
					"<-",
					"レスポンスの内容"
				],
				[
					"headerNames",
					"Text array",
					"->",
					"リクエストのヘッダー名"
				],
				[
					"<-",
					"返されたヘッダー名"
				],
				[
					"headerValues",
					"Text array",
					"->",
					"リクエストのヘッダー値"
				],
				[
					"<-",
					"返されたヘッダー値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 接続を保持する (keep-alive)省略時: 自動で接続を閉じる"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"HTTPステータスコード"
				]
			],
			"Summary": "**HTTP Request**コマンドは指定したURLに任意のメソッドでHTTPリクエストを送信し、HTTPサーバーのレスポンスを処理することを可能にします。"
		},
		"HTTP SET CERTIFICATES FOLDER": {
			"Syntax": "**HTTP SET CERTIFICATES FOLDER** ( *certificatesFolder* )",
			"Params": [
				[
					"certificatesFolder",
					"Text",
					"->",
					"クライアント証明書フォルダのパス名と名前"
				]
			],
			"Summary": "**HTTP SET CERTIFICATES FOLDER** コマンドは、 カレントセッションの全てのプロセスにおいてアクティブな証明書フォルダを変更します。"
		},
		"HTTP SET OPTION": {
			"Syntax": "**HTTP SET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"設定するオプションのコード"
				],
				[
					"value",
					"Integer",
					"->",
					"オプションの値"
				]
			],
			"Summary": "**HTTP SET OPTION**コマンドは (HTTP GetやHTTP Requestコマンドで実行される次のリクエストでクライアントにより使用される) HTTPオプションの値を設定します。"
		},
		"IDLE": {
			"Syntax": "**IDLE**",
			"Params": [],
			"Summary": "IDLEコマンドは、コンパイラと一緒に使用する目的だけに作成されたコマンドです。"
		},
		"IMPORT DATA": {
			"Syntax": "**IMPORT DATA** ( *fileName* {; *project* {; *}} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"インポートファイルのフルパス名"
				],
				[
					"project",
					"Text, Blob",
					"->",
					"インポートプロジェクト"
				],
				[
					"<-",
					"インポートプロジェクトの新しい内容 (*引数指定時)"
				],
				[
					"*",
					"演算子",
					"->",
					"インポートダイアログを表示し プロジェクトの内容を更新"
				]
			],
			"Summary": "**IMPORT DATA**コマンドはデータを*fileName*ファイルから読み込みます。"
		},
		"IMPORT DIF": {
			"Syntax": "**IMPORT DIF** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データを読み込むテーブル, または 省略した場合, デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"データを読み込むDIFドキュメント"
				]
			],
			"Summary": "IMPORT DIF コマンドは、WindowsまたはMacintoshの標準的なDIF形式のドキュメント*document*から *aTable*にデータを読み込み、新しいレコードを作成します。"
		},
		"IMPORT STRUCTURE": {
			"Syntax": "**IMPORT STRUCTURE** ( *xmlStructure* )",
			"Params": [
				[
					"xmlStructure",
					"Text",
					"->",
					"4D データベースストラクチャーのXML定義ファイル"
				]
			],
			"Summary": "**IMPORT STRUCTURE** コマンドは、カレントデータベース内に、 *xmlStructure* に渡した4D XMLストラクチャー定義を読み込みます。"
		},
		"IMPORT SYLK": {
			"Syntax": "**IMPORT SYLK** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データを読み込むテーブル, または 省略した場合, デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"データを読み込むSYLKドキュメント"
				]
			],
			"Summary": "IMPORT SYLK コマンドは、WindowsまたはMacintoshの標準的なSYLK形式のドキュメント*document*から *aTable*にデータを読み込み、新しいレコードを作成します。"
		},
		"IMPORT TEXT": {
			"Syntax": "**IMPORT TEXT** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データを読み込むテーブル, または 省略した場合, デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"データを読み込むテキストドキュメント"
				]
			],
			"Summary": "IMPORT TEXT コマンドは、WindowsまたはMacintoshの標準的なテキスト形式のドキュメント*document*から *aTable* にデータを読み込み、新しいレコードを作成します。"
		},
		"In break": {
			"Syntax": "**In break**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがブレークエリア内にある場合にはTrueを返す"
				]
			],
			"Summary": "**In break** はIn break 実行サイクルでTrueを返します。"
		},
		"In footer": {
			"Syntax": "**In footer**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがフッター内にある場合にはTrueを返す"
				]
			],
			"Summary": "**In footer** はIn footer 実行サイクルに対してTrueを返します。"
		},
		"In header": {
			"Syntax": "**In header**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"実行サイクルがヘッダー内にある場合にはTrueを返す"
				]
			],
			"Summary": "**In header** はIn header実行サイクルに対してTrueを返します。"
		},
		"In transaction": {
			"Syntax": "**In transaction**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"カレントプロセスがトランザクション内にある場合、TRUEを返します。"
				]
			],
			"Summary": "In transactionコマンドはカレントプロセスがトランザクション内にある場合にTrueを返します。"
		},
		"INSERT IN ARRAY": {
			"Syntax": "**INSERT IN ARRAY** ( *array* ; *where* {; *howMany*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"配列名"
				],
				[
					"where",
					"Integer",
					"->",
					"要素を挿入する位置"
				],
				[
					"howMany",
					"Integer",
					"->",
					"挿入する要素数, または 省略時は1"
				]
			],
			"Summary": "INSERT IN ARRAYコマンドは、*array*に1つまたは複数の要素を挿入します。"
		},
		"INSERT IN BLOB": {
			"Syntax": "**INSERT IN BLOB** ( *BLOB* ; *offset* ; *len* {; *filler*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"バイト列を挿入するBLOB"
				],
				[
					"offset",
					"Integer",
					"->",
					"バイト列挿入開始位置"
				],
				[
					"len",
					"Integer",
					"->",
					"挿入するバイト数"
				],
				[
					"filler",
					"Integer",
					"->",
					"デフォルトのバイト値 (0x00..0xFF) 省略した場合0x00"
				]
			],
			"Summary": "INSERT IN BLOB コマンドは、*blob*の*offset*で指定した位置に、*len*で指定した数のバイトを挿入します。"
		},
		"INSERT IN LIST": {
			"Syntax": "**INSERT IN LIST** ( {* ;} *list* ; *beforeItemRef* ; *itemText* ; *itemRef* {; *sublist* ; *expanded*} )<br/>**INSERT IN LIST** ( * ; *list* ; * ; *itemText* ; *itemRef* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"beforeItemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号 または 0: リストに最後に追加された項目 または *: 現在選択されている項目"
				],
				[
					"itemText",
					"Text",
					"->",
					"新しいリスト項目のテキスト"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"新しいリスト項目のユニークな参照番号"
				],
				[
					"sublist",
					"Integer",
					"->",
					"新しいリスト項目に添付するオプションのサブリスト"
				],
				[
					"expanded",
					"Boolean",
					"->",
					"サブリストの展開/折りたたみ状態を指定"
				]
			],
			"Summary": "INSERT IN LIST コマンドは、*list*に渡されたリスト参照番号またはオブジェクト名のリストに *itemRef*が指定する新規項目を挿入します。"
		},
		"INSERT MENU ITEM": {
			"Syntax": "**INSERT MENU ITEM** ( *menu* ; *afterItem* ; *itemText* {; *subMenu* {; *process*}}{; *} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"afterItem",
					"Integer",
					"->",
					"メニュー項目番号"
				],
				[
					"itemText",
					"Text",
					"->",
					"挿入するメニュー項目のテキスト"
				],
				[
					"subMenu",
					"Text",
					"->",
					"項目に割り当てるサブメニュの参照"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: メタ文字を標準文字として扱う"
				]
			],
			"Summary": "**INSERT MENU ITEM** コマンドは、*menu*に渡されたメニュー番号または参照を持つメニューにおいて、*afterItem*に渡された番号の既存のメニュー項目の後ろに新しいメニュー項目を挿入します。"
		},
		"Insert string": {
			"Syntax": "**Insert string** ( *source* ; *what* ; *where* ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"文字列を挿入する文字列"
				],
				[
					"what",
					"Text",
					"->",
					"挿入する文字列"
				],
				[
					"where",
					"Integer",
					"->",
					"挿入する位置"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"結果の文字列"
				]
			],
			"Summary": "Insert stringは、*source*の*where*で指定された位置の前に、*what*を 挿入した文字列を返します。"
		},
		"Int": {
			"Syntax": "**Int** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"整数部を求める数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"整数部の数値"
				]
			],
			"Summary": "Int は*number*の整数部を取り出して返します。"
		},
		"INTEGER TO BLOB": {
			"Syntax": "**INTEGER TO BLOB** ( *integer* ; *blob* ; *byteOrder* {; offset} )<br/>**INTEGER TO BLOB** ( *integer* ; *blob* ; *byteOrder* {; *} )",
			"Params": [
				[
					"entier",
					"Integer",
					"->",
					"BLOBに書き込む整数値"
				],
				[
					"Blob",
					"Blob",
					"->",
					"整数値を受け取るBLOB"
				],
				[
					"ordreOctet",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset &#124; *",
					"変数, 演算子",
					"<->",
					"BLOB内のオフセット (バイト単位) または値を追加する場合 *"
				],
				[
					"",
					"",
					"",
					"*でない場合、書き込み後の新しいオフセット"
				]
			],
			"Summary": "INTEGER TO BLOB コマンドは、*blob*に2バイトの*integer*値を書き込みます。"
		},
		"INTEGRATE MIRROR LOG FILE": {
			"Syntax": "**INTEGRATE MIRROR LOG FILE** ( *pathName* ; *operationNum* {; *mode* {; *errObject*}} )",
			"Params": [
				[
					"pathName",
					"Text",
					"->",
					"統合されるログファイルの名前もしくはパス名"
				],
				[
					"operationNum",
					"Real",
					"->",
					"統合が開始されるオペレーションの番号"
				],
				[
					"<-",
					"最後に統合されたオペレーションの番号"
				],
				[
					"mode",
					"Integer",
					"->",
					"0=厳格な統合モード(デフォルトモード)、1=自動修復モード"
				],
				[
					"errObject",
					"Object",
					"<-",
					"失われたオペレーション"
				]
			],
			"Summary": "**注意事項:**このコマンドは4D Serverでのみ作動します。"
		},
		"INTERSECTION": {
			"Syntax": "**INTERSECTION** ( *set1* ; *set2* ; *resultSet* )",
			"Params": [
				[
					"set1",
					"Text",
					"->",
					"最初のセット"
				],
				[
					"set2",
					"Text",
					"->",
					"2番目のセット"
				],
				[
					"resultSet",
					"Text",
					"->",
					"結果のセット"
				]
			],
			"Summary": "INTERSECTIONコマンドは、*set1*と*set2*を比較し、*set1*と*set2*の両方に存在するレコードだけを選択します。"
		},
		"INVOKE ACTION": {
			"Syntax": "**INVOKE ACTION** ( *action* {; *target*} )",
			"Params": [
				[
					"action",
					"Text",
					"->",
					"標準アクション名、あるいは(必要であれば)引数を含めたパターン"
				],
				[
					"target",
					"Integer",
					"->",
					"アクションを実行する場所を定義: カレントフォーム(デフォルト)あるいはメインフォーム"
				]
			],
			"Summary": "**INVOKE ACTION**コマンドは*action* 引数で定義された標準アクションを、任意の*target* 引数で指定したコンテキストでトリガーします。"
		},
		"Is a list": {
			"Syntax": "**Is a list** ( *list* ) : Boolean",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"テストするListRef値"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE: listは階層リスト FALSE: listは階層リストでない"
				]
			],
			"Summary": "Is a list コマンドは、*list* 引数で指定された値が階層リストの有効な参照の場合Trueを返します。"
		},
		"Is a variable": {
			"Syntax": "**Is a variable** ( *aPointer* ) : Boolean",
			"Params": [
				[
					"aPointer",
					"Pointer",
					"->",
					"テストするポインタ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE = 変数のポインタ FALSE = 変数以外のポインタ"
				]
			],
			"Summary": "**Is a variable**コマンドは、*aPointer*が定義済み変数を参照する場合にはTrueを返します。"
		},
		"Is compiled mode": {
			"Syntax": "**Is compiled mode** {( * )} : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"ホストデータベースの情報を返す"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"コンパイル済み (True), インタプリタ (False)"
				]
			],
			"Summary": "Is compiled modeは、データベースがコンパイルモード（True）、ま たはインタプリタモード（False）のどちらで実行されているかをテストします。"
		},
		"Is data file locked": {
			"Syntax": "**Is data file locked**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True=ファイル/セグメントがロックされている   False=ファイル/セグメントはロックされていない"
				]
			],
			"Summary": "Is data file locked コマンドは、現在開いているデータベースのデータファイル、または少なくとも1つのセグメントがロックされている（つまり、書き込み禁止）場合にTrue（真）を返します。"
		},
		"Is editing text": {
			"Syntax": "**Is editing text**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"テキストが入力されているならTrue、それ以外ならFalse"
				]
			],
			"Summary": "**Is editing text** は、ユーザーが入力フォームオブジェクトに値を入力中であれば**True** を、それ以外の場合には**False** を返します。"
		},
		"Is field number valid": {
			"Syntax": "**Is field number valid** ( *tablePtr* ; *fieldNum* ) : Boolean<br/>**Is field number valid** ( *tableNum* ; *fieldNum* ) : Boolean",
			"Params": [
				[
					"tableNum &#124; tablePtr",
					"倍長整数, ポインター",
					"->",
					"テーブル番号またはテーブルへのポインタ"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"フィールド番号"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = テーブルにあるフィールド False = フィールドがテーブルに存在しない"
				]
			],
			"Summary": "Is field number validコマンドは、引数*fieldNum*に渡したフィールド番号のフィールドが、引数*tableNum*または*tablePtr*に渡したテーブル番号またはポインタのテーブルに存在する場合、Trueを返します。"
		},
		"Is field value Null": {
			"Syntax": "**Is field value Null** ( *aField* ) : Boolean",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"評価するフィールド"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = フィールドはNULL, False = フィールドはNULLでない"
				]
			],
			"Summary": "Is field value Null コマンドは*aField*引数 によって指定されたフィールドがNULL値を含む場合Trueを返します。"
		},
		"Is in print preview": {
			"Syntax": "**Is in print preview**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: 印刷プレビューFalse: 印刷プレビューでない"
				]
			],
			"Summary": "**Is in print preview**コマンドは印刷ダイアログボックスで印刷プレビューオプションが選択されている場合Trueを返し、そうでなければFalseを返します。"
		},
		"Is in set": {
			"Syntax": "**Is in set** ( *set* ) : Boolean",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"テストするセットの名前"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True＝カレントレコードがセットに含まれる False＝カレントレコードがセットに含まれない"
				]
			],
			"Summary": "Is in set関数は、*set*の属するテーブルのカレントレコードが*set*に含まれているかどうかを調べます。"
		},
		"Is license available": {
			"Syntax": "**Is license available** {( *license* )} : Boolean",
			"Params": [
				[
					"license",
					"Integer",
					"->",
					"ライセンスの有効性テストを行うプラグイン"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"プラグインが利用可能な場合はTrue、その他の場合はFalse"
				]
			],
			"Summary": "Is license available コマンドを使用して、プラグインの有効性を確認することができます。"
		},
		"Is macOS": {
			"Syntax": "**Is macOS** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"OS = macOS である場合にはTrue、そうでない場合にはFalse"
				]
			],
			"Summary": "**Is macOS** コマンドは、カレントのOSがmacOS の場合にはTrue を返します。"
		},
		"Is new record": {
			"Syntax": "**Is new record** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードを検査するテーブル または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: レコードは未保存の新規レコード, そうでなければFalse"
				]
			],
			"Summary": "Is new record コマンドは、カレントプロセス内で、指定された*aTable*のカレントレコードが未保存の新規レコードの場合にTrueを返します。"
		},
		"Is nil pointer": {
			"Syntax": "**Is nil pointer** ( *aPointer* ) : Boolean",
			"Params": [
				[
					"aPointer",
					"Pointer",
					"->",
					"テストするポインタ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE = Nil ポインタ (->[]) FALSE = 既存のオブジェクトへの有効なポインタ"
				]
			],
			"Summary": "**Is nil pointer**コマンドは、*aPointer*がNilポインタ (->\\[\\]) の場合に**True**を返します。"
		},
		"Is picture file": {
			"Syntax": "**Is picture file** ( *filePath* {; *} ) : Boolean",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"ファイルパス名"
				],
				[
					"*",
					"演算子",
					"->",
					"データの検証"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = filePathはピクチャファイルである、そうでなければFalse"
				]
			],
			"Summary": "Is picture file コマンドは*filePath*引数で指定されたファイルをテストし、有効なピクチャファイルであればTrueを返します。"
		},
		"Is record loaded": {
			"Syntax": "**Is record loaded** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードを検査するテーブル または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: レコードはロードされている そうでなければFalse"
				]
			],
			"Summary": "**Is record loaded** コマンドは、*aTable*のカレントレコードがカレントプロセス内にロードされていればTrueを返します。"
		},
		"Is table number valid": {
			"Syntax": "**Is table number valid** ( *tableNum* ) : Boolean",
			"Params": [
				[
					"tableNum",
					"Integer",
					"->",
					"テーブル番号"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = テーブルがデータベースに存在する False = テーブルがデータベースに存在しない"
				]
			],
			"Summary": "Is table number validコマンドは、引数*tableNum*に渡したテーブル番号のテーブルがデータベースに存在する場合、Trueを返します。"
		},
		"Is user deleted": {
			"Syntax": "**Is user deleted** ( *userNumber* ) : Boolean",
			"Params": [
				[
					"userNumber",
					"Integer",
					"->",
					"ユーザーID番号"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE = ユーザーアカウントが削除されている、または存在しない場合；FALSE = ユーザーアカウントがアクティブな場合"
				]
			],
			"Summary": "Is user deleted コマンドを使用して、引数 *userID* に渡したユニークなユーザーID番号を持つユーザーアカウントをテストします。"
		},
		"Is waiting mouse up": {
			"Syntax": "**Is waiting mouse up**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"オブジェクトがmouse upイベントを待っている場合にはTrue、それ以外ならFalse"
				]
			],
			"Summary": "The **Is waiting mouse up** コマンドはカレントオブジェクトがクリックされて、かつマウスボタンがリリースされておらず、親ウィンドウにフォーカスが入っている場合に**True**を返します。"
		},
		"Is window maximized": {
			"Syntax": "**Is window maximized** ( *window* ) : Boolean",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"ウィンドウが最大化されていればTrue、それ以外の場合にはFalse"
				]
			],
			"Summary": "**Is window maximized** コマンドは*window* 引数に参照を渡したウィンドウが現在最大化されていれば **True** を、それ以外の場合には**False** を返します。"
		},
		"Is window reduced": {
			"Syntax": "**Is window reduced** ( *window* ) : Boolean",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"ウィンドウがタスクバーかDockに収納されていればTrue、それ以外の場合にはFalse"
				]
			],
			"Summary": "**Is window reduced** コマンドは*window* 引数に参照を渡したウィンドウがタスクバー(Windows)またはDock(macOS)に収納されている場合には**True** を、それ以外の場合には**False** を返します。"
		},
		"Is Windows": {
			"Syntax": "**Is Windows** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"OS = Windows ならTrue、そうでなければFalse"
				]
			],
			"Summary": "**Is Windows** コマンドは、カレントのOSがWindows の場合にはTrue を返します。"
		},
		"JSON PARSE ARRAY": {
			"Syntax": "**JSON PARSE ARRAY** ( *jsonString* ; *array* )",
			"Params": [
				[
					"jsonString",
					"Text",
					"->",
					"解析したいJSON文字列"
				],
				[
					"array",
					"Array",
					"<-",
					"JSON文字列を解析した結果を含む配列"
				]
			],
			"Summary": "**JSON PARSE ARRAY**コマンドは、JSONフォーマットの文字列の中身を解析し、取り出したデータを *array* 引数の配列の中へと入れます。"
		},
		"JSON Parse": {
			"Syntax": "**JSON Parse** ( *jsonString* {; *type*}{; *} ) : any",
			"Params": [
				[
					"jsonString",
					"Text",
					"->",
					"解析したいJSON文字列"
				],
				[
					"type",
					"Integer",
					"->",
					"値を変換したい型"
				],
				[
					"*",
					"演算子",
					"->",
					"返された値がオブジェクトの場合、各プロパティの行の位置とオフセットを追加"
				],
				[
					"戻り値",
					"any, Object",
					"<-",
					"JSON文字列から取り出した値"
				]
			],
			"Summary": "**JSON Parse**コマンドは、JSONフォーマットの文字列の中身を解析し、4Dのフィールドまた は変数へと保存可能な値を取り出します。"
		},
		"JSON Resolve pointers": {
			"Syntax": "**JSON Resolve pointers** ( *object* {; *options*} ) : Object",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"解決するJSONポインターを含んだオブジェクト型"
				],
				[
					"<-",
					"解決したJSONポインターを含んだオブジェクト型(結果がオブジェクト型の場合のみ)"
				],
				[
					"options",
					"Object",
					"->",
					"ポインター解決のオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"処理の結果を含んだオブジェクト型"
				]
			],
			"Summary": "**JSON Resolve pointers** コマンドは、*object* 引数内にある全てのJSON ポインターを、*options* 引数で指定した設定(あれば)に基づいて、解決します。"
		},
		"JSON Stringify array": {
			"Syntax": "**JSON Stringify array** ( *array* {; *} ) : Text",
			"Params": [
				[
					"array",
					"Text array, Real array, Boolean array, Pointer array, Object array",
					"->",
					"内容をシリアライズしたい配列"
				],
				[
					"*",
					"演算子",
					"->",
					"整形フォーマット"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"シリアライズされたJSON配列を含む文字列"
				]
			],
			"Summary": "**JSON Stringify array**コマンドは、4D配列 *array* をシリアライズされたJSON配列へと変換します。"
		},
		"JSON Stringify": {
			"Syntax": "**JSON Stringify** ( *value* {; *} ) : Text",
			"Params": [
				[
					"value",
					"Object, any",
					"->",
					"JSON文字列に変換したいデータ"
				],
				[
					"*",
					"演算子",
					"->",
					"整形フォーマット"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"シリアライズされたJSONテキストを含む文字列"
				]
			],
			"Summary": "**JSON Stringify**コマンドは、 *value* 引数を、JSON文字列へと変換します。"
		},
		"JSON TO SELECTION": {
			"Syntax": "**JSON TO SELECTION** ( *aTable* ; *jsonArray* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"要素の複製先の4Dテーブル"
				],
				[
					"jsonArray",
					"Text",
					"->",
					"JSON形式の文字列"
				]
			],
			"Summary": "**JSON TO SELECTION**コマンドは、JSONオブジェクト配列 *jsonArray* の中身を、 *aTable* のレコードのセレクションへとコピーします。"
		},
		"JSON Validate": {
			"Syntax": "**JSON Validate** ( *vJson* ; *vSchema* ) : Object",
			"Params": [
				[
					"vJson",
					"Object",
					"->",
					"評価するJSONオブジェクト"
				],
				[
					"vSchema",
					"Object",
					"->",
					"JSONオブジェクトを評価するのに使用するJSONスキーマ"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"評価ステータスあるいはエラー(あれば)"
				]
			],
			"Summary": "**JSON Validate** コマンドは、*vJson* 引数に渡されたJSON コンテンツを*vSchema* 引数に渡したJSON スキーマで定義されたルールに対しての適合性をチェックします。"
		},
		"Keystroke": {
			"Syntax": "**Keystroke**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"ユーザが入力した文字"
				]
			],
			"Summary": "Keystroke はユーザがフィールドや入力可能エリアに入力した文字を返します。"
		},
		"KILL WORKER": {
			"Syntax": "**KILL WORKER** {( *process* )}",
			"Params": [
				[
					"process",
					"Text, Integer",
					"->",
					"終了させるプロセスの番号または名称 (省略の場合はカレントプロセス)"
				]
			],
			"Summary": "**KILL WORKER** コマンドは *process* に指定した番号、または名称のワーカープロセスにメッセージを送信し、現在の処理が完了次第、未処理のメッセージすべて無視して実行を終了するよう命令します。"
		},
		"Last field number": {
			"Syntax": "**Last field number** ( *tableNum* ) : Integer<br/>**Last field number** ( *tablePtr* ) : Integer",
			"Params": [
				[
					"tableNum &#124; tablePtr",
					"倍長整数, ポインター",
					"->",
					"テーブル番号、またはテーブルポインタ"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"テーブルの最大フィールド番号"
				]
			],
			"Summary": "Last field numberコマンドは、*tableNum*または*tablePtr*にテーブル番号またはポインタを渡したテーブルにあるフィールドの中で、最大のフィールド番号を返します。"
		},
		"Last query path": {
			"Syntax": "**Last query path** ( *descFormat* ) : Text",
			"Params": [
				[
					"descFormat",
					"Integer",
					"->",
					"説明フォーマット (テキストまたはXML)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"最後に実行されたクエリパスの説明"
				]
			],
			"Summary": "Last query path コマンドは、データに対して行われた最後のクエリの実際のパスの説明を返します。"
		},
		"Last query plan": {
			"Syntax": "**Last query plan** ( *descFormat* ) : Text",
			"Params": [
				[
					"descFormat",
					"Integer",
					"->",
					"説明フォーマット (テキストまたはXML)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"最後に実行されたクエリプランの説明"
				]
			],
			"Summary": "Last query plan コマンドは、データに対して行われた最後のクエリのクエリプランの説明を返します。"
		},
		"LAST RECORD": {
			"Syntax": "**LAST RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードをセレクションの最後に移動する テーブル、または省略時、デフォルトテーブル"
				]
			],
			"Summary": "**LAST RECORD**は、*aTable*のカレントセレクションの最後のレコードをディスクからロードし、カレントレコードに設定します。"
		},
		"Last table number": {
			"Syntax": "**Last table number**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"データベースの最大テーブル番号"
				]
			],
			"Summary": "Last table numberは、データベース中のテーブルの数を返します。"
		},
		"Last update log path": {
			"Syntax": "**Get last update log path** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"直近のアップデートログへのパス名"
				]
			],
			"Summary": "**Get last update log path**コマンドは、呼び出されたマシン内の最近のアップデートログファイルへの完全なパスを返します。"
		},
		"LAUNCH EXTERNAL PROCESS": {
			"Syntax": "**LAUNCH EXTERNAL PROCESS** ( *fileName* {; *inputStream* {; *outputStream* {; *errorStream*}}}{; *pid*} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"ファイルパスと起動するファイルの引数"
				],
				[
					"inputStream",
					"Text, Blob",
					"->",
					"入力ストリーム(stdin)"
				],
				[
					"outputStream",
					"Text, Blob",
					"<-",
					"出力ストリーム(stdout)"
				],
				[
					"errorStream",
					"Text, Blob",
					"<-",
					"エラーストリーム(stderr)"
				],
				[
					"pid",
					"Integer",
					"<-",
					"外部プロセスの固有識別子"
				]
			],
			"Summary": "4D v19 R4 以降、外部プロセスを実行して管理するためには*SystemWorker class* の使用が推奨されます。"
		},
		"LDAP LOGIN": {
			"Syntax": "**LDAP LOGIN** ( *url* ; *login* ; *password* {; *digest*} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"接続するLDAPサーバーのURL"
				],
				[
					"login",
					"Text",
					"->",
					"ログインエントリー"
				],
				[
					"password",
					"Text",
					"->",
					"ログインエントリーのパスワード"
				],
				[
					"digest",
					"Integer",
					"->",
					"0 = パスワードをMD5ダイジェストで送るMD5(デフォルト)、<br/>1 = パスワードを暗号化なしで送る"
				]
			],
			"Summary": "**LDAP LOGIN** コマンドは*url* 引数で指定したLDAPサーバーに対し、*login* 引数と *password* 引数に渡された識別子をもって読み込み専用の接続を開きます。"
		},
		"LDAP LOGOUT": {
			"Syntax": "**LDAP LOGOUT**",
			"Params": [],
			"Summary": "**LDAP LOGOUT** コマンドカレントプロセスにおいて、LDAPサーバーとの接続を(開いていた場合)閉じます。"
		},
		"LDAP SEARCH ALL": {
			"Syntax": "**LDAP SEARCH ALL** ( *dnRootEntry* ; *arrResult* ; *filter* {; *scope* {; *attributes* {; *attributesAsArray*}}} )",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"検索を開始するルートエントリーの識別名"
				],
				[
					"arrResult",
					"Object array",
					"<-",
					"検索の結果"
				],
				[
					"filter",
					"Text",
					"->",
					"LDAP検索フィルター"
				],
				[
					"scope",
					"Text",
					"->",
					"検索のスコープ: \"base\" (デフォルト)、\"one\"、または\"sub\""
				],
				[
					"attributes",
					"Text array",
					"->",
					"取得する属性"
				],
				[
					"attributesAsArray",
					"Boolean array",
					"->",
					"True = 属性を配列として返す; false = 属性を単純な変数として返す"
				]
			],
			"Summary": "**LDAP SEARCH ALL** コマンドは、ターゲットとなるLDAPサーバー内のオカレンスのうち、定義された条件に合致するものを全て検索します。"
		},
		"LDAP Search": {
			"Syntax": "**LDAP Search** ( *dnRootEntry* ; *filter* {; *scope* {; *attributes* {; *attributesAsArray*}}} ) : Object",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"検索を開始するルートエントリーの識別名"
				],
				[
					"filter",
					"Text",
					"->",
					"LDAP検索フィルター"
				],
				[
					"scope",
					"Text",
					"->",
					"検索のスコープ: \"base\" (デフォルト)、\"one\"、または\"sub\""
				],
				[
					"attributes",
					"Text array",
					"->",
					"取得する属性"
				],
				[
					"attributesAsArray",
					"Boolean array",
					"->",
					"True = 属性を強制的に配列として返す;<br/>False = 属性を強制的に単純な変数として返す"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"キー/値 属性"
				]
			],
			"Summary": "**LDAP Search** コマンドはターゲットとなるLDAPサーバー内にて、定義された条件に合致する最初のオカレンスを検索します。"
		},
		"Length": {
			"Syntax": "**Length** ( *string* ) : Integer",
			"Params": [
				[
					"string",
					"Text",
					"->",
					"長さを調べる文字列"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"文字列の長さ"
				]
			],
			"Summary": "Lengthは*aString*の長さを知るために使用します。"
		},
		"Level": {
			"Syntax": "**Level**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"カレントのブレークまはたヘッダのレベル"
				]
			],
			"Summary": "Levelは、現在のブレークまたはヘッダのレベルを調べるために使用します。"
		},
		"License usage": {
			"Syntax": "**License usage** : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"使用中のライセンスについての情報を格納したオブジェクトのコレクション"
				]
			],
			"Summary": "**License usage** コマンドは、使用されているライセンスについての情報を格納したオブジェクトのコレクションを返します。"
		},
		"List item parent": {
			"Syntax": "**List item parent** ( {* ;} *list* ; *itemRef* ) : Integer<br/>**List item parent** ( * ; *list* ; * ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"演算子, 倍長整数",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: カレントのリスト項目"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"親項目の項目参照番号 または ない場合0"
				]
			],
			"Summary": "List item parent コマンドは、親項目の項目参照番号を返します。"
		},
		"List item position": {
			"Syntax": "**List item position** ( {* ;} *list* ; *itemRef* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"項目参照番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"展開/折りたたまれたリストにおける項目位置"
				]
			],
			"Summary": "List item position コマンドは、*list*に渡された項目参照番号またはオブジェクト名リスト中で、*itemRef*で指定した項目の位置を返します。"
		},
		"LIST OF CHOICE LISTS": {
			"Syntax": "**LIST OF CHOICE LISTS** ( *numsArray* ; *namesArray* )",
			"Params": [
				[
					"numsArray",
					"Integer array",
					"<-",
					"選択リスト番号"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"選択リスト名"
				]
			],
			"Summary": "LIST OF CHOICE LISTS コマンドは同期された*numsArr* と *namesArr* 配列に、デザインモードのリストエディタで定義された選択リストの番号と名前を返します。"
		},
		"LIST OF STYLE SHEETS": {
			"Syntax": "**LIST OF STYLE SHEETS** ( *arrStyleSheets* )",
			"Params": [
				[
					"arrStyleSheets",
					"Text array",
					"<-",
					"アプリケーション内の定義済みスタイルシート名一覧"
				]
			],
			"Summary": "**LIST OF STYLE SHEETS**コマンドは、*arrStyleSheets*配列にアプリケーション内のスタイルシートのリストを返します。"
		},
		"LIST TO ARRAY": {
			"Syntax": "**LIST TO ARRAY** ( *list* ; *array* {; *itemRefs*} )",
			"Params": [
				[
					"list",
					"Text, Integer",
					"->",
					"一番目の項目をコピーするコピー元のリスト"
				],
				[
					"array",
					"Array",
					"<-",
					"コピー先の配列"
				],
				[
					"itemRefs",
					"Array",
					"<-",
					"リスト項目の参照番号"
				]
			],
			"Summary": "LIST TO ARRAY コマンドは、*list* で指定したリストまたは選択リストの第一レベルの項目で、配列*array*を作成または上書きします。"
		},
		"LIST TO BLOB": {
			"Syntax": "**LIST TO BLOB** ( *list* ; *BLOB* {; *} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"BLOBに格納する階層リスト"
				],
				[
					"Blob",
					"Blob",
					"->",
					"階層リストを受け取るBLOB"
				],
				[
					"*",
					"演算子",
					"->",
					"値を追加するには*"
				]
			],
			"Summary": "LIST TO BLOB コマンドは、*blob*に階層リスト*list*を格納します。"
		},
		"LISTBOX COLLAPSE": {
			"Syntax": "**LISTBOX COLLAPSE** ( {* ;} *object* {; *recursive* {; *selector* {; *line* {; *column*}}}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)<br/>省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"recursive",
					"Boolean",
					"->",
					"True = サブレベルを折りたたむ<br/>False = サブレベルを折りたたまない"
				],
				[
					"selector",
					"Integer",
					"->",
					"折りたたむリストボックスのパーツ"
				],
				[
					"line",
					"Integer",
					"->",
					"折り畳むブレーク行の番号、または折り畳むリストボックスレベルの番号"
				],
				[
					"column",
					"Integer",
					"->",
					"折り畳むブレーク列の番号"
				]
			],
			"Summary": "LISTBOX COLLAPSE コマンドを使用して *object*と*\\** で指定したリストボックスのブレーク行を折りたたみます。"
		},
		"LISTBOX DELETE COLUMN": {
			"Syntax": "**LISTBOX DELETE COLUMN** ( {* ;} *object* ; *colPosition* {; *number*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"削除する列番号"
				],
				[
					"number",
					"Integer",
					"->",
					"削除する列数"
				]
			],
			"Summary": "LISTBOX DELETE COLUMN コマンドは、引数*object*および *\\** で指定されたリストボックスから1つ以上の列 (表示または非表示) を取り除きます。"
		},
		"LISTBOX DELETE ROWS": {
			"Syntax": "**LISTBOX DELETE ROWS** ( {* ;} *object* ; *rowPosition* {; *numRows*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"rowPosition",
					"Integer",
					"->",
					"削除する行の位置"
				],
				[
					"numRows",
					"Integer",
					"->",
					"削除する行の数"
				]
			],
			"Summary": "**LISTBOX DELETE ROWS**コマンドは、*object*引数および *\\** で指定されたリストボックスから、*rowPosition* から始まるひとつ以上の行（表示または非表示）を削除します。"
		},
		"LISTBOX DUPLICATE COLUMN": {
			"Syntax": "**LISTBOX DUPLICATE COLUMN** ( {* ;} *object* ; *colPosition* ; *colName* ; *colVariable* ; *headerName* ; *headerVar* {; *footerName* ; *footerVar*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、 Object はオブジェクト名 (文字列) 省略時、 Object は変数"
				],
				[
					"object",
					"any",
					"->",
					"複製したい列のオブジェクト名( * 指定時)、 または変数 ( * 省略時)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"新しく複製した列の位置"
				],
				[
					"colName",
					"Text",
					"->",
					"新しい列の名前"
				],
				[
					"colVariable",
					"Array, Field, Variable, Pointer",
					"->",
					"列の配列変数またはフィールド、変数"
				],
				[
					"headerName",
					"Text",
					"->",
					"列のヘッダーのオブジェクト名"
				],
				[
					"headerVar",
					"Integer, Pointer",
					"->",
					"列のヘッダーの変数"
				],
				[
					"footerName",
					"Text",
					"->",
					"列のフッターのオブジェクト名"
				],
				[
					"footerVar",
					"Variable, Pointer",
					"->",
					"列のフッターの変数"
				]
			],
			"Summary": "**LISTBOX DUPLICATE COLUMN**コマンドは、 *object* と *\\** 演算子によって指定された列を、プログラムによって実行中のフォームにおいて複製します。"
		},
		"LISTBOX EXPAND": {
			"Syntax": "**LISTBOX EXPAND** ( {* ;} *object* {; *recursive* {; *selector* {; *line* {; *column*}}}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)<br/>省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"recursive",
					"Boolean",
					"->",
					"True = サブレベルを展開<br/>False = サブレベルを展開しない"
				],
				[
					"selector",
					"Integer",
					"->",
					"展開するリストボックスのパーツ"
				],
				[
					"line",
					"Integer",
					"->",
					"展開するブレーク行の番号、または<br/>展開するリストボックスレベルの番号"
				],
				[
					"column",
					"Integer",
					"->",
					"展開するブレーク列の番号"
				]
			],
			"Summary": "LISTBOX EXPAND コマンドは*object*と*\\**で指定したリストボックスオブジェクトのブレーク行を展開するために使用します。"
		},
		"LISTBOX Get array": {
			"Syntax": "**LISTBOX Get array** ( {* ;} *object* ; *arrType* ) : Pointer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(* 指定時)、または変数(* 省略時)"
				],
				[
					"arrType",
					"Integer",
					"->",
					"配列のタイプ"
				],
				[
					"戻り値",
					"Pointer",
					"<-",
					"プロパティに関連付けられた配列へのポインター"
				]
			],
			"Summary": "**注:** このコマンドは配列型のリストボックスに対してのみ有効です。"
		},
		"LISTBOX GET ARRAYS": {
			"Syntax": "**LISTBOX GET ARRAYS** ( {* ;} *object* ; *arrColNames* ; *arrHeaderNames* ; *arrColVars* ; *arrHeaderVars* ; *arrColsVisible* ; *arrStyles* {; *arrFooterNames* ; *arrFooterVars*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"arrColNames",
					"Text array",
					"<-",
					"列オブジェクト名"
				],
				[
					"arrHeaderNames",
					"Text array",
					"<-",
					"ヘッダーオブジェクト名"
				],
				[
					"arrColVars",
					"Pointer array",
					"<-",
					"列変数へのポインターまたは列フィールドへのポインターまたはNil"
				],
				[
					"arrHeaderVars",
					"Pointer array",
					"<-",
					"ヘッダー変数へのポインター"
				],
				[
					"arrColsVisible",
					"Boolean array",
					"<-",
					"列毎の表示状態"
				],
				[
					"arrStyles",
					"Pointer array",
					"<-",
					"配列へのポインターまたは スタイル、カラー、および行管理変数またはNil"
				],
				[
					"arrFooterNames",
					"Text array",
					"<-",
					"列フッターオブジェクト名"
				],
				[
					"arrFooterVars",
					"Pointer array",
					"<-",
					"列フッター変数へのポインター"
				]
			],
			"Summary": "**LISTBOX GET ARRAYS**コマンドは一連の同期化された配列を返し、*object*引数および *\\** で指定されたリストボックスの各列（表示または非表示）に関する情報を提供します。"
		},
		"LISTBOX Get auto row height": {
			"Syntax": "**LISTBOX Get auto row height** ( {* ;} *object* ; *selector* {; *unit*} )  : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または 変数 (* 省略時)"
				],
				[
					"selector",
					"Integer",
					"->",
					"取得する高さの値:lk row min height あるいは lk row max height"
				],
				[
					"unit",
					"Integer",
					"->",
					"行の高さの最小値、あるいは最大値"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"選択された行の高さの値"
				]
			],
			"Summary": "**LISTBOX Get auto row height** コマンドは、*object* 引数および *\\** 引数を使用して指定したリストボックスオブジェクトの行の高さのカレンとの最小値あるいは最大値を返します。"
		},
		"LISTBOX GET CELL COORDINATES": {
			"Syntax": "**LISTBOX GET CELL COORDINATES** ( {* ;} *object* ; *column* ; *row* ; *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"column",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"row",
					"Integer",
					"->",
					"行番号"
				],
				[
					"left",
					"Integer",
					"<-",
					"オブジェクトの左座標"
				],
				[
					"top",
					"Integer",
					"<-",
					"オブジェクトの上の座標"
				],
				[
					"right",
					"Integer",
					"<-",
					"オブジェクトの右座標"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"オブジェクトの左座標"
				]
			],
			"Summary": "LISTBOX GET CELL COORDINATES コマンドは引数 *\\** および*object*によって指定されたリストボックス内の、*column* と *row* 引数で指定したセルの*left*、*top*、*right* および *bottom*にそれぞれ左端、上端、右端、下端の座標を(ポイント単位で)返します。"
		},
		"LISTBOX GET CELL POSITION": {
			"Syntax": "**LISTBOX GET CELL POSITION** ( {* ;} *object* {; *X* ; *Y* }; *column* ; *row* {; *colVar*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"X",
					"Real",
					"->",
					"マウスカーソルの X座標"
				],
				[
					"Y",
					"Real",
					"->",
					"マウスカーソルの Y座標"
				],
				[
					"column",
					"Integer",
					"<-",
					"列番号"
				],
				[
					"row",
					"Integer",
					"<-",
					"行番号"
				],
				[
					"colVar",
					"Pointer",
					"<-",
					"列変数へのポインタ"
				]
			],
			"Summary": "**LISTBOX GET CELL POSITION** コマンドは、*object*および *\\** で指定されたリストボックスの最後にクリックされた位置に対応する位置、あるいはキーボードアクションで選択されたセルの位置、あるいはマウスの水平・垂直座標を*column* と*row* 引数に返します。"
		},
		"LISTBOX Get column formula": {
			"Syntax": "**LISTBOX Get column formula** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"列に割り当てられたフォーミュラ"
				]
			],
			"Summary": "**LISTBOX Get column formula**コマンドは*object*と*\\** 引数で指定したリストボックス列に割り当てられたフォーミュラを返します。"
		},
		"LISTBOX Get column width": {
			"Syntax": "**LISTBOX Get column width** ( {* ;} *object* {; *minWidth* {; *maxWidth*}} )  : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"minWidth",
					"Integer",
					"<-",
					"列の最小幅 (ピクセル単位)"
				],
				[
					"maxWidth",
					"Integer",
					"<-",
					"列の最大幅 (ピクセル単位)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"列幅 (ピクセル単位)"
				]
			],
			"Summary": "LISTBOX Get column width コマンドは、*object*引数および *\\** で指定された列の幅（ピクセル単位）を返します。"
		},
		"LISTBOX Get footer calculation": {
			"Syntax": "**LISTBOX Get footer calculation** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"計算タイプ"
				]
			],
			"Summary": "**LISTBOX Get footer calculation**コマンドは*object*と*\\** 引数で指定したリストボックスのフッターエリアに割り当てられた自動計算のタイプを返します。"
		},
		"LISTBOX Get footers height": {
			"Syntax": "**LISTBOX Get footers height** ( {* ;} *object* {; *unit*} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さを指定する単位:0または省略時 = ピクセル、1 = 行"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"行の高さ"
				]
			],
			"Summary": "**LISTBOX Get footers height**コマンドは*object*と*\\** 引数で指定したリストボックスのフッター行の高さを返します。"
		},
		"LISTBOX GET GRID COLORS": {
			"Syntax": "**LISTBOX GET GRID COLORS** ( {* ;} *object* ; *hColor* ; *vColor* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"hColor",
					"Text, Integer",
					"<-",
					"横グリッドのRGBカラー値"
				],
				[
					"vColor",
					"Text, Integer",
					"<-",
					"縦グリッドのRGBカラー値"
				]
			],
			"Summary": "**LISTBOX GET GRID COLORS**コマンドは*object*と*\\** 引数で指定したリストボックスの縦横グリッドカラーをそれぞれ返します。"
		},
		"LISTBOX GET GRID": {
			"Syntax": "**LISTBOX GET GRID** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"horizontal",
					"Boolean",
					"<-",
					"True: 表示、False: 非表示"
				],
				[
					"vertical",
					"Boolean",
					"<-",
					"True: 表示、False: 非表示"
				]
			],
			"Summary": "**LISTBOX GET GRID**コマンドは*object* と *\\** 引数で指定したリストボックスオブジェクトの縦横グリッド線の表示/非表示状態をそれぞれ返します。"
		},
		"LISTBOX Get headers height": {
			"Syntax": "**LISTBOX Get headers height** ( {* ;} *object* {; *unit*} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さを指定する単位:0または省略時 = ピクセル、1 = 行"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"行の高さ"
				]
			],
			"Summary": "**LISTBOX Get headers height**コマンドは*object*と*\\** 引数で指定したリストボックスのヘッダー行の高さを返します。"
		},
		"LISTBOX GET HIERARCHY": {
			"Syntax": "**LISTBOX GET HIERARCHY** ( {* ;} *object* ; *hierarchical* {; *hierarchy*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)<br/>省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"hierarchical",
					"Boolean",
					"<-",
					"True = 階層リストボックス<br/>False = 非階層リストボックス"
				],
				[
					"hierarchy",
					"Pointer array",
					"<-",
					"ポインタの配列"
				]
			],
			"Summary": "LISTBOX GET HIERARCHY コマンドを使用して *object*と*\\**で指定したリストボックスのプロパティが階層であるかどうかを知ることができます。"
		},
		"LISTBOX Get locked columns": {
			"Syntax": "**LISTBOX Get locked columns** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)、省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"横スクロールしない列数"
				]
			],
			"Summary": "**LISTBOX Get locked columns**コマンドは*object*と *\\** 引数で指定したリストボックスで横スクロールしない列数を返します。"
		},
		"LISTBOX Get number of columns": {
			"Syntax": "**LISTBOX Get number of columns** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"列数"
				]
			],
			"Summary": "LISTBOX Get number of columns コマンドは、*object*引数および *\\** で指定されたリストボックスに存在する列（表示または非表示）の合計数を返します。"
		},
		"LISTBOX Get number of rows": {
			"Syntax": "**LISTBOX Get number of rows** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"行数"
				]
			],
			"Summary": "LISTBOX Get number of rowsコマンドは、*object*引数および *\\** で指定されたリストボックスの行の数を返します。"
		},
		"LISTBOX GET OBJECTS": {
			"Syntax": "**LISTBOX GET OBJECTS** ( {* ;} *object* ; *arrObjectNames* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、 Object はオブジェクト名(文字列)<br/>省略時、 Object は変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(* 指定時)、<br/>または変数(* 省略時)"
				],
				[
					"arrObjectNames",
					"Text array",
					"<-",
					"リストボックスを構成するサブオブジェクト名(ヘッダー、列、フッター)"
				]
			],
			"Summary": "**LISTBOX GET OBJECTS** コマンドは 、*object* と*\\** 演算子で指定したリストボックスを構成するオブジェクトの、それぞれの名前を含んだ配列を返します。"
		},
		"LISTBOX GET PRINT INFORMATION": {
			"Syntax": "**LISTBOX GET PRINT INFORMATION** ( {* ;} *object* ; *selector* ; *info* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)<br/>省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"selector",
					"Integer",
					"->",
					"取得する情報"
				],
				[
					"info",
					"Integer",
					"<-",
					"現在の値"
				]
			],
			"Summary": "LISTBOX GET PRINT INFORMATION コマンドは *object*と*\\**で指定したリストボックスオブジェクトの印刷に関連する現在の情報を返します。"
		},
		"LISTBOX Get row color as number": {
			"Syntax": "**LISTBOX Get row color as number** ( {* ;} *object* ; *row* {; *colorType*} )  : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(*指定時)、または変数(*省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"列番号"
				],
				[
					"colorType",
					"Integer",
					"->",
					"Listbox font color (デフォルト値) または Listbox background color"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カラーの値"
				]
			],
			"Summary": "**注:** このコマンドは配列型のリストボックスに対してのみ有効です。"
		},
		"LISTBOX Get row color": {
			"Syntax": "**LISTBOX Get row color** ( {* ;} *object* ; *row* {; *colorType*} )  : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、オブジェクトをオブジェクト名(文字列)で指定。省略時、オブジェクトを変数で指定"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(* 指定時)変数(* 省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"行番号"
				],
				[
					"colorType",
					"Integer",
					"->",
					"リストボックスのフォントカラー(デフォルト)またはリストボックスの背景色"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"カラー値"
				]
			],
			"Summary": "**注:** このコマンドは配列型リストボックスに対してのみ利用できます。"
		},
		"LISTBOX Get row font style": {
			"Syntax": "**LISTBOX Get row font style** ( {* ;} *object* ; *row* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(*指定時)、または変数(*省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"列番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"スタイルの値"
				]
			],
			"Summary": "**注:** このコマンドは配列型のリストボックスに対してのみ有効です。"
		},
		"LISTBOX Get row height": {
			"Syntax": "**LISTBOX Get row height** ( {* ;} *object* ; *row* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"高さの値を取得するリストボックスの行"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"行の高さ"
				]
			],
			"Summary": "**LISTBOX Get row height** コマンドは、*object* および *\\** パラメーターで指定されたリストボックスの、*row* で指定された行の高さを返します。"
		},
		"LISTBOX Get rows height": {
			"Syntax": "**LISTBOX Get rows height** ( {* ;} *object* {; *unit*} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さを表す単位: 0または省略時はピクセル、1の場合行単位"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"行の高さ"
				]
			],
			"Summary": "**LISTBOX Get rows height**コマンドは、*object*引数および *\\** で指定されたリストボックスの現在の行の高さを返します。"
		},
		"LISTBOX Get static columns": {
			"Syntax": "**LISTBOX Get static columns** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ドラッグで移動しない列数"
				]
			],
			"Summary": "**LISTBOX Get static columns**コマンドは*object* と*\\** 引数で指定したリストボックス中のドラッグで移動しない列数を返します。"
		},
		"LISTBOX GET TABLE SOURCE": {
			"Syntax": "**LISTBOX GET TABLE SOURCE** ( {* ;} *object* ; *tableNum* {; *name* {; *highlightName*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"tableNum",
					"Integer",
					"<-",
					"セレクションのテーブル番号"
				],
				[
					"name",
					"Text",
					"<-",
					"命名セレクション名 またはカレントセレクションの場合\"\""
				],
				[
					"highlightName",
					"Text",
					"<-",
					"ハイライトセット名"
				]
			],
			"Summary": "**LISTBOX GET TABLE SOURCE**コマンドを使用して、*object*と *\\** 引数で指定したリストボックスに表示されるデータの現在のソースを知ることができます。"
		},
		"LISTBOX INSERT COLUMN FORMULA": {
			"Syntax": "**LISTBOX INSERT COLUMN FORMULA** ( {* ;} *object* ; *colPosition* ; *colName* ; *formula* ; *dataType* ; *headerName* ; *headerVariable* {; *footerName* ; *footerVar*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"列挿入位置"
				],
				[
					"colName",
					"Text",
					"->",
					"列オブジェクト名"
				],
				[
					"formula",
					"Text",
					"->",
					"列に関連付ける4Dフォーミュラ"
				],
				[
					"dataType",
					"Integer",
					"->",
					"フォーミュラの結果型"
				],
				[
					"headerName",
					"Text",
					"->",
					"列ヘッダーオブジェクト名"
				],
				[
					"headerVariable",
					"Integer, Pointer",
					"->",
					"列ヘッダー変数"
				],
				[
					"footerName",
					"Text",
					"->",
					"列フッターオブジェクト名"
				],
				[
					"footerVar",
					"Variable, Pointer",
					"->",
					"列フッター変数"
				]
			],
			"Summary": "**LISTBOX INSERT COLUMN FORMULA**コマンドは、*object*引数および *\\** で指定されたリストボックスに列を挿入します。"
		},
		"LISTBOX INSERT COLUMN": {
			"Syntax": "**LISTBOX INSERT COLUMN** ( {* ;} *object* ; *colPosition* ; *colName* ; *colVariable* ; *headerName* ; *headerVar* {; *footerName* ; *footerVar*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"列の挿入場所"
				],
				[
					"colName",
					"Text",
					"->",
					"列オブジェクト名"
				],
				[
					"colVariable",
					"Array, Field, Variable, Pointer",
					"->",
					"列配列名 または フィールド または 変数"
				],
				[
					"headerName",
					"Text",
					"->",
					"列ヘッダオブジェクト名"
				],
				[
					"headerVar",
					"Integer, Pointer",
					"->",
					"列ヘッダ変数"
				],
				[
					"footerName",
					"Text",
					"->",
					"列フッターオブジェクト名"
				],
				[
					"footerVar",
					"Variable, Pointer",
					"->",
					"列フッター変数"
				]
			],
			"Summary": "**LISTBOX INSERT COLUMN**コマンドは、*object*引数および *\\** で指定されたリストボックスに列を挿入します。"
		},
		"LISTBOX INSERT ROWS": {
			"Syntax": "**LISTBOX INSERT ROWS** ( {* ;} *object* ; *rowPosition* {; *numRows*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"rowPosition",
					"Integer",
					"->",
					"行挿入位置"
				],
				[
					"numRows",
					"Integer",
					"->",
					"挿入する行数"
				]
			],
			"Summary": "**LISTBOX INSERT ROWS**コマンドは、*object*引数および *\\** で指定されたリストボックスにひとつ以上の新しい行を挿入します。"
		},
		"LISTBOX MOVE COLUMN": {
			"Syntax": "**LISTBOX MOVE COLUMN** ( {* ;} *object* ; *colPosition* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) 省略時: objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"列の新しい位置"
				]
			],
			"Summary": "**LISTBOX MOVE COLUMN**コマンドは、 *object* と *\\** によって指定された列を、プログラムによって実行中のフォームにおいて移動させます。"
		},
		"LISTBOX MOVED COLUMN NUMBER": {
			"Syntax": "**LISTBOX MOVED COLUMN NUMBER** ( {* ;} *object* ; *oldPosition* ; *newPosition* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"oldPosition",
					"Integer",
					"<-",
					"移動された列の前の位置"
				],
				[
					"newPosition",
					"Integer",
					"<-",
					"移動された列の新しい位置"
				]
			],
			"Summary": "LISTBOX MOVED COLUMN NUMBER コマンドは、引数*object*および *\\** で指定されたリストボックス内で移動された列の以前の位置*oldPosition*と新しい位置*newPosition*を返します。"
		},
		"LISTBOX MOVED ROW NUMBER": {
			"Syntax": "**LISTBOX MOVED ROW NUMBER** ( {* ;} *object* ; *oldPosition* ; *newPosition* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"oldPosition",
					"Integer",
					"<-",
					"移動された行の以前の位置"
				],
				[
					"newPosition",
					"Integer",
					"<-",
					"移動された行の新しい位置"
				]
			],
			"Summary": "LISTBOX MOVED ROW NUMBER コマンドは、引数*object*および *\\** で指定されたリストボックス内で移動された行の以前の位置*oldPosition*と新しい位置*newPosition*を返します。"
		},
		"LISTBOX SELECT BREAK": {
			"Syntax": "**LISTBOX SELECT BREAK** ( {* ;} *object* ; *row* ; *column* {; *action*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)<br/>省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"ブレーク行の番号"
				],
				[
					"column",
					"Integer",
					"->",
					"ブレーク列の番号"
				],
				[
					"action",
					"Integer",
					"->",
					"選択アクション"
				]
			],
			"Summary": "**LISTBOX SELECT BREAK** を使用して *object*と*\\**で指定したリストボックス中でブレーク行を選択できます。"
		},
		"LISTBOX SELECT ROW": {
			"Syntax": "**LISTBOX SELECT ROW** ( {* ;} *object* ; *rowPosition* {; *action*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"rowPosition",
					"Integer",
					"->",
					"選択する行番号"
				],
				[
					"action",
					"Integer",
					"->",
					"選択アクション"
				]
			],
			"Summary": "**LISTBOX SELECT ROW** コマンドは、 *object* 引数および *\\** で指定されたリストボックス内において、*position* に渡した番号の行を選択します。"
		},
		"LISTBOX SELECT ROWS": {
			"Syntax": "**LISTBOX SELECT ROWS** ( {* ;} *object* ; *selection* {; *action*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、 Object はオブジェクト名(文字列) 省略時、 Object は変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(* 指定時)、 または変数(* 省略時)"
				],
				[
					"selection",
					"Object, Collection",
					"->",
					"選択する行を指定するオブジェクトまたはコレクション"
				],
				[
					"action",
					"Integer",
					"->",
					"lk replace selection (省略時のデフォルト)、lk add to selection、lk remove from selection"
				]
			],
			"Summary": "**LISTBOX SELECT ROWS** コマンドはエンティティセレクション型リストボックス/コレクション型リストボックスにおいて、*selection* 引数で指定したエンティティまたはオブジェクトに対応する行を選択します。"
		},
		"LISTBOX SET ARRAY": {
			"Syntax": "**LISTBOX SET ARRAY** ( {* ;} *object* ; *arrType* ; *arrPtr* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(* 指定時)、または変数(* 省略時)"
				],
				[
					"arrType",
					"Integer",
					"->",
					"配列のタイプ"
				],
				[
					"arrPtr",
					"Pointer",
					"->",
					"プロパティに関連付ける配列を指定"
				]
			],
			"Summary": "**注:** このコマンドは配列型のリストボックスに対してのみ有効です。"
		},
		"LISTBOX SET AUTO ROW HEIGHT": {
			"Syntax": "**LISTBOX SET AUTO ROW HEIGHT** ( {* ;} *object* ; *selector* ; *value* ; *unit* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または 変数 (* 省略時)"
				],
				[
					"selector",
					"Integer",
					"->",
					"設定する高さの値:lk row min height あるいは lk row max height"
				],
				[
					"value",
					"Integer",
					"->",
					"行の高さの最小値、あるいは最大値"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さの値の単位: 0=ピクセル単位、1=行単位"
				]
			],
			"Summary": "**LISTBOX SET AUTO ROW HEIGHT** コマンドは、*object* 引数および *\\** 引数を使用して指定したリストボックスオブジェクトの行の高さの最小値あるいは最大値を、*value* 引数で設定します。"
		},
		"LISTBOX SET COLUMN FORMULA": {
			"Syntax": "**LISTBOX SET COLUMN FORMULA** ( {* ;} *object* ; *formula* ; *dataType* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)、省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または変数 (* 省略時)"
				],
				[
					"formula",
					"Text",
					"->",
					"列に割り当てる4Dフォーミュラ"
				],
				[
					"dataType",
					"Integer",
					"->",
					"フォーミュラの結果型"
				]
			],
			"Summary": "**LISTBOX SET COLUMN FORMULA**コマンドは*object*と*\\** 引数で指定したリストボックス列に割り当てられた*formula*を変更します。"
		},
		"LISTBOX SET COLUMN WIDTH": {
			"Syntax": "**LISTBOX SET COLUMN WIDTH** ( {* ;} *object* ; *width* {; *minWidth* {; *maxWidth*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"width",
					"Integer",
					"->",
					"列幅 (ピクセル単位)"
				],
				[
					"minWidth",
					"Integer",
					"->",
					"列の最小幅 (ピクセル単位)"
				],
				[
					"maxWidth",
					"Integer",
					"->",
					"列の最大幅 (ピクセル単位)"
				]
			],
			"Summary": "**LISTBOX SET COLUMN WIDTH** コマンドを使用し、 *object*引数および *\\** で指定されたオブジェクト（リストボックス、列、またはヘッダ）の任意の列の幅、またはすべての列の幅をプログラムから変更することができます。"
		},
		"LISTBOX SET FOOTER CALCULATION": {
			"Syntax": "**LISTBOX SET FOOTER CALCULATION** ( {* ;} *object* ; *calculation* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)、省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"calculation",
					"Integer",
					"->",
					"フッターエリアの計算タイプ"
				]
			],
			"Summary": "**LISTBOX SET FOOTER CALCULATION**コマンドは*object* と *\\** 引数で指定したリストボックスのフッターに割り当てる自動計算を設定します。"
		},
		"LISTBOX SET FOOTERS HEIGHT": {
			"Syntax": "**LISTBOX SET FOOTERS HEIGHT** ( {* ;} *object* ; *height* {; *unit*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"height",
					"Integer",
					"->",
					"行の高さ"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さを指定する単位:0または省略時 = ピクセル、1 = 行"
				]
			],
			"Summary": "**LISTBOX SET FOOTERS HEIGHT**コマンドは*object*と*\\** 引数で指定したリストボックスのフッター行の高さを変更します。"
		},
		"LISTBOX SET GRID COLOR": {
			"Syntax": "**LISTBOX SET GRID COLOR** ( {* ;} *object* ; *color* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"color",
					"Text, Integer",
					"->",
					"RGBカラー値"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"水平グリッドラインにカラーを適用"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"垂直グリッドラインにカラーを適用"
				]
			],
			"Summary": "**LISTBOX SET GRID COLOR** コマンドを使用し、 *object* 引数および *\\** で指定されたリストボックスオブジェクト上のグリッドの色を変更することができます。"
		},
		"LISTBOX SET GRID": {
			"Syntax": "**LISTBOX SET GRID** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"True = 表示, False = 非表示"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"True = 表示, False = 非表示"
				]
			],
			"Summary": "**LISTBOX SET GRID**コマンドを使用し、*object*引数および *\\** で指定されたリストボックスのグリッドを構成する、横および縦グリッドラインを表示、または非表示に設定することができます。"
		},
		"LISTBOX SET HEADERS HEIGHT": {
			"Syntax": "**LISTBOX SET HEADERS HEIGHT** ( {* ;} *object* ; *height* {; *unit*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"height",
					"Integer",
					"->",
					"ヘッダーの高さ"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さを指定する単位:0または省略時 = ピクセル、1 = 行"
				]
			],
			"Summary": "**LISTBOX SET HEADERS HEIGHT**コマンドは*object*と*\\** 引数で指定したリストボックスのヘッダー行の高さを変更します。"
		},
		"LISTBOX SET HIERARCHY": {
			"Syntax": "**LISTBOX SET HIERARCHY** ( {* ;} *object* ; *hierarchical* {; *hierarchy*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)<br/>省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"hierarchical",
					"Boolean",
					"->",
					"True = 階層リストボックス<br/>False = 非階層リストボックス"
				],
				[
					"hierarchy",
					"Pointer array",
					"->",
					"ポインタの配列"
				]
			],
			"Summary": "LISTBOX SET HIERARCHY コマンドを使用して*object*と*\\**で指定されたリストボックスを階層モードにするか非階層モードにするか設定できます。"
		},
		"LISTBOX SET LOCKED COLUMNS": {
			"Syntax": "**LISTBOX SET LOCKED COLUMNS** ( {* ;} *object* ; *numColumns* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"横スクロールしない列の数"
				]
			],
			"Summary": "**LISTBOX SET LOCKED COLUMNS**コマンドは*object* と*\\** 引数で指定したリストボックスで左端からはじめて*numColumns*列をロックします。"
		},
		"LISTBOX SET ROW COLOR": {
			"Syntax": "**LISTBOX SET ROW COLOR** ( {* ;} *object* ; *row* ; *color* {; *colorType*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(*指定時)、または変数(*省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"列番号"
				],
				[
					"color",
					"Text, Integer",
					"->",
					"RGBカラー"
				],
				[
					"colorType",
					"Integer",
					"->",
					"Listbox font color(デフォルトの値) またはListbox background color"
				]
			],
			"Summary": "**注:** このコマンドは配列型のリストボックスに対してのみ有効です。"
		},
		"LISTBOX SET ROW FONT STYLE": {
			"Syntax": "**LISTBOX SET ROW FONT STYLE** ( {* ;} *object* ; *row* ; *style* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(*指定時)、または変数(*省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"列番号"
				],
				[
					"style",
					"Integer",
					"->",
					"フォントスタイル"
				]
			],
			"Summary": "**注:** このコマンドは配列型のリストボックスに対してのみ有効です。"
		},
		"LISTBOX SET ROW HEIGHT": {
			"Syntax": "**LISTBOX SET ROW HEIGHT** ( {* ;} *object* ; *row* ; *height* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"row",
					"Integer",
					"->",
					"高さを指定するリストボックスの行"
				],
				[
					"height",
					"Integer",
					"->",
					"行の高さ"
				]
			],
			"Summary": "**LISTBOX SET ROW HEIGHT** コマンドは、*object* および *\\** パラメーターで指定されたリストボックスの、*row* で指定された行の高さを変更します。"
		},
		"LISTBOX SET ROWS HEIGHT": {
			"Syntax": "**LISTBOX SET ROWS HEIGHT** ( {* ;} *object* ; *height* {; *unit*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"height",
					"Integer",
					"->",
					"行の高さ"
				],
				[
					"unit",
					"Integer",
					"->",
					"高さを表す単位: 0または省略時はピクセル、1の場合行単位"
				]
			],
			"Summary": "**LISTBOX SET ROWS HEIGHT**コマンドを使用すると、*object*引数および *\\** で指定されたリストボックス内の行の高さをプログラムで変更することができます。"
		},
		"LISTBOX SET STATIC COLUMNS": {
			"Syntax": "**LISTBOX SET STATIC COLUMNS** ( {* ;} *object* ; *numColumn* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"numColumn",
					"Integer",
					"->",
					"ドラッグで移動しない列数"
				]
			],
			"Summary": "**LISTBOX SET STATIC COLUMNS**コマンドは*object* と *\\** 引数で指定したリストボックス中のスタティック列の数を左端から*numColumns*に設定します。"
		},
		"LISTBOX SET TABLE SOURCE": {
			"Syntax": "**LISTBOX SET TABLE SOURCE** ( {* ;} *object* ; tableNum | name {; *highlightName*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"tableNum &#124; name",
					"倍長整数, 文字",
					"->",
					"カレントセレクションが使用されるテーブル番号 または使用される命名セレクション"
				],
				[
					"highlightName",
					"Text",
					"->",
					"ハイライトセットの名前"
				]
			],
			"Summary": "**LISTBOX SET TABLE SOURCE**コマンドは、*\\** と *object* 引数で指定されるリストボックスに表示されるデータのソースを変更するために使用します。"
		},
		"LISTBOX SORT COLUMNS": {
			"Syntax": "**LISTBOX SORT COLUMNS** ( {* ;} *object* ; *colNum* ; *order* {; *colNum2* ; *order2* ; ... ; *colNumN* ; *orderN*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"colNum",
					"Integer",
					"->",
					"並び替える列番号"
				],
				[
					"order",
					"*",
					"->",
					"\">\": 昇順ソート または \"<\": 降順ソート"
				]
			],
			"Summary": "LISTBOX SORT COLUMNS コマンドは、1つ以上の列の値に基づいて、*object* 引数および*\\**で指定されたリストボックスの行に対して、標準の並べ替えを適用します。"
		},
		"Load 4D View document": {
			"Syntax": "**Load 4D View document** ( *4DViewDocument* ) : Object",
			"Params": [
				[
					"4DViewDocument",
					"Blob",
					"->",
					"4D View ドキュメント"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D View ドキュメントの情報を格納したオブジェクト"
				]
			],
			"Summary": "**Load 4D View document** コマンドを使用すると、4D View ドキュメントを4D オブジェクトへと変換することができます。"
		},
		"Load list": {
			"Syntax": "**Load list** ( *listName* ) : Integer",
			"Params": [
				[
					"listName",
					"Text",
					"->",
					"デザインモードのリストエディタで 作成されたリスト名"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"新しく作成されたリストのリスト参照番号"
				]
			],
			"Summary": "Load list は、*listName*で指定した名前のリストのコピーを作成し、そのリスト参照番号を返します。"
		},
		"LOAD RECORD": {
			"Syntax": "**LOAD RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードをロードするテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "LOAD RECORDは、*aTable*のカレントレコードをロードします。"
		},
		"LOAD SET": {
			"Syntax": "**LOAD SET** ( {*aTable* ;} *set* ; *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セットの属しているテーブル、または 省略時、デフォルトテーブル"
				],
				[
					"set",
					"Text",
					"->",
					"作成するセットの名前"
				],
				[
					"document",
					"Text",
					"->",
					"セットを保存したドキュメントの名前"
				]
			],
			"Summary": "LOAD SETコマンドは、SAVE SETコマンドでディスクに保存した*document*からセットをメモリに復元します。"
		},
		"LOAD VARIABLES": {
			"Syntax": "**LOAD VARIABLES** ( *document* ; *variable* {; *variable2* ; ... ; *variableN*} )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"4D変数を保存したドキュメント"
				],
				[
					"variable",
					"Variable",
					"<-",
					"値を受け取る変数"
				]
			],
			"Summary": "LOAD VARIABLES コマンドは、*document*によって指定されたドキュメントから1つまたはいくつかの変数を読み込みます。"
		},
		"Localized document path": {
			"Syntax": "**Localized document path** ( *relativePath* ) : Text",
			"Params": [
				[
					"relativePath",
					"Text",
					"->",
					"ローカライズされたバージョンを取得したいドキュメントの相対パス名"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ローカライズされたドキュメントの絶対パス名"
				]
			],
			"Summary": "Localized document path コマンドはxxx."
		},
		"Localized string": {
			"Syntax": "**Localized string** ( *resName* ) : Text",
			"Params": [
				[
					"resName",
					"Text",
					"->",
					"resname属性値"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"カレントランゲージで resNameによって指定された文字列の値"
				]
			],
			"Summary": "Localized stringコマンドは、*resName*の属性によって指定された、カレントランゲージの文字列を返します。"
		},
		"LOCKED BY": {
			"Syntax": "**LOCKED BY** ( {*aTable* ;} *process* ; *4Duser* ; *sessionUser* ; *processName* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードロックをテストするテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"process",
					"Integer",
					"<-",
					"プロセス参照番号"
				],
				[
					"4Duser",
					"Text",
					"<-",
					"4Dユーザ名"
				],
				[
					"sessionUser",
					"Text",
					"<-",
					"ワークセッションを開いているユーザ"
				],
				[
					"processName",
					"Text",
					"<-",
					"プロセス名"
				]
			],
			"Summary": "LOCKED BY は、レコードをロックしたユーザやプロセスに関する情報を返します。"
		},
		"Locked records info": {
			"Syntax": "**Locked records info** ( *aTable* ) : Object",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"ロックされたレコードの情報を取得したいテーブル"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ロックされたレコードの詳細(あれば)"
				]
			],
			"Summary": "**Locked records info** コマンドは、*aTable* で指定したテーブル内で現在ロックされているレコードについての様々な情報を含んだobject を返します。"
		},
		"Locked": {
			"Syntax": "**Locked** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"ロックを検証するレコードが属するテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE: レコードはロックされている FALSE: レコードはロックされていない"
				]
			],
			"Summary": "**Locked**は、*aTable*のカレントレコードがロックされているかを調べます。"
		},
		"LOG EVENT": {
			"Syntax": "**LOG EVENT** ( {*outputType* ;} *message* {; *importance*} )",
			"Params": [
				[
					"outputType",
					"Integer",
					"->",
					"メッセージの出力タイプ"
				],
				[
					"message",
					"Text",
					"->",
					"メッセージの内容"
				],
				[
					"importance",
					"Integer",
					"->",
					"メッセージの重要度レベル"
				]
			],
			"Summary": "**LOG EVENT**コマンドを使用して、アプリケーションの使用中に発生した内部イベントを記録するためのカスタマイズされたシステムを設定します。"
		},
		"LOG FILE TO JSON": {
			"Syntax": "**LOG FILE TO JSON** ( *destFolderPath* {; *maxSize* {; *logPath* {; *fieldAtt*}}} )",
			"Params": [
				[
					"destFolderPath",
					"Text",
					"->",
					"保存されているファイルの保存先フォルダへのパス"
				],
				[
					"maxSize",
					"Integer",
					"->",
					"作成するJSONファイルの最大サイズ(バイト単位)"
				],
				[
					"logPath",
					"Text",
					"->",
					"書き出すログファイルのパス名; 省略時はカレントログファイルを使用"
				],
				[
					"fieldAtt",
					"Integer",
					"->",
					"フィールド詳細属性: 1 = 数字を使用(デフォルト)、2 = 名前を使用"
				]
			],
			"Summary": "**LOG FILE TO JSON**コマンドはカレントログファイル、または指定されたログファイルを、JSONフォーマットで保存します。"
		},
		"Log file": {
			"Syntax": "**Log file**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"データベースログファイルのロング名"
				]
			],
			"Summary": "**Log file**コマンドは、開いているデータベースのカレントログファイルのロング名（ファイル名を含むファイルの完全パス名）を返します。"
		},
		"Log": {
			"Syntax": "**Log** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"自然対数を求める数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"自然対数値"
				]
			],
			"Summary": "Log は*number*の自然対数を返します。"
		},
		"LONGINT ARRAY FROM SELECTION": {
			"Syntax": "**LONGINT ARRAY FROM SELECTION** ( *aTable* ; *recordArray* {; *selection*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントセレクションのテーブル"
				],
				[
					"recordArray",
					"Integer array",
					"<-",
					"レコード番号配列"
				],
				[
					"selection",
					"Text",
					"->",
					"命名セレクション名、または 省略した場合カレントセレクション"
				]
			],
			"Summary": "LONGINT ARRAY FROM SELECTION コマンドは、*selection*の（絶対）レコード番号を*recordArray*に返します。"
		},
		"LONGINT TO BLOB": {
			"Syntax": "**LONGINT TO BLOB** ( *longint* ; *blob* ; *byteOrder* {; offset } )<br/>**LONGINT TO BLOB** ( *longint* ; *blob* ; *byteOrder* {; *} )",
			"Params": [
				[
					"longint",
					"Integer",
					"->",
					"BLOBに書き込む倍長整数値"
				],
				[
					"Blob",
					"Blob",
					"->",
					"倍長整数値を受け取るBLOB"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset &#124; *",
					"変数, 演算子",
					"<->",
					"BLOB内のオフセット (バイト単位) または値を追加する場合 *"
				],
				[
					"",
					"",
					"",
					"*でない場合、書き込み後の新しいオフセット"
				]
			],
			"Summary": "LONGINT TO BLOB コマンドは、*blob*に4バイトの*longint*値を書き込みます。"
		},
		"Lowercase": {
			"Syntax": "**Lowercase** ( *aString* {; *} ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"英小文字に変換する文字列"
				],
				[
					"*",
					"演算子",
					"->",
					"渡した場合アクセントを保持"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"英小文字の文字列"
				]
			],
			"Summary": "Lowercaseは、*aString*を取りアルファベット文字列をすべて英小文字に変換して返します。"
		},
		"Macintosh command down": {
			"Syntax": "**Macintosh command down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"MacintoshのCommandキーのステータス (Windowsの場合は、Ctrlキー)"
				]
			],
			"Summary": "Macintosh command downはMacintoshのcommandキーが押されているとTrueを返します。"
		},
		"Macintosh control down": {
			"Syntax": "**Macintosh control down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"MacintoshのControlキーのステータス"
				]
			],
			"Summary": "Macintosh control down コマンドはMacintoshのControlキーが押されているとTrueを返します。"
		},
		"Macintosh option down": {
			"Syntax": "**Macintosh option down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"Macintosh Optionキーの状態 (Windows上ではAltキー)"
				]
			],
			"Summary": "Macintosh option down はMacintoshのoptionキーが押されているとTrueを返します。"
		},
		"Match regex": {
			"Syntax": "**Match regex** ( *pattern* ; *aString* ; *start* {; pos_found ; length_found}{; *} ) -> 戻り値 <br/>\n**Match regex** ( *pattern* ; *aString* ) -> 戻り値",
			"Params": [
				[
					"pattern",
					"Text",
					"->",
					"通常の式"
				],
				[
					"aString",
					"Text",
					"->",
					"検索が実行される文字列"
				],
				[
					"start",
					"Integer",
					"->",
					"aStringで検索が開始する位置"
				],
				[
					"pos_found",
					"Integer array, Integer",
					"<-",
					"オカレンスの位置"
				],
				[
					"length_found",
					"Integer array, Integer",
					"<-",
					"オカレンスの長さ"
				],
				[
					"*",
					"演算子",
					"->",
					"渡された場合、示された位置で検索するのみ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 検索がオカレンスを発見した場合 その他の場合はFalse"
				],
				[
					"Match regex ( pattern ; aString ) -> 戻り値"
				],
				[
					"引数",
					"型",
					"説明"
				],
				[
					"pattern",
					"Text",
					"->",
					"通常の式(完全に一致)"
				],
				[
					"aString",
					"Text",
					"->",
					"検索が行われる文字列"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 検索でオカレンスが見つかった; それ以外の場合にはFalse"
				]
			],
			"Summary": "Match regexコマンドを使用して、 \"正規表現\" と呼ばれるメタ言語で合成された規則のセットと文字列が一致しているかを確認します。"
		},
		"Max": {
			"Syntax": "**Max** ( *series* {; *attributePath*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"最大値を求めるデータ"
				],
				[
					"attributePath",
					"Text",
					"->",
					"最大値を取得したい属性のパス"
				],
				[
					"戻り値",
					"Number, Date",
					"<-",
					"series中の最大値"
				]
			],
			"Summary": "**Max**は、*series*中の最大値を返します。"
		},
		"MAXIMIZE WINDOW": {
			"Syntax": "**MAXIMIZE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号、または省略時は すべてのカレントプロセス最前面ウィンドウ (Windows) またはカレントプロセスの最前面ウィンドウ (macOS)"
				]
			],
			"Summary": "MAXIMIZE WINDOW コマンドは、*window*に渡された参照番号のウィンドウを最大化します。"
		},
		"MEMORY STATISTICS": {
			"Syntax": "**MEMORY STATISTICS** ( *infoType* ; *arrNames* ; *arrValues* ; *arrCount* )",
			"Params": [
				[
					"infoType",
					"Integer",
					"->",
					"取得する情報のセレクター"
				],
				[
					"arrNames",
					"Text array",
					"<-",
					"情報のタイトル"
				],
				[
					"arrValues",
					"Real array",
					"<-",
					"情報の値"
				],
				[
					"arrCount",
					"Real array",
					"<-",
					"関連するオブジェクトの数 (利用可能な場合)"
				]
			],
			"Summary": "**MEMORY STATISTICS**コマンドは、4Dのデータキャッシュの利用に関する情報を取得します。"
		},
		"Menu bar height": {
			"Syntax": "**Menu bar height**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"メニューバーの高さ(ピクセル単位) (メニューバーが表示されていない場合には0)"
				]
			],
			"Summary": "Menu bar height はメニューバーの高さをピクセル数で返します。"
		},
		"Menu bar screen": {
			"Syntax": "**Menu bar screen**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"メニューバーが表示されている画面の番号"
				]
			],
			"Summary": "Menu bar screen はメニューバーが表示されている画面の番号を返します。"
		},
		"Menu selected": {
			"Syntax": "**Menu selected** {( *subMenu* )} : Integer",
			"Params": [
				[
					"subMenu",
					"Text",
					"<-",
					"選択された項目を含むメニューの参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"選択されたメニューコマンド 上位バイトにメニュー番号 下位バイトにメニュー項目番号"
				]
			],
			"Summary": "**Menu selected** はフォームが表示されているときのみ使用できます。"
		},
		"MESSAGE": {
			"Syntax": "**MESSAGE** ( *message* )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"表示するメッセージ"
				]
			],
			"Summary": "MESSAGE コマンドは、通常ユーザに対して何らかの動作を知らせるために使用します。"
		},
		"MESSAGES OFF": {
			"Syntax": "**MESSAGES OFF**",
			"Params": [],
			"Summary": "MESSAGES OFF および MESSAGES ON コマンドは、時間のかかる処理を行っている際に4Dが表示する進捗インジケータの表示/非表示を切り替えます。"
		},
		"MESSAGES ON": {
			"Syntax": "**MESSAGES ON**",
			"Params": [],
			"Summary": "MESSAGES OFF コマンドの説明を参照してください。"
		},
		"Method called on error": {
			"Syntax": "**Method called on error** {( *scope* )} : Text",
			"Params": [
				[
					"scope",
					"Integer",
					"->",
					"エラーメソッドのスコープ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"エラー時に呼び出されるメソッド名"
				]
			],
			"Summary": "**Method called on error** コマンドはカレントプロセス、または*scope* 引数で指定したスコープにおいてON ERR CALL コマンドでインストールされたメソッドの名前を返します。"
		},
		"Method called on event": {
			"Syntax": "**Method called on event**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"イベント発生時に呼び出されるメソッド名"
				]
			],
			"Summary": "Method called on event コマンドは、ON EVENT CALLコマンドでインストールされたメソッド名を返します。"
		},
		"METHOD Get attribute": {
			"Syntax": "**METHOD Get attribute** ( *path* ; *attribType* {; *} ) : Boolean",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"プロジェクトメソッドのパス"
				],
				[
					"attribType",
					"Integer",
					"->",
					"取得する属性タイプ"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: 属性が選択されている、False: 選択されていない"
				]
			],
			"Summary": "**METHOD Get attribute**コマンドは*path*引数で指定されたプロジェクトメソッドの*attribType*属性値を返します。"
		},
		"METHOD GET ATTRIBUTES": {
			"Syntax": "**METHOD GET ATTRIBUTES** ( *path* ; *attributes* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドのパス"
				],
				[
					"attributes",
					"Object, Object array",
					"<-",
					"選択したメソッドの属性"
				],
				[
					"*",
					"演算子",
					"->",
					"指定すると、コマンドはコンポーネントから実行されたときにホストデータベースへと適用されます<br/>(このコンテキスト外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET ATTRIBUTES** コマンドは、*path* で指定されたメソッドのすべての属性のカレント値を *attributes* に返します。"
		},
		"METHOD GET CODE": {
			"Syntax": "**METHOD GET CODE** ( *path* ; *code* {; *option*} {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドパスを格納したテキストまたはテキスト配列"
				],
				[
					"code",
					"Text, Text配列",
					"<-",
					"指定したメソッドのコード"
				],
				[
					"option",
					"Integer",
					"->",
					"0 または省略時 = 単純な書き出し(トークンなし)、1 = トークンを使用して書き出し"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET CODE**コマンドは*path*引数で指定したメソッドの内容を*code*に返します。"
		},
		"METHOD GET COMMENTS": {
			"Syntax": "**METHOD GET COMMENTS** ( *path* ; *comments* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドパスを格納したテキストまたはテキスト配列"
				],
				[
					"comments",
					"Text, Text配列",
					"<-",
					"メソッドのコメント"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドをホストデータベースに適用する (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET COMMENTS**コマンドは*path*引数で指定したメソッドのドキュメンテーションを*comments*引数に返します。"
		},
		"METHOD GET FOLDERS": {
			"Syntax": "**METHOD GET FOLDERS** ( *arrNames* {; *filter*}{; *} )",
			"Params": [
				[
					"arrNames",
					"Text array",
					"<-",
					"ホームページのフォルダー名配列"
				],
				[
					"filter",
					"Text",
					"->",
					"名前フィルター"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET FOLDERS**コマンドは4Dエクスプローラーのホームページに作成されたフォルダー名を*arrNames*配列に返します。"
		},
		"METHOD GET MODIFICATION DATE": {
			"Syntax": "**METHOD GET MODIFICATION DATE** ( *path* ; *modDate* ; *modTime* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドパスを格納したテキストまたはテキスト配列"
				],
				[
					"modDate",
					"Date, Date配列",
					"<-",
					"メソッド更新日"
				],
				[
					"modTime",
					"Time, Integer array",
					"<-",
					"メソッド更新時刻"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET MODIFICATION DATE**コマンドは*path*引数で指定されたメソッドの更新日と時刻をそれぞれ*modDate*と*modTime*引数に返します。"
		},
		"METHOD GET NAMES": {
			"Syntax": "**METHOD GET NAMES** ( *arrNames* {; *filter*}{; *} )",
			"Params": [
				[
					"arrNames",
					"Text array",
					"<-",
					"プロジェクトメソッド名配列"
				],
				[
					"filter",
					"Text",
					"->",
					"名前フィルター"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET NAMES**コマンドはアプリケーション中のプロジェクトメソッドの名前を*arrNames*配列に返します。"
		},
		"METHOD Get path": {
			"Syntax": "**METHOD Get path** ( *methodType* {; *aTable*}{; *objectName*{; *formObjectName*}}{; *} ) : Text",
			"Params": [
				[
					"methodType",
					"Integer",
					"->",
					"オブジェクトタイプセレクターを指定"
				],
				[
					"aTable",
					"Table",
					"->",
					"テーブル参照"
				],
				[
					"objectName",
					"Text",
					"->",
					"フォームまたはメソッド名"
				],
				[
					"formObjectName",
					"Text",
					"<-",
					"フォームオブジェクト名"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"オブジェクトのフルパス"
				]
			],
			"Summary": "**METHOD Get path**コマンドはメソッドの完全な内部パス名を返します。"
		},
		"METHOD GET PATHS FORM": {
			"Syntax": "**METHOD GET PATHS FORM** ( {*aTable* ;} *arrPaths* {; *filter*}{; *stamp*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"テーブル参照"
				],
				[
					"arrPaths",
					"Text array",
					"<-",
					"メソッドパスと名前の配列"
				],
				[
					"filter",
					"Text",
					"->",
					"名前フィルター"
				],
				[
					"stamp",
					"Real",
					"->",
					"スタンプの最小値"
				],
				[
					"<-",
					"新しい現在値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET PATHS FORM**コマンドはすべてのフォームオブジェクトとフォームメソッドの内部的なパス名と名前を*arrPaths*配列に返します。"
		},
		"METHOD GET PATHS": {
			"Syntax": "**METHOD GET PATHS** ( {*folderName* ;} *methodType* ; *arrPaths* {; *stamp*}{; *} )",
			"Params": [
				[
					"folderName",
					"Text",
					"->",
					"ホームページのフォルダー名"
				],
				[
					"methodType",
					"Integer",
					"->",
					"取得するメソッドタイプセレクター"
				],
				[
					"arrPaths",
					"Text array",
					"<-",
					"メソッドパスおよび名前の配列"
				],
				[
					"stamp",
					"Real",
					"->",
					"スタンプの最小値"
				],
				[
					"<-",
					"新しい現在値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD GET PATHS**コマンドはアプリケーションのうち、*methodType*引数で指定したタイプであるメソッドの内部的なパス名と名前を*arrPaths*配列に返します。"
		},
		"METHOD OPEN PATH": {
			"Syntax": "**METHOD OPEN PATH** ( *path* {; *line*}{; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"開くメソッドのパス"
				],
				[
					"line",
					"Number",
					"->",
					"Line number"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD OPEN PATH**コマンドは内部パス名が*path* 引数であるメソッドを4Dメソッドエディターで開きます。"
		},
		"METHOD RESOLVE PATH": {
			"Syntax": "**METHOD RESOLVE PATH** ( *path* ; *methodType* ; *ptrTable* ; *objectName* ; *formObjectName* {; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"解決するパス"
				],
				[
					"methodType",
					"Integer",
					"<-",
					"オブジェクトタイプセレクター"
				],
				[
					"ptrTable",
					"Pointer",
					"<-",
					"テーブル参照"
				],
				[
					"objectName",
					"Text",
					"<-",
					"フォームまたはデータベースメソッド名"
				],
				[
					"formObjectName",
					"Text",
					"<-",
					"フォームオブジェクト名"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドはホストデータベースに適用される (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD RESOLVE PATH**コマンドは*path*引数に渡された内部パス名を解決し、*methodType*、*ptrTable*、*objectName*、そして *formObjectName*引数にそれぞれ情報を返します。"
		},
		"METHOD SET ACCESS MODE": {
			"Syntax": "**METHOD SET ACCESS MODE** ( *mode* )",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"ロックされたオブジェクトのアクセスモード"
				]
			],
			"Summary": "**METHOD SET ACCESS MODE**コマンドは他のユーザーやプロセスによって更新のためにさきにロードされているオブジェクトに書き込みアクセスを行おうとした時の振る舞いを設定します。"
		},
		"METHOD SET ATTRIBUTE": {
			"Syntax": "**METHOD SET ATTRIBUTE** ( *path* ; *attribType* ; *attribValue* {; *attribType2* ; *attribValue2* ; ... ; *attribTypeN* ; *attribValueN*}{; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"プロジェクトメソッドのパス"
				],
				[
					"attribType",
					"Integer",
					"->",
					"属性タイプ"
				],
				[
					"attribValue",
					"Boolean, Text",
					"->",
					"True: 属性を選択False: 属性の選択解除"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドをホストデータベースに適用する (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD SET ATTRIBUTE**コマンドは*path*引数で指定されたプロジェクトメソッドの*attribType*属性の値を設定します。"
		},
		"METHOD SET ATTRIBUTES": {
			"Syntax": "**METHOD SET ATTRIBUTES** ( *path* ; *attributes* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドのパス"
				],
				[
					"attributes",
					"Object, Object array",
					"->",
					"メソッドに対して設定する属性"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントから実行された場合、コマンドをホストデータベースに適用する<br/>(このコンテキスト外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD SET ATTRIBUTES** コマンドは、*path* 引数で指定したメソッドの、*attributes* 引数で指定した値を設定することができます。"
		},
		"METHOD SET CODE": {
			"Syntax": "**METHOD SET CODE** ( *path* ; *code* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドパスを格納したテキストまたはテキスト配列"
				],
				[
					"code",
					"Text, Text配列",
					"->",
					"指定したメソッドのコード"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドをホストデータベースに適用する (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD SET CODE**コマンドは*path*引数で指定したメソッドのコードを*code*引数に渡した内容で置き換えます。"
		},
		"METHOD SET COMMENTS": {
			"Syntax": "**METHOD SET COMMENTS** ( *path* ; *comments* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text配列",
					"->",
					"メソッドパスを格納したテキストまたはテキスト配列"
				],
				[
					"comments",
					"Text, Text配列",
					"->",
					"メソッドに設定するコメント"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = コンポーネントで実行されたとき、コマンドをホストデータベースに適用する (コンポーネントのコンテキスト以外ではこの引数は無視されます)"
				]
			],
			"Summary": "**METHOD SET COMMENTS**コマンドは*path*引数で指定したメソッドのドキュメンテーションを*comments*引数の内容で置き換えます。"
		},
		"Milliseconds": {
			"Syntax": "**Milliseconds**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"マシンが起動されてからの 経過ミリ秒数"
				]
			],
			"Summary": "Milliseconds は、マシンが起動されてから経過したミリ秒 (1/1000秒) 数を返します。"
		},
		"Min": {
			"Syntax": "**Min** ( *series* {; *attributePath*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"最小値を求めるデータ"
				],
				[
					"attributePath",
					"Text",
					"->",
					"最小値を取得したい属性のパス"
				],
				[
					"戻り値",
					"Number, Date",
					"<-",
					"series中の最小値"
				]
			],
			"Summary": "**Min**は、*series*中の最小値を返します。"
		},
		"MINIMIZE WINDOW": {
			"Syntax": "**MINIMIZE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号、または省略時は すべてのカレントプロセス最前面ウィンドウ (Windows) またはカレントプロセスの最前面ウィンドウ (macOS)"
				]
			],
			"Summary": "MINIMIZE WINDOW コマンドは、*window*に渡された参照番号のウィンドウサイズを、最大化される前に戻します。"
		},
		"MOBILE APP REFRESH SESSIONS": {
			"Syntax": "**MOBILE APP REFRESH SESSIONS**",
			"Params": [],
			"Summary": "**MOBILE APP REFRESH SESSIONS** コマンドは、サーバーのMobileApps フォルダ内にある全てのモバイルアプリセッションファイルをチェックし、編集されたファイルに対してメモリ内にある既存のセッションのコンテンツを更新します。"
		},
		"Mod": {
			"Syntax": "**Mod** ( *number1* ; *number2* ) : Real",
			"Params": [
				[
					"number1",
					"Integer",
					"->",
					"除算される数値"
				],
				[
					"number2",
					"Integer",
					"->",
					"除算する数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"余り"
				]
			],
			"Summary": "**Mod**コマンドは、*number1*を*number2*で割り算し、その余りの整数を返します。"
		},
		"Modified record": {
			"Syntax": "**Modified record** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードが修正されているかテストするテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: レコードは修正されている False: レコードは修正されていない"
				]
			],
			"Summary": "**Modified record** は、*aTable*のレコードが更新されたが保存されていない場合にTrueを返します。"
		},
		"Modified": {
			"Syntax": "**Modified** ( *aField* ) : Boolean",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"テストするフィールド"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"フィールドに新しい値が代入されていればTrue, そうでなければFalse"
				]
			],
			"Summary": "**Modified** はデータ入力中、プログラムを使用して*field* に値が代入されていたり、データ入力中に値が編集された場合に、Trueを返します。"
		},
		"MODIFY RECORD": {
			"Syntax": "**MODIFY RECORD** ( {*aTable*}{;}{*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"データ入力に使用するテーブル, または 省略した場合デフォルトテーブル"
				],
				[
					"*",
					"Operator",
					"->",
					"スクロールバーを隠す"
				]
			],
			"Summary": "MODIFY RECORDコマンドは、*aTable*テーブルまたは*aTable*引数を省略した場合デフォルトテーブルのカレントレコードを修正するために使用します。"
		},
		"MODIFY SELECTION": {
			"Syntax": "**MODIFY SELECTION** ( {*aTable*}{; *selectMode*}{; *enterList*}{; *}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"表示および更新を行うテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"selectMode",
					"Integer",
					"->",
					"選択モード"
				],
				[
					"enterList",
					"Boolean",
					"->",
					"リスト入力を許可するオプション"
				],
				[
					"*",
					"Operator",
					"->",
					"1レコードセレクションの場合にも出力フォームを使用し、 入力フォームのスクロールバーを隠す"
				],
				[
					"*",
					"Operator",
					"->",
					"入力フォームでスクロールバーを表示する (最初の*の2番目のオプションを上書きする)"
				]
			],
			"Summary": "MODIFY SELECTIONは、DISPLAY SELECTIONとほぼ同じ機能を提供します。"
		},
		"Monitored activity": {
			"Syntax": "**Monitored activity**  : Collection",
			"Params": [
				[
					"戻り値",
					"Collection",
					"<-",
					"モニターしているアクティビティのコレクション"
				]
			],
			"Summary": "**Monitored activity** コマンドは、START MONITORING ACTIVITY コマンドによって設定された詳細に応じて記録されたオペレーションを表すオブジェクトのコレクションを返します。"
		},
		"Month of": {
			"Syntax": "**Month of** ( *aDate* ) : Integer",
			"Params": [
				[
					"aDate",
					"Date",
					"->",
					"月を取り出す日付"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"日付の月を示す数値"
				]
			],
			"Summary": "Month of コマンドは*aDate*の月を返します。"
		},
		"MOUSE POSITION": {
			"Syntax": "**MOUSE POSITION** ( *mouseX* ; *mouseY* ; *mouseButton* {; *} )",
			"Params": [
				[
					"mouseX",
					"Real",
					"<-",
					"マウスの水平座標"
				],
				[
					"mouseY",
					"Real",
					"<-",
					"マウスの垂直座標"
				],
				[
					"mouseButton",
					"Integer",
					"<-",
					"マウスボタンンのステータス 0 = 何もしていない 1 = ボタンの押下 2 = 右マウスボタンの押下 3 = 両方のボタンの押下"
				],
				[
					"*",
					"演算子",
					"->",
					"指定した場合、グローバルの座標システムが使用される。 省略した場合、ローカルの座標システムが使用される"
				]
			],
			"Summary": "MOUSE POSITION コマンドは、マウスの現在の状態を返します。"
		},
		"MOVE DOCUMENT": {
			"Syntax": "**MOVE DOCUMENT** ( *srcPathname* ; *dstPathname* )",
			"Params": [
				[
					"srcPathname",
					"Text",
					"->",
					"既存ドキュメントへの完全なパス名"
				],
				[
					"dstPathname",
					"Text",
					"->",
					"移動先のパス名"
				]
			],
			"Summary": "MOVE DOCUMENTコマンドを使用して、ドキュメントを移動、ドキュメント名を変更します。"
		},
		"MULTI SORT ARRAY": {
			"Syntax": "**MULTI SORT ARRAY** ( *array* {; *sort*}{; *array2* ; *sort2* ; ... ; *arrayN* ; *sortN*} ) <br/>\n**MULTI SORT ARRAY** ( *ptrArrayName* ; *sortArrayName* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"ソートする配列"
				],
				[
					"sort",
					"*",
					"->",
					"\">\" : 昇順ソート, または \"<\" : 降順ソート, または 省略した場合、ソートしない"
				],
				[
					"ptrArrayName",
					"Pointer array",
					"->",
					"配列ポインタの配列"
				],
				[
					"sortArrayName",
					"Integer array",
					"->",
					"ソート順配列 (1 = 昇順にソート、-1 = 降順にソート、0 = 前のソートに同期)"
				]
			],
			"Summary": "**MULTI SORT ARRAY** コマンドにより、一連の配列に対してマルチレベルソートを実行することができます。"
		},
		"New data key": {
			"Syntax": "**New data key** ( *passPhrase* ) : Object",
			"Params": [
				[
					"passPhrase",
					"Text",
					"->",
					"AESデータ暗号化キーを生成するために使用するパスフレーズ"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"キーを格納しているオブジェクト(encodedKeyプロパティに格納)"
				]
			],
			"Summary": "**New data key** コマントは、*passPhrase* 引数に渡されたパスフレーズのテキストからバイナリーデータの暗号化キーを生成します。"
		},
		"New list": {
			"Syntax": "**New list**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"リスト参照番号"
				]
			],
			"Summary": "New list は、新しい空の階層リストをメモリに作成し、ユニークなリスト参照番号を返します。"
		},
		"New object": {
			"Syntax": "**New object** {( *property* ; *value* {; *property2* ; *value2* ; ... ; *propertyN* ; *valueN*} )} : Object",
			"Params": [
				[
					"property",
					"Text",
					"->",
					"作成するプロパティ名"
				],
				[
					"value",
					"any",
					"->",
					"プロパティの値"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"新しいランゲージオブジェクト"
				]
			],
			"Summary": "**New object** コマンドは新しい空の、あるいは事前に値が入れられたオブジェクトを作成し、その参照を返します。"
		},
		"New process": {
			"Syntax": "**New process** ( *method* ; *stack* {; *name* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"method",
					"Text",
					"->",
					"プロセスで実行させるメソッド"
				],
				[
					"stack",
					"Integer",
					"->",
					"スタックサイズ (バイト)"
				],
				[
					"name",
					"Text",
					"->",
					"作成するプロセスの名前"
				],
				[
					"param",
					"Expression",
					"->",
					"メソッドに渡す引数"
				],
				[
					"*",
					"演算子",
					"->",
					"重複しないプロセス"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"新規に作成されたプロセス番号 または既存のプロセス番号"
				]
			],
			"Summary": "New process コマンドは、(同じマシン上で) 新しいプロセスを開始し、そのプロセス参照番号を返します。"
		},
		"New shared object": {
			"Syntax": "**New shared object** {( *property* ; *value* {; *property2* ; *value2* ; ... ; *propertyN* ; *valueN*} )} : Object",
			"Params": [
				[
					"property",
					"Text",
					"->",
					"作成するプロパティ名"
				],
				[
					"value",
					"Text, Date, Boolean, Pointer, Number, Object",
					"->",
					"プロパティの値"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"新しい共有オブジェクト"
				]
			],
			"Summary": "**New shared object** コマンドは新しい空の、あるいは値が入れられた共有オブジェクトを作成し、その参照を返します。"
		},
		"NEXT RECORD": {
			"Syntax": "**NEXT RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードをセレクションの次のレコードに 移動するテーブル、省略時はデフォルトテーブル"
				]
			],
			"Summary": "NEXT RECORDは、カレントプロセスの*aTable*のカレントセレクションにある次のレコードへカレントレコードポインタを移動します。"
		},
		"Next window": {
			"Syntax": "**Next window** ( *window* ) : Integer",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ウィンドウ参照番号"
				]
			],
			"Summary": "Next window コマンドは、*window* に渡したウィンドウの後ろにあるウィンドウの参照番号を、ウィンドウの重なり順に基づき、返します。"
		},
		"NO DEFAULT TABLE": {
			"Syntax": "**NO DEFAULT TABLE**",
			"Params": [],
			"Summary": "**NO DEFAULT TABLE** コマンドを使用して、DEFAULT TABLE コマンドの動作を無効にします。"
		},
		"Not": {
			"Syntax": "**Not** ( *boolean* ) : Boolean",
			"Params": [
				[
					"boolean",
					"Boolean",
					"->",
					"否定を求めるブール値"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"反対のブール値"
				]
			],
			"Summary": "Not は、*boolean*の否定を返します。"
		},
		"NOTIFY RESOURCES FOLDER MODIFICATION": {
			"Syntax": "**NOTIFY RESOURCES FOLDER MODIFICATION**",
			"Params": [],
			"Summary": "NOTIFY RESOURCES FOLDER MODIFICATION コマンドを使用して、接続されたすべての4D マシンに、**Resources**フォルダが更新された旨の通知の送信を、4D Server に強制することができます。"
		},
		"Null": {
			"Syntax": "**Null**  : Null",
			"Params": [
				[
					"戻り値",
					"Null",
					"<-",
					"Null値"
				]
			],
			"Summary": "**Null** は、Null 型の値**null** を返します。"
		},
		"OB Class": {
			"Syntax": "**OB Class** ( *object* ) : any",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"クラスを返してほしいオブジェクト"
				],
				[
					"戻り値",
					"Null, Object",
					"<-",
					"オブジェクトのクラス"
				]
			],
			"Summary": "**OB Class** コマンドは*object* 引数のクラスを返します。"
		},
		"OB Copy": {
			"Syntax": "**OB Copy** ( *object* {; resolvePtrs } )  : Object<br/>**OB Copy** ( *object* {; *option* {; *groupWith*}} )  : Object",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"resolvePtrs",
					"Boolean",
					"->",
					"True = ポインターを解決<br/>False または省略時 = ポインターを解決しない"
				],
				[
					"option",
					"Integer",
					"->",
					"ck shared: 共有オブジェクトを返すck resolve pointers: コピーの前にポインターを解決する"
				],
				[
					"groupWith",
					"Collection, Object",
					"->",
					"返されるオブジェクトが所属することになる共有コレクションまたは共有オブジェクト"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"複製されたオブジェクト"
				]
			],
			"Summary": "**OB Copy**コマンドは、 *object*のプロパティ、オブジェクト内オブジェクト、値を内包した完全なコピー(ディープコピー)のオブジェクトを返します。"
		},
		"OB Entries": {
			"Syntax": "**OB Entries** ( *object* ) : Collection",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"コンテンツを返すオブジェクト"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"キー/値プロパティを格納したオブジェクトのコレクション"
				]
			],
			"Summary": "**OB Entries** コマンドは*object* 引数で指定したオブジェクトのコンテンツを、キー/値のペアとして格納したオブジェクトのコレクションを返します。"
		},
		"OB GET ARRAY": {
			"Syntax": "**OB GET ARRAY** ( *object* ; *property* ; *array* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"情報を取得したいプロパティ名"
				],
				[
					"array",
					"Text array, Real array, Boolean array, Object array, Pointer array, Integer array",
					"<-",
					"プロパティの値の配列"
				]
			],
			"Summary": "**OB GET ARRAY**コマンドは、 *object* 引数で指定したランゲージオブジェクトの、*property* 引数で指定したプロパティの中に保存されている値の配列を *array* という配列に返します。"
		},
		"OB GET PROPERTY NAMES": {
			"Syntax": "**OB GET PROPERTY NAMES** ( *object* ; *arrProperties* {; *arrTypes*} )",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"arrProperties",
					"Text array",
					"<-",
					"プロパティ名"
				],
				[
					"arrTypes",
					"Integer array",
					"<-",
					"プロパティの型"
				]
			],
			"Summary": "**OB GET PROPERTY NAMES**コマンドは、 *object* 引数で指定したランゲージオブジェクトの中に含まれているプロパティの名前を、 *arrProperties* という名前のテキスト配列に入れて返します。"
		},
		"OB Get type": {
			"Syntax": "**OB Get type** ( *object* ; *property* ) : Integer",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"読み出したいプロパティ名"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"プロパティの値のタイプ"
				]
			],
			"Summary": "**OB Get type**コマンドは、*object* で指定したランゲージオブジェクトの *property* に関連付けられた値の型を返します。"
		},
		"OB Get": {
			"Syntax": "**OB Get** ( *object* ; *property* {; *type*} ) : any",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"情報を取得したいプロパティ名"
				],
				[
					"type",
					"Integer",
					"->",
					"値を変換したい型"
				],
				[
					"戻り値",
					"any",
					"<-",
					"プロパティのカレントの値"
				]
			],
			"Summary": "**OB Get**コマンドは、 *object* 引数で指定したオブジェクトの *property* のカレントの値を返します。"
		},
		"OB Instance of": {
			"Syntax": "**OB Instance of** ( *object* ; *class* ) : Boolean",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"クラスをテストするオブジェクト"
				],
				[
					"class",
					"Object",
					"->",
					"属しているかをテストするクラス"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"オブジェクトが指定されたクラスまたはその子クラスに属する場合にはTrue、それ以外の場合にはfalse"
				]
			],
			"Summary": "**OB Instance of** コマンドは*object* 引数のオブジェクトが*class* 引数で指定されたクラスまたはその子クラスに属していればtrue を、それ以外の場合にはfalse を返します。"
		},
		"OB Is defined": {
			"Syntax": "**OB Is defined** ( *object* {; *property*} ) : Boolean",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"指定時にはプロパティをチェック、省略時にはオブジェクトをチェック"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"property 省略時:object が定義済みの場合はTrue を、それ以外は False を返す<br/>property 指定時:property が定義済みの場合はTrue を、それ以外は False を返す"
				]
			],
			"Summary": "**OB Is defined**コマンドは、*object* または *property* が定義済みである場合にはTrueを返し、それ以外の場合にはFalseを返します。"
		},
		"OB Is empty": {
			"Syntax": "**OB Is empty** ( *object* ) : Boolean",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"object が空か未定義のときには True 、それ以外のときには False"
				]
			],
			"Summary": "**OB Is empty**コマンドは、*object* が未定義か空である場合にはTrueを返し、*object* が定義済み(初期化済み)で少なくとも一つのプロパティを内包している場合にはFalseを返します。"
		},
		"OB Is shared": {
			"Syntax": "**OB Is shared** ( *toCheck* ) : Boolean",
			"Params": [
				[
					"toCheck",
					"Object, Collection",
					"->",
					"チェックするオブジェクトまたはコレクション"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"オブジェクトまたはコレクションが共有可能であればTrue、編集可能であればFalse"
				]
			],
			"Summary": "**OB Is shared** コマンドは*toCheck* 引数のオブジェクトまたはコレクションが共有の場合には**True** を返します。"
		},
		"OB Keys": {
			"Syntax": "**OB Keys** ( *object* ) : Collection",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"プロパティ名を返すオブジェクト"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"プロパティ名(文字列)のコレクション"
				]
			],
			"Summary": "**OB Keys** コマンドは、*object* 引数で指定したオブジェクト内の列挙可能な全てのプロパティ名を文字列として格納したコレクションを返します。"
		},
		"OB REMOVE": {
			"Syntax": "**OB REMOVE** ( *object* ; *property* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"削除したいプロパティの名前"
				]
			],
			"Summary": "**OB REMOVE**コマンドは、*object* 引数で指定したランゲージオブジェクトの、 *property* 引数で指定したプロパティを削除します。"
		},
		"OB SET ARRAY": {
			"Syntax": "**OB SET ARRAY** ( *object* ; *property* ; *array* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"設定したいプロパティ名"
				],
				[
					"array",
					"Array, Variable",
					"->",
					"プロパティに保存したい配列"
				]
			],
			"Summary": "**OB SET ARRAY**コマンドは、 *object* 引数で指定したランゲージオブジェクトの中の *property* と関連付ける配列 *array* を定義します。"
		},
		"OB SET NULL": {
			"Syntax": "**OB SET NULL** ( *object* ; *property* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"null 値を適用したいプロパティ名"
				]
			],
			"Summary": "**OB SET NULL**コマンドは、*object* 引数で指定したランゲージオブジェクトの中に**null値**を保存します。"
		},
		"OB SET": {
			"Syntax": "**OB SET** ( *object* ; *property* ; *value* {; *property2* ; *value2* ; ... ; *propertyN* ; *valueN*} )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"構造化されたオブジェクト"
				],
				[
					"property",
					"Text",
					"->",
					"設定したいプロパティの名前"
				],
				[
					"value",
					"Expression",
					"->",
					"プロパティの新しい値"
				]
			],
			"Summary": "**OB SET**コマンドは、 *object* 引数で指定したランゲージオブジェクトの中に、一つ以上の *プロパティ*/*値* のペアを作成もしくは変更します。"
		},
		"OB Values": {
			"Syntax": "**OB Values** ( *object* ) : Collection",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"プロパティ値を取得したいオブジェクト"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"プロパティ値の(バリアント型の)コレクション"
				]
			],
			"Summary": "**OB Values** コマンドは、*object* 引数で指定したオブジェクトの内の列挙可能なプロパティの値を格納したバリアントのコレクションを返します。"
		},
		"OBJECT DUPLICATE": {
			"Syntax": "**OBJECT DUPLICATE** ( {* ;} *object* {; *newName* {; *newVar* {; *boundTo* {; *moveH* {; *moveV* {; *resizeH* {; *resizeV*}}}}}}} {; *} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字列)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (*指定時)、または変数やフィールド (*省略時)"
				],
				[
					"newName",
					"Text",
					"->",
					"新しいオブジェクトの名前"
				],
				[
					"newVar",
					"Pointer",
					"->",
					"新しいオブジェクトの変数へのポインター"
				],
				[
					"boundTo",
					"Text",
					"->",
					"直前の入力順の入力可能オブジェクトまたはラジオボタングループ"
				],
				[
					"moveH",
					"Integer",
					"->",
					"新しいオブジェクトの横シフト (>0 = 右方向, <0 = 左方向)"
				],
				[
					"moveV",
					"Integer",
					"->",
					"新しいオブジェクトの縦シフト (>0 = 下方向, <0 = 上方向)"
				],
				[
					"resizeH",
					"Integer",
					"->",
					"オブジェクトの横リサイズ"
				],
				[
					"resizeV",
					"Integer",
					"->",
					"新しいオブジェクトの縦リサイズ"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時= 絶対座標, 省略時= 相対座標"
				]
			],
			"Summary": "**OBJECT DUPLICATE**コマンドを使用して、*object*引数で指定したオブジェクトのコピーを作成できます。"
		},
		"OBJECT Get action": {
			"Syntax": "**OBJECT Get action** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"関連付けられた標準アクション名と(あれば)引数の文字列"
				]
			],
			"Summary": "**OBJECT Get action** コマンドは*object* 引数と*\\** 引数によって指定されたオブジェクトに割り当てられた標準アクションの名前と引数(あれば)を返します。"
		},
		"OBJECT Get auto spellcheck": {
			"Syntax": "**OBJECT Get auto spellcheck** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 自動スペルチェックFalse = 自動スペルチェックなし"
				]
			],
			"Summary": "**OBJECT Get auto spellcheck**コマンドは*object*と*\\** 引数で指定したオブジェクトのカレントプロセスの自動スペルチェックオプションに関する設定値を返します。"
		},
		"OBJECT GET BEST SIZE": {
			"Syntax": "**OBJECT GET BEST SIZE** ( {* ;} *object* ; *bestWidth* ; *bestHeight* {; *maxWidth*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"bestWidth",
					"Integer",
					"<-",
					"最適オブジェクト幅"
				],
				[
					"bestHeight",
					"Integer",
					"<-",
					"最適オブジェクト高さ"
				],
				[
					"maxWidth",
					"Integer",
					"->",
					"最大オブジェクト幅"
				]
			],
			"Summary": "**OBJECT GET BEST SIZE** コマンドは、引数 *\\** と *object*で指定されたフォームオブジェクトの“最適な”幅と高さを、引数*bestWidth* と *bestHeight*に返します。"
		},
		"OBJECT Get border style": {
			"Syntax": "**OBJECT Get border style** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字列)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (*指定時)、または変数やフィールド (*省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"境界線スタイル"
				]
			],
			"Summary": "**OBJECT Get border style**コマンドは、*object*引数で指定したオブジェクトに設定された境界線スタイルを返します。"
		},
		"OBJECT Get context menu": {
			"Syntax": "**OBJECT Get context menu** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = コンテキストメニュー有効、False = コンテキストメニュー無効"
				]
			],
			"Summary": "**OBJECT Get context menu**コマンドは、引数 *object* と *\\** で指定したオブジェクトの、\"コンテキストメニュー\"オプションのカレントの状態を返します。"
		},
		"OBJECT GET COORDINATES": {
			"Syntax": "**OBJECT GET COORDINATES** ( {* ;} *object* ; *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"left",
					"Integer",
					"<-",
					"オブジェクトの左座標"
				],
				[
					"top",
					"Integer",
					"<-",
					"オブジェクトの上座標"
				],
				[
					"right",
					"Integer",
					"<-",
					"オブジェクトの右座標"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"オブジェクトの下座標"
				]
			],
			"Summary": "OBJECT GET COORDINATES コマンドは、引数 *\\** および*object*によって指定された、現在のフォームのオブジェクトの*left*, *top*, *right* および *bottom*の座標 (ポイント) を返します。"
		},
		"OBJECT Get corner radius": {
			"Syntax": "**OBJECT Get corner radius** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列) 省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)、またはフィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"丸い角の半径(ピクセル単位)"
				]
			],
			"Summary": "**OBJECT Get corner radius** コマンドは*object* 引数で指定されたオブジェクトの角の半径のカレントの値を返します。"
		},
		"OBJECT Get data source": {
			"Syntax": "**OBJECT Get data source** ( {* ;} *object* ) : Pointer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)<br/>省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Pointer",
					"<-",
					"オブジェクトのカレントデータソースに対するポインター"
				]
			],
			"Summary": "**OBJECT Get data source**コマンドは、引数 *object* と *\\** で指定したオブジェクトの、カレントのデータソースを返します。"
		},
		"OBJECT GET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT GET DRAG AND DROP OPTIONS** ( {* ;} *object* ; *draggable* ; *automaticDrag* ; *droppable* ; *automaticDrop* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"draggable",
					"Boolean",
					"<-",
					"ドラッグ可能ならTrue、そうでなければFalse"
				],
				[
					"automaticDrag",
					"Boolean",
					"<-",
					"自動ドラッグならTrue、そうでなければFalse"
				],
				[
					"droppable",
					"Boolean",
					"<-",
					"ドロップ可能ならTrue、そうでなければFalse"
				],
				[
					"automaticDrop",
					"Boolean",
					"<-",
					"自動ドロップ可能ならTrue、そうでなければFalse"
				]
			],
			"Summary": "**OBJECT GET DRAG AND DROP OPTIONS**コマンドは*object*と*\\** 引数で指定したオブジェクトのカレントプロセスのドラッグ＆ドロップオプションを返します。"
		},
		"OBJECT Get enabled": {
			"Syntax": "**OBJECT Get enabled** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = オブジェクトは有効; そうでなければFalse"
				]
			],
			"Summary": "OBJECT Get enabled コマンドは *object*で指定されたオブジェクトまたはオブジェクトグループがフォーム中で有効ならTrueを、無効ならFalseを返します。"
		},
		"OBJECT Get enterable": {
			"Syntax": "**OBJECT Get enterable** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 入力可; そうでなければ false"
				]
			],
			"Summary": "OBJECT Get enterable コマンドはobjectで指定されたオブジェクトまたはオブジェクトグループが**入力可属性**を持つ場合にTrueを、そうでなければFalseを返します。"
		},
		"OBJECT GET EVENTS": {
			"Syntax": "**OBJECT GET EVENTS** ( {* ;} *object* ; *arrEvents* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"arrEvents",
					"Integer array",
					"<-",
					"Array of enabled events"
				]
			],
			"Summary": "**OBJECT GET EVENTS**コマンドは、引数 *object* と *\\** で指定したオブジェクトの、フォームイベントのカレントの設定を取得します。"
		},
		"OBJECT Get filter": {
			"Syntax": "**OBJECT Get filter** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"フィルター名"
				]
			],
			"Summary": "OBJECT Get filter コマンドは *object*で指定されたオブジェクトまたはオブジェクトグループに割り当てられたフィルターの名前を返します。"
		},
		"OBJECT Get focus rectangle invisible": {
			"Syntax": "**OBJECT Get focus rectangle invisible** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = フォーカスの四角を隠すFalse = フォーカスの四角を表示する"
				]
			],
			"Summary": "**OBJECT Get focus rectangle invisible**コマンドは*object* と *\\** 引数で指定したオブジェクトのフォーカスの四角に関するカレントプロセス内の表示オプションを返します。"
		},
		"OBJECT Get font size": {
			"Syntax": "**OBJECT Get font size** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または、フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ポイント単位のフォントサイズ"
				]
			],
			"Summary": "OBJECT Get font size コマンドは*object*で指定されたフォームオブジェクトで使用されている文字フォントのサイズをポイント単位で返します。"
		},
		"OBJECT Get font style": {
			"Syntax": "**OBJECT Get font style** ( * ; *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) 、<br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)、またはフィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"フォントスタイル"
				]
			],
			"Summary": "OBJECT Get font style コマンドは、*object*で指定されたフォームオブジェクトで使用されている文字フォントの現在のスタイルを返します。"
		},
		"OBJECT Get font": {
			"Syntax": "**OBJECT Get font** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または、フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"フォント名"
				]
			],
			"Summary": "**OBJECT Get font**コマンドは *object*指定されたフォームオブジェクトで使用されている文字フォントの名前を返します。"
		},
		"OBJECT Get format": {
			"Syntax": "**OBJECT Get format** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"オブジェクト表示フォーマット"
				]
			],
			"Summary": "**OBJECT Get format** コマンドは、*object*引数で指定されたオブジェクトに適用された現在の表示フォーマットを返します。"
		},
		"OBJECT Get help tip": {
			"Syntax": "**OBJECT Get help tip** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"オブジェクトのヘルプメッセージ"
				]
			],
			"Summary": "**OBJECT Get help tip**コマンドは*object* と*\\** 引数で指定したオブジェクトに割り当てられたカレントプロセスのヘルプメッセージを返します。"
		},
		"OBJECT Get horizontal alignment": {
			"Syntax": "**OBJECT Get horizontal alignment** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"整列コード"
				]
			],
			"Summary": "**OBJECT Get horizontal alignment**コマンドは、引数*object*および *\\** で指定されたオブジェクトに適用された整列タイプを示すコードを返します。"
		},
		"OBJECT Get indicator type": {
			"Syntax": "**OBJECT Get indicator type** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"インジケータータイプ"
				]
			],
			"Summary": "**OBJECT Get indicator type**コマンドは、引数 *object* と *\\** で指定したサーモメーターに割り当てられた、カレントのインジケーターの型を返します。"
		},
		"OBJECT Get keyboard layout": {
			"Syntax": "**OBJECT Get keyboard layout** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"レイアウトのランゲージコード、\"\" = レイアウトなし"
				]
			],
			"Summary": "**OBJECT Get keyboard layout**コマンドは*object* と *\\** 引数で指定したオブジェクトにカレントプロセスで割り当てられたカレントキーボードレイアウトを返します。"
		},
		"OBJECT Get list name": {
			"Syntax": "**OBJECT Get list name** ( {* ;} *object* {; *listType*} ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"listType",
					"Integer",
					"->",
					"Type of list: Choice list, Required list or Excluded list"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"(デザインモードで指定された) 選択リストの名前"
				]
			],
			"Summary": "OBJECT Get list name コマンドは *object*で指定されたオブジェクトまたはオブジェクトグループに割り当てられた選択リストの名前を返します。"
		},
		"OBJECT Get list reference": {
			"Syntax": "**OBJECT Get list reference** ( {* ;} *object* {; *listType*} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"listType",
					"Integer",
					"->",
					"リストの種類:選択リスト、指定リスト、除外リスト"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"リストの参照番号"
				]
			],
			"Summary": "**OBJECT Get list reference**コマンドは、引数 *object* と *\\** で指定したオブジェクトまたはオブジェクトのグループに関連付けられた階層リストの参照番号(ListRef)を返します。"
		},
		"OBJECT GET MAXIMUM VALUE": {
			"Syntax": "**OBJECT GET MAXIMUM VALUE** ( {* ;} *object* ; *maxValue* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"maxValue",
					"Date, Time, Number",
					"<-",
					"オブジェクトのカレントの最大値"
				]
			],
			"Summary": "**OBJECT GET MAXIMUM VALUE**コマンドは、引数 *object* と *\\** で指定したオブジェクトのカレントの最大値を、 *maxValue* 変数の中に返します。"
		},
		"OBJECT GET MINIMUM VALUE": {
			"Syntax": "**OBJECT GET MINIMUM VALUE** ( {* ;} *object* ; *minValue* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"minValue",
					"Date, Time, Number",
					"<-",
					"オブジェクトのカレントの最小値"
				]
			],
			"Summary": "**OBJECT GET MINIMUM VALUE**コマンドは、引数 *object* と *\\** で指定したオブジェクトの最小値を、 *minValue* 変数の中に返します。"
		},
		"OBJECT Get multiline": {
			"Syntax": "**OBJECT Get multiline** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"複数行の状態"
				]
			],
			"Summary": "**OBJECT Get multiline**コマンドは、引数 *object* と *\\** で指定したオブジェクトの、\"複数行\"のオプションのカレントの状態を返します。"
		},
		"OBJECT Get name": {
			"Syntax": "**OBJECT Get name** {( *selector* )} : Text",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"オブジェクトカテゴリ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"オブジェクトの名前"
				]
			],
			"Summary": "OBJECT Get name コマンドはフォームオブジェクトの名前を返します。"
		},
		"OBJECT Get placeholder": {
			"Syntax": "**OBJECT Get placeholder** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"オブジェクトと関連付けられたプレースホルダーテキスト"
				]
			],
			"Summary": "**OBJECT Get placeholder**コマンドは、引数 *object* と *\\** で指定したオブジェクトと関連付けられたプレースホルダーテキストを返します。"
		},
		"OBJECT Get pointer": {
			"Syntax": "**OBJECT Get pointer** {( *selector* {; *objectName* {; *subformName*}})} : Pointer",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"オブジェクトカテゴリ"
				],
				[
					"objectName",
					"Text",
					"->",
					"オブジェクト名"
				],
				[
					"subformName",
					"Text",
					"->",
					"サブフォームオブジェクト名"
				],
				[
					"戻り値",
					"Pointer",
					"<-",
					"オブジェクト変数へのポインタ"
				]
			],
			"Summary": "**OBJECT Get pointer**コマンドはフォームオブジェクトの変数へのポインタを返します。"
		},
		"OBJECT GET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT GET PRINT VARIABLE FRAME** ( {* ;} *object* ; *variableFrame* {; *fixedSubform*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"variableFrame",
					"Boolean",
					"<-",
					"True = 可変長フレームを使用、False = 固定長フレームを使用"
				],
				[
					"fixedSubform",
					"Integer",
					"<-",
					"固定長フレーム時のサブフォームに対するオプション"
				]
			],
			"Summary": "**OBJECT GET PRINT VARIABLE FRAME**コマンドは、引数 *object* と *\\** で指定したオブジェクトの印刷時可変オプションのカレントの設定を取得します。"
		},
		"OBJECT GET RESIZING OPTIONS": {
			"Syntax": "**OBJECT GET RESIZING OPTIONS** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"horizontal",
					"Integer",
					"<-",
					"横リサイズオプション"
				],
				[
					"vertical",
					"Integer",
					"<-",
					"縦リサイズオプション"
				]
			],
			"Summary": "**OBJECT GET RESIZING OPTIONS**コマンドは*object*と*\\** 引数で指定したオブジェクトのカレントプロセスのリサイズオプションを返します。"
		},
		"OBJECT GET RGB COLORS": {
			"Syntax": "**OBJECT GET RGB COLORS** ( {* ;} *object* ; *foregroundColor* {; *backgroundColor* {; *altBackgrndColor*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"foregroundColor",
					"Text, Integer",
					"<-",
					"描画色のRGBカラー値"
				],
				[
					"backgroundColor",
					"Text, Integer",
					"<-",
					"背景色のRGBカラー値"
				],
				[
					"altBackgrndColor",
					"Text, Integer",
					"<-",
					"奇数行の色のRGBカラー値"
				]
			],
			"Summary": "OBJECT GET RGB COLORS コマンドは*object*で指定されたオブジェクトまたはオブジェクトグループの描画色や背景色を返します。"
		},
		"OBJECT GET SCROLL POSITION": {
			"Syntax": "**OBJECT GET SCROLL POSITION** ( {* ;} *object* ; *vPosition* {; *hPosition*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数、フィールドまたはテーブル (* 省略時)"
				],
				[
					"vPosition",
					"Integer",
					"<-",
					"表示されている最初の行数、または ピクセル単位の縦スクロール (ピクチャ)"
				],
				[
					"hPosition",
					"Integer",
					"<-",
					"表示されている最初の列数、または<br/>ピクセル単位の横スクロール (ピクチャ)"
				]
			],
			"Summary": "OBJECT GET SCROLL POSITION は*object*で指定されたフォームオブジェクトの、スクロールバーの位置に関連する情報を*vPosition*と*hPosition*引数に返します。"
		},
		"OBJECT GET SCROLLBAR": {
			"Syntax": "**OBJECT GET SCROLLBAR** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または、フィールドまたは変数 (* 省略時)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"<-",
					"True=表示, False=非表示"
				],
				[
					"vertical",
					"Boolean, Integer",
					"<-",
					"True=表示, False=非表示"
				]
			],
			"Summary": "OBJECT GET SCROLLBAR コマンドは、*object*で指定されたオブジェクトまたはオブジェクトグループの縦横スクロールバーの表示/非表示状態を知るために使用します。"
		},
		"OBJECT GET SHORTCUT": {
			"Syntax": "**OBJECT GET SHORTCUT** ( {* ;} *object* ; *key* ; *modifiers* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"key",
					"Text",
					"<-",
					"オブジェクトに割り当てられたキー"
				],
				[
					"modifiers",
					"Integer",
					"<-",
					"モディファイアーキーマスクまたはマスクの組み合わせ"
				]
			],
			"Summary": "**OBJECT GET SHORTCUT**コマンドは*object*と*\\**引数で指定されたオブジェクトに割り当てられたカレントプロセスのキーボードショートカットを返します。"
		},
		"OBJECT Get style sheet": {
			"Syntax": "**OBJECT Get style sheet** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"スタイルシート名"
				]
			],
			"Summary": "**OBJECT Get style sheet**コマンドは、引数 *object* と *\\** で指定したオブジェクトに関連付けられたスタイルシートの名前を返します。"
		},
		"OBJECT GET SUBFORM CONTAINER SIZE": {
			"Syntax": "**OBJECT GET SUBFORM CONTAINER SIZE** ( *width* ; *height* )",
			"Params": [
				[
					"width",
					"Integer",
					"<-",
					"サブフォームオブジェクトの幅"
				],
				[
					"height",
					"Integer",
					"<-",
					"サブフォームオブジェクトの高さ"
				]
			],
			"Summary": "**OBJECT GET SUBFORM CONTAINER SIZE**コマンドは親フォーム中に表示されているカレントサブフォームオブジェクトの幅と高さをピクセル単位で返します。"
		},
		"OBJECT Get subform container value": {
			"Syntax": "**OBJECT Get subform container value**  : any",
			"Params": [
				[
					"戻り値",
					"any",
					"<-",
					"サブフォームコンテナデータソースのカレントの値"
				]
			],
			"Summary": "**OBJECT Get subform container value** コマンドは親フォームに表示されたサブフォームコンテナにバインドされたデータソースのカレントの値を返します。"
		},
		"OBJECT GET SUBFORM": {
			"Syntax": "**OBJECT GET SUBFORM** ( {* ;} *object* ; *tablePtr* ; *detailSubform* {; *listSubform*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"tablePtr",
					"Table",
					"<-",
					"フォームが属するテーブルへのポインター"
				],
				[
					"detailSubform",
					"Text",
					"<-",
					"サブフォームの詳細フォーム名"
				],
				[
					"listSubform",
					"Text",
					"<-",
					"サブフォームのリストフォーム名 (テーブルフォーム)"
				]
			],
			"Summary": "**OBJECT GET SUBFORM**コマンドは*object*と*\\**引数で指定したサブフォームオブジェクトに関連付けられたフォームの名前を返します。"
		},
		"OBJECT Get text orientation": {
			"Syntax": "**OBJECT Get text orientation** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"テキストの回転角度"
				]
			],
			"Summary": "**OBJECT Get text orientation**コマンドは、引数 *object* と *\\** で指定したオブジェクトのテキストに適用されたカレントの方向の値を返します。"
		},
		"OBJECT Get three states checkbox": {
			"Syntax": "**OBJECT Get three states checkbox** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = スリーステートチェックボックス、False = 標準のチェックボックス"
				]
			],
			"Summary": "**OBJECT Get three states checkbox**コマンドは、引数 *object* と *\\** で指定したチェックボックスの\"スリーステート\"プロパティの、カレントの状態を返します。"
		},
		"OBJECT Get title": {
			"Syntax": "**OBJECT Get title** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字)、省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または、フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ボタンのタイトル"
				]
			],
			"Summary": "OBJECT Get titleコマンドは *object*で指定されたフォームオブジェクトのタイトル (ラベル) を返します。"
		},
		"OBJECT Get type": {
			"Syntax": "**OBJECT Get type** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"オブジェクトのタイプ"
				]
			],
			"Summary": "**OBJECT Get type**コマンドは、カレントフォーム内の、引数 *object* と *\\** で指定したオブジェクトのタイプを返します。"
		},
		"OBJECT Get value": {
			"Syntax": "**OBJECT Get value** ( *objectName* ) : any",
			"Params": [
				[
					"objectName",
					"Text",
					"->",
					"オブジェクト名"
				],
				[
					"戻り値",
					"any",
					"<-",
					"フォームオブジェクトのデータソースのカレント値"
				]
			],
			"Summary": "**OBJECT Get value** コマンドは、*objectName* 引数で指定されたフォームオブジェクトのデータソースのカレント値を返します。"
		},
		"OBJECT Get vertical alignment": {
			"Syntax": "**OBJECT Get vertical alignment** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"行揃えのタイプ"
				]
			],
			"Summary": "**OBJECT Get vertical alignment**コマンドは*object* と*\\** 引数で指定したオブジェクトのテキスト縦位置タイプを示す値を返します。"
		},
		"OBJECT Get visible": {
			"Syntax": "**OBJECT Get visible** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = オブジェクトは表示; そうでなければFalse"
				]
			],
			"Summary": "OBJECT Get visible コマンドは *object*で指定されたオブジェクトまたはオブジェクトグループが 表示属性を持っていればTrueを、そうでなければFalseを返します。"
		},
		"OBJECT Is styled text": {
			"Syntax": "**OBJECT Is styled text** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:objectはオブジェクト名(文字列)省略時:objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(* 指定時)、または変数(* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"オブジェクトがマルチスタイルテキストであれば True 、そうでなければ False"
				]
			],
			"Summary": "**OBJECT Is styled text**コマンドは、 *object* と *\\** によって指定されたオブジェクトの\"マルチスタイル\"オプションにチェックが入っているときに **True** を返します。"
		},
		"OBJECT MOVE": {
			"Syntax": "**OBJECT MOVE** ( {* ;} *object* ; *moveH* ; *moveV* {; *resizeH* {; *resizeV* {; *}}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"moveH",
					"Integer",
					"->",
					"オブジェクトの水平移動量 (>0 = 右方向, <0 =左方向)"
				],
				[
					"moveV",
					"Integer",
					"->",
					"オブジェクトの垂直移動量 (>0 = 下方向, <0 = 上方向)"
				],
				[
					"resizeH",
					"Integer",
					"->",
					"オブジェクトの水平方向へのサイズ変更値"
				],
				[
					"resizeV",
					"Integer",
					"->",
					"オブジェクトの垂直方向へのサイズ変更値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = 絶対座標 省略時 = 相対座標"
				]
			],
			"Summary": "OBJECT MOVEコマンドは、 *\\** と*object*引数で指定されたカレントフォーム内のオブジェクトを、水平方向に*moveH*ピクセル、垂直方向に*moveV*ピクセル移動させます。"
		},
		"OBJECT SET ACTION": {
			"Syntax": "**OBJECT SET ACTION** ( {* ;} *object* ; *action* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"action",
					"Text",
					"->",
					"関連付けるアクション"
				]
			],
			"Summary": "**OBJECT SET ACTION**コマンドは、引数 *object* と *\\** で指定したオブジェクトと関連付けられた標準アクションを、カレントプロセスにおいて変更します。"
		},
		"OBJECT SET AUTO SPELLCHECK": {
			"Syntax": "**OBJECT SET AUTO SPELLCHECK** ( {* ;} *object* ; *autoSpellcheck* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"autoSpellcheck",
					"Boolean",
					"->",
					"True = 自動スペルチェックFalse = 自動スペルチェックなし"
				]
			],
			"Summary": "**OBJECT SET AUTO SPELLCHECK**コマンドは*object*と*\\**引数で指定されたオブジェクトの自動スペルチェックオプションをカレントプロセス内で動的に設定します。"
		},
		"OBJECT SET BORDER STYLE": {
			"Syntax": "**OBJECT SET BORDER STYLE** ( {* ;} *object* ; *borderStyle* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"borderStyle",
					"Integer",
					"->",
					"境界線スタイル"
				]
			],
			"Summary": "**OBJECT SET BORDER STYLE**コマンドは、引数 *object* と *\\** で指定したオブジェクトの境界線スタイルを変更します。"
		},
		"OBJECT SET CONTEXT MENU": {
			"Syntax": "**OBJECT SET CONTEXT MENU** ( {* ;} *object* ; *contextMenu* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"contextMenu",
					"Boolean",
					"->",
					"True = コンテキストメニュー有効、False = コンテキストメニュー無効"
				]
			],
			"Summary": "**OBJECT SET CONTEXT MENU**コマンドは、引数 *object* と *\\** で指定したオブジェクトのデフォルトでのコンテキストメニューの関連付けを、カレントプロセスにおいて有効化または無効化します。"
		},
		"OBJECT SET COORDINATES": {
			"Syntax": "**OBJECT SET COORDINATES** ( {* ;} *object* ; *left* ; *top* {; *right* ; *bottom*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:object はオブジェクト名(文字列)、省略時:object は変数またはフィールド"
				],
				[
					"object",
					"Integer",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"left",
					"Integer",
					"->",
					"オブジェクトの左端の絶対座標(ピクセル)"
				],
				[
					"top",
					"Integer",
					"->",
					"オブジェクトの上端の絶対座標(ピクセル)"
				],
				[
					"right",
					"Integer",
					"->",
					"オブジェクトの右端の絶対座標(ピクセル)"
				],
				[
					"bottom",
					"Integer",
					"->",
					"オブジェクトの下端の絶対座標(ピクセル)"
				]
			],
			"Summary": "**OBJECT SET COORDINATES**コマンドは、引数 *object* と *\\** で指定したオブジェクトの位置とそれに伴うサイズを、カレントのプロセスにおいて変更します。"
		},
		"OBJECT SET CORNER RADIUS": {
			"Syntax": "**OBJECT SET CORNER RADIUS** ( {* ;} *object* ; *radius* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列) 省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)、またはフィールドまたは変数 (* 省略時)"
				],
				[
					"radius",
					"Integer",
					"->",
					"丸い角の新しい半径(ピクセル単位)"
				]
			],
			"Summary": "**OBJECT SET CORNER RADIUS** コマンドは、*object* 引数で指定したオブジェクトの角の半径を*radius* 引数で指定した半径に変更します。"
		},
		"OBJECT SET DATA SOURCE": {
			"Syntax": "**OBJECT SET DATA SOURCE** ( {* ;} *object* ; *dataSource* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)<br/>省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、<br/>または変数やフィールド( * 省略時)"
				],
				[
					"dataSource",
					"Pointer",
					"->",
					"オブジェクトの新しいデータソースへのポインター"
				]
			],
			"Summary": "**OBJECT SET DATA SOURCE**コマンドは、引数 *object* と *\\** で指定したオブジェクトのデータソースを変更します。"
		},
		"OBJECT SET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT SET DRAG AND DROP OPTIONS** ( {* ;} *object* ; *draggable* ; *automaticDrag* ; *droppable* ; *automaticDrop* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"draggable",
					"Boolean",
					"->",
					"ドラッグ可能ならTrue、そうでなければFalse"
				],
				[
					"automaticDrag",
					"Boolean",
					"->",
					"自動ドラッグならTrue、そうでなければFalse"
				],
				[
					"droppable",
					"Boolean",
					"->",
					"ドロップ可能ならTrue、そうでなければFalse"
				],
				[
					"automaticDrop",
					"Boolean",
					"->",
					"自動ドロップ可能ならTrue、そうでなければFalse"
				]
			],
			"Summary": "**OBJECT SET DRAG AND DROP OPTIONS**コマンドは*object* と *\\** 引数で指定したオブジェクトのドラッグ＆ドロップオプションをカレントプロセス内で動的に設定します。"
		},
		"OBJECT SET ENABLED": {
			"Syntax": "**OBJECT SET ENABLED** ( {* ;} *object* ; *active* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"active",
					"Boolean",
					"->",
					"True = オブジェクトは有効; そうでなければFalse"
				]
			],
			"Summary": "OBJECT SET ENABLED コマンドは*object*で指定されたカレントフォーム中のオブジェクトあるいはオブジェクトグループを、有効または無効にするために使用します。"
		},
		"OBJECT SET ENTERABLE": {
			"Syntax": "**OBJECT SET ENTERABLE** ( {* ;} *object* ; *enterable* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または テーブルまたはフィールドまたは変数 (* 省略時)"
				],
				[
					"enterable",
					"Boolean, Integer",
					"->",
					"ブール値 True=入力可, False=入力不可倍長整数: 0=入力不可, 1=入力可能, 2=入力不可かつフォーカス不可"
				]
			],
			"Summary": "**OBJECT SET ENTERABLE** コマンドは、*object* で指定したフォームオブジェクトを入力可または入力不可に設定するとともに、*フォーカス可能* 属性も設定します。"
		},
		"OBJECT SET EVENTS": {
			"Syntax": "**OBJECT SET EVENTS** ( {* ;} *object* ; *arrEvents* ; *mode* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:object はオブジェクト名(文字列)、省略時:object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名または\"\"( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"arrEvents",
					"Integer array",
					"->",
					"設定したいイベントの配列"
				],
				[
					"mode",
					"Integer",
					"->",
					"arrEvents 引数で定義されたイベントの起動モード"
				]
			],
			"Summary": "**OBJECT SET EVENTS**コマンドは、引数 *object* と *\\** で指定したフォームまたはオブジェクトのフォームイベントの設定を、カレントのプロセスにおいて変更します。"
		},
		"OBJECT SET FILTER": {
			"Syntax": "**OBJECT SET FILTER** ( {* ;} *object* ; *entryFilter* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"entryFilter",
					"Text",
					"->",
					"入力可エリアの新しい入力フィルタ"
				]
			],
			"Summary": "OBJECT SET FILTER は、*object*で指定されたオブジェクトの入力フィルタを*entryFilter*に設定します。"
		},
		"OBJECT SET FOCUS RECTANGLE INVISIBLE": {
			"Syntax": "**OBJECT SET FOCUS RECTANGLE INVISIBLE** ( {* ;} *object* ; *invisible* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"invisible",
					"Boolean",
					"->",
					"True = フォーカスの四角を隠すFalse = フォーカスの四角を表示する"
				]
			],
			"Summary": "**OBJECT SET FOCUS RECTANGLE INVISIBLE**コマンドは*object* と *\\** 引数で指定したオブジェクトのフォーカス四角のカレントプロセスの表示オプションを変更します。"
		},
		"OBJECT SET FONT SIZE": {
			"Syntax": "**OBJECT SET FONT SIZE** ( {* ;} *object* ; *size* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"size",
					"Integer",
					"->",
					"フォントサイズ (ポイント)"
				]
			],
			"Summary": "**OBJECT SET FONT SIZE** は*object* で指定したフォームオブジェクトが、*size*に渡したフォントサイズを使用して表示されるよう設定します。"
		},
		"OBJECT SET FONT STYLE": {
			"Syntax": "**OBJECT SET FONT STYLE** ( {* ;} *object* ; *styles* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"styles",
					"Integer",
					"->",
					"フォントスタイル"
				]
			],
			"Summary": "OBJECT SET FONT STYLE は*object* で指定したフォームオブジェクトが、*styles*に渡したフォントスタイルを使用して表示されるよう設定します。"
		},
		"OBJECT SET FONT": {
			"Syntax": "**OBJECT SET FONT** ( {* ;} *object* ; *font* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"font",
					"Text",
					"->",
					"フォント名またはフォント番号"
				]
			],
			"Summary": "OBJECT SET FONT は*object* で指定したフォームオブジェクトに、*font* に渡したフォント名またはフォント番号のフォントが表示されるよう設定します。"
		},
		"OBJECT SET FORMAT": {
			"Syntax": "**OBJECT SET FORMAT** ( {* ;} *object* ; *displayFormat* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"displayFormat",
					"Text",
					"->",
					"オブジェクトに設定する表示フォーマット"
				]
			],
			"Summary": "**OBJECT SET FORMAT** は、*object*で指定したオブジェクトの表示フォーマットを*displayFormat*で渡したフォーマットに設定します。"
		},
		"OBJECT SET HELP TIP": {
			"Syntax": "**OBJECT SET HELP TIP** ( {* ;} *object* ; *helpTip* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"helpTip",
					"Text",
					"->",
					"ヘルプメッセージの内容"
				]
			],
			"Summary": "**OBJECT SET HELP TIP**コマンドは*object* と*\\** 引数で指定したオブジェクトに割り当てられたヘルプをカレントプロセス内で動的に変更します。"
		},
		"OBJECT SET HORIZONTAL ALIGNMENT": {
			"Syntax": "**OBJECT SET HORIZONTAL ALIGNMENT** ( {* ;} *object* ; *alignment* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"alignment",
					"Integer",
					"->",
					"整列コード"
				]
			],
			"Summary": "**OBJECT SET HORIZONTAL ALIGNMENT**コマンドは、引数*object* および *\\** で指定したオブジェクトを整列します。"
		},
		"OBJECT SET INDICATOR TYPE": {
			"Syntax": "**OBJECT SET INDICATOR TYPE** ( {* ;} *object* ; *indicator* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"indicator",
					"Integer",
					"->",
					"インジケータータイプ"
				]
			],
			"Summary": "**OBJECT SET INDICATOR TYPE**コマンドは、引数 *object* と *\\** で指定したサーモメーターの進捗インジケーターのタイプを、カレントプロセスにおいて変更します。"
		},
		"OBJECT SET KEYBOARD LAYOUT": {
			"Syntax": "**OBJECT SET KEYBOARD LAYOUT** ( {* ;} *object* ; *languageCode* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"languageCode",
					"Text",
					"->",
					"RFC3066 ISO639 そして ISO3166 言語コード<br/>\"\" = 変更しない"
				]
			],
			"Summary": "**OBJECT SET KEYBOARD LAYOUT**コマンドは*object* と*\\** 引数で指定したオブジェクトに割り当てられたキーボードレイアウトをカレントプロセス内で動的に変更します。"
		},
		"OBJECT SET LIST BY NAME": {
			"Syntax": "**OBJECT SET LIST BY NAME** ( {* ;} *object* {; *listType*}; *list* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"listType",
					"Integer",
					"->",
					"リストの種類: 選択リスト、必須リスト、除外リスト"
				],
				[
					"list",
					"Text",
					"->",
					"選択リストとして使用するリストの名前 (デザインモードで定義)"
				]
			],
			"Summary": "**OBJECT SET LIST BY NAME**コマンドは、*object*引数で指定されたオブジェクトあるいはオブジェクトグループの選択リストを、*list*に渡したリスト (デザインモードのリストエディタで定義) に設定あるいは置き換えます。"
		},
		"OBJECT SET LIST BY REFERENCE": {
			"Syntax": "**OBJECT SET LIST BY REFERENCE** ( {* ;} *object* {; *listType*}; *list* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"listType",
					"Integer",
					"->",
					"リストの種類:選択リスト、指定リスト、除外リスト"
				],
				[
					"list",
					"Integer",
					"->",
					"リストの参照番号"
				]
			],
			"Summary": "**OBJECT SET LIST BY REFERENCE**コマンドは、引数 *object* と *\\** で指定したオブジェクトと関連付けられたリストを、 *list* 引数で指定した階層リストで置き換えもしくは定義します。"
		},
		"OBJECT SET MAXIMUM VALUE": {
			"Syntax": "**OBJECT SET MAXIMUM VALUE** ( {* ;} *object* ; *maxValue* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"maxValue",
					"Date, Time, Number",
					"->",
					"オブジェクトの最大値"
				]
			],
			"Summary": "**OBJECT SET MAXIMUM VALUE**コマンドは、引数 *object* と *\\** で指定したオブジェクトの最大値を、カレントプロセスにおいて変更します。"
		},
		"OBJECT SET MINIMUM VALUE": {
			"Syntax": "**OBJECT SET MINIMUM VALUE** ( {* ;} *object* ; *minValue* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"minValue",
					"Date, Time, Number",
					"->",
					"オブジェクトの最小値"
				]
			],
			"Summary": "**OBJECT SET MINIMUM VALUE**コマンドは、引数 *object* と *\\** で指定したオブジェクトの最小値を、カレントプロセスにおいて変更します。"
		},
		"OBJECT SET MULTILINE": {
			"Syntax": "**OBJECT SET MULTILINE** ( {* ;} *object* ; *multiline* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"multiline",
					"Integer",
					"->",
					"複数行プロパティの状態"
				]
			],
			"Summary": "**OBJECT SET MULTILINE**コマンドは、引数 *object* と *\\** で指定したオブジェクトの\"複数行\"のプロパティを変更します。"
		},
		"OBJECT SET PLACEHOLDER": {
			"Syntax": "**OBJECT SET PLACEHOLDER** ( {* ;} *object* ; *placeholderText* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列) 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"placeholderText",
					"Text",
					"->",
					"オブジェクトに関連付けるプレースホルダーテキスト"
				]
			],
			"Summary": "**OBJECT SET PLACEHOLDER**コマンドは、引数 *object* と *\\** で指定したオブジェクトにプレースホルダーテキストを関連付けます。"
		},
		"OBJECT SET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT SET PRINT VARIABLE FRAME** ( {* ;} *object* ; *variableFrame* {; *fixedSubform*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、<br/>または変数やフィールド( * 省略時)"
				],
				[
					"variableFrame",
					"Boolean",
					"->",
					"True = 可変長フレーム印刷、 False = 固定長フレーム印刷"
				],
				[
					"fixedSubform",
					"Integer",
					"->",
					"サブフォームを固定サイズで印刷する際のオプション"
				]
			],
			"Summary": "**OBJECT SET PRINT VARIABLE FRAME**コマンドは、引数 *object* と *\\** で指定したオブジェクトの印刷時可変のプロパティを、変更します。"
		},
		"OBJECT SET RESIZING OPTIONS": {
			"Syntax": "**OBJECT SET RESIZING OPTIONS** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"横リサイズオプション"
				],
				[
					"vertical",
					"Integer",
					"->",
					"縦リサイズオプション"
				]
			],
			"Summary": "**OBJECT SET RESIZING OPTIONS**コマンドは*object*と*\\** で指定したオブジェクトのリサイズオプションをカレントプロセス内で動的に変更します。"
		},
		"OBJECT SET RGB COLORS": {
			"Syntax": "**OBJECT SET RGB COLORS** ( {* ;} *object* ; *foregroundColor* {; *backgroundColor* {; *altBackgrndColor*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"foregroundColor",
					"Text, Integer",
					"->",
					"前景色のRGBカラー"
				],
				[
					"backgroundColor",
					"Text, Integer",
					"->",
					"背景色のRGBカラー"
				],
				[
					"altBackgrndColor",
					"Text, Integer",
					"->",
					"奇数行の背景色RGBカラー"
				]
			],
			"Summary": "**OBJECT SET RGB COLORS** コマンドは、引数*object*とオプション引数の *\\** によって指定されるオブジェクトの前景色と背景色を変更します。"
		},
		"OBJECT SET SCROLL POSITION": {
			"Syntax": "**OBJECT SET SCROLL POSITION** ( * ; *object* {; *vPosition* {; *hPosition*}}{; *} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定された場合、オブジェクトがオブジェクト名 (文字列) 省略された場合、オブジェクトがテーブルまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 ( * が指定された場合) または テーブルまたは変数 ( * が省略された場合)"
				],
				[
					"vPosition",
					"Integer",
					"->",
					"表示する行番号、またはピクチャーの場合縦スクロール量 (ピクセル)"
				],
				[
					"hPosition",
					"Integer",
					"->",
					"リストボックスの場合表示する列番号、またはピクチャーの場合縦スクロール量 (ピクセル)"
				],
				[
					"*",
					"演算子",
					"->",
					"スクロール後の最初の位置に行を表示 (hPositionが渡された場合、列も対象)"
				]
			],
			"Summary": "**OBJECT SET SCROLL POSITION**コマンドを使用して、 (MODIFY SELECTIONまたはDISPLAY SELECTIONコマンドを用いて表示される) リストフォーム、サブフォーム、階層リストなどの行、あるいはリストボックスの列や行、そしてさらにピクチャのピクセルをスクロールすることができます。"
		},
		"OBJECT SET SCROLLBAR": {
			"Syntax": "**OBJECT SET SCROLLBAR** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または 変数 (* 省略時)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"->",
					"True = 表示, False = 非表示"
				],
				[
					"vertical",
					"Boolean, Integer",
					"->",
					"True = 表示, False = 非表示"
				]
			],
			"Summary": "OBJECT SET SCROLLBARコマンドは、引数*object* と *\\** で指定したオブジェクトの水平/垂直スクロールバーの表示/非表示を設定します。"
		},
		"OBJECT SET SHORTCUT": {
			"Syntax": "**OBJECT SET SHORTCUT** ( {* ;} *object* ; *key* {; *modifiers*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)変数またはフィールド (* 省略時)"
				],
				[
					"key",
					"Text",
					"->",
					"オブジェクトに割り当てるキー"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"モディファイアーキーマスクまたはマスクの組み合わせ"
				]
			],
			"Summary": "**OBJECT SET SHORTCUT**コマンドは*object* と*\\** で指定したオブジェクトのキーボードショートカットをカレントプロセスで動的に変更します。"
		},
		"OBJECT SET STYLE SHEET": {
			"Syntax": "**OBJECT SET STYLE SHEET** ( {* ;} *object* ; *styleSheetName* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、<br/>または変数やフィールド( * 省略時)"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"スタイルシート名"
				]
			],
			"Summary": "**OBJECT SET STYLE SHEET**コマンドは、引数 *object* と *\\** で指定したオブジェクトと関連付けられたスタイルシートを、カレントのプロセスにおいて変更します。"
		},
		"OBJECT SET SUBFORM CONTAINER VALUE": {
			"Syntax": "**OBJECT SET SUBFORM CONTAINER VALUE** ( *value* )",
			"Params": [
				[
					"value",
					"any",
					"->",
					"データソースの新しい値"
				]
			],
			"Summary": "**OBJECT SET SUBFORM CONTAINER VALUE** コマンドは、オヤフォーム内に表示されたサブフォームコンテナにバインドされたデータソースのカレント値を設定します。"
		},
		"OBJECT SET SUBFORM": {
			"Syntax": "**OBJECT SET SUBFORM** ( {* ;} *object* {; *aTable*}; *detailSubform* {; *listSubform*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"aTable",
					"Table",
					"->",
					"フォームのテーブル (テーブルフォームの場合)"
				],
				[
					"detailSubform",
					"Text, Object",
					"->",
					"詳細フォーム名(テキスト)あるいは詳細フォームを定義した.jsonファイルへのPOSIXパス(テキスト)、あるいはサブフォームの詳細フォームを定義したオブジェクト"
				],
				[
					"listSubform",
					"Text, Object",
					"->",
					"リストフォーム名(テキスト)、あるいはリストフォームを定義した.jsonファイルへのPOSIXパス(テキスト)、あるいはサブフォームのリストフォーム(テーブルフォーム)を定義したオブジェクト"
				]
			],
			"Summary": "**OBJECT SET SUBFORM**コマンドは*\\** 引数および*object* 引数で指定したサブフォームオブジェクトに割り当てられる詳細フォームおよびオプションでリストフォームを動的に変更します。"
		},
		"OBJECT SET TEXT ORIENTATION": {
			"Syntax": "**OBJECT SET TEXT ORIENTATION** ( {* ;} *object* ; *orientation* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列) 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"orientation",
					"Integer",
					"->",
					"オブジェクトの方向を決める値"
				]
			],
			"Summary": "**OBJECT SET TEXT ORIENTATION**コマンドは、引数 *object* と *\\** で指定したオブジェクトの方向を、カレントプロセスにおいて変更します。"
		},
		"OBJECT SET THREE STATES CHECKBOX": {
			"Syntax": "**OBJECT SET THREE STATES CHECKBOX** ( {* ;} *object* ; *threeStates* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時:object はオブジェクト名(文字列)、省略時:object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名(*指定時)、または変数やフィールド(*省略時)"
				],
				[
					"threeStates",
					"Boolean",
					"->",
					"True = スリーステートチェックボックス、False = 標準のチェックボックス"
				]
			],
			"Summary": "**OBJECT SET THREE STATES CHECKBOX**コマンドは、引数 *object* と *\\** で指定したチェックボックスの\"スリーステート\"のプロパティを、カレントのプロセスにおいて変更します。"
		},
		"OBJECT SET TITLE": {
			"Syntax": "**OBJECT SET TITLE** ( {* ;} *object* ; *title* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"title",
					"Text",
					"->",
					"オブジェクトの新しいタイトル"
				]
			],
			"Summary": "**OBJECT SET TITLE**コマンドは、*object* 引数で指定されたボタンのタイトルを*title*で渡した値に変更します。"
		},
		"OBJECT SET VALUE": {
			"Syntax": "**OBJECT SET VALUE** ( *objectName* ; *value* )",
			"Params": [
				[
					"objectName",
					"Text",
					"->",
					"オブジェクト名"
				],
				[
					"value",
					"any",
					"->",
					"フォームオブジェクトのデータソースの新しい値"
				]
			],
			"Summary": "**OBJECT SET VALUE** は、*objectName* 引数で指定したフォームオブジェクトのカレントのデータソースに対して*value* 引数の値を設定します。"
		},
		"OBJECT SET VERTICAL ALIGNMENT": {
			"Syntax": "**OBJECT SET VERTICAL ALIGNMENT** ( {* ;} *object* ; *alignment* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列)省略時objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または変数 (* 省略時)"
				],
				[
					"alignment",
					"Integer",
					"->",
					"行揃えコード"
				]
			],
			"Summary": "**OBJECT SET VERTICAL ALIGNMENT**コマンドは*object* と*\\** 引数で指定されたオブジェクトに適用される行揃えのタイプを変更します。"
		},
		"OBJECT SET VISIBLE": {
			"Syntax": "**OBJECT SET VISIBLE** ( {* ;} *object* ; *visible* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, Objectはオブジェクト名 (文字列) 省略時, Objectはフィールドまたは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時), または フィールドまたは変数 (* 省略時)"
				],
				[
					"visible",
					"Boolean",
					"->",
					"True: 表示, False: 非表示"
				]
			],
			"Summary": "OBJECT SET VISIBLE コマンドは、*object*によって指定されるオブジェクトを表示、あるいは非表示にします。"
		},
		"Object to path": {
			"Syntax": "**Object to path** ( *pathObject* ) : Text",
			"Params": [
				[
					"pathObject",
					"Object",
					"->",
					"パスの中身を定義するオブジェクト"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"パス名"
				]
			],
			"Summary": "**Object to path** コマンドは*pathObject* 引数に渡したパス情報をもとにしたパス名(文字列)を返します。"
		},
		"OLD RELATED MANY": {
			"Syntax": "**OLD RELATED MANY** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"1フィールド"
				]
			],
			"Summary": "OLD RELATED MANYは、1フィールドの更新前の内容を使用してリレート処理を実行する以外は、RELATE MANYコマンドと同じ処理を行います。"
		},
		"OLD RELATED ONE": {
			"Syntax": "**OLD RELATED ONE** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"nフィールド"
				]
			],
			"Summary": "OLD RELATED ONEは、リレーションを実行する際に*aField*の古い値を使用することを除き、RELATE ONEと同じ処理を行います。"
		},
		"Old": {
			"Syntax": "**Old** ( *aField* ) : any",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"元の値を取得するフィールド"
				],
				[
					"戻り値",
					"any",
					"<-",
					"元のフィールド値"
				]
			],
			"Summary": "Old コマンドは、プログラムにより値が代入されたり、データ登録で修正される前に*aField*に納められていた値を返します。"
		},
		"On Backup Shutdown database method": {
			"Syntax": "$1 -> On Backup Shutdownデータベースメソッド",
			"Params": [
				[
					"$1",
					"倍長整数",
					"<-",
					"0 = バックアップは正しく実行された; 0以外の値 = エラー、ユーザーにより中断された、またはOn Backup Startupから返されたコード"
				]
			],
			"Summary": "**On Backup Shutdownデータベースメソッド**は、データベースのバックアップが終了するたびに呼び出されます。"
		},
		"On Backup Startup database method": {
			"Syntax": "On Backup Startupデータベースメソッド : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"0 = バックアップの開始を許可する; 0以外の値 = バックアップの開始を許可しない"
				]
			],
			"Summary": "**On Backup Startupデータベースメソッド**は、データベースのバックアップを開始しようとするたびに呼び出されます（手動でのバックアップ、定期的自動バックアップ、またはBACKUP コマンドによるバックアップ）。"
		},
		"On Drop database method": {
			"Syntax": "**On Dropデータベースメソッド**",
			"Params": [],
			"Summary": "**On Dropデータベースメソッド**はローカルおよびリモートモードの4Dで使用できます。"
		},
		"ON ERR CALL": {
			"Syntax": "**ON ERR CALL** ( *errorMethod* {; *scope*} )",
			"Params": [
				[
					"errorMethod",
					"Text",
					"->",
					"実行されるエラーメソッド, または 空の文字列でエラーのトラップ停止"
				],
				[
					"scope",
					"Integer",
					"->",
					"エラーメソッドのスコープ"
				]
			],
			"Summary": "**ON ERR CALL** コマンドは、カレントプロジェクト内の指定された実行コンテキストにおけるエラー検知用のメソッドとして errorMethod で渡した名前のプロジェクトメソッドをインストールします。"
		},
		"ON EVENT CALL": {
			"Syntax": "**ON EVENT CALL** ( *eventMethod* {; *processName*} )",
			"Params": [
				[
					"eventMethod",
					"Text",
					"->",
					"発動されるイベントメソッド, または 空の文字の場合イベントの遮断を停止"
				],
				[
					"processName",
					"Text",
					"->",
					"プロセス名"
				]
			],
			"Summary": "**ON EVENT CALL** コマンドは、イベントを検知するメソッドである*eventMethod*をインストールします。"
		},
		"On Exit database method": {
			"Syntax": "**On Exitデータベースメソッド**",
			"Params": [],
			"Summary": "**On Exitデータベースメソッド**は、データベースを終了すると一回呼び出されます。"
		},
		"On Host Database Event database method": {
			"Syntax": "$1 -> On Host Database Event データベースメソッド",
			"Params": [
				[
					"$1",
					"倍長整数",
					"<-",
					"イベントコード"
				]
			],
			"Summary": "**On Host Database Event データベースメソッド** はデータベースが開いた時と閉じられた時に 4D コンポーネントにコードを実行させることが出来るようになりました。"
		},
		"On Mobile App Action database method": {
			"Syntax": "**mobileInfo** -> On Mobile App Action データベースメソッド : Object",
			"Params": [
				[
					"mobileInfo",
					"Object",
					"->",
					"モバイルアプリケーションから渡された情報"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"アクションステータス＆データ同期"
				]
			],
			"Summary": "**ドキュメンテーションは移動しました**"
		},
		"On Mobile App Authentication database method": {
			"Syntax": "On Mobile App Authentication データベースメソッド ( *mobileInfo* ; *status* )",
			"Params": [
				[
					"mobileInfo",
					"Object",
					"->",
					"モバイルアプリケーションから渡された情報"
				],
				[
					"status",
					"Object",
					"<-",
					"認証ステータス"
				]
			],
			"Summary": "**ドキュメンテーションは移動しました**\n\nこのデータベースメソッドについてのドキュメンテーションはアップデートされ、 [developer."
		},
		"On REST Authentication database method": {
			"Syntax": "$1, $2, $3, $4 -> On REST Authentication データベースメソッド : Boolean",
			"Params": [
				[
					"$1",
					"テキスト",
					"<-",
					"ユーザー名"
				],
				[
					"$2",
					"テキスト",
					"<-",
					"パスワード"
				],
				[
					"$3",
					"ブール",
					"<-",
					"True = ダイジェストモード<br/>False = ベーシックモード"
				],
				[
					"$4",
					"テキスト",
					"<-",
					"呼び出し元のIPアドレス"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = セッション開始を許可、False = セッション開始を拒否"
				]
			],
			"Summary": "**On REST Authentication データベースメソッド** は4D 20 R6 以降は廃止予定となります。"
		},
		"On Server Close Connection database method": {
			"Syntax": "$1, $2, $3 -> On Server Close Connectionデータベースメソッド",
			"Params": [
				[
					"$1",
					"倍長整数",
					"<-",
					"ユーザーを識別するために4D Serverが内部的に使用するユーザーID"
				],
				[
					"$2",
					"倍長整数",
					"<-",
					"接続を識別するために4D Serverが内部的に使用する接続ID"
				],
				[
					"$3",
					"倍長整数",
					"<-",
					"廃止: 常に0が返されますが、宣言はしなくてはなりません。"
				]
			],
			"Summary": "**On Server Close Connectionデータベースメソッド**は、4Dクライアントプロセスが終了するたびに、サーバマシン上で一度呼び出されます。"
		},
		"On Server Open Connection database method": {
			"Syntax": "$1, $2, $3 -> On Server Open Connectionデータベースメソッド -> $0",
			"Params": [
				[
					"$user",
					"倍長整数",
					"<-",
					"ユーザーを識別するために4D Serverが内部的に使用するユーザーID"
				],
				[
					"$id",
					"倍長整数",
					"<-",
					"接続を識別するために4D Serverが内部的に使用する接続ID"
				],
				[
					"$toIgnore",
					"倍長整数",
					"<-",
					"廃止: 常に0が返されますが、宣言はしなくてはなりません。"
				],
				[
					"$status",
					"倍長整数",
					"<-",
					"0または省略時 = 接続を受け入れる、0以外 = 接続を拒否する"
				]
			],
			"Summary": "**On Server Open Connectionデータベースメソッド**は、4Dリモートワークステーションが接続プロセスを開始するたびに、サーバーマシン上で一度、呼び出されます。"
		},
		"On Server Shutdown database method": {
			"Syntax": "**On Server Shutdownデータベースメソッド**",
			"Params": [],
			"Summary": "**On Server Shutdownデータベースメソッド**は、カレントのデータベースが4D Server上で閉じられるときに、サーバマシン上で一度呼び出されます。"
		},
		"On Server Startup database method": {
			"Syntax": "**On Server Startupデータベースメソッド**",
			"Params": [],
			"Summary": "**On Server Startupデータベースメソッド**は、4D Server でデータベースを開くと、サーバマシン上で一度呼び出されます。"
		},
		"On SQL Authentication database method": {
			"Syntax": "$user, $pw, $ip -> On SQL Authenticationデータベースメソッド : Boolean",
			"Params": [
				[
					"$user",
					"テキスト",
					"<-",
					"ユーザー名"
				],
				[
					"$pw",
					"テキスト",
					"<-",
					"パスワード"
				],
				[
					"$ip",
					"テキスト",
					"<-",
					"(オプション) リクエスト送信元クライアントのIPアドレス"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = リクエストを受け入れる、False = リクエストを拒否する"
				]
			],
			"Summary": "**On SQL Authenticationデータベースメソッド**は4Dに統合されたSQLサーバへ送られたリクエストを選別します。"
		},
		"On Startup database method": {
			"Syntax": "**On Startupデータベースメソッド**",
			"Params": [],
			"Summary": "**On Startupデータベースメソッド**は、データベースを開くと1度呼び出されます。"
		},
		"On System Event database method": {
			"Syntax": "$event -> On System Event データベースメソッド",
			"Params": [
				[
					"$event",
					"倍長整数",
					"<-",
					"イベントコード"
				]
			],
			"Summary": "**On System Event データベースメソッド** はシステムイベントが発生するたびに呼び出されます。"
		},
		"On Web Authentication database method": {
			"Syntax": "$url, $http, $ipBrowser, $ipServer, $user, $pw -> On Web Authenticationデータベースメソッド : Boolean",
			"Params": [
				[
					"$url",
					"テキスト",
					"<-",
					"URL"
				],
				[
					"$http",
					"テキスト",
					"<-",
					"HTTPヘッダー + HTTPボディ(32 KBまで)"
				],
				[
					"$ipBrowser",
					"テキスト",
					"<-",
					"Webクライアント (ブラウザー) のIPアドレス"
				],
				[
					"$ipServer",
					"テキスト",
					"<-",
					"サーバーのIPアドレス"
				],
				[
					"$user",
					"テキスト",
					"<-",
					"ユーザー名"
				],
				[
					"$pw",
					"テキスト",
					"<-",
					"パスワード"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = リクエストを受け入れる, False = リクエストを拒否する"
				]
			],
			"Summary": "**On Web Authenticationデータベースメソッド**はWebサーバーエンジンへのアクセス管理を担当します。"
		},
		"On Web Connection database method": {
			"Syntax": "$url, $http, $ipBrowser, $ipServer, $user, $pw -> On Web Connectionデータベースメソッド",
			"Params": [
				[
					"$url",
					"テキスト",
					"<-",
					"URL"
				],
				[
					"$http",
					"テキスト",
					"<-",
					"HTTPヘッダー + HTTPボディ (32 KBまで)"
				],
				[
					"$ipBrowser",
					"テキスト",
					"<-",
					"Webクライアント (ブラウザー) のIPアドレス"
				],
				[
					"$ipServer",
					"テキスト",
					"<-",
					"サーバーのIPアドレス"
				],
				[
					"$user",
					"テキスト",
					"<-",
					"ユーザー名"
				],
				[
					"$pw",
					"テキスト",
					"<-",
					"パスワード"
				]
			],
			"Summary": "**On Web Connectionデータベースメソッド**は以下のケースで呼び出されます:\n\n* Webサーバが */4DCGI/* から始まるURLを受信した。"
		},
		"On Web Legacy Close Session database method": {
			"Syntax": "**On Web Legacy Close Session database method**",
			"Params": [],
			"Summary": "このデータベースメソッドは**旧式Web セッション**でのみ使用可能であり、このセッションモードは4D v18 R6 以前のバージョンから変換されたデータベースでのみ利用可能です。"
		},
		"ONE RECORD SELECT": {
			"Syntax": "**ONE RECORD SELECT** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードをカレントセレクションにする テーブル、または省略時デフォルトテーブル"
				]
			],
			"Summary": "ONE RECORD SELECTは*aTable*のカレントレコードをカレントセレクションにします。"
		},
		"OPEN ADMINISTRATION WINDOW": {
			"Syntax": "**OPEN ADMINISTRATION WINDOW**",
			"Params": [],
			"Summary": "**OPEN ADMINISTRATION WINDOW**コマンドは、コマンドを実行したマシン上でサーバ管理ウィンドウを開きます。"
		},
		"OPEN COLOR PICKER": {
			"Syntax": "**OPEN COLOR PICKER** {( *textOrBackground* )}",
			"Params": [
				[
					"textOrBackground",
					"Integer",
					"->",
					"0または省略 = テキストカラーを選択、1 = テキスト背景色を選択"
				]
			],
			"Summary": "**OPEN COLOR PICKER**コマンドは、システムのカラーピッカーダイアログボックスを表示させます。"
		},
		"OPEN DATA FILE": {
			"Syntax": "**OPEN DATA FILE** ( *accessPath* )",
			"Params": [
				[
					"accessPath",
					"Text",
					"->",
					"開くデータファイルの名前または完全アクセスパス"
				]
			],
			"Summary": "**OPEN DATA FILE**コマンドは、4Dアプリケーションによって開かれたデータファイルをオンザフライで変更することを可能にします。"
		},
		"OPEN DATABASE": {
			"Syntax": "**OPEN DATABASE** ( *filePath* )",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"開きたいファイル名(.4db、.4dc、.4dbase または .4dlink)、<br/>または開きたいデータベースへの完全なアクセスパス"
				]
			],
			"Summary": "**OPEN DATABASE** コマンドは、現在開いている4Dデータベースを閉じ、*filePath* で定義されたデータベースを即座に開きます。"
		},
		"Open document": {
			"Syntax": "**Open document** ( *document* {; *fileType*}{; *mode*} ) : Time",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名、または ドキュメントへの完全なパス名、または 空の文字列の場合、標準のファイルダイアログボックス表示"
				],
				[
					"fileType",
					"Text",
					"->",
					"表示されるドキュメントタイプのリスト、または ドキュメントを表示しない\"*\""
				],
				[
					"mode",
					"Integer",
					"->",
					"ドキュメントを開くモード"
				],
				[
					"戻り値",
					"Time",
					"<-",
					"ドキュメント参照番号"
				]
			],
			"Summary": "**Open document**コマンドは、*document*に渡した名前またはパス名を持つドキュメントを開きます。"
		},
		"OPEN FONT PICKER": {
			"Syntax": "**OPEN FONT PICKER**",
			"Params": [],
			"Summary": "**OPEN FONT PICKER**コマンドは、システムのフォントピッカーダイアログボックスを表示させます。"
		},
		"Open form window": {
			"Syntax": "**Open form window** ( {*aTable* ;} *formName* {; *type* {; *hPos* {; *vPos* {; *}}}} ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フォームが属するテーブル、または省略時デフォルトテーブル"
				],
				[
					"formName",
					"Text, Object",
					"->",
					"プロジェクトフォームまたはテーブルフォームのフォーム名(文字列)、<br/>あるいはフォームを定義した.jsonファイルへのPOSIXパス(文字列)、<br/>あるいは開くフォームを定義したオブジェクト"
				],
				[
					"type",
					"Integer",
					"->",
					"ウィンドウタイプ"
				],
				[
					"hPos",
					"Integer",
					"->",
					"ウィンドウの横位置"
				],
				[
					"vPos",
					"Integer",
					"->",
					"ウィンドウの縦位置"
				],
				[
					"*",
					"演算子",
					"->",
					"ウィンドウの現在の位置とサイズを保存"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ウィンドウ参照番号"
				]
			],
			"Summary": "Open form window コマンドはフォーム*formName*のサイズとリサイズプロパティを使用して、新しいウィンドウを開きます。"
		},
		"OPEN PRINTING JOB": {
			"Syntax": "**OPEN PRINTING JOB**",
			"Params": [],
			"Summary": "**OPEN PRINTING JOB** コマンドはプリントジョブを開き、CLOSE PRINTING JOB コマンドが呼ばれるまで、続くすべてのプリント命令をスタックします。"
		},
		"Open resource file": {
			"Syntax": "**Open resource file** ( *resFilename* {; *fileType*} ) : Time",
			"Params": [
				[
					"resFilename",
					"Text",
					"->",
					"リソースファイルのファイル名またはフルパス名, または 空の文字列を指定するとファイルを開くダイアログボックスを表示"
				],
				[
					"fileType",
					"Text",
					"->",
					"Mac OSファイルタイプ (4文字)、または Windowsファイル拡張子(1から3文字)、または 省略時、すべてのファイル"
				],
				[
					"戻り値",
					"Time",
					"<-",
					"リソースファイル参照番号"
				]
			],
			"Summary": "**Open resource file**コマンドは、*resFileName*に渡した名前またはパス名を持つリソースファイルを開きます。"
		},
		"OPEN RUNTIME EXPLORER": {
			"Syntax": "**OPEN RUNTIME EXPLORER**",
			"Params": [],
			"Summary": "OPEN RUNTIME EXPLORER コマンドは、ランタイムエクスプローラーをフローティングウィンドウ内に表示します。"
		},
		"OPEN SECURITY CENTER": {
			"Syntax": "**OPEN SECURITY CENTER**",
			"Params": [],
			"Summary": "OPEN SECURITY CENTER コマンドは、Maintenance and Security Center (MSC) ウィンドウを表示します。"
		},
		"OPEN SETTINGS WINDOW": {
			"Syntax": "**OPEN SETTINGS WINDOW** ( *selector* {; *access* {; *settingsType*}} )",
			"Params": [
				[
					"selector",
					"Text",
					"->",
					"環境設定やデータベース設定ダイアログボックス中のテーマやページ、またはパラメーターグループを指定するキー"
				],
				[
					"access",
					"Boolean",
					"->",
					"True=ダイアログボックスの他のページをロックする<br/>Falseまたは省略=ダイアログの他のページもアクティブにする"
				],
				[
					"settingsType",
					"Integer",
					"->",
					"0または省略時 = ストラクチャー設定、1 = ユーザー設定"
				]
			],
			"Summary": "**OPEN SETTINGS WINDOW**コマンドは、カレントの4Dアプリケーションの環境設定ダイアログボックスまたはカレント4Dアプリケーションのデータベース設定を表示し、*selector*キーで指定されたパラメーターやページを表示します。"
		},
		"OPEN URL": {
			"Syntax": "**OPEN URL** ( *path* {; *appName*}{; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"開くドキュメントまたはURL"
				],
				[
					"appName",
					"Text",
					"->",
					"使用するアプリケーション名"
				],
				[
					"*",
					"演算子",
					"->",
					"指定した場合 = URLをエンコードしない, 省略した場合 = URLをエンコードする"
				]
			],
			"Summary": "**OPEN URL** コマンドは、*appName* で指定したアプリケーションを使用して、*path* 引数に渡したファイルやURLを開きます。"
		},
		"Open window": {
			"Syntax": "**Open window** ( *left* ; *top* ; *right* ; *bottom* {; *type* {; *title* {; *controlMenuBox*}}} ) : Integer",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル左座標"
				],
				[
					"top",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル上座標"
				],
				[
					"right",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル右座標, または-1でフォームのデフォルトサイズを使用"
				],
				[
					"bottom",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル下座標, または-1でフォームのデフォルトサイズを使用"
				],
				[
					"type",
					"Integer",
					"->",
					"ウィンドウタイプ"
				],
				[
					"title",
					"Text",
					"->",
					"ウィンドウのタイトル または \"\" でデフォルトのフォームタイトルを使用"
				],
				[
					"controlMenuBox",
					"Text",
					"->",
					"コントロールメニューボックスがダブルクリック またはクローズボックスがクリックされたときに 呼び出すメソッド"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ウィンドウ参照番号"
				]
			],
			"Summary": "**Open window** は最初の4つの引数で指定された寸法を使用して新しいウィンドウを開きます。"
		},
		"ORDER BY ATTRIBUTE": {
			"Syntax": "**ORDER BY ATTRIBUTE** ( {*aTable* ;} *objectField* ; *attributePath* ; > or < {; *objectField2* ; *attributePath2* ; > or <2 ; ... ; *objectFieldN* ; *attributePathN* ; > or <N} {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションをソートするテーブル (省略時はデフォルトテーブル)"
				],
				[
					"objectField",
					"Object",
					"->",
					"ソートの基準とする属性を含むオブジェクトフィールド"
				],
				[
					"attributePath",
					"Text",
					"->",
					"ソートの基準とする属性の名前またはパス"
				],
				[
					"> or <",
					"演算子",
					"->",
					"ソート方向: >: 昇順, または <: 降順"
				],
				[
					"*",
					"演算子",
					"->",
					"ソート継続フラグ"
				]
			],
			"Summary": "**ORDER BY ATTRIBUTE** コマンドは、カレントプロセスにおいて *aTable* のカレントレコードセレクションを *objectField* の *attributePath* を基準にソートします。"
		},
		"ORDER BY FORMULA": {
			"Syntax": "**ORDER BY FORMULA** ( *aTable* ; *expression* {; > or <}{; *expression2* ; > or <2 ; ... ; *expressionN* ; > or <N} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションをソートするテーブル"
				],
				[
					"expression",
					"Expression",
					"->",
					"各レベルのソートに設定する式 (文字, 実数, 整数, 倍長整数, 日付, 時間または ブール)"
				],
				[
					"> or <",
					"演算子",
					"->",
					"各レベルのソート方向: >: 昇順, または <: 降順"
				]
			],
			"Summary": "**ORDER BY FORMULA**は、カレントプロセスの*aTable*のカレントレコードセレクションをソートします。"
		},
		"ORDER BY": {
			"Syntax": "**ORDER BY** ( {*aTable* ;}{ *aField* }{; > または < }{; *aField2* ; > または <2 ; ... ; *aFieldN* ; > または <N}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションをソートするテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"aField",
					"Field",
					"->",
					"各レベルのソートするフィールド"
				],
				[
					"> または <",
					"演算子",
					"->",
					"各レベルのソート方向: >: 昇順, または <: 降順"
				],
				[
					"*",
					"演算子",
					"->",
					"ソート継続フラグ"
				]
			],
			"Summary": "**ORDER BY** は、カレントプロセスの*aTable*のカレントレコードセレクションをソートします。"
		},
		"Outside call": {
			"Syntax": "**Outside call**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True if the execution cycle is an outside call"
				]
			],
			"Summary": "**Outside call** は、実行サイクルのあとにTrueを返します。"
		},
		"PAGE BREAK": {
			"Syntax": "**PAGE BREAK** {( * )}<br/>**PAGE BREAK** {( > )}",
			"Params": [
				[
					"* &#124; >",
					"Operator",
					"->",
					"*: Print formで開始されたプリントジョブをキャンセル, または >: 1つのプリントジョブを強制"
				]
			],
			"Summary": "PAGE BREAKはプリンタに送信されたデータの印刷を実行させ、改ページを行います。"
		},
		"Parse formula": {
			"Syntax": "**Parse formula** ( *formula* {; *options*}{; *errorMessage*} ) : Text",
			"Params": [
				[
					"formula",
					"Text",
					"->",
					"標準テキストのフォーミュラ"
				],
				[
					"options",
					"Integer",
					"->",
					"入力/出力の形式の指示"
				],
				[
					"errorMessage",
					"Text",
					"<-",
					"エラーメッセージ(エラーなしの場合には空の文字列)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"変換されたフォーミュラ(標準テキスト)"
				]
			],
			"Summary": "**Parse formula** ファンクションは、*formula* 引数で指定された4D フォーミュラを解析し、シンタックスをチェックし、正規化された形式で返します。"
		},
		"Pasteboard data size": {
			"Syntax": "**Pasteboard data size** ( *dataType* ) : Integer",
			"Params": [
				[
					"dataType",
					"Text",
					"->",
					"データタイプ"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ペーストボード中のデータサイズ (バイト) またはエラーコード"
				]
			],
			"Summary": "Pasteboard data size コマンドを使用して、*dataType* に渡したデータがペーストボード内に存在するかどうかを調べることができます。"
		},
		"Path to object": {
			"Syntax": "**Path to object** ( *path* {; *pathType*} ) : Object",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"パス名"
				],
				[
					"pathType",
					"Integer",
					"->",
					"パスシンタックスのタイプ:システム(デフォルト)あるいはPosix"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"パスの中身を説明したオブジェクト"
				]
			],
			"Summary": "**Path to object** コマンドは*path* 引数に渡したパスの特定のプロパティを含んだオブジェクトを返します。"
		},
		"PAUSE INDEXES": {
			"Syntax": "**PAUSE INDEXES** ( *aTable* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"インデックスを停止するテーブル"
				]
			],
			"Summary": "**PAUSE INDEXES**コマンドは、*aTable* のインデックスを、プライマリーキーのインデックスを除き一時的に無効にします。"
		},
		"PAUSE PROCESS": {
			"Syntax": "**PAUSE PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "PAUSE PROCESSは、RESUME PROCESSコマンドで再開されるまで*process*の実行を停止します。"
		},
		"PHP Execute": {
			"deprecated": true,
			"Syntax": "**PHP Execute** ( *scriptPath* {; *functionName* {; *phpResult* {; *param*} {; *param2* ; ... ; *paramN*}}} ) : Boolean",
			"Params": [
				[
					"scriptPath",
					"Text",
					"->",
					"PHPスクリプトへのパスまたは<br/>\"\" でPHP関数を実行"
				],
				[
					"functionName",
					"Text",
					"->",
					"実行するPHP関数"
				],
				[
					"phpResult",
					"*, Variable, Field",
					"<-",
					"PHP関数実行結果または結果を受け取らない場合*"
				],
				[
					"param",
					"Text, Boolean, Real, Integer, Date, Time",
					"->",
					"PHP関数の引数"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 正しく実行された<br/>False = 実行時にエラーがあった"
				]
			],
			"Summary": "**PHP Execute**コマンドはPHPスクリプトや関数を実行するために使用します。"
		},
		"PHP GET FULL RESPONSE": {
			"deprecated": true,
			"Syntax": "**PHP GET FULL RESPONSE** ( *stdOut* {; *errLabels* ; *errValues*} {; *httpHeaderFields* {; *httpHeaderValues*}} )",
			"Params": [
				[
					"stdOut",
					"Text, Blob",
					"<-",
					"stdoutバッファーの内容"
				],
				[
					"errLabels",
					"Text array",
					"<-",
					"エラーのラベル"
				],
				[
					"errValues",
					"Text array",
					"<-",
					"エラーの値"
				],
				[
					"httpHeaderFields",
					"Text array",
					"<-",
					"HTTPヘッダーの名前"
				],
				[
					"httpHeaderValues",
					"Text array",
					"<-",
					"HTTPヘッダーの値"
				]
			],
			"Summary": "PHP GET FULL RESPONSE コマンドを使用して PHPインタープリターから返されるレスポンスに関する追加の情報を取得できます。"
		},
		"PHP GET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP GET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"取得するオプション"
				],
				[
					"value",
					"Boolean",
					"<-",
					"オプションの現在値"
				]
			],
			"Summary": "PHP GET OPTION コマンドを使用して、PHPスクリプトの実行に関連するオプションの現在値を取得できます。"
		},
		"PHP SET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP SET OPTION** ( *option* ; *value* {; *} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"設定するオプション"
				],
				[
					"value",
					"Boolean",
					"->",
					"オプションの新しい値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 変更は次の呼び出し時にのみ適用"
				]
			],
			"Summary": "**PHP SET OPTION** コマンドを使用して、PHP Execute コマンド呼び出し前に、特定のオプションを設定することができます。"
		},
		"PICTURE CODEC LIST": {
			"Syntax": "**PICTURE CODEC LIST** ( *codecArray* {; *namesArray*}{; *} )",
			"Params": [
				[
					"codecArray",
					"Text array",
					"<-",
					"利用可能なピクチャCodecのID"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"ピクチャCodecの名前"
				],
				[
					"*",
					"演算子",
					"->",
					"読み込み (デコード) CODECのリストを返す"
				]
			],
			"Summary": "PICTURE CODEC LIST コマンドは、コマンドが実行されたマシンで利用可能なピクチャCodec IDのリストを*codecArray* 配列に返します。"
		},
		"PICTURE LIBRARY LIST": {
			"Syntax": "**PICTURE LIBRARY LIST** ( *picRefs* ; *picNames* )",
			"Params": [
				[
					"picRefs",
					"Integer array",
					"<-",
					"ピクチャライブラリ画像の参照番号"
				],
				[
					"picNames",
					"Text array",
					"<-",
					"ピクチャライブラリ画像の名前"
				]
			],
			"Summary": "PICTURE LIBRARY LIST コマンドは、データベースのピクチャライブラリの中に現在格納されているピクチャの参照番号と名前を返します。"
		},
		"PICTURE PROPERTIES": {
			"Syntax": "**PICTURE PROPERTIES** ( *picture* ; *width* ; *height* {; *hOffset* {; *vOffset* {; *mode*}}} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"情報を取得するピクチャ"
				],
				[
					"width",
					"Real",
					"<-",
					"ピクチャの幅 (ピクセル)"
				],
				[
					"height",
					"Real",
					"<-",
					"ピクチャの高さ (ピクセル)"
				],
				[
					"hOffset",
					"Integer",
					"<-",
					"バックグランド表示の時の水平方向のオフセット"
				],
				[
					"vOffset",
					"Integer",
					"<-",
					"バックグランド表示の時の垂直方向のオフセット"
				],
				[
					"mode",
					"Integer",
					"<-",
					"バックグランド表示の時の転送モード"
				]
			],
			"Summary": "PICTURE PROPERTIES コマンドは、*picture*に渡したピクチャに関する情報を返します。"
		},
		"Picture size": {
			"Syntax": "**Picture size** ( *picture* ) : Integer",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"サイズを知りたいピクチャ"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ピクチャのサイズ (バイト)"
				]
			],
			"Summary": "Picture sizeコマンドは指定したピクチャのサイズをバイト単位で返します。"
		},
		"PICTURE TO BLOB": {
			"Syntax": "**PICTURE TO BLOB** ( *picture* ; *pictureBlob* ; *codec* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"ピクチャフィールドまたは変数"
				],
				[
					"pictureBlob",
					"Blob",
					"<-",
					"変換されたピクチャを受け取るBLOB"
				],
				[
					"codec",
					"Text",
					"->",
					"ピクチャCodec ID"
				]
			],
			"Summary": "PICTURE TO BLOB コマンドは、4D変数やフィールドに格納されたピクチャを他のフォーマットに変換し、変換後のピクチャをBLOB内に納めます。"
		},
		"PLAY": {
			"Syntax": "**PLAY** ( *objectName* {; *channel*} )",
			"Params": [
				[
					"objectName",
					"Text",
					"->",
					"サウンドファイル名、またはMac OSの\"snd \"リソース、またはシステムサウンド非同期再生を中断する場合、空の文字列"
				],
				[
					"channel",
					"Integer",
					"->",
					"指定した場合、シンセサイザーチャネルと非同期実行、省略した場合同期実行"
				]
			],
			"Summary": "**PLAY**コマンドを使用してサウンドやマルチメディアファイルを再生できます。"
		},
		"PLUGIN LIST": {
			"Syntax": "**PLUGIN LIST** ( *numbersArray* ; *namesArray* )",
			"Params": [
				[
					"numbersArray",
					"Integer array",
					"<-",
					"プラグイン番号"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"プラグイン名"
				]
			],
			"Summary": "PLUGIN LIST コマンドは*numbersArray*配列と*namesArray*配列に、4Dアプリケーションにロードされ、利用可能なプラグインの番号と名前を返します。"
		},
		"POP RECORD": {
			"Syntax": "**POP RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードをポップするテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "POP RECORDは、*aTable*に属するレコードを、そのテーブルのレコードスタックからポップし、そのレコードをカレントレコードにします。"
		},
		"Pop up menu": {
			"Syntax": "**Pop up menu** ( *contents* {; *default* {; *xCoord* ; *yCoord*}} )  : Integer",
			"Params": [
				[
					"contents",
					"Text",
					"->",
					"定義された項目テキスト"
				],
				[
					"default",
					"Integer",
					"->",
					"デフォルトで選択された項目番号"
				],
				[
					"xCoord",
					"Integer",
					"->",
					"左上角のX座標"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"左上角のY座標"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"選択された項目番号"
				]
			],
			"Summary": "**Pop up menu** コマンドは、現在マウスが置かれている場所でポップアップメニューを表示します。"
		},
		"Position": {
			"Syntax": "**Position** ( *find* ; *aString* {; *start* {; *lengthFound*}}{; *} ) -> 戻り値 <br/>\n**Position** ( *find* ; *aString* ; *start* ; *lengthFound* ; *options* ) -> 戻り値",
			"Params": [
				[
					"find",
					"Text",
					"->",
					"見つける文字列"
				],
				[
					"aString",
					"Text",
					"->",
					"調べる文字列"
				],
				[
					"start",
					"Integer",
					"->",
					"aString引数内で検索を開始する位置"
				],
				[
					"lengthFound",
					"Integer",
					"<-",
					"見つかった文字列の長さ"
				],
				[
					"*",
					"演算子",
					"->",
					"渡されると、文字コードに基づいて評価"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"最初に見つかった位置"
				],
				[
					"Position ( find ; aString ; start ; lengthFound ; options ) -> 戻り値"
				],
				[
					"引数",
					"型",
					"説明"
				],
				[
					"find",
					"Text",
					"->",
					"見つける文字列"
				],
				[
					"aString",
					"Text",
					"->",
					"調べる文字列"
				],
				[
					"start",
					"Integer",
					"->",
					"aString引数内で検索を開始する位置"
				],
				[
					"lengthFound",
					"Integer",
					"->",
					"見つかった文字列の長さ"
				],
				[
					"options",
					"Integer",
					"->",
					"検索条件"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"最初に見つかった位置"
				]
			],
			"Summary": "**Position** コマンドは、*aString* の中で*find* が最初に現われる位置を返します。"
		},
		"POST CLICK": {
			"Syntax": "**POST CLICK** ( *mouseX* ; *mouseY* {; *process*} {; *} )",
			"Params": [
				[
					"mouseX",
					"Integer",
					"->",
					"水平座標"
				],
				[
					"mouseY",
					"Integer",
					"->",
					"垂直座標"
				],
				[
					"process",
					"Integer",
					"->",
					"送信先のプロセス参照番号、 省略または0の場合、アプリケーションイベントキュー"
				],
				[
					"*",
					"Operator",
					"->",
					"指定された場合はグローバルな座標システムが使用される 省略された場合はローカルな座標システムが使用される"
				]
			],
			"Summary": "POST CLICK コマンドはマウスクリックをシミュレートします。"
		},
		"POST EVENT": {
			"Syntax": "**POST EVENT** ( *what* ; *message* ; *when* ; *mouseX* ; *mouseY* ; *modifiers* {; *process*} )",
			"Params": [
				[
					"what",
					"Integer",
					"->",
					"イベントのタイプ"
				],
				[
					"message",
					"Integer",
					"->",
					"イベントメッセージ"
				],
				[
					"when",
					"Integer",
					"->",
					"Tick単位でのイベント時間"
				],
				[
					"mouseX",
					"Integer",
					"->",
					"マウスの水平座標"
				],
				[
					"mouseY",
					"Integer",
					"->",
					"マウスの垂直座標"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"モディファイアキーのステータス"
				],
				[
					"process",
					"Integer",
					"->",
					"送信先のプロセス参照番号、 省略または0の場合、アプリケーションイベントキュー"
				]
			],
			"Summary": "POST EVENT コマンドは、キーボードまたはマウスイベントをシミュレートします。"
		},
		"POST KEY": {
			"Syntax": "**POST KEY** ( *code* {; *modifiers* {; *process*}} )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"文字コードまたはファンクションキーコード"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"モディファイアキーのステータス"
				],
				[
					"process",
					"Integer",
					"->",
					"送信先のプロセス参照番号、 省略または0の場合、アプリケーションイベントキュー"
				]
			],
			"Summary": "POST KEY コマンドはキーストロークをシミュレートします。"
		},
		"POST OUTSIDE CALL": {
			"Syntax": "**POST OUTSIDE CALL** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "This command was named **CALL PROCESS** in previous 4D releases."
		},
		"PREVIOUS RECORD": {
			"Syntax": "**PREVIOUS RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションの前レコードをカレントレコードにする テーブル、省略時はデフォルトテーブル"
				]
			],
			"Summary": "PREVIOUS RECORDは、カレントプロセスの*aTable*のカレントセレクションにある1つ前のレコードへカレントレコードポインタを移動します。"
		},
		"PRINT LABEL": {
			"Syntax": "**PRINT LABEL** ( *aTable* {; *document* {; * }} )<br/>**PRINT LABEL** ( *aTable* {; *document* {; >}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"印刷するテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"ディスクに保存したラベルドキュメント名"
				],
				[
					"* &#124; >",
					"Operator",
					"->",
					"*: 印刷ダイアログを省略, または >:  印刷設定の再初期化をしない"
				]
			],
			"Summary": "**PRINT LABEL** は、*aTable*のセレクションのデータを使用してラベルを印刷します。"
		},
		"Print object": {
			"Syntax": "**Print object** ( {* ;} *object* {; *posX* {; *posY* {; *width* {; *height*}}}} ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列) <br/>省略時 objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"posX",
					"Integer",
					"->",
					"オブジェクトの横位置"
				],
				[
					"posY",
					"Integer",
					"->",
					"オブジェクトの縦位置"
				],
				[
					"width",
					"Integer",
					"->",
					"オブジェクトの幅 (ピクセル)"
				],
				[
					"height",
					"Integer",
					"->",
					"オブジェクトの高さ (ピクセル)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = オブジェクトが完全に印刷された; そうでなければFalse"
				]
			],
			"Summary": "**Print object** コマンドを使用して *object*と*\\** 引数で指定したフォームオブジェクトを、*posX*と*posY*の位置に、任意のサイズで印刷できます。"
		},
		"PRINT OPTION VALUES": {
			"Syntax": "**PRINT OPTION VALUES** ( *option* ; *namesArray* {; *info1Array* {; *info2Array*}} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"オプション番号"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"値の名前"
				],
				[
					"info1Array",
					"Integer array",
					"<-",
					"オプションの値(1)"
				],
				[
					"info2Array",
					"Integer array",
					"<-",
					"オプションの値(2)"
				]
			],
			"Summary": "**PRINT OPTION VALUES** コマンドは、*option* で定義した印刷オプションに対して利用可能な名前のリストを*namesArray* に返します。"
		},
		"PRINT RECORD": {
			"Syntax": "**PRINT RECORD** ( *aTable* {; *} )<br/>**PRINT RECORD** ( *aTable* {; >} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードを印刷するテーブル または 省略した場合はデフォルトテーブル"
				],
				[
					"* &#124; >",
					"演算子",
					"->",
					"*: 印刷ダイアログを省略, または >:  印刷設定の再初期化をしない"
				]
			],
			"Summary": "**PRINT RECORD** は *aTable*のカレントレコードを、カレントセレクションを変更せずに印刷します。"
		},
		"PRINT SELECTION": {
			"Syntax": "**PRINT SELECTION** ( *aTable* {; *} )<br/>**PRINT SELECTION** ( *aTable* {; >} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションを印刷するテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"* &#124; >",
					"演算子",
					"->",
					"*: 印刷ダイアログを省略, または >:  印刷設定の再初期化をしない"
				]
			],
			"Summary": "**PRINT SELECTION** は、*aTable*のカレントセレクションを印刷します。"
		},
		"Print settings to BLOB": {
			"Syntax": "**Print settings to BLOB** ( *printSettings* ) : Integer",
			"Params": [
				[
					"printSettings",
					"Blob",
					"<-",
					"現在のプリント設定"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"1 = 処理に成功, 0 = カレントのプリンターがない"
				]
			],
			"Summary": "**Print settings to BLOB** コマンドは4Dのカレントのプリント設定を *printSettings* BLOBに格納します。"
		},
		"PRINT SETTINGS": {
			"Syntax": "**PRINT SETTINGS** {( *dialType* )}",
			"Params": [
				[
					"dialType",
					"Integer",
					"->",
					"表示するダイアログボックス"
				]
			],
			"Summary": "**PRINT SETTINGS** は印刷設定ダイアログボックスを表示します。"
		},
		"PRINTERS LIST": {
			"Syntax": "**PRINTERS LIST** ( *namesArray* {; *altNamesArray* {; *modelsArray*}} )",
			"Params": [
				[
					"namesArray",
					"Text array",
					"<-",
					"プリンタ名"
				],
				[
					"altNamesArray",
					"Text array",
					"<-",
					"Windows: プリンタの場所 macOS: カスタムプリンタ名"
				],
				[
					"modelsArray",
					"Text array",
					"<-",
					"プリンタモデル"
				]
			],
			"Summary": "**PRINTERS LIST** コマンドは、引数として渡された各配列にそのマシンで使用できるプリンタの名前、およびオプションとしてプリンタの場所とモデルを返します。"
		},
		"Printing page": {
			"Syntax": "**Printing page**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"現在印刷中のページのページ番号"
				]
			],
			"Summary": "Printing pageは、印刷中のページ番号を返します。"
		},
		"PROCESS 4D TAGS": {
			"Syntax": "**PROCESS 4D TAGS** ( *inputData* ; *outputData* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"inputData",
					"Text",
					"->",
					"処理する4Dタグを格納しているデータ"
				],
				[
					"outputData",
					"Text",
					"<-",
					"処理されたデータ"
				],
				[
					"param",
					"Expression",
					"->",
					"実行されるテンプレートへと渡される引数"
				]
			],
			"Summary": "**PROCESS 4D TAGS**コマンドを使用すると、*inputTemplate* 引数に格納されている4D変換タグの処理が開始されます。"
		},
		"Process aborted": {
			"Syntax": "**Process aborted**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = プロセスは中止されようとしている, False = プロセス中止されようとしていない"
				]
			],
			"Summary": "**Process aborted**コマンドは、このコマンドを呼び出したプロセスが不意に中断されようとしている場合**True**を返します。"
		},
		"Process state": {
			"Syntax": "**Process state** ( *process* ) : Integer",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"プロセスの状態"
				]
			],
			"Summary": "**Process state** コマンドは、*process*に指定したプロセス番号を持つプロセスの状態を返します。"
		},
		"PUSH RECORD": {
			"Syntax": "**PUSH RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードをプッシュするテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "PUSH RECORDは、*aTable*のカレントレコード (それに付随するサブレコードも含めて) を、そのテーブルのレコードスタックにプッシュします。"
		},
		"QR BLOB TO REPORT": {
			"Syntax": "**QR BLOB TO REPORT** ( *area* ; *BLOB* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"Blob",
					"Blob",
					"->",
					"レポートを納めたBLOB"
				]
			],
			"Summary": "QR BLOB TO REPORT コマンドは、*blob*に格納されたレポートを*area*に渡されたクイックレポートエリアに配置します。"
		},
		"QR Count columns": {
			"Syntax": "**QR Count columns** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"エリア中のカラム数"
				]
			],
			"Summary": "QR Count columns コマンドは、クイックレポート*area*に存在するカラムの数を返します。"
		},
		"QR DELETE COLUMN": {
			"Syntax": "**QR DELETE COLUMN** ( *area* ; *colNumber* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"カラム番号"
				]
			],
			"Summary": "QR DELETE COLUMNは、*area*にある*colNumber*に渡された番号のカラムを削除します。"
		},
		"QR DELETE OFFSCREEN AREA": {
			"Syntax": "**QR DELETE OFFSCREEN AREA** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"削除するエリアの参照"
				]
			],
			"Summary": "QR DELETE OFFSCREEN AREA コマンドは、*area*引数に渡された参照番号のクイックレポートオフスクリーンエリアをメモリから削除します。"
		},
		"QR EXECUTE COMMAND": {
			"Syntax": "**QR EXECUTE COMMAND** ( *area* ; *command* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"command",
					"Integer",
					"->",
					"実行するメニューコマンド"
				]
			],
			"Summary": "**QR EXECUTE COMMAND** コマンドは、*command*に渡された参照番号のツールバーボタンコマンドを実行します。"
		},
		"QR Find column": {
			"Syntax": "**QR Find column** ( *area* ; *expression* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"expression",
					"Text, Pointer",
					"->",
					"カラムオブジェクト"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カラム番号"
				]
			],
			"Summary": "QR Find column コマンドは、*expression*引数で渡された表現式に一致する内容を持つ最初のカラムの番号を返します。"
		},
		"QR Get area property": {
			"Syntax": "**QR Get area property** ( *area* ; *property* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリアの参照"
				],
				[
					"property",
					"Integer",
					"->",
					"インタフェース要素"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"1 = 表示, 0 = 非表示"
				]
			],
			"Summary": "**QR Get area property** コマンドは、*property*に渡されたインタフェース要素（ツールバーまたはメニューバー）が表示されていなければ0を、表示されていれば1を返します。"
		},
		"QR GET BORDERS": {
			"Syntax": "**QR GET BORDERS** ( *area* ; *column* ; *row* ; *border* ; *line* {; *color*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"column",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"row",
					"Integer",
					"->",
					"行番号"
				],
				[
					"border",
					"Integer",
					"->",
					"罫線の値"
				],
				[
					"line",
					"Integer",
					"<-",
					"線の太さ"
				],
				[
					"color",
					"Integer",
					"<-",
					"罫線のカラー"
				]
			],
			"Summary": "QR GET BORDERS コマンドを使用し、指定したセルの罫線スタイルを取得できます。"
		},
		"QR Get command status": {
			"Syntax": "**QR Get command status** ( *area* ; *command* {; *value*} ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"command",
					"Integer",
					"->",
					"コマンド番号"
				],
				[
					"value",
					"Integer, Text",
					"<-",
					"選択されたサブアイテムの値"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"コマンドの状態"
				]
			],
			"Summary": "QR Get command status コマンドは、*command*が使用不可であれば0を、使用可能であれば1を返します。"
		},
		"QR GET DESTINATION": {
			"Syntax": "**QR GET DESTINATION** ( *area* ; *type* {; *specifics*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"type",
					"Integer",
					"<-",
					"レポートのタイプ"
				],
				[
					"specifics",
					"Text, Variable",
					"<-",
					"出力先の詳細"
				]
			],
			"Summary": "QR GET DESTINATION コマンドは、*area*に渡したエリア参照のレポート出力先を取得します。"
		},
		"QR Get document property": {
			"Syntax": "**QR Get document property** ( *area* ; *property* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"property",
					"Integer",
					"->",
					"1 = 印刷ダイアログ, 2 = ドキュメント単位"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"プロパティ値"
				]
			],
			"Summary": "QR Get document property コマンドを使用し、印刷ダイアログの表示の有無、または*area*に表示されるドキュメントの単位を取得することができます。"
		},
		"QR Get drop column": {
			"Syntax": "**QR Get drop column** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ドロップされた値"
				]
			],
			"Summary": "QR Get drop column コマンドは、ドロップ動作が行われた場所の値を返します。"
		},
		"QR GET HEADER AND FOOTER": {
			"Syntax": "**QR GET HEADER AND FOOTER** ( *area* ; *selector* ; *leftTitle* ; *centerTitle* ; *rightTitle* ; *height* {; *picture* {; *pictAlignment*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"selector",
					"Integer",
					"->",
					"1 = ヘッダ, 2 = フッタ"
				],
				[
					"leftTitle",
					"Text",
					"<-",
					"左側に表示されるテキスト"
				],
				[
					"centerTitle",
					"Text",
					"<-",
					"中央に表示されるテキスト"
				],
				[
					"rightTitle",
					"Text",
					"<-",
					"右側に表示されるテキスト"
				],
				[
					"height",
					"Integer",
					"<-",
					"ヘッダまたはフッタの高さ"
				],
				[
					"picture",
					"Picture",
					"<-",
					"表示するピクチャ"
				],
				[
					"pictAlignment",
					"Integer",
					"<-",
					"ピクチャの整列属性"
				]
			],
			"Summary": "QR GET HEADER AND FOOTER コマンドを使用し、ヘッダまたはフッタの内容とサイズを取得できます。"
		},
		"QR Get HTML template": {
			"Syntax": "**QR Get HTML template** ( *area* ) : Text",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"テンプレートとして使用されるHTMLコード"
				]
			],
			"Summary": "QR Get HTML template コマンドは、クイックレポート*area*に現在使用されているHTMLテンプレートを返します。"
		},
		"QR GET INFO COLUMN": {
			"Syntax": "**QR GET INFO COLUMN** ( *area* ; *colNum* ; *title* ; *object* ; *hide* ; *size* ; *repeatedValue* ; *displayFormat* {; *resultVar*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNum",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"title",
					"Text",
					"<-",
					"カラムタイトル"
				],
				[
					"object",
					"Text",
					"<-",
					"カラムに割り当てられたオブジェクト"
				],
				[
					"hide",
					"Integer",
					"<-",
					"0 = 表示, 1 = 非表示"
				],
				[
					"size",
					"Integer",
					"<-",
					"カラムサイズ"
				],
				[
					"repeatedValue",
					"Integer",
					"<-",
					"0 = 繰り返ししない, 1 = 繰り返す"
				],
				[
					"displayFormat",
					"Text",
					"<-",
					"データの表示フォーマット"
				],
				[
					"resultVar",
					"Text",
					"<-",
					"フォーミュラ変数名"
				]
			],
			"Summary": "### リストモード \n\nQR GET INFO COLUMN コマンドを使用して、既存のカラムに関するパラメタを取得することができます。"
		},
		"QR Get info row": {
			"Syntax": "**QR Get info row** ( *area* ; *row* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"row",
					"Integer",
					"->",
					"指定する行"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"0 = 表示, 1 = 非表示"
				]
			],
			"Summary": "QR Get info row コマンドは、*row*に渡した行に関する表示の有無を取得します。"
		},
		"QR Get report kind": {
			"Syntax": "**QR Get report kind** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"レポートタイプ"
				]
			],
			"Summary": "QR Get report kind コマンドは、*area*に渡したエリアのレポートタイプを取得します。"
		},
		"QR Get report table": {
			"Syntax": "**QR Get report table** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"テーブル番号"
				]
			],
			"Summary": "QR Get report table コマンドは、*area*に渡した参照のレポートエリア用のカレントテーブル番号を返します。"
		},
		"QR GET SELECTION": {
			"Syntax": "**QR GET SELECTION** ( *area* ; *left* ; *top* {; *right* {; *bottom*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"left",
					"Integer",
					"<-",
					"左境界"
				],
				[
					"top",
					"Integer",
					"<-",
					"上境界"
				],
				[
					"right",
					"Integer",
					"<-",
					"右境界"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"下境界"
				]
			],
			"Summary": "QR GET SELECTION コマンドは、選択されたセルの座標を返します。"
		},
		"QR GET SORTS": {
			"Syntax": "**QR GET SORTS** ( *area* ; *aColumns* ; *aOrders* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"aColumns",
					"Real array",
					"<-",
					"ソートされたカラム"
				],
				[
					"aOrders",
					"Real array",
					"<-",
					"ソート順"
				]
			],
			"Summary": "QR GET SORTS コマンドは、次の2つの配列を作成します"
		},
		"QR Get text property": {
			"Syntax": "**QR Get text property** ( *area* ; *colNum* ; *rowNum* ; *property* ) : any",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNum",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"rowNum",
					"Integer",
					"->",
					"行番号"
				],
				[
					"property",
					"Integer",
					"->",
					"プロパティ番号"
				],
				[
					"戻り値",
					"Integer, Text",
					"<-",
					"選択したプロパティの値"
				]
			],
			"Summary": "QR Get text property コマンドは、*colNum* と *rowNum* で指定されたセルのテキスト属性のプロパティ値を返します。"
		},
		"QR GET TOTALS DATA": {
			"Syntax": "**QR GET TOTALS DATA** ( *area* ; *colNum* ; *breakNum* ; *operator* ; *text* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNum",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"breakNum",
					"Integer",
					"->",
					"ブレーク番号"
				],
				[
					"operator",
					"Integer",
					"<-",
					"セルの演算名"
				],
				[
					"text",
					"Text",
					"<-",
					"セルの内容"
				]
			],
			"Summary": "### リストモード \n\nQR GET TOTALS DATA コマンドを使用し、指定するブレークに関する詳細を取得できます。"
		},
		"QR GET TOTALS SPACING": {
			"Syntax": "**QR GET TOTALS SPACING** ( *area* ; *subtotal* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"小計番号"
				],
				[
					"value",
					"Integer",
					"<-",
					"0=スペースなし, 32000=改ページ挿入, >0=ブレークレベルの上に追加するスペース, <0=比率指定"
				]
			],
			"Summary": "QR GET TOTALS SPACING コマンドを使用し、小計行の下部の行間を取得することができます。"
		},
		"QR INSERT COLUMN": {
			"Syntax": "**QR INSERT COLUMN** ( *area* ; *colNumber* ; *object* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"object",
					"Field, Variable, Pointer",
					"->",
					"カラムに挿入するオブジェクト"
				]
			],
			"Summary": "QR INSERT COLUMN コマンドは指定された位置にカラムの作成または挿入を行います。"
		},
		"QR MOVE COLUMN": {
			"Syntax": "**QR MOVE COLUMN** ( *area* ; *column* ; *newPos* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"column",
					"Integer",
					"->",
					"Column number"
				],
				[
					"newPos",
					"Integer",
					"->",
					"New position for column"
				]
			],
			"Summary": "**QR MOVE COLUMN**コマンドは、*column* 変数の位置にあるカラムを*newPos* 変数で指定した位置へと移動させます。"
		},
		"QR NEW AREA": {
			"Syntax": "**QR NEW AREA** ( *ptr* )",
			"Params": [
				[
					"ptr",
					"Pointer",
					"->",
					"変数へのポインター"
				]
			],
			"Summary": "**QR NEW AREA** コマンドは新しいクイックレポートエリアを作成し、その参照番号を倍長整数変数に保存します(変数は*ptr*ポインターによって参照されます)。"
		},
		"QR New offscreen area": {
			"Syntax": "**QR New offscreen area**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"作られたエリアの参照"
				]
			],
			"Summary": "QR New offscreen area コマンドは、新しくクイックレポートのオフスクリーンエリアを作成し、その参照番号を返します。"
		},
		"QR ON COMMAND": {
			"Syntax": "**QR ON COMMAND** ( *area* ; *methodName* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"methodName",
					"Text",
					"->",
					"置き換えメソッド名"
				]
			],
			"Summary": "QR ON COMMAND コマンドは、ユーザによるメニューコマンドの選択やボタンのクリックなどで、クイックレポートコマンドが起動されると、 *methodName* に渡された4Dメソッドを実行します。"
		},
		"QR REPORT TO BLOB": {
			"Syntax": "**QR REPORT TO BLOB** ( *area* ; *BLOB* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"Blob",
					"Blob",
					"<-",
					"クイックレポートを納めるBLOB"
				]
			],
			"Summary": "QR REPORT TO BLOB コマンドは、*area*に渡された参照番号のレポートをBLOB (変数またはフィールド) に格納します。"
		},
		"QR REPORT": {
			"Syntax": "**QR REPORT** ( {*aTable* ;} *document* {; *methodName*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レポートを作成するテーブル、省略時はデフォルトテーブル"
				],
				[
					"document",
					"Text",
					"->",
					"ロードするクイックレポートドキュメント"
				],
				[
					"methodName",
					"Text",
					"->",
					"呼び出すメソッドの名前"
				],
				[
					"*",
					"演算子",
					"->",
					"プリントダイアログボックスを表示しない"
				]
			],
			"Summary": "**QR REPORT**はクイックレポートエディターを用いて作成された、*aTable*のレポートを印刷します。"
		},
		"QR RUN": {
			"Syntax": "**QR RUN** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"実行するエリアの参照"
				]
			],
			"Summary": "QR RUNコマンドは、出力先を含め、クイックレポートの現在の設定を使用して、*area*引数に渡された参照番号のレポートエリアを実行します。"
		},
		"QR SET AREA PROPERTY": {
			"Syntax": "**QR SET AREA PROPERTY** ( *area* ; *property* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"property",
					"Integer",
					"->",
					"指定するインタフェース要素"
				],
				[
					"value",
					"Integer",
					"->",
					"1 = 表示, 0 = 非表示"
				]
			],
			"Summary": "**QR SET AREA PROPERTY** コマンドを使用し、*property* に渡したインタフェース要素 (ツールバーやメニューバー) を表示、または非表示に設定できます。"
		},
		"QR SET BORDERS": {
			"Syntax": "**QR SET BORDERS** ( *area* ; *column* ; *row* ; *border* ; *line* {; *color*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"column",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"row",
					"Integer",
					"->",
					"行番号"
				],
				[
					"border",
					"Integer",
					"->",
					"罫線の合成値"
				],
				[
					"line",
					"Integer",
					"->",
					"線の太さ"
				],
				[
					"color",
					"Integer",
					"->",
					"罫線のカラー"
				]
			],
			"Summary": "QR SET BORDERS コマンドを使用し、指定したセルの罫線スタイルを設定できます。"
		},
		"QR SET DESTINATION": {
			"Syntax": "**QR SET DESTINATION** ( *area* ; *type* {; *specifics*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"type",
					"Integer",
					"->",
					"レポートの出力先"
				],
				[
					"specifics",
					"Text, Variable",
					"->",
					"出力先の詳細"
				]
			],
			"Summary": "**QR SET DESTINATION** コマンドは、*area* に渡された参照番号のエリア用のレポート出力タイプを設定します。"
		},
		"QR SET DOCUMENT PROPERTY": {
			"Syntax": "**QR SET DOCUMENT PROPERTY** ( *area* ; *property* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"property",
					"Integer",
					"->",
					"1 = 印刷ダイアログ, 2 = ドキュメントの単位"
				],
				[
					"value",
					"Integer",
					"->",
					"プロパティ値"
				]
			],
			"Summary": "QR SET DOCUMENT PROPERTY コマンドを使用し、印刷ダイアログの表示の有無、またはドキュメントで使用する単位の指定を行うことができます。"
		},
		"QR SET HEADER AND FOOTER": {
			"Syntax": "**QR SET HEADER AND FOOTER** ( *area* ; *selector* ; *leftTitle* ; *centerTitle* ; *rightTitle* ; *height* {; *picture* {; *pictAlignment*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"selector",
					"Integer",
					"->",
					"1 = ヘッダ, 2 = フッタ"
				],
				[
					"leftTitle",
					"Text",
					"->",
					"左側に表示されるテキスト"
				],
				[
					"centerTitle",
					"Text",
					"->",
					"中央に表示されるテキスト"
				],
				[
					"rightTitle",
					"Text",
					"->",
					"右側に表示されるテキスト"
				],
				[
					"height",
					"Integer",
					"->",
					"ヘッダまたはフッタの高さ"
				],
				[
					"picture",
					"Picture",
					"->",
					"表示するピクチャ"
				],
				[
					"pictAlignment",
					"Integer",
					"->",
					"ピクチャの整列属性"
				]
			],
			"Summary": "QR SET HEADER AND FOOTER コマンドを使用し、ヘッダまたはフッタの内容とサイズを設定することができます。"
		},
		"QR SET HTML TEMPLATE": {
			"Syntax": "**QR SET HTML TEMPLATE** ( *area* ; *template* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"template",
					"Text",
					"->",
					"HTMLテンプレート"
				]
			],
			"Summary": "QR SET HTML TEMPLATEコマンドは、クイックレポートエリアに使用されるHTMLテンプレートを設定します。"
		},
		"QR SET INFO COLUMN": {
			"Syntax": "**QR SET INFO COLUMN** ( *area* ; *colNum* ; *title* ; *object* ; *hide* ; *size* ; *repeatedValue* ; *displayFormat* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNum",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"title",
					"Text",
					"->",
					"カラムタイトル"
				],
				[
					"object",
					"Field, Variable",
					"->",
					"カラムに割り当てられたオブジェクト"
				],
				[
					"hide",
					"Integer",
					"->",
					"0 = 表示, 1 = 非表示"
				],
				[
					"size",
					"Integer",
					"->",
					"カラムサイズ"
				],
				[
					"repeatedValue",
					"Integer",
					"->",
					"0 = 繰り返ししない, 1 = 繰り返す"
				],
				[
					"displayFormat",
					"Text",
					"->",
					"データの表示フォーマット"
				]
			],
			"Summary": "QR SET INFO COLUMN コマンドを使用して、既存のカラムに関するパラメタを設定できます。"
		},
		"QR SET INFO ROW": {
			"Syntax": "**QR SET INFO ROW** ( *area* ; *row* ; *hide* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリアの参照"
				],
				[
					"row",
					"Integer",
					"->",
					"行指定"
				],
				[
					"hide",
					"Integer",
					"->",
					"0 = 表示, 1 = 非表示"
				]
			],
			"Summary": "QR SET INFO ROW コマンドは、*row*に渡した行を表示/非表示に設定します。"
		},
		"QR SET REPORT KIND": {
			"Syntax": "**QR SET REPORT KIND** ( *area* ; *type* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"type",
					"Integer",
					"->",
					"レポートタイプ"
				]
			],
			"Summary": "QR SET REPORT KIND コマンドは、*area*に渡した参照番号のエリアのレポートタイプを設定します。"
		},
		"QR SET REPORT TABLE": {
			"Syntax": "**QR SET REPORT TABLE** ( *area* ; *aTable* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"aTable",
					"Integer",
					"->",
					"テーブル番号"
				]
			],
			"Summary": "QR SET REPORT TABLE コマンドは、*area*に渡した参照のレポートエリアに、*table*に渡した番号のテーブルをカレントテーブルとして設定します。"
		},
		"QR SET SELECTION": {
			"Syntax": "**QR SET SELECTION** ( *area* ; *left* ; *top* {; *right* {; *bottom*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"left",
					"Integer",
					"->",
					"左境界"
				],
				[
					"top",
					"Integer",
					"->",
					"上境界"
				],
				[
					"right",
					"Integer",
					"->",
					"右境界"
				],
				[
					"bottom",
					"Integer",
					"->",
					"下境界"
				]
			],
			"Summary": "QR SET SELECTION コマンドを使用するとマウスクリックをした場合と同様に、セルや行、カラム、またはエリア全体を反転表示 (選択) することができます。"
		},
		"QR SET SORTS": {
			"Syntax": "**QR SET SORTS** ( *area* ; *aColumns* {; *aOrders*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"aColumns",
					"Real array",
					"->",
					"カラム"
				],
				[
					"aOrders",
					"Real array",
					"->",
					"ソート方向"
				]
			],
			"Summary": "QR SET SORTS コマンド使用し、*area*に渡した参照のレポート内にあるカラムのソート順を設定できます。"
		},
		"QR SET TEXT PROPERTY": {
			"Syntax": "**QR SET TEXT PROPERTY** ( *area* ; *colNum* ; *rowNum* ; *property* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNum",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"rowNum",
					"Integer",
					"->",
					"行番号"
				],
				[
					"property",
					"Integer",
					"->",
					"プロパティ番号"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"選択したプロパティの値"
				]
			],
			"Summary": "QR SET TEXT PROPERTY コマンドを使用し、*colNum* と *rowNum* で指定されたセルのテキスト属性を設定できます。"
		},
		"QR SET TOTALS DATA": {
			"Syntax": "**QR SET TOTALS DATA** ( *area* ; *colNum* ; *breakNum* ; *operator* )<br/>**QR SET TOTALS DATA** ( *area* ; *colNum* ; *breakNum* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"colNum",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"breakNum",
					"Integer",
					"->",
					"ブレーク番号"
				],
				[
					"operator &#124; value",
					"倍長整数, 文字",
					"->",
					"セルの演算子の値またはセルの内容"
				]
			],
			"Summary": "**Note:** このコマンドで小計を作成することはできません。"
		},
		"QR SET TOTALS SPACING": {
			"Syntax": "**QR SET TOTALS SPACING** ( *area* ; *subtotal* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"エリア参照"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"小計番号"
				],
				[
					"value",
					"Integer",
					"->",
					"0=スペースなし, 32000=改ページ挿入, >0=ブレークレベルの上に追加するスペース, <0=比率指定"
				]
			],
			"Summary": "QR SET TOTALS SPACING コマンドを使用し、小計行の下部の行間を設定できます。"
		},
		"QUERY BY ATTRIBUTE": {
			"Syntax": "**QUERY BY ATTRIBUTE** ( {*aTable*}{;}{*conjOp* ;} *objectField* ; *attributePath* ; *queryOp* ; *value* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションまたはレコードを返すテーブル 省略時:デフォルトテーブル"
				],
				[
					"conjOp",
					"*",
					"->",
					"複数のクエリ(あれば)を連結する際に使用する結合演算子"
				],
				[
					"objectField",
					"Field",
					"->",
					"属性をクエリするオブジェクトフィールド"
				],
				[
					"attributePath",
					"Text",
					"->",
					"属性の名前またはパス"
				],
				[
					"queryOp",
					"Text, *",
					"->",
					"クエリ演算子(比較演算子)"
				],
				[
					"value",
					"Text, Number, Date, Time",
					"->",
					"比較する値"
				],
				[
					"*",
					"演算子",
					"->",
					"クエリ継続フラグ"
				]
			],
			"Summary": "**QUERY BY ATTRIBUTE** は*objectField*、*attributePath*、*queryOp* そして *value* 引数を使用して定義されたクエリ文字列に合致するレコードを検索し、*aTable* に対しレコードのセレクションを返します。"
		},
		"QUERY BY EXAMPLE": {
			"Syntax": "**QUERY BY EXAMPLE** ( {*aTable*}{;}{*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードのセレクションを返すテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"*",
					"演算子",
					"->",
					"指定した場合、スクロールバーの非表示"
				]
			],
			"Summary": "QUERY BY EXAMPLEは、デザインモードのフォームによるクエリメニューと同じ処理を実行します。"
		},
		"QUERY BY FORMULA": {
			"Syntax": "**QUERY BY FORMULA** ( *aTable* {; *queryFormula*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードセレクションを求めるテーブル"
				],
				[
					"queryFormula",
					"Boolean",
					"->",
					"検索フォーミュラ"
				]
			],
			"Summary": "**QUERY BY FORMULA**は*aTable*からレコードを検索します。"
		},
		"QUERY BY SQL": {
			"Syntax": "**QUERY BY SQL** ( {*aTable* ;} *sqlFormula* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードセレクションを返すテーブル、または 省略された場合デフォルトテーブル"
				],
				[
					"sqlFormula",
					"Text",
					"->",
					"SELECTクエリのWHERE節を表す 有効なSQL検索フォーミュラ"
				]
			],
			"Summary": "4Dに統合されたSQLカーネルのメリットを利用ためにQUERY BY SQLコマンドを使用できます。"
		},
		"QUERY SELECTION BY ATTRIBUTE": {
			"Syntax": "**QUERY SELECTION BY ATTRIBUTE** ( {*aTable*}{;}{*conjOp* ;} *objectField* ; *attributePath* ; *queryOp* ; *value* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションまたはレコードを返すテーブル 省略時:デフォルトテーブル"
				],
				[
					"conjOp",
					"*",
					"->",
					"複数のクエリ(あれば)を連結する際に使用する結合演算子"
				],
				[
					"objectField",
					"Field",
					"->",
					"属性をクエリするオブジェクトフィールド"
				],
				[
					"attributePath",
					"Text",
					"->",
					"属性の名前またはパス"
				],
				[
					"queryOp",
					"*, Text",
					"->",
					"クエリ演算子(比較演算子)"
				],
				[
					"value",
					"Text, Number, Date, Time",
					"->",
					"比較する値"
				],
				[
					"*",
					"演算子",
					"->",
					"クエリ継続フラグ"
				]
			],
			"Summary": "**QUERY SELECTION BY ATTRIBUTE** は QUERY BY ATTRIBUTE と同じように動作します。"
		},
		"QUERY SELECTION BY FORMULA": {
			"Syntax": "**QUERY SELECTION BY FORMULA** ( *aTable* {; *queryFormula*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードセレクションを求めるテーブル"
				],
				[
					"queryFormula",
					"Boolean",
					"->",
					"クエリフォーミュラ"
				]
			],
			"Summary": "QUERY SELECTION BY FORMULAは、*aTable*からレコードを検索します。"
		},
		"QUERY SELECTION WITH ARRAY": {
			"Syntax": "**QUERY SELECTION WITH ARRAY** ( *targetField* ; *array* )",
			"Params": [
				[
					"targetField",
					"Field",
					"->",
					"値の比較に使用するフィールド"
				],
				[
					"array",
					"Array",
					"->",
					"検索する値の配列"
				]
			],
			"Summary": "QUERY SELECTION WITH ARRAY コマンドは1番目の引数に渡されたフィールドのテーブルを検索し、*targetField* が*array*要素のうち少なくともひとつの値に等しいレコードをカレントセレクションにします。"
		},
		"QUERY SELECTION": {
			"Syntax": "**QUERY SELECTION** ( {*aTable* }{;}{ *queryArgument* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードセレクションを求めるテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"queryArgument",
					"Expression",
					"->",
					"検索条件"
				],
				[
					"*",
					"演算子",
					"->",
					"検索継続フラグ"
				]
			],
			"Summary": "**QUERY SELECTION** は、*aTable*のレコードを検索します。"
		},
		"QUERY WITH ARRAY": {
			"Syntax": "**QUERY WITH ARRAY** ( *targetField* ; *array* )",
			"Params": [
				[
					"targetField",
					"Field",
					"->",
					"値との比較に使用するフィールド"
				],
				[
					"array",
					"Array",
					"->",
					"検索する値の配列"
				]
			],
			"Summary": "コマンドは、*targetField*の値が少なくとも*array*要素のうち1つに等しいレコードを、 *targetField*が属するテーブルの全レコードの中から検索します。"
		},
		"QUERY": {
			"Syntax": "**QUERY** ( {*aTable* }{;}{ *queryArgument* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードのセレクションを求めるテーブル, または 省略した場合、デフォルトテーブル"
				],
				[
					"queryArgument",
					"Expression",
					"->",
					"検索条件"
				],
				[
					"*",
					"演算子",
					"->",
					"検索継続フラグ"
				]
			],
			"Summary": "**QUERY** は、*aTable*に対して*queryArgument*に指定した条件に一致するレコードを検索し、検索結果をセレクションとして返します。"
		},
		"QUIT 4D": {
			"Syntax": "**QUIT 4D** {( *time* )}",
			"Params": [
				[
					"time",
					"Integer",
					"->",
					"サーバ終了までの時間 (秒)"
				]
			],
			"Summary": "**QUIT 4D**コマンドは、カレントの4Dアプリケーションを終了してデスクトップに戻ります。"
		},
		"Random": {
			"Syntax": "**Random**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"乱数値"
				]
			],
			"Summary": "Random は、0から32,767までの範囲の乱数を返します。"
		},
		"Read only state": {
			"Syntax": "**Read only state** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"読み込みのみ状態を調べるテーブル, または 省略時はデフォルトテーブル"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE: テーブルへのアクセスは読み込みのみ FALSE: テーブルへのアクセスは読み書き可"
				]
			],
			"Summary": "このコマンドは、コマンドが呼び出されるプロセス内の*aTable*の状態が読み込み専用かどうかを調べます。"
		},
		"READ ONLY": {
			"Syntax": "**READ ONLY** {( *aTable* )}<br/>**READ ONLY** {( * )}",
			"Params": [
				[
					"aTable &#124; *",
					"テーブル, 演算子",
					"->",
					"読み込みのみにするテーブル, または *: すべてのテーブル, または 省略時: デフォルトテーブル"
				]
			],
			"Summary": "READ ONLYは、コマンドが呼び出されたプロセス内の*aTable*の状態を読み込みのみに変更します。"
		},
		"READ PICTURE FILE": {
			"Syntax": "**READ PICTURE FILE** ( *fileName* ; *picture* {; *} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"読み込むファイルのフルパス名, または空の文字列"
				],
				[
					"picture",
					"Picture",
					"<-",
					"ピクチャを受け取るフィールドまたは変数"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = すべてのファイルタイプを受け入れる"
				]
			],
			"Summary": "READ PICTURE FILE コマンドを使用してディスクファイル*fileName* に保存されたピクチャを開き、これを*picture* 引数に指定した4Dフィールドまたは変数へロードすることができます。"
		},
		"READ WRITE": {
			"Syntax": "**READ WRITE** {( *aTable* )}<br/>**READ WRITE** {( * )}",
			"Params": [
				[
					"aTable &#124; *",
					"テーブル, 演算子",
					"->",
					"読み書き可にするテーブル, または *: すべてのテーブル, または 省略時: デフォルトテーブル"
				]
			],
			"Summary": "READ WRITEは、このコマンドを呼び出したプロセス内の*aTable*を読み書き可に変更します。"
		},
		"REAL TO BLOB": {
			"Syntax": "**REAL TO BLOB** ( *real* ; *blob* ; *realFormat* {; offset } )<br/>**REAL TO BLOB** ( *real* ; *blob* ; *realFormat* {; *} )",
			"Params": [
				[
					"real",
					"Real",
					"->",
					"BLOBに書き込む実数値"
				],
				[
					"Blob",
					"Blob",
					"->",
					"実数値を受け取るBLOB"
				],
				[
					"realFormat",
					"Integer",
					"->",
					"0 Native real format 1 Extended real format 2  Macintosh Double real format 3  Windows Double real format"
				],
				[
					"offset &#124; *",
					"変数, 演算子",
					"<->",
					"BLOB内のオフセット (バイト単位) または値を追加する場合 *"
				],
				[
					"",
					"",
					"",
					"*でない場合、書き込み後の新しいオフセット"
				]
			],
			"Summary": "REAL TO BLOB コマンドは、*blob*に実数値*real*を書き込みます。"
		},
		"RECEIVE BUFFER": {
			"Syntax": "**RECEIVE BUFFER** ( *receiveVar* )",
			"Params": [
				[
					"receiveVar",
					"Text",
					"<-",
					"データを受信する変数"
				]
			],
			"Summary": "**RECEIVE BUFFER** は、SET CHANNELコマンドで前もって開いたシリアルポートからデータを読み込みます。"
		},
		"RECEIVE PACKET": {
			"Syntax": "**RECEIVE PACKET** ( {*docRef* ;} *receiveVar* ; *stopChar* )<br/>**RECEIVE PACKET** ( {*docRef* ;} *receiveVar* ; *numBytes* )",
			"Params": [
				[
					"Time",
					"Time",
					"->",
					"ドキュメント参照番号, または カレントチャンネル (シリアルポートまたはドキュメント)"
				],
				[
					"receiveVar",
					"Text, Blob",
					"<-",
					"データを受け取る変数"
				],
				[
					"stopChar &#124; numBytes",
					"文字, 倍長整数",
					"->",
					"受信を停止する文字, または受信するバイト数"
				]
			],
			"Summary": "RECEIVE PACKET コマンドは、シリアルポートまたはドキュメントから文字を読み込みます。"
		},
		"RECEIVE RECORD": {
			"Syntax": "**RECEIVE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードを受信するテーブル, または 省略した場合デフォルトテーブル"
				]
			],
			"Summary": "RECEIVE RECORDは、SET CHANNELコマンドで開いたシリアルポートまたはドキュメントから*table*にレコードを受信します。"
		},
		"RECEIVE VARIABLE": {
			"Syntax": "**RECEIVE VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"<-",
					"データを受信する変数"
				]
			],
			"Summary": "RECEIVE VARIABLE は、SET CHANNELで開いたシリアルポートまたはドキュメントから、SEND VARIABLEコマンドで送信した*variable*を受信します。"
		},
		"Record number": {
			"Syntax": "**Record number** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードの番号を返すテーブル 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カレントレコード番号"
				]
			],
			"Summary": "**Record number**は、*aTable*のカレントレコードの物理レコード番号を返します。"
		},
		"Records in selection": {
			"Syntax": "**Records in selection** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントセレクション数を返すテーブル 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カレントセレクションのレコード数"
				]
			],
			"Summary": "Records in selectionは、*aTable*のカレントセレクションのレコード数を返します。"
		},
		"Records in set": {
			"Syntax": "**Records in set** ( *set* ) : Integer",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"テストするセットの名前"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"セットに含まれるレコード数"
				]
			],
			"Summary": "Records in setコマンドは、*set*に含まれるレコードの数を返します。"
		},
		"Records in table": {
			"Syntax": "**Records in table** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコード数を返すテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"テーブル中の総レコード数"
				]
			],
			"Summary": "Records in tableは、*aTable*中の総レコード数を返します。"
		},
		"REDRAW WINDOW": {
			"Syntax": "**REDRAW WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または省略時 カレントプロセスの最前面ウィンドウ"
				]
			],
			"Summary": "REDRAW WINDOW コマンドは*window*に渡した参照番号を持つウィンドウのグラフィックな更新を行います。"
		},
		"REDRAW": {
			"Syntax": "**REDRAW** ( *object* )",
			"Params": [
				[
					"object",
					"any",
					"->",
					"サブフォームを再描画するテーブル、またはエリアを再描画するフィールド、またはエリアを再描画する変数、または更新されるべきリストボックス"
				]
			],
			"Summary": "メソッドを使用して、サブフォームで中に表示されるフィールドの値を変更する場合、フォームを確実に更新するために REDRAW コマンドを使用しなければなりません。"
		},
		"REDUCE RESTORE WINDOW": {
			"Syntax": "**REDUCE RESTORE WINDOW** ( *window* )",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				]
			],
			"Summary": "**REDUCE RESTORE WINDOW** コマンドは、*window* 引数に参照を渡したウィンドウを、WindowsのタスクバーまたはmacOS のDockへ収納、またはそこから展開します。"
		},
		"REDUCE SELECTION": {
			"Syntax": "**REDUCE SELECTION** ( {*aTable* ;} *number* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションの数を減らすテーブル, または 省略時デフォルトテーブル"
				],
				[
					"number",
					"Integer",
					"->",
					"選択するレコード数"
				]
			],
			"Summary": "REDUCE SELECTIONは、*aTable*の新しいレコードセレクションを作成します。"
		},
		"Refresh license": {
			"Syntax": "**Refresh license** : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"ステータスオブジェクト"
				]
			],
			"Summary": "**Refresh license** コマンドはカレントの4D Server ライセンスを更新します。"
		},
		"REGENERATE MISSING TABLE": {
			"Syntax": "**REGENERATE MISSING TABLE** ( *tableName* )",
			"Params": [
				[
					"tableName",
					"Text",
					"->",
					"再生成する、失われたテーブルの名称"
				]
			],
			"Summary": "REGENERATE MISSING TABLE コマンドは tableName引数に渡された名前の失われたテーブルを再構築します。"
		},
		"REGISTER CLIENT": {
			"Syntax": "**REGISTER CLIENT** ( *clientName* {; *period*}{; *} )",
			"Params": [
				[
					"clientName",
					"Text",
					"->",
					"4Dクライアントセッション名"
				],
				[
					"period",
					"Integer",
					"->",
					"***バージョン11.3より無効***"
				],
				[
					"*",
					"演算子",
					"->",
					"ローカルプロセス"
				]
			],
			"Summary": "REGISTER CLIENT コマンドは、4Dクライアントステーションを、*clientName*で指定した名前で4D Serverに登録し、他のクライアントもしくは4D Server (ストアドプロシージャから) が登録されたマシン上で、EXECUTE ON CLIENTコマンドを使ってメソッドを実行できるようにします。"
		},
		"Register data key": {
			"Syntax": "**Register data key** ( *curPassPhrase* ) : Boolean<br/>**Register data key** ( *curDataKey* ) : Boolean",
			"Params": [
				[
					"curPassPhrase &#124; curDataKey",
					"テキスト, オブジェクト",
					"->",
					"カレントのパスフレーズ(テキスト)またはカレントのデータ暗号化キー(オブジェクト)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"暗号化キーが正常に4D キーチェーンに読み込まれた場合にはTrue、キーがすでに4D キーチェーンに入っていた場合にはFlaseを返す"
				]
			],
			"Summary": "**Register data key** コマンドは、引数として渡されたデータ暗号化キーを4D キーチェーンに追加します。"
		},
		"REJECT NEW REMOTE CONNECTIONS": {
			"Syntax": "**REJECT NEW REMOTE CONNECTIONS** ( *rejectStatus* )",
			"Params": [
				[
					"rejectStatus",
					"Boolean",
					"->",
					"接続を拒否したい場合にはTrue、そうでない場合にはFalse"
				]
			],
			"Summary": "**REJECT NEW REMOTE CONNECTIONS** コマンドは、アプリケーションサーバーが新規リモートユーザー接続を受け入れるかどうかを指定します。"
		},
		"REJECT": {
			"Syntax": "**REJECT** {( *aField* )}",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"入力を拒否するフィールド"
				]
			],
			"Summary": "**REJECT**には2つの形式があります。"
		},
		"RELATE MANY SELECTION": {
			"Syntax": "**RELATE MANY SELECTION** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"nテーブルのフィールド (リレーションの開始元)"
				]
			],
			"Summary": "RELATE MANY SELECTION コマンドは、1テーブルのレコードセレクションを元にしてnテーブルのレコードセレクションを作成し、nテーブルの一番目のレコードをカレントレコードとしてロードします。"
		},
		"RELATE MANY": {
			"Syntax": "**RELATE MANY** ( *oneTable* )<br/>**RELATE MANY** ( *Field* )",
			"Params": [
				[
					"oneTable &#124; Field",
					"テーブル, フィールド",
					"->",
					"すべての1対nリレーションを実行するテーブル または1フィールド"
				]
			],
			"Summary": "RELATE MANYには、2つの形式があります。"
		},
		"RELATE ONE SELECTION": {
			"Syntax": "**RELATE ONE SELECTION** ( *manyTable* ; *oneTable* )",
			"Params": [
				[
					"manyTable",
					"Table",
					"->",
					"nテーブル (リレーションの開始元)"
				],
				[
					"oneTable",
					"Table",
					"->",
					"1テーブル (リレーションの参照先)"
				]
			],
			"Summary": "**RELATE ONE SELECTION**コマンドは、*manyTable*のレコードセレクションをもとにして、*oneTable*テーブルの新しいセレクションを作成し、その新しいセレクションの最初のレコードをカレントレコードとしてロードします。"
		},
		"RELATE ONE": {
			"Syntax": "**RELATE ONE** ( *manyTable* {; *choiceField*} )<br/>**RELATE ONE** ( *field* {; *choiceField*} )",
			"Params": [
				[
					"manyTable &#124; Field",
					"テーブル, フィールド",
					"->",
					"すべての自動リレーションを実行するテーブル, または1テーブルへのマニュアルリレーションが引かれたフィールド"
				],
				[
					"choiceField",
					"Field",
					"->",
					"1テーブルの選択フィールド"
				]
			],
			"Summary": "**RELATE ONE** には2つの形式があります。"
		},
		"RELEASE MENU": {
			"Syntax": "**RELEASE MENU** ( *menu* )",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"メニュー参照"
				]
			],
			"Summary": "RELEASE MENU コマンドは*menu* に渡したIDを持つメニューをメモリから解放します。"
		},
		"RELOAD EXTERNAL DATA": {
			"Syntax": "**RELOAD EXTERNAL DATA** ( *aField* )",
			"Params": [
				[
					"aField",
					"Text, Blob, Picture, Object",
					"->",
					"外部ストレージからリロードを行うフィールド"
				]
			],
			"Summary": "**RELOAD EXTERNAL DATA**コマンドはBLOB、ピクチャー、およびテキスト型フィールドに割り当てられた外部ストレージの内容をメモリにリロードします。"
		},
		"RELOAD PROJECT": {
			"Syntax": "**RELOAD PROJECT**",
			"Params": [],
			"Summary": "**RELOAD PROJECT** コマンドは、カレントの4D 環境で実行中のプロジェクトに対して、ソースファイル定義(メソッド、ファイル、等)をディスクから再読み込みします。"
		},
		"REMOVE FROM SET": {
			"Syntax": "**REMOVE FROM SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードのテーブル、または 省略時、デフォルトテーブル"
				],
				[
					"set",
					"Text",
					"->",
					"カレントレコードを取り除くセットの名前"
				]
			],
			"Summary": "REMOVE FROM SETコマンドは、*set*から*aTable*のカレントレコードを取り除きます。"
		},
		"REMOVE PICTURE FROM LIBRARY": {
			"Syntax": "**REMOVE PICTURE FROM LIBRARY** ( *picRef* )<br/>**REMOVE PICTURE FROM LIBRARY** ( *picName* )",
			"Params": [
				[
					"picRef &#124; picName",
					"倍長整数, 文字",
					"->",
					"ピクチャライブラリ画像の参照番号 または ピクチャライブラリ画像の名前"
				]
			],
			"Summary": "REMOVE PICTURE FROM LIBRARY コマンドは、*picRef*引数に渡した参照番号または*picName*引数の名前を持つピクチャをピクチャライブラリから消去します。"
		},
		"Replace string": {
			"Syntax": "**Replace string** ( *source* ; *oldString* ; *newString* {; *howMany*}{; *} ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"元の文字列"
				],
				[
					"oldString",
					"Text",
					"->",
					"置き換対象の文字列"
				],
				[
					"newString",
					"Text",
					"->",
					"置き換え後の文字列 (空文字の場合オカレンスは削除)"
				],
				[
					"howMany",
					"Integer",
					"->",
					"置き換え 省略時、すべてのオカレンスを置き換え"
				],
				[
					"*",
					"演算子",
					"->",
					"渡されると、文字コードに基づいて評価"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"結果の文字列"
				]
			],
			"Summary": "Replace stringは、*source*に存在するすべての*oldString*を*newString*で*howMany*回数だけ置き換えます。"
		},
		"Request": {
			"Syntax": "**Request** ( *message* {; *defaultResponse* {; *OKButtonTitle* {; *CancelButtonTitle*}}} )  : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"リクエストダイアログボックスに表示するメッセージ"
				],
				[
					"defaultResponse",
					"Text",
					"->",
					"テキスト入力エリアにデフォルトで表示するデータ"
				],
				[
					"OKButtonTitle",
					"Text",
					"->",
					"OKボタンのタイトル"
				],
				[
					"CancelButtonTitle",
					"Text",
					"->",
					"キャンセルボタンのタイトル"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"ユーザが入力した値"
				]
			],
			"Summary": "**Request**コマンドは、メッセージ、テキスト入力エリア、OKボタン、キャンセルボタンで構成されるリクエストダイアログボックスを表示します。"
		},
		"RESIZE FORM WINDOW": {
			"Syntax": "**RESIZE FORM WINDOW** ( *width* ; *height* )",
			"Params": [
				[
					"width",
					"Integer",
					"->",
					"現在のフォームウィンドウ幅に追加あるいは取り除く ピクセル数"
				],
				[
					"height",
					"Integer",
					"->",
					"現在のフォームウィンドウ高に追加あるいは取り除く ピクセル数"
				]
			],
			"Summary": "RESIZE FORM WINDOW コマンドはカレントフォームウィンドウのサイズを変更します。"
		},
		"RESOLVE ALIAS": {
			"Syntax": "**RESOLVE ALIAS** ( *aliasPath* ; *targetPath* )",
			"Params": [
				[
					"aliasPath",
					"Text",
					"->",
					"エイリアス/ショートカットのアクセスパスまたは名前"
				],
				[
					"targetPath",
					"Text",
					"<-",
					"エイリアス/ショートカットターゲットのアクセスパスまたは名前"
				]
			],
			"Summary": "RESOLVE ALIASコマンドは、目的のファイルまたはエイリアス(Windowsではショートカットと呼ばれる) のフォルダへの完全なパスを返します。"
		},
		"RESOLVE POINTER": {
			"Syntax": "**RESOLVE POINTER** ( *pointer* ; *varName* ; *tableNum* ; *fieldNum* )",
			"Params": [
				[
					"pointer",
					"Pointer",
					"->",
					"参照オブジェクトを取得するポインタ"
				],
				[
					"varName",
					"Text",
					"<-",
					"参照された変数の名前または空の文字列"
				],
				[
					"tableNum",
					"Integer",
					"<-",
					"参照されたテーブルまたは配列要素の番号 または 0 あるいは -1"
				],
				[
					"fieldNum",
					"Integer",
					"<-",
					"参照されたフィールドの番号 または 0 あるいは -1"
				]
			],
			"Summary": "RESOLVE POINTER コマンドは、*pointer*式によって参照されるオブジェクトの情報を取得し、引数*varName*、*tableNum*、*fieldNum*に返します。"
		},
		"RESOURCE LIST": {
			"Syntax": "**RESOURCE LIST** ( *resType* ; *resIDs* ; *resNames* {; *resFile*} )",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4文字のリソースタイプ"
				],
				[
					"resIDs",
					"Integer array",
					"<-",
					"リソースID番号"
				],
				[
					"resNames",
					"Text array",
					"<-",
					"リソース名"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				]
			],
			"Summary": "RESOURCE LIST コマンドは、*resType*に渡したタイプのリソースIDとリソース名から、*resIDs*と*resNames*の配列を作成します。"
		},
		"RESOURCE TYPE LIST": {
			"Syntax": "**RESOURCE TYPE LIST** ( *resTypes* {; *resFile*} )",
			"Params": [
				[
					"resTypes",
					"Text array",
					"<-",
					"利用可能なリストタイプのリスト"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれている全てのリソースファイル"
				]
			],
			"Summary": "RESOURCE TYPE LIST コマンドは、現在開いているリソースファイルの中に存在するリソースのリソースタイプによる*resTypes*配列を作成します。"
		},
		"RESTART 4D": {
			"Syntax": "**RESTART 4D** {( *time* {; *message*} )}",
			"Params": [
				[
					"time",
					"Integer",
					"->",
					"4Dが再起動するまでの猶予時間(秒)"
				],
				[
					"message",
					"Text",
					"->",
					"クライアントマシンに表示するテキスト"
				]
			],
			"Summary": "**RESTART 4D**コマンドは、カレントの4Dアプリケーションを再起動します。"
		},
		"RESTORE INFO": {
			"Syntax": "**RESTORE INFO** ( *selector* ; *info1* ; *info2* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"取得する情報のタイプ"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"セレクタの値1"
				],
				[
					"info2",
					"Text, Time",
					"<-",
					"セレクタの値2"
				]
			],
			"Summary": "RESTORE INFOコマンドを使用し、前回のデータベース自動復元に関連する情報を取得できます。"
		},
		"RESTORE": {
			"Syntax": "**RESTORE** {( *archivePath* {; *destFolderPath*} )}",
			"Params": [
				[
					"archivePath",
					"Text",
					"->",
					"Pathname of archive to restore"
				],
				[
					"destFolderPath",
					"Text",
					"->",
					"Pathname of destination folder"
				]
			],
			"Summary": "RESTORE コマンドは4Dアーカイブに含まれるファイルを復元するために使用できます。"
		},
		"RESUME INDEXES": {
			"Syntax": "**RESUME INDEXES** ( *aTable* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"インデックスを再開するテーブル"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = 非同期インデックス"
				]
			],
			"Summary": "**RESUME INDEXES** コマンドは、 PAUSE INDEXES コマンドを使用して停止させた *aTable* のインデックスを全て再起動させます。"
		},
		"RESUME PROCESS": {
			"Syntax": "**RESUME PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "RESUME PROCESSは、実行が停止または遅延されている*process*を再開します。"
		},
		"RESUME TRANSACTION": {
			"Syntax": "**RESUME TRANSACTION**",
			"Params": [],
			"Summary": "**RESUME TRANSACTION**コマンドは、カレントプロセスの同レベルにおいて SUSPEND TRANSACTION によって停止していたトランザクションを再開させます。"
		},
		"Right click": {
			"Syntax": "**Right click**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"右クリックを検知した場合True、そうでなければFalse"
				]
			],
			"Summary": "Right click コマンドは、マウスの右ボタンがクリックされた場合にTrue を返します。"
		},
		"Round": {
			"Syntax": "**Round** ( *round* ; *places* ) : Real",
			"Params": [
				[
					"round",
					"Real",
					"->",
					"丸める数値"
				],
				[
					"places",
					"Integer",
					"->",
					"丸める小数部の位置"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"placesで指定された場所で 丸められた数値"
				]
			],
			"Summary": "Round は、指定された*places*位置で数値を四捨五入します。"
		},
		"SAVE LIST": {
			"Syntax": "**SAVE LIST** ( *list* ; *listName* )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"listName",
					"Text",
					"->",
					"デザインモードのリストエディタに 登録されるリスト名"
				]
			],
			"Summary": "SAVE LIST コマンドは、デザインモードのリストエディタに、*list* 引数に渡した参照番号を持つリストを*listName* 引数に渡した名前で保存します。"
		},
		"SAVE RECORD": {
			"Syntax": "**SAVE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードを保存するテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "SAVE RECORD は、カレントプロセスの*aTable*のカレントレコードを保存します。"
		},
		"SAVE RELATED ONE": {
			"Syntax": "**SAVE RELATED ONE** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"nフィールド"
				]
			],
			"Summary": "SAVE RELATED ONEは、*aField*にリレートするレコードを保存します。"
		},
		"SAVE SET": {
			"Syntax": "**SAVE SET** ( *set* ; *document* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"保存するセットの名前"
				],
				[
					"document",
					"Text",
					"->",
					"セットを保存するディスクファイルの名前"
				]
			],
			"Summary": "SAVE SETコマンドは、*document*で指定した名前のドキュメントファイルとしてSetをディスクに保存します。"
		},
		"SAVE VARIABLES": {
			"Syntax": "**SAVE VARIABLES** ( *document* ; *variable* {; *variable2* ; ... ; *variableN*} )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"変数を保存するドキュメントファイル"
				],
				[
					"variable",
					"Variable",
					"->",
					"保存する変数"
				]
			],
			"Summary": "SAVE VARIABLES コマンドを使用して、引数 *document* に渡した名前を持つドキュメントに 1つまたは複数の変数を保存します。"
		},
		"SAX ADD PROCESSING INSTRUCTION": {
			"Syntax": "**SAX ADD PROCESSING INSTRUCTION** ( *document* ; *statement* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開かれたドキュメントの参照"
				],
				[
					"statement",
					"Text",
					"->",
					"ドキュメントに挿入するステートメント"
				]
			],
			"Summary": "SAX ADD PROCESSING INSTRUCTIONコマンドは、*document*で参照されるXMLドキュメントにXML処理命令*statement*を追加します。"
		},
		"SAX ADD XML CDATA": {
			"Syntax": "**SAX ADD XML CDATA** ( *document* ; *data* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開かれたドキュメントへの参照"
				],
				[
					"data",
					"Blob, Text",
					"->",
					"ドキュメントのCDATAタグの間に挿入する テキストまたはBLOB"
				]
			],
			"Summary": "SAX ADD XML CDATA コマンドは、*document*で参照されるXMLドキュメントにテキストまたはBLOBの*data*を追加します。"
		},
		"SAX ADD XML COMMENT": {
			"Syntax": "**SAX ADD XML COMMENT** ( *document* ; *comment* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開かれたドキュメントの参照"
				],
				[
					"comment",
					"Text",
					"->",
					"追加するコメント"
				]
			],
			"Summary": "SAX ADD XML COMMENT コマンドは*document*で参照されるXMLドキュメントに、*comment*で指定したコメントを追加します。"
		},
		"SAX ADD XML DOCTYPE": {
			"Syntax": "**SAX ADD XML DOCTYPE** ( *document* ; *docType* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"docType",
					"Text",
					"->",
					"追加するDocType"
				]
			],
			"Summary": "SAX ADD XML DOCTYPE コマンドは、*document*で参照されるXMLドキュメントに*docType* 引数で指定されたDocType文を追加します。"
		},
		"SAX ADD XML ELEMENT VALUE": {
			"Syntax": "**SAX ADD XML ELEMENT VALUE** ( *document* ; *data* {; *} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"data",
					"Text, Variable",
					"->",
					"ドキュメントに挿入するテキストまたは変数"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 特別文字をエンコード 省略時: エンコードしない"
				]
			],
			"Summary": "**SAX ADD XML ELEMENT VALUE** コマンドは、*document* で参照されるXMLドキュメントに*data* を変換せずに直接追加します。"
		},
		"SAX CLOSE XML ELEMENT": {
			"Syntax": "**SAX CLOSE XML ELEMENT** ( *document* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開かれたドキュメントの参照"
				]
			],
			"Summary": "SAX CLOSE XML ELEMENT コマンドは、 *document*で参照されるXMLドキュメントに、SAX OPEN XML ELEMENT コマンドを使用して開かれた最後の要素を閉じるのに必要な文を書き込みます。"
		},
		"SAX GET XML CDATA": {
			"Syntax": "**SAX GET XML CDATA** ( *document* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"value",
					"Text, Blob",
					"<-",
					"要素値"
				]
			],
			"Summary": "**SAX GET XML CDATA**コマンドを使用して、*document* 引数で参照されるXMLドキュメント中に存在するXML要素のCDATA *value* を取得できます。"
		},
		"SAX GET XML COMMENT": {
			"Syntax": "**SAX GET XML COMMENT** ( *document* ; *comment* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"comment",
					"Text",
					"<-",
					"XMLコメント"
				]
			],
			"Summary": "SAX GET XML COMMENT コマンドは、*document* 引数で参照されるXMLドキュメント中でXML Comment SAXイベントが生成された時、XMLコメントを*comment*に返します。"
		},
		"SAX GET XML DOCUMENT VALUES": {
			"Syntax": "**SAX GET XML DOCUMENT VALUES** ( *document* ; *encoding* ; *version* ; *standalone* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"encoding",
					"Text",
					"<-",
					"XMLドキュメント文字セット"
				],
				[
					"version",
					"Text",
					"<-",
					"XMLバージョン"
				],
				[
					"standalone",
					"Boolean",
					"<-",
					"True = ドキュメントはスタンドアロン, そうない場合 False"
				]
			],
			"Summary": "SAX GET XML DOCUMENT VALUES コマンドは、*document* 引数で参照されるXMLドキュメントのXMLヘッダから基本情報を取得します。"
		},
		"SAX GET XML ELEMENT VALUE": {
			"Syntax": "**SAX GET XML ELEMENT VALUE** ( *document* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"value",
					"Text, Blob",
					"<-",
					"要素値"
				]
			],
			"Summary": "SAX GET XML ELEMENT VALUE コマンドは、*document* 引数で参照されるXMLドキュメント中に存在するXML要素の要素値を*value*に返します。"
		},
		"SAX GET XML ELEMENT": {
			"Syntax": "**SAX GET XML ELEMENT** ( *document* ; *name* ; *prefix* ; *attrNames* ; *attrValues* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"name",
					"Text",
					"<-",
					"要素名"
				],
				[
					"prefix",
					"Text",
					"<-",
					"名前空間"
				],
				[
					"attrNames",
					"Text array",
					"<-",
					"属性名"
				],
				[
					"attrValues",
					"Text array",
					"<-",
					"属性値"
				]
			],
			"Summary": "SAX GET XML ELEMENT コマンドは*document* 引数で参照されるXMLドキュメントに現れる、*name*要素についてのさまざまな情報を返します。"
		},
		"SAX GET XML ENTITY": {
			"Syntax": "**SAX GET XML ENTITY** ( *document* ; *name* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"name",
					"Text",
					"<-",
					"実体名"
				],
				[
					"value",
					"Text",
					"<-",
					"実体値"
				]
			],
			"Summary": "SAX GET XML ENTITY コマンドを使用して、*document* 引数で参照されるXMLドキュメント中に存在するXML実体の名前と値を*name*と*value*に取得できます。"
		},
		"SAX Get XML node": {
			"Syntax": "**SAX Get XML node** ( *document* ) : Integer",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"関数から返されたイベント"
				]
			],
			"Summary": "SAX Get XML node コマンドは、*document* で参照されるXMLドキュメントが解析されている間、SAXイベントのタイプを示す倍長整数値を返します。"
		},
		"SAX GET XML PROCESSING INSTRUCTION": {
			"Syntax": "**SAX GET XML PROCESSING INSTRUCTION** ( *document* ; *name* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"name",
					"Text",
					"<-",
					"命令名"
				],
				[
					"value",
					"Text",
					"<-",
					"命令値"
				]
			],
			"Summary": "SAX GET XML PROCESSING INSTRUCTION コマンドは、*document* 引数で参照されるXMLドキュメント中で処理されるXML命令の名前と値を*name*と*value*に返します。"
		},
		"SAX OPEN XML ELEMENT ARRAYS": {
			"Syntax": "**SAX OPEN XML ELEMENT ARRAYS** ( *document* ; *tag* {; *attribNamesArray* ; *attribValuesArray*} {; *attribNamesArray2* ; *attribValuesArray2* ; ... ; *attribNamesArrayN* ; *attribValuesArrayN*} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"tag",
					"Text",
					"->",
					"開く要素の名前"
				],
				[
					"attribNamesArray",
					"Text array",
					"->",
					"属性名配列"
				],
				[
					"attribValuesArray",
					"Text array, Integer array, Date array, Real array, Picture array, Boolean array",
					"->",
					"属性値配列"
				]
			],
			"Summary": "SAX OPEN XML ELEMENT ARRAYS コマンドコマンドを使用して、*document* で参照されるXMLドキュメント中に新しい要素およびオプションで属性とその値を配列で指定して追加できます。"
		},
		"SAX OPEN XML ELEMENT": {
			"Syntax": "**SAX OPEN XML ELEMENT** ( *document* ; *tag* {; *attribName* ; *attribValue*} {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"tag",
					"Text",
					"->",
					"開く要素の名前"
				],
				[
					"attribName",
					"Text",
					"->",
					"属性名"
				],
				[
					"attribValue",
					"Text",
					"->",
					"属性値"
				]
			],
			"Summary": "SAX OPEN XML ELEMENT コマンドを使用して、*document* で参照されるXMLドキュメント中に新しい要素およびオプションで属性とその値を追加できます。"
		},
		"SAX SET XML DECLARATION": {
			"Syntax": "**SAX SET XML DECLARATION** ( *document* ; *encoding* {; *standalone*} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"開いたドキュメントの参照"
				],
				[
					"encoding",
					"Text",
					"->",
					"XMLドキュメント文字セット"
				],
				[
					"standalone",
					"Boolean",
					"->",
					"True = ドキュメントはスタンドアロン False (デフォルト) = ドキュメントはスタンドアロンではない"
				]
			],
			"Summary": "**SAX SET XML DECLARATION** コマンドは*document* で参照されるXMLドキュメントを、引数のエンコーディングを使用して初期化します。"
		},
		"SCAN INDEX": {
			"Syntax": "**SCAN INDEX** ( *aField* ; *number* {; >　または <} )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"インデックスをスキャンするインデックスフィールド"
				],
				[
					"number",
					"Integer",
					"->",
					"返すレコード数"
				],
				[
					">　または <",
					"演算子",
					"->",
					">: インデックスの始まりから <: インデックスの終わりから"
				]
			],
			"Summary": "SCAN INDEXは、*aField* フィールドを含むテーブルから*number*個のレコードのセレクションを作成します。"
		},
		"SCREEN COORDINATES": {
			"Syntax": "**SCREEN COORDINATES** ( *left* ; *top* ; *right* ; *bottom* {; *screen* {; *screenArea*}} )",
			"Params": [
				[
					"left",
					"Integer",
					"<-",
					"画面エリアの左端のグローバル座標"
				],
				[
					"top",
					"Integer",
					"<-",
					"画面エリアの上端のグローバル座標"
				],
				[
					"right",
					"Integer",
					"<-",
					"画面エリアの右端のグローバル座標"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"画面エリアの下端のグローバル座標"
				],
				[
					"screen",
					"Integer",
					"->",
					"画面番号、または省略した場合には主画面(メインスクリーン)"
				],
				[
					"screenArea",
					"Integer",
					"->",
					"画面全体(デフォルト)または利用可能エリア"
				]
			],
			"Summary": "SCREEN COORDINATES コマンドは、*screenID* に指定した画面のグローバル座標を引数*left*、*top*、*right*と*bottom*に返します。"
		},
		"SCREEN DEPTH": {
			"Syntax": "**SCREEN DEPTH** ( *depth* ; *color* {; *screen*} )",
			"Params": [
				[
					"depth",
					"Integer",
					"<-",
					"画面の深度 (カラーの数 = 2^深度)"
				],
				[
					"color",
					"Integer",
					"<-",
					"1 = カラー画面、0 = 白黒またはグレイスケール"
				],
				[
					"screen",
					"Integer",
					"->",
					"画面番号、または省略した場合には主画面(メインスクリーン)"
				]
			],
			"Summary": "Screen depthコマンドは、モニターについての情報を引数*depth*と*color*に返します。"
		},
		"Screen height": {
			"Syntax": "**Screen height** {( * )} : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"Windows: アプリケーションウィンドウの高さ または*が指定されている場合、画面の高さ Macintosh: メイン画面の高さ"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ピクセル数で表される高さ"
				]
			],
			"Summary": "Windowsでは、Screen heightは、4Dアプリケーションウィンドウ(MDIウィンドウ) の高さを返します。"
		},
		"Screen width": {
			"Syntax": "**Screen width** {( * )} : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"･･Windows: *が指定されている場合、アプリケーションウィンドウの幅、 または画面の幅 Macintosh: メイン画面の幅"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ピクセル数で表される幅"
				]
			],
			"Summary": "Windowsの場合、Screen width は4Dアプリケーションウィンドウ(MDIウィンドウ) の幅を返します。"
		},
		"Select document": {
			"Syntax": "**Select document** ( *directory* ; *fileTypes* ; *title* ; *options* {; *selected*} ) : Text",
			"Params": [
				[
					"directory",
					"Text, Integer",
					"->",
					"ドキュメント選択ダイアログボックスで ディレクトリのアクセスパスをデフォルトで表示する、または デフォルトユーザフォルダを表示する空の文字列 (Windowsでは\"My documents\"、 Mac OSでは\"Documents\")、または メモリーされたアクセスパスの番号"
				],
				[
					"fileTypes",
					"Text",
					"->",
					"フィルタするドキュメントタイプのリスト、または ドキュメントをフィルタしない\"*\""
				],
				[
					"title",
					"Text",
					"->",
					"選択ダイアログボックスのタイトル"
				],
				[
					"options",
					"Integer",
					"->",
					"任意の選択"
				],
				[
					"selected",
					"Text array",
					"<-",
					"アクセスパスのリストを含む配列 + 選択されたファイルの名前"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"選択されたファイルの名前(複数の選択がある場合、 リストの最初のファイル)"
				]
			],
			"Summary": "**Select document**コマンドは、標準のドキュメントを開くことのできるダイアログボックスを表示します。"
		},
		"Select folder": {
			"Syntax": "**Select folder** ( {*message* }{;}{ *defaultPath* {; *options*}} ) : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"ウィンドウのタイトル"
				],
				[
					"defaultPath",
					"Text, Integer",
					"->",
					"デフォルトのパス名、 または、デフォルトのユーザフォルダを表示する空の文字列 (Windowsでは\"My documents\"、 Mac OSでは\"Documents\")、 または記憶されたパス名の番号"
				],
				[
					"options",
					"Integer",
					"->",
					"Mac OS上での選択オプション"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"選択されたフォルダへのアクセスパス"
				]
			],
			"Summary": "**Select folder** コマンドは、フォルダを選択するダイアログボックスを表示し、フォルダへの完全なアクセスパスを検索します。"
		},
		"SELECT LIST ITEMS BY POSITION": {
			"Syntax": "**SELECT LIST ITEMS BY POSITION** ( {* ;} *list* ; *itemPos* {; *positionsArray*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemPos",
					"Integer",
					"->",
					"展開/折りたたまれたリスト中の項目位置"
				],
				[
					"positionsArray",
					"Integer array",
					"->",
					"展開/折りたたまれたリスト中の項目位置配列"
				]
			],
			"Summary": "SELECT LIST ITEMS BY POSITION コマンドは、*list*に渡された参照番号のリストにおいて、*itemPos*ならびにオプションとして*positionsArray*に渡された位置にある項目を選択します。"
		},
		"SELECT LIST ITEMS BY REFERENCE": {
			"Syntax": "**SELECT LIST ITEMS BY REFERENCE** ( *list* ; *itemRef* {; *refArray*} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"項目参照番号 または 0: リストに最後に追加された項目"
				],
				[
					"refArray",
					"Integer array",
					"->",
					"項目参照番号配列"
				]
			],
			"Summary": "SELECT LIST ITEMS BY REFERENCE コマンドは、*list*に渡された参照番号のリストにおいて、*itemRef*ならびにオプションとして*refArray*に渡された項目参照番号を持つ項目を選択します。"
		},
		"Select RGB color": {
			"Syntax": "**Select RGB color** {( *defaultColor* {; *message*} )} : Integer",
			"Params": [
				[
					"defaultColor",
					"Integer",
					"->",
					"事前に選択されたRGBカラー"
				],
				[
					"message",
					"Text",
					"->",
					"選択ウィンドウのタイトル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"RGBカラー"
				]
			],
			"Summary": "**Select RGB color**コマンドはシステムカラー選択ウィンドウを表示し、ユーザによって選択された色のRGB値を返します。"
		},
		"Selected list items": {
			"Syntax": "**Selected list items** ( {* ;} *list* {; *itemsArray* {; *}} )  : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemsArray",
					"Integer array",
					"<-",
					"2番目の * 省略時: 配列にはリスト中で選択された 項目の位置配列が返される 2番目の * 指定時: 配列には選択された項目の 参照が返される"
				],
				[
					"*",
					"演算子",
					"->",
					"省略時: 項目位置 指定時: 項目参照"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"2番目の * 省略時: 展開/折りたたまれたされたリスト中 現在選択されている項目位置 2番目の * 指定時: 選択されている項目の参照"
				]
			],
			"Summary": "**Selected list items** コマンドは、*list*引数に渡された参照番号またはオブジェクト名のリストにおいて、選択された項目の位置または参照番号を返します。"
		},
		"Selected record number": {
			"Syntax": "**Selected record number** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコード位置番号を取得するテーブル、または 省略時はデフォルトテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カレントレコードのレコード位置番号"
				]
			],
			"Summary": "Selected record numberは、*aTable*のカレントセレクション内でのカレントレコードの位置を返します。"
		},
		"SELECTION RANGE TO ARRAY": {
			"Syntax": "**SELECTION RANGE TO ARRAY** ( *start* ; *end* {; field | table ; *array*} {; field | table2 ; *array2* ; ... ; field | tableN ; *arrayN*} )",
			"Params": [
				[
					"start",
					"Integer",
					"->",
					"データ取得を開始するレコード位置番号"
				],
				[
					"end",
					"Integer",
					"->",
					"データ取得を終了するレコード位置番号"
				],
				[
					"field &#124; table",
					"フィールド, テーブル",
					"->",
					"データを取得するフィールドまたは レコード番号を取得するテーブル"
				],
				[
					"array",
					"Array",
					"<-",
					"フィールド値またはレコード番号を受け取る配列"
				]
			],
			"Summary": "**SELECTION RANGE TO ARRAY**コマンドは1つまたは複数の配列を作成し、その配列にカレントセレクションのフィールド値またはレコード番号を代入します。"
		},
		"SELECTION TO ARRAY": {
			"Syntax": "**SELECTION TO ARRAY** {( field | table ; *array* {; *aField* ; *array* {; *aField2* ; *array2* ; ... ; *aFieldN* ; *arrayN*}}{; *})}",
			"Params": [
				[
					"field &#124; table",
					"フィールド, テーブル",
					"->",
					"データを取得するフィールドまたは レコード番号を取得するテーブル"
				],
				[
					"array",
					"Array",
					"<-",
					"フィールド値またはレコード番号を受け取る配列"
				],
				[
					"aField",
					"Field",
					"->",
					"配列に値を取得するフィールド"
				],
				[
					"array",
					"Array",
					"<-",
					"フィールドデータを受け取る配列"
				],
				[
					"*",
					"演算子",
					"->",
					"実行をスタックする"
				]
			],
			"Summary": "**SELECTION TO ARRAY**コマンドは、1つ以上の配列を作成し、カレントセレクションのフィールドデータやレコード番号を配列にコピーします。"
		},
		"Selection to JSON": {
			"Syntax": "**Selection to JSON** ( *aTable* {; *aField*}{; *aField2* ; ... ; *aFieldN*}{; *template*})  : Text",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"シリアライズするテーブル"
				],
				[
					"aField",
					"Field",
					"->",
					"シリアライズするフィールドを指定"
				],
				[
					"template",
					"Object",
					"->",
					"プロパティ名と取り出したいフィールドを指定するポインターをオブジェクトで渡す"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"シリアライズされた JSON 配列を含む文字列"
				]
			],
			"Summary": "**Selection to JSON**コマンドは、 *aTable* のカレントセレクション内のレコードと同数の要素を持つJSON配列を含んだ文字列を返します。"
		},
		"Self": {
			"Syntax": "**Self**  : Pointer",
			"Params": [
				[
					"戻り値",
					"Pointer",
					"<-",
					"メソッドが現在実行されているフォーム オブジェクトへのポインタ そうでない場合コンテキストの外側ではNil (->[])"
				]
			],
			"Summary": "このコマンドは互換性の目的で保持されています。"
		},
		"Semaphore": {
			"Syntax": "**Semaphore** ( *semaphore* {; *tickCount*} ) : Boolean",
			"Params": [
				[
					"semaphore",
					"Text",
					"->",
					"テストと設定を行うセマフォ"
				],
				[
					"tickCount",
					"Integer",
					"->",
					"最大待ち時間"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"FALSE: セマフォの設定に成功した TRUE: 既にセマフォが存在する"
				]
			],
			"Summary": "セマフォは、ワークステーション間、または同一ワークステーション上のプロセス間で共有されるフラグです。"
		},
		"SEND MESSAGE TO REMOTE USER": {
			"Syntax": "**SEND MESSAGE TO REMOTE USER** ( *message* {; *userSession*} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Text sent to user"
				],
				[
					"userSession",
					"Text",
					"->",
					"User's session ID"
				]
			],
			"Summary": "**SEND MESSAGE TO REMOTE USER** コマンドは、全てのリモートユーザー、あるいは特定のリモートユーザーに対して、メッセージを送信します。"
		},
		"SEND PACKET": {
			"Syntax": "**SEND PACKET** ( {*DocRef* ;} *packet* )",
			"Params": [
				[
					"Time",
					"Time",
					"->",
					"ドキュメント参照番号, または カレントのチャンネル (シリアルポートまたはドキュメント)"
				],
				[
					"packet",
					"Text, Blob",
					"->",
					"送信する文字またはBLOB"
				]
			],
			"Summary": "SEND PACKET は、シリアルポートやドキュメントにパケットを送ります。"
		},
		"SEND RECORD": {
			"Syntax": "**SEND RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"カレントレコードを送信するテーブル, または 省略した場合デフォルトテーブル"
				]
			],
			"Summary": "SEND RECORD は、*aTable*のカレントレコードをSET CHANNELコマンドで開いたシリアルポートまたはドキュメントに送信します。"
		},
		"SEND VARIABLE": {
			"Syntax": "**SEND VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"送信する変数"
				]
			],
			"Summary": "SEND VARIABLE は、SET CHANNELで開いたシリアルポートまたはドキュメントに*variable*を送信します。"
		},
		"Sequence number": {
			"Syntax": "**Sequence number** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"シーケンス番号を求めるテーブル, または 省略時、デフォルトテーブル"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"シーケンス番号"
				]
			],
			"Summary": "**Sequence number** は、*aTable*の次のシーケンス番号を返します。"
		},
		"SET ABOUT": {
			"Syntax": "**SET ABOUT** ( *itemText* ; *method* )",
			"Params": [
				[
					"itemText",
					"Text",
					"->",
					"アバウトメニュー項目の新しいテキスト"
				],
				[
					"method",
					"Text",
					"->",
					"メニューが選択された時に実行するメソッドの名前"
				]
			],
			"Summary": "**SET ABOUT** コマンドは、**ヘルプ** メニュー(Windows) または**アプリケーション** メニュー(macOS) 内の\"**4Dについて**\"メニューを*itemText* に変更します。"
		},
		"SET APPLICATION COLOR SCHEME": {
			"Syntax": "**SET APPLICATION COLOR SCHEME** ( *colorScheme* )",
			"Params": [
				[
					"colorScheme",
					"Text",
					"->",
					"\"light\"、\"dark\"、または \"inherited\""
				]
			],
			"Summary": "**SET APPLICATION COLOR SCHEME** コマンドは、カレントセッションにおいて、アプリケーションレベルで使用されるカラースキームを定義します。"
		},
		"SET ASSERT ENABLED": {
			"Syntax": "**SET ASSERT ENABLED** ( *assertions* {; *} )",
			"Params": [
				[
					"assertions",
					"Boolean",
					"->",
					"True = アサーションを有効にする<br/>False = アサーションを無効にする"
				],
				[
					"*",
					"演算子",
					"->",
					"省略時 = すべてのプロセスにコマンドを適用 (既存および後で作成されるものを含む)<br/>指定時= カレントプロセスのみにコマンドを適用"
				]
			],
			"Summary": "**SET ASSERT ENABLED** コマンドを使用してアプリケーションの4Dコードに挿入されたアサーションを無効にしたり、再度有効にしたりできます。"
		},
		"SET AUTOMATIC RELATIONS": {
			"Syntax": "**SET AUTOMATIC RELATIONS** ( *one* {; *many*} )",
			"Params": [
				[
					"one",
					"Boolean",
					"->",
					"すべてのn対1リレーションの状態"
				],
				[
					"many",
					"Boolean",
					"->",
					"すべての1対nリレーションの状態"
				]
			],
			"Summary": "**SET AUTOMATIC RELATIONS** は、カレントプロセスで、データベース全体のマニュアルリレートを一時的に自動リレートに変更します。"
		},
		"SET BLOB SIZE": {
			"Syntax": "**SET BLOB SIZE** ( *BLOB* ; *size* {; *filler*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOBフィールドまたは変数"
				],
				[
					"size",
					"Integer",
					"->",
					"BLOBの新しいサイズ"
				],
				[
					"filler",
					"Integer",
					"->",
					"埋め込み文字のASCIIコード"
				]
			],
			"Summary": "SET BLOB SIZE コマンドは、*size*引数に渡された値に従って、BLOB *blob*のサイズを変更します。"
		},
		"SET BLOBS CACHE PRIORITY": {
			"Syntax": "**SET BLOBS CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セッション中の\"blob\"データの優先度値を設定したいテーブル"
				],
				[
					"priority",
					"Integer",
					"->",
					"テーブル内のBLOBのキャッシュ優先度"
				]
			],
			"Summary": "このコマンドは特定の用途のために用意されています。"
		},
		"SET CACHE SIZE": {
			"Syntax": "**SET CACHE SIZE** ( *size* {; *minFreeSize*} )",
			"Params": [
				[
					"size",
					"Real",
					"->",
					"データベースキャッシュのサイズ(バイト単位)"
				],
				[
					"minFreeSize",
					"Real",
					"->",
					"キャッシュが一杯になった際に解放する最小バイト数"
				]
			],
			"Summary": "**SET CACHE SIZE**コマンドは、データベースキャッシュのサイズを動的に設定し、またオプションとして、メモリを解放する際の最小バイト数を設定します。"
		},
		"SET CHANNEL": {
			"Syntax": "**SET CHANNEL** ( *port* ; *settings* ) <br/>\n**SET CHANNEL** ( *operation* ; *document* )",
			"Params": [
				[
					"port",
					"Integer",
					"->",
					"シリアルポート番号"
				],
				[
					"settings",
					"Integer",
					"->",
					"シリアルポート設定"
				],
				[
					"SET CHANNEL ( operation ; document )"
				],
				[
					"引数",
					"型",
					"説明"
				],
				[
					"operation",
					"Integer",
					"->",
					"行うドキュメント処理"
				],
				[
					"document",
					"Text",
					"->",
					"ドキュメント名"
				]
			],
			"Summary": "SET CHANNEL コマンドはシリアルポートまたはドキュメントを開きます。"
		},
		"SET CURRENT PRINTER": {
			"Syntax": "**SET CURRENT PRINTER** ( *printerName* )",
			"Params": [
				[
					"printerName",
					"Text",
					"->",
					"使用されるプリンター名"
				]
			],
			"Summary": "**SET CURRENT PRINTER** コマンドは現行の4Dアプリケーションでの印刷に使用するプリンターを指定するために使用します。"
		},
		"SET CURSOR": {
			"Syntax": "**SET CURSOR** {( *cursor* )}",
			"Params": [
				[
					"cursor",
					"Integer",
					"->",
					"Mac OS ベースのカーソルリソース番号"
				]
			],
			"Summary": "SET CURSOR コマンド はマウスカーソルを、*cursor* 引数に渡したID番号のシステムカーソルへと変更します。"
		},
		"SET DATABASE LOCALIZATION": {
			"Syntax": "**SET DATABASE LOCALIZATION** ( *languageCode* {; *} )",
			"Params": [
				[
					"languageCode",
					"Text",
					"->",
					"言語セレクタ"
				],
				[
					"*",
					"演算子",
					"->",
					"コマンドのスコープ"
				]
			],
			"Summary": "**SET DATABASE LOCALIZATION**コマンドを使用して、カレントセッションのデータベースカレント言語を変更できます。"
		},
		"SET DATABASE PARAMETER": {
			"Syntax": "**SET DATABASE PARAMETER** ( {*aTable* ;} *selector* ; *value* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"パラメータをセットするテーブル、または 省略時、デフォルトテーブル"
				],
				[
					"selector",
					"Integer",
					"->",
					"変更を行うデータベースパラメタのコード"
				],
				[
					"value",
					"Real, Text",
					"->",
					"パラメタの値"
				]
			],
			"Summary": "**SET DATABASE PARAMETER**コマンドを使用して、4Dデータベース内部の様々なパラメーターを変更することができます。"
		},
		"SET DEFAULT CENTURY": {
			"Syntax": "**SET DEFAULT CENTURY** ( *century* {; *pivotYear*} )",
			"Params": [
				[
					"century",
					"Integer",
					"->",
					"2桁の年数が入力された場合の デフォルト世紀 (マイナス1)"
				],
				[
					"pivotYear",
					"Integer",
					"->",
					"2桁の年で日付が入力された時の区切り年"
				]
			],
			"Summary": "SET DEFAULT CENTURY コマンドは、2桁の年で日付を入力した際に4Dが使用する、デフォルトの世紀と区切り年を指定するために使用します。"
		},
		"SET DOCUMENT POSITION": {
			"Syntax": "**SET DOCUMENT POSITION** ( *DocRef* ; *offset* {; *anchor*} )",
			"Params": [
				[
					"Time",
					"Time",
					"->",
					"ドキュメント参照番号"
				],
				[
					"offset",
					"Real",
					"->",
					"ファイル位置(バイトで指定)"
				],
				[
					"anchor",
					"Integer",
					"->",
					"1 = ファイル先頭からの相対位置 2 = ファイル最後からの相対位置 3 = 現在位置からの相対位置"
				]
			],
			"Summary": "このコマンドは、*DocRef*に渡したドキュメント参照番号を持つ、現在開いているドキュメントだけに機能します。"
		},
		"SET DOCUMENT PROPERTIES": {
			"Syntax": "**SET DOCUMENT PROPERTIES** ( *document* ; *locked* ; *invisible* ; created on ; created at ; modified on ; modified at )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"ドキュメント名 またはドキュメントの完全なパス名"
				],
				[
					"locked",
					"Boolean",
					"->",
					"ロックの場合はTrue、アンロックの場合はFalse"
				],
				[
					"invisible",
					"Boolean",
					"->",
					"非表示の場合はTrue、表示の場合はFalse"
				],
				[
					"created on",
					"日付",
					"->",
					"作成日"
				],
				[
					"created at",
					"時間",
					"->",
					"作成時間"
				],
				[
					"modified on",
					"日付",
					"->",
					"更新日"
				],
				[
					"modified at",
					"時間",
					"->",
					"更新時間"
				]
			],
			"Summary": "SET DOCUMENT PROPERTIESコマンドは、引数*document* に渡した名前またはパス名を持つドキュメントについての情報を変更します。"
		},
		"SET DOCUMENT SIZE": {
			"Syntax": "**SET DOCUMENT SIZE** ( *DocRef* ; *size* )",
			"Params": [
				[
					"Time",
					"Time",
					"->",
					"ドキュメント参照番号"
				],
				[
					"size",
					"Real",
					"->",
					"新しいサイズ(バイト単位)"
				]
			],
			"Summary": "SET DOCUMENT SIZE コマンドは、ドキュメントのサイズを引数*size*に渡したバイト数に設定します。"
		},
		"SET DRAG ICON": {
			"Syntax": "**SET DRAG ICON** ( *icon* {; *horOffset* {; *vertOffset*}} )",
			"Params": [
				[
					"icon",
					"Picture",
					"->",
					"ドラッグ中に表示するアイコン"
				],
				[
					"horOffset",
					"Integer",
					"->",
					"カーソルから見てアイコンの左端との水平方向の距離を指定(>0 は左方向に、<0 は右方向に移動)"
				],
				[
					"vertOffset",
					"Integer",
					"->",
					"カーソルから見てアイコンの上端との垂直方向の距離を指定(>0 は上方向に、<0 は下方向に移動)"
				]
			],
			"Summary": "**SET DRAG ICON**コマンドは、指定したアイコンを、ドラッグ＆ドロップ中のカーソルと関連付けます。"
		},
		"SET ENVIRONMENT VARIABLE": {
			"Syntax": "**SET ENVIRONMENT VARIABLE** ( *varName* ; *varValue* )",
			"Params": [
				[
					"varName",
					"Text",
					"->",
					"設定する変数の名前"
				],
				[
					"varValue",
					"Text",
					"->",
					"変数の値、 またはデフォルト値をリセットする \"\""
				]
			],
			"Summary": "**SET ENVIRONMENT VARIABLE**コマンドを用いて、macOS とWindowsで環境変数値を設定できます。"
		},
		"SET EXTERNAL DATA PATH": {
			"Syntax": "**SET EXTERNAL DATA PATH** ( *aField* ; *path* )",
			"Params": [
				[
					"aField",
					"Text, Blob, Picture",
					"->",
					"ストレージの場所を設定するフィールド"
				],
				[
					"path",
					"Text, Integer",
					"->",
					"外部ストレージのパス名およびファイル名、または0 = ストラクチャー定義を使用する1 = デフォルトフォルダーを使用する"
				]
			],
			"Summary": "**SET EXTERNAL DATA PATH**コマンドは*aField*引数に渡したフィールドの、カレントレコードの、外部ストレージの場所を設定あるいは変更します。"
		},
		"SET FIELD RELATION": {
			"Syntax": "**SET FIELD RELATION** ( manyTable | manyField ; *one* ; *many* )",
			"Params": [
				[
					"manyTable &#124; manyField",
					"テーブル, フィールド",
					"->",
					"リレーションの開始テーブル, または リレーションの開始フィールド"
				],
				[
					"one",
					"Integer",
					"->",
					"テーブルまたはフィールドを開始点とする n対1リレーションの状態"
				],
				[
					"many",
					"Integer",
					"->",
					"テーブルまたはフィールドを開始点とする 1対nリレーションの状態"
				]
			],
			"Summary": "**SET FIELD RELATION** コマンドを使用すると、デザインモードのリレートプロパティウィンドウで設定した初期状態が何であれ、データベースの各リレートの自動/マニュアルの状態を個別に設定できます。"
		},
		"SET FIELD TITLES": {
			"Syntax": "**SET FIELD TITLES** ( *aTable* ; *fieldTitles* ; *fieldNumbers* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フィールドタイトルを設定するテーブル"
				],
				[
					"fieldTitles",
					"Text array",
					"->",
					"ダイアログボックスに表示するフィールドの名前"
				],
				[
					"fieldNumbers",
					"Integer array",
					"->",
					"実際のフィールド番号"
				],
				[
					"*",
					"Operator",
					"->",
					"カスタマイズした名前をフォーミュラエディタで使用する"
				]
			],
			"Summary": "**SET FIELD TITLES** コマンドを使用すれば、アプリケーションモードにおいて、クエリエディターのような標準の4 Dダイアログボックスを表示する際に、*aTable* に渡されるそのテーブルのフィールドのマスクや名前の変更、並べ替えが行えます (スタートアップモードが**アプリケーション**である場合、または**実行**メニューから**アプリケーションをテスト**を選択した場合) 。"
		},
		"SET FIELD VALUE NULL": {
			"Syntax": "**SET FIELD VALUE NULL** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"NULL値を割り当てるフィールド"
				]
			],
			"Summary": "SET FIELD VALUE NULL コマンドは、*aField* 引数によって指定されたフィールドにNULL値を割り当てます。"
		},
		"SET FILE TO PASTEBOARD": {
			"Syntax": "**SET FILE TO PASTEBOARD** ( *filePath* {; *} )",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"ファイルの完全パス名"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: 追加、省略時: 置換"
				]
			],
			"Summary": "SET FILE TO PASTEBOARD コマンドは*filePath* 引数に渡した完全パス名を追加します。"
		},
		"SET GROUP ACCESS": {
			"Syntax": "**SET GROUP ACCESS** {( *groups* )}",
			"Params": [
				[
					"groups",
					"Collection",
					"->",
					"セッションの間4D ユーザーアカウントを所属させたいグループの名前"
				]
			],
			"Summary": "**SET GROUP ACCESS** コマンドはカレントセッションにおいて4D ユーザーアカウントの所属情報を変更します。"
		},
		"Set group properties": {
			"Syntax": "**Set group properties** ( *groupID* ; *name* ; *owner* {; *members*} )  : Integer",
			"Params": [
				[
					"groupID",
					"Integer",
					"->",
					"グループのユニークなID番号、または、 -1= デザイナーグループの追加 -2= 管理者グループの追加"
				],
				[
					"<-",
					"追加したグループ (あれば) のユニークなID番号"
				],
				[
					"name",
					"Text",
					"->",
					"新規グループの名前"
				],
				[
					"owner",
					"Integer",
					"->",
					"新規グループオーナーのユーザーID番号 (バイナリデータベースのみ)"
				],
				[
					"members",
					"Integer array",
					"->",
					"新規グループのメンバー"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"新規グループのユニークなID番号"
				]
			],
			"Summary": "Set group properties コマンドは、引数 *groupID* に渡したユニークなグループID番号を持つ既存のグループのプロパティを変更・更新するか、新規グループを追加します。"
		},
		"SET HELP MENU": {
			"Syntax": "**SET HELP MENU** ( *menuCol* )",
			"Params": [
				[
					"menuCol",
					"Collection",
					"->",
					"メニュー項目のコレクション"
				]
			],
			"Summary": "**SET HELP MENU** コマンドを使用すると、アプリケーションモードにおいてデフォルトの4D **ヘルプ**メニューの内容を、 *menuCol* 引数に渡したコレクションで置き換えることができます。"
		},
		"SET INDEX CACHE PRIORITY": {
			"Syntax": "**SET INDEX CACHE PRIORITY** ( *aField* ; *priority* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field whose index(es) priority value has to be set for the session"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for the field index(es)"
				]
			],
			"Summary": "このコマンドは特定の用途のために用意されています。"
		},
		"SET INDEX": {
			"Syntax": "**SET INDEX** ( *aField* ; *index* {; *} )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"インデックスを作成または削除するフィールド"
				],
				[
					"index",
					"Boolean, Integer",
					"->",
					"True=作成、False=削除、または インデックスを作成: -1=キーワード、 0=デフォルト、1=標準B-Tree、3=クラスタB-Tree"
				],
				[
					"*",
					"Operator",
					"->",
					"*を渡すと非同期にインデックスを作成"
				]
			],
			"Summary": "**SET INDEX** は旧式のコマンドではありますが、これは完全にサポートされており、既存のコードを書き換えることなくアプリケーション内で維持してよいコマンドです。"
		},
		"SET LIST ITEM FONT": {
			"Syntax": "**SET LIST ITEM FONT** ( {* ;} *list* ; *itemRef* ; *font* )<br/>**SET LIST ITEM FONT** ( * ; *list* ; * ; *font* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: リスト中のカレント項目"
				],
				[
					"font",
					"Text, Integer",
					"->",
					"フォント名または番号"
				]
			],
			"Summary": "SET LIST ITEM FONT コマンドは、リスト参照またはオブジェクト名を*list*に指定したリスト中、*itemRef*引数で指定した項目の文字フォントを設定します。"
		},
		"SET LIST ITEM ICON": {
			"Syntax": "**SET LIST ITEM ICON** ( {* ;} *list* ; itemRef | * ; *icon* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"倍長整数, 演算子",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: リスト中のカレント項目"
				],
				[
					"icon",
					"Picture",
					"->",
					"項目に割り当てるアイコン"
				]
			],
			"Summary": "SET LIST ITEM ICON コマンドは、リスト参照またはオブジェクト名を*list*に指定したリスト中、*itemRef*引数で指定した項目に割り当てるアイコンを設定します。"
		},
		"SET LIST ITEM PARAMETER": {
			"Syntax": "**SET LIST ITEM PARAMETER** ( {* ;} *list* ; *itemRef* ; *selector* ; *value* )<br/>**SET LIST ITEM PARAMETER** ( * ; *list* ; * ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"演算子, 倍長整数",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: リスト中のカレント項目"
				],
				[
					"selector",
					"Text",
					"->",
					"パラメタ定数"
				],
				[
					"value",
					"Text, Boolean, Real",
					"->",
					"パラメタ値"
				]
			],
			"Summary": "**SET LIST ITEM PARAMETER**コマンドは、リスト参照またはオブジェクト名を*list*に指定したリスト中、*itemRef*引数で指定した項目の*selector* パラメタを設定するために使用します。"
		},
		"SET LIST ITEM PROPERTIES": {
			"Syntax": "**SET LIST ITEM PROPERTIES** ( {* ;} *list* ; *itemRef* ; *enterable* ; *styles* {; *icon* {; *color*}} )<br/>**SET LIST ITEM PROPERTIES** ( * ; *list* ; * ; *enterable* ; *styles* {; *icon* {; *color*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"演算子, 倍長整数",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: リスト中のカレント項目"
				],
				[
					"enterable",
					"Boolean",
					"->",
					"TRUE = 入力可, FALSE = 入力不可"
				],
				[
					"styles",
					"Integer",
					"->",
					"項目のフォントスタイル"
				],
				[
					"icon",
					"Text, Integer",
					"->",
					"ピクチャー名または番号 (アイコンを使用しない場合は \"\" または 0)"
				],
				[
					"color",
					"Integer",
					"->",
					"RGBカラー値 または -1 = 元のカラーにリセット"
				]
			],
			"Summary": "**SET LIST ITEM PROPERTIES** コマンドは、引数*list*に渡された参照番号またはオブジェクト名のリスト内で、*itemRef*によって指定された項目を変更します。"
		},
		"SET LIST ITEM": {
			"Syntax": "**SET LIST ITEM** ( {* ;} *list* ; *itemRef* ; *newItemText* ; *newItemRef* {; *sublist* ; *expanded*} )<br/>**SET LIST ITEM** ( * ; *list* ; * ; *newItemText* ; *newItemRef* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, listはオブジェクト名 (文字列) 省略時, listはリスト参照番号"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"リスト参照番号 (* 省略時), または リストオブジェクト名 (* 指定時)"
				],
				[
					"itemRef &#124; *",
					"演算子, 倍長整数",
					"->",
					"項目参照番号, または 0: リストに最後に追加された項目, または *: リスト中のカレント項目"
				],
				[
					"newItemText",
					"Text",
					"->",
					"新しい項目テキスト"
				],
				[
					"newItemRef",
					"Integer",
					"->",
					"新しい項目参照番号"
				],
				[
					"sublist",
					"Integer",
					"->",
					"項目に添付する新しいサブリスト, または 0: サブリストがない場合 (現在のサブリストを取り除く), または -1: 変更しない"
				],
				[
					"expanded",
					"Boolean",
					"->",
					"オプションのサブリストの展開/折りたたみ"
				]
			],
			"Summary": "SET LIST ITEM コマンドは、*list*引数に渡した参照番号またはオブジェクト名のリストにおいて、*itemRef*で指定した項目を変更します。"
		},
		"SET LIST PROPERTIES": {
			"Syntax": "**SET LIST PROPERTIES** ( *list* ; *appearance* {; *icon* {; *lineHeight* {; *doubleClick* {; *multiSelections* {; *editable*}}}}} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"appearance",
					"Integer",
					"->",
					"*** 廃止予定、常に0を指定してください ***"
				],
				[
					"icon",
					"Integer",
					"->",
					"*** 廃止予定、常に0を指定してください ***"
				],
				[
					"lineHeight",
					"Integer",
					"->",
					"最小行高さ (ピクセル単位)"
				],
				[
					"doubleClick",
					"Integer",
					"->",
					"ダブルクリックでサブリストを展開/折り畳み 0 = Yes, 1= No"
				],
				[
					"multiSelections",
					"Integer",
					"->",
					"複数行選択: 0 = No (デフォルト), 1 = Yes"
				],
				[
					"editable",
					"Integer",
					"->",
					"0 = ユーザによるリスト編集不可, 1 = ユーザによるリスト編集可 (デフォルト)"
				]
			],
			"Summary": "**SET LIST PROPERTIES** コマンドは、*list*引数に渡された参照番号を持つ階層リストの行の高さとセレクションプロパティを設定します。"
		},
		"SET MACRO PARAMETER": {
			"Syntax": "**SET MACRO PARAMETER** ( *selector* ; *textParam* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"使用するセレクション"
				],
				[
					"textParam",
					"Text",
					"->",
					"送られたテキスト"
				]
			],
			"Summary": "SET MACRO PARAMETERコマンドは、呼び出されたメソッドにテキスト*textParam*を挿入します。"
		},
		"SET MENU BAR": {
			"Syntax": "**SET MENU BAR** ( *menuBar* {; *process*}{; *} )",
			"Params": [
				[
					"menuBar",
					"Integer, Text, Text",
					"->",
					"メニューバー番号または名前 または メニュー参照"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"*",
					"演算子",
					"->",
					"メニューバーの状態を保存"
				]
			],
			"Summary": "SET MENU BAR はカレントプロセスのみのメニューバーを*menuBar*で指定したメニューバーで置き換えます。"
		},
		"SET MENU ITEM ICON": {
			"Syntax": "**SET MENU ITEM ICON** ( *menu* ; *menuItem* ; *iconRef* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"iconRef",
					"Text, Integer",
					"->",
					"メニュー項目に関連付けられたピクチャーの番号または名称"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "**SET MENU ITEM ICON** コマンドは、*menu*と*menuItem*引数で指定されたメニュー項目に関連付けるアイコンを変更するために使用します。"
		},
		"SET MENU ITEM MARK": {
			"Syntax": "**SET MENU ITEM MARK** ( *menu* ; *menuItem* ; *mark* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"mark",
					"Text",
					"->",
					"新しいメニュー項目マーク"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				]
			],
			"Summary": "SET MENU ITEM MARK コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目のチェックマークを、*mark*に渡した最初の文字に変更します。"
		},
		"SET MENU ITEM METHOD": {
			"Syntax": "**SET MENU ITEM METHOD** ( *menu* ; *menuItem* ; *methodName* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッド名"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "SET MENU ITEM METHOD コマンドは、*menu*と*menuItem*引数で指定されたメニュー項目に関連付ける4Dプロジェクトメソッドを変更するために使用します。"
		},
		"SET MENU ITEM PARAMETER": {
			"Syntax": "**SET MENU ITEM PARAMETER** ( *menu* ; *menuItem* ; *param* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"param",
					"Text",
					"->",
					"パラメタとして割り当てる文字列"
				]
			],
			"Summary": "SET MENU ITEM PARAMETERコマンドは、*menu*と*menuItem*引数で指定されたメニュー項目に、カスタム文字列を設定するために使用します。"
		},
		"SET MENU ITEM PROPERTY": {
			"Syntax": "**SET MENU ITEM PROPERTY** ( *menu* ; *menuItem* ; *property* ; *value* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー参照またはメニュー番号"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"property",
					"Text",
					"->",
					"プロパティタイプ"
				],
				[
					"value",
					"Text, Number, Boolean",
					"->",
					"プロパティ値"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス番号"
				]
			],
			"Summary": "**SET MENU ITEM PROPERTY**コマンドは、*menu* と *menuItem*引数で指定されたメニュー項目に、*property*の*value*を設定するために使用します。"
		},
		"SET MENU ITEM SHORTCUT": {
			"Syntax": "**SET MENU ITEM SHORTCUT** ( *menu* ; *menuItem* ; *itemKey* ; *modifiers* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"itemKey",
					"Text, Integer",
					"->",
					"キーボードショートカットの文字またはキーボードショートカットの文字コード (古いシンタックス)"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"ショートカットに割り当てられたモディファイア  (キーコードが渡された時は無視)"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				]
			],
			"Summary": "**SET MENU ITEM SHORTCUT** コマンドは、あるメニュー項目に新しいショートカットを割り当てます。"
		},
		"SET MENU ITEM STYLE": {
			"Syntax": "**SET MENU ITEM STYLE** ( *menu* ; *menuItem* ; *itemStyle* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"itemStyle",
					"Integer",
					"->",
					"新しいメニュー項目スタイル"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				]
			],
			"Summary": "SET MENU ITEM STYLE コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目のフォントスタイルを、*itemStyle*に変更します。"
		},
		"SET MENU ITEM": {
			"Syntax": "**SET MENU ITEM** ( *menu* ; *menuItem* ; *itemText* {; *process*}{; *} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"メニュー番号またはメニュー参照"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"メニュー項目番号 または -1: 最後に追加された項目"
				],
				[
					"itemText",
					"Text",
					"->",
					"メニュー項目の新しいテキスト"
				],
				[
					"process",
					"Integer",
					"->",
					"プロセス参照番号"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時: メタ文字を標準文字として扱う"
				]
			],
			"Summary": "SET MENU ITEM コマンドは、*menu*引数にメニュー番号またはメニュー参照で指定したメニュー中、*menuItem*引数にメニュー項目番号で指定したメニュー項目のテキストを、*itemText*に渡したテキストに変更します。"
		},
		"SET PICTURE FILE NAME": {
			"Syntax": "**SET PICTURE FILE NAME** ( *picture* ; *fileName* )",
			"Params": [
				[
					"picture",
					"Picture, Picture",
					"->",
					"デフォルト名を設定するピクチャー"
				],
				[
					"fileName",
					"Text",
					"->",
					"デフォルトピクチャー名"
				]
			],
			"Summary": "**SET PICTURE FILE NAME**コマンドは引数に渡したピクチャーのデフォルト名を設定あるいは変更します。"
		},
		"SET PICTURE METADATA": {
			"Syntax": "**SET PICTURE METADATA** ( *picture* ; *metaName* ; *metaContents* {; *metaName2* ; *metaContents2* ; ... ; *metaNameN* ; *metaContentsN*} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"メタデータを設定するピクチャ"
				],
				[
					"metaName",
					"Text",
					"->",
					"設定するブロックの名前またはパス"
				],
				[
					"metaContents",
					"Variable",
					"->",
					"メタデータの内容"
				]
			],
			"Summary": "SET PICTURE METADATA コマンドを使用すると、picture (4Dピクチャフィールドまたは変数) 内のメタデータ (またはメタタグ) の内容を書き込んだり更新したりできます。"
		},
		"SET PICTURE TO LIBRARY": {
			"Syntax": "**SET PICTURE TO LIBRARY** ( *picture* ; *picRef* ; *picName* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"新しいピクチャ"
				],
				[
					"picRef",
					"Integer",
					"->",
					"ピクチャライブラリ画像の参照番号"
				],
				[
					"picName",
					"Text",
					"->",
					"ピクチャの新しい名前"
				]
			],
			"Summary": "SET PICTURE TO LIBRARY コマンドは、新規ピクチャを作成、またはピクチャライブラリにあるピクチャを置き換えます。"
		},
		"SET PICTURE TO PASTEBOARD": {
			"Syntax": "**SET PICTURE TO PASTEBOARD** ( *picture* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"ペーストボードに置くピクチャ"
				]
			],
			"Summary": "SET PICTURE TO PASTEBOARD は、ペーストボードを消去し、*picture*に渡したピクチャのコピーをペーストボードに置きます。"
		},
		"SET PLUGIN ACCESS": {
			"Syntax": "**SET PLUGIN ACCESS** ( *plugIn* ; *group* )",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"プラグイン番号"
				],
				[
					"group",
					"Text",
					"->",
					"プラグインに関連するグル―プの名前"
				]
			],
			"Summary": "SET PLUGIN ACCESS コマンドを使用すれば、データベース上にインストールされた各 \"シリアルされた\" プラグインをプログラムで設定する環境をユーザグループに提供することができます。"
		},
		"SET PRINT MARKER": {
			"Syntax": "**SET PRINT MARKER** ( *markNum* ; *position* {; *} )",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"マーカ番号"
				],
				[
					"position",
					"Integer",
					"->",
					"マーカの新しい位置"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = 後続のマーカを移動する 省略時 = 後続のマーカを移動しない"
				]
			],
			"Summary": "SET PRINT MARKER コマンドを使用し、印刷時にマーカ位置を指定することができます。"
		},
		"SET PRINT OPTION": {
			"Syntax": "**SET PRINT OPTION** ( *option* ; *value1* {; *value2*} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"オプション番号"
				],
				[
					"value1",
					"Integer, Text",
					"->",
					"オプションの値1"
				],
				[
					"value2",
					"Integer, Text",
					"->",
					"オプションの値2"
				]
			],
			"Summary": "**SET PRINT OPTION** コマンドを使用し、プログラムから印刷オプションの値を変更することができます。"
		},
		"SET PRINT PREVIEW": {
			"Syntax": "**SET PRINT PREVIEW** ( *preview* )",
			"Params": [
				[
					"preview",
					"Boolean",
					"->",
					"スクリーンにプレビュー (TRUE), または プレビューしない (FALSE)"
				]
			],
			"Summary": "**SET PRINT PREVIEW** は、プリントダイアログボックスのプレビュー設定のオン/オフをメソッドで切り替るためのものです。"
		},
		"SET PRINTABLE MARGIN": {
			"Syntax": "**SET PRINTABLE MARGIN** ( *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"左マージン"
				],
				[
					"top",
					"Integer",
					"->",
					"上マージン"
				],
				[
					"right",
					"Integer",
					"->",
					"右マージン"
				],
				[
					"bottom",
					"Integer",
					"->",
					"下マージン"
				]
			],
			"Summary": "SET PRINTABLE MARGIN コマンドを使用すると、Print form、PRINT SELECTIONまたは PRINT RECORD コマンドの使用時に、各種印刷マージンの値を設定することができます。"
		},
		"SET PROCESS VARIABLE": {
			"Syntax": "**SET PROCESS VARIABLE** ( *process* ; *dstVar* ; *expr* {; *dstVar2* ; *expr2* ; ... ; *dstVarN* ; *exprN*} )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"送り先のプロセス番号"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"送り先の変数"
				],
				[
					"expr",
					"Variable",
					"->",
					"ソース式 (ソース変数)"
				]
			],
			"Summary": "SET PROCESS VARIABLE コマンドは、引数*expr1* (*expr2*等)に渡す値を、*process*に渡す番号の送り先プロセスの*dstVar* (*dstVar2*等) プロセス変数に書き込みます。"
		},
		"SET QUERY AND LOCK": {
			"Syntax": "**SET QUERY AND LOCK** ( *lock* )",
			"Params": [
				[
					"lock",
					"Boolean",
					"->",
					"True = クエリで見つけたレコードをロック False = レコードをロックしない"
				]
			],
			"Summary": "**SET QUERY AND LOCK** コマンドを使用して、カレントのトランザクション中でこのコマンドに引き続き呼び出されるすべてのクエリで見つかったレコードを自動的にロックできます。"
		},
		"SET QUERY DESTINATION": {
			"Syntax": "**SET QUERY DESTINATION** ( *destinationType* {; *destinationObject* {; *destinationPtr*}} )",
			"Params": [
				[
					"destinationType",
					"Integer",
					"->",
					"0=カレントセレクション, 1=セット, 2=命名セレクション, 3=変数"
				],
				[
					"destinationObject",
					"Text, Variable",
					"->",
					"セット名、命名セレクション名、変数、または空の文字列"
				],
				[
					"destinationPtr",
					"Pointer",
					"->",
					"destinationType=3のとき変数へのポインター"
				]
			],
			"Summary": "**SET QUERY DESTINATION**を使い、カレントプロセスのクエリの結果を配置する場所を4Dに指示することができます。"
		},
		"SET QUERY LIMIT": {
			"Syntax": "**SET QUERY LIMIT** ( *limit* )",
			"Params": [
				[
					"limit",
					"Integer",
					"->",
					"レコード数, または 0: 制限なし"
				]
			],
			"Summary": "SET QUERY LIMITは、カレントプロセスの以降の検索を対象に、*limit*に渡した数のレコードが見つかったら検索を中止するよう4Dに指示します。"
		},
		"SET REAL COMPARISON LEVEL": {
			"Syntax": "**SET REAL COMPARISON LEVEL** ( *epsilon* )",
			"Params": [
				[
					"epsilon",
					"Real",
					"->",
					"実数の同等性を比較するためのイプシロン値"
				]
			],
			"Summary": "**SET REAL COMPARISON LEVEL** コマンドは、実数値と式の同等性を比較するために4Dが使用するイプシロン値を設定します。"
		},
		"SET RECENT FONTS": {
			"Syntax": "**SET RECENT FONTS** ( *fontsArray* )",
			"Params": [
				[
					"fontsArray",
					"Text array",
					"->",
					"フォント名の配列"
				]
			],
			"Summary": "**SET RECENT FONTS**コマンドは、コンテキストメニュー内の\"最近使用したフォント\"の中に表示されるフォントの一覧を変更します。"
		},
		"SET TABLE CACHE PRIORITY": {
			"Syntax": "**SET TABLE CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セッション中の優先度を設定するスカラーデータのテーブル"
				],
				[
					"priority",
					"Integer",
					"->",
					"テーブル内のスカラー値に対するキャッシュ優先度値"
				]
			],
			"Summary": "このコマンドは特定の用途のために用意されています。"
		},
		"SET TABLE TITLES": {
			"Syntax": "**SET TABLE TITLES** {( *tableTitles* ; *tableNumbers* {; *})}",
			"Params": [
				[
					"tableTitles",
					"Text array",
					"->",
					"ダイアログボックスに表示されるテーブル名"
				],
				[
					"tableNumbers",
					"Integer array",
					"->",
					"実際のテーブル番号"
				],
				[
					"*",
					"演算子",
					"->",
					"フォーミュラエディタでカスタム名を使用"
				]
			],
			"Summary": "**SET TABLE TITLES**コマンドを使用すれば、アプリケーションモードにおいて、標準の4Dダイアログボックスに現れるデータベーステーブルを一部隠したり、表示名称を変更したり、並び順を変えたりできます(スタートアップモードが**アプリケーション**である、あるいは**実行**メニューの**アプリケーションをテスト**を選択した場合)。"
		},
		"SET TEXT TO PASTEBOARD": {
			"Syntax": "**SET TEXT TO PASTEBOARD** ( *text* )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"ペーストボードに置くテキスト"
				]
			],
			"Summary": "SET TEXT TO PASTEBOARD は、ペーストボードを消去し、*text*に渡したテキストのコピーをペーストボードに置きます。"
		},
		"SET TIMEOUT": {
			"Syntax": "**SET TIMEOUT** ( *seconds* )",
			"Params": [
				[
					"seconds",
					"Integer",
					"->",
					"タイムアウト秒数"
				]
			],
			"Summary": "SET TIMEOUT は、シリアルポートコマンドの許容される待ち時間を設定します。"
		},
		"SET TIMER": {
			"Syntax": "**SET TIMER** ( *tickCount* )",
			"Params": [
				[
					"tickCount",
					"Integer",
					"->",
					"Tickcount または -1=すぐに実行する"
				]
			],
			"Summary": "**SET TIMER** コマンドは、On Timerフォームイベントを有効にし、カレントプロセスのカレントフォームでOn Timerフォームイベント間の間隔Tick数を設定します。"
		},
		"SET UPDATE FOLDER": {
			"Syntax": "**SET UPDATE FOLDER** ( *folderPath* {; *silentErrors*} )",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"アップデートされたアプリケーションを内包するフォルダ(OS Xの場合はパッケージ)へのパス名"
				],
				[
					"silentErrors",
					"Boolean",
					"->",
					"False (デフォルト)=エラーを表示して報告 True=エラーを表示しない"
				]
			],
			"Summary": "**SET UPDATE FOLDER**コマンドは、カレントの組み込まれた4Dアプリケーションのアップデート情報を含んだフォルダの場所を指定します。"
		},
		"SET USER ALIAS": {
			"Syntax": "**SET USER ALIAS** ( *alias* )",
			"Params": [
				[
					"alias",
					"Text",
					"->",
					"4Dユーザーアカウントに対して使用する代理の名前、またはその名前をリセットするためには\"\""
				]
			],
			"Summary": "**SET USER ALIAS** コマンドは、カレントのセッションの間、カレントの4D ユーザーアカウント名の代わりに使用できるもう一つのカスタムの名前を定義します。"
		},
		"Set user properties": {
			"Syntax": "**Set user properties** ( *userID* ; *name* ; *startup* ; *password* ; *nbLogin* ; *lastLogin* {; *memberships* {; *groupOwner*}} ) : Integer",
			"Params": [
				[
					"userID",
					"Integer",
					"->",
					"ユーザーアカウントのユニークなID番号、<br/>または -1= デザイナーに関連した新規ユーザーの追加 -2= 管理者に関連した新規ユーザーの追加"
				],
				[
					"<-",
					"追加したユーザーアカウント (あれば) のユニークなID番号"
				],
				[
					"name",
					"Text",
					"->",
					"新規ユーザーの名前"
				],
				[
					"startup",
					"Text",
					"->",
					"新規ユーザースタートアップメソッドの名前"
				],
				[
					"password",
					"Text",
					"->",
					"新しい (暗号化されていない) パスワード、または * を指定すると、パスワードは以前のまま"
				],
				[
					"nbLogin",
					"Integer",
					"->",
					"データベースへログインした回数 (バイナリデータベースのみ)"
				],
				[
					"lastLogin",
					"Date",
					"->",
					"データベースに最後にログインした日付 (バイナリデータベースのみ)"
				],
				[
					"memberships",
					"Integer array",
					"->",
					"ユーザーが属するグループのID番号"
				],
				[
					"groupOwner",
					"Integer",
					"->",
					"ユーザーグループオーナーの参照番号 (バイナリデータベースのみ)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"新規ユーザーのユニークなID番号"
				]
			],
			"Summary": "Set user properties コマンドは、引数 userID に渡したユニークなユーザーID番号を持つ既存のユーザーアカウントのプロパティを変更・更新するか、新規ユーザーを追加します。"
		},
		"SET WINDOW RECT": {
			"Syntax": "**SET WINDOW RECT** ( *left* ; *top* ; *right* ; *bottom* {; *window*}{; *} )",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル左座標"
				],
				[
					"top",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル上座標"
				],
				[
					"right",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル右座標"
				],
				[
					"bottom",
					"Integer",
					"->",
					"ウィンドウ内容領域のグローバル下座標"
				],
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または省略時カレントプロセスの最前面ウィンドウ"
				],
				[
					"*",
					"演算子",
					"->",
					"省略時 (デフォルト) = ウィンドウを最前面にする指定時 = ウィンドウの並びレベルを変更しない"
				]
			],
			"Summary": "**SET WINDOW RECT**コマンドは*window*に渡した参照番号のウィンドウのグローバル座標を変更します。"
		},
		"SET WINDOW TITLE": {
			"Syntax": "**SET WINDOW TITLE** ( *title* {; *window*} )",
			"Params": [
				[
					"title",
					"Text",
					"->",
					"ウィンドウタイトル"
				],
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または 省略時カレントプロセスの最前面ウィンドウ"
				]
			],
			"Summary": "SET WINDOW TITLE コマンドは*window* に渡した参照番号のウィンドウのタイトルを、*title*に渡したテキストに変更します (最大80文字)。"
		},
		"Shift down": {
			"Syntax": "**Shift down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"Shift キーのステータス"
				]
			],
			"Summary": "Shift down コマンドはShift キーが押されているとTrueを返します。"
		},
		"SHOW MENU BAR": {
			"Syntax": "**SHOW MENU BAR**",
			"Params": [],
			"Summary": "SHOW MENU BARコマンドは、メニューバーを表示します。"
		},
		"SHOW ON DISK": {
			"Syntax": "**SHOW ON DISK** ( *pathname* {; *} )",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"表示するアイテムのパス名"
				],
				[
					"*",
					"演算子",
					"->",
					"アイテムがフォルダの場合、その内容を表示"
				]
			],
			"Summary": "SHOW ON DISKコマンドは、オペレーティングシステムの標準ウィンドウ上に、引数*pathname* に渡したパス名を持つファイルまたはフォルダを表示します。"
		},
		"SHOW PROCESS": {
			"Syntax": "**SHOW PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"表示させるプロセスのプロセス番号"
				]
			],
			"Summary": "SHOW PROCESSは*process*に属する全ウィンドウを表示します。"
		},
		"SHOW TOOL BAR": {
			"Syntax": "**SHOW TOOL BAR**",
			"Params": [],
			"Summary": "**SHOW TOOL BAR** コマンドは、カレントプロセスにおいてOpen form window コマンドで作成されたカスタムのツールバーの表示を管理します。"
		},
		"SHOW WINDOW": {
			"Syntax": "**SHOW WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号または 省略時カレントプロセスの最前面ウィンドウ"
				]
			],
			"Summary": "SHOW WINDOW コマンドは*window*に渡した参照番号のウィンドウを表示します。"
		},
		"Sin": {
			"Syntax": "**Sin** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"正弦を求めるラジアン値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"正弦値"
				]
			],
			"Summary": "Sin は*number*の正弦値を返します。"
		},
		"Size of array": {
			"Syntax": "**Size of array** ( *array* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"サイズを取得する配列"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"配列の要素数"
				]
			],
			"Summary": "Size of array コマンドは、配列*array*の要素数を返します。"
		},
		"SOAP DECLARATION": {
			"Syntax": "**SOAP DECLARATION** ( *variable* ; *type* ; input_output {; *alias*} )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"入出力SOAP引数を参照する変数"
				],
				[
					"type",
					"Integer",
					"->",
					"引数が指す4Dの型"
				],
				[
					"input_output",
					"Integer",
					"->",
					"1 = SOAP入力, 2 = SOAP出力"
				],
				[
					"alias",
					"Text",
					"->",
					"SOAP交換の間 この引数用に公開される名前"
				]
			],
			"Summary": "SOAP DECLARATION コマンドを使用して、Webサービスとして公開された4Dメソッドで使用される引数の型を明示的に宣言できます。"
		},
		"SOAP Get info": {
			"Syntax": "**SOAP Get info** ( *infoNum* ) : Text",
			"Params": [
				[
					"infoNum",
					"Integer",
					"->",
					"取得するSOAP情報のタイプ番号"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"SOAP情報"
				]
			],
			"Summary": "**SOAP Get info**コマンドを使用して、SOAPリクエストに関するさまざま情報を文字列で受け取ることができます。"
		},
		"SOAP REJECT NEW REQUESTS": {
			"Syntax": "**SOAP REJECT NEW REQUESTS** ( *rejectStatus* )",
			"Params": [
				[
					"rejectStatus",
					"Boolean",
					"->",
					"新規リクエストを拒否するにはTrue、それ以外の場合にはFalse"
				]
			],
			"Summary": "**SOAP REJECT NEW REQUESTS** コマンドはWeb サービスが新規SOAP リクエストを受け入れるかどうかを指定します。"
		},
		"SOAP Request": {
			"Syntax": "**SOAP request**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: リクエストはSOAP; そうでなければFalse"
				]
			],
			"Summary": "**SOAP request**コマンドは実行されているコードがSOAPリクエストの一部であればTrueを返します。"
		},
		"SOAP SEND FAULT": {
			"Syntax": "**SOAP SEND FAULT** ( *faultType* ; *description* )",
			"Params": [
				[
					"faultType",
					"Integer",
					"->",
					"1 = クライアント側のエラー, 2 = サーバー側のエラー"
				],
				[
					"description",
					"Text",
					"->",
					"SOAPクライアントに送信する、エラーの説明"
				]
			],
			"Summary": "**SOAP SEND FAULT**コマンドを使用して、SOAPクライアントにエラーの発生元 (クライアントまたはサーバ) を示すエラーを送ることができます。"
		},
		"SORT ARRAY": {
			"Syntax": "**SORT ARRAY** ( *array* {; *array2* ; ... ; *arrayN*}{; > または <} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"ソートする配列"
				],
				[
					"> または <",
					"演算子",
					"->",
					"\">\" : 昇順ソート, または \"<\" : 降順ソート, または 省略した場合降順ソート"
				]
			],
			"Summary": "**SORT ARRAY**コマンドは、1つまたは複数の配列を昇順や降順にソートします。"
		},
		"SORT LIST": {
			"Syntax": "**SORT LIST** ( *list* {; > または <} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"リスト参照番号"
				],
				[
					"> または <",
					"演算子",
					"->",
					"並び順: > 昇順, または < 降順"
				]
			],
			"Summary": "SORT LIST コマンドは、*list*引数に渡された参照番号を持つリストをソートします。"
		},
		"SPELL ADD TO USER DICTIONARY": {
			"Syntax": "**SPELL ADD TO USER DICTIONARY** ( *words* )",
			"Params": [
				[
					"words",
					"Text, Text配列",
					"->",
					"ユーザー辞書に追加する単語または単語リスト"
				]
			],
			"Summary": "**SPELL ADD TO USER DICTIONARY**コマンドはカレントのユーザー辞書に単語を追加します。"
		},
		"SPELL CHECK TEXT": {
			"Syntax": "**SPELL CHECK TEXT** ( *text* ; *errPos* ; *errLength* ; *checkPos* ; *arrSuggest* )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"チェックするテキスト"
				],
				[
					"errPos",
					"Integer",
					"<-",
					"未知の単語の最初の文字位置"
				],
				[
					"errLength",
					"Integer",
					"<-",
					"未知の単語の長さ"
				],
				[
					"checkPos",
					"Integer",
					"->",
					"チェックを開始する位置"
				],
				[
					"arrSuggest",
					"Text array",
					"<-",
					"推奨候補リスト"
				]
			],
			"Summary": "**SPELL CHECK TEXT**コマンドは*text*引数の内容を、*checkPos*の位置からチェックし、最初に見つかった未知の単語の位置を返します。"
		},
		"SPELL CHECKING": {
			"Syntax": "**SPELL CHECKING**",
			"Params": [],
			"Summary": "**SPELL CHECKING** コマンドは、フィールドまたは現在表示されているフォームでフォーカスを持つ変数のスペルチェックを行います。"
		},
		"SPELL Get current dictionary": {
			"Syntax": "**SPELL Get current dictionary**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"スペルチェックに使用される辞書のID"
				]
			],
			"Summary": "**SPELL Get current dictionary**コマンドは使用中の辞書のID番号を返します。"
		},
		"SPELL GET DICTIONARY LIST": {
			"Syntax": "**SPELL GET DICTIONARY LIST** ( *langID* ; *langFiles* ; *langNames* )",
			"Params": [
				[
					"langID",
					"Integer array",
					"<-",
					"言語のユニークID"
				],
				[
					"langFiles",
					"Text array",
					"<-",
					"インストールされた言語ファイルの名前"
				],
				[
					"langNames",
					"Text array",
					"<-",
					"言語のローカル名"
				]
			],
			"Summary": "**SPELL GET DICTIONARY LIST**コマンドはマシンにインストールされたハンスペル辞書ファイルのID、ファイル名、言語名をそれぞれ*langID*、*langFiles*そして*langNames*配列に返します。"
		},
		"SPELL SET CURRENT DICTIONARY": {
			"Syntax": "**SPELL SET CURRENT DICTIONARY** ( *dictionary* )",
			"Params": [
				[
					"dictionary",
					"Integer, Text",
					"->",
					"スペルチェック用に使用する辞書のID、名前または言語コード省略した場合デフォルトの辞書を使用"
				]
			],
			"Summary": "**SPELL SET CURRENT DICTIONARY**コマンドは、現在の辞書を引数*dictionary*に よって指定された辞書で置き換えます。"
		},
		"Split string": {
			"Syntax": "**Split string** ( *stringToSplit* ; *separator* {; *options*} ) : Collection",
			"Params": [
				[
					"stringToSplit",
					"Text",
					"->",
					"文字列の値"
				],
				[
					"separator",
					"Text",
					"->",
					"stringToSplitを分割する文字列。空の文字列(\"\")の場合には、stringToSplitを1文字ずつに分割します"
				],
				[
					"options",
					"Integer",
					"->",
					"空の文字列と空白に関するオプション"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"分割した文字列のコレクション"
				]
			],
			"Summary": "**Split string** コマンドは、*stringToSplit* 引数の文字列を、*separator* 引数で指定した区切り文字によって分割した文字列のコレクションを返します。"
		},
		"SQL CANCEL LOAD": {
			"Syntax": "**SQL CANCEL LOAD**",
			"Params": [],
			"Summary": "SQL CANCEL LOAD コマンドコマンドは、現在のSELECTリクエストを終了してパラメタを初期化します。"
		},
		"SQL End selection": {
			"Syntax": "**SQL End selection**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"結果セットの境界に達した"
				]
			],
			"Summary": "SQL End selectionコマンドは、結果セットの境界に達したかどうかを判定するために使用します。"
		},
		"SQL EXECUTE SCRIPT": {
			"Syntax": "**SQL EXECUTE SCRIPT** ( *scriptPath* ; *errorAction* {; *attribName* ; *attribValue*} {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"scriptPath",
					"Text",
					"->",
					"実行するSQLスクリプトが書かれたファイルの完全パス名"
				],
				[
					"errorAction",
					"Integer",
					"->",
					"スクリプト実行中にエラーが発生した場合のアクション"
				],
				[
					"attribName",
					"Text",
					"->",
					"使用する属性の名前"
				],
				[
					"attribValue",
					"Text",
					"->",
					"属性の値"
				]
			],
			"Summary": "SQL EXECUTE SCRIPTコマンドを使用して、*scriptPath*で指定されたスクリプトファイルに書かれた一連のSQLステートメントを実行できます。"
		},
		"SQL EXECUTE": {
			"Syntax": "**SQL EXECUTE** ( *sqlStatement* {; *boundObj*}{; *boundObj2* ; ... ; *boundObjN*} )",
			"Params": [
				[
					"sqlStatement",
					"Text",
					"->",
					"実行するSQLコマンド"
				],
				[
					"boundObj",
					"Variable, Field",
					"<-",
					"結果を受け取る(必要に応じて)"
				]
			],
			"Summary": "**SQL EXECUTE**コマンドを使用してSQLコマンドを実行し、結果を4Dのオブジェクト(配列、変数またはフィールド) にバインドできます。"
		},
		"SQL EXPORT DATABASE": {
			"Syntax": "**SQL EXPORT DATABASE** ( *folderPath* {; *numFiles* {; *fileLimitSize* {; *fieldLimitSize*}}} )",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"書き出しフォルダーのパス名、または\"\" でフォルダー選択ダイアログボックスを表示"
				],
				[
					"numFiles",
					"Integer",
					"->",
					"フォルダーごとの最大ファイル数"
				],
				[
					"fileLimitSize",
					"Integer",
					"->",
					"書き出しファイルのサイズ制限値 (KB)"
				],
				[
					"fieldLimitSize",
					"Integer",
					"->",
					"この引数のサイズ以下のテキスト、Blob、ピクチャーフィールドの内容はメインのファイルに統合する (バイト単位)"
				]
			],
			"Summary": "**SQL EXPORT DATABASE**コマンドはデータベースのすべてのテーブルのすべてのレコードをSQLフォーマットで書き出します。"
		},
		"SQL EXPORT SELECTION": {
			"Syntax": "**SQL EXPORT SELECTION** ( *aTable* ; *folderPath* {; *numFiles* {; *fileLimitSize* {; *fieldLimitSize*}}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"セレクションを書き出すテーブル"
				],
				[
					"folderPath",
					"Text",
					"->",
					"書き出しフォルダーのパス名、または\"\" でフォルダー選択ダイアログボックスを表示"
				],
				[
					"numFiles",
					"Integer",
					"->",
					"フォルダーごとの最大ファイル数"
				],
				[
					"fileLimitSize",
					"Integer",
					"->",
					"Export.sql ファイルの最大サイズ (KB)"
				],
				[
					"fieldLimitSize",
					"Integer",
					"->",
					"この引数のサイズ以下のテキスト、Blob、ピクチャーフィールドの内容はメインのファイルに統合する (バイト単位)"
				]
			],
			"Summary": "SQL EXPORT SELECTION コマンドは、aTable引数で指定した4DテーブルのカレントセレクションをSQLフォーマットで書き出します。"
		},
		"SQL Get current data source": {
			"Syntax": "**SQL Get current data source**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"使用されているカレントのデータソース名"
				]
			],
			"Summary": "*Get current data source*コマンドはアプリケーションのカレントデータソースの名前を返します。"
		},
		"SQL GET DATA SOURCE LIST": {
			"Syntax": "**SQL GET DATA SOURCE LIST** ( *sourceType* ; *sourceNamesArr* ; *driversArr* )",
			"Params": [
				[
					"sourceType",
					"Integer",
					"->",
					"ソースタイプ: ユーザまたはシステム"
				],
				[
					"sourceNamesArr",
					"Text array",
					"<-",
					"データソース名の配列"
				],
				[
					"driversArr",
					"Text array",
					"<-",
					"ソース用のドライバの配列"
				]
			],
			"Summary": "*GET DATA SOURCE LIST*コマンドは、オペレーションシステムのODBCマネージャで定義されている*sourceType* データソースのドライバと名前を*sourceNamesArr*と*driversArr*の配列に返します。"
		},
		"SQL GET LAST ERROR": {
			"Syntax": "**SQL GET LAST ERROR** ( *errCode* ; *errText* ; *errODBC* ; *errSQLServer* )",
			"Params": [
				[
					"errCode",
					"Integer",
					"<-",
					"エラーコード"
				],
				[
					"errText",
					"Text",
					"<-",
					"エラーテキスト"
				],
				[
					"errODBC",
					"Text",
					"<-",
					"ODBCエラーコード"
				],
				[
					"errSQLServer",
					"Integer",
					"<-",
					"SQLサーバネイティブエラーコード"
				]
			],
			"Summary": "SQL GET LAST ERRORコマンドは、ODBCコマンドの実行中に発生した最後のエラーに関連する情報を返します。"
		},
		"SQL GET OPTION": {
			"Syntax": "**SQL GET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"オプション番号"
				],
				[
					"value",
					"Integer, Text",
					"<-",
					"オプション値"
				]
			],
			"Summary": "SQL GET OPTIONコマンドは、*option*に渡したオプションの現在の*value*を返します。"
		},
		"SQL LOAD RECORD": {
			"Syntax": "**SQL LOAD RECORD** {( *numRecords* )}",
			"Params": [
				[
					"numRecords",
					"Integer",
					"->",
					"ロードするレコード数"
				]
			],
			"Summary": "SQL LOAD RECORDコマンドは、現在の接続において開かれたODBCソースからのレコードを1件以上4D内に取り込みます。"
		},
		"SQL LOGIN": {
			"Syntax": "**SQL LOGIN** {( *dataEntry* ; *userName* ; *password* ; * )}",
			"Params": [
				[
					"dataEntry",
					"Text",
					"->",
					"外部データベース名、または<br/>外部データソースのIPアドレス、または<br/>ODBCマネジャーのデータソース名、または<br/>\"\"で選択ダイアログボックスの表示"
				],
				[
					"userName",
					"Text",
					"->",
					"データソースに登録されているユーザー名"
				],
				[
					"password",
					"Text",
					"->",
					"データソースに登録されているパスワード"
				],
				[
					"*",
					"演算子",
					"->",
					"Begin SQL/End SQLへ適用される 省略した場合、適用しない(ローカルデータベース)、 渡す場合、適用する"
				]
			],
			"Summary": "**SQL LOGIN**コマンドを使用すると、*dataEntry*引数で指定されたSQLデータソースへ接続することができます。"
		},
		"SQL LOGOUT": {
			"Syntax": "**SQL LOGOUT**",
			"Params": [],
			"Summary": "SQL LOGOUT コマンドは、カレントプロセスにおいて開かれているODBCソースとの接続をクローズします(すでに接続されていれば)。"
		},
		"SQL SET OPTION": {
			"Syntax": "**SQL SET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"設定するオプション番号"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"新しいオプションの値"
				]
			],
			"Summary": "**SQL SET OPTION** コマンドを使用して、optionに渡したオプションのvalueを変更します。"
		},
		"SQL SET PARAMETER": {
			"Syntax": "**SQL SET PARAMETER** ( *object* ; *paramType* )",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"使用する4Dオブジェクト (変数、配列、フィールド)"
				],
				[
					"paramType",
					"Integer",
					"->",
					"引数タイプ"
				]
			],
			"Summary": "**SQL SET PARAMETER**コマンドを使用すると、4D変数や配列、フィールドをSQLリクエストで使用することができます。"
		},
		"Square root": {
			"Syntax": "**Square root** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"平方根を求める数値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"平方根の値"
				]
			],
			"Summary": "Square root は*number*の平方根を返します。"
		},
		"ST COMPUTE EXPRESSIONS": {
			"Syntax": "**ST COMPUTE EXPRESSIONS** ( {* ;} *object* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列) 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				]
			],
			"Summary": "**ST COMPUTE EXPRESSIONS**コマンドは、*object* 引数で指定したマルチスタイルあるいは4D Write Proのフィールドあるいは変数内にあるダイナミック 4D 式を更新します。"
		},
		"ST FREEZE EXPRESSIONS": {
			"Syntax": "**ST FREEZE EXPRESSIONS** ( {* ;} *object* {; *startSel* {; *endSel*}}{; *} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列) 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				],
				[
					"*",
					"演算子",
					"->",
					"渡した場合、固定化する前に4D式を更新"
				]
			],
			"Summary": "**ST FREEZE EXPRESSIONS**コマンドは、*object* 引数で指定されたマルチスタイルテキストあるいは4D Write Proのフィールドまたは変数内の4D 式の内容を固定化します。"
		},
		"ST GET ATTRIBUTES": {
			"Syntax": "**ST GET ATTRIBUTES** ( {* ;} *object* ; *startSel* ; *endSel* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>テキストフィールドまたは変数 (* 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"テキスト選択の開始位置"
				],
				[
					"endSel",
					"Integer",
					"->",
					"テキスト選択の終了位置"
				],
				[
					"attribName",
					"Integer",
					"->",
					"取得する属性"
				],
				[
					"attribValue",
					"Variable",
					"<-",
					"属性の現在の値"
				]
			],
			"Summary": "**ST GET ATTRIBUTES** コマンドは、*object*で指定したフォームオブジェクト中で選択されたテキストのスタイル属性を取得するために使用します。"
		},
		"ST Get content type": {
			"Syntax": "**ST Get content type** ( {* ;} *object* {; *startSel* {; *endSel* {; *startBlock* {; *endBlock*}}}} ) : Integer",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				],
				[
					"startBlock",
					"Integer",
					"<-",
					"選択範囲内の、同一のタイプの開始地点"
				],
				[
					"endBlock",
					"Integer",
					"<-",
					"選択範囲内の、同一のタイプの終了地点"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"内容のタイプ"
				]
			],
			"Summary": "**ST Get content type**コマンドは、 *object* 引数で指定されたスタイル付テキストフィールドまたはテキスト変数内で見つかったコンテンツの型を返します。"
		},
		"ST Get expression": {
			"Syntax": "**ST Get expression** ( {* ;} *object* {; *startSel* {; *endSel*}} )  : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"4D式の内容"
				]
			],
			"Summary": "**ST Get expression**コマンドは、*object* 引数で指定されたスタイル付テキストフィールドまたはテキスト変数内のカレントセレクションの中で、最初に見つけた 4D 式を返します。"
		},
		"ST GET OPTIONS": {
			"Syntax": "**ST GET OPTIONS** ( {* ;} *object* ; *option* ; *value* {; *option2* ; *value2* ; ... ; *optionN* ; *valueN*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"option",
					"Integer",
					"->",
					"取得したいオプション"
				],
				[
					"value",
					"Integer",
					"<-",
					"オプションのカレントの値"
				]
			],
			"Summary": "**ST GET OPTIONS**コマンドは、 *object* 引数で指定されたスタイル付テキストフィールドまたはテキスト変数内で動作中のオプションのカレントの値を取得します。"
		},
		"ST Get plain text": {
			"Syntax": "**ST Get plain text** ( {* ;} *object* {; *refMode*} ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>テキストフィールドまたは変数 (* 省略時)"
				],
				[
					"refMode",
					"Integer",
					"->",
					"Mode for handling references found in the text"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"タグなしのテキスト"
				]
			],
			"Summary": "**ST Get plain text** コマンドは*\\**と*object*引数で指定したテキスト変数やフィールドからスタイルタグを取り除き、プレーンテキストを返します。"
		},
		"ST Get text": {
			"Syntax": "**ST Get text** ( {* ;} *object* {; *startSel* {; *endSel*}} )  : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時objectはオブジェクト名 (文字列) <br/>省略時 objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時)または、テキストフィールドか変数 (* 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"文字選択の開始位置"
				],
				[
					"endSel",
					"Integer",
					"->",
					"文字選択の終了位置"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"スタイルタグを含むテキスト"
				]
			],
			"Summary": "**ST Get text** コマンドは *object* 引数で指定されたフィールドや変数中のスタイル付きテキストを返します。"
		},
		"ST GET URL": {
			"Syntax": "**ST GET URL** ( {* ;} *object* ; *urlText* ; *urlAddress* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"urlText",
					"Text",
					"<-",
					"リンクの表示テキスト"
				],
				[
					"urlAddress",
					"Text",
					"<-",
					"URL アドレス"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				]
			],
			"Summary": "**ST GET URL**コマンドは、 *object* 引数で指定されたスタイル付テキストフィールドまたはテキスト変数内で見つかった最初のURL の表示テキストとアドレスを返します。"
		},
		"ST INSERT EXPRESSION": {
			"Syntax": "**ST INSERT EXPRESSION** ( {* ;} *object* ; *expression* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列) 省略時: object は変数またはフィールド"
				],
				[
					"object",
					"Object",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"expression",
					"Text",
					"->",
					"挿入したい4D式と(任意の)フォーマット"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				]
			],
			"Summary": "**ST INSERT EXPRESSION**コマンドは、*object* 引数で指定したスタイル付テキストフィールドまたはテキスト変数内に、4D 式への参照を挿入します。"
		},
		"ST INSERT URL": {
			"Syntax": "**ST INSERT URL** ( {* ;} *object* ; *urlText* ; *urlAddress* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)、省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、または変数やフィールド( * 省略時)"
				],
				[
					"urlText",
					"Text",
					"->",
					"リンクの表示テキスト"
				],
				[
					"urlAddress",
					"Text",
					"->",
					"URL アドレス"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択範囲の開始地点"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択範囲の終了地点"
				]
			],
			"Summary": "**ST INSERT URL**コマンドは、*object* 引数で指定したスタイル付テキストフィールドまたはテキスト変数内に、 URL のリンクを挿入します。"
		},
		"ST SET ATTRIBUTES": {
			"Syntax": "**ST SET ATTRIBUTES** ( {* ;} *object* ; *startSel* ; *endSel* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"新しいテキスト選択の開始位置"
				],
				[
					"endSel",
					"Integer",
					"->",
					"新しいテキスト選択の終了位置"
				],
				[
					"attribName",
					"Text",
					"->",
					"設定する属性"
				],
				[
					"attribValue",
					"Text, Integer",
					"->",
					"新しい属性値"
				]
			],
			"Summary": "**ST SET ATTRIBUTES** コマンドを使用して、 *object*で指定したフォームオブジェクト中の1つ以上のスタイル属性を変更できます。"
		},
		"ST SET OPTIONS": {
			"Syntax": "**ST SET OPTIONS** ( {* ;} *object* ; *option* ; *value* {; *option2* ; *value2* ; ... ; *optionN* ; *valueN*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: object はオブジェクト名(文字列)<br/>省略時: object は変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名( * 指定時)、<br/>または変数やフィールド( * 省略時)"
				],
				[
					"option",
					"Integer",
					"->",
					"設定したいオプション"
				],
				[
					"value",
					"Integer",
					"->",
					"オプションの新しい値"
				]
			],
			"Summary": "**ST SET OPTIONS**コマンドは、*object* 引数で指定されたスタイル付テキストフィールドまたはテキスト変数に関する様々なオプションを変更することができます。"
		},
		"ST SET PLAIN TEXT": {
			"Syntax": "**ST SET PLAIN TEXT** ( {* ;} *object* ; *newText* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列)。省略時、オブジェクトは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (*指定時)、または変数/フィールド (*省略時)"
				],
				[
					"newText",
					"Text",
					"->",
					"挿入するテキスト"
				],
				[
					"startSel",
					"Integer",
					"->",
					"選択の開始位置"
				],
				[
					"endSel",
					"Integer",
					"->",
					"選択の終了位置"
				]
			],
			"Summary": "**ST SET PLAIN TEXT**コマンドは*object*引数で指定されたマルチスタイルテキストや変数に、*newText*引数に渡されたテキストを挿入します。"
		},
		"ST SET TEXT": {
			"Syntax": "**ST SET TEXT** ( {* ;} *object* ; *newText* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: objectはオブジェクト名 (文字) <br/>省略時: objectは変数またはフィールド"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または <br/>フィールドまたは変数 (* 省略時)"
				],
				[
					"newText",
					"Text",
					"->",
					"挿入するテキスト"
				],
				[
					"startSel",
					"Integer",
					"->",
					"テキスト選択開始位置"
				],
				[
					"endSel",
					"Integer",
					"->",
					"テキスト選択終了位置"
				]
			],
			"Summary": "**ST SET TEXT** コマンドは*object*引数で指定されたスタイル付きのフィールドや変数に、 *newText*引数で渡されたテキストを挿入します。"
		},
		"START MONITORING ACTIVITY": {
			"Syntax": "**START MONITORING ACTIVITY** ( *duration* {; *source*} )",
			"Params": [
				[
					"duration",
					"Real",
					"->",
					"ログが開始される時間の長さ(秒単位)"
				],
				[
					"source",
					"Integer",
					"->",
					"オペレーションのソース"
				]
			],
			"Summary": "**START MONITORING ACTIVITY** コマンドは*duration* 引数で指定した時間を超えるオペレーションをメモリ内に記録します。"
		},
		"START SQL SERVER": {
			"Syntax": "**START SQL SERVER**",
			"Params": [],
			"Summary": "START SQL SERVERコマンドを使用して、実行中の4Dのアプリケーションで、統合されたSQLサーバを起動させます。"
		},
		"START TRANSACTION": {
			"Syntax": "**START TRANSACTION**",
			"Params": [],
			"Summary": "START TRANSACTION は、カレントプロセスでトランザクションを開始します。"
		},
		"Std deviation": {
			"Syntax": "**Std deviation** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"標準偏差を求めるデータ"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"seriesの標準偏差"
				]
			],
			"Summary": "**Std deviation**は、*series*の標準偏差を返します。"
		},
		"STOP MONITORING ACTIVITY": {
			"Syntax": "**STOP MONITORING ACTIVITY**",
			"Params": [],
			"Summary": "**STOP MONITORING ACTIVITY** コマンドは、START MONITORING ACTIVITY コマンドで開始されたアクティビティの記録を終了します。"
		},
		"STOP SQL SERVER": {
			"Syntax": "**STOP SQL SERVER**",
			"Params": [],
			"Summary": "STOP SQL SERVERコマンドは、実行済み4Dアプリケーションの統合SQLサーバを停止します。"
		},
		"Storage": {
			"Syntax": "**Storage**  : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"登録された共有オブジェクトおよび共有コレクションのカタログ"
				]
			],
			"Summary": "**Storage** メソッドはカレントのマシンあるいはコンポーネント上において、*Storage* オブジェクトに登録した共有オブジェクトまたは共有コレクションの一覧を返します。"
		},
		"STRING LIST TO ARRAY": {
			"Syntax": "**STRING LIST TO ARRAY** ( *resID* ; *strings* {; *resFile*} )",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"リソースID番号、または 'group'要素の'id'属性 (XLIFF)"
				],
				[
					"strings",
					"Text array",
					"<-",
					"STR#リソースから取り出した文字列、または 'group'要素から取り出した文字列 (XLIFF)"
				],
				[
					"resFile",
					"Time",
					"->",
					"リソースファイル参照番号、または 省略時、開かれているすべてのXLIFFファイル リソースファイル"
				]
			],
			"Summary": "**STRING LIST TO ARRAY**コマンドは以下の要素から構築される*strings*"
		},
		"Structure file": {
			"Syntax": "**Structure file** {( * )} : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"ホストデータベースのストラクチャファイルを返す"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"データベースストラクチャファイルのパス名"
				]
			],
			"Summary": "**Structure file** コマンドは、現在使用しているデータベースのストラクチャファイルのパス名を返します。"
		},
		"Substring": {
			"Syntax": "**Substring** ( *source* ; *firstChar* {; *numChars*} ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"一部を取り出す文字列"
				],
				[
					"firstChar",
					"Integer",
					"->",
					"最初の文字位置"
				],
				[
					"numChars",
					"Integer",
					"->",
					"取り出す文字列の長さ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"文字列の一部"
				]
			],
			"Summary": "**Substring** コマンドは、*firstChar*と*numChars*で指定した部分文字列を*source*から取り出して返します。"
		},
		"Subtotal": {
			"Syntax": "**Subtotal** ( *data* {; *pageBreak*} ) : Real",
			"Params": [
				[
					"data",
					"Field",
					"->",
					"小計を求める数値型のフィールドまたは変数"
				],
				[
					"pageBreak",
					"Integer",
					"->",
					"改ページを行うブレークレベル"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"データの小計"
				]
			],
			"Summary": "**Subtotal** は、現在または最後のブレークレベルにおける*data*の小計を返します。"
		},
		"Sum squares": {
			"Syntax": "**Sum squares** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"平方和を求めるデータ"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"seriesの平方和"
				]
			],
			"Summary": "**Sum squares**は、*series*の平方和を返します。"
		},
		"Sum": {
			"Syntax": "**Sum** ( *series* {; *attributePath*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"合計を求めるデータ"
				],
				[
					"attributePath",
					"Text",
					"->",
					"合計値を取得したい属性のパス"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"seriesの合計"
				]
			],
			"Summary": "**Sum**コマンドは、*series*の合計値を返します。"
		},
		"SUSPEND TRANSACTION": {
			"Syntax": "**SUSPEND TRANSACTION**",
			"Params": [],
			"Summary": "**SUSPEND TRANSACTION**コマンドはカレントプロセス内のカレントトランザクションを一時停止させます。"
		},
		"SVG EXPORT TO PICTURE": {
			"Syntax": "**SVG EXPORT TO PICTURE** ( *elementRef* ; *pictVar* {; *exportType*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"ルートXML要素参照"
				],
				[
					"pictVar",
					"Picture",
					"->",
					"XMLツリーを受け取るピクチャ変 (SVG ピクチャ)"
				],
				[
					"exportType",
					"Integer",
					"->",
					"0 = データソースを保持しない、1 = データソースをコピー(デフォルト)、2 = データソースを移動"
				]
			],
			"Summary": "SVG EXPORT TO PICTURE コマンドはXMLツリーのSVGフォーマットのピクチャを、*pictVar* 引数で指定したピクチャフィードや変数に保存するために使用できます。"
		},
		"SVG Find element ID by coordinates": {
			"Syntax": "**SVG Find element ID by coordinates** ( {* ;} *pictureObject* ; *x* ; *y* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、pictureObjectはオブジェクト名 (文字列) 省略時、pictureObjectはフィールドまたは変数"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"オブジェクト名 (* 指定時) または フィーウドまたは変数 (* 省略時)"
				],
				[
					"x",
					"Integer",
					"->",
					"X座標 (ピクセル)"
				],
				[
					"y",
					"Integer",
					"->",
					"Y座標 (ピクセル)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"X, Yの位置に見つかった要素のID"
				]
			],
			"Summary": "SVG Find element ID by coordinatesコマンドは、 *pictureObject*引数で指定されたSVGピクチャ内で、*x*, *y*座標により設定された場所で見つかるXML要素のID (\"id\" または \"xml:id\" 属性) を返します。"
		},
		"SVG Find element IDs by rect": {
			"Syntax": "**SVG Find element IDs by rect** ( {* ;} *pictureObject* ; *x* ; *y* ; *width* ; *height* ; *arrIDs* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: pictureObjectはオブジェクト名 (文字) <br/>省略時: pictureObjectは変数"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"オブジェクト名 (* 指定時) またはフィールドや変数 (* 省略時)"
				],
				[
					"x",
					"Integer",
					"->",
					"選択領域の左上の横座標"
				],
				[
					"y",
					"Integer",
					"->",
					"選択領域の左上の縦座標"
				],
				[
					"width",
					"Integer",
					"->",
					"選択領域の幅"
				],
				[
					"height",
					"Integer",
					"->",
					"選択領域の高さ"
				],
				[
					"arrIDs",
					"Text array",
					"<-",
					"バインドされた四角が選択領域に交差する要素のID"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 最低1つの要素が見つかった"
				]
			],
			"Summary": "SVG Find element IDs by rect コマンドは、 バインドされた四角が選択領域に交差するXML要素のID (\"id\"または\"xml:id\"属性) をテキストまたは文字配列の*arrIDs*配列に返します。"
		},
		"SVG GET ATTRIBUTE": {
			"Syntax": "**SVG GET ATTRIBUTE** ( {* ;} *pictureObject* ; element_ID ; *attribName* ; *attribValue* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: pictureObjectはオブジェクト名 (文字) <br/>省略時: pictureObjectは変数"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 (* 省略時)"
				],
				[
					"element_ID",
					"Text",
					"->",
					"属性値を取得する要素のID"
				],
				[
					"attribName",
					"Text",
					"->",
					"取得する属性"
				],
				[
					"attribValue",
					"Text, Integer",
					"<-",
					"現在の属性値"
				]
			],
			"Summary": "**SVG GET ATTRIBUTE**コマンドを使用して、オブジェクトまたはSVGピクチャの*attribName*属性の現在値を取得できます。"
		},
		"SVG SET ATTRIBUTE": {
			"Syntax": "**SVG SET ATTRIBUTE** ( {* ;} *pictureObject* ; element_ID ; *attrName* ; *attribValue* {; *attrName2* ; *attribValue2* ; ... ; *attrNameN* ; *attribValueN*} {; *})",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: pictureObjectはオブジェクト名 (文字) <br/>省略時: pictureObjectは変数"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"オブジェクト名 (* 指定時) または <br/>変数 またはフィールド(* 省略時)"
				],
				[
					"element_ID",
					"Text",
					"->",
					"1つ以上の属性を設定する要素のID"
				],
				[
					"attrName",
					"Text",
					"->",
					"指定する属性"
				],
				[
					"attribValue",
					"Text, Integer",
					"->",
					"属性の新しい値"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時 = SVG画像の内部DOMツリーを更新 (変数のみ)"
				]
			],
			"Summary": "**SVG SET ATTRIBUTE**コマンドは 表示されている画像のSVG描画ツリーまたは画像の内部DOMツリー中で、既存の属性の値を更新するために使用します。"
		},
		"SVG SHOW ELEMENT": {
			"Syntax": "**SVG SHOW ELEMENT** ( {* ;} *pictureObject* ; *id* {; *margin*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: pictureObjectはオブジェクト名 (文字) <br/>省略時: pictureObjectは変数"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"オブジェクト名 (* 指定時) または変数またはフィールド (* 省略時)"
				],
				[
					"id",
					"Text",
					"->",
					"表示する要素のID属性"
				],
				[
					"margin",
					"Integer",
					"->",
					"表示のマージン (デフォルトでピクセル単位)"
				]
			],
			"Summary": "SVG SHOW ELEMENT コマンドは、*id*引数で指定した\"id\"属性を持つ要素を表示するように、*pictureObject* SVGドキュメントを移動します。"
		},
		"System folder": {
			"Syntax": "**System folder** {( *type* )} : Text",
			"Params": [
				[
					"type",
					"Integer",
					"->",
					"システムフォルダのタイプ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"システムフォルダへのパス名"
				]
			],
			"Summary": "**System folder**コマンドは、アクティブなWindows またはmacOS システムフォルダにあるシステムフォルダへのパス名、あるいはアクティブなWindows またはmacOS システムフォルダ自体へのパス名を返します。"
		},
		"System info": {
			"Syntax": "**System info**  : Object",
			"Params": [
				[
					"戻り値",
					"Object",
					"<-",
					"システム情報"
				]
			],
			"Summary": "**System info** コマンドは、そのコマンドが実行されたOS とマシンのシステムのハードウェア/ソフトウェア両面の特性に関する情報を格納したオブジェクトを返します。"
		},
		"Table fragmentation": {
			"Syntax": "**Table fragmentation** ( *aTable* ) : Real",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"フラグメント率を取得するテーブル"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"フラグメンテーションの割合"
				]
			],
			"Summary": "Table fragmentation コマンドは *aTable*引数で指定されたテーブルの、物理的なレコードフラグメンテーションの割合 (%) を返します。"
		},
		"Table name": {
			"Syntax": "**Table name** ( *tableNum* ) : Text<br/>**Table name** ( *tablePtr* ) : Text",
			"Params": [
				[
					"tableNum &#124; tablePtr",
					"倍長整数, ポインター",
					"->",
					"テーブル番号、またはテーブルポインタ"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"テーブルの名前"
				]
			],
			"Summary": "Table nameコマンドは、*tableNum*または*tablePtr*で指定したテーブルの名前を返します。"
		},
		"Table": {
			"Syntax": "**Table** ( *tableNum* ) : Pointer<br/>**Table** ( *tablePtr* ) : Integer<br/>**Table** ( *fieldPtr* ) : Integer",
			"Params": [
				[
					"tableNum &#124; aPtr",
					"倍長整数, ポインター",
					"->",
					"テーブル番号、または テーブルポインタ、または フィールドポインタ"
				],
				[
					"戻り値",
					"Pointer, Integer",
					"<-",
					"テーブル番号を渡した場合テーブルポインタ テーブルポインタを渡した場合テーブル番号 フィールドポインタを渡した場合テーブル番号"
				]
			],
			"Summary": "Tableコマンドには、3つの形式があります。"
		},
		"Tan": {
			"Syntax": "**Tan** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"タンジェントを求めるラジアン値"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"タンジェント値"
				]
			],
			"Summary": "Tan は*number*の正接値を返します。"
		},
		"Temporary folder": {
			"Syntax": "**Temporary folder**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"テンポラリフォルダへのパス名"
				]
			],
			"Summary": "Temporary folderコマンドは、システムによって設定される現在のテンポラリフォルダへのパス名を返します。"
		},
		"Test path name": {
			"Syntax": "**Test path name** ( *pathname* ) : Integer",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"ディレクトリ、フォルダまたはドキュメントへのパス名"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"1=パス名は既存のドキュメントを表す 0=パス名は既存のディレクトリまたはフォルダを表す <0=無効のパス名、OSファイルマネージャエラーコード"
				]
			],
			"Summary": "**Test path name**コマンドは、引数*pathname*に渡された名前またはパス名を持つドキュメントまたはフォルダーが、ディスク上に存在するかどうかをチェックします。"
		},
		"Test semaphore": {
			"Syntax": "**Test semaphore** ( *semaphore* ) : Boolean",
			"Params": [
				[
					"semaphore",
					"Text",
					"->",
					"テストするセマフォ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True: セマフォが存在する, False: セマフォは存在しない"
				]
			],
			"Summary": "Test semaphore コマンドは、セマフォの存在をテストします。"
		},
		"TEXT TO ARRAY": {
			"Syntax": "**TEXT TO ARRAY** ( *varText* ; *arrText* ; *width* ; *fontName* ; *fontSize* {; *fontStyle* {; *}} )",
			"Params": [
				[
					"varText",
					"Text",
					"->",
					"分割する元のテキスト"
				],
				[
					"arrText",
					"Text array",
					"<-",
					"単語または行に分割されたテキストを受け取る配列"
				],
				[
					"width",
					"Integer",
					"->",
					"文字列の最大幅 (ピクセル)"
				],
				[
					"fontName",
					"Text",
					"->",
					"フォント名"
				],
				[
					"fontSize",
					"Integer",
					"->",
					"フォントサイズ"
				],
				[
					"fontStyle",
					"Integer",
					"->",
					"フォントスタイル"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時、テキストをマルチスタイルとして解釈する"
				]
			],
			"Summary": "**TEXT TO ARRAY**コマンドはテキスト変数をテキスト配列変換します。"
		},
		"TEXT TO BLOB": {
			"Syntax": "**TEXT TO BLOB** ( *text* ; *blob* {; *textFormat* {; offset}} )<br/>**TEXT TO BLOB** ( *text* ; *blob* {; *textFormat* {; *}} )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"BLOBに書き込むテキスト"
				],
				[
					"Blob",
					"Blob",
					"->",
					"テキストを受け取るBLOB"
				],
				[
					"textFormat",
					"Integer",
					"->",
					"テキストのフォーマットと文字セット"
				],
				[
					"offset &#124; *",
					"変数, 演算子",
					"<->",
					"BLOB内のオフセット (バイト単位) または値を追加する場合 *"
				],
				[
					"",
					"",
					"",
					"*でない場合、書き込み後の新しいオフセット"
				]
			],
			"Summary": "**TEXT TO BLOB**コマンドはテキスト値 *text*をBLOB *blob*に書き込みます。"
		},
		"TEXT TO DOCUMENT": {
			"Syntax": "**TEXT TO DOCUMENT** ( *fileName* ; *text* {; *charSet* {; *breakMode*}} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"ドキュメント名またはドキュメントへのパス名"
				],
				[
					"text",
					"Text",
					"->",
					"ドキュメントに保存するテキスト"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"文字コードの名前または数字"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"改行の処理モード"
				]
			],
			"Summary": "**TEXT TO DOCUMENT**コマンドは、 *text* を直接ディスク上のファイルへと書き込みます。"
		},
		"throw": {
			"Syntax": "**throw** ( *errorCode* {; *description*} ) \n        \n            *throw* {( *errorObj* )}",
			"Params": [
				[
					"errorCode",
					"Integer",
					"->",
					"エラーコードを表す倍調整数"
				],
				[
					"description",
					"Text",
					"->",
					"エラーの説明 (テキスト)"
				],
				[
					"throw {( errorObj )}"
				],
				[
					"引数",
					"型",
					"説明"
				],
				[
					"errorObj",
					"Object",
					"->",
					"エラー構築用のプロパティを格納するオブジェクト"
				]
			],
			"Summary": "**throw** コマンドは、エラーを作成します。"
		},
		"Tickcount": {
			"Syntax": "**Tickcount**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"マシンが起動されてからの 経過Tick数 (1/60秒)"
				]
			],
			"Summary": "Tickcount はマシンが起動されてから経過したTick (1/60秒) 数を返します。"
		},
		"Time string": {
			"Syntax": "**Time string** ( *seconds* ) : Text",
			"Params": [
				[
					"seconds",
					"Integer, Time",
					"->",
					"0時からの秒数"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"24時フォーマットの時間文字列"
				]
			],
			"Summary": "Time string コマンドは、*seconds*に渡した時間式の文字列を返します。"
		},
		"Time": {
			"Syntax": "**Time** ( *timeValue* ) : Time",
			"Params": [
				[
					"timeValue",
					"Text, Integer",
					"->",
					"時間を表す文字列または倍長整数"
				],
				[
					"戻り値",
					"Time",
					"<-",
					"時間"
				]
			],
			"Summary": "Time コマンドは、*timeValue* 引数で指定した時間に相当する時間表示を返します。"
		},
		"Timestamp": {
			"Syntax": "**Timestamp** : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"ISOフォーマットを使用してミリ秒付きで返された現在時刻"
				]
			],
			"Summary": "**Timestamp** はカレントのUTC時刻をISOフォーマット、ミリ秒付きで返します。"
		},
		"Tool bar height": {
			"Syntax": "**Tool bar height**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"ツールバーの高さ(ピクセル単位で表示) または、ツールバーが非表示の場合、 0"
				]
			],
			"Summary": "Tool bar height コマンドはカレントの表示されているツールバーの高さを、ピクセル単位で返します。"
		},
		"TRACE": {
			"Syntax": "**TRACE**",
			"Params": [],
			"Summary": "データベースの開発時に、**TRACE** コマンドを使用してメソッドをトレースすることができます。"
		},
		"Transaction level": {
			"Syntax": "**Transaction level**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"現在のトランザクションレベル (トランザクションが 開始されていない場合は0)"
				]
			],
			"Summary": "Transaction levelコマンドはプロセスの現在のトランザクションレベルを返します。"
		},
		"TRANSFORM PICTURE": {
			"Syntax": "**TRANSFORM PICTURE** ( *picture* ; *operator* {; *param1* {; *param2* {; *param3* {; *param4*}}}} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"変換するソースピクチャ"
				],
				[
					"<-",
					"変換した結果のピクチャ"
				],
				[
					"operator",
					"Integer",
					"->",
					"行う変換のタイプ"
				],
				[
					"param1",
					"Real",
					"->",
					"変換パラメタ"
				],
				[
					"param2",
					"Real",
					"->",
					"変換パラメタ"
				],
				[
					"param3",
					"Real",
					"->",
					"変換パラメタ"
				],
				[
					"param4",
					"Real",
					"->",
					"変換パラメタ"
				]
			],
			"Summary": "TRANSFORM PICTURE コマンドは、*picture*引数に渡したピクチャに、*operator*タイプの変換を適用するために使用します。"
		},
		"Trigger event": {
			"Syntax": "**Trigger event**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"0: トリガー実行サイクル外1: 新規レコード保存時2: 既存レコード保存時3: レコード削除時"
				]
			],
			"Summary": "**Trigger event**コマンドがトリガー内で呼び出されると、データベースイベントのタイプ、つまりそのトリガーが起動された理由を示す数値を返します。"
		},
		"Trigger level": {
			"Syntax": "**Trigger level**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"トリガの実行レベル (トリガの実行サイクル外であれば0)"
				]
			],
			"Summary": "Trigger levelコマンドはトリガの実行レベルを返します。"
		},
		"TRIGGER PROPERTIES": {
			"Syntax": "**TRIGGER PROPERTIES** ( *triggerLevel* ; *dbEvent* ; *tableNum* ; *recordNum* )",
			"Params": [
				[
					"triggerLevel",
					"Integer",
					"->",
					"トリガ実行サイクルレベル"
				],
				[
					"dbEvent",
					"Integer",
					"<-",
					"データベースイベント"
				],
				[
					"tableNum",
					"Integer",
					"<-",
					"影響を受けるテーブル番号"
				],
				[
					"recordNum",
					"Integer",
					"<-",
					"影響を受けるレコード番号"
				]
			],
			"Summary": "**TRIGGER PROPERTIES**コマンドは、*triggerLevel*に渡すトリガーの実行レベルに関する情報を返します。"
		},
		"True": {
			"Syntax": "**True**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True"
				]
			],
			"Summary": "Trueは、ブール値のTrueを返します。"
		},
		"Trunc": {
			"Syntax": "**Trunc** ( *number* ; *places* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"切り捨てる数値"
				],
				[
					"places",
					"Integer",
					"->",
					"切り捨てを行う位置"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"切り捨てられた数値"
				]
			],
			"Summary": "Truncは、指定された*places*の小数部を切り捨てた数値を返します。"
		},
		"TRUNCATE TABLE": {
			"Syntax": "**TRUNCATE TABLE** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"すべてのレコードが削除されるテーブル 省略時はデフォルトテーブル"
				]
			],
			"Summary": "TRUNCATE TABLE コマンドは*aTable*のすべてのレコードを素早く削除します。"
		},
		"Type": {
			"Syntax": "**Type** ( *fieldVar* ) : Integer",
			"Params": [
				[
					"fieldVar",
					"Field, Variable",
					"->",
					"テストするフィールドまたは変数"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"データタイプ番号"
				]
			],
			"Summary": "Type コマンドは、*fieldVar* 引数に渡したフィールドまたは変数の型を示す数値を返します。"
		},
		"Undefined": {
			"Syntax": "**Undefined** ( *expression* ) : Boolean",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"テストしたい結果の値を返す式"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 変数は現在未定義である False = 変数は現在定義されている"
				]
			],
			"Summary": "Undefined コマンドは、*expression* の評価の結果が未定義の値である場合にはTrueを返し、それ以外の場合にはFalseを返します。"
		},
		"UNION": {
			"Syntax": "**UNION** ( *set1* ; *set2* ; *resultSet* )",
			"Params": [
				[
					"set1",
					"Text",
					"->",
					"最初のセット"
				],
				[
					"set2",
					"Text",
					"->",
					"2番目のセット"
				],
				[
					"resultSet",
					"Text",
					"->",
					"結果のセット<br/>Resulting set"
				]
			],
			"Summary": "コマンドは、*set1*と*set2*のすべてのレコードを含むセットを作成します。"
		},
		"UNLOAD RECORD": {
			"Syntax": "**UNLOAD RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"レコードをアンロードするテーブル, または 省略時、デフォルトテーブル"
				]
			],
			"Summary": "UNLOAD RECORDは、*aTable*のカレントレコードをアンロードします。"
		},
		"UNREGISTER CLIENT": {
			"Syntax": "**UNREGISTER CLIENT**",
			"Params": [],
			"Summary": "UNREGISTER CLIENT コマンドは、クライアントステーションの登録を解除します。"
		},
		"Uppercase": {
			"Syntax": "**Uppercase** ( *aString* {; *} ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"英大文字にする文字列"
				],
				[
					"*",
					"演算子",
					"->",
					"渡されると、アクセント符号を保持"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"英大文字に変換した文字列"
				]
			],
			"Summary": "Uppercaseは、*aString*を取りアルファベット文字列をすべて英大文字に変換して返します。"
		},
		"USE CHARACTER SET": {
			"Syntax": "**USE CHARACTER SET** ( map | * {; *mapInOut*} )",
			"Params": [
				[
					"map &#124; *",
					"文字, 演算子",
					"->",
					"使用する文字セット名 (Unicodeモード), または 使用するASCIIマップドキュメント名 (ASCIIモード), または * の場合、デフォルトの文字セット/ASCIIマップにリセット"
				],
				[
					"mapInOut",
					"Integer",
					"->",
					"0 = 出力マップ 1 = 入力マップ 省略した場合、出力マップ"
				]
			],
			"Summary": "**USE CHARACTER SET**は、データベースとドキュメントまたはシリアルポート間のデータ交換の際、4Dが 使用する文字セットを変更するために使用できます。"
		},
		"USE NAMED SELECTION": {
			"Syntax": "**USE NAMED SELECTION** ( *name* )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"使用する命名セレクション名"
				]
			],
			"Summary": "USE NAMED SELECTION は、命名セレクション*name*が属するテーブルのカレントセレクションを命名セレクションを使用して置き換えます。"
		},
		"USE SET": {
			"Syntax": "**USE SET** ( *set* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"使用するセットの名前"
				]
			],
			"Summary": "USE SETは、*set*内のレコードをそのセットの属するテーブルのカレントセレクションにします。"
		},
		"User in group": {
			"Syntax": "**User in group** ( *user* ; *group* ) : Boolean",
			"Params": [
				[
					"user",
					"Text",
					"->",
					"ユーザ名"
				],
				[
					"group",
					"Text",
					"->",
					"グループ名"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"TRUE = ユーザがグループに存在する場合 FALSE = ユーザがグループに存在しない場合"
				]
			],
			"Summary": "User in group コマンドは*user* が*group* に存在する場合、Trueを返します。"
		},
		"USERS TO BLOB": {
			"Syntax": "**USERS TO BLOB** ( *users* )",
			"Params": [
				[
					"users",
					"Blob",
					"->",
					"ユーザーが格納されたBLOB"
				],
				[
					"<-",
					"暗号化されたユーザーアカウント"
				]
			],
			"Summary": "**互換性に関する注記:* このコマンドはバイナリデータベースでのみ機能します。"
		},
		"Validate password": {
			"Syntax": "**Validate password** ( *userID* ; *password* {; *digest*} ) : Boolean",
			"Params": [
				[
					"userID",
					"Integer, Text",
					"->",
					"ユニークなユーザID"
				],
				[
					"password",
					"Text",
					"->",
					"暗号化されていないパスワード"
				],
				[
					"digest",
					"Boolean",
					"->",
					"Digest password = True, <br/>Plain-text password (default) = False"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = 有効なパスワード False = 無効なパスワード"
				]
			],
			"Summary": "Validate password コマンドは引数 *password* に渡された文字列が、引数 *userID* に渡されたID番号または名前を持つユーザアカウントのパスワードである場合、Trueを返します。"
		},
		"VALIDATE TRANSACTION": {
			"Syntax": "**VALIDATE TRANSACTION**",
			"Params": [],
			"Summary": "VALIDATE TRANSACTIONは、カレントプロセス中、START TRANSACTIONで開始した対応するレベルのトランザクションを受け入れます。"
		},
		"Value type": {
			"Syntax": "**Value type** ( *expression* ) : Integer",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"テストしたい結果を返す式"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"データ型の数字"
				]
			],
			"Summary": "Value type コマンドは*expression* 引数に渡した式の評価の結果の値の型を返します。"
		},
		"VARIABLE TO BLOB": {
			"Syntax": "**VARIABLE TO BLOB** ( *variable* ; *blob* {; offset } )<br/>**VARIABLE TO BLOB** ( *variable* ; *blob* {; *} )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"BLOBに格納する変数"
				],
				[
					"Blob",
					"Blob",
					"->",
					"変数を受け取るBLOB"
				],
				[
					"offset &#124; *",
					"変数, 演算子",
					"<->",
					"BLOB内のオフセット (バイト単位) または値を追加する場合 *"
				],
				[
					"",
					"",
					"",
					"*でない場合、書き込み後の新しいオフセット"
				]
			],
			"Summary": "**VARIABLE TO BLOB**コマンドは、*variable*を*blob*に格納します。"
		},
		"VARIABLE TO VARIABLE": {
			"Syntax": "**VARIABLE TO VARIABLE** ( *process* ; *dstVar* ; *srcVar* {; *dstVar2* ; *srcVar2* ; ... ; *dstVarN* ; *srcVarN*} )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"送り先プロセス番号"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"送り先変数"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"ソース変数"
				]
			],
			"Summary": "VARIABLE TO VARIABLEコマンドは、引数*srcVar1* *srcVar2*に渡す値を、*process*に渡す番号を持つ送り先プロセスの*dstVar* (*dstVar2*等) プロセス変数に書き込みます。"
		},
		"Variance": {
			"Syntax": "**Variance** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"分散を求めるデータ"
				],
				[
					"戻り値",
					"Real",
					"<-",
					"seriesの分散"
				]
			],
			"Summary": "**Variance**は、*series*の分散を返します。"
		},
		"VERIFY CURRENT DATA FILE": {
			"Syntax": "**VERIFY CURRENT DATA FILE** {( *objects* ; *options* ; *method* {; *tablesArray* {; *fieldsArray*}} )}",
			"Params": [
				[
					"objects",
					"Integer",
					"->",
					"検証するオブジェクト"
				],
				[
					"options",
					"Integer",
					"->",
					"検証オプション"
				],
				[
					"method",
					"Text",
					"->",
					"4Dコールバックメソッド名"
				],
				[
					"tablesArray",
					"Integer array",
					"->",
					"検証するテーブル番号"
				],
				[
					"fieldsArray",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"検証するインデックス番号"
				]
			],
			"Summary": "VERIFY CURRENT DATA FILEコマンドは、4Dが現在開いているデータファイル中にあるオブジェクトの、構造的な検証を行います。"
		},
		"VERIFY DATA FILE": {
			"Syntax": "**VERIFY DATA FILE** ( *structurePath* ; *dataPath* ; *objects* ; *options* ; *method* {; *tablesArray* {; *fieldsArray*}} )",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"検証する4Dストラクチャファイルのパス名"
				],
				[
					"dataPath",
					"Text",
					"->",
					"検証する4Dデータファイルのパス名"
				],
				[
					"objects",
					"Integer",
					"->",
					"検証するオブジェクト"
				],
				[
					"options",
					"Integer",
					"->",
					"検証オプション"
				],
				[
					"method",
					"Text",
					"->",
					"4Dコールバックメソッド名"
				],
				[
					"tablesArray",
					"Integer array",
					"->",
					"検証するテーブル番号"
				],
				[
					"fieldsArray",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"検証するインデックス番号"
				]
			],
			"Summary": "**VERIFY DATA FILE**コマンドは、*structurePath*と*dataPath*で指定したデータファイル中にあるオブジェクトの構造的な検証を行います。"
		},
		"Verify password hash": {
			"Syntax": "**Verify password hash** ( *password* ; *hash* ) : Boolean",
			"Params": [
				[
					"password",
					"Text",
					"->",
					"ユーザーのパスワード。最初の72文字のみ使用。"
				],
				[
					"hash",
					"Text",
					"->",
					"パスワードのハッシュ"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"パスワードとハッシュが合致する場合にはTRUE、それ以外の場合にはFALSE。"
				]
			],
			"Summary": "**Verify password hash** ファンクションは、*hash* 引数で渡されたハッシュ値が、*password* 引数のパスワードと合致するかどうかを検証します。"
		},
		"Version type": {
			"Syntax": "**Version type**  : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"バージョンのタイプに関する情報(ビットフィールド形式)"
				]
			],
			"Summary": "**Version type** コマンドは、現在実行している4Dや4D Server環境のバージョンタイプを示す数値を返します。"
		},
		"VOLUME ATTRIBUTES": {
			"Syntax": "**VOLUME ATTRIBUTES** ( *volume* ; *size* ; *used* ; *free* )",
			"Params": [
				[
					"volume",
					"Text",
					"->",
					"ボリュームの名前"
				],
				[
					"size",
					"Real",
					"<-",
					"ボリュームのサイズ(バイト単位)"
				],
				[
					"used",
					"Real",
					"<-",
					"使用サイズ(バイト単位)"
				],
				[
					"free",
					"Real",
					"<-",
					"空きサイズ(バイト単位)"
				]
			],
			"Summary": "VOLUME ATTRIBUTESコマンドは、引数*volume*に渡した名前を持つボリュームのサイズ、使用サイズおよび空きサイズをバイト単位で表わして返します。"
		},
		"VOLUME LIST": {
			"Syntax": "**VOLUME LIST** ( *volumes* )",
			"Params": [
				[
					"volumes",
					"Text array",
					"<-",
					"現在マウントされているボリュームの名前"
				]
			],
			"Summary": "**VOLUME LIST**コマンドは、テキスト配列の*volumes* に、現在コンピュータに定義 (Windowsの場合) またはマウント (Mac OSの場合) されているボリュームの名前を代入します。"
		},
		"WA Back URL available": {
			"Syntax": "**WA Back URL available** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"開かれた一連のURLで、前のURLが有効ならTrue、 そうでなければFalse"
				]
			],
			"Summary": "WA Back URL available コマンドは、*\\** と *object* 引数で指定したWebエリアに開かれた一連のURLで、前のURLが利用できるかどうかを知るために使用します。"
		},
		"WA Create URL history menu": {
			"Syntax": "**WA Create URL history menu** ( {* ;} *object* {; *direction*} ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"direction",
					"Integer",
					"->",
					"0 または省略=戻るURLのリスト, 1=進むURLリスト"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"メニュー参照"
				]
			],
			"Summary": "**WA Create URL history menu** コマンドは、*\\** と *object* で指定したWebエリアがセッション中に訪問したURL間をナビゲートするメニューを作成します。"
		},
		"WA Evaluate JavaScript": {
			"Syntax": "**WA Evaluate JavaScript** ( {* ;} *object* ; *jsCode* {; *type*} )  : any",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"jsCode",
					"Text",
					"->",
					"JavaScriptコード"
				],
				[
					"type",
					"Integer",
					"->",
					"戻り値に指定する型"
				],
				[
					"戻り値",
					"Object, Text, Pointer, Real, Date, Time",
					"<-",
					"実行結果"
				]
			],
			"Summary": "WA Evaluate JavaScript コマンドは、*\\** と *object* 引数で指定したWebエリアで、*jsCode*に渡されたJavaScriptコードを実行し、結果を戻します。"
		},
		"WA EXECUTE JAVASCRIPT FUNCTION": {
			"Syntax": "**WA EXECUTE JAVASCRIPT FUNCTION** ( {* ;} *object* ; *jsFunction* ; *result* {; *param*}{; *param2* ; ... ; *paramN*} )<br/>**WA EXECUTE JAVASCRIPT FUNCTION** ( {* ;} *object* ; *jsFunction* ; * {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"jsFunction",
					"Text",
					"->",
					"実行するJavaScript関数名"
				],
				[
					"result&#124;*",
					"変数",
					"->",
					"または関数が結果を返さない場合 *"
				],
				[
					"<-",
					"関数結果 (返される場合)"
				],
				[
					"param",
					"Text, Number, Date, Object, Collection",
					"->",
					"関数に渡す引数"
				]
			],
			"Summary": "WA EXECUTE JAVASCRIPT FUNCTION コマンドは、*\\** と *object* で指定したWebエリアで、*jsFunction*に渡したJavaScript関数を実行し、*result* 引数に結果を返します (オプション)。"
		},
		"WA Forward URL available": {
			"Syntax": "**WA Forward URL available** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"開かれた一連のURLで、次のURLが有効ならTrue、 そうでなければFalse"
				]
			],
			"Summary": "WA Forward URL available コマンドは、*\\** と *object* 引数で指定したWebエリアに開かれた一連のURLで、次のURLが利用できるかどうかを知るために使用します。"
		},
		"WA Get current URL": {
			"Syntax": "**WA Get current URL** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"現在WebエリアにロードされているURL"
				]
			],
			"Summary": "WA Get current URL コマンドは、*\\** と *object* 引数で指定したWebエリアに現在表示されているページのURLアドレスを返します。"
		},
		"WA GET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA GET EXTERNAL LINKS FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"filtersArr",
					"Text array",
					"<-",
					"フィルタ配列"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"<-",
					"許可-拒否配列"
				]
			],
			"Summary": "WA GET EXTERNAL LINKS FILTERS コマンドは*filtersArr* と *allowDenyArr*配列に、*\\** と *object* 引数で指定したWebエリアの外部リンクフィルタを返します。"
		},
		"WA Get last filtered URL": {
			"Syntax": "**WA Get last filtered URL** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"最後にフィルタされたURL"
				]
			],
			"Summary": "WA Get last filtered URL コマンドは、*\\** と *object* 引数で指定したWebエリアで、最後にフィルタされたURLを返します。"
		},
		"WA GET LAST URL ERROR": {
			"Syntax": "**WA GET LAST URL ERROR** ( {* ;} *object* ; *url* ; *description* ; *errorCode* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"url",
					"Text",
					"<-",
					"エラー元のURL"
				],
				[
					"description",
					"Text",
					"<-",
					"エラーの説明 (macOS)"
				],
				[
					"errorCode",
					"Integer",
					"<-",
					"エラーコード"
				]
			],
			"Summary": "WA GET LAST URL ERROR コマンドを使用して、*\\** と *object* 引数で指定したWebエリアで発生した最後のエラーに関する情報のいくつかの項目を取得できます。"
		},
		"WA Get page content": {
			"Syntax": "**WA Get page content** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"HTMソースコード"
				]
			],
			"Summary": "WA Get page content コマンドは、*\\** と *object* 引数で指定したWebエリアの現在のページまたは表示されているページのHTMLコードを返します。"
		},
		"WA Get page title": {
			"Syntax": "**WA Get page title** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"現在のページのタイトル"
				]
			],
			"Summary": "WA Get page title コマンドは、*\\** と *object* 引数で指定したWebエリアの現在のページまたは表示されているページのタイトルを返します。"
		},
		"WA GET PREFERENCE": {
			"Syntax": "**WA GET PREFERENCE** ( {* ;} *object* ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定されると、オブジェクトがオブジェクト名 (文字列) 省略されると、オブジェクトは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクトの名前 (引数 * が指定されると) または、変数 (引数 * が省略されると)"
				],
				[
					"selector",
					"Integer",
					"->",
					"取得する環境設定"
				],
				[
					"value",
					"Variable",
					"<-",
					"環境設定のカレント値"
				]
			],
			"Summary": "WA GET PREFERENCE コマンドを使用して、*\\** と *object* によって指定されたWebエリアの環境設定の現在値を取得します。"
		},
		"WA GET URL FILTERS": {
			"Syntax": "**WA GET URL FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"filtersArr",
					"Text array",
					"<-",
					"フィルタ配列"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"<-",
					"許可-拒否配列"
				]
			],
			"Summary": "WA GET URL FILTERS コマンドは*filtersArr* と *allowDenyArr*配列に、*\\** と *object* 引数で指定したWebエリアで有効なフィルタを返します。"
		},
		"WA GET URL HISTORY": {
			"Syntax": "**WA GET URL HISTORY** ( {* ;} *object* ; *urlsArr* {; *direction* {; *titlesArr*}} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"urlsArr",
					"Text array",
					"<-",
					"訪問したURLの配列"
				],
				[
					"direction",
					"Integer",
					"->",
					"0または省略=前のURL配列, 1=次のURL配列"
				],
				[
					"titlesArr",
					"Text array",
					"<-",
					"ウィンドウタイトルの配列"
				]
			],
			"Summary": "WA GET URL HISTORY コマンドは、*\\** と *object* 引数で指定したWebエリアのセッション中に訪問したURLを含む1つまたは2つの配列を返します。"
		},
		"WA OPEN BACK URL": {
			"Syntax": "**WA OPEN BACK URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "WA OPEN BACK URL コマンドは、*\\** と *object* 引数で指定したWebエリアに開かれた一連のURL中、現在のURLのひとつ前のURLをロードします。"
		},
		"WA OPEN FORWARD URL": {
			"Syntax": "**WA OPEN FORWARD URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "WA OPEN FORWARD URL コマンドは、*\\** と *object* 引数で指定したWebエリアに開かれた一連のURL中、現在のURLのひとつ次のURLをロードします。"
		},
		"WA OPEN URL": {
			"Syntax": "**WA OPEN URL** ( {* ;} *object* ; *url* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"url",
					"Text",
					"->",
					"WebエリアにロードするURL"
				]
			],
			"Summary": "**WA OPEN URL**コマンドは、*url* 引数に渡したURLを、*\\** と *object* 引数で指定したWebエリアにロードします。"
		},
		"WA OPEN WEB INSPECTOR": {
			"Syntax": "**WA OPEN WEB INSPECTOR** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、objectはオブジェクト名 (文字列) 省略時、objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "**WA OPEN WEB INSPECTOR** コマンドは、 *\\** および *object* 引数で指定されたWeb エリアにおいてWeb インスペクターを開きます。"
		},
		"WA REFRESH CURRENT URL": {
			"Syntax": "**WA REFRESH CURRENT URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "WA REFRESH CURRENT URL コマンドは、*\\** と *object* 引数で指定したWebエリアに現在表示されているURLを再読み込みします。"
		},
		"WA Run offscreen area": {
			"Syntax": "**WA Run offscreen area** ( *parameters* ) : any",
			"Params": [
				[
					"parameters",
					"Object",
					"->",
					"Web エリアの属性を格納したオブジェクト"
				],
				[
					"戻り値",
					"any",
					"<-",
					"コールバックメソッドによって返された値"
				]
			],
			"Summary": "**WA Run offscreen area** コマンドは、メモリ内にWeb エリアを作成します。"
		},
		"WA SET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA SET EXTERNAL LINKS FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"filtersArr",
					"Text array",
					"->",
					"フィルタ配列"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"->",
					"許可-拒否配列"
				]
			],
			"Summary": "WA SET EXTERNAL LINKS FILTERS コマンドを使用して、*\\** と *object* 引数で指定したWebエリアの外部リンクフィルタを設定できます。"
		},
		"WA SET PAGE CONTENT": {
			"Syntax": "**WA SET PAGE CONTENT** ( {* ;} *object* ; *content* ; *baseURL* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"content",
					"Text",
					"->",
					"HTMLソースコード"
				],
				[
					"baseURL",
					"Text",
					"->",
					"相対参照に使用するURL (macOS)"
				]
			],
			"Summary": "この歴史的なコマンドは現実的にはもはや実用的とは言えません。"
		},
		"WA SET PREFERENCE": {
			"Syntax": "**WA SET PREFERENCE** ( {* ;} *object* ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定した場合、オブジェクトがオブジェクトの名前 (文字列) 省略した場合、オブジェクトは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクトの名前 ( * を指定した場合) または、変数 ( * を省略した場合)"
				],
				[
					"selector",
					"Integer",
					"->",
					"修正される環境設定"
				],
				[
					"value",
					"Boolean",
					"->",
					"環境設定の値 (True = 許可,  False = 不許可)"
				]
			],
			"Summary": "WA SET PREFERENCE コマンドを使用して、引数 *\\** と *object* によって指定されたWebエリアに対して、さまざまな環境設定を行います。"
		},
		"WA SET URL FILTERS": {
			"Syntax": "**WA SET URL FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				],
				[
					"filtersArr",
					"Text array",
					"->",
					"フィルタ配列"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"->",
					"許可-拒否配列"
				]
			],
			"Summary": "WA SET URL FILTERS コマンドは、*\\** と *object* 引数で指定したWebエリアで、1 つ以上のフィルタを設定するために使用します。"
		},
		"WA STOP LOADING URL": {
			"Syntax": "**WA STOP LOADING URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "WA STOP LOADING URL コマンドは、*\\** と *object* 引数で指定したWebエリアの現在のURL のリソース読み込みを停止します。"
		},
		"WA ZOOM IN": {
			"Syntax": "**WA ZOOM IN** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "WA ZOOM IN コマンドは、*\\** と *object* 引数で指定したWebエリアに表示されているテキストのサイズを大きくします。"
		},
		"WA ZOOM OUT": {
			"Syntax": "**WA ZOOM OUT** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時, objectはオブジェクト名 (文字列) 省略時, objectは変数"
				],
				[
					"object",
					"any",
					"->",
					"オブジェクト名 (* 指定時) または 変数 (* 省略時)"
				]
			],
			"Summary": "WA ZOOM OUT コマンドは、*\\** と *object* 引数で指定したWebエリアに表示されているテキストのサイズを小さくします。"
		},
		"WEB Get body part count": {
			"Syntax": "**WEB Get body part count** : Integer",
			"Params": [
				[
					"戻り値",
					"Integer",
					"<-",
					"ボディ中のパート数"
				]
			],
			"Summary": "**WEB Get body part count**コマンドは受信したボディに含まれるパートの数を返します。"
		},
		"WEB GET BODY PART": {
			"Syntax": "**WEB GET BODY PART** ( *part* ; *contents* ; *name* ; *mimeType* ; *fileName* )",
			"Params": [
				[
					"part",
					"Integer",
					"->",
					"パート番号"
				],
				[
					"contents",
					"Blob, Text",
					"<-",
					"パートを受け取る変数"
				],
				[
					"name",
					"Text",
					"<-",
					"input要素のname属性値"
				],
				[
					"mimeType",
					"Text",
					"<-",
					"ファイルのMIMEタイプ"
				],
				[
					"fileName",
					"Text",
					"<-",
					"送信されたファイルの名前"
				]
			],
			"Summary": "**WEB GET BODY PART**コマンドはWebプロセスのコンテキストで使用され、マルチパートリクエストのボディ部を解析します。"
		},
		"WEB Get current session ID": {
			"Syntax": "**WEB Get current session ID**  : Text",
			"Params": [
				[
					"戻り値",
					"Text",
					"<-",
					"セッションUUID"
				]
			],
			"Summary": "**WEB Get current session ID**コマンドはカレントのWebリクエストのセッションIDを返します。"
		},
		"WEB GET HTTP BODY": {
			"Syntax": "**WEB GET HTTP BODY** ( *body* )",
			"Params": [
				[
					"body",
					"Blob, Text",
					"<-",
					"HTTPリクエストのボディ"
				]
			],
			"Summary": "**WEB GET HTTP BODY**コマンドは、 処理中のHTTPリクエストのボディを返します。"
		},
		"WEB GET HTTP HEADER": {
			"Syntax": "**WEB GET HTTP HEADER** ( *header* )<br/>**WEB GET HTTP HEADER** ( *fieldArray* ; *valueArray* )",
			"Params": [
				[
					"header&#124;fieldArray",
					"テキスト, テキスト配列",
					"<-",
					"リクエストHTTPヘッダまたはHTTPヘッダフィールド"
				],
				[
					"valueArray",
					"Text array",
					"<-",
					"HTTPヘッダフィールドの内容"
				]
			],
			"Summary": "**WEB GET HTTP HEADER**コマンドは、 現在処理されているリクエストのHTTPヘッダーを含む2つの配列、または文字列のいずれかを返します。"
		},
		"WEB GET OPTION": {
			"Syntax": "**WEB GET OPTION** ( *selector* ; *value* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"取得するオプションのコード"
				],
				[
					"value",
					"Integer, Text, Collection",
					"<-",
					"オプションの値"
				]
			],
			"Summary": "**WEB GET OPTION** コマンドは4D Webサーバー処理に関するオプションの現在の設定値を取得するために使用します。"
		},
		"WEB Get server info": {
			"Syntax": "**WEB Get server info** {( *withCache* )} : Object",
			"Params": [
				[
					"withCache",
					"Boolean",
					"->",
					"Webキャッシュ詳細を返すためにはTrue、それ以外の場合(デフォルト)ではキャッシュ詳細は返されない"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"実行中のWebサーバーとSOAPサーバーの情報"
				]
			],
			"Summary": "**WEB Get server info** コマンドは、4D Web サーバーのカレントのセッションの詳細なランタイム情報を格納したオブジェクトを返します。"
		},
		"WEB GET STATISTICS": {
			"Syntax": "**WEB GET STATISTICS** ( *pages* ; *hits* ; *usage* )",
			"Params": [
				[
					"pages",
					"Text array",
					"<-",
					"最も閲覧されるページの名前"
				],
				[
					"hits",
					"Integer array",
					"<-",
					"各ページのヒット数"
				],
				[
					"usage",
					"Integer",
					"<-",
					"キャッシュの使用率"
				]
			],
			"Summary": "**WEB GET STATISTICS**コマンドを使用すると、Webサーバのキャッシュに読み込まれた最も閲覧されたページに関する情報を取得 することができます。"
		},
		"WEB GET VARIABLES": {
			"Syntax": "**WEB GET VARIABLES** ( *nameArray* ; *valueArray* )",
			"Params": [
				[
					"nameArray",
					"Text array",
					"<-",
					"Webフォームの変数の名前"
				],
				[
					"valueArray",
					"Text array",
					"<-",
					"Webフォームの変数の値"
				]
			],
			"Summary": "**WEB GET VARIABLES**コマンドは、サブミットされたWebフォームにある変数の名前と値をテキスト配列 *nameArray*と*valueArray* に代入します。"
		},
		"WEB Is secured connection": {
			"Syntax": "**WEB Is secured connection**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"True = Web接続が保護されている場合 False = Web接続が保護されていない場合"
				]
			],
			"Summary": "**WEB Is secured connection**コマンドは、4DのWebサーバ接続が (リクエストが\"http:\"の代わりに\"https:\"で始まる) TLS/SSLを通して保護モードで実行されたかを示すブール値を返します 。"
		},
		"WEB Is server running": {
			"Syntax": "**WEB Is server running** : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"Webサーバーが動作中であればTrue、それ以外の場合にはFalse"
				]
			],
			"Summary": "新しい**WEB Is server running** コマンド(\"*Webサーバ*\"テーマ)は、4DがビルトインされているWebサーバーが動作中である場合にはTrueを、Webサーバーがオフである場合にはFalseを返します。"
		},
		"WEB LEGACY CLOSE SESSION": {
			"Syntax": "**WEB LEGACY CLOSE SESSION** ( *sessionID* )",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"セッションUUID"
				]
			],
			"Summary": "このコマンドは、4D v18 R6 以前のバージョンから変換されたデータベースでのみ利用可能な**旧式Web セッション**でのみ使用することが可能です。"
		},
		"WEB LEGACY GET SESSION EXPIRATION": {
			"Syntax": "**WEB LEGACY GET SESSION EXPIRATION** ( *sessionID* ; *expDate* ; *expTime* )",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"セッションUUID"
				],
				[
					"expDate",
					"Date",
					"<-",
					"cookie有効期限日"
				],
				[
					"expTime",
					"Time",
					"<-",
					"cookie有効期限時刻"
				]
			],
			"Summary": "このコマンドは、4D v18 R6 以前のバージョンから変換されたデータベースでのみ利用可能な**旧式Web セッション**でのみ使用することが可能です。"
		},
		"WEB SEND BLOB": {
			"Syntax": "**WEB SEND BLOB** ( *BLOB* ; *type* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"ブラウザへ送るBLOB"
				],
				[
					"type",
					"Text",
					"->",
					"BLOBのデータタイプ"
				]
			],
			"Summary": "**WEB SEND BLOB**コマンドを使用して *blob* をブラウザへ送ります。"
		},
		"WEB SEND FILE": {
			"Syntax": "**WEB SEND FILE** ( *htmlFile* )",
			"Params": [
				[
					"htmlFile",
					"Text",
					"->",
					"HTMLファイルへのHTMLパス名 または、WEB SEND FILEを終了させる場合空の文字列"
				]
			],
			"Summary": "**WEB SEND FILE**コマンドは*htmlFile*に渡すパス名を持つHTMLページやWebファイルをWebブラウザへ送ります。"
		},
		"WEB SEND HTTP REDIRECT": {
			"Syntax": "**WEB SEND HTTP REDIRECT** ( *url* {; *} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"新しいURL"
				],
				[
					"*",
					"演算子",
					"->",
					"指定されている場合 = URLは翻訳されない 省略されている場合 = URLは翻訳される"
				]
			],
			"Summary": "**WEB SEND HTTP REDIRECT**コマンドを使用すると、 URLをほかのURLへ転送することができます。"
		},
		"WEB SEND RAW DATA": {
			"Syntax": "**WEB SEND RAW DATA** ( *data* {; *} )",
			"Params": [
				[
					"data",
					"Blob",
					"->",
					"送るHTTPデータ"
				],
				[
					"*",
					"演算子",
					"->",
					"チャンクして送る"
				]
			],
			"Summary": "**WEB SEND RAW DATA**コマンドを使用すると、4D Webサーバはチャンクが可能な\"生\"HTTPデータを送ります。"
		},
		"WEB SEND TEXT": {
			"Syntax": "**WEB SEND TEXT** ( *htmlText* {; *type*} )",
			"Params": [
				[
					"htmlText",
					"Text",
					"->",
					"Webブラウザへ送られるHTMLテキストフィールド または変数"
				],
				[
					"type",
					"Text",
					"->",
					"MIME型"
				]
			],
			"Summary": "**WEB SEND TEXT**コマンドを使用して、 HTMLにフォーマットされたテキストデータを直接送ります。"
		},
		"WEB SERVICE AUTHENTICATE": {
			"Syntax": "**WEB SERVICE AUTHENTICATE** ( *name* ; *password* {; *authMethod*} {; *} )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"ユーザの名前"
				],
				[
					"password",
					"Text",
					"->",
					"ユーザのパスワード"
				],
				[
					"authMethod",
					"Integer",
					"->",
					"認証メソッド 0または省略された場合 = 指定されない、1 = BASIC、2 = DIGEST"
				],
				[
					"*",
					"演算子",
					"->",
					"渡された場合、プロキシによる認証"
				]
			],
			"Summary": "**WEB SERVICE AUTHENTICATE**コマンドは、クライアントアプリケーションの認証を必要とするWeb サービスの使用を可能にします (シンプルな認証) 。"
		},
		"WEB SERVICE CALL": {
			"Syntax": "**WEB SERVICE CALL** ( *accessURL* ; *soapAction* ; *methodName* ; *nameSpace* {; *complexType* {; *}} )",
			"Params": [
				[
					"accessURL",
					"Text",
					"->",
					"WebサービスへのアクセスURL"
				],
				[
					"soapAction",
					"Text",
					"->",
					"SOAPActionフィールドの内容"
				],
				[
					"methodName",
					"Text",
					"->",
					"メソッドの名前"
				],
				[
					"nameSpace",
					"Text",
					"->",
					"名前空間"
				],
				[
					"complexType",
					"Integer",
					"->",
					"複合タイプの設定 (省略された場合、シンプルタイプ)"
				],
				[
					"*",
					"演算子",
					"->",
					"接続を終了しない"
				]
			],
			"Summary": "**WEB SERVICE CALL**コマンドは、HTTPリクエストを送ることでWebサービスを呼び出すために使用します。"
		},
		"WEB SERVICE Get info": {
			"Syntax": "**WEB SERVICE Get info** ( *infoType* ) : Text",
			"Params": [
				[
					"infoType",
					"Integer",
					"->",
					"取得する情報"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"最新のSOAPエラーに関する情報"
				]
			],
			"Summary": "**WEB SERVICE Get info**コマンドは、リモートのWebサービスに送信された最新のSOAPリクエストの 実行中に生成されたエラーについての情報を返します。"
		},
		"WEB SERVICE GET RESULT": {
			"Syntax": "**WEB SERVICE GET RESULT** ( *returnValue* {; *returnName* {; *}} )",
			"Params": [
				[
					"returnValue",
					"Variable",
					"<-",
					"Webサービスから返された値"
				],
				[
					"returnName",
					"Text",
					"->",
					"取得する引数の名前"
				],
				[
					"*",
					"Operator",
					"->",
					"メモリを解放"
				]
			],
			"Summary": "**WEB SERVICE GET RESULT**コマンドは、行われた処理の結果としてWebサービスから返された結果を取得するために使用します。"
		},
		"WEB SERVICE SET OPTION": {
			"Syntax": "**WEB SERVICE SET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"設定するオプションのコード"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"オプションの値"
				]
			],
			"Summary": "このコマンドは上級Webサービスユーザのためにデザインされています。"
		},
		"WEB SERVICE SET PARAMETER": {
			"Syntax": "**WEB SERVICE SET PARAMETER** ( *name* ; *value* {; *soapType*} )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"SOAPリクエストに含める引数の名前"
				],
				[
					"value",
					"Variable",
					"->",
					"引数の値を格納する4D変数"
				],
				[
					"soapType",
					"Text",
					"->",
					"引数のSOAPタイプ"
				]
			],
			"Summary": "**WEB SERVICE SET PARAMETER**コマンドはクライアントのSOAPリクエストで引数の定義を行います。"
		},
		"WEB SET HOME PAGE": {
			"Syntax": "**WEB SET HOME PAGE** ( *homePage* )",
			"Params": [
				[
					"homePage",
					"Text",
					"->",
					"ページの名前またはページへのHTMLアクセスパス または、\"\"でカスタムホームページを送らない"
				]
			],
			"Summary": "**WEB SET HOME PAGE**コマンドを使用して、現在のWebプロセス用のカスタムホームページを変更します。"
		},
		"WEB SET HTTP HEADER": {
			"Syntax": "**WEB SET HTTP HEADER** ( *header* )<br/>**WEB SET HTTP HEADER** ( *fieldArray* ; *valueArray* )",
			"Params": [
				[
					"header&#124;fieldArray",
					"テキスト, テキスト配列",
					"->",
					"リクエストHTTPヘッダーを格納したフィールドまたは変数、またはHTTPヘッダーフィールド"
				],
				[
					"valueArray",
					"Text array",
					"->",
					"HTTPヘッダーフィールドコンテンツ"
				]
			],
			"Summary": "**WEB SET HTTP HEADER**コマンドを使用して、4DからWebブラウザーへ送信されるHTTPヘッダーにフィールドを設定します。"
		},
		"WEB SET OPTION": {
			"Syntax": "**WEB SET OPTION** ( *selector* ; *value* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"オプションコード"
				],
				[
					"value",
					"Integer, Text, Collection",
					"->",
					"オプション値"
				]
			],
			"Summary": "**WEB SET OPTION**コマンドは4D Webサーバーの機能に関する様々なオプションのカレントの値を変更します。"
		},
		"WEB SET ROOT FOLDER": {
			"Syntax": "**WEB SET ROOT FOLDER** ( *rootFolder* )",
			"Params": [
				[
					"rootFolder",
					"Text",
					"->",
					"Webサーバルートフォルダのパス名"
				]
			],
			"Summary": "**WEB SET ROOT FOLDER**コマンドを使用して、デフォルトのルートフォルダを変更します。"
		},
		"WEB START SERVER": {
			"Syntax": "**WEB START SERVER**",
			"Params": [],
			"Summary": "**WEB START SERVER**コマンドは、実行中の4Dアプリケーション上でWebサーバを起動します。"
		},
		"WEB STOP SERVER": {
			"Syntax": "**WEB STOP SERVER**",
			"Params": [],
			"Summary": "**WEB STOP SERVER**コマンドは、実行中の4Dアプリケーション上で、Webサーバを停止します 。"
		},
		"WEB Validate digest": {
			"Syntax": "**WEB Validate digest** ( *userName* ; *password* ) : Boolean",
			"Params": [
				[
					"userName",
					"Text",
					"->",
					"ユーザの名前"
				],
				[
					"password",
					"Text",
					"->",
					"ユーザのパスワード"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"True=認証はOK、 False=認証は失敗"
				]
			],
			"Summary": "**WEB Validate digest**コマンドを使用して、Webサーバに接続しているユーザのID情報 (名前とパスワード) の有効性をチェックします。"
		},
		"Window kind": {
			"Syntax": "**Window kind** {( *window* )} : Integer",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号, または 省略時カレントプロセスの最前面ウィンドウ"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ウィンドウのタイプ"
				]
			],
			"Summary": "Window kind コマンドは*window*に渡した参照番号のウィンドウのタイプを返します。"
		},
		"WINDOW LIST": {
			"Syntax": "**WINDOW LIST** ( *windows* {; *} )",
			"Params": [
				[
					"windows",
					"Array",
					"<-",
					"ウィンドウ参照番号の配列"
				],
				[
					"*",
					"演算子",
					"->",
					"指定時, フローティングウィンドウも含める 省略時, フローティングウィンドウを含めない"
				]
			],
			"Summary": "WINDOW LIST コマンドは配列 *windows* を生成し、実行中のすべての (カーネルおよびユーザ) プロセスで開かれているウィンドウの参照番号を返します。"
		},
		"Window process": {
			"Syntax": "**Window process** {( *window* )} : Integer",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"ウィンドウ参照番号"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"プロセス参照番号"
				]
			],
			"Summary": "Window process コマンドは*window*に渡されたウィンドウが実行されているプロセスの番号を返します。"
		},
		"Windows Alt down": {
			"Syntax": "**Windows Alt down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"WindowsのAltキーのステータス ( Macintoshの場合は、optionキー)"
				]
			],
			"Summary": "Windows Alt down はWindowsのAlt キーが押されているとTrueを返します。"
		},
		"Windows Ctrl down": {
			"Syntax": "**Windows Ctrl down**  : Boolean",
			"Params": [
				[
					"戻り値",
					"Boolean",
					"<-",
					"WindowsのCtrlキーのステータス ( Macintoshの場合は、commandキー)"
				]
			],
			"Summary": "Windows Ctrl down はWindowsのCtrlキーが押されているとTrueを返します。"
		},
		"WRITE PICTURE FILE": {
			"Syntax": "**WRITE PICTURE FILE** ( *fileName* ; *picture* {; *codec*} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"書き出すファイルのフルパス名, または空の文字列"
				],
				[
					"picture",
					"Picture",
					"->",
					"書き出すピクチャフィールドまたは変数"
				],
				[
					"codec",
					"Text",
					"->",
					"ピクチャCodec ID"
				]
			],
			"Summary": "**WRITE PICTURE FILE**コマンドを使用し、 引数*picture*に渡されたピクチャを、指定した*codec*でディスクに保存することができます。"
		},
		"XML DECODE": {
			"Syntax": "**XML DECODE** ( *xmlValue* ; *4Dvar* )",
			"Params": [
				[
					"xmlValue",
					"Text",
					"->",
					"XML構造から取得したテキスト型の値"
				],
				[
					"4Dvar",
					"Field, Variable",
					"<-",
					"変換したXMLの値を受け取る4D変数またはフィールド"
				]
			],
			"Summary": "XML DECODE コマンドはXML文字列に格納されている値を4D型の値に変換します。"
		},
		"XML GET ERROR": {
			"Syntax": "**XML GET ERROR** ( *elementRef* ; *errorText* {; *row* {; *column*}} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML要素参照"
				],
				[
					"errorText",
					"Variable",
					"<-",
					"エラーテキスト"
				],
				[
					"row",
					"Variable",
					"<-",
					"行番号"
				],
				[
					"column",
					"Variable",
					"<-",
					"列番号"
				]
			],
			"Summary": "XML GET ERROR コマンドは*errorText* 引数に、*elementRef* 引数で指定されたXML要素の処理中に検知したエラーの説明を返します。"
		},
		"XML GET OPTIONS": {
			"Syntax": "**XML GET OPTIONS** ( *elementRef* ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )<br/>**XML GET OPTIONS** ( *document  ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )",
			"Params": [
				[
					"elementRef &#124; document",
					"テキスト",
					"->",
					"XMLルート要素参照 または開かれたドキュメントの参照"
				],
				[
					"selector",
					"Integer",
					"->",
					"取得するオプション"
				],
				[
					"value",
					"Integer",
					"<-",
					"オプションの現在値"
				]
			],
			"Summary": "**XML GET OPTIONS** コマンドは、カレントセッションおよびカレントユーザで使用されている1つ以上のXMLパラメタの現在値を取得するために使用します。"
		},
		"XML SET OPTIONS": {
			"Syntax": "**XML SET OPTIONS** ( *elementRef*  ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )<br/>**XML SET OPTIONS** ( *document*  ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )",
			"Params": [
				[
					"elementRef &#124; document",
					"テキスト",
					"->",
					"XMLルート要素参照、または開かれたドキュメント参照"
				],
				[
					"selector",
					"Integer",
					"->",
					"設定するオプション"
				],
				[
					"value",
					"Integer",
					"->",
					"オプションの値"
				]
			],
			"Summary": "**XML SET OPTIONS** コマンドを使用して、 第一引数に渡されたXML構造のXMLオプションの値を変更できます。"
		},
		"Year of": {
			"Syntax": "**Year of** ( *date* ) : Integer",
			"Params": [
				[
					"date",
					"Date",
					"->",
					"年を取り出す日付"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"年を示す数値"
				]
			],
			"Summary": "Year of コマンドは、*date*から年を返します。"
		},
		"cs": {
			"Syntax": "**cs** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"プロジェクトまたはコンポーネントのユーザークラスストア"
				]
			],
			"Summary": "カレントプロジェクトまたはコンポーネントのユーザークラスストアを返します"
		},
		"4D": {
			"Syntax": "**4D** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"4Dクラスストア"
				]
			],
			"Summary": "ビルトイン 4Dクラスのクラスストアを返します"
		},
		"WP Add picture": {
			"Syntax": "**WP Add picture** ( *wpDoc* {; *picture*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *picturePath*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *pictureFileObj*} ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"picture",
					"Picture",
					"->",
					"ピクチャー"
				],
				[
					"picturePath",
					"Text",
					"->",
					"ピクチャーパス"
				],
				[
					"pictureFileObj",
					"4D.File",
					"->",
					"ピクチャーファイルを表す4D.File オブジェクト"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ピクチャーを参照しているオブジェクト"
				]
			],
			"Summary": "引数として渡されたピクチャーを*wpDoc* 引数で指定したドキュメント内での固定された場所にアンカーし、その参照を返します。"
		},
		"WP DELETE SECTION": {
			"Syntax": "**WP DELETE SECTION** ( *section* )<br/> **WP DELETE SECTION** ( *wpDoc* ; *indexNumber* {; *count*} )",
			"Params": [
				[
					"section",
					"Object",
					"->",
					"4D Write Pro セクション"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"indexNumber",
					"Integer",
					"->",
					"削除するセクションのインデックス"
				],
				[
					"count",
					"Integer",
					"->",
					"削除するセクションの数"
				]
			],
			"Summary": "*section* オブジェクトに渡されたセクションを削除するか、または*indexNumber* 引数に渡されたインデックスを持つセクションから*count* 引数で指定した数だけ1つ以上のセクションを削除します。"
		},
		"WP DELETE SUBSECTION": {
			"Syntax": "**WP DELETE SUBSECTION** ( *wpSection* ; *subSectionType* )<br/>**WP DELETE SUBSECTION** ( *subSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクション"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"サブセクションのタイプ(wk first page、wk left page、または wk right page)"
				],
				[
					"subSection",
					"Object",
					"->",
					"4D Write Pro サブセクション"
				]
			],
			"Summary": "引数で指定した4D Write Pro セクションから、引数で指定したサブセクション要素を削除します。または*subSection* 引数で指定したサブセクションを直接削除します。"
		},
		"WP EXPORT DOCUMENT": {
			"Syntax": "**WP EXPORT DOCUMENT** ( *wpDoc* ; *filePath* {; *format* {; *option*}} )<br/>**WP EXPORT DOCUMENT** ( *wpDoc* ; *fileObj* {; *format* {; *option*}} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro 変数"
				],
				[
					"filePath",
					"Text",
					"->",
					"書き出されるファイルのパス"
				],
				[
					"fileObj",
					"4D.File",
					"->",
					"書き出すファイルオブジェクト"
				],
				[
					"format",
					"Integer",
					"->",
					"ドキュメント出力フォーマット(例: .docx、.pdf、など)"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"書き出しオプション、選択したフォーマットによって異なる"
				]
			],
			"Summary": "*wpDoc* 引数で指定した4D Write Pro オブジェクトを*filePath* あるいは *fileObj* 引数および他のオプションの引数に基づいて、ディスク上のドキュメントへと書き出します。"
		},
		"WP EXPORT VARIABLE": {
			"Syntax": "**WP EXPORT VARIABLE** ( *wpDoc* ; *destination* ; *format* {; *option*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro 変数"
				],
				[
					"destination",
					"Text, Blob",
					"->",
					"Variable to receive exported contents"
				],
				[
					"format",
					"Integer",
					"->",
					"Variable output format"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"書き出しのオプション"
				]
			],
			"Summary": "The **WP EXPORT VARIABLE** command exports the *wpDoc* 4D Write Pro object to the 4D *destination* variable in the specified *format*."
		},
		"WP Get attributes": {
			"Syntax": "**WP Get attributes** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP Get attributes** ( *targetObj* ; *attribColl* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"attribName",
					"Text",
					"->",
					"取得する属性の名前"
				],
				[
					"attribValue",
					"Text, Number, Array, Collection, Picture, Date",
					"<-",
					"ターゲットの属性のカレントの値"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"取得する属性名のコレクション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"属性名と値"
				]
			],
			"Summary": "4D Write Proレンジ、ヘッダー/フッター/本文/表、あるいはドキュメント内のあらゆる属性の値を返します。"
		},
		"WP Import document": {
			"Syntax": "**WP Import document** ( *filePath* {; *option*} ) : Object<br/>**WP Import document** ( *fileObj* {; *option*} ) : Object",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"4D Write ドキュメント(.4w7または.4wt)へのパス、または4D Write Pro ドキュメント(.4wp)へのパス、または.docx ドキュメント(.docx)へのパス"
				],
				[
					"fileObj",
					"4D.File",
					"->",
					"読み込むファイルオブジェクト"
				],
				[
					"option",
					"Integer, Object",
					"->",
					"(倍長整数) HTML 式の読み込みオプション (オブジェクト型) .docx ドキュメント用の読み込みオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro オブジェクト"
				]
			],
			"Summary": "既存の4D Write Proドキュメント/4D Write ドキュメント(.4wp、.4w7 または .4wt)またはMS Word ドキュメント(.docx) を新規の4D Write Proオブジェクトへと変換します。"
		},
		"WP Insert break": {
			"Syntax": "**WP Insert break** ( *targetObj* ; *breakType* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"breakType",
					"Integer",
					"->",
					"挿入するブレークのタイプ"
				],
				[
					"mode",
					"Integer",
					"->",
					"挿入モード"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"レンジ更新モード"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ブレーク文字のテキストレンジ"
				]
			],
			"Summary": "コマンドは*mode* 引数や*rangeUpdate* 引数で指定された形で、*targetObj* 引数で指定されたレンジ内に*breakType* 引数で指定された型の新しいブレークを挿入し、ブレーク文字のテキストレンジを返します。"
		},
		"WP Insert document body": {
			"Syntax": "**WP Insert document body** ( *targetObj* ; *wpDoc* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"mode",
					"Integer",
					"->",
					"挿入モード"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"レンジ更新モード"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"挿入されたドキュメント本文を参照するテキストレンジ"
				]
			],
			"Summary": "*mode* 引数や*rangeUpdate* 引数で指定された形で、*wpDoc* 引数で指定したドキュメントの本文を*targetObj* 引数で指定したターゲット内に挿入し、挿入されたドキュメント本文へのレンジを返します。"
		},
		"WP Insert formula": {
			"Syntax": "**WP Insert formula** ( *targetObj* ; *formula* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"formula",
					"Object",
					"->",
					"フォーミュラオブジェクト、またはformula とname プロパティを持つオブジェクト"
				],
				[
					"mode",
					"Number",
					"->",
					"挿入モード"
				],
				[
					"rangeUpdate",
					"Number",
					"->",
					"挿入されたコンテンツをレンジ内に含めるか含めないかを指定"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"フォーミュラの結果を表すテキストレンジオブジェクト"
				]
			],
			"Summary": "*targetObj* 引数で指定したターゲット内に*formula* 引数のフォーミュラを、*mode* 引数で指定したモードで挿入しその結果のテキストレンジを返します。"
		},
		"WP Insert picture": {
			"Syntax": "**WP Insert picture** ( *targetObj* ; *picture* ; *mode* {; *rangeUpdate*} ): Object<br/>**WP Insert picture** ( *targetObj* ; *pictureFileObj*; *mode* {; *rangeUpdate*}): Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"picture",
					"Picture",
					"->",
					"ピクチャーフィールドまたは変数、あるいはディスク上のピクチャーファイルへのパス"
				],
				[
					"pictureFileObj",
					"4D.File",
					"->",
					"ピクチャーファイルを表す4D.File オブジェクト"
				],
				[
					"mode",
					"Integer",
					"->",
					"挿入モード"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"レンジ更新モード"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ピクチャーを参照しているオブジェクト"
				]
			],
			"Summary": "指定した挿入モード*mode* とレンジ更新モード*rangeUpdate* に従って、*picture* または*pictureFileObj* のピクチャーを*targetObj* で指定したレンジに挿入し、ピクチャー要素への参照を返します。"
		},
		"WP RESET ATTRIBUTES": {
			"Syntax": "**WP RESET ATTRIBUTES** ( *targetObj* ; *attribName* {; *attribName2* ; ... ; *attribNameN*} )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribName* }{; *attribName2* ; ... ; *attribNameN*} )<br/>**WP RESET ATTRIBUTES** ( *targetObj* ; *attribColl* )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribColl*})",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"sectionOrSubsection",
					"Object",
					"->",
					"4D Write Pro ドキュメントのセクションまたはサブセクション"
				],
				[
					"attribName",
					"Text",
					"->",
					"削除したい属性の名前"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"削除したい属性のコレクション"
				]
			],
			"Summary": "引数として渡されたレンジ、要素、またはドキュメントの1つ以上の値をリセットすることができます。"
		},
		"WP SET ATTRIBUTES": {
			"Syntax": "**WP SET ATTRIBUTES** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP SET ATTRIBUTES** ( *targetObj* ; *attribObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"attribName",
					"Text",
					"->",
					"設定する属性名"
				],
				[
					"attribValue",
					"Text, Number, Object, Collection, Picture, Date",
					"->",
					"新しい属性の値"
				],
				[
					"attribObj",
					"Object",
					"->",
					"設定したい属性の名前とそれに対応する設定したい値を格納したオブジェクト"
				]
			],
			"Summary": "レンジ、要素、あるいはドキュメントのあらゆる属性の値を設定することができます。"
		},
		"WP Table append row": {
			"Syntax": "**WP Table append row** ( *tableRef* ; *value* {; *value2* ; ... ; *valueN*} )  : Object<br/>**WP Table append row** ( *tableRef* ; *valueColl* ) : Object",
			"Params": [
				[
					"tableRef",
					"Object",
					"->",
					"表組の参照"
				],
				[
					"value",
					"Text, Number, Time, Date, Picture, Object",
					"->",
					"行内に設定する値"
				],
				[
					"valueColl",
					"Collection",
					"->",
					"行内に設定する値のコレクション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"行レンジオブジェクト"
				]
			],
			"Summary": "appends one row to the *tableRef* table, fills it with *value*(s) or a *valueColl* collection, and returns the corresponding row range object."
		},
		"WP Bookmark range": {
			"Syntax": "**WP Bookmark range** ( *wpDoc* ; *bkName* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Proドキュメント"
				],
				[
					"bkName",
					"Text",
					"->",
					"レンジを取得したいブックマーク名"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ブックマークのレンジ"
				]
			],
			"Summary": "**WP Bookmark range** コマンドは、*wpDoc*引数で指定した4D Write Proドキュメント内の、*bkName*引数で指定されたブックマークのレンジを格納したテキストレンジオブジェクト(rangeObj)を返します。"
		},
		"WP COMPUTE FORMULAS": {
			"Syntax": "**WP COMPUTE FORMULAS** ( *targetObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				]
			],
			"Summary": "**WP COMPUTE FORMULAS** コマンドは、*targetObj* 引数のターゲット内にあるフォーミュラを評価します。"
		},
		"WP DELETE BOOKMARK": {
			"Syntax": "**WP DELETE BOOKMARK** ( *wpDoc* ; *bkName* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Proドキュメント"
				],
				[
					"bkName",
					"Text",
					"->",
					"削除するブックマークの名前"
				]
			],
			"Summary": "**WP DELETE BOOKMARK** コマンドは*wpDoc* 引数で指定した4D Write Proドキュメント内の、*bkName* 引数で指定した名前のブックマークを削除します。"
		},
		"WP DELETE FOOTER": {
			"Syntax": "**WP DELETE FOOTER** ( *wpSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクションあるいはサブセクション"
				]
			],
			"Summary": "**WP DELETE FOOTER** コマンドは、*wpSection* 引数で定義されたセクションあるいはサブセクションに割り当てられたフッター要素を削除します。"
		},
		"WP DELETE HEADER": {
			"Syntax": "**WP DELETE HEADER** ( *wpSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクションあるいはサブセクション"
				]
			],
			"Summary": "**WP DELETE HEADER** コマンドは*wpSection* 引数で定義されたセクションあるいはサブセクションに割り当てられたヘッダー要素を削除します。"
		},
		"WP DELETE PICTURE": {
			"Syntax": "**WP DELETE PICTURE** ( *imgObj* )",
			"Params": [
				[
					"imgObj",
					"Object",
					"->",
					"画像オブジェクト(インラインまたはアンカー)"
				]
			],
			"Summary": "**WP DELETE PICTURE** コマンドは、*imgObj* 引数によって定義された画像を削除します。"
		},
		"WP DELETE STYLE SHEET": {
			"Syntax": "**WP DELETE STYLE SHEET** ( *styleSheetObj* ) | (*wpDoc* ; *styleSheetName* )",
			"Params": [
				[
					"styleSheetObj",
					"Object",
					"->",
					"スタイルシートオブジェクト"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"スタイルシート名"
				]
			],
			"Summary": "**WP DELETE STYLE SHEET** コマンドは、カレントドキュメントから指定された段落または文字のスタイルシートを削除します。"
		},
		"WP DELETE TEXT BOX": {
			"Syntax": "**WP DELETE TEXT BOX** ( *textBox* )",
			"Params": [
				[
					"textBox",
					"Object",
					"->",
					"テキストボックス"
				]
			],
			"Summary": "**WP DELETE TEXT BOX** コマンドは*textBox* 引数で定義したテキストボックスを削除します。"
		},
		"WP Find all": {
			"Syntax": "**WP Find all** ( *targetObj* ; *searchValue* ; *searchCondition* {; *replaceValue*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro ドキュメントのレンジまたは要素"
				],
				[
					"searchValue",
					"Text",
					"->",
					"検索する値"
				],
				[
					"searchCondition",
					"Integer",
					"->",
					"検索条件"
				],
				[
					"replaceValue",
					"Text",
					"->",
					"置換後の文字列"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"レンジオブジェクトのコレクション"
				]
			],
			"Summary": "**WP Find all** コマンドは*targetObj* 引数のオブジェクト内を、*searchValue* 引数の値を、*searchCondition* 引数の検索条件に基づいて検索を行います。"
		},
		"WP Find next": {
			"Syntax": "**WP Find next** ( *targetObj* ; *searchAfter* ; *searchValue* ; *searchCondition* {; *replaceValue*} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"searchAfter",
					"Object",
					"->",
					"検索を開始する開始点のレンジ"
				],
				[
					"searchValue",
					"Text",
					"->",
					"検索する値"
				],
				[
					"searchCondition",
					"Integer",
					"->",
					"検索ルール"
				],
				[
					"replaceValue",
					"Text",
					"->",
					"置換後の文字列"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"見つかった/置換された値のレンジ"
				]
			],
			"Summary": "**WP Find next** コマンドは、コマンドは*targetObj* 引数のオブジェクト内の*searchAfter* 引数で指定したレンジの後の部分内を、*searchValue* 引数の値を、*searchCondition* 引数の検索条件に基づいて検索を行います。"
		},
		"WP Find previous": {
			"Syntax": "**WP Find previous** ( *targetObj* ; *searchBefore* ; *searchValue* ; *searchCondition* {; *replaceValue*} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"searchBefore",
					"Object",
					"->",
					"前方向に検索を開始する開始点のレンジ"
				],
				[
					"searchValue",
					"Text",
					"->",
					"検索する値"
				],
				[
					"searchCondition",
					"Integer",
					"->",
					"検索ルール"
				],
				[
					"replaceValue",
					"Text",
					"->",
					"置換後の文字列"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"見つかった/置換された値のレンジ"
				]
			],
			"Summary": "**WP Find previous** コマンドは、コマンドは*targetObj* 引数のオブジェクト内の*searchBefore* 引数で指定したレンジの前の部分内を、*searchValue* 引数の値を、*searchCondition* 引数の検索条件に基づいて検索を行います。"
		},
		"WP FREEZE FORMULAS": {
			"Syntax": "**WP FREEZE FORMULAS** ( *targetObj* {; *recompute*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"recompute",
					"Integer",
					"->",
					"Option to control recomputing"
				]
			],
			"Summary": "**WP FREEZE FORMULAS** コマンドは、*targetObj* 引数で指定したターゲット内のフォーミュラの中身を\"固定化\"させます。"
		},
		"WP Get body": {
			"Syntax": "**WP Get body** ( *wpDoc* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro ボディ(本文)"
				]
			],
			"Summary": "**WP Get body** コマンドは*wpDoc* 引数で指定した4D Write Pro ドキュメントのボディ(本文)を返します。"
		},
		"WP GET BOOKMARKS": {
			"Syntax": "**WP GET BOOKMARKS** ( *wpDoc* ; *arrBKNames* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Proドキュメント"
				],
				[
					"arrBKNames",
					"テキスト配列",
					"&#x1F858;",
					"ブックマーク名の配列"
				]
			],
			"Summary": "**WP GET BOOKMARKS** コマンドは*wpDoc* 引数で指定した4D Write Proドキュメント内で定義されている全てのブックマーク名を含む配列を返します。"
		},
		"WP Get breaks": {
			"Syntax": "**WP Get breaks** ( *targetObj* {; *breakType*} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"breakType",
					"Integer",
					"->",
					"返すブレークのタイプ"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"レンジのコレクション"
				]
			],
			"Summary": "**WP Get breaks** コマンドは*targetObj* 引数のターゲット内に挿入されている全てのブレークを格納したコレクションを返します。"
		},
		"WP Get data context": {
			"Syntax": "**WP Get data context** ( *wpDoc* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"データコンテキストオブジェクト"
				]
			],
			"Summary": "**WP Get data context** コマンドは、 wpDoc 引数で指定したドキュメントのデータコンテキストを返します。"
		},
		"WP Get element by ID": {
			"Syntax": "**WP Get element by ID** ( *wpDoc* ; *ID* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"ID",
					"Text",
					"->",
					"取得する要素のID"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro 要素"
				]
			],
			"Summary": "**WP Get element by ID** コマンドは、*wpDoc* 引数で指定したドキュメント内の、*ID* 引数で指定された要素を格納しているオブジェクトを返します。"
		},
		"WP Get elements": {
			"Syntax": "**WP Get elements** ( *targetObj* {; *elementType*} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro ドキュメント、レンジ、または要素"
				],
				[
					"elementType",
					"Integer",
					"->",
					"取得したい要素の型"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"要素の参照を格納するコレクション"
				]
			],
			"Summary": "**WP Get elements** コマンドは、段落、画像、表および行などを格納したオブジェクトのコレクションを返します。"
		},
		"WP Get footer": {
			"Syntax": "**WP Get footer** ( *targetObj* ) | (*wpDoc* ; *sectionIndex* {; *sectionSubType*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro レンジ"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"sectionIndex",
					"Integer",
					"->",
					"セクションインデックス"
				],
				[
					"sectionSubType",
					"Integer",
					"->",
					"サブセクションのタイプ(wk first page、wk left page、あるいは wk right page)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro フッター"
				]
			],
			"Summary": "**WP Get footer** コマンドは*wpDoc* 引数で指定したドキュメントの、*targetObj* 引数で指定したレンジ、あるいは*sectionIndex* 引数で指定したインデックスに関連付けられたフッターを返します。"
		},
		"WP Get formulas": {
			"Syntax": "**WP Get formulas** ( *targetObj* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Proドキュメント"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"フォーミュラのコレクション"
				]
			],
			"Summary": "**WP Get formulas** コマンドは、*targetObj* 引数内で定義されている全てのフォーミュラをコレクションとして返します。"
		},
		"WP Get frame": {
			"Syntax": "**WP Get frame** ( {* ;} *wpArea* {; *textBoxID*} ) -> 戻り値",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、wpArea はフォームオブジェクト(文字列)。省略時、wpArea はオブジェクトフィールドあるいは変数"
				],
				[
					"wpArea",
					"Text",
					"->",
					"フォームオブジェクト名(* 指定時)あるいは4D Write Pro オブジェクト変数あるいはフィールド(* 省略時)"
				],
				[
					"textBoxID",
					"文字",
					"&#x1F858;",
					"テキストボックスのID(テキストボックスにフォーカスがある場合にのみ値が入ります)"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"カーソルが現在設定されているフレーム"
				]
			],
			"Summary": "**WP Get frame** コマンドは*wpArea* 引数で指定した4D Write Pro エリア内で、カーソルが現在設定されているフレームを返します。"
		},
		"WP Get header": {
			"Syntax": "**WP Get header** ( *targetObj* ) | (*wpDoc* ; *sectionIndex* {; *subSectionType*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro レンジ"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"sectionIndex",
					"Integer",
					"->",
					"セクションインデックス"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"サブセクションのタイプ(wk first page、wk left page、あるいは wk right page)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro ヘッダー"
				]
			],
			"Summary": "**WP Get header** コマンドは*wpDoc* 引数で指定したドキュメントの、*targetObj* 引数で指定したレンジ、あるいは*sectionIndex* 引数で指定したインデックスに関連付けられたヘッダーを返します。"
		},
		"WP Get links": {
			"Syntax": "**WP Get links** ( *targetObj* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Proドキュメント"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"リンクのコレクション"
				]
			],
			"Summary": "**WP Get links** は*targetObj* 引数内のターゲットオブジェクトで定義されている全てのリンクのコレクションを返します。"
		},
		"WP Get page count": {
			"Syntax": "**WP Get page count** ( *wpDoc* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"戻り値",
					"Integer",
					"<-",
					"ドキュメントのページ数"
				]
			],
			"Summary": "**WP Get page count** コマンドは 引数として渡した*targetObj* 引数内で定義されているページの総数を返します。"
		},
		"WP Get position": {
			"Syntax": "**WP Get position** ( *targetObj* {; *layout*} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro ドキュメント、レンジ または 要素"
				],
				[
					"layout",
					"Integer",
					"->",
					"評価の際に使用される4D Write Pro ドキュメントのレイアウト: 0(デフォルト)=4D Write Pro レイアウト、 1=HTML WYSIWYG"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"位置情報"
				]
			],
			"Summary": "**WP Get position** コマンドは、*targetObj* 引数で指定したターゲットのカレントの位置を説明するオブジェクトを返します。"
		},
		"WP Get section": {
			"Syntax": "**WP Get section** ( *targetObj* ) | (*wpDoc* ; *sectionIndex* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素の参照"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"sectionIndex",
					"Integer",
					"->",
					"セクションのインデックス"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro セクション"
				]
			],
			"Summary": "**WP Get section** コマンドは、*targetObj* 引数のレンジと交差する最初のセクションまたは要素、あるいは*wpDoc* 引数のドキュメント内で*sectionIndex* 引数で指定されたセクションを返します。"
		},
		"WP Get sections": {
			"Syntax": "**WP Get sections** ( *targetObj* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは4D Write Pro ドキュメント"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"targetObj 内で見つかった全ての(メイン)セクションのコレクション"
				]
			],
			"Summary": "**WP Get sections** コマンドは*targetObj* 引数内に定義されている全てのセクションのコレクションを返します。"
		},
		"WP Get style sheet": {
			"Syntax": "**WP Get style sheet** ( *wpDoc* ; *styleSheetName* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"スタイルシート名"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"スタイルシートオブジェクト"
				]
			],
			"Summary": "**WP Get style sheet** コマンドは、*styleSheetName* 引数で指定された名前のスタイルシートオブジェクトを返します。"
		},
		"WP Get style sheets": {
			"Syntax": "**WP Get style sheets** ( *wpDoc* ; *type* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"type",
					"Integer",
					"->",
					"スタイルシートのタイプ"
				],
				[
					"戻り値",
					"Collection",
					"<-",
					"スタイルシートオブジェクトのコレクション"
				]
			],
			"Summary": "**WP Get style sheets** コマンドは*wpDoc* 引数で指定されたドキュメント内の、*type* 引数で定義されたタイプの全てのスタイルシートオブジェクトのコレクションを返します。"
		},
		"WP Get subsection": {
			"Syntax": "**WP Get subsection** ( *targetObj* ) | (*wpSection* ; *subSectionType* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素"
				],
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクション"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"サブセクションのタイプ(wk first page, wk left page, または wk right page)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"サブセクション"
				]
			],
			"Summary": "**WP Get subsection** コマンドは、*targetObj* 引数で指定したレンジまたは要素と交差する最初のサブセクション、あるいは*wpSection* 引数のセクション内の*subSectionType* 型のサブセクションを返します。"
		},
		"WP Get text": {
			"Syntax": "**WP Get text** ( *targetObj* {; *expressions*} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジ または 要素 または4D Write Pro ドキュメント"
				],
				[
					"expressions",
					"Number",
					"->",
					"式の評価の指定"
				],
				[
					"戻り値",
					"Text",
					"<-",
					"targetObjのテキスト"
				]
			],
			"Summary": "**WP Get text** コマンドは*targetObj* 引数で指定した4D Write Pro ドキュメントのテキストのコンテンツを取得します。"
		},
		"WP Get view properties": {
			"Syntax": "**WP Get view properties** ( * ; *wpArea* ) -> 戻り値",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: wpAreaはフォームオブジェクト名(文字列) 省略時: wpArea はオブジェクトフィールドまたは変数(ドキュメント)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"フォームオブジェクト名(* 指定時)または4D Write Proオブジェクト変数またはフィールド(* 省略時)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"カレントビュープロパティ"
				]
			],
			"Summary": "**WP Get view properties** コマンドは、*wpArea* 引数で指定した4D Write Pro エリアのカレントのビュープロパティを返します。"
		},
		"WP IMPORT STYLE SHEETS": {
			"Syntax": "**WP IMPORT STYLE SHEETS** ( *targetDoc* ; *sourceDoc* )",
			"Params": [
				[
					"targetDoc",
					"Object",
					"->",
					"スタイルシートを受け取る4D Write Pro ドキュメント"
				],
				[
					"sourceDoc",
					"Object",
					"->",
					"スタイルシートを取り出す4D Write Pro ドキュメント"
				]
			],
			"Summary": "**WP IMPORT STYLE SHEETS** コマンドは、*sourceDoc* 引数で指定したドキュメント内の全てのスタイルシートを、*targetDoc* 引数で指定したドキュメント内へと読み込みます。"
		},
		"WP Insert table": {
			"Syntax": "**WP Insert table** ( *targetObj* ; *mode* {; *rangeUpdate* {; *nbCols* {; *nbRows*}}} ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジオブジェクト"
				],
				[
					"mode",
					"Integer",
					"->",
					"挿入モード"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"レンジ更新モード"
				],
				[
					"nbCols",
					"Integer",
					"->",
					"テーブル内に設定するカラム数"
				],
				[
					"nbRows",
					"Integer",
					"->",
					"テーブル内に設定する行数"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"テーブル参照オブジェクト"
				]
			],
			"Summary": "**WP Insert table** コマンドは*targetObj* 引数で指定したレンジに、*mode* 引数で指定した挿入モード新しいテーブルを挿入し、それに対応した新しいテーブルオブジェクトを返します。"
		},
		"WP Is font style supported": {
			"Syntax": "**WP Is font style supported** ( *targetObj* ; *wpFontStyle* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素"
				],
				[
					"wpFontStyle",
					"Integer",
					"->",
					"フォントスタイル定数"
				],
				[
					"戻り値",
					"Boolean",
					"<-",
					"wpFontStyleがサポートされている部分がレンジ内にあればTrue、それ以外はFalse"
				]
			],
			"Summary": "**WP Is font style supported**コマンドは引数で指定したレンジオブジェクトのどこかが*wpFontStyle*スタイルをサポートする場合、Trueを返します。"
		},
		"WP NEW BOOKMARK": {
			"Syntax": "**WP NEW BOOKMARK** ( *targetObj* ; *bkName* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素"
				],
				[
					"bkName",
					"Text",
					"->",
					"作成するブックマーク名"
				]
			],
			"Summary": "**WP NEW BOOKMARK**コマンドは、親ドキュメント内の *targetObj* 引数で指定された4D Write Proオブジェクトに基づいた、*bkName* 引数で指定された名前の新しいブックマークを作成します。"
		},
		"WP New footer": {
			"Syntax": "**WP New footer** ( *wpSection* ) -> 戻り値",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクションまたはサブセクション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro フッター"
				]
			],
			"Summary": "**WP New footer** コマンドは、*wpSection* 引数で定義されたセクションまたはサブセクションに割り当てられるフッターを作成し、それを返します。"
		},
		"WP New header": {
			"Syntax": "**WP New header** ( *wpSection* ) -> 戻り値",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクションまたはサブセクションの参照"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro ヘッダー参照"
				]
			],
			"Summary": "**WP New header** コマンドは、*wpSection* 引数で定義されたセクションまたはサブセクションに割り当てられるヘッダーを作成し、それを返します。"
		},
		"WP New style sheet": {
			"Syntax": "**WP New style sheet** ( *wpDoc* ; *styleSheetType* ; *styleSheetName* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"styleSheetType",
					"Integer",
					"->",
					"スタイルシートのタイプ"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"スタイルシート名"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"スタイルシートオブジェクト"
				]
			],
			"Summary": "**WP New style sheet** コマンドは、*wpDoc* 引数で指定されたドキュメントに対して、新しい(空の)スタイルシートオブジェクトを作成します。"
		},
		"WP New subsection": {
			"Syntax": "**WP New subsection** ( *wpSection* ; *subSectionType* ) -> 戻り値",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro セクション"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"サブセクションのタイプ(wk first page, wk left page, or wk right page)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"新しいサブセクション"
				]
			],
			"Summary": "**WP New subsection** コマンドは、*wpSection* 引数で指定した4D Write Pro セクション内に*subSectionType* 引数で指定した型の新しいサブセクションを作成し、それを返します。"
		},
		"WP New text box": {
			"Syntax": "**WP New text box** ( *wpDoc* ; *pageNum* ) -> 戻り値",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"pageNum",
					"Number",
					"->",
					"Page number where to anchor the text box"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"Text box object"
				]
			],
			"Summary": "**WP New text box** コマンドは、*wpDoc* 引数で指定したドキュメントの*pageNum* 引数で指定したページ内に、新しいテキストボックスオブジェクトを作成してそれを返します。"
		},
		"WP New": {
			"Syntax": "**WP New** {( *source* {; *option*} )} -> 戻り値",
			"Params": [
				[
					"source",
					"Text, Blob, Object",
					"->",
					"文字列: HTML ソース<br/>BLOB: 4D Write Pro ドキュメント(.4wp)あるいは4D Write Blob ドキュメント(.4w7/.4wt)<br/>Object: レンジあるいは要素または4D Write Pro ドキュメント"
				],
				[
					"option",
					"Integer",
					"->",
					"HTML 式の読み込みオプション"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"4D Write Pro オブジェクト"
				]
			],
			"Summary": "**WP New** コマンドは4D Write Pro オブジェクトを作成して返します。"
		},
		"WP Paragraph range": {
			"Syntax": "**WP Paragraph range** ( *targetObj* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro レンジ または 要素の参照"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"段落のみを格納したレンジ"
				]
			],
			"Summary": "新しい**WP Paragraph range**コマンドは、*targetObj* 引数内のオブジェクトと交差する段落のみだけを内包したレンジオブジェクトを返します。"
		},
		"WP Picture range": {
			"Syntax": "**WP Picture range** ( *targetObj* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジ または 要素"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"ピクチャーのみを含んだレンジオブジェクト"
				]
			],
			"Summary": "**WP Picture range**コマンドは、*targetObj* 引数に渡したオブジェクト内に含まれるピクチャーのみを格納したレンジオブジェクトを返します。"
		},
		"WP PRINT": {
			"Syntax": "**WP PRINT** ( *wpDoc* {; *printOptions*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"printOptions",
					"Integer",
					"->",
					"4D Write Pro ドキュメントの印刷オプション"
				]
			],
			"Summary": "**WP PRINT** コマンドは、*wpDoc* で指定した 4D Write Proドキュメントの印刷ジョブをローンチするか、あるいはOPEN PRINTING JOB と CLOSE PRINTING JOB の間に呼び出された場合には、ドキュメントをカレントの印刷ジョブに追加します。"
		},
		"WP SELECT": {
			"Syntax": "**WP SELECT** ( {{* ;} *wpArea*;} {*targetObj*} {; *startRange* ; *endRange*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、wpAreaはフォームオブジェクト名(文字列)。省略時、wpAreaはオブジェクトフィールドまたは変数。"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"フォームオブジェクト名(*指定時)または4D Write Proオブジェクト変数またはフィールド(*省略時)"
				],
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"startRange",
					"Integer",
					"->",
					"テキストレンジの開始のオフセット"
				],
				[
					"endRange",
					"Integer",
					"->",
					"テキストレンジの終わりのオフセット"
				]
			],
			"Summary": "**WP SELECT**コマンドは*wpArea* 引数で指定した4D Write Proエリアから、*targetObj* に基づいた、あるいは*startRange* と*endRange* で定義された新しいレンジに基づいた新しいセレクションを作成します。"
		},
		"WP Selection range": {
			"Syntax": "**WP Selection range** ( {* ;} *wpArea* ) -> 戻り値",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、wpAreaはオブジェクト名(文字列)。省略時はwpAreaはオブジェクトフィールドあるいは変数。"
				],
				[
					"wpArea",
					"Text",
					"->",
					"フォームオブジェクト名(*指定時)、または4D Write Proオブジェクト変数またはフィールド(*省略時)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"レンジオブジェクト または ピクチャーオブジェクト"
				]
			],
			"Summary": "**WP Selection range**コマンドは*wpArea*引数で指定した4D Write Proエリア内で現在選択されているコンテンツに基づいた、新しいレンジオブジェクトあるいはピクチャーオブジェクトを返します。"
		},
		"WP SET DATA CONTEXT": {
			"Syntax": "**WP SET DATA CONTEXT** ( *wpDoc* ; *contextData* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro ドキュメント"
				],
				[
					"contextData",
					"Object",
					"->",
					"コンテキストに入れるデータ"
				]
			],
			"Summary": "**WP SET DATA CONTEXT** コマンドは、*contextData* 引数で指定したオブジェクトを、*wpDoc* 引数で指定した4D Write Pro ドキュメントのデータコンテキストとして設定します。"
		},
		"WP SET FRAME": {
			"Syntax": "**WP SET FRAME** ( {* ;} *wpArea* ; *frameSelector* {; *textBoxID*} )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時、wpArea はフォームオブジェクト(文字列)。省略時、wpArea はオブジェクトフィールドあるいは変数"
				],
				[
					"wpArea",
					"Text",
					"->",
					"フォームオブジェクト名(* 指定時)あるいは4D Write Pro オブジェクト変数あるいはフィールド(* 省略時)"
				],
				[
					"frameSelector",
					"Integer",
					"->",
					"カーソルを設定するフレーム"
				],
				[
					"textBoxID",
					"Text",
					"->",
					"カーソルを設定したいテキストボックスのID"
				]
			],
			"Summary": "**WP SET FRAME** コマンドは*wpArea* 引数で指定した4D Write Pro エリア内の、*frameSelector* 引数で指定したフレーム内、または *textBoxID* 引数で指定したテキストボックス内にカーソルを設定します。"
		},
		"WP SET LINK": {
			"Syntax": "**WP SET LINK** ( *targetObj* ; *linkObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"linkObj",
					"Object",
					"->",
					"ハイパーリンクの値"
				]
			],
			"Summary": "**WP SET LINK** は*targetObj* 引数で指定したターゲットオブジェクトに、ハイパーリンク参照を割り当てます。"
		},
		"WP SET TEXT": {
			"Syntax": "**WP SET TEXT** ( *targetObj* ; *newText* ; *textPosition* {; *rangeUpdate*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジオブジェクト"
				],
				[
					"newText",
					"Text",
					"->",
					"挿入するテキスト"
				],
				[
					"textPosition",
					"Number",
					"->",
					"挿入位置(置き換え、前、後)"
				],
				[
					"rangeUpdate",
					"Number",
					"->",
					"挿入されたコンテンツをレンジに含める、あるいは含めない"
				]
			],
			"Summary": "**WP SET TEXT** コマンドは、*newText* 引数に渡されたテキストを、*targetObj* 引数で指定したターゲット内の、*textPosition* 引数で指定された位置に標準テキストとして挿入します。"
		},
		"WP SET VIEW PROPERTIES": {
			"Syntax": "**WP SET VIEW PROPERTIES** ( {* ;} *wpArea* ; *wpViewProps* )",
			"Params": [
				[
					"*",
					"演算子",
					"->",
					"指定時: wpAreaはフォームオブジェクト名(文字列) 省略時: wpAreaはオブジェクトフィールドまたは変数(ドキュメント)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"フォームオブジェクト名(* 指定時)または4D Write Pro オブジェクト変数またはフィールド(* 省略時)"
				],
				[
					"wpViewProps",
					"Object",
					"->",
					"編集するビュープロパティ"
				]
			],
			"Summary": "**WP SET VIEW PROPERTIES** コマンドを使用すると、*wpArea* 引数で指定した4D Write Pro エリアの、一つまたは複数のビュープロパティを動的に設定することができます。"
		},
		"WP TABLE DELETE COLUMNS": {
			"Syntax": "**WP TABLE DELETE COLUMNS** ( *targetObj* ) | ( *tableRef* ; *colNumber* {; *numColumns*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"表の参照"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"カラムの番号"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"削除するカラムの数(デフォルト値=1)"
				]
			],
			"Summary": "**WP TABLE DELETE COLUMNS** コマンドは、4D Write Pro の表から一つまたは複数のカラムを削除します。"
		},
		"WP TABLE DELETE ROWS": {
			"Syntax": "**WP TABLE DELETE ROWS** ( *targetObj* ) | ( *tableRef* ; *rowNumber* {; *numRows*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"表の参照"
				],
				[
					"rowNumber",
					"Integer",
					"->",
					"行インデックス番号"
				],
				[
					"numRows",
					"Integer",
					"->",
					"削除する行の数(デフォルト値=1)"
				]
			],
			"Summary": "**WP TABLE DELETE ROWS** コマンドは、4D Write Proの表から一つまたは複数の行を削除します。"
		},
		"WP Table get cells": {
			"Syntax": "**WP Table get cells** ( *targetObj* ) | ( *tableRef* ; *startCol* ; *startRow* {; *numCols*{; *numRows*}} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"テーブル参照オブジェクト"
				],
				[
					"startCol",
					"Integer",
					"->",
					"先頭セルの位置 (カラム)"
				],
				[
					"startRow",
					"Integer",
					"->",
					"先頭セルの位置 (行)"
				],
				[
					"numCols",
					"Integer",
					"->",
					"取得するカラムの数"
				],
				[
					"numRows",
					"Integer",
					"->",
					"取得する行の数"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"指定セルを含む新規レンジ"
				]
			],
			"Summary": "**WP Table get cells** コマンドは、 *targetObj* または(*startCol*、*startRow*、*numCols*、および *numRows* 引数で定義された)*tableRef* で指定した表から、セルのセレクションを格納した新しいレンジオブジェクトを返します。"
		},
		"WP Table get columns": {
			"Syntax": "**WP Table get columns** ( *targetObj* ) | ( *tableRef* ; *startCol* {; *numCols*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"テーブル参照オブジェクト"
				],
				[
					"startCol",
					"Integer",
					"->",
					"最初のカラムの位置"
				],
				[
					"numCols",
					"Integer",
					"->",
					"取得するカラムの位置"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"選択されたカラムを含む新しいテーブルレンジ"
				]
			],
			"Summary": "**WP Table get columns** コマンドは、*targetObj* または(*startCol* および *numCols* 引数で定義された)*tableRef* で指定した表から、カラムのセレクションを格納した新しいレンジオブジェクトを返します。"
		},
		"WP Table get rows": {
			"Syntax": "**WP Table get rows** ( *targetObj* ) | ( *tableRef* ; startRow | wk header rows {; *numRows*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"テーブル参照オブジェクト"
				],
				[
					"startRow &#124; wk header rows",
					"倍長整数, 文字",
					"->",
					"最初の行の位置"
				],
				[
					"numRows",
					"Integer",
					"->",
					"取得したい行数"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"選択された行を含む新しいテーブルレンジ"
				]
			],
			"Summary": "**WP Table get rows** コマンドは、*targetObj* または(*startRow* および *numRows* 引数で定義された)*tableRef* で指定した表から、行のセレクションを格納した新しいレンジオブジェクトを返します。"
		},
		"WP Table insert columns": {
			"Syntax": "**WP Table insert columns** ( targetObj | {*tableRef* ; *colNumber*} {; *numColumns*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"表参照"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"カラム番号"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"挿入するカラムの数(デフォルト値=1)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"表のカラムのレンジ"
				]
			],
			"Summary": "**WP Table insert columns** コマンドは、4D Write Pro の表に一つまたは複数のカラムを挿入します。"
		},
		"WP Table insert rows": {
			"Syntax": "**WP Table insert rows** ( targetObj | {*tableRef* ; *rowNumber*} {; *numRows*} )  -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Pro ドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"表参照"
				],
				[
					"rowNumber",
					"Integer",
					"->",
					"行インデックス番号"
				],
				[
					"numRows",
					"Integer",
					"->",
					"挿入する行の数(デフォルト値=1)"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"表の行のレンジ"
				]
			],
			"Summary": "**WP Table insert rows** コマンドは、4D Write Pro の表に一つまたは複数の行を挿入します。"
		},
		"WP TABLE MERGE CELLS": {
			"Syntax": "**WP TABLE MERGE CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Proドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"表の参照"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"最初のセル列の位置"
				],
				[
					"startRow",
					"Integer",
					"->",
					"最初のセル行の位置"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"結合する列の数"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"結合する行の数"
				]
			],
			"Summary": "**WP TABLE MERGE CELLS** コマンドは、*targetObj* または(*startColumn*、*startRow*、*columnCount*、および *rowCount* によって定義される)*tableRef* 内のセルのセレクションを結合します。"
		},
		"WP Table range": {
			"Syntax": "**WP Table range** ( *targetObj* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro ドキュメント、レンジまたは要素"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"表のみを格納したレンジオブジェクト"
				]
			],
			"Summary": "**WP Table range** was named **WP Create table range** in previous versions of 4D Write Pro."
		},
		"WP TABLE SPLIT CELLS": {
			"Syntax": "**WP TABLE SPLIT CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"レンジまたは要素または4D Write Proドキュメント"
				],
				[
					"tableRef",
					"Object",
					"->",
					"表の参照"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"最初のセル列の位置"
				],
				[
					"startRow",
					"Integer",
					"->",
					"最初のセル行の位置"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"結合解除する列の数"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"結合解除する行の数"
				]
			],
			"Summary": "**WP TABLE SPLIT CELLS** コマンドは、*targetObj* または(startColumn、*startRow*、columnCount、および rowCount によって定義される)tableRef 内のセルのセレクションの結合を解除します。"
		},
		"WP Text range": {
			"Syntax": "**WP Text range** ( *targetObj* ; *startRange* ; *endRange* ) -> 戻り値",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro ドキュメント、レンジ または 要素"
				],
				[
					"startRange",
					"Integer",
					"->",
					"エリア内でのレンジの開始のオフセット"
				],
				[
					"endRange",
					"Integer",
					"->",
					"エリア内でのレンジの終わりのオフセット"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"レンジオブジェクト"
				]
			],
			"Summary": "**WP Text range**コマンドは*targetObj* 引数の4D Write Proエリア内から、*startRange* と*endRange* の間に含まれるセレクションを新しいレンジオブジェクトを返します。"
		},
		"WP USE PAGE SETUP": {
			"Syntax": "**WP USE PAGE SETUP** ( *wpDoc* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Proドキュメント"
				]
			],
			"Summary": "**WP USE PAGE SETUP** コマンドはカレントのプリンターページ設定を、4D Write Proドキュメント属性のページサイズとページの向きに変更します。"
		}
	},
	"WebFormItem": {
		"hide()": {
			"Syntax": "**.hide**()",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "コンポーネントを非表示にします"
		},
		"show()": {
			"Syntax": "**.show**()",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "コンポーネントを表示状態にします"
		},
		"addCSSClass()": {
			"Syntax": "**.addCSSClass**(*className* : string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"コンポーネントに追加する CSSクラスの名前。"
				]
			],
			"Summary": "*className* で指定されたクラスをコンポーネントに追加します"
		},
		"removeCSSClass()": {
			"Syntax": "**.removeCSSClass**(*className*: string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"コンポーネントから削除する CSSクラスの名前。"
				]
			],
			"Summary": "*className* で指定されたクラスをコンポーネントから削除します"
		}
	},
	"WebServer": {
		"accessKeyDefined": {
			"Syntax": "**.accessKeyDefined** : Boolean",
			"Summary": "Webサーバーの設定にアクセスキーが定義されていれば true"
		},
		"certificateFolder": {
			"Syntax": "**.certificateFolder** : Text",
			"Summary": "認証ファイルが保存されているフォルダー"
		},
		"characterSet": {
			"Syntax": "**.characterSet** : Number<br/>**.characterSet** : Text",
			"Summary": "アプリケーションに接続してくるブラウザーとの通信に 4D Webサーバーが使用すべき文字セット"
		},
		"cipherSuite": {
			"Syntax": "**.cipherSuite** : Text",
			"Summary": "保護されたプロトコルのために使用される暗号スイートリスト"
		},
		"CORSEnabled": {
			"Syntax": "**.CORSEnabled** : Boolean",
			"Summary": "Web サーバーの CORS (*Cross-origin resource sharing*、オリジン間リソース共有) サービス状態"
		},
		"CORSSettings": {
			"Syntax": "**.CORSSettings** : Collection",
			"Summary": "CORSサービスに許可されたホストとメソッドの一覧"
		},
		"debugLog": {
			"Syntax": "**.debugLog** : Integer",
			"Summary": "HTTPリクエストログファイルの状態"
		},
		"defaultHomepage": {
			"Syntax": "**.defaultHomepage** : Text",
			"Summary": "デフォルトのホームページの名称"
		},
		"HSTSEnabled": {
			"Syntax": "**.HSTSEnabled** : Boolean",
			"Summary": "HTTP Strict Transport Security (HSTS) 状態"
		},
		"HSTSMaxAge": {
			"Syntax": "**.HSTSMaxAge** : Integer",
			"Summary": "新規クライアント接続ごとに HSTS がアクティブな最長時間 (秒単位)"
		},
		"HTTPCompressionLevel": {
			"Syntax": "**.HTTPCompressionLevel** : Integer",
			"Summary": "4D HTTPサーバーの HTTP圧縮通信 (クライアントリクエストまたはサーバーレスポンス) における圧縮レベル"
		},
		"HTTPCompressionThreshold": {
			"Syntax": "**.HTTPCompressionThreshold** : Integer",
			"Summary": "HTTP圧縮のしきい値 (バイト単位)。このサイズ未満のリクエストについては、通信が圧縮されません"
		},
		"HTTPEnabled": {
			"Syntax": "**.HTTPEnabled** : Boolean",
			"Summary": "HTTPプロトコル状態"
		},
		"HTTPPort": {
			"Syntax": "**.HTTPPort** : Integer",
			"Summary": "HTTP のリッスンIPポート番号"
		},
		"HTTPTrace": {
			"Syntax": "**.HTTPTrace** : Boolean",
			"Summary": "`HTTP TRACE` の有効化状態"
		},
		"HTTPSEnabled": {
			"Syntax": "**.HTTPSEnabled** : Boolean",
			"Summary": "HTTPSプロトコル状態"
		},
		"HTTPSPort": {
			"Syntax": "**.HTTPSPort** : Integer",
			"Summary": "HTTPS のリッスンIPポート番号"
		},
		"inactiveProcessTimeout": {
			"Syntax": "**.inactiveProcessTimeout** : Integer",
			"Summary": "旧式セッションプロセスの非アクティブタイムアウト時間 (分単位)"
		},
		"inactiveSessionTimeout": {
			"Syntax": "**.inactiveSessionTimeout** : Integer",
			"Summary": "旧式セッションの非アクティブタイムアウト時間 (分単位; cookie にて設定)"
		},
		"IPAddressToListen": {
			"Syntax": "**.IPAddressToListen** : Text",
			"Summary": "4D Webサーバーが HTTPリクエストを受信する IPアドレス"
		},
		"isRunning": {
			"Syntax": "**.isRunning** : Boolean",
			"Summary": "Webサーバーで旧式セッションが有効されている場合に true、それ以外は false"
		},
		"keepSession": {
			"Syntax": "**.keepSession** : Boolean",
			"Summary": "Webサーバーで旧式セッションが有効されている場合に `true`、それ以外は `false`"
		},
		"logRecording": {
			"Syntax": "**.logRecording** : Integer",
			"Summary": "リクエストログ (logweb.txt) の記録オプション値"
		},
		"maxConcurrentProcesses": {
			"Syntax": "**.maxConcurrentProcesses** : Integer",
			"Summary": "Webサーバーにてサポートする最大同時Webプロセス数"
		},
		"maxRequestSize": {
			"Syntax": "**.maxRequestSize** : Integer",
			"Summary": "Webサーバーが処理してよい HTTPリクエスト (POST) の最大サイズ (バイト単位)"
		},
		"maxSessions": {
			"Syntax": "**.maxSessions** : Integer",
			"Summary": "旧式セッションにおける同時セッションの最大数"
		},
		"minTLSVersion": {
			"Syntax": "**.minTLSVersion** : Integer",
			"Summary": "接続に必要な最低TLSバージョン"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "Webサーバーアプリケーションの名称"
		},
		"openSSLVersion": {
			"Syntax": "**.openSSLVersion** : Text",
			"Summary": "使用されている OpenSSLライブラリのバージョン"
		},
		"perfectForwardSecrecy": {
			"Syntax": "**.perfectForwardSecrecy** : Boolean",
			"Summary": "サーバーの PFS利用可否状況"
		},
		"rootFolder": {
			"Syntax": "**.rootFolder** : Text",
			"Summary": "Webサーバーのルートフォルダーのパス"
		},
		"scalableSession": {
			"Syntax": "**.scalableSession** : Boolean",
			"Summary": "Webサーバーがスケーラブルセッションを使用している場合に `true`、それ以外は `false`"
		},
		"sessionCookieDomain": {
			"Syntax": "**.sessionCookieDomain** : Text",
			"Summary": "セッションcookie の \"path\" フィールド"
		},
		"sessionCookieName": {
			"Syntax": "**.sessionCookieName** : Text",
			"Summary": "セッションID の保存に使用されるセッションcookie の名称"
		},
		"sessionCookiePath": {
			"Syntax": "**.sessionCookiePath** : Text",
			"Summary": "セッションcookie の \"path\" フィールド"
		},
		"sessionCookieSameSite": {
			"Syntax": "**.sessionCookieSameSite** : Text",
			"Summary": "セッションcookie の \"SameSite\" 属性の値"
		},
		"sessionIPAddressValidation": {
			"Syntax": "**.sessionIPAddressValidation** : Boolean",
			"Summary": "セッションcookie の IP アドレス検証"
		},
		"start()": {
			"Syntax": "**.start**() : Object<br/>**.start**( *settings* : Object ) : Object",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"開始時の Webサーバー設定"
				],
				[
					"戻り値",
					"Object",
					"<-",
					"Webサーバー開始のステータス"
				]
			],
			"Summary": "対象の Webサーバーを開始させます"
		},
		"stop()": {
			"Syntax": "**.stop()**",
			"Params": [
				[
					"",
					"",
					"",
					"引数を必要としません"
				]
			],
			"Summary": "対象の Webサーバーを停止します"
		}
	},
	"WebSocket": {
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "レスポンス本文のデータ型です"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "接続を開始するのに使用された `connectionHandler` オブジェクトを取得するアクセサーを格納します"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "接続の一意な識別子を格納します"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text, Blob, Object",
					"->",
					"送信するメッセージ"
				]
			],
			"Summary": "定義されたデータ型 (Text、Blob、または Object) で、WebSocket サーバーに *message* を送信します"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "現在の接続ステータスを格納します (\"Connecting\"、\"Closing\"、\"Closed\"、\"Connected\" のいずれか)"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer { ; *reason* : Text } } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"接続が切断される理由を示すステータスコード"
				],
				[
					"reason",
					"Text",
					"->",
					"接続が切断される理由を説明するテキスト"
				]
			],
			"Summary": "任意の *code* および *reason* 引数とともに、WebSocket 接続を閉じます"
		},
		"url": {
			"Syntax": "**.url** : Text",
			"Summary": "WebSocket が接続した URL を格納します"
		}
	},
	"WebSocketConnection": {
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "接続を開始するのに使用された `connectionHandler` オブジェクトを取得するアクセサーを格納します"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "接続の一意な識別子を格納します"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text / Blob / Object",
					"->",
					"送信するメッセージ"
				]
			],
			"Summary": "クライアントに *message* を送信します"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "接続ステータスを格納します (\"Closing\"、\"Closed\"、\"Connected\" のいずれか)"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer ; *message* : Text } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"クライアントに送信されるエラーコード ( > 3000 である必要があり、そうでない場合メッセージは送信されません)"
				],
				[
					"message",
					"Text",
					"->",
					"クライアントに送信されるエラーメッセージ"
				]
			],
			"Summary": "接続を強制終了します"
		},
		"wss": {
			"Syntax": "**.wss** : 4D.WebSocketServer",
			"Summary": "接続の `WebSocketServer` 親オブジェクトを格納します"
		}
	},
	"WebSocketServer": {
		"connections": {
			"Syntax": "**.connections** : Collection",
			"Summary": "WebSocketサーバーが処理しているカレントの接続をすべて格納します"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "受信または送信されるデータの型"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "WebSocketサーバーの開始に使用された `WSSHandler` オブジェクトを取得するアクセサーです"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "WebSocketサーバーにアクセスするためのパスのパターンです"
		},
		"terminate()": {
			"Syntax": "**.terminate**()<br/>**.terminate**( *timeout* : Integer )",
			"Params": [
				[
					"timeout",
					"Integer",
					"->",
					"WebSocketサーバーを終了するまでの待機時間 (秒単位)"
				]
			],
			"Summary": "WebSocketサーバーを終了します"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "WebSocketサーバーが終了している場合には true です"
		}
	},
	"ZipArchive": {
		"root": {
			"Syntax": "**.root** : 4D.ZipFolder",
			"Summary": "ZIPアーカイブのコンテンツにアクセスするためのバーチャルフォルダー"
		}
	},
	"ZipFile": {
		"_inheritedFrom_": "Document"
	},
	"ZipFolder": {
		"_inheritedFrom_": "Directory"
	}
}