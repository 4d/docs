{
	"4D": {
		"Blob": {
			"new()": {
				"Syntax": "**4D.Blob.new()** : 4D.Blob<br/>**4D.Blob.new**( *blobScal* : Blob ) : 4D.Blob<br/>**4D.Blob.new**( *blobObj* : 4D.Blob ) : 4D.Blob",
				"Params": [
					[
						"blob",
						"Blob or 4D. Blob",
						"->",
						"Blob a copiar"
					],
					[
						"Resultados",
						"4D. Blob",
						"<-",
						"Novo 4D.Blob"
					]
				],
				"Summary": "cria um novo objeto `4D.Blob` que, opcionalmente, encapsula uma cópia dos dados de outro blob (blob escalar ou `4D.Blob`)"
			}
		},
		"CryptoKey": {
			"new()": {
				"Syntax": "**4D.CryptoKey.new**( *settings* : Object ) : 4D.CryptoKey",
				"Params": [
					[
						"settings",
						"Object",
						"->",
						"Parâmetros para gerar ou carregar um par de chaves"
					],
					[
						"Resultados",
						"4D.CryptoKey",
						"<-",
						"Objeto que contém um par de chaves de encriptação"
					]
				],
				"Summary": "cria um novo objeto `4D.CryptoKey` que encapsula um par de chaves de criptografia"
			}
		},
		"File": {
			"new()": {
				"Syntax": "**4D.File.new** ( *path* : Text { ; *pathType* : Integer } ) : 4D.File<br/>**4D.File.new** ( *fileConstant* : Integer ) : 4D.File",
				"Summary": "cria e retorna um novo objeto do tipo `4D.File`"
			}
		},
		"Folder": {
			"new()": {
				"Syntax": "**4D.Folder.new** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**4D.Folder.new** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
				"Summary": "cria e retorna um novo objeto do tipo `4D.Folder`"
			}
		},
		"HTTPAgent": {
			"new()": {
				"Syntax": "**4D.HTTPAgent.new**( { *options* : Object } ) : 4D.HTTPAgent",
				"Params": [
					[
						"options",
						"Object",
						"->",
						"opções padrão para o HTTPAgent"
					],
					[
						"Resultados",
						"4D.HTTPAgent",
						"<-",
						"Novo objeto HTTPAgent"
					]
				],
				"Summary": "cria um objeto HTTPAgent compartilhável com as *opções* definidas e retorna um objeto `4D.HTTPAgent`"
			}
		},
		"HTTPRequest": {
			"new()": {
				"Syntax": "**4D.HTTPRequest.new**( *url* : Text { ; *options* : Object } ) : 4D.HTTPRequest",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"URL para onde enviar o pedido"
					],
					[
						"options",
						"Object",
						"->",
						"Pedir propriedades de configuração"
					],
					[
						"Resultados",
						"4D.HTTPRequest",
						"<-",
						"Novo objecto HTTPRequest"
					]
				],
				"Summary": "cria e envia uma solicitação HTTP para o servidor HTTP definido na *url* com as *opções* definidas e retorna um objeto `4D.HTTPRequest`"
			}
		},
		"IMAPTransporter": {
			"new()": {
				"Syntax": "**4D.IMAPTransporter.new**( *server* : Object ) : 4D.IMAPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Informação de servidor de correio"
					],
					[
						"Resultados",
						"4D.IMAPTransporter",
						"<-",
						"Objeto transportador IMAP"
					]
				],
				"Summary": "cria e retorna um novo objeto do tipo `4D.IMAPTransporter`"
			}
		},
		"MailAttachment": {
			"new()": {
				"Syntax": "**4D.MailAttachment.new**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
				"Params": [
					[
						"file",
						"4D. File",
						"->",
						"Parâmetros"
					],
					[
						"zipFile",
						"4D. ZipFile",
						"->",
						"Arquivo zip"
					],
					[
						"blob",
						"4D. Blob",
						"->",
						"Blob contendo o anexo"
					],
					[
						"path",
						"Text",
						"->",
						"Pode passar uma rota ou um Blob para definir o anexo."
					],
					[
						"name",
						"Text",
						"->",
						"Nome + extensão usado pelo cliente email para designar o anexo"
					],
					[
						"cid",
						"Text",
						"->",
						"ID do anexo (apenas mensagens HTML), ou \" \" se nenhum cid for exigido"
					],
					[
						"type",
						"Text",
						"->",
						"Valor do cabeçalho content-type"
					],
					[
						"disposition",
						"Text",
						"->",
						"Valor do cabeçalho content-disposition: \"inline\" ou \"attachment\"."
					],
					[
						"Resultados",
						"4D. MailAttachment",
						"<-",
						"Objeto anexo"
					]
				],
				"Summary": "cria e retorna um novo objeto do tipo `4D.MailAttachment`"
			}
		},
		"POP3Transporter": {
			"new()": {
				"Syntax": "**4D.POP3Transporter.new**( *server* : Object ) : 4D.POP3Transporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Informação de servidor de correio"
					],
					[
						"Resultados",
						"4D.POP3Transporter",
						"<-",
						"Objeto POP3 Transporter"
					]
				],
				"Summary": "cria e retorna um novo objeto do tipo `4D.POP3Transporter`"
			}
		},
		"SMTPTransporter": {
			"new()": {
				"Syntax": "**4D.SMTPTransporter.new**( *server* : Object ) : 4D.SMTPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Informação de servidor de correio"
					],
					[
						"Resultados",
						"4D.SMTPTransporter",
						"<-",
						"Objeto SMTP Transporter"
					]
				],
				"Summary": "cria e retorna um novo objeto do tipo `4D.SMTPTransporter`"
			}
		},
		"SystemWorker": {
			"new()": {
				"Syntax": "**4D.SystemWorker.new** ( *commandLine* : Text { ; options : Object } ) : 4D.SystemWorker",
				"Params": [
					[
						"commandLine",
						"Text",
						"->",
						"Linha de comando a executar"
					],
					[
						"options",
						"Object",
						"->",
						"Parâmetros worker"
					],
					[
						"resultado",
						"4D.SystemWorker",
						"<-",
						"Novo System worker assíncrono ou nulo se o processo não for iniciado"
					]
				],
				"Summary": "cria e retorna um objeto `4D.SystemWorker` que executará o *commandLine* que você passou como parâmetro para iniciar um processo externo"
			}
		},
		"TCPConnection": {
			"new()": {
				"Syntax": "**4D.TCPConnection.new**( *serverAddress* : Text ; *serverPort* : Number ; *options* : Object  ) : 4D.TCPConnection",
				"params": [
					[
						"serverAddress",
						"Text",
						"->",
						"Nome de domínio ou endereço IP do servidor"
					],
					[
						"serverPort",
						"Integer",
						"->",
						"Número da porta do servidor"
					],
					[
						"options",
						"Object",
						"->",
						"Configuração opções para a conexão"
					],
					[
						"Resultados",
						"4D.TCPConnection",
						"<-",
						"Novo objeto TCPConnection"
					]
				],
				"Summary": "creates a new TCP connection to the specified *serverAddress* and *serverPort*, using the defined *options*, and returns a `4D.TCPConnection` object"
			}
		},
		"TCPListener": {
			"new()": {
				"Syntax": "**4D.TCPListener.new**( *port* : Number ; *options* : Object  ) : 4D.TCPListener",
				"params": [
					[
						"port",
						"Number",
						"->",
						"Porta TCP para ouvir"
					],
					[
						"options",
						"Object",
						"->",
						"Configuração opções para o ouvinte"
					],
					[
						"Resultados",
						"4D.TCPListener",
						"<-",
						"Novo objeto TCPListener"
					]
				],
				"Summary": "cria um novo servidor TCP que escuta a *port* especificada usando as *options* definidas e retorna um objeto `4D.TCPListener`"
			}
		},
		"UDPSocket": {
			"new()": {
				"Syntax": "**4D.UDPSocket.new**() : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *options* : Object ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ; *options* : Object ) : 4D.UDPSocket",
				"params": [
					[
						"port",
						"Integer",
						"->",
						"Local port used for UDP socket (0 or omitted = find any unused port to use)"
					],
					[
						"options",
						"Object",
						"->",
						"Configuration options for the socket"
					],
					[
						"Resultados",
						"UDPSocket",
						"<-",
						"New UDPSocket object"
					]
				],
				"Summary": "creates a new UDP socket using the defined *options* (if any) on the specified *port* (if any) or on a random unused port, and returns a `4D.UDPSocket` object"
			}
		},
		"Vector": {
			"new()": {
				"Syntax": "**4D.Vector.new** ( *parameter* : Collection ) : 4D.Vector",
				"Params": [
					[
						"parâmetro",
						"Collection of reals",
						"->",
						"Collection of real numbers representing a vector"
					],
					[
						"Resultados",
						"4D.Vector",
						"<-",
						"New Vector object"
					]
				],
				"Summary": "creates and returns a new object of the `4D.Vector` type"
			}
		},
		"WebSocket": {
			"new()": {
				"Syntax": "**4D.WebSocket.new**( *url* : Text { ; *connectionHandler* : Object } ) : 4D.WebSocket",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"URL a que se deve ligar"
					],
					[
						"connectionHandler",
						"Object",
						"->",
						"Objeto que declara as chamadas de retorno WebSocket"
					],
					[
						"Resultados",
						"4D.WebSocket",
						"<-",
						"Novo objeto WebSocket"
					]
				],
				"Summary": "cria e retorna um novo objeto `4D.WebSocket` conectado ao servidor de WebSocket no endereço que você passou em *url*"
			}
		},
		"WebSocketServer": {
			"new()": {
				"Syntax": "**4D.WebSocketServer.new**( *WSSHandler* : Object { ; *options* : Object } ) : 4D.WebSocketServer",
				"Params": [
					[
						"WSSHandler",
						"Object",
						"->",
						"Objecto da classe de utilizador que declara as chamadas de retorno do servidor WebSocket"
					],
					[
						"options",
						"Object",
						"->",
						"Parâmetros de configuração do WebSocket"
					],
					[
						"Resultados",
						"4D.WebSocketServer",
						"<-",
						"Novo objeto WebSocketServer"
					]
				],
				"Summary": "cria e inicia um servidor WebSocket que usará os retornos de chamada especificados *WSSHandler* e (opcionalmente) *opções*  e retorna um objeto `4D.WebSocketServer`"
			}
		}
	},
	"Blob": {
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "retorna o tamanho de um `4D.Blob`, expresso em bytes."
		},
		"slice()": {
			"Syntax": "**.slice()** : 4D.Blob<br/>**.slice**( *start* : Real ) : 4D.Blob<br/>**.slice**( *start* : Real; *end* : Real ) : 4D.Blob",
			"Params": [
				[
					"start",
					"Real",
					"->",
					"índice do primeiro byte a incluir no novo 4D. Blob\\`."
				],
				[
					"end",
					"Real",
					"->",
					"índice do primeiro byte que não será incluído no novo 4D. Blob\\`"
				],
				[
					"Resultados",
					"4D. Blob",
					"<-",
					"Novo `4D.Blob`"
				]
			],
			"Summary": "cria e retorna um `4D.Blob` que faz referência a dados de um subconjunto do blob no qual é chamado. O blob original não é alterado."
		}
	},
	"Class": {
		"isSessionSingleton": {
			"Syntax": "**.isSessionSingleton** : Boolean",
			"Summary": "retorna `true` se a classe do usuário tiver sido definida como uma classe singleton de session"
		},
		"isShared": {
			"Syntax": "**.isShared** : Boolean",
			"Summary": "retorna `true` se a classe do usuário tiver sido definida como shared class"
		},
		"isSingleton": {
			"Syntax": "**.isSingleton** : Boolean",
			"Summary": "retorna `true` se a classe do usuário tiver sido definida como uma singleton class"
		},
		"me": {
			"Syntax": "**.me** : 4D.Object",
			"Summary": "retorna a instância singleton da classe singleton `cs.className`"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "contém o nome do objeto `4D.Class`"
		},
		"new()": {
			"Syntax": "**.new**( { *...param* : any } ) : 4D.Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"Parâmetros a passar à função constructor"
				],
				[
					"Resultados",
					"4D.Object",
					"<-",
					"Novo objeto da classe"
				]
			],
			"Summary": "cria e retorna um objeto `cs.className` que é uma nova instância da classe na qual ela é chamada"
		},
		"superclass": {
			"Syntax": "**.superclass** : 4D.Class",
			"Summary": "retorna a classe pai da classe"
		}
	},
	"Collection": {
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : any",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Índice de elemento a devolver"
				],
				[
					"Resultados",
					"any",
					"<-",
					"O elemento nesse índice"
				]
			],
			"Summary": "retorna o item na posição *index*, permitindo o uso de números inteiros positivos e negativos"
		},
		"average()": {
			"Syntax": "**.average**( {*propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade objeto a ser usado para cálculos"
				],
				[
					"Resultados",
					"Real, Undefined",
					"<-",
					"Média aritmética dos valores coleção"
				]
			],
			"Summary": "retorna a média aritmética (média) dos valores definidos na instância de coleção"
		},
		"clear()": {
			"Syntax": "**.clear()** : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection original com todos os elementos removidos"
				]
			],
			"Summary": "remove todos os elementos da instância da coleção e retorna uma coleção vazia"
		},
		"combine()": {
			"Syntax": "**.combine**( *col2* : Collection {; *index* : Integer } ) : Collection",
			"Params": [
				[
					"col2",
					"Collection",
					"->",
					"Collection a combinar"
				],
				[
					"index",
					"Integer",
					"->",
					"Posição para a qual inserir elementos para combinar em coleção (padrão = length +1)"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection original contendo elementos combinados"
				]
			],
			"Summary": "insere *col2* elementos no final ou na posição *index* especificada na instância da coleção e retorna a coleção editada"
		},
		"concat()": {
			"Syntax": "**.concat**( *value* : any { *;...valueN* } ) : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Object, Collection, Date, Time, Boolean, Picture",
					"->",
					"Valores a concatenar. Se *valor* for uma coleção, todos os seus elementos serão adicionados como novos elementos no final da coleção original."
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Nova coleção com valores adicionados à coleção original"
				]
			],
			"Summary": "retorna uma nova coleção contendo os elementos da coleção original com todos os elementos do parâmetro *value* adicionados ao final"
		},
		"copy()": {
			"Syntax": "**.copy**() : Collection<br/>**.copy**( *option* : Integer ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithCol* : Collection ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithObj* : Object ) : Collection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck resolve pointers`: resolve ponteiros antes de copiar,<br/>`ck shared`: retorna uma coleção partilhada"
				],
				[
					"groupWithCol",
					"Collection",
					"->",
					"Coleção partilhada a ser agrupada com a coleção resultante"
				],
				[
					"groupWithObj",
					"Object",
					"->",
					"Objeto partilhado a ser agrupado com a coleção resultante"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Cópia profunda da collection original"
				]
			],
			"Summary": "retorna uma cópia profunda da instância da coleção"
		},
		"count()": {
			"Syntax": "**.count**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade objeto a ser usado para cálculos"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Número de elementos na coleção"
				]
			],
			"Summary": "retorna o número de elementos não nulos na coleção"
		},
		"countValues()": {
			"Syntax": "**.countValues**( *value* : any {; *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"value",
					"Text, Number, Boolean, Date, Object, Collection",
					"->",
					"Valor a contar"
				],
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade objeto a ser usado para cálculos"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Número de ocorrências do valor"
				]
			],
			"Summary": "retorna o número de vezes que o valor é encontrado na coleção"
		},
		"distinct()": {
			"Syntax": "**.distinct**( {*options* : Integer} ) : Collection<br/>**.distinct**( *propertyPath* : Text {; *options* : Integer } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota do atributo cujos valores quer obter"
				],
				[
					"options",
					"Integer",
					"->",
					"`ck diacritical`, `ck count values`"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Nova coleção com apenas valores distintos"
				]
			],
			"Summary": "retorna uma coleção que contém apenas valores distintos (diferentes) da coleção original"
		},
		"equal()": {
			"Syntax": "**.equal**( *collection2* : Collection {; *option* : Integer } ) : Boolean",
			"Params": [
				[
					"collection2",
					"Collection",
					"->",
					"Coleção a comparar"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck diacritical`: avaliação diacrítica (\"A\" # \"a\", por exemplo)"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se as coleções forem idênticas, senão false"
				]
			],
			"Summary": "compara recursivamente os conteúdos da coleção e da *coleção2* (comparação profunda)"
		},
		"every()": {
			"Syntax": "**.every**( { *startFrom* : Integer ; } *formula* : 4D.Function { ;*...param* : any } ) : Boolean<br/>**.every**( { *startFrom* : Integer ; } *methodName* : Text { ;*...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para início do teste em"
				],
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a ser(em) passado(s) para *formula* ou *methodName*"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se todos os elementos passarem o teste com sucesso"
				]
			],
			"Summary": "retorna **true** se todos os elementos da coleção passarem com sucesso em um teste implementado no objeto *formula* ou método *methodName* fornecido"
		},
		"extract()": {
			"Syntax": "**.extract**( *propertyPath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *propertyPath* : Text ;  *targetPath* : Text  { ;...*propertyPathOrTargetPathN* : Text } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade de objeto cujos valores serão extraídos para nova coleção"
				],
				[
					"targetpath",
					"Text",
					"->",
					"Rota de propriedade alvo ou nome propriedade"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: include null properties na coleção retornada (ignorado por padrão). Parâmetro ignorado se *targetPath* for passado."
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Nova collection contendo valores extraídos"
				]
			],
			"Summary": "cria e retorna uma nova coleção contendo valores *propertyPath* extraídos da coleção original de objetos"
		},
		"fill()": {
			"Syntax": "**.fill**( *value* : any ) : Collection<br/>**.fill**( *value* : any ;  *startFrom*  : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"value",
					"number, Text, Collection, Object, Date, Boolean",
					"->",
					"Valores preenchido"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Início do índice (incluído)"
				],
				[
					"end",
					"Integer",
					"->",
					"Final do índice (não incluído)"
				],
				[
					"Resultados",
					"collection",
					"<-",
					"Coleção original com valores preenchidos"
				]
			],
			"Summary": "preenche a coleção com o *value* especificado, opcionalmente do índice *startFrom* até o índice *end*, e retorna a coleção resultante"
		},
		"filter()": {
			"Syntax": "**.filter**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.filter**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a ser(em) passado(s) para *formula* ou *methodName*"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Nova coleção contendo elementos filtrados (cópia superficial)"
				]
			],
			"Summary": "retorna uma nova coleção contendo todos os elementos da coleção original para os quais o resultado da *formula* ou do *methodName* é **true**"
		},
		"find()": {
			"Syntax": "**.find**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : any<br/>**.find**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : any",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice onde inicia a pesquisa"
				],
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a ser(em) passado(s) para *formula* ou *methodName*"
				],
				[
					"Resultados",
					"any",
					"<-",
					"Primeiro valor encontrado ou Undefined se não encontrado"
				]
			],
			"Summary": "retorna o primeiro valor na coleção para o qual o *formula* ou o resultado do *methodName*, aplicado a cada elemento, seja **true**"
		},
		"findIndex()": {
			"Syntax": "**.findIndex**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : Integer<br/>**.findIndex**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : Integer",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice onde inicia a pesquisa"
				],
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a ser(em) passado(s) para *formula* ou *methodName*"
				],
				[
					"Resultados",
					"Integer",
					"<-",
					"Indice do primeiro valor encontrado ou -1 se não encontrado"
				]
			],
			"Summary": "retorna o índice, na coleção, do primeiro valor para o qual a *formula* ou o *methodName*, aplicado em cada elemento, retorna **true**"
		},
		"first()": {
			"Syntax": "**.first**() : any",
			"Params": [
				[
					"Resultados",
					"any",
					"<-",
					"Primeiro elemento de colecção"
				]
			],
			"Summary": "retorna o primeiro elemento da coleção"
		},
		"flat()": {
			"Syntax": "**.flat**( { *depth* : Integer } ) : Collection",
			"Params": [
				[
					"depth",
					"Integer",
					"->",
					"A profundidade a que uma estrutura de colecção aninhada deve ser aplanada. O padrão=1"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Colecção achatada"
				]
			],
			"Summary": "cria uma nova coleção com todos os elementos da subcoleção concatenados recursivamente até a *depth*"
		},
		"flatMap()": {
			"Syntax": "**.flatMap**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.flatMap**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a ser(em) passado(s) para *formula* ou *methodName*"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection of transformed values and flattened by a depth of 1"
				]
			],
			"Summary": "cria uma nova coleção com base no resultado da chamada da *formula* da função 4D ou do método *methodName* em cada elemento da coleção original e aplanada por uma profundidade de 1"
		},
		"includes()": {
			"Syntax": "**.includes**( *toSearch* : expression { ; *startFrom* : Integer } ) : Boolean",
			"Params": [
				[
					"toSearch",
					"expressão",
					"->",
					"Expressão a pesquisar na coleção"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice onde inicia a pesquisa"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se *toSearch* for encontrado na coleção"
				]
			],
			"Summary": "retorna True se a expressão *toSearch* for encontrada entre os elementos da coleção, caso contrário False"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**(  *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"expressão",
					"->",
					"Expressão a pesquisar na coleção"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice onde inicia a pesquisa"
				],
				[
					"Resultados",
					"Integer",
					"<-",
					"Índice da primeira ocorrência de toSearch na coleção, -1 se não encontrado"
				]
			],
			"Summary": "procura a expressão *toSearch* entre os elementos da coleção e retorna o índice da primeira ocorrência encontrada, ou -1 se não for encontrada"
		},
		"indices()": {
			"Syntax": "**.indices**(  *queryString* : Text { ; *...value* : any } ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Critérios de pesquisa"
				],
				[
					"value",
					"any",
					"->",
					"Valores a comparar quando usar placeholders (valores temporários)"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Índices elemento correspondendo a queryString na coleção"
				]
			],
			"Summary": "retorna os índices, na coleção original, dos elementos da coleção de objetos que correspondem às condições de busca *queryString*"
		},
		"insert()": {
			"Syntax": "**.insert**( *index* : Integer ; *element* : any ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Onde inserir os elementos"
				],
				[
					"element",
					"any",
					"->",
					"Elemento a inserir na coleção"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection original contendo elementos inseridos"
				]
			],
			"Summary": "insere *element* na posição *index* especificada na instância da coleção e retorna a coleção editada"
		},
		"join()": {
			"Syntax": "**.join**( *delimiter* : Text { ; *option* : Integer } ) : Text",
			"Params": [
				[
					"delimiter",
					"Text",
					"->",
					"Separador a usar entre os elementos"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck ignore null or empty`: ignora cadeias de caracteres nulas e vazias no resultado"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"String contendo todos os elementos da coleção, separados por um delimitador"
				]
			],
			"Summary": "converte todos os elementos da coleção em strings e os concatena usando a string *delimitadora* especificada como separador"
		},
		"last()": {
			"Syntax": "**.last**() : any",
			"Params": [
				[
					"Resultados",
					"any",
					"<-",
					"Último elemento da coleção"
				]
			],
			"Summary": "retorna o último elemento da coleção"
		},
		"lastIndexOf()": {
			"Syntax": "**.lastIndexOf**( *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"expressão",
					"->",
					"O elemento que é pesquisado dentro da coleção"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice onde inicia a pesquisa"
				],
				[
					"Resultados",
					"Integer",
					"<-",
					"Índice da última ocorrência de toSearch na coleção, -1 se não encontrado"
				]
			],
			"Summary": "pesquisa a expressão *toSearch* entre os elementos da coleção e retorna o índice da última ocorrência"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "retorna o número de elementos na coleção"
		},
		"map()": {
			"Syntax": "**.map**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.map**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a ser(em) passado(s) para *formula* ou *methodName*"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection de valores transformados"
				]
			],
			"Summary": "cria uma nova coleção com base no resultado da chamada da função *formula* 4D ou do método *methodName* em cada elemento da coleção original"
		},
		"max()": {
			"Syntax": "**.max**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade objeto a ser usado para avaliação"
				],
				[
					"Resultados",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"Valor máximo na coleção"
				]
			],
			"Summary": "retorna o elemento com o valor mais alto na coleção"
		},
		"min()": {
			"Syntax": "**.min**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade objeto a ser usado para avaliação"
				],
				[
					"Resultados",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"Valor mínimo na coleção"
				]
			],
			"Summary": "retorna o elemento com o menor valor na coleção"
		},
		"multiSort()": {
			"Syntax": "**.multiSort**() : Collection<br/>**.multiSort**( *colsToSort* : Collection ) : Collection<br/>**.multiSort**( *formula* : 4D.Function ; *colsToSort* : Collection ) : Collection",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"colsToSort",
					"Collection",
					"->",
					"Coleção de coleções e/ou objetos com propriedades {`collection`:*colToSort*;`order`:`ck ascending` ou `ck descending`}"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Colecção original ordenada"
				]
			],
			"Summary": "permite que você execute uma classificação sincronizada em vários níveis em um conjunto de coleções"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( ) : Collection<br/>**.orderBy**( *pathStrings* : Text ) : Collection<br/>**.orderBy**( *pathObjects* : Collection ) : Collection<br/>**.orderBy**( *ascOrDesc* : Integer ) : Collection",
			"Params": [
				[
					"pathStrings",
					"Text",
					"->",
					"Caminho(s) de propriedade(s) no(s) qual(is) encomendar a coleção"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"Coleção de objetos criterio"
				],
				[
					"ascOrDesc",
					"Integer",
					"->",
					"`ck ascending` ou `ck descending` (valores escalares)"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Cópia ordenada da coleção (cópia superficial)"
				]
			],
			"Summary": "retorna uma nova coleção contendo todos os elementos da coleção na ordem especificada"
		},
		"orderByMethod()": {
			"Syntax": "**.orderByMethod**( *formula* : 4D.Function { ; ...*extraParam* : expression } ) : Collection<br/>**.orderByMethod**( *methodName* : Text { ; ...*extraParam* : expression } ) : Collection",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"extraParam",
					"any",
					"->",
					"Parâmetro(s) a transmitir"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Cópia ordenada da coleção (cópia superficial)"
				]
			],
			"Summary": "retorna uma nova coleção contendo todos os elementos da coleção na ordem definida por meio da função *formula* 4D ou do método *methodName*"
		},
		"pop()": {
			"Syntax": "**.pop()** : any",
			"Params": [
				[
					"Resultados",
					"any",
					"<-",
					"Último elemento da coleção"
				]
			],
			"Summary": "remove o último elemento da coleção e o retorna como o resultado da função"
		},
		"push()": {
			"Syntax": "**.push**( *element* : any { ;...*elementN* } ) : Collection",
			"Params": [
				[
					"element",
					"any",
					"->",
					"Elementos a adicionar à coleção"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection original contendo elementos inseridos"
				]
			],
			"Summary": "acrescenta um ou mais *elementos* ao final da instância da coleção e retorna a coleção editada"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text ) : Collection<br/>**.query**( *queryString* : Text ; *...value* : any ) : Collection<br/>**.query**( *queryString* : Text ; *querySettings* : Object ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Critérios de pesquisa"
				],
				[
					"value",
					"any",
					"->",
					"Valores a comparar quando usar placeholders (valores temporários)"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Opções de pesquisa: parâmetros, atributos"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Elementos que correspondem com queryString na coleção"
				]
			],
			"Summary": "retorna todos os elementos de uma coleção de objetos que correspondem às condições de pesquisa"
		},
		"reduce()": {
			"Syntax": "**.reduce**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduce**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"Valor a ser usado como primeiro argumento para a primeira chamada de *formula* ou *methodName*"
				],
				[
					"param",
					"expressão",
					"->",
					"Parâmetro(s) a transmitir"
				],
				[
					"Resultados",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"Resultado do valor do acumulador"
				]
			],
			"Summary": "aplica a chamada de retorno *formula* ou *methodName* em um acumulador e em cada elemento da coleção (da esquerda para a direita) para reduzi-lo a um único valor"
		},
		"reduceRight()": {
			"Syntax": "**.reduceRight**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduceRight**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"Valor a ser usado como primeiro argumento para a primeira chamada de *formula* ou *methodName*"
				],
				[
					"param",
					"expressão",
					"->",
					"Parâmetro(s) a transmitir"
				],
				[
					"Resultados",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"Resultado do valor do acumulador"
				]
			],
			"Summary": "aplica a chamada de retorno *formula* ou *methodName* em um acumulador e em cada elemento da coleção (da direita para a esquerda) para reduzi-lo a um único valor"
		},
		"remove()": {
			"Syntax": "**.remove**( *index* : Integer { ; *howMany* : Integer } ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Elemento no qual que se inicia a eliminação"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Número de elementos a eliminar, ou 1 elemento se omitir"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção modificada sem elemento(s) removido(s)"
				]
			],
			"Summary": "remove um ou mais elemento(s) da posição *índice* especificada na coleção e retorna a coleção editada"
		},
		"resize()": {
			"Syntax": "**.resize**( *size* : Integer { ; *defaultValue* : any } ) : Collection",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Nova dimensão da colecção"
				],
				[
					"defaultValue",
					"Number, Text, Object, Collection, Date, Boolean",
					"->",
					"Valor padrão para preencher novos elementos"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Colecção original redimensionada"
				]
			],
			"Summary": "define o comprimento da coleção para o novo tamanho especificado e retorna a coleção redimensionada"
		},
		"reverse()": {
			"Syntax": "**.reverse( )** : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Cópia invertida da colecção"
				]
			],
			"Summary": "retorna uma cópia profunda da coleção com todos os seus elementos em ordem inversa"
		},
		"shift()": {
			"Syntax": "**.shift()** : any",
			"Params": [
				[
					"Resultados",
					"any",
					"<-",
					"Primeiro elemento de colecção"
				]
			],
			"Summary": "remove o primeiro elemento da coleção e o retorna como o resultado da função"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Início do índice (incluído)"
				],
				[
					"end",
					"Integer",
					"->",
					"Final do índice (não incluído)"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Nova colecção contendo elementos cortados (cópia superficial)"
				]
			],
			"Summary": "retorna uma parte de uma coleção em uma nova coleção"
		},
		"some()": {
			"Syntax": "**.some**( { *startFrom* : Integer ; } *formula* : 4D.Function { ; *...param* : any } ) : Boolean<br/>**.some**( { *startFrom* : Integer ; } *methodName* : Text { ; *...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para início do teste em"
				],
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a transmitir"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se todos os elementos passarem o teste com sucesso"
				]
			],
			"Summary": "retorna true se pelo menos um elemento da coleção passar com êxito em um teste implementado no código *formula* ou *methodName* fornecido"
		},
		"sort()": {
			"Syntax": "**.sort**() : Collection<br/>**.sort**( *formula* : 4D.Function { ; *...extraParam* : any } ) : Collection<br/>**.sort**( *methodName* : Text { ; *...extraParam* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D. Function",
					"->",
					"Objecto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nome da função a qual se chama para processar os elementos da coleção"
				],
				[
					"extraParam",
					"any",
					"->",
					"Parâmetros para o método"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Colecção original ordenada"
				]
			],
			"Summary": "classifica os elementos da coleção original e também retorna a coleção classificada"
		},
		"sum()": {
			"Syntax": "**.sum**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Rota de propriedade objeto a ser usado para cálculos"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Soma dos valores da colecção"
				]
			],
			"Summary": "retorna a soma de todos os valores na instância da coleção"
		},
		"unshift()": {
			"Syntax": "**.unshift**( *value* : any { ;...*valueN* : any } ) : Collection",
			"Params": [
				[
					"value",
					"Text, Number, Object, Collection, Date",
					"->",
					"Valor(es) a inserir no início da colecção"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Colecção contendo elemento(s) adicionado(s)"
				],
				[
					"",
					"",
					"",
					""
				]
			],
			"Summary": "insere o(s) \\*valu(es) fornecido(s) no início da coleção"
		}
	},
	"CryptoKey": {
		"curve": {
			"Syntax": "**.curve** : Text",
			"Summary": "nome da curva normalizada da chave"
		},
		"decrypt()": {
			"Syntax": "**.decrypt**( *message* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"String de mensagens a ser decodificada usando `options.encodingEncrypted` e descriptografada."
				],
				[
					"options",
					"Object",
					"->",
					"Opções de codificação"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado"
				]
			],
			"Summary": "descriptografa o parâmetro *message* usando a chave **privada**"
		},
		"encrypt()": {
			"Summary": "criptografa o parâmetro *message* usando a chave **pública**",
			"Syntax": "**.encrypt**( *message* : Text ; *options* : Object ) : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"String de mensagens a ser codificada utilizando `options.encodingDecrypted` e criptografada."
				],
				[
					"options",
					"Object",
					"->",
					"Opções de decodificação"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"Mensagem criptografada e codificada utilizando `options.encodingEncrypted`"
				]
			]
		},
		"getPrivateKey()": {
			"Syntax": "**.getPrivateKey()** : Text",
			"Params": [
				[
					"Resultados",
					"Text",
					"<-",
					"Chave privada em formato PEM"
				]
			],
			"Summary": "retorna a chave privada do objeto`CryptoKey\\`"
		},
		"getPublicKey()": {
			"Syntax": "**.getPublicKey**() : Text",
			"Params": [
				[
					"Resultados",
					"Text",
					"<-",
					"Chave pública em formato PEM"
				]
			],
			"Summary": "retorna a chave pública do objeto `CryptoKey`"
		},
		"pem": {
			"Syntax": "**.pem** : Text",
			"Summary": "PEM definition of an encryption key to load. If the key is a private key, the RSA or ECDSA public key will be deduced from it."
		},
		"sign()": {
			"Syntax": ".**sign** (*message* : Text ; *options* : Object) : Text<br/>.**sign** (*message* : Blob ; *options* : Object) : Text",
			"Params": [
				[
					"message",
					"Texto OU Blob",
					"->",
					"Mensagem a assinar"
				],
				[
					"options",
					"Object",
					"->",
					"Opções de assinatura"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"Assinatura na representação Base64 ou Base64URL, dependendo da opção \"encoding\""
				]
			],
			"Summary": "assina a representação utf8 de uma string *message* ou Blob"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "o tamanho da chave em bits"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "do tipo de chave - \"RSA\", \"ECDSA\", \"PEM\""
		},
		"verify()": {
			"Syntax": "**.verify**( *message* : Text ; *signature* : Text ; *options* : Object) : Object<br/>*.verify**( *message* : Blob ; *signature* : Text ; *options* : Object) : Object",
			"Params": [
				[
					"message",
					"Texto OU Blob",
					"->",
					"Mensagem usada para produzir a assinatura"
				],
				[
					"signature",
					"Text",
					"->",
					"Assinatura que vai ser verificada, em representação Base64 ou Base64URL, dependendo do valor de `options.encoding`"
				],
				[
					"options",
					"Object",
					"->",
					"Opções de assinatura"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da verificação"
				]
			],
			"Summary": "verifica a assinatura base64 em relação à representação utf8 da *message*"
		}
	},
	"DataClass": {
		"all()": {
			"Syntax": "**.all** ( { *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Opção de construção: context"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Referencias sobre todas as entidades relacionadas com a classe de dados"
				]
			],
			"Summary": "consulta a datastore para encontrar todas as entidades relacionadas à classe de dados e as retorna como uma entity selection"
		},
		"clearRemoteCache()": {
			"Syntax": "**.clearRemoteCache()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "esvazia o cache ORDA de uma dataclass"
		},
		"fromCollection()": {
			"Syntax": "**.fromCollection**( *objectCol* : Collection { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"objectCol",
					"Collection",
					"->",
					"Coleção de objetos a mapear com entidades"
				],
				[
					"settings",
					"Object",
					"->",
					"Opção de construção: context"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Seleção de entidades preenchidas da coleção"
				]
			],
			"Summary": "atualiza ou cria entidades na dataclass de acordo com a coleção *objectCol* de objetos e retorna a seleção de entidades correspondente"
		},
		"get()": {
			"Syntax": "**.get**( *primaryKey* : Integer { ; *settings* : Object } ) : 4D.Entity<br/>**.get**( *primaryKey* : Text { ; *settings* : Object } ) : 4D.Entity",
			"Params": [
				[
					"primaryKey",
					"Integer OR Text",
					"->",
					"Valor da chave primária da entidade a recuperar"
				],
				[
					"settings",
					"Object",
					"->",
					"Opção de construção: context"
				],
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Entidade que coincide com a chave primária designada"
				]
			],
			"Summary": "consulta o dataclass para recuperar a entidade que corresponde ao parâmetro *primaryKey*"
		},
		"getCount()": {
			"Syntax": "**.getCount()** : Integer",
			"Params": [
				[
					"resultado",
					"Integer",
					"<-",
					"Número de entidades na classe de dados"
				]
			],
			"Summary": "retorna o número de entidades em uma dataclass"
		},
		"getDataStore()": {
			"Syntax": "**.getDataStore()** : cs.DataStore",
			"Params": [
				[
					"Resultados",
					"cs. DataStore",
					"<-",
					"Informação da dataclass"
				]
			],
			"Summary": "retorna o datastore para a dataclass especificada"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()** : Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Datastore da dataclass"
				]
			],
			"Summary": "retorna um objeto que fornece informações sobre a dataclass"
		},
		"getRemoteCache()": {
			"Syntax": "**.getRemoteCache**() : Object",
			"Params": [
				[
					"resultado",
					"Object",
					"<-",
					"Objecto que descreve o conteúdo da cache ORDA para o dataclass."
				]
			],
			"Summary": "retorna um objeto que contém os conteúdos do cache ORDA para um dataclass."
		},
		"new()": {
			"Syntax": "**.new()** : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Nova entidade que coincide com a classe de dados"
				]
			],
			"Summary": "cria na memória e retorna uma nova entidade em branco relacionada à Dataclass"
		},
		"newSelection()": {
			"Syntax": "**.newSelection**( { *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered`: cria uma seleção de entidades ordenada,<br/>`dk non ordered`: cria uma seleção de entidade não ordenada (padrão se omitido)"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidades em branco relacionadas com a classe de dados"
				]
			],
			"Summary": "cria uma nova seleção de entidades em branco, não compartilhável, relacionada à dataclass, na memória"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Criterios de pesquisa como string"
				],
				[
					"formula",
					"Object",
					"->",
					"Criterios de pesquisa como objeto fórmula"
				],
				[
					"value",
					"any",
					"->",
					"Valores a usar para placeholders indexados"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Opções de pesquisa: parâmetros, atributos, args, allowFormulas, contexto, queryPath,queryPlan"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidade composta por entidades da classe de dados que atendem aos critérios de pesquisa especificados em *queryString* ou *formula*"
				]
			],
			"Summary": "busca entidades que atendam aos critérios de pesquisa especificados em *queryString* ou *formula* e (opcionalmente) *value*(s), para todas as entidades na classe de dados, e retorna um novo objeto do tipo `EntitySelection` contendo todas as entidades encontradas"
		},
		"setRemoteCacheSettings()": {
			"Syntax": "**.setRemoteCacheSettings**(*settings* : Object)",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Objecto que define o tempo limite e o tamanho máximo da cache ORDA para a dataclass."
				]
			],
			"Summary": "define o tempo limite e o tamanho máximo do cache ORDA para uma dataclass."
		}
	},
	"DataStore": {
		"cancelTransaction()": {
			"Syntax": "**.cancelTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "cancela a transação"
		},
		"clearAllRemoteContexts()": {
			"Syntax": "**.clearAllRemoteContexts()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "limpa todos os atributos de todos os contextos ativos no repositório de dados"
		},
		"encryptionStatus()": {
			"Syntax": "**.encryptionStatus()**: Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Informação sobre o cifrado do armazém de dados atual e de cada tabela"
				]
			],
			"Summary": "retorna um objeto que fornece o status de criptografia para o arquivo de dados atual"
		},
		"flushAndLock()": {
			"Syntax": "**.flushAndLock()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "libera o cache do armazenamento de dados local e impede que outros processos executem operações de gravação no banco de dados"
		},
		"getAllRemoteContexts()": {
			"Syntax": "**.getAllRemoteContexts()** : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de objetos de contexto de otimização"
				]
			],
			"Summary": "retorna uma coleção de objetos contendo informações sobre todos os contextos de otimização ativos no repositório de dados"
		},
		"getGlobalStamp()": {
			"Syntax": "**.getGlobalStamp**() : Real",
			"Params": [
				[
					"Resultados",
					"Real",
					"<-",
					"Valor atual do marcador de modificação global"
				]
			],
			"Summary": "retorna o valor atual do carimbo de modificação global do datastore"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()**: Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Propiedades de datastore"
				]
			],
			"Summary": "retorna um objeto que fornece informações sobre o datastore"
		},
		"getRemoteContextInfo()": {
			"Syntax": "**.getRemoteContextInfo**(*contextName* : Text) : Object",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"Nome do contexto"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Descrição do contexto de optimização"
				]
			],
			"Summary": "retorna um objeto que contém informações sobre o contexto de otimização *contextName* no datastore"
		},
		"getRequestLog()": {
			"Syntax": "**.getRequestLog()** : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de objetos onde cada objeto descreve uma petição"
				]
			],
			"Summary": "retorna as solicitações ORDA registradas na memória no lado do cliente"
		},
		"isAdminProtected()": {
			"Syntax": "**.isAdminProtected()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se o acesso ao Explorador de Dados estiver desativado, False se estiver ativado (por padrão)"
				]
			],
			"Summary": "retorna `True` se o acesso ao Data Explorer tiver sido desativado para a sessão de trabalho"
		},
		"locked()": {
			"Syntax": "**.locked()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"Verdadeiro se trancado"
				]
			],
			"Summary": "retorna True se o armazenamento de dados local estiver bloqueado no momento"
		},
		"makeSelectionsAlterable()": {
			"Syntax": "**.makeSelectionsAlterable()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "define todas as seleções de entidades como alteráveis por padrão nos datastores do aplicativo atual"
		},
		"provideDataKey()": {
			"Syntax": "**.provideDataKey**( *curPassPhrase* : Text ) : Object <br/>**.provideDataKey**( *curDataKey* : Object ) : Object",
			"Params": [
				[
					"curPassPhrase",
					"Text",
					"->",
					"Frase de cifrado atual"
				],
				[
					"curDataKey",
					"Object",
					"->",
					"Chave de criptografia de dados atual"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Resultado da coincidência da chave de criptografia"
				]
			],
			"Summary": "permite fornecer uma chave de criptografia de dados para o arquivo de dados atual do armazenamento de dados e detecta se a chave corresponde aos dados criptografados"
		},
		"setAdminProtection()": {
			"Syntax": "**.setAdminProtection**( *status* : Boolean )",
			"Params": [
				[
					"status",
					"Parâmetros",
					"->",
					"True para desativar o acesso do Data Explorer aos dados na porta `webAdmin`, False (padrão) para conceder acesso"
				]
			],
			"Summary": "permite desativar qualquer acesso a dados na porta de administração da Web, inclusive para o Data Explorer em sessões `WebAdmin`"
		},
		"setGlobalStamp()": {
			"Syntax": "**.setGlobalStamp**( *newStamp* : Real)",
			"Params": [
				[
					"newStamp",
					"Real",
					"->",
					"Novo valor do marcador de modificação global"
				]
			],
			"Summary": "define *newStamp* como o novo valor para o carimbo de modificação global atual do datastore"
		},
		"setRemoteContextInfo()": {
			"Syntax": "**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer}})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer }})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"Nome do contexto"
				],
				[
					"dataClassName",
					"Text",
					"->",
					"Nome da dataclass"
				],
				[
					"dataClassObject",
					"4D. DataClass",
					"->",
					"dataclass object (e.g datastore. Employee)"
				],
				[
					"attributes",
					"Text",
					"->",
					"Lista de atributos separada por vírgulas"
				],
				[
					"Atributos do tipo BLOB não são gerenciados na datastore.",
					"Collection",
					"->",
					"Coleção de nomes de atributos (text)"
				],
				[
					"contextType",
					"Text",
					"->",
					"Se fornecido, o valor deve ser \"main\" ou \"currentItem\""
				],
				[
					"pageLength",
					"Integer",
					"->",
					"Duração da página da selecção da entidade ligada ao contexto (por padrão é 80)"
				]
			],
			"Summary": "vincula os atributos da dataclass especificada ao contexto de otimização *contextName*"
		},
		"startRequestLog()": {
			"Syntax": "**.startRequestLog**()<br/>**.startRequestLog**( *file* : 4D.File )<br/>**.startRequestLog**( *file* : 4D.File ; *options* : Integer )<br/>**.startRequestLog**( *reqNum* : Integer )",
			"Params": [
				[
					"file",
					"4D. File",
					"->",
					"Objeto File"
				],
				[
					"options",
					"Integer",
					"->",
					"Opção de registo de resposta (apenas servidor)"
				],
				[
					"reqNum",
					"Integer",
					"->",
					"Número de solicitações a serem mantidas na memória (somente cliente)"
				]
			],
			"Summary": "inicia o registro de solicitações ORDA no lado do cliente ou no lado do servidor"
		},
		"startTransaction()": {
			"Syntax": "**.startTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "inicia uma transação no processo atual no banco de dados correspondente ao armazenamento de dados ao qual ela se aplica"
		},
		"stopRequestLog()": {
			"Syntax": "**.stopRequestLog()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "interrompe qualquer registro de solicitações ORDA na máquina em que é chamada (cliente ou servidor)"
		},
		"unlock()": {
			"Syntax": "**.unlock()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "remove o bloqueio atual das operações de gravação no datastore, se ele tiver sido definido no mesmo processo"
		},
		"validateTransaction()": {
			"Syntax": "**.validateTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "aceita a transação"
		}
	},
	"Directory": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "a data de criação da pasta"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "o horário de criação da pasta"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "true se a pasta existe no disco"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "retorna a extensão do nome da pasta (se houver)"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "retorna o nome completo da pasta, incluindo sua extensão (se houver)"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "true se o arquivo estiver definido como \"hidden\" no nível do sistema"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "sempre **false** para um objeto `Folder`"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "sempre **false** para uma pasta"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "sempre **true** para uma pasta"
		},
		"isPackage": {
			"Syntax": "**.isPackage** : Boolean",
			"Summary": "true se a pasta é um pacote no macOS (e existe no disco)"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "a data da última modificação da pasta"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "a hora da última modificação da pasta"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "o nome da pasta, sem extensão (se houver)"
		},
		"original": {
			"Syntax": "**.original** : 4D.Folder",
			"Summary": "o mesmo objeto Pasta da pasta"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "o objeto pasta pai da pasta"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "o caminho POSIX da pasta"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "o caminho da pasta expresso com a sintaxe da plataforma atual"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D. Folder",
					"->",
					"Pasta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nome para a copia"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"`fk overwrite` para substituir os elementos existentes"
				],
				[
					"Resultados",
					"4D. Folder",
					"<-",
					"Pasta ou arquivo copiado"
				]
			],
			"Summary": "copia o objeto `Folder` para a *destinationFolder* especificada"
		},
		"file()": {
			"Syntax": "**.file**( *path* : Text ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Rota POSIX relativa"
				],
				[
					"Resultados",
					"4D. File",
					"<-",
					"Objeto 'File' (null se caminho inválido)"
				]
			],
			"Summary": "um objeto `File` dentro do objeto `Folder` e retorna sua referência"
		},
		"files()": {
			"Syntax": "**.files**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"Opções da lista de arquivos"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de objetos de arquivo filho"
				]
			],
			"Summary": "uma coleção de objetos `File` contidos na pasta"
		},
		"folder()": {
			"Syntax": "**.folder**( *path* : Text ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Rota POSIX relativa"
				],
				[
					"Resultados",
					"4D. Folder",
					"<-",
					"Objeto pasta criado (null se *path* for inválida\\*)"
				]
			],
			"Summary": "cria um objeto `Folder` dentro do objeto `Folder` pai e retorna sua referência"
		},
		"folders()": {
			"Syntax": "**.folders**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"Opções da lista de pasta"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de objetos de pasta filho"
				]
			],
			"Summary": "retorna uma coleção de objetos `Folder` contidos na pasta principal"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Longitude de lado da imagem devolvida (píxeles)"
				],
				[
					"Resultados",
					"Imagem",
					"<-",
					"Ícone"
				]
			],
			"Summary": "retorna o ícone da pasta"
		}
	},
	"Document": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "a data de criação do arquivo"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "o horário de criação do arquivo"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "true se o arquivo existe no disco"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "a extensão do nome do arquivo (se houver)"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "o nome completo do arquivo, incluindo sua extensão (se houver)"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "true se o arquivo estiver definido como \"hidden\" no nível do sistema"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "true se o arquivo for um alias, um atalho ou um link simbólico"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "sempre true para um arquivo"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "sempre false para um arquivo"
		},
		"isWritable": {
			"Syntax": "**.isWritable** : Boolean",
			"Summary": "true se o arquivo existe no disco e é gravável"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "a data da última modificação do arquivo"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "a hora da última modificação do arquivo"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "o nome do arquivo sem extensão (se houver)"
		},
		"original": {
			"Syntax": "**.original** : 4D.File<br/>**.original** : 4D.Folder",
			"Summary": "o elemento de destino para um alias, um atalho ou um arquivo de link simbólico"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "o objeto pasta pai do arquivo"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "o caminho POSIX do arquivo"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "o caminho do arquivo expresso com a sintaxe da plataforma atual"
		},
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "o tamanho do arquivo expresso em bytes"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D. Folder",
					"->",
					"Pasta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nome para a copia"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"`fk overwrite` para substituir os elementos existentes"
				],
				[
					"Resultados",
					"4D. File",
					"<-",
					"Arquivo copiado"
				]
			],
			"Summary": "copia o objeto `File` para a *destinationFolder*"
		},
		"getContent()": {
			"Syntax": "**.getContent( )** : 4D.Blob",
			"Params": [
				[
					"Resultados",
					"4D. Blob",
					"<-",
					"Conteúdo do arquivo"
				]
			],
			"Summary": "retorna um objeto `4D.Blob` que contém todo o conteúdo de um arquivo"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Longitude de lado da imagem devolvida (píxeles)"
				],
				[
					"Resultados",
					"Imagem",
					"<-",
					"Ícone"
				]
			],
			"Summary": "o ícone do arquivo"
		},
		"getText()": {
			"Syntax": "**.getText**( { *charSetName* : Text { ; *breakMode* : Integer } } ) : Text<br/>**.getText**( { *charSetNum* : Integer { ; *breakMode* : Integer } } ) : Text",
			"Params": [
				[
					"charSetName",
					"Text",
					"->",
					"Nome do conjunto de caracteres"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"Número de conjuntos de caracteres"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Modo de processamento para quebras de linha"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"Texto do documento"
				]
			],
			"Summary": "retorna o conteúdo do arquivo como texto"
		}
	},
	"Email": {
		"attachments": {
			"Syntax": "**.attachments** : Collection",
			"Summary": "coleção de objeto(s) `4D.MailAttachment`"
		},
		"bcc": {
			"Syntax": "**.bcc** : Text<br/>**.bcc** : Object<br/>**.bcc** : Collection",
			"Summary": "Blind Carbon Copy (BCC) direções do e-mail"
		},
		"bodyStructure": {
			"Syntax": "**.bodyStructure** : Object",
			"Summary": "*EmailBodyPart*, ou seja, a estrutura MIME completa do corpo da mensagem (opcional)"
		},
		"bodyValues": {
			"Syntax": "**.bodyValues** : Object",
			"Summary": "*EmailBodyValue*, que contém um objeto para cada \\<partID\\> de `bodyStructure` (opcional)"
		},
		"cc": {
			"Syntax": "**.cc** : Text<br/>**.cc** : Object<br/>**.cc** : Collection",
			"Summary": "endereço(s) e-mail adicionais em Cópia de Carbon (CC) do e-mail"
		},
		"comments": {
			"Syntax": "**.comments** : Text",
			"Summary": "cabeçalho de comentários adicional"
		},
		"from": {
			"Syntax": "**.from** : Text<br/>**.from** : Object<br/>**.from** : Collection",
			"Summary": "a(s) endereço(es) de origem do e-mail"
		},
		"headers": {
			"Syntax": "**.headers** : Collection",
			"Summary": "de objetos `EmailHeader`, na ordem em que aparecem na mensagem"
		},
		"htmlBody": {
			"Syntax": "**.htmlBody** : Text",
			"Summary": "representação HTML da mensagem de e-mail (o conjunto de caracteres padrão é UTF-8) (opcional, somente SMTP)"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "ID exclusivo do servidor IMAP"
		},
		"inReplyTo": {
			"Syntax": "**.inReplyTo** : Text",
			"Summary": "identificador(es) de mensagem da(s) mensagem(ns) original(is) à(s) qual(is) a mensagem atual é uma resposta"
		},
		"keywords": {
			"Syntax": "**.keywords** : Object",
			"Summary": "conjunto de palavras-chave como um objeto, em que cada nome de propriedade é uma palavra-chave e cada valor é true"
		},
		"messageId": {
			"Syntax": "**.messageId** : Text",
			"Summary": "cabeçalho de identificador de mensagem (\"message-id\")"
		},
		"receivedAt": {
			"Syntax": "**.receivedAt** : Text",
			"Summary": "carimbo de data/hora da chegada do e-mail no servidor IMAP no formato ISO 8601 UTC (por exemplo: 2020-09-13T16:11:53Z)"
		},
		"references": {
			"Syntax": "**.references** : Collection",
			"Summary": "coleção de todos os IDs de mensagens na cadeia de resposta anterior"
		},
		"replyTo": {
			"Syntax": "**.replyTo** : Text<br/>**.replyTo** : Object<br/>**.replyTo** : Collection",
			"Summary": "endereços para respostas"
		},
		"sendAt": {
			"Syntax": "**.sendAt** : Text",
			"Summary": "Carimbo de e-mail no formato UTC ISO 8601"
		},
		"sender": {
			"Syntax": "**.sender** : Text<br/>**.sender** : Object<br/>**.sender** : Collection",
			"Summary": "endereços fonte do e-mail"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "(expresso em bytes) do objeto Email retornado pelo servidor IMAP"
		},
		"subject": {
			"Syntax": "**.subject** : Text",
			"Summary": "descrição do tópico"
		},
		"textBody": {
			"Syntax": "**.textBody** : Text",
			"Summary": "representação em texto simples da mensagem de e-mail (conjunto de caracteres padrão é UTF-8) (opcional, somente SMTP)"
		},
		"to": {
			"Syntax": "**.to** : Text<br/>**.to** : Object<br/>**.to** : Collection",
			"Summary": "os endereços dos destinatários primários de e-mail"
		}
	},
	"Entity": {
		"clone()": {
			"Syntax": "**.clone()** : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Nova entidade referenciando o registro"
				]
			],
			"Summary": "cria na memória uma nova entidade referenciando o mesmo registro que a entidade original"
		},
		"diff()": {
			"Syntax": "**.diff**( *entityToCompare* : 4D.Entity { ; *attributesToCompare* : Collection } ) : Collection",
			"Params": [
				[
					"entityToCompare",
					"4D. Entity",
					"->",
					"Entidade a ser comparada com a entidade original"
				],
				[
					"attributesToCompare",
					"Collection",
					"->",
					"Nome dos atributos a serem comparados"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Diferenças entre as entidades"
				]
			],
			"Summary": "compara o conteúdo de duas entidades e retorna suas diferenças"
		},
		"drop()": {
			"Syntax": "**.drop**( {*mode* : Integer} ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk force drop if stamp changed`: força o drop mesmo se a estampa tenha mudado"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Resultado da operação de exclusão"
				]
			],
			"Summary": "exclui os dados contidos na entidade do armazenamento de dados"
		},
		"first()": {
			"Syntax": "**.first()**: 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Referencia à primeira entidade da entity selection (Null se a seleção estiver vazia)"
				]
			],
			"Summary": "retorna uma referência à entidade na primeira posição da seleção de entidades à qual a entidade pertence"
		},
		"fromObject()": {
			"Syntax": "**.fromObject**( *filler* : Object )",
			"Params": [
				[
					"filler",
					"Object",
					"->",
					"Objeto para o qual vai preencher a entidade"
				]
			],
			"Summary": "preenche uma entidade com o conteúdo *filler*"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass()** : 4D.DataClass",
			"Params": [
				[
					"Resultados",
					"4D. DataClass",
					"<-",
					"Objeto DataClass ao qual a entidade pertence"
				]
			],
			"Summary": "retorna a dataclass da entidade"
		},
		"getKey()": {
			"Syntax": "**.getKey**( { *mode* : Integer } ) : any",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk key as string`: a chave primária é retornada como uma string, independentemente do tipo de chave primária"
				],
				[
					"Resultados",
					"any",
					"<-",
					"Valor da chave primária da entidade (Inteiro ou Texto)"
				]
			],
			"Summary": "retorna o valor da chave primária da entidade"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes()** : Text",
			"Params": [
				[
					"resultado",
					"Text",
					"<-",
					"Atributos de contexto linkados à entidade, separados por uma vírgula"
				]
			],
			"Summary": "retorna informações sobre o contexto de otimização usado pela entidade"
		},
		"getSelection()": {
			"Syntax": "**.getSelection()**: 4D.EntitySelection",
			"Params": [
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Seleção de entidade a que pertence a entidade (null se não for encontrado)"
				]
			],
			"Summary": "retorna a seleção da entidade à qual a entidade pertence"
		},
		"getStamp()": {
			"Syntax": "**.getStamp()** : Integer",
			"Params": [
				[
					"Resultados",
					"Integer",
					"<-",
					"Estampa da entidade (0 se a entidade foi criada)"
				]
			],
			"Summary": "retorna o valor atual do carimbo da entidade"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**( { *entitySelection* : 4D.EntitySelection } ) : Integer",
			"Params": [
				[
					"entitySelection",
					"4D. EntitySelection",
					"->",
					"A posição da entidade é dada de acordo com a selecção desta entidade"
				],
				[
					"Resultados",
					"Integer",
					"<-",
					"Posição da entidade numa selecção de entidade"
				]
			],
			"Summary": "retorna a posição da entidade em uma entity selection"
		},
		"isNew()": {
			"Syntax": "**.isNew()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"É True se a entidade acabou de ser criada e ainda não foi salva. Caso contrário, False."
				]
			],
			"Summary": "retorna True se a entidade à qual ela é aplicada tiver acabado de ser criada e ainda não tiver sido salva no repositório de dados"
		},
		"last()": {
			"Syntax": "**.last()** : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Referência para a última entidade de uma seleção de entidade (Null se não for encontrado)"
				]
			],
			"Summary": "retorna uma referência à entidade na última posição da seleção de entidades à qual a entidade pertence"
		},
		"lock()": {
			"Syntax": "**.lock**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk reload if stamp changed`: Recarregar antes de bloquear se o selo for alterado"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Resultado da operação de bloqueio"
				]
			],
			"Summary": "coloca um bloqueio pessimista no registro referenciado pela entidade"
		},
		"next()": {
			"Syntax": "**.next()** : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Referência a entidade anterior na seleção da entidade (Null se não for encontrado)"
				]
			],
			"Summary": "retorna uma referência à próxima entidade na seleção de entidades à qual a entidade pertence"
		},
		"previous()": {
			"Syntax": "**.previous()**  : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Referência para a próxima entidade de uma seleção de entidade (Null se não for encontrado)"
				]
			],
			"Summary": "retorna uma referência à entidade anterior na seleção de entidades à qual a entidade pertence"
		},
		"reload()": {
			"Syntax": "**.reload()** : Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto de estado"
				]
			],
			"Summary": "recarrega o conteúdo da entidade na memória"
		},
		"save()": {
			"Syntax": "**.save**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk auto merge`: ativa o modo de mesclagem automática"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Resultado da operação de salvamento"
				]
			],
			"Summary": "salva as alterações feitas na entidade"
		},
		"toObject()": {
			"Syntax": "**.toObject**() : Object<br/>**.toObject**( *filterString* : Text { ; *options* : Integer}  ) : Object<br/>**.toObject**( *filterCol* : Collection { ; *options* : Integer } ) : Object",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"Atributos a extrair (string separada por vírgulas)"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"Coleção de atributos a extrair"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: adiciona a propriedade \\_\\_KEY;<br/>`dk with stamp`: adiciona a propriedade \\_STAMP"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto criado a partir da entidade"
				]
			],
			"Summary": "retorna um objeto que foi criado a partir da entidade"
		},
		"touched()": {
			"Syntax": "**.touched()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se tiver modificado ao menos um atributo da entidade e ainda não for salvo, se não, False"
				]
			],
			"Summary": "retorna True se pelo menos um atributo de entidade tiver sido modificado desde que a entidade foi carregada na memória ou salva"
		},
		"touchedAttributes()": {
			"Syntax": "**.touchedAttributes()** : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Nomes de atributos touched ou coleção vazia"
				]
			],
			"Summary": "retorna os nomes dos atributos que foram modificados desde que a entidade foi carregada na memória"
		},
		"unlock()": {
			"Syntax": "**.unlock()** : Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto de estado"
				]
			],
			"Summary": "remove o bloqueio pessimista do registro correspondente à entidade"
		}
	},
	"EntitySelection": {
		"add()": {
			"Syntax": "**.add**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.add**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D. Entity",
					"->",
					"Entidade que deve ser adicinonada à entity selection"
				],
				[
					"entitySelection",
					"4D. EntitySelection",
					"->",
					"Seleção entidade paara ser adicionado a sellleção entidade originaal"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Seleção de entidades, incluindo a *entity* ou *entitySelection* adicionada"
				]
			],
			"Summary": "adiciona a *entidade* ou *entitySelection* especificada à seleção de entidade original e retorna a seleção de entidade modificada"
		},
		"and()": {
			"Syntax": "**.and**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.and**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D. Entity",
					"->",
					"Entidade a intersectar"
				],
				[
					"entitySelection",
					"4D. EntitySelection",
					"->",
					"Entity selection a intersectar"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Entity selection resultante da intersecção com o operador lógico AND"
				]
			],
			"Summary": "combina a seleção de entidades com um parâmetro *entity* ou *entitySelection* usando o operador lógico AND"
		},
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : 4D.Entity",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Índice da entidade a devolver"
				],
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"A entidade nesse índice"
				]
			],
			"Summary": "retorna a entidade na posição *index*, permitindo o uso de números inteiros positivos e negativos"
		},
		"average()": {
			"Syntax": "**.average**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota do atributo que se utilizará para o cálculo"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Media aritmética (média) dos valores das entidades para o atributo (Não se define para uma entity selection vazia)"
				]
			],
			"Summary": "retorna a média aritmética (média) de todos os valores não nulos de *attributePath* na seleção de entidades"
		},
		"clean()": {
			"Syntax": "**.clean**() : 4D.EntitySelection",
			"Params": [
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidades sem entidades excluídas"
				]
			],
			"Summary": "retorna uma nova seleção de entidade com base na seleção de entidade original, mas sem as entidades excluídas, se houver"
		},
		"contains()": {
			"Syntax": "**.contains**( *entity* : 4D.Entity ) : Boolean",
			"Params": [
				[
					"entity",
					"4D. Entity",
					"->",
					"Entidade a ser avaliada"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"Truse se a entidade pertencer à entity selection, senão False"
				]
			],
			"Summary": "retorna true se a referência da entidade pertencer à seleção de entidades"
		},
		"count()": {
			"Syntax": "**.count**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota do atributo que se utilizará para o cálculo"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Número de valores de *attributePath* que não são null na entity selection"
				]
			],
			"Summary": "retorna o número de entidades na seleção de entidades com um valor não nulo em *attributePath*"
		},
		"copy()": {
			"Syntax": "**.copy**( { *option* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck shared`: retorna uma seleção de entidade compartilhável"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Cópia da entity selection"
				]
			],
			"Summary": "retorna uma cópia da entity selection original"
		},
		"distinct()": {
			"Syntax": "**.distinct**( *attributePath* : Text { ; *options* : Integer } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota do atributo cujos valores quer obter"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk diacritical`, `dk count values`"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção apenas com valores distintos"
				]
			],
			"Summary": "retorna uma coleção contendo apenas valores distintos (diferentes) do *attributePath* na seleção da entidade"
		},
		"distinctPaths()": {
			"Syntax": "**.distinctPaths**( *attribute* : Text ) : Collection",
			"Params": [
				[
					"atributo",
					"Text",
					"->",
					"Nome do atributo do objecto cujos caminhos pretende obter"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Nova colecção com caminhos distintos"
				]
			],
			"Summary": "retorna uma coleção de caminhos distintos encontrados no objeto indexado *atributo* para a seleção da entidade"
		},
		"drop()": {
			"Syntax": "**.drop**( { *mode* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk stop dropping on first error`: para a execução do método na primeira entidade não eliminável"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Seleção de entidade vazia se bem-sucedida; caso contrário, seleção de entidade contendo entidades não descartáveis"
				]
			],
			"Summary": "remove as entidades pertencentes à seleção de entidades da tabela relacionada à sua classe de dados no armazenamento de dados"
		},
		"extract()": {
			"Syntax": "**.extract**( *attributePath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *attributePath* { ; *targetPath* } { ; *...attributePathN* : Text ; *targetPathN* : Text } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota de atributo cujos valores serão extraídos para nova coleção"
				],
				[
					"targetpath",
					"Text",
					"->",
					"Rota ou nome do atributo objetivo"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: inclui atributos nulos na coleção retornada (ignorado por padrão)"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção contendo valores extraídos"
				]
			],
			"Summary": "retorna uma coleção contendo valores *attributePath* extraídos da seleção de entidades"
		},
		"first()": {
			"Syntax": "**.first**() : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Referência para a primeira entidade da seleção da entidade (Null se a seleção estiver vazia)"
				]
			],
			"Summary": "retorna uma referência à entidade na primeira posição da seleção de entidades"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass**() : 4D.DataClass",
			"Params": [
				[
					"Resultados",
					"4D. DataClass",
					"<-",
					"Objeto dataclass ao qual a seleção de entidade pertence"
				]
			],
			"Summary": "retorna a classe de dados da seleção da entidade"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes**() : Text",
			"Params": [
				[
					"resultado",
					"Text",
					"<-",
					"Atributos de contexto conectados à seleção de entidade, separados por uma vírgula"
				]
			],
			"Summary": "retorna informações sobre o contexto de otimização usado pela seleção de entidades"
		},
		"isAlterable()": {
			"Syntax": "**.isAlterable**() : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a seleção de entidades for alterável, senão False"
				]
			],
			"Summary": "retorna True se a seleção da entidade for alterável"
		},
		"isOrdered()": {
			"Syntax": "**.isOrdered**() : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a seleção de entidade for ordenada, senão False"
				]
			],
			"Summary": "retorna True se a seleção da entidade estiver ordenada"
		},
		"last()": {
			"Syntax": "**.last**() : 4D.Entity",
			"Params": [
				[
					"Resultados",
					"4D. Entity",
					"<-",
					"Referência à última entidade da seleção de entidades (Null se a seleção de entidades estiver vazia)"
				]
			],
			"Summary": "retorna uma referência à entidade na última posição da seleção de entidades"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "retorna o número de entidades na seleção de entidades"
		},
		"max()": {
			"Syntax": "**.max**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota do atributo que se utilizará para o cálculo"
				],
				[
					"Resultados",
					"any",
					"<-",
					"Maior valor do atributo"
				]
			],
			"Summary": "retorna o valor mais alto (ou máximo) entre todos os valores de *attributePath* na seleção da entidade"
		},
		"min()": {
			"Syntax": "**.min**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota do atributo que se utilizará para o cálculo"
				],
				[
					"Resultados",
					"any",
					"<-",
					"Menor valor do atributo"
				]
			],
			"Summary": "retorna o valor mais baixo (ou mínimo) entre todos os valores de attributePath na seleção de entidades"
		},
		"minus()": {
			"Syntax": "**.minus**( *entity* : 4D.Entity { ; *keepOrder* : Integer } ) : 4D.EntitySelection<br/>**.minus**( *entitySelection* : 4D.EntitySelection { ; *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D. Entity",
					"->",
					"Entidade a substrair"
				],
				[
					"entitySelection",
					"4D. EntitySelection",
					"->",
					"seleção de entidade a subtrair"
				],
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered` (inteiro) para manter a ordem inicial na seleção da entidade resultante"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidade ou uma nova referência na seleção de entidade existente"
				]
			],
			"Summary": "exclui da seleção de entidades à qual é aplicada a *entidade* ou as entidades de *entitySelection* e retorna a seleção de entidades resultante"
		},
		"or()": {
			"Syntax": "**.or**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.or**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D. Entity",
					"->",
					"Entidade a intersectar"
				],
				[
					"entitySelection",
					"4D. EntitySelection",
					"->",
					"Entity selection a intersectar"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidade ou nova referência à seleção de entidade original"
				]
			],
			"Summary": "combina a seleção de entidades com o parâmetro *entity* ou *entitySelection* usando o operador lógico OR (não exclusivo)"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( *pathString* : Text ) : 4D.EntitySelection<br/>**.orderBy**( *pathObjects* : Collection ) : 4D.EntitySelection",
			"Params": [
				[
					"pathString",
					"Text",
					"->",
					"Rota(s) de atributos e instruções de classificação para a entity selection"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"Coleção de objetos criterio"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova entity selection na ordem especificada"
				]
			],
			"Summary": "retorna uma nova seleção de entidade ordenada contendo todas as entidades da seleção de entidade na ordem especificada pelos critérios *pathString* ou *pathObjects*"
		},
		"orderByFormula()": {
			"Syntax": "**.orderByFormula**( *formulaString* : Text { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection<br/>**.orderByFormula**( *formulaObj* : Object { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"Formula string"
				],
				[
					"formulaObj",
					"Object",
					"->",
					"Objecto fórmula"
				],
				[
					"sortOrder",
					"Integer",
					"->",
					"`dk ascending` (padrão) ou `dk descending`"
				],
				[
					"settings",
					"Object",
					"->",
					"Parâmetros da fórmula"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidade ordenada"
				]
			],
			"Summary": "retorna uma nova seleção de entidades ordenada"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Criterios de pesquisa como string"
				],
				[
					"formula",
					"Object",
					"->",
					"Criterios de pesquisa como objeto fórmula"
				],
				[
					"value",
					"any",
					"->",
					"Valores a usar para placeholders indexados"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Opções de pesquisa: parâmetros, atributos, args, allowFormulas, contexto, queryPath,queryPlan"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidade composta de entidades da seleção de entidades que atendem aos critérios de pesquisa especificados em *queryString* ou *formula*"
				]
			],
			"Summary": "busca entidades que atendam aos critérios de pesquisa especificados em *queryString* ou *formula* e (opcionalmente) *value*(s) entre todas as entidades na seleção de entidades"
		},
		"queryPath": {
			"Syntax": "**.queryPath** : Text",
			"Summary": "contém uma descrição detalhada da consulta conforme ela foi realmente executada pelo 4D"
		},
		"queryPlan": {
			"Syntax": "**.queryPlan** : Text",
			"Summary": "contém uma descrição detalhada da consulta imediatamente antes de ser executada (ou seja, a consulta planejada)"
		},
		"refresh()": {
			"Syntax": "**.refresh**()",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "invalida imediatamente os dados de seleção de entidade no cache ORDA local"
		},
		"selected()": {
			"Syntax": "**.selected**( *selectedEntities* : 4D.EntitySelection ) : Object",
			"Params": [
				[
					"Parâmetros",
					"4D. EntitySelection",
					"->",
					"Seleção de entidade com entidades para qual saber o ranking da seleção de entidade"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Intervalos da seleção de entidade da seleção de entidade"
				]
			],
			"Summary": "retorna um objeto que descreve a(s) posição(ões) de *selectedEntities* na seleção da entidade original"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Indice para iniciar a operação em (incluido)"
				],
				[
					"end",
					"Integer",
					"->",
					"Final do índice (não incluído)"
				],
				[
					"Resultados",
					"4D. EntitySelection",
					"<-",
					"Nova seleção de entidade contendo entidades fatiadas (cópia superficial)"
				]
			],
			"Summary": "retorna uma parte de uma seleção de entidades em uma nova seleção de entidades"
		},
		"sum()": {
			"Syntax": "**.sum**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Rota do atributo que se utilizará para o cálculo"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Soma dos valores da seleção de entidade"
				]
			],
			"Summary": "retorna a soma de todos os valores *attributePath* na seleção de entidades"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**( { *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer } } ) : Collection<br/>**.toCollection**( *filterString* : Text {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection<br/>**.toCollection**( *filterCol* : Collection {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"String com caminho(s) de atributo(s) de entidade a extrair"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"Coleção de caminho(s) de atributo(s) de entidade a extrair"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: adiciona a chave primária<br/>`dk with stamp`: adiciona o marcador"
				],
				[
					"begin",
					"Integer",
					"->",
					"Designa o índice inicial"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Número de entidades a extrair"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Colecção de objectos contendo atributos e valores de selecção de entidades"
				]
			],
			"Summary": "cria e retorna uma coleção em que cada elemento é um objeto que contém um conjunto de propriedades e valores"
		}
	},
	"File": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se o arquivo foi criado com sucesso, false caso contrário"
				]
			],
			"Summary": "cria um arquivo no disco de acordo com as propriedades do objeto `File`"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D. Folder",
					"->",
					"Pasta de destino para o pseudónimo ou atalho"
				],
				[
					"aliasName",
					"Text",
					"->",
					"Nome do pseudónimo ou atalho"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"Tipo de ligação do pseudónimo"
				],
				[
					"Resultados",
					"4D. File",
					"<-",
					"Referência a pseudónimo ou ficheiro de atalho"
				]
			],
			"Summary": "cria um alias (macOS) ou um atalho (Windows)"
		},
		"delete()": {
			"Syntax": "**.delete**()",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "exclui o arquivo"
		},
		"getAppInfo()": {
			"Syntax": "**.getAppInfo**() : Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Informações do arquivo da aplicação"
				]
			],
			"Summary": "retorna o conteúdo de informações de arquivos de aplicação como um objeto"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D. Folder",
					"->",
					"Pasta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nome completo do ficheiro movido"
				],
				[
					"Resultados",
					"4D. File",
					"<-",
					"Arquivo movido"
				]
			],
			"Summary": "move ou renomeia o objeto `File` para a *destinationFolder* especificada"
		},
		"open()": {
			"Syntax": "**.open**( { *mode* : Text } ) : 4D.FileHandle<br/>**.open**( { *options* : Object } ) : 4D.FileHandle",
			"Params": [
				[
					"mode",
					"Text",
					"->",
					"Modo de abertura: \"read\", \"write\", \"append\""
				],
				[
					"options",
					"Object",
					"->",
					"Opções de abertura"
				],
				[
					"Resultados",
					"4D.FileHandle",
					"<-",
					"Novo objeto File handle"
				]
			],
			"Summary": "cria e retorna um novo objeto 4D.FileHandle no arquivo, no *mode* especificado ou com as *options* especificadas"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.File",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"Novo nome completo para o ficheiro"
				],
				[
					"Resultados",
					"4D. File",
					"<-",
					"Ficheiro renomeado"
				]
			],
			"Summary": "renomeia o arquivo com o nome que você passou em *newName* e retorna o objeto `File` renomeado"
		},
		"setAppInfo()": {
			"Syntax": "**.setAppInfo**( *info* : Object )",
			"Params": [
				[
					"info",
					"Object",
					"->",
					"Propriedades para escrever em informações de um arquivo de aplicativo"
				]
			],
			"Summary": "escreve as propriedades *info* como o conteúdo da informação de um arquivo de aplicação"
		},
		"setContent()": {
			"Syntax": "**.setContent** ( *content* : Blob )",
			"Params": [
				[
					"content",
					"BLOB",
					"->",
					"Novos conteúdos para o arquivo"
				]
			],
			"Summary": "reescreve todo o conteúdo do arquivo usando os dados armazenados no *content* BLOB"
		},
		"setText()": {
			"Syntax": "**.setText** ( *text* : Text {; *charSetName* : Text { ; *breakMode* : Integer } } )<br/>**.setText** ( *text* : Text {; *charSetNum* : Integer { ; *breakMode* : Integer } } )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Texto a armazenar no arquivo"
				],
				[
					"charSetName",
					"Text",
					"->",
					"Nome do conjunto de caracteres"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"Número de conjuntos de caracteres"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Modo de processamento para quebras de linha"
				]
			],
			"Summary": "escreve *text* como o novo conteúdo do arquivo"
		},
		"_inheritedFrom_": "Document"
	},
	"FileHandle": {
		"breakModeRead": {
			"Syntax": "**.breakModeRead** : Text",
			"Summary": "o modo de processamento de quebras de linha usado ao ler o arquivo"
		},
		"breakModeWrite": {
			"Syntax": "**.breakModeWrite** : Text",
			"Summary": "o modo de processamento de quebras de linha usado ao escrever no arquivo"
		},
		"charset": {
			"Syntax": "**.charset** : Text",
			"Summary": "o conjunto de caracteres usado durante a leitura ou escrita para o arquivo"
		},
		"eof": {
			"Syntax": "**.eof** : Boolean",
			"Summary": "True é o `offset` chegou ao fim do arquivo, e False caso contrário"
		},
		"file": {
			"Syntax": "**.file** : 4D.File",
			"Summary": "o objeto 4D.File no qual o identificador foi criado"
		},
		"getSize()": {
			"Syntax": "**.getSize()** : Real",
			"Params": [
				[
					"Resultados",
					"Real",
					"<-",
					"Tamanho do documento em bytes"
				]
			],
			"Summary": "retorna o tamanho atual do documento, expresso em bytes"
		},
		"mode": {
			"Syntax": "**.mode** : Text",
			"Summary": "o modo em que o identificador de arquivos foi criado: \"read\", \"write\", ou \"append\""
		},
		"offset": {
			"Syntax": "**.offset** : Real",
			"Summary": "o deslocamento atual do fluxo de dados (posição no documento)"
		},
		"readBlob()": {
			"Syntax": "**.readBlob**( *bytes* : Real ) : 4D.Blob",
			"Params": [
				[
					"bytes",
					"Real",
					"->",
					"Número de bytes a ler"
				],
				[
					"Resultados",
					"4D.Blob",
					"<-",
					"Bytes lidos do arquivo"
				]
			],
			"Summary": "retorna um blob de tamanho *bytes* do arquivo, começando da posição atual"
		},
		"readLine()": {
			"Syntax": "**.readLine()** : Text",
			"Params": [
				[
					"Resultados",
					"Text",
					"<-",
					"Linha de texto"
				]
			],
			"Summary": "retorna uma linha de texto da posição atual até que um delimitador de fim de linha seja encontrado ou o final do documento seja alcançado"
		},
		"readText()": {
			"Syntax": "**.readText**( { *stopChar* : Text } ) : Text",
			"Params": [
				[
					"stopChar",
					"Text",
					"->",
					"Caracter no qual parar a leitura"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"Texto do arquivo"
				]
			],
			"Summary": "retorna texto do arquivo, a partir da posição atual até que a primeira string *stopChar* seja encontrada (se passada) ou o fim do arquivo seja alcançada"
		},
		"setSize()": {
			"Syntax": "**.setSize**( *size* : Real )",
			"Params": [
				[
					"size",
					"Real",
					"->",
					"Novo tamanho do documento em bytes"
				]
			],
			"Summary": "define um novo tamanho de *size* em bytes para o documento"
		},
		"writeBlob()": {
			"Syntax": "**.writeBlob**( *blob* : 4D.Blob )",
			"Params": [
				[
					"blob",
					"4D.Blob",
					"->",
					"Blob para escrever no arquivo"
				]
			],
			"Summary": "escreve *blob* no arquivo, começando pela posição atual"
		},
		"writeLine()": {
			"Syntax": "**.writeLine**( *lineOfText* : Text )",
			"Params": [
				[
					"lineOfText",
					"Text",
					"->",
					"Texto para string"
				]
			],
			"Summary": "escreve o conteúdo *lineOfText* na posição atual e insere um delimitador de linha"
		},
		"writeText()": {
			"Syntax": "**.writeText**( *textToWrite* : Text )",
			"Params": [
				[
					"textToWrite",
					"Text",
					"->",
					"Texto para string"
				]
			],
			"Summary": "escreve o conteúdo *textToWrite* na posição atual e não insere um delimitador final de fim-de-linha"
		}
	},
	"Folder": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a pasta foi criada com sucesso, false caso contrário"
				]
			],
			"Summary": "cria uma pasta no disco de acordo com as propriedades do objeto `Folder`"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D. Folder",
					"->",
					"Pasta de destino para o pseudónimo ou atalho"
				],
				[
					"aliasName",
					"Text",
					"->",
					"Nome do pseudónimo ou atalho"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"Tipo de ligação do pseudónimo"
				],
				[
					"Resultados",
					"4D. File",
					"<-",
					"Alias ou referência de atalho"
				]
			],
			"Summary": "cria um alias (macOS) ou um atalho (Windows)"
		},
		"delete()": {
			"Syntax": "**.delete**( { *option* : Integer } )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Opção de eliminação de pasta"
				]
			],
			"Summary": "exclui a pasta"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D. Folder",
					"->",
					"Pasta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nome completo para a pasta movida"
				],
				[
					"Resultados",
					"4D. Folder",
					"<-",
					"Pasta movida"
				]
			],
			"Summary": "move ou renomeia o objeto `Folder` (pasta de origem) para a *destinationFolder* especificada"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.Folder",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"Novo nome completo para a pasta"
				],
				[
					"Resultados",
					"4D. Folder",
					"<-",
					"Renomeado arquivo"
				]
			],
			"Summary": "renomeia a pasta com o nome que você passou em *newName* e retorna o objeto `Folder` renomeado"
		},
		"_inheritedFrom_": "Directory"
	},
	"Function": {
		"apply()": {
			"Syntax": "**.apply**() : any<br/>**.apply**( *thisObj* : Object { ; *formulaParams* : Collection } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"Objeto a ser retornado pelo comando This na fórmula"
				],
				[
					"formulaParams",
					"Collection",
					"->",
					"Coleção de valores a serem passados como $1...$n quando `formula` for executado"
				],
				[
					"Resultados",
					"any",
					"<-",
					"Valores de execução de fórmula"
				]
			],
			"Summary": "executa o objeto `formula` ao qual ele é aplicado e retorna o valor resultante"
		},
		"call()": {
			"Syntax": "**.call**() : any<br/>**.call**( *thisObj* : Object { ; ...*params* : any } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"Objeto a ser retornado pelo comando This na fórmula"
				],
				[
					"params",
					"any",
					"->",
					"Valores a serem passados como $1...$n quando a fórmula for executada"
				],
				[
					"Resultados",
					"any",
					"<-",
					"Valores de execução de fórmula"
				]
			],
			"Summary": "executa o objeto `formula` ao qual ele está aplicado e retorna o valor resultante"
		},
		"source": {
			"Syntax": "**.source** : Text",
			"Summary": "contém a expressão de origem da `fórmula` como texto"
		}
	},
	"HTTPAgent": {
		"params": {
			"Syntax": "**options** : Object",
			"Summary": "as opções usadas atuais do agente HTTPent"
		},
		"requestsCount": {
			"Syntax": "**requestsCount** : Integer",
			"Summary": "o número de solicitações atualmente tratadas pelo HTTPAgent"
		},
		"freeSocketsCount": {
			"Syntax": "**freeSocketsCount** : Integer",
			"Summary": "o número de sockets livres de `maxSockets` associados ao HTTPAgent"
		}
	},
	"HTTPRequest": {
		"agent": {
			"Syntax": "**agent** : 4D.HTTPAgent",
			"Summary": "o objeto `agent`passado em `options` ou o objeto agente global se ele foi omitido"
		},
		"dataType": {
			"Syntax": "**dataType** : Text",
			"Summary": "o `dataType` passado no objeto `options` ao chamar new(), \"auto\" se foi omitido"
		},
		"encoding": {
			"Syntax": "**encoding** : Text",
			"Summary": "o `encoding` passado no objeto `options` ao chamar new(), \"UTF-8\" se ele foi omisso"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "a coleção de todos os erros se pelo menos um erro tiver sido acionado"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "o `headers` passado no objeto `options` ao chamar new()"
		},
		"method": {
			"Syntax": "**method** : Text",
			"Summary": "o `método` passado no objeto `options` ao chamar new()"
		},
		"protocol": {
			"Syntax": "**protocol** : Text",
			"Summary": "o `protocolo` passado no objeto `options` ao chamar new()"
		},
		"response": {
			"Syntax": "**response** : Object",
			"Summary": "a resposta à solicitação se ela tiver recebido pelo menos o código de estado, indefinido caso contrário"
		},
		"returnResponseBody": {
			"Syntax": "**returnResponseBody** : Boolean",
			"Summary": "o `returnResponseBody` passado em o objeto `options` ao chamar new()"
		},
		"terminate()": {
			"Syntax": "**.terminate()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "aborta a solicitação HTTP"
		},
		"terminated": {
			"Syntax": "**terminated** : Boolean",
			"Summary": "True se a solicitação for encerrada (após a chamada para `onTerminate`), false caso contrário"
		},
		"timeout": {
			"Syntax": "**timeout** : Real",
			"Summary": "o `timeout` passado no objeto `options` ao chamar new()"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "a URL da solicitação HTTP"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : 4D.HTTPRequest",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Tempo máximo de espera em segundos"
				],
				[
					"Resultados",
					"4D.HTTPRequest",
					"<-",
					"HTTPRequest object"
				]
			],
			"Summary": "espera por uma resposta do servidor ou até o `timeout` especificado ser alcançado"
		}
	},
	"IMAPTransporter": {
		"addFlags()": {
			"Syntax": "**.addFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Longint  ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"Coleção de strings: IDs únicos de mensagens (texto)<br/>Texto: ID único de uma mensagem<br/>Longint (todos IMAP): Todas as mensagens na caixa de correio seleccionada"
				],
				[
					"keywords",
					"Object",
					"->",
					"Flags de palavras chaves a adicionar"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação addFlags"
				]
			],
			"Summary": "adiciona sinalizadores aos `msgIDs` para as `keywords` especificadas"
		},
		"append()": {
			"Syntax": "**.append**( *mailObj* : Object ; *destinationBox* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"mailObj",
					"Object",
					"->",
					"Objeto Email"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Caixa de email que vai receber o objeto Email"
				],
				[
					"options",
					"Object",
					"->",
					"Objeto que contém informações do charset"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação anexada"
				]
			],
			"Summary": "anexa um `mailObj` à `destinationBox`"
		},
		"checkConnectionDelay": {
			"Syntax": "**.checkConnectionDelay** : Integer",
			"Summary": "o tempo máximo (em segundos) permitido antes de verificar a conexão com o servidor"
		},
		"copy()": {
			"Syntax": "**.copy**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.copy**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Coleção de identificadores únicos de mensagens (strings)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: todas as mensagens na caixa de correio selecionada"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Caixa de correio para receber mensagens copiadas"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação anexada"
				]
			],
			"Summary": "copia as mensagens definidas por *msgsIDs* ou *allMsgs* para *destinationBox* no servidor IMAP"
		},
		"createBox()": {
			"Syntax": "**.createBox**( *name* :  Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome da nova caixa de correio"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação de criação da caixa de correio"
				]
			],
			"Summary": "cria uma caixa de correio com o `name` fornecido"
		},
		"delete()": {
			"Syntax": "**.delete**( *msgsIDs* : Collection ) : Object<br/>**.delete**( *allMsgs* : Integer ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Coleção de identificadores únicos de mensagens (strings)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: todas as mensagens na caixa de correio selecionada"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação apagada"
				]
			],
			"Summary": "define o sinalizador \"deleted\" para as mensagens definidas em `msgsIDs` ou `allMsgs`"
		},
		"deleteBox()": {
			"Syntax": "**.deleteBox**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome da caixa de correio a apagar"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação de eliminação da caixa de correio"
				]
			],
			"Summary": "remove permanentemente a caixa de correio com o `name` fornecido do servidor IMAP"
		},
		"expunge()": {
			"Syntax": "**.expunge()** : Object",
			"Summary": "remove todas as mensagens com o sinalizador \"deleted\" do servidor de e-mail IMAP."
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo**( { *name* : Text }) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome da nova caixa de correio"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"objecto boxInfo"
				]
			],
			"Summary": "retorna um objeto `boxInfo` correspondente à maibox atual ou à caixa de correio *name*"
		},
		"getBoxList()": {
			"Syntax": "**.getBoxList**( { *parameters* : Object } ) : Collection",
			"Params": [
				[
					"parameters",
					"Object",
					"->",
					"Parâmetros"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de objetos da caixa de correio"
				]
			],
			"Summary": "retorna uma coleção de caixas de correio que descreve todas as caixas de correio disponíveis"
		},
		"getDelimiter()": {
			"Syntax": "**.getDelimiter()** : Text",
			"Params": [
				[
					"Resultados",
					"Text",
					"<-",
					"Caractere delimitador de hierarquia"
				]
			],
			"Summary": "retorna o caractere usado para delimitar os níveis de hierarquia no nome da caixa de correio"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber*: Integer { ; *options* : Object } ) : Object<br/>**.getMail**( *msgID*: Text { ; *options* : Object } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número sequencial da mensagem"
				],
				[
					"msgID",
					"Text",
					"->",
					"ID única da mensagem"
				],
				[
					"options",
					"Object",
					"->",
					"Instruções de tratamento de mensagens"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto email"
				]
			],
			"Summary": "retorna o objeto `Email` correspondente ao *msgNumber* ou *msgID* na caixa de correio designada pelo `IMAP_transporter`"
		},
		"getMails()": {
			"Syntax": "**.getMails**( *ids* : Collection { ; *options* : Object } ) : Object<br/>**.getMails**( *startMsg* : Integer ; *endMsg* : Integer { ; *options* : Object } ) : Object",
			"Params": [
				[
					"ids",
					"Collection",
					"->",
					"Colecção de identificação da mensagem"
				],
				[
					"startMsg",
					"Integer",
					"->",
					"Número sequencial da primeira mensagem"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"Número sequencial da última mensagem"
				],
				[
					"options",
					"Object",
					"->",
					"Instruções de tratamento de mensagens"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto contendo:<br/><ul><li>uma coleção de objetos de e-mail e</li><li>uma coleção de IDs ou números para mensagens ausentes, se houver</li></ul>"
				]
			],
			"Summary": "retorna um objeto que contém uma coleção de objetos `Email`"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer { ; *updateSeen* : Boolean } ) : Blob<br/>**.getMIMEAsBlob**( *msgID* : Text { ; *updateSeen* : Boolean } ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número sequencial da mensagem"
				],
				[
					"msgID",
					"Text",
					"->",
					"ID única da mensagem"
				],
				[
					"updateSeen",
					"Parâmetros",
					"->",
					"Se Verdadeiro, a mensagem é marcada \"visto\" na caixa de correio. Se Falso, a mensagem é deixada intocada."
				],
				[
					"Resultados",
					"BLOB",
					"<-",
					"Blob da string MIME retornado do servidor mail"
				]
			],
			"Summary": "retorna um BLOB contendo o conteúdo MIME da mensagem correspondente ao *msgNumber* ou *msgID* na caixa de correio designada pelo `IMAP_transporter`"
		},
		"move()": {
			"Syntax": "**.move**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.move**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Coleção de identificadores únicos de mensagens (strings)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: todas as mensagens na caixa de correio selecionada"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Caixa de correio para receber mensagens movimentadas"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação de mudança"
				]
			],
			"Summary": "move as mensagens definidas por *msgsIDs* ou *allMsgs* para *destinationBox* no servidor IMAP"
		},
		"numToID()": {
			"Syntax": "**.numToID**( *startMsg* : Integer ; *endMsg* : Integer ) : Collection",
			"Params": [
				[
					"startMsg",
					"Integer",
					"->",
					"Número sequencial da primeira mensagem"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"Número sequencial da última mensagem"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Colecção de identificações únicas"
				]
			],
			"Summary": "converte os números de sequência em IDs exclusivos do IMAP para as mensagens no intervalo sequencial designado por *startMsg* e *endMsg*"
		},
		"removeFlags()": {
			"Syntax": "**.removeFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Longint ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"Coleção de strings: IDs únicos de mensagens (texto)<br/>Texto: ID único de uma mensagem<br/>Longint (todos IMAP): Todas as mensagens na caixa de correio seleccionada"
				],
				[
					"keywords",
					"Object",
					"->",
					"Flags de palavras-chave a remover"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação removeFlags"
				]
			],
			"Summary": "remove os sinalizadores dos `msgIDs` para as `keywords` especificadas"
		},
		"renameBox()": {
			"Syntax": "**.renameBox**( *currentName* : Text ; *newName* : Text ) : Object",
			"Params": [
				[
					"currentName",
					"Text",
					"->",
					"Nome da caixa de correio actual"
				],
				[
					"newName",
					"Text",
					"->",
					"Nome da nova caixa de correio"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação de renomeamento"
				]
			],
			"Summary": "altera o nome de uma caixa de correio no servidor IMAP"
		},
		"searchMails()": {
			"Syntax": "**.searchMails**( *searchCriteria* : Text ) : Collection",
			"Params": [
				[
					"searchCriteria",
					"Text",
					"->",
					"Critérios de pesquisa"
				],
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de números de mensagens"
				]
			],
			"Summary": "procura por mensagens que correspondam aos *searchCriteria* fornecidos na caixa de correio atual"
		},
		"selectBox()": {
			"Syntax": "**.selectBox**( *name* : Text { ; *state* : Integer } ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome da nova caixa de correio"
				],
				[
					"state",
					"Integer",
					"->",
					"Estado de acesso à caixa de correio"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"objecto boxInfo"
				]
			],
			"Summary": "seleciona a caixa de correio *name* como a caixa de correio atual"
		},
		"subscribe()": {
			"Syntax": "**.subscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome da nova caixa de correio"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação de subscrição"
				]
			],
			"Summary": "permite adicionar a caixa de correio especificada ao conjunto de caixas de correio \"subscritas\" do servidor IMAP"
		},
		"unsubscribe()": {
			"Syntax": "**.unsubscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome da nova caixa de correio"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da operação unsubscribe"
				]
			],
			"Summary": "remove uma caixa de correio de um conjunto de caixas de correio inscritas"
		},
		"_inheritedFrom_": "Transporter"
	},
	"IncomingMessage": {
		"getBlob()": {
			"Syntax": "**.getBlob**() : Blob",
			"Params": [
				[
					"Resultados",
					"Blob",
					"<-",
					"Body of the request as a Blob"
				]
			],
			"Summary": "retorna o corpo da solicitação como um Blob"
		},
		"getHeader()": {
			"Syntax": "**.getHeader**( *key* : Text ) : Text",
			"Params": [
				[
					"\\",
					"",
					"Text",
					"->",
					"Propriedade de cabeçalho a obter"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"Valor da propriedade do cabeçalho"
				]
			],
			"Summary": "retorna o valor do cabeçalho *key*"
		},
		"getJSON()": {
			"Syntax": "**.getJSON**() : Variant",
			"Params": [
				[
					"Resultados",
					"Diferente de",
					"<-",
					"JSON resolution of the body of the request"
				]
			],
			"Summary": "retorna o corpo da solicitação como uma resolução JSON"
		},
		"getPicture()": {
			"Syntax": "**.getPicture**() : Picture",
			"Params": [
				[
					"Resultados",
					"Imagem",
					"<-",
					"Body of the request as picture"
				]
			],
			"Summary": "returns the body of the request as a picture (in case of a body sent as a picture)"
		},
		"getText()": {
			"Syntax": "**.getText**() : Text",
			"Params": [
				[
					"Resultados",
					"Text",
					"<-",
					"Corpo da solicitação como texto"
				]
			],
			"Summary": "retorna o corpo da solicitação como valor de texto"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "os cabeçalhos atuais da mensagem recebida como pares chave/valor (strings)"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "a URL da solicitação sem a parte *IP:port* e como um string"
		},
		"urlPath": {
			"Syntax": "**urlPath** : Collection",
			"Summary": "the URL of the request without the *IP:port* part and as a collection of strings"
		},
		"urlQuery": {
			"Syntax": "**urlQuery** : Object",
			"Summary": "os parâmetros da solicitação quando eles são fornecidos no URL como pares de chave/valor"
		},
		"verb": {
			"Syntax": "**verb** : Text",
			"Summary": "o verbo usado pelo pedido"
		}
	},
	"MailAttachment": {
		"cid": {
			"Syntax": "**.cid** : Text",
			"Summary": "o ID do anexo"
		},
		"disposition": {
			"Syntax": "**.disposition** : Text",
			"Summary": "o valor do cabeçalho \\`Content-Disposition"
		},
		"getContent()": {
			"Syntax": "**.getContent()** : 4D.Blob",
			"Params": [
				[
					"Resultados",
					"4D. Blob",
					"<-",
					"Conteúdo do anexo"
				]
			],
			"Summary": "retorna o conteúdo do objeto anexo em um objeto `4D.Blob`"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "o nome e a extensão do anexo"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "o caminho POSIX do arquivo de anexo, se ele existir"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "o caminho do arquivo de anexo expresso com a sintaxe atual da plataforma"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "o valor do cabeçalho `size` do arquivo anexo"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "o `content-type` do arquivo anexo"
		}
	},
	"OutgoingMessage": {
		"body": {
			"Syntax": "**body** : any",
			"Summary": "o corpo da mensagem enviada"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "os cabeçalhos atuais da mensagem de saída como pares chave/valor"
		},
		"setBody()": {
			"Syntax": "**.setBody**( *body* : any )",
			"Params": [
				[
					"body",
					"any",
					"->",
					"Corpo da mensagem de saída"
				]
			],
			"Summary": "define a mensagem de saída *body*"
		},
		"setHeader()": {
			"Syntax": "**.setHeader**( *key* : Text ; *value* : Text )",
			"Params": [
				[
					"\\",
					"",
					"Text",
					"->",
					"Propriedade de cabeçalho para definir"
				],
				[
					"value",
					"Text",
					"->",
					"Valor da propriedade do cabeçalho"
				]
			],
			"Summary": "define o cabeçalho de mensagem de saída *chave* com o *valor*"
		},
		"setStatus()": {
			"Syntax": "**.setStatus**( *status* : Integer )",
			"Params": [
				[
					"status",
					"Integer",
					"->",
					"Status para definir"
				]
			],
			"Summary": "define a propriedade `status` com o *status*"
		},
		"status": {
			"Syntax": "**status** : Integer",
			"Summary": "o status atual da mensagem de saída"
		}
	},
	"POP3Transporter": {
		"delete()": {
			"Syntax": "**.delete**( *msgNumber* : Integer )",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número da mensagem que vai ser apagada"
				]
			],
			"Summary": "flags do e-mail *msgNumber* para exclusão do servidor POP3"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo()** : Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"objecto boxInfo"
				]
			],
			"Summary": "retorna um objeto `boxInfo` correspondente à caixa de correio designada pelo `transporter POP3 `"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber* : Integer { ; *headerOnly* : Boolean } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número da mensagem que na lista"
				],
				[
					"headerOnly",
					"Parâmetros",
					"->",
					"True para descarregar apenas os cabeçalhos de correio electrónico (por defeito é False)"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto email"
				]
			],
			"Summary": "retorna o objeto `Email` correspondente ao *msgNumber* na caixa de correio designada pelo `transporter POP3`"
		},
		"getMailInfo()": {
			"Syntax": "**.getMailInfo**( *msgNumber* : Integer ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número da mensagem que na lista"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"mailInfo object"
				]
			],
			"Summary": "retorna um objeto `mailInfo` correspondente ao *msgNumber* na caixa de correio designada pelo `transporter POP3`"
		},
		"getMailInfoList()": {
			"Syntax": "**.getMailInfoList()** : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de objetos `mailInfo`"
				]
			],
			"Summary": "retorna uma coleção de objetos `mailInfo` descrevendo todas as mensagens na caixa de correio designada pelo `transporter POP3 `"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número da mensagem que na lista"
				],
				[
					"Resultados",
					"Blob",
					"<-",
					"Blob da string MIME retornado do servidor mail"
				]
			],
			"Summary": "retorna um BLOB contendo o conteúdo MIME da mensagem correspondente ao *msgNumber* na caixa de correio designada pelo `POP3_transportter`"
		},
		"undeleteAll()": {
			"Syntax": "**.undeleteAll()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "remove todos os sinalizadores de exclusão definidos nos e-mails no `POP3_transporter`"
		},
		"_inheritedFrom_": "Transporter"
	},
	"Session": {
		"clearPrivileges()": {
			"Syntax": "**.clearPrivileges()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a execução for bem-sucedida"
				]
			],
			"Summary": "remove todos os privilégios associados à sessão e retorna **True** se a execução foi bem-sucedida"
		},
		"createOTP()": {
			"Syntax": "**.createOTP** ( { *lifespan* : Integer } ) : Text",
			"Params": [
				[
					"lifespan",
					"Integer",
					"->",
					"Duração do token de sessão em segundos"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"UUID da sessão"
				]
			],
			"Summary": "cria um novo OTP (uma senha única) para a sessão e retorna seu UUID"
		},
		"expirationDate": {
			"Syntax": "**.expirationDate** : Text",
			"Summary": "a data e a hora de expiração do cookie de sessão"
		},
		"getPrivileges()": {
			"Syntax": "**.getPrivileges**() : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Coleção de nomes de privilégios (strings)"
				]
			],
			"Summary": "retorna uma coleção de todos os nomes de privilégios associados à sessão"
		},
		"hasPrivilege()": {
			"Syntax": "**.hasPrivilege**( *privilege* : Text ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"Nome do privilegio a verificar"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a sessão tiver *privilege*, False caso contrário"
				]
			],
			"Summary": "retorna True se o *privilege* estiver associado à sessão e False caso contrário"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "o identificador único (UUID) da sessão do usuário"
		},
		"idleTimeout": {
			"Syntax": "**.idleTimeout** : Integer",
			"Summary": "o tempo limite da sessão de inatividade (em minutos), após o qual a sessão é automaticamente encerrada pelo 4D"
		},
		"info": {
			"Syntax": "**.info** : Object",
			"Summary": "descreve o cliente remoto ou a sessão do procedimento armazenado no servidor, ou a sessão autônoma"
		},
		"isGuest()": {
			"Syntax": "**.isGuest()** : Boolean",
			"Params": [
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a sessão for uma sessão Guest, False caso contrário"
				]
			],
			"Summary": "retorna True se a sessão for uma sessão Guest (ou seja, não tem privilégios)"
		},
		"restore()": {
			"Syntax": "**.restore** ( *token* : Text ) : Boolean",
			"Params": [
				[
					"token",
					"Text",
					"->",
					"UUID do token de sessão"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a sessão atual tiver sido substituída com êxito pela sessão no token"
				]
			],
			"Summary": "substitui a sessão do usuário da web pela sua sessão original correspondente ao *token* UUID"
		},
		"setPrivileges()": {
			"Syntax": "**.setPrivileges**( *privilege* : Text ) : Boolean<br/>**.setPrivileges**( *privileges* : Collection )<br/>**.setPrivileges**( *settings* : Object ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"Nome do privilégio"
				],
				[
					"privileges",
					"Collection",
					"->",
					"Collection de nomes de privilégios"
				],
				[
					"settings",
					"Object",
					"->",
					"Objetos com as propriedades \"privilégios\" (string ou collection)"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"True se a execução for bem-sucedida"
				]
			],
			"Summary": "associa os privilégios e/ou papéis definidos no parâmetro para a sessão e retorna **True** se a execução foi bem sucedida"
		},
		"storage": {
			"Syntax": "**.storage** : Object",
			"Summary": "um objeto compartilhado que pode ser usado para armazenar informações disponíveis para todos os processos da sessão"
		},
		"userName": {
			"Syntax": "**.userName** : Text",
			"Summary": "o nome de usuário associado à sessão"
		}
	},
	"Signal": {
		"description": {
			"Syntax": "**.description** : Text",
			"Summary": "contém uma descrição personalizada para o objeto `Signal`"
		},
		"signaled": {
			"Syntax": "**.signaled** : Boolean",
			"Summary": "contém o estado atual do objeto `Signal`"
		},
		"trigger()": {
			"Syntax": "**.trigger( )**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "define a propriedade `signaled` do objeto de sinal como **true**"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : Boolean",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Tempo máximo de espera em segundos"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"Estado da propriedade `.signaled`"
				]
			],
			"Summary": "faz com que o processo atual aguarde até que a propriedade `.signaled` do objeto signal se torne **true** ou o *timeout* opcional expire"
		}
	},
	"SMTPTransporter": {
		"keepAlive": {
			"Syntax": "**.keepAlive** : Boolean",
			"Summary": "**Verdadeiro** se a conexão SMTP deve ser mantida viva até que o objeto `transportador` seja destruído"
		},
		"send()": {
			"Syntax": "**.send**( *mail* : Object ) : Object",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Email para enviar"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Status SMTP"
				]
			],
			"Summary": "envia o objeto *mail* para o servidor SMTP definido no objeto `transporter` e retorna um objeto de status"
		},
		"_inheritedFrom_": "Transporter"
	},
	"SystemWorker": {
		"closeInput()": {
			"Syntax": "**.closeInput**()",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "fecha o fluxo de entrada (*stdin*) do processo externo"
		},
		"commandLine": {
			"Syntax": "**.commandLine** : Text",
			"Summary": "contém a linha de comando passada como parâmetro para a função `new()`"
		},
		"currentDirectory": {
			"Syntax": "**.currentDirectory** : 4D.Folder",
			"Summary": "contém o diretório de trabalho no qual o processo externo é executado"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "contém o tipo de conteúdo do corpo de resposta"
		},
		"encoding": {
			"Syntax": "**.encoding** : Text",
			"Summary": "contém a codificação do conteúdo do corpo da resposta"
		},
		"errors": {
			"Syntax": "**.errors** : Collection",
			"Summary": "contém uma coleção de erros 4D em caso de erro(s) de execução(ões) se algum"
		},
		"exitCode": {
			"Syntax": "**.exitCode** : Integer",
			"Summary": "contém o código de saída retornado pelo processo externo"
		},
		"hideWindow": {
			"Syntax": "**.hideWindow** : Boolean",
			"Summary": "pode ser usado para ocultar a janela do console DOS ou a janela do executável (**apenas Windows**)"
		},
		"pid": {
			"Syntax": "**.pid** : Integer",
			"Summary": "contém o identificador exclusivo do processo externo no nível do sistema"
		},
		"postMessage()": {
			"Syntax": "**.postMessage**( *message* : Text)<br/>**.postMessage**( *messageBLOB* : Blob)",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Texto para escrever no fluxo de entrada (stdin) do processo externo"
				],
				[
					"messageBLOB",
					"Blob",
					"->",
					"Bytes escritos no fluxo de entrada"
				]
			],
			"Summary": "permite que você escreva no fluxo de entrada (stdin) do processo externo"
		},
		"response": {
			"Syntax": "**.response** : Text<br/>**.response** : Blob",
			"Summary": "contém a concatenação de todos os dados retornados assim que o pedido for encerrado"
		},
		"responseError": {
			"Syntax": "**.responseError** : Text",
			"Summary": "contém a concatenação de todos os erros retornados, uma vez que a solicitação é encerrada"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "força o `SystemWorker` a encerrar sua execução"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "contém **true** se o processo externo for encerrado"
		},
		"timeout": {
			"Syntax": "**.timeout** : Integer",
			"Summary": "contém a duração em segundos antes que o processo externo seja encerrado se ainda estiver ativo"
		},
		"wait()": {
			"Syntax": "**.wait**( {*timeout* : Real} ) : 4D.SystemWorker",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Tempo máximo de espera em segundos"
				],
				[
					"Resultados",
					"4D.SystemWorker",
					"<-",
					"Objecto SystemWorker"
				]
			],
			"Summary": "espera até o final da execução do `SystemWorker` ou o *timeout* especificado ser alcançado"
		}
	},
	"TCPConnection": {
		"address": {
			"Syntax": "**address** : Text",
			"Summary": "o endereço IP ou nome de domínio da máquina remota"
		},
		"closed": {
			"Syntax": "**closed** : Boolean",
			"Summary": "se a conexão está fechada"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "uma coleção de objetos de erro associados à conexão"
		},
		"listener": {
			"Syntax": "**listener** : Object",
			"Summary": "o objeto `TCPListener` que criou a `TCPConnection`, se houver"
		},
		"noDelay": {
			"Syntax": "**noDelay** : Boolean",
			"Summary": "se o algoritmo de Nagle está desativado (`true`) ou ativado (`false`)"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "o número da porta da máquina remota"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob )",
			"params": [
				[
					"data",
					"Blob",
					"->",
					"Dados a serem enviados"
				]
			],
			"Summary": "envia dados para o servidor"
		},
		"shutdown()": {
			"Syntax": "**.shutdown**()",
			"params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "fecha o canal de *gravação* da conexão (fluxo do cliente para o servidor)"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } )",
			"params": [
				[
					"timeout",
					"Real",
					"->",
					"Tempo máximo de espera em segundos"
				]
			],
			"Summary": "aguarda até que a conexão TCP seja fechada ou o `timeout` especificado seja atingido"
		}
	},
	"TCPEvent": {
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "os dados associados ao evento"
		},
		"ip": {
			"Syntax": "**ip** : Text",
			"Summary": "o endereço IP da máquina remota"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "o número da porta da máquina remota"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "o tipo do evento"
		}
	},
	"TCPListener": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "uma coleção de objetos de erros associados à conexão"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "o número da porta da máquina"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "fecha o listener e libera a porta"
		}
	},
	"Transporter": {
		"acceptUnsecureConnection": {
			"Syntax": "**.acceptUnsecureConnection** : Boolean",
			"Summary": "**True** se o 4D tiver permissão para estabelecer uma conexão não criptografada"
		},
		"authenticationMode": {
			"Syntax": "**.authenticationMode** : Text",
			"Summary": "o modo de autenticação usado para abrir a sessão no servidor de e-mail"
		},
		"bodyCharset": {
			"Syntax": "**.bodyCharset** : Text",
			"Summary": "o conjunto de caracteres e a codificação usados para a parte do corpo do e-mail"
		},
		"connectionTimeOut": {
			"Syntax": "**.connectionTimeOut** : Integer",
			"Summary": "o tempo máximo de espera (em segundos) permitido para estabelecer uma conexão com o servidor"
		},
		"headerCharset": {
			"Syntax": "**.headerCharset** : Text",
			"Summary": "o conjunto de caracteres e a codificação usados para o cabeçalho de e-mail"
		},
		"host": {
			"Syntax": "**.host** : Text",
			"Summary": "o nome ou o endereço IP do servidor host"
		},
		"logFile": {
			"Syntax": "**.logFile** : Text",
			"Summary": "o caminho do arquivo de registro estendido definido (se houver) para a conexão de correio"
		},
		"port": {
			"Syntax": "**.port** : Integer",
			"Summary": "o número da porta utilizada para transações de email"
		},
		"sendTimeOut": {
			"Syntax": "**.sendTimeOut** : Integer",
			"Summary": "o tempo máximo de espera (em segundos) de uma chamada para `.send( )` antes que ocorra um timeout"
		},
		"user": {
			"Syntax": "**.user** : Text",
			"Summary": "o nome de usuário usado para autenticação no servidor de email"
		},
		"checkConnection()": {
			"Syntax": "**.checkConnection()** : Object",
			"Params": [
				[
					"Resultados",
					"Object",
					"<-",
					"Estado da ligação do objecto transportador"
				]
			],
			"Summary": "verifica a conexão usando as informações armazenadas no objeto transportador"
		}
	},
	"UDPEvent": {
		"data": {
			"Syntax": "**data**: Blob",
			"Summary": "the data associated with the event"
		},
		"ip": {
			"Syntax": "**ip** : Text",
			"Summary": "the IP address of the remote machine"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number of the remote machine"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "the type of the event"
		}
	},
	"UDPSocket": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "a collection of error objects associated with the socket"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number to listen to"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob ; *hostName* : Text ; *remotePort* : Integer )",
			"params": [
				[
					"data",
					"Blob",
					"->",
					"Dados a serem enviados"
				],
				[
					"hostName",
					"Text",
					"->",
					"Name or IP address of server"
				],
				[
					"remotePort",
					"Integer",
					"->",
					"Remote port to connect to (0=any)"
				]
			],
			"Summary": "sends *data* to the remote *hostName* server on the specified *remotePort*"
		}
	},
	"Vector": {
		"cosineSimilarity()": {
			"Syntax": "**.cosineSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector to compare with"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Distance between vectors"
				]
			],
			"Summary": "calculates the cosine similarity between the current 4D vector and the one you passed in the *vector* parameter"
		},
		"dotSimilarity()": {
			"Syntax": "**.dotSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector to compare with"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Distance between vectors"
				]
			],
			"Summary": "calculates the dot product of the current 4D vector and the one you passed in the *vector* parameter"
		},
		"euclideanDistance()": {
			"Syntax": "**.euclideanDistance**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector to compare with"
				],
				[
					"Resultados",
					"Real",
					"<-",
					"Distance between vectors"
				]
			],
			"Summary": "calculates the Euclidean distance between the current 4D vector and the one you passed in the *vector* parameter"
		},
		"length": {
			"Syntax": "**length** : Integer",
			"Summary": "the number of vector components"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**() : Collection",
			"Params": [
				[
					"Resultados",
					"Collection",
					"<-",
					"Collection of real numbers representing the vector components"
				]
			],
			"Summary": "returns the vector components as a collection of reals"
		}
	},
	"WebForm": {
		"componentName": {
			"Syntax": "***.componentName*** : 4D.WebFormItem",
			"Summary": "que estão disponíveis diretamente como propriedades"
		},
		"disableState()": {
			"Syntax": "**.disableState**( *state* : string)",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Nome do estado a ser desativado no formulário Web"
				]
			],
			"Summary": "desabilita a renderização da *state* na forma atual da web"
		},
		"enableState()": {
			"Syntax": "**.enableState**( *state* : string )",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Nome do estado a ser ativado no formulário Web"
				]
			],
			"Summary": "ativa a renderização do *state* no formulário da Web atual"
		},
		"setError()": {
			"Syntax": "**.setError**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Mensagem de erro a ser exibida no formulário Web"
				]
			],
			"Summary": "envia *msg* como uma mensagem de erro para o formulário web"
		},
		"setMessage()": {
			"Syntax": "**.setMessage**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Mensagem informativa a ser exibida no formulário Web"
				]
			],
			"Summary": "envia *msg* como uma mensagem de informação para o formulário da Web"
		},
		"setWarning()": {
			"Syntax": "**.setWarning**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Mensagem de aviso a ser exibida no formulário Web"
				]
			],
			"Summary": "envia *msg* como uma mensagem de aviso para o formulário web"
		}
	},
	"_command_": {
		"Web Form": {
			"Syntax": "**Web Form** : 4D.WebForm",
			"Params": [
				[
					"Resultados",
					"4D.WebForm",
					"<-",
					"Novo objeto proxy `WebForm`"
				]
			],
			"Summary": "retorna um `4D. Objeto proxy ebForm` que permite a você interagir com o formulário web"
		},
		"Web Event": {
			"Syntax": "**Web Event** : Object",
			"Params": [
				[
					"Resultados",
					"object",
					"<-",
					"object"
				]
			],
			"Summary": "retorna um objeto com informações sobre um evento acionado vinculado a um componente de formulário da Web"
		},
		"Call chain": {
			"Syntax": "**Call chain** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Collection of objects describing the call chain within a process"
				]
			],
			"Summary": "The **Call chain** command returns a collection of objects describing each step of the method call chain within the current process."
		},
		"Command name": {
			"Syntax": "**Command name** ( *command* {; *info* {; *theme*}} ) : Text",
			"Params": [
				[
					"comando",
					"Integer",
					"->",
					"Número de comando"
				],
				[
					"info",
					"Integer",
					"<-",
					"Command property to evaluate"
				],
				[
					"theme",
					"Text",
					"<-",
					"Tema da linguagem do comando"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do comando"
				]
			],
			"Summary": "returns the name as well as (optionally) the properties of the command whose command number you pass in *command*."
		},
		"Compile project": {
			"Syntax": "**Compile project** {( {*projectFile*}{;}{*options*} )} : Object",
			"Params": [
				[
					"projectFile",
					"4D. File",
					"->",
					"Arquivo .4DProject para compilar"
				],
				[
					"options",
					"Object",
					"->",
					"Objeto que especifica as opções de compilação"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto contendo informações sobre o estado de compilação"
				]
			],
			"Summary": "permite que você compile o projeto host atual ou o projeto especificado no parâmetro *projectFile*."
		},
		"Create deployment license": {
			"Syntax": "**Create deployment license** ( *mergedApp* ; *autoLicenseTarget* ) : Object<br/>**Create deployment license** ( *mergedApp* ; *buildLicense* {; *oemLicense*} ) : Object",
			"Params": [
				[
					"mergedApp",
					"4D. Folder",
					"->",
					"Folder containing the merged application"
				],
				[
					"autoLicenseTarget",
					"Integer",
					"->",
					"Target license for automatic license embedding"
				],
				[
					"buildLicense",
					"4D. File",
					"->",
					"License required to generate the embedded license"
				],
				[
					"oemLicense",
					"4D. File",
					"->",
					"4D OEM XML Key license if server license"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado"
				]
			],
			"Summary": "The **Create deployment license** command creates an embedded license file in the Licenses folder of the *mergedApp* built application."
		},
		"Create entity selection": {
			"Syntax": "**Create entity selection** ( *dsTable* : Table { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"dsTable",
					"Tabela",
					"->",
					"Tabela do banco de dados 4D cuja seleção atual se utilizará para construir a seleção de entidades"
				],
				[
					"settings",
					"Object",
					"->",
					"Opção de construção: context"
				],
				[
					"Resultado",
					"4D. EntitySelection",
					"<-",
					"Seleção de entidades que coincidem com a classe de dados relacionada com a tabela dada"
				]
			],
			"Summary": "cria e retorna uma nova seleção de entidade alterável relacionada à classe de dados correspondente à *dsTable* fornecida, de acordo com a seleção atual dessa tabela"
		},
		"DIALOG": {
			"Syntax": "**DIALOG** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Tabela",
					"->",
					"Tabela possuindo o formulário ou se omitido: tabela padrão ou uso do formulário projeto"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Nome (string) da tabela ou formulário do projeto, ou um caminho POSIX (string) para um arquivo .json descrevendo o formulário, ou um objeto descrevendo o formulário"
				],
				[
					"formData",
					"Object",
					"->",
					"Dados para associar ao formulário"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Usar o mesmo processo"
				]
			],
			"Summary": "The **DIALOG** command presents the *form* to the user, along with *formData* parameter(s) (optional)."
		},
		"ds": {
			"Syntax": "**ds** { ( *localID* : Text ) } : cs.DataStore",
			"Params": [
				[
					"localID",
					"Text",
					"->",
					"ID local del armazém de dados remoto a devolver"
				],
				[
					"Resultados",
					"cs. DataStore",
					"<-",
					"Referencia ao armazém de dados"
				]
			],
			"Summary": "retorna uma referência ao datastore que corresponde ao banco de dados 4D atual ou ao banco de dados designado por *localID*"
		},
		"File": {
			"Syntax": "**File** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.File<br/>**File** ( *fileConstant* : Integer { ; \\* } ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Rota do arquivo"
				],
				[
					"fileConstant",
					"Integer",
					"->",
					"Constante de arquivo 4D"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (padrão) ou `fk platform path`"
				],
				[
					"\\*",
					"operator",
					"->",
					"\\* para devolver o arquivo da base de dados anfitriã"
				],
				[
					"Resultados",
					"4D.File",
					"<-",
					"Novo objeto arquivo"
				]
			],
			"Summary": "cria e retorna um novo objeto do tipo `4D.File`"
		},
		"Folder": {
			"Syntax": "**Folder** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**Folder** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Folder path"
				],
				[
					"folderConstant",
					"Integer",
					"->",
					"Constante Pasta 4D"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (padrão) ou `fk platform path`"
				],
				[
					"\\*",
					"operator",
					"->",
					"\\* para devolver a pasta da base de dados do anfitrião"
				],
				[
					"Resultados",
					"4D.Folder",
					"<-",
					"Novo Objeto Folder"
				]
			],
			"Summary": "cria e retorna um novo objeto do tipo `4D.Folder`"
		},
		"FORM EDIT": {
			"Syntax": "**FORM EDIT** ( {*aTable* ;} *form* )<br/>**FORM EDIT** ( {*aTable* ;} *form* ; *object* )",
			"Params": [
				[
					"aTable",
					"Tabela",
					"->",
					"Tabela possuindo o formulário ou se omitido: tabela padrão ou uso do formulário projeto"
				],
				[
					"form",
					"Text",
					"->",
					"Nome do formulario"
				],
				[
					"object",
					"Text",
					"->",
					"Nome do objeto do formulário ou nome do grupo"
				]
			],
			"Summary": "The **FORM EDIT** command opens the *form* associated to *aTable* in the 4D Form editor, with optionnally *object* selected."
		},
		"Form event code": {
			"Syntax": "**Form event code**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Form event number"
				]
			]
		},
		"FORM Event": {
			"Syntax": "**FORM Event** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Objecto evento"
				]
			],
			"Summary": "**FORM Event** returns an object containing information about the form event that has just occurred."
		},
		"FORM LOAD": {
			"Syntax": "**FORM LOAD** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Tabela",
					"->",
					"Formulário tabela a ser carregado (se omitido, carrega um formulário projeto)"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Nome (string) do formulário (projeto ou tabela), ou caminho POSIX (string) para um arquivo .json que descreve o formulário, ou um objeto que descreve o formulário a ser aberto"
				],
				[
					"formData",
					"Object",
					"->",
					"Dados para associar ao formulário"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Se passado = o comando se aplica ao banco de dados do host quando é executado a partir de um componente (parâmetro ignorado fora desse contexto)"
				]
			],
			"Summary": "The **FORM LOAD** command is used to load the *form* in memory in the current process along with *formData* (optional) in order to print its data or parse its contents."
		},
		"Form": {
			"Syntax": "**Form**  : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Dados do formulário atual"
				]
			],
			"Summary": "The **Form** command returns the object associated with the current form (instantiated from the *formData* parameter or the user class assigned in the Form editor)."
		},
		"Formula from string": {
			"Syntax": "**Formula from string**( *formulaString* : Text ) : 4D.Function<br/>**Formula from string**( *formulaString* : Text ; *context* : Longint ) : 4D.Function",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"Fórmula texto a ser retornada como objeto"
				],
				[
					"context",
					"Number",
					"->",
					"`sk execute in current database` (por padrão) ou `sk execute in host database`"
				],
				[
					"Resultados",
					"4D. Function",
					"<-",
					"Objeto nativo encapsulando a fórmula"
				]
			],
			"Summary": "cria um objeto `4D.Function` baseado na *formulaString* e, opcionalmente, um *context*"
		},
		"Formula": {
			"Syntax": "**Formula** ( *formulaExp* : Expression ) : 4D.Function",
			"Params": [
				[
					"formulaExp",
					"Expression",
					"->",
					"Fórmula a ser retornada como objeto"
				],
				[
					"Resultados",
					"4D. Function",
					"<-",
					"Função nativa encapsulando a fórmula"
				]
			],
			"Summary": "cria um objeto `4D Function` com base na expressão *formulaExp*"
		},
		"HTTP Parse message": {
			"Syntax": "**HTTP Parse message** ( *data* : Text ) : Object<br/>**HTTP Parse message**( *data* : Blob ) : Object",
			"Params": [
				[
					"data",
					"Text, Blob",
					"->",
					"Dados a serem analisados"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto, cada propriedade é uma parte dos dados de várias partes"
				]
			],
			"Summary": "analisa um texto multipart/form-data ou blob (mensagem HTTP \"response\") e extrai o conteúdo de um objeto. Each property of the returned object corresponds to a part of the multipart data"
		},
		"IMAP New transporter": {
			"Syntax": "**IMAP New transporter**( *server* : Object ) : 4D.IMAPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Informação de servidor de correio"
				],
				[
					"Resultados",
					"4D.IMAPTransporter",
					"<-",
					"Objeto IMAP transporter"
				]
			],
			"Summary": "configura uma nova conexão IMAP"
		},
		"Last errors": {
			"Syntax": "**Last errors** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Collection of error objects"
				]
			],
			"Summary": "The **Last errors** command returns the current stack of errors of the 4D application as a collection of error objects, or **null** if no error occurred."
		},
		"License info": {
			"Syntax": "**License info** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Information about the active licence"
				]
			],
			"Summary": "The **License info** command returns an object providing detailed information about the active license."
		},
		"LISTBOX Get property": {
			"Syntax": "**LISTBOX Get property** ( {* ;} *object* ; *property* ) : any",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"If specified, object is an object name (string). If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Nome do objeto (se \\* for especificado) ou Variável (se \\* for omitido)"
				],
				[
					"property",
					"Integer",
					"->",
					"Property whose value you want to get"
				],
				[
					"Resultado",
					"Integer, Text",
					"<-",
					"Valor atual"
				]
			],
			"Summary": "The **LISTBOX Get property** command returns the value of the *property* of the list box or column specified using the *object* and *\\** parameters."
		},
		"LISTBOX SET PROPERTY": {
			"Syntax": "**LISTBOX SET PROPERTY** ( {* ;} *object* ; *property* ; *value* )",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"If specified, object is an object name (string). If omitted, object is a variable."
				],
				[
					"object",
					"any",
					"->",
					"Nome do objeto (se \\* for especificado) ou Variável (se \\* for omitido)"
				],
				[
					"property",
					"Integer",
					"->",
					"List box or column property"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"Valor da propriedade"
				]
			],
			"Summary": "The **LISTBOX SET PROPERTY** command sets the *value* for the *property* of the list box or list box column specified using the *object* and *\\** parameters."
		},
		"MAIL Convert from MIME": {
			"Syntax": "**MAIL Convert from MIME**( *mime* : Blob ) : Object<br/>**MAIL Convert from MIME**( *mime* : Text ) : Object",
			"Params": [
				[
					"mime",
					"Blob, Text",
					"->",
					"E-mail no MIME"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto Email"
				]
			],
			"Summary": "converte um documento MIME em um objeto de e-mail válido"
		},
		"MAIL Convert to MIME": {
			"Syntax": "**MAIL Convert to MIME**( *mail* : Object { ; *options* : Object } ) : Text",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Objeto Email"
				],
				[
					"options",
					"Object",
					"->",
					"Opções de codificação e Charset"
				],
				[
					"Resultados",
					"Text",
					"<-",
					"Email objeto convertido em MIME"
				]
			]
		},
		"MAIL Converter to MIME": {
			"Summary": "converte um objeto e-mail em texto MIME"
		},
		"MAIL New attachment": {
			"Syntax": "**MAIL New attachment**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
			"Params": [
				[
					"file",
					"4D. File",
					"->",
					"Parâmetros"
				],
				[
					"zipFile",
					"4D. ZipFile",
					"->",
					"Arquivo zip"
				],
				[
					"blob",
					"4D. Blob",
					"->",
					"Blob contendo o anexo"
				],
				[
					"path",
					"Text",
					"->",
					"Pode passar uma rota ou um Blob para definir o anexo."
				],
				[
					"name",
					"Text",
					"->",
					"Nome + extensão usado pelo cliente email para designar o anexo"
				],
				[
					"cid",
					"Text",
					"->",
					"ID do anexo (apenas mensagens HTML), ou \" \" se nenhum cid for exigido"
				],
				[
					"type",
					"Text",
					"->",
					"Valor do cabeçalho content-type"
				],
				[
					"disposition",
					"Text",
					"->",
					"Valor do cabeçalho content-disposition: \"inline\" ou \"attachment\"."
				],
				[
					"Resultados",
					"4D. MailAttachment",
					"<-",
					"Objeto anexo"
				]
			],
			"Summary": "permite que você crie um objeto anexo que você pode adicionar a um objeto de e-mail"
		},
		"New collection": {
			"Syntax": "**New collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection, Picture, Pointer",
					"->",
					"Valor(es) de collection"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nova coleção"
				]
			],
			"Summary": "creates a new empty or prefilled collection and returns its reference."
		},
		"New log file": {
			"Syntax": "**New log file** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Full pathname of closed log file"
				]
			],
			"Summary": "The **New log file** command closes the current log file, renames it and creates a new one with the same name in the same location as the previous one"
		},
		"New shared collection": {
			"Syntax": "**New shared collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection",
					"->",
					"Valores da collection compartida"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"New shared collection"
				]
			],
			"Summary": "cria uma nova coleção compartilhada vazia ou pré-preenchida"
		},
		"New signal": {
			"Syntax": "**New signal** { ( *description* : Text ) } : 4D.Signal",
			"Params": [
				[
					"description",
					"Text",
					"->",
					"Descrição para o sinal"
				],
				[
					"Resultado",
					"4D. Signal",
					"<-",
					"Objeto nativo encapsulando o sinal"
				]
			],
			"Summary": "cria um objeto `4D.Signal`"
		},
		"Num": {
			"Syntax": "**Num** ( *expression* {; *separator*} ) : Real<br/>**Num** ( *expression* ; *base* ) : Real",
			"Params": [
				[
					"expressão",
					"Text, Boolean, Integer",
					"->",
					"String for which to return the numeric form, or Boolean to return 0 or 1, or Numeric expression"
				],
				[
					"separator",
					"Text",
					"->",
					"Decimal separator"
				],
				[
					"base",
					"Integer",
					"->",
					"Value between 2 and 36 that represents the radix"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Numeric form of the expression parameter"
				]
			],
			"Summary": "The **Num** command returns the numeric form of the String, Boolean or numeric expression you pass in *expression*."
		},
		"OBJECT Get data source formula": {
			"Syntax": "**OBJECT Get data source formula** ( {* ;} *object* ) : *formula*",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Nome do objeto (se \\* for especificado) ou<br/>Campo ou variável (se \\* for omitido)"
				],
				[
					"formula",
					"4D.Formula",
					"<-",
					"Fórmula associada com o objeto de formulário (`Null` se nenhuma fórmula estiver associada)"
				]
			],
			"Summary": "returns the formula (if any) associated object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET DATA SOURCE FORMULA": {
			"Syntax": "**OBJECT SET DATA SOURCE FORMULA** ( {* ;} *object* ; *formula* )",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Nome do objeto (se \\* for especificado) ou<br/>Campo ou variável (se \\* for omitido)"
				],
				[
					"formula",
					"4D.Formula",
					"->",
					"Formula to assign as the data source"
				]
			],
			"Summary": "assigns a formula (expression) as the data source of the object(s) designated by the *object* and *\\** parameters"
		},
		"Open datastore": {
			"Syntax": "**Open datastore**( *connectionInfo* : Object ; *localID* : Text ) : 4D.DataStoreImplementation",
			"Params": [
				[
					"connectionInfo",
					"Object",
					"->",
					"Propriedades de conexão utilizadas para alcançar o armazém de datos remoto"
				],
				[
					"localID",
					"Text",
					"->",
					"Id para assignar ao armazém de dados aberto na aplicação local (obrigatorio)"
				],
				[
					"Resultado",
					"4D.DataStoreImplementation",
					"<-",
					"Objeto do armazém de dados"
				]
			],
			"Summary": "connects the application to the remote datastore identified by the *connectionInfo* parameter"
		},
		"POP3 New transporter": {
			"Syntax": "**POP3 New transporter**( *server* : Object ) : 4D.POP3Transporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Informação de servidor de correio"
				],
				[
					"Resultado",
					"4D.POP3Transporter",
					"<-",
					"Objeto transporter POP3"
				]
			],
			"Summary": "configures a new POP3 connection"
		},
		"Print form": {
			"Syntax": "**Print form** ( {*aTable* ;} *form* {; *formData*} {; *areaStart*{; *areaEnd*}} ) : Integer",
			"Params": [
				[
					"aTable",
					"Tabela",
					"->",
					"Tabela do formulário ou tabela padrão, se omitida"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Nome (string) do formulário (projeto ou tabela), ou caminho POSIX (string) para um arquivo .json que descreve o formulário, ou um objeto que descreve o formulário a ser aberto"
				],
				[
					"formData",
					"Object",
					"->",
					"Dados para associar ao formulário"
				],
				[
					"areaStart",
					"Integer",
					"->",
					"Marcador de impressão ou Área inicial (se areaEnd for especificada)"
				],
				[
					"areaEnd",
					"Integer",
					"->",
					"Área final (se for especificado pela areaStart)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura da seção impressa"
				]
			],
			"Summary": "The **Print form** command simply prints *form* with the current values of fields and variables of *aTable*."
		},
		"Process activity": {
			"Syntax": "**Process activity** () : Object<br/>**Process activity** ( *options* ) : Object<br/>**Process activity** ( *sessionID* ) : Object<br/>**Process activity** ( *sessionID* ; *options* ) : Object",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"ID da sessão"
				],
				[
					"options",
					"Integer",
					"->",
					"Opções de retorno"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Snapshot de sessões de usuários em execução e/ou (apenas 4D Servidor)"
				]
			],
			"Summary": "The **Process activity** command returns a snapshot of running processes and/or (4D Server only) connected user sessions at a given time."
		},
		"Process info": {
			"Syntax": "**Process info** ( *processNumber* : Integer ) : Object",
			"Params": [
				[
					"processNumber",
					"Integer",
					"->",
					"Process number"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Information about the process"
				]
			],
			"Summary": "retorna um objeto que fornece informações detalhadas sobre o processo cujo número você passa em *processNumber*"
		},
		"Process number": {
			"Syntax": "**Process number** ( *name* {; *} ) : Integer<br/>**Process number** ( *id* {; *} ) : Integer",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nome do processo para o qual se deseja recuperar o número do processo"
				],
				[
					"id",
					"Text",
					"->",
					"ID do processo para o qual se deseja recuperar o número do processo"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Retorna o número do processo do servidor"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Process number"
				]
			],
			"Summary": "The `Process number` command returns the number of the process whose *name* or *id* you pass in the first parameter"
		},
		"SELECT LOG FILE": {
			"Syntax": "**SELECT LOG FILE** ( *logFile* )<br/>**SELECT LOG FILE** ( * )",
			"Params": [
				[
					"logFile",
					"Text",
					"->",
					"Nome do arquivo de registro"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Close the current log file"
				]
			],
			"Summary": "O comando **SELECT LOG FILE** cria ou fecha o arquivo de registro de acordo com o valor passado no parâmetro"
		},
		"Session info": {
			"Syntax": "**Session info** ( *sessionId* : Integer ) : Object",
			"Params": [
				[
					"sessionID",
					"Integer",
					"->",
					"ID da sessão"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Informações sobre a sessão"
				]
			],
			"Summary": "retorna um objeto que descreve o ID da sessão no parâmetro *sessionID*."
		},
		"Session storage": {
			"Syntax": "**Session storage** ( *id* ) : Object",
			"Params": [
				[
					"id",
					"Text",
					"->",
					"Unique identifier (UUID) of the session"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Storage object of the session"
				]
			],
			"Summary": "The **Session storage** command returns the storage object of the session whose unique identifier you passed in the *id* parameter."
		},
		"Session": {
			"Syntax": "**Session** : 4D.Session",
			"Params": [
				[
					"Resultado",
					"4D. Session",
					"<-",
					"Objecto Session"
				]
			],
			"Summary": "retorna o objeto `Session` correspondente à sessão atual do usuário"
		},
		"SET ALLOWED METHODS": {
			"Syntax": "**SET ALLOWED METHODS** ( *methodsArray* )",
			"Params": [
				[
					"methodsArray",
					"Text array",
					"->",
					"Array de nomes de métodos"
				]
			],
			"Summary": "The **SET ALLOWED METHODS** command designates the project methods that can be entered via the application."
		},
		"SET WINDOW DOCUMENT ICON": {
			"Syntax": "**SET WINDOW DOCUMENT ICON** ( *winRef* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *image* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *file* )<br/>**SET WINDOW DOCUMENT ICON** (  *winRef* ; *image* ; *file* )",
			"Params": [
				[
					"winRef",
					"Integer",
					"->",
					"Número de referência da janela"
				],
				[
					"image",
					"Imagem",
					"->",
					"Ícone personalizado"
				],
				[
					"file",
					"4D.File, 4D.Folder",
					"->",
					"Caminho do arquivo ou caminho da pasta"
				]
			],
			"Summary": "allows you to define an icon for windows in multi-window applications using either an *image* and/or *file* with the window reference *winRef*"
		},
		"SMTP New transporter": {
			"Syntax": "**SMTP New transporter**( *server* : Object ) : 4D.SMTPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Informação de servidor de correio"
				],
				[
					"Resultado",
					"4D.SMTPTransporter",
					"<-",
					"Objeto SMTP transporter"
				]
			],
			"Summary": "configures a new SMTP connection"
		},
		"String": {
			"Syntax": "**String** ( *expression* {; *format* {; *addTime*}} ) : Text<br/>**String** ( *expression* ; *base* ) : Text",
			"Params": [
				[
					"expressão",
					"Expression",
					"->",
					"Expression for which to return the string form (can be Real, Integer, Long Integer, Date, Time, Text, Boolean, Undefined, or Null)"
				],
				[
					"format",
					"Integer, Text",
					"->",
					"Display format"
				],
				[
					"addTime",
					"Hora",
					"->",
					"Time to add on if expression is a date"
				],
				[
					"base",
					"Integer",
					"->",
					"Value between 2 and 36 that represents the radix if expression is a number"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"String form of the expression"
				]
			],
			"Summary": "The **String** command returns the string form of the numeric, Date, Time, string or Boolean expression you pass in *expression*."
		},
		"Super": {
			"Syntax": "**Super**( ...param : any )<br/>**Super** : Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"Parâmetro(s) a passar para o construtor pai"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Pai do objecto"
				]
			],
			"Summary": "permite chamadas à `superclasse`, ou seja, a classe pai"
		},
		"This": {
			"Syntax": "**This** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Elemento ou objeto atual"
				]
			],
			"Summary": "retorna uma referência ao objeto processado atualmente."
		},
		"Trim end": {
			"Syntax": "**Trim end** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"Text to trim"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Trimmed text"
				]
			],
			"Summary": "removes **whitespace** from the end of the *aString* parameter and returns a new string, without modifying the original one."
		},
		"Trim start": {
			"Syntax": "**Trim start** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"Text to trim"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Trimmed text"
				]
			],
			"Summary": "removes **whitespace** from the beginning of the *aString* parameter and returns a new string, without modifying the original one."
		},
		"Trim": {
			"Syntax": "**Trim** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"Text to trim"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Trimmed text"
				]
			],
			"Summary": "removes **whitespace** from both ends of the *aString* parameter and returns a new string, without modifying the original one."
		},
		"USE ENTITY SELECTION": {
			"Syntax": "**USE ENTITY SELECTION** ( *entitySelection* : 4D.EntitySelection )",
			"Params": [
				[
					"entitySelection",
					"4D. EntitySelection",
					"->",
					"Seleção de entidades"
				]
			],
			"Summary": "updates the current selection of the table matching the dataclass of the *entitySelection* parameter, according to the content of the entity selection"
		},
		"WA Get context": {
			"Syntax": "**WA Get context** ( {* ;} *object* ) -> *contextObj*",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"Se especificado, *object* é um nome de objeto (string). Se omitido, *object* é uma variável."
				],
				[
					"object",
					"any",
					"->",
					"Nome do objeto (se \\* for especificado) ou Variável (se \\* for omitido)."
				],
				[
					"contextObj",
					"Object",
					"<-",
					"Context object if previously defined, otherwise `null`."
				]
			],
			"Summary": "retrieves the context object defined for `$4d` in the Web area designated by the \\* and *object* parameters using `WA SET CONTEXT`."
		},
		"WA SET CONTEXT": {
			"Syntax": "**WA SET CONTEXT** ( {* ;} *object* ; *contextObj* )",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"Se especificado, *object* é um nome de objeto (string). Se omitido, *object* é uma variável."
				],
				[
					"object",
					"any",
					"->",
					"Nome do objeto (se \\* for especificado) ou Variável (se \\* for omitido)."
				],
				[
					"contextObj",
					"Object",
					"->",
					"Object containing the functions that can be called with `$4d`."
				]
			],
			"Summary": "defines a context object *contextObj* for `$4d` in the Web area designated by the \\* and *object* parameters. When this command is used, `$4d` can only access contents declared within the provided *contextObj*. When no context object is set, `$4d` has access to all 4D methods and can not access user classes."
		},
		"WEB Server list": {
			"Syntax": "**WEB Server list** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Collection of the available Web Server objects"
				]
			],
			"Summary": "retorna uma coleção de todos os objetos do servidor Web disponíveis na aplicação 4D"
		},
		"WEB Server": {
			"Syntax": "**WEB Server** : 4D.WebServer<br/>**WEB Server**( *option* : Integer ) : 4D.WebServer",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Servidor Web a ser obtido (padrão se omitido = `Web server database`)"
				],
				[
					"Resultado",
					"4D. WebServer",
					"<-",
					"Objeto Web Server"
				]
			],
			"Summary": "retorna o objeto de servidor Web padrão ou o objeto de servidor Web definido por meio do parâmetro *option*"
		},
		"ZIP Create archive": {
			"Syntax": "**ZIP Create archive** ( *fileToZip* : 4D.File ; *destinationFile* : 4D.File ) : Object<br/>**ZIP Create archive** ( *folderToZip* : 4D.Folder ; *destinationFile* : 4D.File { ; *options* : Integer }) : Object<br/>**ZIP Create archive** ( *zipStructure* : Object ; *destinationFile* : 4D.File ) : Object",
			"Params": [
				[
					"fileToZip",
					"4D. File",
					"->",
					"Objeto File ou Folder a comprimir"
				],
				[
					"folderToZip",
					"4D. Folder",
					"->",
					"Objeto File ou Folder a comprimir"
				],
				[
					"zipStructure",
					"Object",
					"->",
					"Objeto File ou Folder a comprimir"
				],
				[
					"destinationFile",
					"4D. File",
					"->",
					"Arquivo destino para o arquivo"
				],
				[
					"options",
					"Integer",
					"->",
					"Opção *folderToZip*: `ZIP Without enclosing folder`"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Objeto de estado"
				]
			],
			"Summary": "cria um objeto de arquivo ZIP comprimido e retorna o status da operação"
		},
		"ZIP Read archive": {
			"Syntax": "**ZIP Read archive** ( *zipFile* : 4D.File { ; *password* : Text }) : 4D.ZipArchive",
			"Params": [
				[
					"zipFile",
					"4D. File",
					"->",
					"Arquivos Zip"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha do arquivo ZIP, se houver"
				],
				[
					"Resultados",
					"Parâmetros",
					"<-",
					"Objeto arquivo"
				]
			],
			"Summary": "recupera o conteúdo do *zipFile* e o retorna como um objeto `4D.ZipArchive`"
		},
		"ABORT PROCESS BY ID": {
			"Syntax": "**ABORT PROCESS BY ID** ( *IDunico* )",
			"Params": [
				[
					"IDunico",
					"Integer",
					"->",
					"ID de processo única"
				]
			],
			"Summary": "O comando **ABORT PROCESS BY ID** detém um processo específico no servidor 4D."
		},
		"ABORT": {
			"Syntax": "**ABORT**",
			"Params": [],
			"Summary": "O comando ABORT é utilizado em um método de projeto de gestão de erros instalado pelo comando ON ERR CALL."
		},
		"Abs": {
			"Syntax": "**Abs** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número do qual você deseja obter o valor absoluto"
				],
				[
					"Resultado da função",
					"Real",
					"<-",
					"Valor absoluto do número"
				]
			],
			"Summary": "Abs retorna o valor absoluto (positivo e sem sinal) de *numero*."
		},
		"ACCEPT": {
			"Syntax": "**ACCEPT**",
			"Params": [],
			"Summary": "ACCEPT realiza a mesma ação que se um usuário tivesse pressionado a tecla Intro."
		},
		"ACCUMULATE": {
			"Syntax": "**ACCUMULATE** ( *dados* {; *dados2* ; ... ; *dadosN*} )",
			"Params": [
				[
					"dados",
					"Field, Variable",
					"->",
					"Campo ou variável de tipo numérico a acumular"
				]
			],
			"Summary": "ACCUMULATE especifica os campos ou variáveis a acumular em um relatório realizado utilizando PRINT SELECTION."
		},
		"Action info": {
			"Syntax": "**Action info** ( *ação* {; *alvo*} ) : Object",
			"Params": [
				[
					"ação",
					"Text",
					"->",
					"Nome da ação padrão ou padrão incluindo parâmetro se exigido"
				],
				[
					"alvo",
					"Integer",
					"->",
					"Define o alvo da ação para obter informação: formulário principal ou atual"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contém status da ação como propriedade booleana: isEnabled, isVisible, isChecked, isMixed, isUnkownState"
				]
			],
			"Summary": "O comando **Action info** devolve várias informações, incluida a disponibilidade e o estado, sobre a *ação* definida no *objetivo*, de acordo com o contexto da aplicação atual."
		},
		"Activated": {
			"Syntax": "**Activated**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução está em ativação"
				]
			],
			"Summary": "O comando **Activated** retorna **True** em um método de formulário quando a janela que contém o formulário passa ao primeiro plano."
		},
		"Active transaction": {
			"Syntax": "**Active transaction** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Retorna False se a transação atual for suspensa"
				]
			],
			"Summary": "O comando **Active transaction** devolve **True** se o processo atual estiver em transação e se esta transação não for suspensa."
		},
		"ACTIVITY SNAPSHOT": {
			"Syntax": "**ACTIVITY SNAPSHOT** ( arrActivities | arrUUID ; *arrInicio* ; *arrDuracao* ; *arrInfo* {; *arrDetails*}{; *} )",
			"Params": [
				[
					"arrActivities &#124; arrUUID",
					"Array objeto, Array texto",
					"<-",
					"Descrição completa de operações (object array) ou<br/>UUIDs das operações (text array)"
				],
				[
					"arrInicio",
					"Text array",
					"<-",
					"Horas de início das operações"
				],
				[
					"arrDuracao",
					"Integer array",
					"<-",
					"Duração das operações em milisegundos"
				],
				[
					"arrInfo",
					"Text array",
					"<-",
					"Descrição"
				],
				[
					"arrDetails",
					"Object array",
					"<-",
					"Details of context and sub-operations (if any)"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passar = Trazer atividade do servidor"
				]
			],
			"Summary": "O comando **ACTIVITY SNAPSHOT** retorna um array ou vários que descrevem as operações em progresso sobre os dados 4D."
		},
		"ADD RECORD": {
			"Syntax": "**ADD RECORD** ( {*tabela*}{;}{*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a utilizar para entrada de dados ou Tabela por padrão, se omitida"
				],
				[
					"*",
					"Operator",
					"->",
					"Ocultar barras de deslocamento"
				]
			],
			"Summary": "Esse comando foi implementado em 4D em lançamentos anteriores e é ainda útil para desenvolvimento básico ou protótipos."
		},
		"Add to date": {
			"Syntax": "**Add to date** ( *data* ; *anos* ; *meses* ; *dias* ) : Date",
			"Params": [
				[
					"data",
					"Date",
					"->",
					"Data a qual adicionar dias, meses e anos"
				],
				[
					"anos",
					"Integer",
					"->",
					"Número de anos a adicionar a data"
				],
				[
					"meses",
					"Integer",
					"->",
					"Número de meses a adicionar a data"
				],
				[
					"dias",
					"Integer",
					"->",
					"Números de dias a adicionar a data"
				],
				[
					"Resultado",
					"Date",
					"<-",
					"Data resultante"
				]
			],
			"Summary": "O comando Add to date adiciona *anos*, *meses,* e *dias* a data passada em *data*, depois retorna a data resultante."
		},
		"ADD TO SET": {
			"Syntax": "**ADD TO SET** ( {*tabela* ;} *conjunto* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do registro atual, ou tabela padrão, se omitido"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto ao qual adicionar os registros atuais"
				]
			],
			"Summary": "ADD TO SET adiciona o registro atual de *tabela* a conjunto."
		},
		"ADJUST BLOBS CACHE PRIORITY": {
			"Syntax": "**ADJUST BLOBS CACHE PRIORITY** ( *Tabela* ; *prioridade* )",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela cujos \"blobs\" de valores de prioridade de dados vão ser ajustados"
				],
				[
					"prioridade",
					"Integer",
					"->",
					"Valor de prioridade de Cache para Blobs na tabela"
				]
			],
			"Summary": "Este comando está reservado para necessidades específicas."
		},
		"ADJUST INDEX CACHE PRIORITY": {
			"Syntax": "**ADJUST INDEX CACHE PRIORITY** ( *Campo* ; *prioridade* )",
			"Params": [
				[
					"Field",
					"Field",
					"->",
					"Campo cujos valores de prioridade índice serão ajustados"
				],
				[
					"prioridade",
					"Integer",
					"->",
					"Valor de prioridade de cache para campos índice"
				]
			],
			"Summary": "Este comando está reservado para necessidades específicas."
		},
		"ADJUST TABLE CACHE PRIORITY": {
			"Syntax": "**ADJUST TABLE CACHE PRIORITY** ( *Tabela* ; *prioridade* )",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela cujo valor de prioridade de dados escalares vai ser ajustada"
				],
				[
					"prioridade",
					"Integer",
					"->",
					"Valor de prioridade de cache para a tabela"
				]
			],
			"Summary": "Este comando está reservado para necessidades específicas."
		},
		"After": {
			"Syntax": "**After**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução é um after"
				]
			],
			"Summary": "**After** devolve True para o ciclo de execução After."
		},
		"ALERT": {
			"Syntax": "**ALERT** ( *mensagem* {; *okBotaoTitulo*} )",
			"Params": [
				[
					"mensagem",
					"Text",
					"->",
					"Mensagem a exibir na caixa de diálogo de alerta"
				],
				[
					"okBotaoTitulo",
					"Text",
					"->",
					"Título do botão OK"
				]
			],
			"Summary": "O comando **ALERT** mostra uma caixa de diálogo de alerta composta de um ícone, de uma mensagem e de um botão OK."
		},
		"ALL RECORDS": {
			"Syntax": "**ALL RECORDS** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai selecionar todos os registros, ou tabela padrão, se omitido"
				]
			],
			"Summary": "ALL RECORDS seleciona todos os registros de *tabela* para o processo atual."
		},
		"APPEND DATA TO PASTEBOARD": {
			"Syntax": "**APPEND DATA TO PASTEBOARD** ( *tipoDados* ; *dados* )",
			"Params": [
				[
					"tipoDados",
					"Text",
					"->",
					"Tipo de dados a adiconar"
				],
				[
					"dados",
					"Blob",
					"->",
					"Dados a anexar na área de transferência"
				]
			],
			"Summary": "O comando APPEND DATA TO PASTEBOARD adiciona na área de transferência os dados do tipo especificado em *tipoDados* no BLOB *dados*."
		},
		"Append document": {
			"Syntax": "**Append document** ( *documento* {; *tipoArquivo*} ) : Time",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome de documento ou rota de acesso completa ou string vazia para caixa de diálogo de arquivo"
				],
				[
					"tipoArquivo",
					"Text",
					"->",
					"Lista de tipos de documentos a serem pesquisados, ou \"*\" para não pesquisar os documentos"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referência de documento"
				]
			],
			"Summary": "O comando Append document faz a mesma coisa que Open document: permite abrir um documento em disco."
		},
		"APPEND MENU ITEM": {
			"Syntax": "**APPEND MENU ITEM** ( *menu* ; *itemTexto* {; *subMenu* {; *processo* {; *}}} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"itemText",
					"Text",
					"->",
					"Texto para os novos itens de menu"
				],
				[
					"subMenu",
					"Text",
					"->",
					"Referência do submenu associado com o item"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: considerar metacaracteres como caracteres comuns"
				]
			],
			"Summary": "O comando APPEND MENU ITEM  adiciona nova linhas de menu ao menu cujo número ou referência se passa em *menu*."
		},
		"APPEND TO ARRAY": {
			"Syntax": "**APPEND TO ARRAY** ( *array* ; *valor* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array ao qual o elemento será anexado"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor a acrescentar"
				]
			],
			"Summary": "O comando APPEND TO ARRAY adiciona um novo elemento ao fim do array e atribui valor ao elemento."
		},
		"APPEND TO LIST": {
			"Syntax": "**APPEND TO LIST** ( *lista* ; *textoElem* ; *refElem* {; *sublista* ; *expandida*} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Texto do novo elemento de lista (máx. 255 caracteres)"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referencia único do novo elemento"
				],
				[
					"sublista",
					"Integer",
					"->",
					"Sub-lista opcional para adicionar ao novo elemento"
				],
				[
					"expandida",
					"Boolean",
					"->",
					"Indica se as sub-listas opcionais serão expandidas ou contraídas"
				]
			],
			"Summary": "O comando APPEND TO LIST  adiciona um novo elemento à lista hierárquica cujo número de referência se passa em *lista*."
		},
		"Application file": {
			"Syntax": "**Application file**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome longo da aplicação ou arquivo 4D executável"
				]
			],
			"Summary": "O comando Application file retorna o nome longo do arquivo executável ou da aplicação 4D que está sendo utilizada."
		},
		"Application info": {
			"Syntax": "**Application info** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Informação sobre a atividade da aplicação ativa"
				]
			],
			"Summary": "O comando **Application info** retorna um objeto que traz informação detalhada sobre a atividade da aplicação ativa e da configuração de rede."
		},
		"Application type": {
			"Syntax": "**Application type**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor numérico que denota o tipo de aplicação"
				]
			],
			"Summary": "O comando Application type retorna um valor numérico que representa o tipo de ambiente 4D que você está utilizando."
		},
		"Application version": {
			"Syntax": "**Application version** {( *buildNum* {; *} )} : Text",
			"Params": [
				[
					"buildNum",
					"Integer",
					"<-",
					"Número de build"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passar número de versão longo, caso contrário número de versão curto"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Número de versão em uma string codificada"
				]
			],
			"Summary": "O comando Application version retorna uma cadeia codificada que dá o número da versão do ambiente 4D que está sendo utilizado."
		},
		"APPLY TO SELECTION": {
			"Syntax": "**APPLY TO SELECTION** ( *tabela* ; *formula* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai aplicar a fórmula ou Tabela por padrão, se omitida"
				],
				[
					"formula",
					"Expression",
					"->",
					"Uma linha de código ou um método"
				]
			],
			"Summary": "APPLY TO SELECTION aplica *formula* a cada registro da seleção atual de tabela."
		},
		"Arctan": {
			"Syntax": "**Arctan** ( *número* ) : Real",
			"Params": [
				[
					"número",
					"Real",
					"->",
					"Tangente para a qual deseja calcular o ângulo"
				],
				[
					"Resultado da função",
					"Real",
					"<-",
					"Ângulo em radianos"
				]
			],
			"Summary": "Arctan retorna o ângulo, expresso em radianos, da tangente *numero*."
		},
		"ARRAY BLOB": {
			"Syntax": "**ARRAY BLOB** ( *nomArray* ; *tam* {; *tam2*} )",
			"Params": [
				[
					"nomArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tam",
					"Integer",
					"->",
					"Número de elementos do array ou número de arrays se especificado tam2"
				],
				[
					"tam2",
					"Integer",
					"->",
					"Número dos elementos dos array 2D"
				]
			],
			"Summary": "O comando **ARRAY BLOB** cria e/ou muda o tamaño de um array de elementos de tipo Blob em memória ."
		},
		"ARRAY BOOLEAN": {
			"Syntax": "**ARRAY BOOLEAN** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY BOOLEAN cria e/ou redimensiona um array de elementos  na memória."
		},
		"ARRAY DATE": {
			"Syntax": "**ARRAY DATE** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY DATE cria e/ou redimensiona um array de elementos de tipo Data em memória."
		},
		"ARRAY INTEGER": {
			"Syntax": "**ARRAY INTEGER** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY INTEGER cria e/ou redimensiona um array de elementos de tipo *Inteiro* de 2 bytes de memória."
		},
		"ARRAY LONGINT": {
			"Syntax": "**ARRAY LONGINT** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY LONGINT cria e/ou redimensiona um array de elementos de tipo Intero longo de 4 bytes em memória."
		},
		"ARRAY OBJECT": {
			"Syntax": "**ARRAY OBJECT** ( *nomArray* ; *tam* {; *tam2*} )",
			"Params": [
				[
					"nomArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tam",
					"Integer",
					"->",
					"Número de elementos do array ou número de arrays se especificado tam2"
				],
				[
					"tam2",
					"Integer",
					"->",
					"Número de elementos do array 2D"
				]
			],
			"Summary": "O comando **ARRAY OBJECT** cria e/ou redimensiona um array de elementos de tipo Objeto de linguagem em memória."
		},
		"ARRAY PICTURE": {
			"Syntax": "**ARRAY PICTURE** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY PICTURE cria e/ou redimensiona um array de elementos Imagem na memória."
		},
		"ARRAY POINTER": {
			"Syntax": "**ARRAY POINTER** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY POINTER cria e/ou redimensiona um array de elementos do tipo Puntero na memória."
		},
		"ARRAY REAL": {
			"Syntax": "**ARRAY REAL** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY REAL cria e/ou redimensiona um array de elementos do tipo Real na memória."
		},
		"ARRAY TEXT": {
			"Syntax": "**ARRAY TEXT** ( *nomeArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomeArray",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de linhas se tamanho 2 for especificado"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas no array de duas dimensões"
				]
			],
			"Summary": "O comando ARRAY TEXT cria e/ou redimensiona um array de elementos do tipo Texto na memória."
		},
		"ARRAY TIME": {
			"Syntax": "**ARRAY TIME** ( *nomArray* ; *tamanho* {; *tamanho2*} )",
			"Params": [
				[
					"nomArray",
					"Array",
					"->",
					"Nome de array"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de elementos no array ou Número de filas se especificado tamanho2"
				],
				[
					"tamanho2",
					"Integer",
					"->",
					"Número de colunas em um array de duas dimensões"
				]
			],
			"Summary": "O comando **ARRAY TIME** cria ou redimensiona um array de tipo tempo em memória."
		},
		"ARRAY TO COLLECTION": {
			"Syntax": "**ARRAY TO COLLECTION**  ( *coleçãlo* ; *array* {; *nomProp*}{; *array2* ; *nomProp2* ; ... ; *arrayN* ; *nomPropN*} )",
			"Params": [
				[
					"coleçãlo",
					"Collection",
					"<-",
					"Coleção a receber o array de dados"
				],
				[
					"array",
					"Array",
					"->",
					"Array a copiar para a coleção, se nomeProp for passado, array a copiar aos valores da arrayProp na coleção"
				],
				[
					"nomProp",
					"Text",
					"->",
					"Nome de propriedade objeto cujmo valor a preencher com elementos do array"
				]
			],
			"Summary": "O comando **ARRAY TO COLLECTION**  \\[#descv\\]copia um ou mais *array*(s) nos elementos ou os valores de *nomeProp* da *coleção*\\[#/descv\\]."
		},
		"ARRAY TO LIST": {
			"Syntax": "**ARRAY TO LIST** ( *array* ; *lista* {; *itemRefs*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array do qual se copia os elementos de array"
				],
				[
					"lista",
					"Text, Integer",
					"->",
					"Lista na qual se copia os elementos de array"
				],
				[
					"itemRefs",
					"Array",
					"->",
					"Arrays numéricos do número de referência dos elementos"
				]
			],
			"Summary": "O comando ARRAY TO LIST cria ou substitui a lista hierárquica ou a lista de escolha (criada no editor LIsta) que é especificada em *lista* usando os elementos do *array* *."
		},
		"ARRAY TO SELECTION": {
			"Syntax": "**ARRAY TO SELECTION** {( *array* ; *campo* {; *array2* ; *campo2* ; ... ; *arrayN* ; *campoN*}{; *} )}",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a se copiar na seleção"
				],
				[
					"campo",
					"Field",
					"<-",
					"Campo para receber os valores do array"
				],
				[
					"*",
					"Operador",
					"->",
					"Aguarda execução"
				]
			],
			"Summary": "O comando **ARRAY TO SELECTION** copia um ou mais arrays em uma seleção de registros."
		},
		"ASSERT": {
			"Syntax": "**ASSERT** ( *expressaoBool* {; *mensagemTexto*} )",
			"Params": [
				[
					"expressaoBool",
					"Boolean",
					"->",
					"Expressão Booleana"
				],
				[
					"mensagemText",
					"Text",
					"->",
					"Texto de mensagem de erro"
				]
			],
			"Summary": "O comando **ASSERT** avalia a expressão *boolExpression* passa no parâmetro e, se retornar falso, para a execução do código com uma mensagem de erro ."
		},
		"Asserted": {
			"Syntax": "**Asserted** ( *expressaoBool* {; *mensagemTexto*} ) : Boolean",
			"Params": [
				[
					"expressaoBool",
					"Boolean",
					"->",
					"Expressão Booleana"
				],
				[
					"mensagemText",
					"Text",
					"->",
					"texto da mensagem de erro"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Resultado da avaliação de expressaoBool"
				]
			],
			"Summary": "O comando Asserted tem um funcionamento similar ao do comando ASSERT, com a diferença de que retorna um valor que é o resultado da avaliação do parâmetro *expressaoBool*."
		},
		"Average": {
			"Syntax": "**Average** ( *series* {; *atributoRota*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Dados para os quais se retorna a média"
				],
				[
					"atributoRota",
					"Text",
					"->",
					"Rota do atributo para o qual vai retornar a média"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Média aritmética da série"
				]
			],
			"Summary": "**Average** retorna a média aritmética de *series*."
		},
		"BACKUP INFO": {
			"Syntax": "**BACKUP INFO** ( *seletor* ; *info1* ; *info2* )",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Tipo de informação a ser obtida"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"Valor 1 do seletor"
				],
				[
					"info2",
					"Time, Text",
					"<-",
					"Valor 2 do seletor"
				]
			],
			"Summary": "O comando BACKUP INFO permite obter informação relacionada com o último backup efetuado na base de dados."
		},
		"BACKUP": {
			"Syntax": "**BACKUP**",
			"Params": [],
			"Summary": "O comando BACKUP inicia o backup do banco de dados utilizando os parâmetros de cópia de segurança atuais."
		},
		"BASE64 DECODE": {
			"Syntax": "**BASE64 DECODE** ( *textoCodificado* {; *BLOB*}{; *} )",
			"Params": [
				[
					"textoCodificado",
					"Text, Blob",
					"->",
					"Texto que contém o BLOB codificado no formato Base64"
				],
				[
					"<-",
					"Valor decodificado (se parâmetro decodificado for omitido)"
				],
				[
					"Blob",
					"Text, Blob",
					"<-",
					"BLOB decodificado"
				],
				[
					"*",
					"Operador",
					"->",
					"Decodificado em formato Base64URL"
				]
			],
			"Summary": "O comando **BASE64 DECODE** permite decodificar o texto ou valor de BLOB codificado em formato base64 ou Base64URL passado no parâmetro *aDecodificar*."
		},
		"BASE64 ENCODE": {
			"Syntax": "**BASE64 ENCODE** ( *BLOB* {; *textoCodificado*}{; *} )",
			"Params": [
				[
					"Blob",
					"Blob, Text",
					"->",
					"BLOB a codificar em formato Base64"
				],
				[
					"<-",
					"BLOB  codificado em formato Base64"
				],
				[
					"textoCodificado",
					"Blob, Text",
					"<-",
					"Resultado do BLOB codificado em formato Base64"
				],
				[
					"*",
					"Operador",
					"->",
					"Codificar no formato em Base64URL"
				]
			],
			"Summary": "O comando **BASE64 ENCODE** codifica o texto ou BLOB passado no parâmetro em *aDecodificar* em formato base64 ou Base64URL."
		},
		"BEEP": {
			"Syntax": "**BEEP**",
			"Params": [],
			"Summary": "O comando BEEP faz com que o PC ou Macintosh gerem um beep."
		},
		"Before selection": {
			"Syntax": "**Before selection** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai testar se o registro do ponteiro está antes do primeiro registro selecionado, ou tabela padrão, se omitido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Sim (TRUE) ou Não (FALSE)"
				]
			],
			"Summary": "Before selection retorna TRUE quando o ponteiro do registro atual se encontra antes do primeiro registro da seleção atual de *tabela*."
		},
		"Before": {
			"Syntax": "**Before**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução é um Before"
				]
			],
			"Summary": "**Before** devolve True para o ciclo de execução Before."
		},
		"Begin SQL": {
			"Syntax": "**Begin SQL**",
			"Params": [],
			"Summary": "Begin SQL é uma palavra chave que permite indicar no editor de métodos o inicio de uma sequência de comandos SQL que deve ser interpretada pela fonte de dados atual do processo (o motor SQL integrado de 4D ou toda fonte especificada através o comando SQL LOGIN)."
		},
		"BLOB PROPERTIES": {
			"Syntax": "**BLOB PROPERTIES** ( *BLOB* ; *comprimido* {; *descompTam* {; *tamanhoAtual*}} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB do qual obter informação"
				],
				[
					"comprimido",
					"Integer",
					"<-",
					"0 = BLOB não está comprimido 1 = BLOB comprimido modo compacto 2 = BLOB comprimido modo rápido"
				],
				[
					"descompTam",
					"Integer",
					"<-",
					"Tamanho do BLOB (em bytes) quando não está comprimido"
				],
				[
					"tamanhoAtual",
					"Integer",
					"<-",
					"Tamanho atual do BLOB (em bytes)"
				]
			],
			"Summary": "O comando **BLOB PROPERTIES** retorna informações sobre o *blob* BLOB."
		},
		"BLOB size": {
			"Syntax": "**BLOB size** ( *BLOB* ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"Campo ou variável BLOB"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamanho em bytes do BLOB"
				]
			],
			"Summary": "BLOB size retorna o tamanho do *blob* expressado em bytes."
		},
		"BLOB TO DOCUMENT": {
			"Syntax": "**BLOB TO DOCUMENT** ( *documento* ; *BLOB* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome do documento gerado"
				],
				[
					"Blob",
					"Blob",
					"->",
					"Novo conteúdo para o documento"
				]
			],
			"Summary": "**BLOB TO DOCUMENT** reescreve todo o conteúdo do documento utilizando os dados armazenados no blob."
		},
		"BLOB to integer": {
			"Syntax": "**BLOB to integer** ( *BLOB* ; *byteOrdem* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB do qual obter o valor inteiro"
				],
				[
					"byteOrdem",
					"Integer",
					"->",
					"0 Ordem de bytes nativo 1 Ordem de bytes Macintosh 2 Ordem de bytes PC"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset no BLOB (expressado em bytes)"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da leitura"
				],
				[
					"Resultado da função",
					"Integer",
					"<-",
					"Valor inteiro (2 bytes)"
				]
			],
			"Summary": "O comando BLOB to integer retorna um valor inteiro de 2 bytes inteiro lido do BLOB *blob*."
		},
		"BLOB to list": {
			"Syntax": "**BLOB to list** ( *BLOB* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contém uma lista hierárquica"
				],
				[
					"offset",
					"Integer",
					"<->",
					"Offset no BLOB (expressado em bytes)"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da leitura"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Referência da lista criada recentemente"
				]
			],
			"Summary": "O comando BLOB to list cria uma lista hierárquica com os dados armazenados no BLOB blob no o offset de bytes (a partir de zero) especificado pelo *offset* e retorna um número de referência de lista hierárquica para essa nova lista."
		},
		"BLOB to longint": {
			"Syntax": "**BLOB to longint** ( *BLOB* ; *byteOrdem* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB do qual obter o valor inteiro longo"
				],
				[
					"byteOrdem",
					"Integer",
					"->",
					"0 Ordem de bytes nativo 1 Ordem de bytes Macintosh 2 Ordem de bytes PC"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset no BLOB (expressado em bytes)"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da leitura"
				],
				[
					"Resultado da função",
					"Integer",
					"<-",
					"Valor inteiro longo (4 bytes)"
				]
			],
			"Summary": "O comando BLOB to longint retorna um valor de tipo Inteiro longo (4 bytes) lido do BLOB *blob*."
		},
		"BLOB TO PICTURE": {
			"Syntax": "**BLOB TO PICTURE** ( *imagemBlob* ; *imagem* {; *codec*} )",
			"Params": [
				[
					"imagemBlob",
					"Blob",
					"->",
					"Blob que contém uma imagem"
				],
				[
					"imagem",
					"Picture",
					"<-",
					"Imagem do BLOB"
				],
				[
					"codec",
					"Text",
					"->",
					"Codec de identificação de Imagem"
				]
			],
			"Summary": "O comando BLOB TO PICTURE insere uma imagem armazenada em um BLOB em um campo ou variável imagem 4D, sem importar seu formato original."
		},
		"BLOB to print settings": {
			"Syntax": "**BLOB to print settings** ( *confImpr* {; *params*} ) : Integer",
			"Params": [
				[
					"confImpr",
					"Blob",
					"->",
					"BLOB que contém as configurações de Impressão"
				],
				[
					"params",
					"Integer",
					"->",
					"0 = restaura valores salvos para número de cópias e faixa de páginas 1 = reseta para os valores padrão"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"código de estatus 1= operação bem sucedida, 0 = não há impressora atual, -1=parâmetros incorretos, 2=impressora mudada"
				]
			],
			"Summary": "O comando **BLOB to print settings** substitui a configuração de impressão 4D atual pelos parâmetros armazenados no BLOB *confImpr*."
		},
		"BLOB to real": {
			"Syntax": "**BLOB to real** ( *BLOB* ; *formatoReal* {; *offset*} ) : Real",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB do qual obter o valor de tipo Real"
				],
				[
					"formatoReal",
					"Integer",
					"->",
					"0 Formato real nativo 1 Formato real extendido 2 Formato real duplo Macintosh 3 Formato real duplo Windows"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset no BLOB (expressado em bytes)"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da leitura"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor real"
				]
			],
			"Summary": "O comando BLOB to real retorna um valor Real lido a partir do BLOB *blob*."
		},
		"BLOB to text": {
			"Syntax": "**BLOB to text** ( *BLOB* ; *formatoTexto* {; *offset* {; *compTexto*}} )  : Text",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB do qual obter o texto"
				],
				[
					"formatoTexto",
					"Integer",
					"->",
					"Formato e conjunto de caracteres de texto"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset no BLOB (expressado em bytes)"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da leitura"
				],
				[
					"compTexto",
					"Integer",
					"->",
					"Número de caracteres a serem lidos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor do texto"
				]
			],
			"Summary": "O comando BLOB to text retorna um valor de texto lido do BLOB *blob*."
		},
		"BLOB TO USERS": {
			"Syntax": "**BLOB TO USERS** ( *usuarios* )",
			"Params": [
				[
					"usuarios",
					"Blob",
					"->",
					"BLOB (criptografado) contendo contas de usuários do banco de dados criadas e guardadas pelo administrador do banco"
				]
			],
			"Summary": "O comando BLOB TO USERS adiciona as contas de usuários presentes no BLOB *usuarios* ao banco de dados."
		},
		"BLOB TO VARIABLE": {
			"Syntax": "**BLOB TO VARIABLE** ( *BLOB* ; *variável* {; *offset*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contém variáveis 4D"
				],
				[
					"variável",
					"Variable",
					"<->",
					"Variável a ser escrita com o conteúdo do BLOB"
				],
				[
					"",
					"",
					"",
					"Integer",
					"->",
					"Posição da variável no BLOB"
				],
				[
					"<-",
					"Posição da próxima variável no BLOB"
				]
			],
			"Summary": "O comando BLOB TO VARIABLE  reescreve a variável *variável* com os dados armazenados dentro do BLOB *blob* no deslocamento de byte (a partir de zero) especificada pelo *offset*."
		},
		"Bool": {
			"Syntax": "**Bool** ( *expressao* ) : Boolean",
			"Params": [
				[
					"expressao",
					"Expression",
					"->",
					"Expressão para a qual vai retornar a forma booleana"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Forma booleana da expressão"
				]
			],
			"Summary": "O comando **Bool** devolve a forma booleana da expressão que foi passado em *expressao*."
		},
		"BOOLEAN ARRAY FROM SET": {
			"Syntax": "**BOOLEAN ARRAY FROM SET** ( *booleanArr* {; *conjunto*} )",
			"Params": [
				[
					"booleanArr",
					"Boolean array",
					"<-",
					"Array para indicar se um registro está no conjunto ou não"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto ou UserSet se o parâmetro for omitido"
				]
			],
			"Summary": "O comando BOOLEAN ARRAY FROM SET  preenche um array de booleanos indicando se cada registro na tablea está ou não no *conjunto*."
		},
		"BREAK LEVEL": {
			"Syntax": "**BREAK LEVEL** ( *nivel* {; *saltoPagina*} )",
			"Params": [
				[
					"nivel",
					"Integer",
					"->",
					"Número de níveis de quebra"
				],
				[
					"saltoPagina",
					"Integer",
					"->",
					"Nível de quebra para o qual fazer um salto de página."
				]
			],
			"Summary": "BREAK LEVEL especifica o número de níveis de quebra em um relatório realizado utilizando PRINT SELECTION."
		},
		"BRING TO FRONT": {
			"Syntax": "**BRING TO FRONT** ( *processo* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo do processo a passar ao primeiro plano"
				]
			],
			"Summary": "BRING TO FRONT passa todas as janelas que pertencem a *processo* ao primeiro plano."
		},
		"BUILD APPLICATION": {
			"Syntax": "**BUILD APPLICATION** {( *constrAppConfigurações* )}",
			"Params": [
				[
					"constrAppConfigurações",
					"Text",
					"->",
					"Endereço de acesso completo do arquivo de configurações a ser usado"
				]
			],
			"Summary": "O comando BUILD APPLICATION inicia o processo de geração da aplicação levando em consideração os parâmetros definidos nas configurações do aplicativo atual ou na configuração de aplicação designado no parâmetro *constrAppConfigurações*."
		},
		"Cache info": {
			"Syntax": "**Cache info** {( *bdFiltro* )} : Object",
			"Params": [
				[
					"bdFiltro",
					"Object",
					"->",
					"Define a lista de atributos a ser retornada (filtrada por banco de dados)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Informação sobre cache"
				]
			],
			"Summary": "O comando **Cache info** devolve um objeto que contenha a informação detalhada sobre o conteúdo atual da caché (memória utilizada, tabelas e índices carregados, etc.)"
		},
		"CALL FORM": {
			"Syntax": "**CALL FORM** ( *janela* ; *metodo* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela"
				],
				[
					"metodo",
					"Object, Text",
					"->",
					"Nome do método de projeto a chamar"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetros passados ao método"
				]
			],
			"Summary": "O comando **CALL FORM** executa o método de projeto cujo nome passou em *metodo* com um ou vários *param*(s) no contexto de um formulário que se mostra em uma *janela*, independentemente do processo ao que pertence a janela."
		},
		"CALL SUBFORM CONTAINER": {
			"Syntax": "**CALL SUBFORM CONTAINER** ( *event* )",
			"Params": [
				[
					"event",
					"Integer",
					"->",
					"Event to be sent"
				]
			],
			"Summary": "O comando **CALL SUBFORM CONTAINER** permite a uma instância de subformulário enviar o *evento* ao objeto subformulário que o contiver."
		},
		"CALL WORKER": {
			"Syntax": "**CALL WORKER** ( *processo* ; *método* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"processo",
					"Text, Integer",
					"->",
					"Nome ou número de processo do worker"
				],
				[
					"método",
					"Object, Text",
					"->",
					"Nome do método de projeto a chamar"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetros passados ao método"
				]
			],
			"Summary": "O comando **CALL WORKER** cria ou chama o processo worker cujo nome ou ID se passa em *processo* e pede a execução do *metodo* em seu contexto com o parâmetro opcional *param*."
		},
		"CANCEL TRANSACTION": {
			"Syntax": "**CANCEL TRANSACTION**",
			"Params": [],
			"Summary": "CANCEL TRANSACTION cancela a transação que foi aberta pelo comando START TRANSACTION do nível correspondente no processo atual."
		},
		"CANCEL": {
			"Syntax": "**CANCEL**",
			"Params": [],
			"Summary": "No contexto de entrada de dados, **CANCEL** realiza a mesma ação que se o usuário tivesse pressionado a tecla de cancelação (**Esc**)."
		},
		"Caps lock down": {
			"Syntax": "**Caps lock down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla Caps Lock"
				]
			],
			"Summary": "Caps lock down retorna TRUE se a tecla Caps Lock estiver pressionada."
		},
		"CHANGE CURRENT USER": {
			"Syntax": "**CHANGE CURRENT USER** {( *usuario* ; *senha* )}",
			"Params": [
				[
					"usuario",
					"Text, Integer",
					"->",
					"Nome do usuário ou ID única"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha (não criptografada)"
				]
			],
			"Summary": "CHANGE CURRENT USER permite mudar a identidade do usuário atual no banco, sem ter que sair."
		},
		"CHANGE LICENSES": {
			"Syntax": "**CHANGE LICENSES**",
			"Params": [],
			"Summary": "O comando CHANGE LICENSES mostra a caixa de diálogo de atualização de licenças 4D ."
		},
		"CHANGE PASSWORD": {
			"Syntax": "**CHANGE PASSWORD** ( *senha* )",
			"Params": [
				[
					"senha",
					"Text",
					"->",
					"Nova senha"
				]
			]
		},
		"Change string": {
			"Syntax": "**Change string** ( *fonte* ; *novo* ; *posiçao* ) : Text",
			"Params": [
				[
					"fonte",
					"Text",
					"->",
					"Cadeia original"
				],
				[
					"novo",
					"Text",
					"->",
					"Novos caracteres"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Onde começar as mudanças"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia resultado"
				]
			]
		},
		"Char": {
			"Syntax": "**Char** ( *codigoCaractere* ) : Text",
			"Params": [
				[
					"codigoCaractere",
					"Integer",
					"->",
					"Código do caractere"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Caractere representado por códigoCaractere"
				]
			],
			"Summary": "O comando **Char** devolve o caractere cujo código é *codigoCaractere*."
		},
		"Character code": {
			"Syntax": "**Character code** ( *caractere* ) : Integer",
			"Params": [
				[
					"caractere",
					"Text",
					"->",
					"Caractere para o qual você quer conseguir o código"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código dos caracteres"
				]
			],
			"Summary": "O comando Character code devolve o código Unicode UTF-16 (incluído entre 1 e 65535) de *umCaractere*."
		},
		"CHECK LOG FILE": {
			"Syntax": "**CHECK LOG FILE**",
			"Params": [],
			"Summary": "O comando **CHECK LOG FILE** mostra a caixa de diálogo de visulização do arquivo de histórico atual da base de dados (acessível também através da janela do Centro de segurança e manutenção)"
		},
		"Choose": {
			"Syntax": "**Choose** ( *criterio* ; *valor* {; *valor2* ; ... ; *valorN*} )  : any",
			"Params": [
				[
					"criterio",
					"Boolean, Integer",
					"->",
					"Valor a testar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valores possíveis"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor do critério"
				]
			],
			"Summary": "O comando **Choose** retorna um dos valores passados nos parâmetros *valor1, valor2*, etc."
		},
		"CLEAR LIST": {
			"Syntax": "**CLEAR LIST** ( *lista* {; *} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"*",
					"Operator",
					"->",
					"Se especificada, se há sub-listas se deve apagar da memória, Se omitida, as sub-listas não são apagadas"
				]
			],
			"Summary": "O comando CLEAR LIST apaga da memória a lista hierárquica cujo número de referência é passado em *lista*."
		},
		"CLEAR NAMED SELECTION": {
			"Syntax": "**CLEAR NAMED SELECTION** ( *nome* )",
			"Params": [
				[
					"nome",
					"Text",
					"->",
					"Nome da seleção temporal a apagar"
				]
			],
			"Summary": "CLEAR NAMED SELECTION apaga *nome* da memória e libera a memória utilizada por *nome*."
		},
		"CLEAR PASTEBOARD": {
			"Syntax": "**CLEAR PASTEBOARD**",
			"Params": [],
			"Summary": "O comando CLEAR PASTEBOARD apaga o conteúdo da área de transferência."
		},
		"CLEAR SEMAPHORE": {
			"Syntax": "**CLEAR SEMAPHORE** ( *semaforo* )",
			"Params": [
				[
					"semaforo",
					"Text",
					"->",
					"Semáforo para limpar"
				]
			],
			"Summary": "CLEAR SEMAPHORE apaga o *semáforo* previamente criada pela função Semaphore."
		},
		"CLEAR SET": {
			"Syntax": "**CLEAR SET** ( *conjunto* )",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto a limpar da memória"
				]
			],
			"Summary": "CLEAR SET Apaga *conjunto* da memória e libera a memória utilizada por *conjunto*."
		},
		"CLEAR VARIABLE": {
			"Syntax": "**CLEAR VARIABLE** ( *variavel* )",
			"Params": [
				[
					"variavel",
					"Variable",
					"->",
					"Variável a apagar"
				]
			],
			"Summary": "CLEAR VARIABLE reinicia *variavel* no valor por padrão de seu tipo (por exemplo, cadeia vazia para os tipos Alfa e Texto, *0* para as variáveis numéricas, nenhum elemento para um array, etc.)."
		},
		"Clickcount": {
			"Syntax": "**Clickcount**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de cliques consecutivos"
				]
			],
			"Summary": "O comando **Clickcount** devolve, no contexto de um evento clique, o número de vezes que o usuário fez clique de maneira repetida com o mesmo botão do mouse."
		},
		"CLOSE DOCUMENT": {
			"Syntax": "**CLOSE DOCUMENT** ( *docRef* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referência de documento"
				]
			],
			"Summary": "CLOSE DOCUMENT fecha o documento especificado por *docRef*."
		},
		"CLOSE PRINTING JOB": {
			"Syntax": "**CLOSE PRINTING JOB**",
			"Params": [],
			"Summary": "O comando CLOSE PRINTING JOB permite fechar o trabalho de impressão previamente aberto pelo comando OPEN PRINTING JOB e enviar à impressora atual o documento de impressão eventualmente construído."
		},
		"CLOSE RESOURCE FILE": {
			"Syntax": "**CLOSE RESOURCE FILE** ( *resArquivo* )",
			"Params": [
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referencia de arquivo recurso"
				]
			],
			"Summary": "O comando **CLOSE RESOURCE FILE** fecha o arquivo de recursos cujo número de referência se passa em *resArquivo*."
		},
		"CLOSE WINDOW": {
			"Syntax": "**CLOSE WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				]
			],
			"Summary": "CLOSE WINDOW fecha a janela ativa aberta pelo comando Open window ou Open form window no processo atual."
		},
		"COLLECTION TO ARRAY": {
			"Syntax": "**COLLECTION TO ARRAY** ( *coleção* ; *array* {; *nomProp*}{; *array2* ; *nomProp2* ; ... ; *arrayN* ; *nomPropN*} )",
			"Params": [
				[
					"coleção",
					"Collection",
					"->",
					"Coleção a copiar em array"
				],
				[
					"array",
					"Array",
					"<-",
					"Array que vai receber os elementos da coleção; se nomeProp for passado, array que  vai receber os valores de nomeProp na coleção"
				],
				[
					"nomProp",
					"Text",
					"->",
					"Nome de propriedade de objeto cujos valores vão ser copiados em array (\"\" para todos os elementos)"
				]
			],
			"Summary": "O comando **COLLECTION TO ARRAY** preenche um ou mais *array*(s) com elementos ou valores de *nomeProp* da *coleção* em *array*(s)."
		},
		"COMBINE PICTURES": {
			"Syntax": "**COMBINE PICTURES** ( *imagemResult* ; *imagem1* ; *operador* ; *imagem2* {; *deslocHor* ; *deslocVert*} )",
			"Params": [
				[
					"imagemResult",
					"Picture",
					"<-",
					"Imagem resultante da combinação"
				],
				[
					"imagem1",
					"Picture",
					"->",
					"Primeira imagem a combinar"
				],
				[
					"operador",
					"Integer",
					"->",
					"Tipo de combinação a ser feita"
				],
				[
					"imagem2",
					"Picture",
					"->",
					"Segunda imagem a combinar"
				],
				[
					"deslocHor",
					"Integer",
					"->",
					"Deslocamento horizontal para super-imposição"
				],
				[
					"deslocVert",
					"Integer",
					"->",
					"Deslocamento vertical para super-imposição"
				]
			],
			"Summary": "O comando COMBINE PICTURES permite combinar as imagens *imagem1* e *imagem2* em modo *operador* para produzir uma terceira, *imagemResult*."
		},
		"Compact data file": {
			"Syntax": "**Compact data file** ( *endEstrutura* ; *endDados* {; *pastaArquivo* {; *opçao* {; *metodo*}}} ) : Text",
			"Params": [
				[
					"endEstrutura",
					"Text",
					"->",
					"Endereço de acesso ao arquivo de estrutura"
				],
				[
					"endDados",
					"Text",
					"->",
					"Endereço de acesso ao arquivo de dados"
				],
				[
					"pastaArquivo",
					"Text",
					"->",
					"Endereço de acesso a pasta onde será colocado o arquivo de dados original"
				],
				[
					"opçao",
					"Integer",
					"->",
					"Opções de compactação"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nome do método 4D de retrochamada"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Endereço de acesso completo à pasta que contém o arquivo de dados original"
				]
			],
			"Summary": "O comando **Compact data file** \\[# descv\\] compacta o arquivo de dados designado pelo parâmetro *endereçoDados* associado com o arquivo de estrutura *endereçoEstrutura*."
		},
		"Compare strings": {
			"Syntax": "**Compare strings** ( *string* ; *stringB* {; *opções*} ) : Integer",
			"Params": [
				[
					"string",
					"Text",
					"->",
					"String a comparar"
				],
				[
					"stringB",
					"Text",
					"->",
					"String a ser comparada"
				],
				[
					"opções",
					"Integer",
					"->",
					"Regras de comparação"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Resultado da comparação de strings"
				]
			],
			"Summary": "O comando **Compare strings** retorna um valor negativo, zero ou positivo dependendo de se *stringA* for avaliada como menor, igual ou maior que *stringB*."
		},
		"COMPONENT LIST": {
			"Syntax": "**COMPONENT LIST** ( *arrayComponentes* )",
			"Params": [
				[
					"arrayComponentes",
					"Text array",
					"<-",
					"Nomes dos componentes"
				]
			],
			"Summary": "O comando COMPONENT LIST dimensiona e preenche a matriz *arrayComponentes* com os nomes dos componentes carregados pela aplicação 4D para o banco de dados atual."
		},
		"COMPRESS BLOB": {
			"Syntax": "**COMPRESS BLOB** ( *BLOB* {; *compressão*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a ser comprimido"
				],
				[
					"compressão",
					"Integer",
					"->",
					"Se não se omite: 1, compressão máxima possível 2, velocidade de compressão máxima"
				]
			],
			"Summary": "O comando COMPRESS BLOB comprime o BLOB blob usando o algoritmo de compressão interno de 4D."
		},
		"CONFIRM": {
			"Syntax": "**CONFIRM** ( *mensagem* {; *okBotaoTitulo* {; *cancelarBotaoTitulo*}} )",
			"Params": [
				[
					"mensagem",
					"Text",
					"->",
					"Mensagem a exibir na caixa de diálogo de confirmação"
				],
				[
					"okBotaoTitulo",
					"Text",
					"->",
					"Título do botão OK"
				],
				[
					"cancelarBotaoTitulo",
					"Text",
					"->",
					"Título do botão Cancelar"
				]
			],
			"Summary": "O comando CONFIRM  mostra uma caixa de diálogo de confirmação composta de um ícone, uma mensagem, um botão OK, e um botão Cancelar."
		},
		"Contextual click": {
			"Syntax": "**Contextual click**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadeiro se detectado um clique contextual, caso contrario Falso"
				]
			],
			"Summary": "O comando Contextual click retorna Verdadeiro se foi realizado um clique contextual"
		},
		"CONVERT COORDINATES": {
			"Syntax": "**CONVERT COORDINATES** ( *xCoord* ; *yCoord* ; *de* ; *para* )",
			"Params": [
				[
					"xCoord",
					"Integer",
					"->",
					"Coordenada horizontal de um ponto (Inicial)"
				],
				[
					"<-",
					"Coordenada horizontal de um ponto (Convertida)"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"Coordenada vertical de um ponto (inicial)"
				],
				[
					"<-",
					"Coordenada vertical de um ponto (convertida)"
				],
				[
					"de",
					"Integer",
					"->",
					"Sistema de coordenadas que vai ser convertido"
				],
				[
					"para",
					"Integer",
					"->",
					"Sistema de coordenadas para o qual vai converter"
				]
			],
			"Summary": "O comando **CONVERT COORDINATES**converte as coordenadas (x;y) de um ponto de um sistema de coordenadas para outro."
		},
		"CONVERT FROM TEXT": {
			"Syntax": "**CONVERT FROM TEXT** ( *texto4D* ; *conjuntoCaracteres* ; *blobConvertido* )",
			"Params": [
				[
					"texto4D",
					"Text",
					"->",
					"Texto expresso no conjunto de caracteres atual de 4D"
				],
				[
					"conjuntoCaracteres",
					"Text, Integer",
					"->",
					"Nome ou número do conjunto de caracteres"
				],
				[
					"blobConvertido",
					"Blob",
					"<-",
					"BLOB contendo o texto convertido"
				]
			],
			"Summary": "O comando CONVERT FROM TEXT permite converter um texto expresso no conjunto de caracteres atual de 4D em um texto expresso em outro conjunto de caracteres."
		},
		"Convert path POSIX to system": {
			"Syntax": "**Convert path POSIX to system** ( *rotaPosix* {; *} ) : Text",
			"Params": [
				[
					"rotaPosix",
					"Text",
					"->",
					"Nome de rota POSIX"
				],
				[
					"*",
					"Operador",
					"->",
					"Opção de codificação"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota de acesso expressa em sintaxe de sistema"
				]
			],
			"Summary": "O comando Convert path POSIX to system converte uma rota de acesso expressa com a sintaxe POSIX (Unix) em uma rota expressa com a sintaxe sistema."
		},
		"Convert path system to POSIX": {
			"Syntax": "**Convert path system to POSIX** ( *rotaSistema* {; *} ) : Text",
			"Params": [
				[
					"rotaSistema",
					"Text",
					"->",
					"Rota de acesso absoluta ou relativa, expressa em sintaxe de sistema"
				],
				[
					"*",
					"Operador",
					"->",
					"Opção de codificação"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Absolute pathname expressed in POSIX syntax"
				]
			],
			"Summary": "O comando Convert path system to POSIX converte uma rota expressa com a sintaxe sistema em uma rota expressa com a sintaxe POSIX (Unix)."
		},
		"CONVERT PICTURE": {
			"Syntax": "**CONVERT PICTURE** ( *imagem* ; *codec* {; *compressao*} )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem a ser convertida"
				],
				[
					"<-",
					"Imagem convertida"
				],
				[
					"codec",
					"Text",
					"->",
					"Codec de identificação de Imagem"
				],
				[
					"compressao",
					"Real",
					"->",
					"Qualidade da compressão"
				]
			],
			"Summary": "O comando CONVERT PICTURE converte *imagem* em um novo tipo."
		},
		"Convert to text": {
			"Syntax": "**Convert to text** ( *BLOB* ; *conjuntoCaracteres* ) : Text",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"Blob que contém texto expresso num conjunto de caracteres específico"
				],
				[
					"conjuntoCaracteres",
					"Text, Integer",
					"->",
					"Nome ou número do conjunto de caracteres do BLOB"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Conteúdos do BLOB expressos em conjunto de caracteres 4D"
				]
			],
			"Summary": "O comando Convert to text converte o texto contido no parâmetro *blob* e o devolve em texto expresso no conjunto de caracteres de 4D."
		},
		"COPY ARRAY": {
			"Syntax": "**COPY ARRAY** ( *fonte* ; *destino* )",
			"Params": [
				[
					"fonte",
					"Array",
					"->",
					"Array do qual se copia"
				],
				[
					"destino",
					"Array",
					"<-",
					"Array para o qual se copia"
				]
			],
			"Summary": "O comando COPY ARRAY cria ou reescreve o array de destino com os mesmos conteúdo, tamanho e fonte do array fonte."
		},
		"COPY BLOB": {
			"Syntax": "**COPY BLOB** ( *oriBLOB*  ; *dstBLOB* ; *oriOffset*  ; *dstOffset* ; *tamanho* )",
			"Params": [
				[
					"oriBlob",
					"Blob",
					"->",
					"BLOB origem"
				],
				[
					"dstBlob",
					"Blob",
					"->",
					"BLOB destino"
				],
				[
					"oriOffset",
					"Integer",
					"->",
					"Posição da fonte para a cópia"
				],
				[
					"dstOffset",
					"Integer",
					"->",
					"Posição de destino para a cópia"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de bytes a copiar"
				]
			],
			"Summary": "O comando COPY BLOB copia o número de bytes especificado por *tamanho* do BLOB *oriBLOB* para o BLOB *dstBLOB*."
		},
		"COPY DOCUMENT": {
			"Syntax": "**COPY DOCUMENT** ( *nomFonte* ; *nomDest* {; *newName*} {; *} )",
			"Params": [
				[
					"nomFonte",
					"Text",
					"->",
					"Nome do documento a copiar"
				],
				[
					"nomDest",
					"Text",
					"->",
					"Nome do documento copiado"
				],
				[
					"newName",
					"Text",
					"->",
					"New name of copied file or folder"
				],
				[
					"*",
					"Operador",
					"->",
					"Substituir documento existente, se houver"
				]
			],
			"Summary": "O comando **COPY DOCUMENT** copia o documento especificado por *nomFonte* na localização especificada por *nomDest*."
		},
		"Copy list": {
			"Syntax": "**Copy list** ( *lista* ) : Integer",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista a copiar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência da nova lista"
				]
			],
			"Summary": "O comando Copy list duplica a lista cujo número de referência é passado no parâmetro *lista* e retorna o número de referência da nova lista."
		},
		"COPY NAMED SELECTION": {
			"Syntax": "**COPY NAMED SELECTION** ( {*tabela* ;} *nome* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual copiar seleção, ou Tabela por padrão, se omitida"
				],
				[
					"nome",
					"Text",
					"->",
					"Nome da seleção temporal a criar"
				]
			],
			"Summary": "COPY NAMED SELECTION copia a seleção atual de *tabela* em uma seleção temporária *nome*."
		},
		"Copy parameters": {
			"Syntax": "**Copy parameters** {( *inicioDesde* )} : Collection",
			"Params": [
				[
					"inicioDesde",
					"Integer",
					"->",
					"Indice inicio (incluido)"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nova coleção contendo parâmetros realmente passados"
				]
			],
			"Summary": "O comando Copy parameters devolve uma nova coleção que contém todos os parâmetros realmente passados a um método ou uma função."
		},
		"COPY SET": {
			"Syntax": "**COPY SET** ( *comOrigem* ; *comDestino* )",
			"Params": [
				[
					"comOrigem",
					"Text",
					"->",
					"Nome do conjunto de origem"
				],
				[
					"comDestino",
					"Text",
					"->",
					"Nome do Conjunto de Destino"
				]
			],
			"Summary": "O comando COPY SET copia o conteúdo do conjunto *comOrigem* no conjunto *comDestino*."
		},
		"Cos": {
			"Syntax": "**Cos** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número, em radianos, cujo cosseno é retornado"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"O Cosseno do número"
				]
			],
			"Summary": "Cos retorna o cosseno do *numero*, onde *numero* é expresso em radianos."
		},
		"Count in array": {
			"Syntax": "**Count in array** ( *array* ; *valor* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array no qual a contagem deve ocorrer"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor a contar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de ocorrências encontradas"
				]
			],
			"Summary": "O comando Count in array retorna o número de ocorrências do *valor* no *array*."
		},
		"Count list items": {
			"Syntax": "**Count list items** ( {* ;} *lista* {; *} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"*",
					"Operador",
					"->",
					"Se omitida (por padrão): Devolve os elementos visíveis (expandidos) da lista Se especificada: Devolve todos os elementos da lista"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de elementos visíveis da lista (expandidos) (se omitido o segundo *) ou número total de elementos da lista (se apresentado o segundo *)"
				]
			],
			"Summary": "O comando Count list items retorna o número atual de elementos visíveis ou o número total de elementos na lista cujo número de referência ou nome de objeto se passa em *lista*."
		},
		"Count menu items": {
			"Syntax": "**Count menu items** ( *menu* {; *processo*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de itens de menu no menu"
				]
			],
			"Summary": "O comando Count menu items devolve o número dos elementos do menu presentes no menu cujo número ou referência é passada em *menu."
		},
		"Count menus": {
			"Syntax": "**Count menus** {( *processo* )} : Integer",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de menus da barra de menus atual"
				]
			],
			"Summary": "O comando Count menus devolve o número de menus presentes na barra de menus."
		},
		"Count parameters": {
			"Syntax": "**Count parameters**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de parâmetros realmente passado"
				]
			],
			"Summary": "O comando Count parameters devolve o número de parâmetros passados a um método de projeto."
		},
		"Count screens": {
			"Syntax": "**Count screens**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de monitores"
				]
			],
			"Summary": "O comando Count screens devolve o número de telas conectadas a seu equipo."
		},
		"Count tasks": {
			"Syntax": "**Count tasks**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número total de processos abertos (incluindo processos kernel)"
				]
			],
			"Summary": "Count tasks devolve o número de processos abertos mais alto em uma máquina 4D remota, 4D Server (procedimentos armazenados) ou monousuário de 4D."
		},
		"Count user processes": {
			"Syntax": "**Count user processes**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de processos abertos (com exceção dos processos kernel)"
				]
			],
			"Summary": "Count user processes devolve o número dos processos abertos direto ou indiretamente pelo usuário (processos para os quais o parâmetro *origem* devolvido pelo comando Count user processes é maior ou igual a 0)."
		},
		"Count users": {
			"Syntax": "**Count users**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de usuários conectados ao servidor"
				]
			],
			"Summary": "O comando **Count users** devolve o número de usuários conectados à máquina servidor."
		},
		"CREATE ALIAS": {
			"Syntax": "**CREATE ALIAS** ( *rotaObjetivo* ; *rotaAlias* )",
			"Params": [
				[
					"rotaObjetivo",
					"Text",
					"->",
					"Nome da rota de acesso do alias/atalho alvo"
				],
				[
					"rotaAlias",
					"Text",
					"->",
					"Nome ou rota de acesso completa para o alias ou atalho"
				]
			],
			"Summary": "O comando CREATE ALIAS cria um alias (chamado “atalho” em Windows) do arquivo ou pasta objetivo passado em *rotaObjetivo*."
		},
		"CREATE DATA FILE": {
			"Syntax": "**CREATE DATA FILE** ( *endAcesso* )",
			"Params": [
				[
					"endAcesso",
					"Text",
					"->",
					"Nome ou endereço completo de acesso ao arquivo de dados a ser criado"
				]
			],
			"Summary": "O comando **CREATE DATA FILE** permite criar um novo arquivo de dados em disco e substituir o arquivo de dados aberto pela aplicação 4D."
		},
		"Create document": {
			"Syntax": "**Create document** ( *documento* {; *tipoArquivo*} ) : Time",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome de documento ou rota de acesso completa ou string vazia para caixa de diálogo de arquivo"
				],
				[
					"tipoArquivo",
					"Text",
					"->",
					"Lista de tipos de documentos a serem pesquisados, ou \"*\" para não pesquisar os documentos"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referência de documento"
				]
			],
			"Summary": "O comando Create document cria um novo documento e retorna seu número de referência."
		},
		"CREATE EMPTY SET": {
			"Syntax": "**CREATE EMPTY SET** ( {*tabela* ;} *conjunto* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai criar um conjunto vazio, ou tabela padrão, se omitido"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto vazio"
				]
			],
			"Summary": "CREATE EMPTY SET cria um conjunto vazio, *conjunto*, para *tabela*."
		},
		"CREATE FOLDER": {
			"Syntax": "**CREATE FOLDER** ( *rotaPasta* {; *} )",
			"Params": [
				[
					"rotaPasta",
					"Text",
					"->",
					"Rota de acesso a nova pasta a criar"
				],
				[
					"*",
					"Operador",
					"->",
					"Cria hierarquia de pastas"
				]
			],
			"Summary": "O comando CREATE FOLDER cria uma pasta de acordo com a rota de acesso que é passada em *rotaPasta*."
		},
		"CREATE INDEX": {
			"Syntax": "**CREATE INDEX** ( *tabela* ; *arrayCampos* ; *tipoIndice* ; *nomeIndice* {; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para qual criar um índice"
				],
				[
					"arrayCampos",
					"Pointer array",
					"->",
					"Ponteiros aos campos a serem indexados"
				],
				[
					"tipoIndice",
					"Integer",
					"->",
					"Tipo de índice a criar: -1 = Palavra chave, 0 = padrão, 1 = B-Tree padrão, 3 = Cluster B-Tree"
				],
				[
					"nomeIndice",
					"Text",
					"->",
					"Nome de Índice a criar"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = índice assincrônico"
				]
			],
			"Summary": "índice padrão em um ou mais campos (índice composto)"
		},
		"Create menu": {
			"Syntax": "**Create menu** {( *menu* )} : Text",
			"Params": [
				[
					"menu",
					"Text, Integer, Text",
					"->",
					"Referência de menu ou Número ou Nome da barra de menu"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência de menu"
				]
			],
			"Summary": "O comando **Create menu** permite criar um novo menu em memória."
		},
		"CREATE RECORD": {
			"Syntax": "**CREATE RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual criar um novo registro, ou tabela Padrão, se omitido"
				]
			],
			"Summary": "CREATE RECORD cria um novo registro vazio para *tabela*, mas não mostra o novo registro."
		},
		"CREATE RELATED ONE": {
			"Syntax": "**CREATE RELATED ONE** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Muitos campos"
				]
			],
			"Summary": "CREATE RELATED ONE tem duas ações."
		},
		"CREATE SELECTION FROM ARRAY": {
			"Syntax": "**CREATE SELECTION FROM ARRAY** ( *tabela* ; *regArray* {; *temp*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual criar a seleção"
				],
				[
					"regArray",
					"Integer, Boolean array",
					"->",
					"Array de números de registros, ou Array de booleanos (True = o registro está na seleção, False = o registro não está na seleção)"
				],
				[
					"temp",
					"Text",
					"->",
					"Nome da seleção temporal a criar, ou Aplicar o comando a seleção atual se o parâmetro se omite"
				]
			],
			"Summary": "O comando **CREATE SELECTION FROM ARRAY** cria a seleção selectionName"
		},
		"CREATE SET FROM ARRAY": {
			"Syntax": "**CREATE SET FROM ARRAY** ( *tabela* ; *arrayReg* {; *nomConjunto*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do conjunto"
				],
				[
					"arrayReg",
					"Integer, Boolean array",
					"->",
					"Array de números de registrs, ou Array de booleanos (True = o registro está no conjunto, False = o registro não está no conjunto)"
				],
				[
					"nomConjunto",
					"Text",
					"->",
					"Nome do conjunto a criar, ou Aplicar o comando ao UserSet se omitido"
				]
			],
			"Summary": "O comando CREATE SET FROM ARRAY cria *nomConj*"
		},
		"CREATE SET": {
			"Syntax": "**CREATE SET** ( {*tabela* ;} *conjunto* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"tabela para qual criar um conjunto a partir da seleção, ou tabela padrão se omitido"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nome do novo conjunto"
				]
			],
			"Summary": "CREATE SET cria um novo conjunto, *conjunto*, para *tabela*, e coloca a seleção atual em *conjunto*."
		},
		"CREATE THUMBNAIL": {
			"Syntax": "**CREATE THUMBNAIL** ( *fonte* ; *dest* {; *largura* {; *altura* {; *modo* {; *profundidade*}}}} )",
			"Params": [
				[
					"fonte",
					"Picture",
					"->",
					"Fonte da imagem 4D ou variável a converter para uma miniatura"
				],
				[
					"dest",
					"Picture",
					"<-",
					"Miniatura resultante"
				],
				[
					"largura",
					"Integer",
					"->",
					"Largura da miniatura em pixels. Valor padrão = 48"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura da miniatura em pixels. Valor padrão = 48"
				],
				[
					"modo",
					"Integer",
					"->",
					"Módulo de criação de miniaturas; Valor padrão= Proporcional centralizado (6)"
				],
				[
					"profundidade",
					"Integer",
					"->",
					"Obsoleto, não usar"
				]
			],
			"Summary": "O comando CREATE THUMBNAIL devolve uma miniatura a partir de uma imagem fonte."
		},
		"Current client authentication": {
			"Syntax": "**Current client authentication** {( *dominio* ; *protocolo* )} : Text",
			"Params": [
				[
					"dominio",
					"Text",
					"<-",
					"NOme do dominio"
				],
				[
					"protocolo",
					"Text",
					"<-",
					"\"Kerberos\", \"NTLM\" ou string vazia"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"login do usuário da sessão retornado por windows"
				]
			],
			"Summary": "O comando **Current client authentication** pede ao servidor Active Directory de Windows autenticar o cliente atual e se tiver êxito, devolve o nome de início de sessão de Windows para este cliente (identificador de sessão)."
		},
		"Current date": {
			"Syntax": "**Current date** {( * )} : Date",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devolve a data atual do servidor"
				],
				[
					"Resultado",
					"Date",
					"<-",
					"Data atual"
				]
			],
			"Summary": "O comando Current date retorna a data atual tal como está definida no relógio do sistema."
		},
		"Current default table": {
			"Syntax": "**Current default table**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro a tabela padrão"
				]
			],
			"Summary": "Current default table retorna um ponteiro a tabela que foi passado na última chamada a DEFAULT TABLE para o processo atual."
		},
		"Current form name": {
			"Syntax": "**Current form name**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do projeto de formulário atual ou tabela formulário atual no processo"
				]
			],
			"Summary": "O comando **Current form name** retorna o nome do formulário atual definido para o processo."
		},
		"Current form table": {
			"Syntax": "**Current form table**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro a tabela do formulário atualmente exibido"
				]
			],
			"Summary": "O comando Current form table retorna o ponteiro para a tabela do formulário em tela ou impresso no processo atual."
		},
		"Current form window": {
			"Syntax": "**Current form window**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência da janela do formulário atual"
				]
			],
			"Summary": "O comando Current form window devolve a referência da janela do formulário atual."
		},
		"Current machine": {
			"Syntax": "**Current machine**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do equipo na rede"
				]
			],
			"Summary": "O comando Current machine devolve o nome de seu equipo, como está definido no painel de controle da rede."
		},
		"Current method name": {
			"Syntax": "**Current method name**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Chamada nome do método"
				]
			],
			"Summary": "O comando Current method name devolve o nome do método no qual se chama."
		},
		"Current method path": {
			"Syntax": "**Current method path**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Caminho interno completa do método em execução"
				]
			],
			"Summary": "O comando **Current method path** devolve o caminho de acesso interna do método base, trigger, método de projeto, método formulário ou método objeto em execução."
		},
		"Current process name": {
			"Syntax": "**Current process name**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do processo atual"
				]
			],
			"Summary": "O comando **Current process name** devolve o nome do processo no qual este comando se chama."
		},
		"Current process": {
			"Syntax": "**Current process**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de processo"
				]
			],
			"Summary": "Current process devolve o número de processo a partir o qual se chama este comando."
		},
		"Current system user": {
			"Syntax": "**Current system user**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do dono do equipo na rede"
				]
			],
			"Summary": "O comando **Current system user** devolve o nome do dono de seu equipo, tal como está definido nos parâmetros de rede do sistema operativo."
		},
		"Current time": {
			"Syntax": "**Current time** {( * )} : Time",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devolve a hora atual do servidor"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Hora atual"
				]
			],
			"Summary": "O comando Current time retorna a hora atual do relógio de sistema."
		},
		"Current user": {
			"Syntax": "**Current user** {( *usuario* )} : Text",
			"Params": [
				[
					"usuario",
					"Integer",
					"->",
					"Alias do usuário ou usuário 4D da conta."
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome de usuário do usuário atual"
				]
			],
			"Summary": "Current user retorna o apelido ou nome de usuário do usuário atual."
		},
		"CUT NAMED SELECTION": {
			"Syntax": "**CUT NAMED SELECTION** ( {*tabela* ;} *nome* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual cortar seleção, ou Tabela por padrão, se omitida"
				],
				[
					"nome",
					"Text",
					"->",
					"Nome da seleção temporal a criar"
				]
			],
			"Summary": "CUT NAMED SELECTION cria uma seleção temporal *nome* e coloca ali a seleção atual de *tabela*."
		},
		"Data file encryption status": {
			"Syntax": "**Data file encryption status** ( rotaEstrutura , rotaDados ) : Object",
			"Params": [
				[
					"rotaEstrutura",
					"Text",
					"->",
					"Rota do arquivo de estrutura 4D a ser verificado"
				],
				[
					"rotaDados",
					"Text",
					"->",
					"Rota do arquivo de dados 4D a ser verificado"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Informação sobre o estado de criptografia do arquivo de dados e de cada tabela"
				]
			],
			"Summary": "O comando **Data file encryption status** devolve um objeto que fornece o estado de cifrado para o arquivo de dados designado pelos parâmetros *rotaEstruta* e *rotaDados*."
		},
		"Data file": {
			"Syntax": "**Data file** {( *segmento* )} : Text",
			"Params": [
				[
					"segmento",
					"Integer",
					"->",
					"Obsoleto, não use"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome longo do arquivo de dados do banco de dados"
				]
			],
			"Summary": "O comando Data file retorna o nome longo do arquivo de dados ou do primeiro segmento do banco no qual você está trabalhando atualmente."
		},
		"Database measures": {
			"Syntax": "**Database measures** {( *opcoes* )} : Object",
			"Params": [
				[
					"opcoes",
					"Object",
					"->",
					"Opções de retorno"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contém as medidas da base"
				]
			],
			"Summary": "O comando **Database measures** lhe permite obter informação detalhada sobre os eventos do motor de base de dados 4D."
		},
		"Date": {
			"Syntax": "**Date** ( *dataCadeia* ) : Date",
			"Params": [
				[
					"dataCadeia",
					"Text, Date",
					"->",
					"Cadeia que contém a data a resolver"
				],
				[
					"Resultado",
					"Date",
					"<-",
					"Data"
				]
			],
			"Summary": "O comando Date avalia *dataCadeia* e retorna uma data."
		},
		"Day number": {
			"Syntax": "**Day number** ( *data* ) : Integer",
			"Params": [
				[
					"data",
					"Date",
					"->",
					"Data para a qual devolver o número do dia"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número que representa o dia da semana que corresponde a data"
				]
			],
			"Summary": "O comando Day number retorna um número que representa o dia da semana que corresponde a *data*."
		},
		"Day of": {
			"Syntax": "**Day of** ( *data* ) : Integer",
			"Params": [
				[
					"data",
					"Date",
					"->",
					"Data a qual para devolver o dia"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Dia do mês da data"
				]
			],
			"Summary": "O comando Day of retorna o dia do mês de *data*."
		},
		"Deactivated": {
			"Syntax": "**Deactivated**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Retorna TRUE se o ciclo de execução é uma desativação"
				]
			],
			"Summary": "O comando Deactivated retorna TRUE em um método formulário de objeto quando a janela do primeiro plano do processo do primeiro plano, que contém ol formulário, passa ao segundo plano."
		},
		"Dec": {
			"Syntax": "**Dec** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número cuja parte decimal é retornada"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Parte decimal do número"
				]
			],
			"Summary": "Dec retorna a parte decimal de *numero*."
		},
		"DECRYPT BLOB": {
			"Syntax": "**DECRYPT BLOB** ( *aDecifrar*  ; *enviarChavePub*  {; *recepChavePriv* } )",
			"Params": [
				[
					"aDecifrar",
					"Blob",
					"<->",
					"Dados a decifrar"
				],
				[
					"",
					"",
					"",
					"Dados decifrados"
				],
				[
					"enviarChavePub",
					"Blob",
					"->",
					"Chave pública do emissor"
				],
				[
					"recepChavePriv",
					"Blob",
					"->",
					"Chave privada do receptor"
				]
			],
			"Summary": "O comando DECRYPT BLOB descriptografa o conteúdo do BLOB usando *aDecifrar* usando a *enviarChavePub* pública do remetente e, opcionalmente, a chave *recepChavePriv* privada do destinatário."
		},
		"Decrypt data BLOB": {
			"Syntax": "**Decrypt data BLOB** ( *blobDecriptografar* ; objetoChave / passefrase ; *salt* ; *BLOBdecriptografado* ) : Boolean",
			"Params": [
				[
					"blobDecriptografar",
					"Blob",
					"->",
					"Blob que vai ser decriptografado"
				],
				[
					"objetoChave / passefrase",
					"Objeto, Texto",
					"->",
					"Objeto JSON que contém a chave de criptografia ou passefrase para geração de chave direta de criptografia (texto)"
				],
				[
					"salt",
					"Integer",
					"->",
					"Salt (ou sal/dados aleatórios) para o algoritmo de criptografia"
				],
				[
					"Blobdecriptografado",
					"Blob",
					"<-",
					"BLOB que foi decriptografado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se a descrição tiver sido realizada corretamente. Senão False"
				]
			],
			"Summary": "O comando **Decrypt data BLOB** realiza a descriptografia do parâmetro *blobDecriptografia* com o mesmo algoritmo que 4D usa para a criptografia de dados (AES-256) e retorna o resultado em *blobDecriptografado*."
		},
		"DEFAULT TABLE": {
			"Syntax": "**DEFAULT TABLE** ( *tabela* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a ser definida como padrão"
				]
			],
			"Summary": "**Dica**: ainda que utilizar DEFAULT TABLE e omitir o nome da tabela podem fazer o código mais fácil de ler, muitos programadores consideram que a utilização deste comando em realidade traz mais inconvenientes que vantagens."
		},
		"DELAY PROCESS": {
			"Syntax": "**DELAY PROCESS** ( *processo* ; *duraçao* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				],
				[
					"duraçao",
					"Real",
					"->",
					"Duração expressada em ticks"
				]
			],
			"Summary": "DELAY PROCESS permite atrasar um *processo* por um número de ticks (1 tick = 1/60 de segundo)."
		},
		"DELETE DOCUMENT": {
			"Syntax": "**DELETE DOCUMENT** ( *documento* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome do documento ou rota de acesso completa"
				]
			],
			"Summary": "O comando DELETE DOCUMENT apaga o documento cujo nome se passa em *documento*."
		},
		"DELETE FOLDER": {
			"Syntax": "**DELETE FOLDER** ( *pasta* {; delete Opcao} )",
			"Params": [
				[
					"pasta",
					"Text",
					"->",
					"Nome da pasta, ou rota de acesso completa da pasta a apagar"
				],
				[
					"delete Opcao",
					"Inteiro longo",
					"->",
					"Opção de apagar a pasta"
				]
			],
			"Summary": "O comando **DELETE FOLDER** apaga a pasta cujo nome ou rota completa for passada em *pasta*."
		},
		"DELETE FROM ARRAY": {
			"Syntax": "**DELETE FROM ARRAY** ( *array* ; *posição* {; *quantos*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array do qual apagar os elementos"
				],
				[
					"posição",
					"Integer",
					"->",
					"Elemento onde se inicia o processo"
				],
				[
					"quantos",
					"Integer",
					"->",
					"Número de elementos a apagar"
				]
			],
			"Summary": "O comando DELETE FROM ARRAY apaga um ou mais elementos de um *array*."
		},
		"DELETE FROM BLOB": {
			"Syntax": "**DELETE FROM BLOB** ( *BLOB* ; *offset* ; *tamanho* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB do qual deletar bytes"
				],
				[
					"offset",
					"Integer",
					"->",
					"Offset inicial onde os bytes serão deletados"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Número de bytes a serem excluídos"
				]
			],
			"Summary": "O comando DELETE FROM BLOB apaga o número de bytes especificado por *tamanho* do BLOB *blob* a partir da posição especificada por *offset* (expressada de modo relativo ao começo do BLOB)."
		},
		"DELETE FROM LIST": {
			"Syntax": "**DELETE FROM LIST** ( {* ;} *lista* ; refElem | *  {; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"*",
					"Operator",
					"->",
					"Se especificada, apaga as sub-listas (se existem) da memória Se omitida, as sub-listas (se existem) não são apagadas"
				]
			],
			"Summary": "O comando DELETE FROM LIST apaga o elemento designado pelo parâmetro *refElem* da lista cujo número de referência se passa em *lista*."
		},
		"DELETE INDEX": {
			"Syntax": "**DELETE INDEX** ( *pontCampo* {; *} )<br/>**DELETE INDEX** ( *nomeIndice* {; *} )",
			"Params": [
				[
					"pontCampo&#124;nomeIndice",
					"Ponteiro, String",
					"->",
					"Ponteiro ao campo cujos índices serão apagados ou Nome do Índice que será apagado."
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = operação assincrônica"
				]
			],
			"Summary": "O comando DELETE INDEX é utilizado para apagar um ou mais índices existentes no banco."
		},
		"DELETE MENU ITEM": {
			"Syntax": "**DELETE MENU ITEM** ( *menu* ; *menuItem* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo"
				]
			],
			"Summary": "O comando DELETE MENU ITEM elimina a linha de menu cujo número ou referência de menu e número de elemento você passou em *menu* e *menuItem*."
		},
		"DELETE RECORD": {
			"Syntax": "**DELETE RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual o registro atual será apagado, ou tabela Padrão, se omitido"
				]
			],
			"Summary": "DELETE RECORD apaga o registro atual de *tabela* no processo."
		},
		"DELETE SELECTION": {
			"Syntax": "**DELETE SELECTION** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a qual apagar a seleção atual, ou tabela padrão, se omitido"
				]
			],
			"Summary": "DELETE SELECTION apaga a seleção atual de registros de *tabela*."
		},
		"Delete string": {
			"Syntax": "**Delete string** ( *fonte* ; *posiçao* ; *numCaracteres* ) : Text",
			"Params": [
				[
					"fonte",
					"Text",
					"->",
					"Cadeia da qual vai apagar caracteres"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Primeiro caractere a apagar"
				],
				[
					"numCaracteres",
					"Integer",
					"->",
					"Número de caracteres a apagar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia resultante"
				]
			],
			"Summary": "Delete string apaga *numCaracteres* de *fonte*, a partir de *posiçao*, e devolve a cadeia resultante."
		},
		"DELETE USER": {
			"Syntax": "**DELETE USER** ( *refUsuario* )",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Número de ID de usuário a apagar"
				]
			],
			"Summary": "O comando ON ERR CALL apaga o usuário cujo número se passa em *refUsuario*."
		},
		"DESCRIBE QUERY EXECUTION": {
			"Syntax": "**DESCRIBE QUERY EXECUTION** ( *estado* )",
			"Params": [
				[
					"estado",
					"Boolean",
					"->",
					"True=Ativar análises de pesquisas internas, False=Desativar o análises de pesquisas internas"
				]
			],
			"Summary": "O comando DESCRIBE QUERY EXECUTION permite ativar ou desativar o modo de análise da execução de pesquisas para o processo atual."
		},
		"DIFFERENCE": {
			"Syntax": "**DIFFERENCE** ( *conjunto1* ; *conjunto2* ; *conjuntoResultado* )",
			"Params": [
				[
					"conjunto1",
					"Text",
					"->",
					"Conjunto"
				],
				[
					"conjunto2",
					"Text",
					"->",
					"Conjunto que será subtraído"
				],
				[
					"conjuntoResultado",
					"Text",
					"->",
					"Conjunto Resultado"
				]
			],
			"Summary": "DIFFERENCE compara *conjunto1* e *conjunto2* e exclui de *conjuntoResultado* todos os registros de *conjunto2*."
		},
		"DISABLE MENU ITEM": {
			"Syntax": "**DISABLE MENU ITEM** ( *menu* ; *menuItem* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo"
				]
			],
			"Summary": "O comando DISABLE MENU ITEM desativa o comando de menu cujo número ou referência de menu e número de elemento você passou em *menu* e *menuItem*."
		},
		"Discover data key": {
			"Syntax": "**Discover data key**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se a chave de criptografia válida para o arquivo de dados aberto atualmente foi encontrado, senão False"
				]
			],
			"Summary": "O comando **Discover data key** busca uma chave de cifrado válida correspondente ao arquivo de dados aberto atualmente a nivel da raíz de todos os dispositivos conectados e devolve **True** se for exitoso."
		},
		"DISPLAY NOTIFICATION": {
			"Syntax": "**DISPLAY NOTIFICATION** ( *titulo* ; *texto* {; *duraçao*} )",
			"Params": [
				[
					"titulo",
					"Text",
					"->",
					"Título da notificação"
				],
				[
					"texto",
					"Text",
					"->",
					"Texto da notificação"
				],
				[
					"duraçao",
					"Integer",
					"->",
					"Duração da exibição em segundos"
				]
			],
			"Summary": "O comando DISPLAY NOTIFICATION mostra uma mensagem na área de notificação ao usuário:\n\nEste tipo de mensagem geralmente é utilizado pelo sistema operativo ou pelas aplicações para informar ao usuário sobre um evento externo (desconexão de rede, disponibilidade de uma atualização, etc.)."
		},
		"DISPLAY RECORD": {
			"Syntax": "**DISPLAY RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para qual exibir o registro atual, ou tabela Padrão, se omitido"
				]
			],
			"Summary": "O comando DISPLAY RECORD mostra o registro atual de *tabela*, utilizando o formulário de entrada atual."
		},
		"DISPLAY SELECTION": {
			"Syntax": "**DISPLAY SELECTION** ( {*tabela*}{; *modoSelecao*}{; *entraLista*}{; *}{; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a exibir, ou tabela padrão, se omitido"
				],
				[
					"modoSelecao",
					"Integer",
					"->",
					"Modo de Seleção"
				],
				[
					"entraLista",
					"Boolean",
					"->",
					"Autorizar Entrada na lista de opção"
				],
				[
					"*",
					"Operator",
					"->",
					"Utilizar o formulário de saída em caso de seleção de somente um registro e ocultar as barras de deslocamento no formulário de entrada"
				],
				[
					"*",
					"Operator",
					"->",
					"Mostrar as barras de deslocamento no formulário de entrada (anular o segundo efeito do primeiro parâmetro *)"
				]
			],
			"Summary": "DISPLAY SELECTION mostra a seleção de *tabela*, utilizando o formulário de saída."
		},
		"Displayed line number": {
			"Syntax": "**Displayed line number**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nº da linha sendo exibida"
				]
			],
			"Summary": "O comando Displayed line number funciona unicamente no contexto do evento de formulário On Display Detail."
		},
		"DISTINCT ATTRIBUTE PATHS": {
			"Syntax": "**DISTINCT ATTRIBUTE PATHS** ( *campoObjeto* ; *rotaArray* )",
			"Params": [
				[
					"campoObjeto",
					"Field",
					"->",
					"campo objeto indexado"
				],
				[
					"rotaArray",
					"Text array",
					"<-",
					"Array que vai receber a lsita de diferentes rotas"
				]
			],
			"Summary": "O comando **DISTINCT ATTRIBUTE PATHS** \\[#descv\\] devolve a lista de rotas diferentes que se encontram no campo objeto indexado passado em *campoObjeto* para a seleção atual da tabela a qual pertence o campo."
		},
		"DISTINCT ATTRIBUTE VALUES": {
			"Syntax": "**DISTINCT ATTRIBUTE VALUES** ( *campoObjeto* ; *rota* ; *arrayValores* )",
			"Params": [
				[
					"campoObjeto",
					"Field",
					"->",
					"Campo Objeto do qual obtém a lista de valores atributo distintos"
				],
				[
					"rota",
					"Text",
					"->",
					"Rota do atributo cujos valores distintos deseja obter."
				],
				[
					"arrayValores",
					"Text array, Integer array, Boolean array, Date array, Time array",
					"<-",
					"Valores distintos na rota atributo"
				]
			],
			"Summary": "**Tema:** Arrays\n\nO comando **DISTINCT ATTRIBUTE VALUES** cria e preenche o *arrayValores* com valores náo repetidos (únicos) procedentes do atributo *rota* no campo *campoObjeto* para a seleção atual da tabela a que pertence o campo."
		},
		"DISTINCT VALUES": {
			"Syntax": "**DISTINCT VALUES** ( *campo* ; *array* {; *contArray*} )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo ou subcampo indexável a utilizar para dados"
				],
				[
					"array",
					"Array",
					"<-",
					"Array a receber os dados do campo"
				],
				[
					"contArray",
					"Integer array, Real array",
					"<-",
					"Array a receber o contador de cada valor"
				]
			],
			"Summary": "O comando **DISTINCT VALUES** cria e preenche o array *array* com valores não-repetidos (únicos) do campo *campo* para a seleção atual da tabela que pertence ao campo ou subcampo."
		},
		"DOCUMENT LIST": {
			"Syntax": "**DOCUMENT LIST** ( *nomeRota* ; *documentos* {; *opções*} )",
			"Params": [
				[
					"nomeRota",
					"Text",
					"->",
					"Rota de acesso ao volume, diretório ou pasta"
				],
				[
					"documentos",
					"Text array",
					"<-",
					"Nomes dos documentos presentes na localização"
				],
				[
					"opções",
					"Integer",
					"->",
					"Opções para construir lista"
				]
			],
			"Summary": "O comando **DOCUMENT LIST** preenche o array *documentos* de tipo texto ou alfa com os nomes dos documentos localizados na rota de acesso que se passa em *rotaAcesso*."
		},
		"DOCUMENT TO BLOB": {
			"Syntax": "**DOCUMENT TO BLOB** ( *documento* ; *BLOB* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome do documento gerado"
				],
				[
					"Blob",
					"Blob",
					"<->",
					"Campo ou variável de tipo BLOB a receber o documento"
				],
				[
					"",
					"",
					"",
					"Conteúdo do documento"
				]
			],
			"Summary": "DOCUMENT TO BLOB carrega todo o conteúdo do *documento* em *blob*."
		},
		"Document to text": {
			"Syntax": "**Document to text** ( *nomeArquivo* {; *conjCaracteres* {; *modoRetorno*}} ) : Text",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Nome do documento ou caminho ao documento"
				],
				[
					"conjCaracteres",
					"Text, Integer",
					"->",
					"Nome ou número do conjunto de caracteres"
				],
				[
					"modoRetorno",
					"Integer",
					"->",
					"Modo de processamento para as linhas de ruptura"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto do documento"
				]
			],
			"Summary": "O comando **Document to text** le permite recuperar o conteúdo de um arquivo diretamente no disco em uma variável texto 4D ou campo texto."
		},
		"DOM Append XML child node": {
			"Syntax": "**DOM Append XML child node** ( *refElemento* ; *tipoFilho* ; *valorFilho* ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"elemento de referência XML"
				],
				[
					"tipoFilho",
					"Integer",
					"->",
					"Tipo de filho a anexar"
				],
				[
					"valorFilho",
					"Text, Blob",
					"->",
					"Texto ou variável (texto ou BLOB) cujo valor deve ser inserido como um nodo filho"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Refência do elemento filho XML"
				]
			],
			"Summary": "O comando DOM Append XML child node se utiliza para anexar o valor *valorFilho* ao nodo XML designado por *refElement*."
		},
		"DOM Append XML element": {
			"Syntax": "**DOM Append XML element** ( *refElementoTarget* ; *refElementoFonte* ) : Text",
			"Params": [
				[
					"refElementoTarget",
					"Text",
					"->",
					"Referência do elemento XML pai"
				],
				[
					"refElementoFonte",
					"Text",
					"->",
					"Referência do elemento XML a anexar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do novo elemento XML"
				]
			],
			"Summary": "O comando DOM Append XML element se utiliza para adicionar um novo elemento XML ao filho do elemento XML cuja referência se passa no parâmetro *refElementFonte* ."
		},
		"DOM CLOSE XML": {
			"Syntax": "**DOM CLOSE XML** ( *refElemento* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Elemento de referência raiz XML"
				]
			],
			"Summary": "O comando DOM CLOSE XML libera o espaço em memória ocupado pelo objeto XML determinado por *refElemento*."
		},
		"DOM Count XML attributes": {
			"Syntax": "**DOM Count XML attributes** ( *refElemento* ) : Integer",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de atributos"
				]
			],
			"Summary": "O comando DOM Count XML attributes devolve o número dos atributos XML presentes no elemento XML determinado por *refElemento*."
		},
		"DOM Count XML elements": {
			"Syntax": "**DOM Count XML elements** ( *refElemento* ; *nomeElemento* ) : Integer",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemento",
					"Text",
					"->",
					"Nome do elemento XML a ser contado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de elementos"
				]
			],
			"Summary": "O comando DOM Count XML elements devolve o número de elementos “filho” dependentes do elemento pai *refElemento* e chamado *nomeElemento*."
		},
		"DOM Create XML element arrays": {
			"Syntax": "**DOM Create XML element arrays** ( *arrayNomesAtrib* ; *xRota* {; *atribNomesArray* ; *atribValoresArray*} {; *atribNomesArray2* ; *atribValoresArray2* ; ... ; *atribNomesArrayN* ; *atribValoresArrayN*} ) : Text",
			"Params": [
				[
					"arrayNomesAtrib",
					"Text",
					"->",
					"Array dos nomes de atributo"
				],
				[
					"xRota",
					"Text",
					"->",
					"Caminho xRota do elemento XML a ser criado"
				],
				[
					"atribNomesArray",
					"Text array",
					"->",
					"Array de nomes de atributo"
				],
				[
					"atribValoresArray",
					"Text array",
					"->",
					"Array dos valores de atributos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento XML criado"
				]
			],
			"Summary": "O comando DOM Create XML element arrays é utilizado para adicionar um novo elemento no elemento XML de *refElement*, além de, opcionalmente, atributos e seus valores em forma de arrays."
		},
		"DOM Create XML element": {
			"Syntax": "**DOM Create XML element** ( *refElemento* ; *xRota* {; *nomeAtrib* ; *valorAtrib*} {; *nomeAtrib2* ; *valorAtrib2* ; ... ; *nomeAtribN* ; *valorAtribN*} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência do elemento Root XMLK"
				],
				[
					"xRota",
					"Text",
					"->",
					"Caminho xRota do elemento XML a ser criado"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Atributo a estabelecer"
				],
				[
					"valorAtrib",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"Novo valor de atributo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento XML criado"
				]
			],
			"Summary": "O comando DOM Create XML element permite criar um novo elemento no elemento XML *refElemento* na localização definida pelo parâmetro xRota e lhe adicionar atributos se é necessário."
		},
		"DOM Create XML Ref": {
			"Syntax": "**DOM Create XML Ref** ( *raiz* {; *nomeEspaço*} {; *nSNome* ; *nSValor*} {; *nSNome2* ; *nSValor2* ; ... ; *nSNomeN* ; *nSValorN*} ) : Text",
			"Params": [
				[
					"raiz",
					"Text",
					"->",
					"Nome do elemento raiz"
				],
				[
					"nomeEspaço",
					"Text",
					"->",
					"Valor do espaço de nome (namespace)"
				],
				[
					"nSNome",
					"Text",
					"->",
					"Nome do Namespace"
				],
				[
					"nSValor",
					"Text",
					"->",
					"Valor do Namespace"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Raiz XML do elemento referência"
				]
			],
			"Summary": "O comando DOM Create XML Ref cria uma árvore XML vazia na memória e retorna sua referência."
		},
		"DOM EXPORT TO FILE": {
			"Syntax": "**DOM EXPORT TO FILE** ( *refElemento* ; *viaArquivo* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência do elemento Root XMLK"
				],
				[
					"viaArquivo",
					"Text",
					"->",
					"Acesso de rota completo do arquivo"
				]
			],
			"Summary": "O comando DOM EXPORT TO FILE permite guardar uma árvore XML em um arquivo no disco."
		},
		"DOM EXPORT TO VAR": {
			"Syntax": "**DOM EXPORT TO VAR** ( *refElemento* ; *vXMLVar* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência do elemento Root XMLK"
				],
				[
					"vXMLVar",
					"Text, Blob",
					"<-",
					"Variável que recebe a árvore XML"
				]
			],
			"Summary": "O comando DOM EXPORT TO VAR permite salvar um árvore XML em uma variável texto ou BLOB."
		},
		"DOM Find XML element by ID": {
			"Syntax": "**DOM Find XML element by ID** ( *refElemento* ; *id* ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"id",
					"Text",
					"->",
					"Valor do atributo ID do elemento a procurar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento encontrado (se aplicável)"
				]
			],
			"Summary": "O comando DOM Find XML element by ID busca, no interior de um documento XML, o elemento cujo atributo id seja igual ao valor passado no parâmetro *id*."
		},
		"DOM Find XML element": {
			"Syntax": "**DOM Find XML element** ( *refElemento* ; *xPath* {; *arrRefElementos*} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"xPath",
					"Text",
					"->",
					"Rota XPath do elemento a procurar"
				],
				[
					"arrRefElementos",
					"Text array",
					"<-",
					"Lista de referências de elementos encontradas (se aplicável)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento encontrado (se aplicável)"
				]
			],
			"Summary": "O comando DOM Find XML element permite buscar os elementos XML específicos em uma estrutura XML."
		},
		"DOM Get first child XML element": {
			"Syntax": "**DOM Get first child XML element** ( *refElemento* {; *nomElemFilho* {; *valorElemFilho*}} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomElemFilho",
					"Text",
					"<-",
					"Nome do elemento filho XML"
				],
				[
					"valorElemFilho",
					"Text",
					"<-",
					"Valor do elemento filho XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento filho XML"
				]
			],
			"Summary": "O comando DOM Get first child XML element retorna uma referência XML ao primeiro “filho” do elemento XML passado em *refElemento*."
		},
		"DOM Get last child XML element": {
			"Syntax": "**DOM Get last child XML element** ( *refElemento* {; *nomElemFilho* {; *valorElemFilho*}} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomElemFilho",
					"Text",
					"<-",
					"Nome do elemento filho"
				],
				[
					"valorElemFilho",
					"Text",
					"<-",
					"Valor do elemento filho"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento XML"
				]
			],
			"Summary": "O comando DOM Get last child XML element retorna uma referência XML ao último “filho” do elemento XML passado como referência em *refElemento*."
		},
		"DOM Get next sibling XML element": {
			"Syntax": "**DOM Get next sibling XML element** ( *refElemento* {; *nomeElemIrmao* {; *valorElemIrmao*}} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemIrmao",
					"Text",
					"<-",
					"Nome do elemento XML irmão"
				],
				[
					"valorElemIrmao",
					"Text",
					"<-",
					"Valor do elemento XML irmão"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Elemento de referência XML irmão"
				]
			],
			"Summary": "O comando DOM Get next sibling XML element retorna uma referência ao próximo “irmão” do elemento XML passado como referência."
		},
		"DOM Get parent XML element": {
			"Syntax": "**DOM Get parent XML element** ( *refElemento* {; *nomeElemPai* {; *valorElemPai*}} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemPai",
					"Text",
					"<-",
					"Nome do elemento XML pai"
				],
				[
					"valorElemPai",
					"Text",
					"<-",
					"Valor do elemento XML pai"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia do elemento XML pai"
				]
			],
			"Summary": "O comando DOM Get parent XML element retorna uma referência XML ao “pai” do elemento XML passado como referência em *refElemento*."
		},
		"DOM Get previous sibling XML element": {
			"Syntax": "**DOM Get previous sibling XML element** ( *refElemento* {; *nomeElemIrmao* {; *valorElemIrmao*}} ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemIrmao",
					"Text",
					"<-",
					"Nome do elemento XML irmão"
				],
				[
					"valorElemIrmao",
					"Text",
					"<-",
					"Valor do elemento XML irmão"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Elemento de referência XML irmão"
				]
			],
			"Summary": "O comando DOM Get previous sibling XML element retorna uma referência ao “irmão” anterior do elemento XML passado em referência."
		},
		"DOM Get root XML element": {
			"Syntax": "**DOM Get root XML element** ( *refElemento* ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento raiz ou \"\" em caso de erro"
				]
			],
			"Summary": "O comando DOM Get root XML element devolve uma referência ao elemento raiz do documento ao qual pertence o elemento XML que for passado no parâmetro *refElemento*."
		},
		"DOM GET XML ATTRIBUTE BY INDEX": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY INDEX** ( *refElemento* ; *indexAtrib* ; *nomeAtrib* ; *valorAtrib* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"indexAtrib",
					"Integer",
					"->",
					"Número de índice de atributo"
				],
				[
					"nomeAtrib",
					"Variable",
					"<-",
					"Nome atributo"
				],
				[
					"valorAtrib",
					"Variable",
					"<-",
					"Valor atributo"
				]
			],
			"Summary": "O comando DOM GET XML ATTRIBUTE BY INDEX permite conhecer o nome assim como o valor de um atributo especificado por seu número de índice."
		},
		"DOM GET XML ATTRIBUTE BY NAME": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY NAME** ( *refElemento* ; *nomeAtrib* ; *valorAtrib* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Nome de atributo"
				],
				[
					"valorAtrib",
					"Variable",
					"<-",
					"Valor atributo"
				]
			],
			"Summary": "O comando DOM GET XML ATTRIBUTE BY NAME permite conhecer o valor de um atributo especificado por seu nome."
		},
		"DOM GET XML CHILD NODES": {
			"Syntax": "**DOM GET XML CHILD NODES** ( *elemRef* ; *arrTiposFilhos* ; *arrRefsNodos* )",
			"Params": [
				[
					"elemRef",
					"Text",
					"->",
					"Elemento XML de referência"
				],
				[
					"arrTiposFilhos",
					"Integer array",
					"<-",
					"Tipos de nodos filhos"
				],
				[
					"arrRefsNodos",
					"Text array",
					"<-",
					"Referência ou valores dos nodos filhos"
				]
			],
			"Summary": "O comando DOM GET XML CHILD NODES retorna os tipos e referências ou valores de todos os nodos filhos do elemento XML designado por *refElement*."
		},
		"DOM Get XML document ref": {
			"Syntax": "**DOM Get XML document ref** ( *arrayNomesAtrib* ) : Text",
			"Params": [
				[
					"arrayNomesAtrib",
					"Text",
					"->",
					"Referência dos elementos existentes em árvore DOM"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do primeiro elemento de uma árvore DOM (modo documento)"
				]
			],
			"Summary": "O comando DOM Get XML document ref se utiliza para recuperar a referência do elemento \"documento\" da árvore DOM cuya referência se passa em *refElement*."
		},
		"DOM GET XML ELEMENT NAME": {
			"Syntax": "**DOM GET XML ELEMENT NAME** ( *refElemento* ; *nomeElemento* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemento",
					"Variable",
					"<-",
					"Nome do elemento"
				]
			],
			"Summary": "O comando DOM GET XML ELEMENT NAME retorna no parâmetro *nomeElemento*, o nome do elemento XML designado por *refElemento*."
		},
		"DOM GET XML ELEMENT VALUE": {
			"Syntax": "**DOM GET XML ELEMENT VALUE** ( *refElemento* ; *valorElemento* {; *cDATA*} )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"valorElemento",
					"Variable",
					"<-",
					"Valor do elemento"
				],
				[
					"cDATA",
					"Variable",
					"<-",
					"Conteúdo de seção CDATA"
				]
			],
			"Summary": "O comando **DOM GET XML ELEMENT VALUE** retorna no parâmetro *valorElement*, o valor do elemento XML designado por *refElement*."
		},
		"DOM Get XML element": {
			"Syntax": "**DOM Get XML element** ( *refElemento* ; *nomeElemento* ; *index* ; *valorElemento* ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemento",
					"Text",
					"->",
					"Nome do elemento a obter"
				],
				[
					"index",
					"Integer",
					"->",
					"Número de índice do elemento a obter"
				],
				[
					"valorElemento",
					"Variable",
					"<-",
					"Valor do elemento"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"referência XML (16 caracteres)"
				]
			],
			"Summary": "O comando DOM Get XML element retorna uma referência XML ao elemento “filho” dependente dos parâmetros *nomeElemento* e *index*."
		},
		"DOM Get XML information": {
			"Syntax": "**DOM Get XML information** ( *refElemento* ; *xmlInfo* ) : Text",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Elemento de referência raiz XML"
				],
				[
					"xmlInfo",
					"Integer",
					"->",
					"Tipo de informação a conseguir"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor da informação XML"
				]
			],
			"Summary": "O comando DOM Get XML information permite recuperar diversas informações sobre o elemento XML designado por *refElemento*."
		},
		"DOM Insert XML element": {
			"Syntax": "**DOM Insert XML element** ( *tarfetElementRef* ; *sourceElementRef* ; *childIndex* ) : Text",
			"Params": [
				[
					"tarfetElementRef",
					"Text",
					"->",
					"Elemento de referência do pai XML"
				],
				[
					"sourceElementRef",
					"Text",
					"->",
					"XML element reference to insert"
				],
				[
					"childIndex",
					"Integer",
					"->",
					"Index of child of target element above which the new element must be inserted"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Reference of new XML element"
				]
			],
			"Summary": "O comando DOM Insert XML element se utiliza para inserir um novo elemento XML entre os filhos do elemento XML cuja referência for passada no parâmetro refElementTarget."
		},
		"DOM Parse XML source": {
			"Syntax": "**DOM Parse XML source** ( *documento* {; *validaçao* {; dtd|schmea}} ) : Text",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Rota documentos"
				],
				[
					"validaçao",
					"Boolean",
					"->",
					"True = Validação; False = sem validação"
				],
				[
					"dtd&#124;schmea",
					"Text",
					"->",
					"Localização do schema DTD ou XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento XML"
				]
			],
			"Summary": "O comando DOM Parse XML source analisa um documento que contém uma estrutura XML e retorna uma referência para este documento."
		},
		"DOM Parse XML variable": {
			"Syntax": "**DOM Parse XML variable** ( *variável* {; *validaçao* {; dtd|schema}} ) : Text",
			"Params": [
				[
					"variável",
					"Blob, Text",
					"->",
					"Nome da variavel"
				],
				[
					"validaçao",
					"Boolean",
					"->",
					"True = validação do DTD; False = sem validação"
				],
				[
					"dtd&#124;schema",
					"Text",
					"->",
					"Localização do DTD ou do schema XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência do elemento XML"
				]
			],
			"Summary": "O comando DOM Parse XML variable analisa uma variável de tipo BLOB ou Texto que contenha uma estrutura XML e retorna uma referência para esta variável."
		},
		"DOM REMOVE XML ATTRIBUTE": {
			"Syntax": "**DOM REMOVE XML ATTRIBUTE** ( *elementoRef* ; *nomeAtrib* )",
			"Params": [
				[
					"elementoRef",
					"Text",
					"->",
					"Elemento de referência XML"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Atributo a ser removido"
				]
			],
			"Summary": "O comando DOM REMOVE XML ATTRIBUTE remove, se existir, o atributo designado por *nomAtrib* do elemento XML cuja referência é passada no parâmetro *refElement*."
		},
		"DOM REMOVE XML ELEMENT": {
			"Syntax": "**DOM REMOVE XML ELEMENT** ( *refElemento* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				]
			],
			"Summary": "O comando DOM REMOVE XML ELEMENT remove o elemento determinado por *refElemento*."
		},
		"DOM SET XML ATTRIBUTE": {
			"Syntax": "**DOM SET XML ATTRIBUTE** ( *refElemento* ; *nomeAtrib* ; *valorAtrib* {; *nomeAtrib2* ; *valorAtrib2* ; ... ; *nomeAtribN* ; *valorAtribN*} )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Atributo a estabelecer"
				],
				[
					"valorAtrib",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"Novo valor de atributo"
				]
			],
			"Summary": "O comando DOM SET XML ATTRIBUTE permite adicionar uno ou vários atributos ao elemento XML cuja referência se passa no parâmetro *refElemento*."
		},
		"DOM SET XML DECLARATION": {
			"Syntax": "**DOM SET XML DECLARATION** ( *refElemento* ; *codificaçao* {; *autonomo* {; *recuo*}} )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"codificaçao",
					"Text",
					"->",
					"Conjunto de caracteres usado no documento XML"
				],
				[
					"autonomo",
					"Boolean",
					"->",
					"True=documento é autônomo; False (padrão) = documento não é autônomo"
				],
				[
					"recuo",
					"Boolean",
					"->",
					"***Obsoleto, não usar***"
				]
			],
			"Summary": "O comando DOM SET XML DECLARATION permite definir diferentes opções que são úteis na criação da árvore XML designado por *elementRef*."
		},
		"DOM SET XML ELEMENT NAME": {
			"Syntax": "**DOM SET XML ELEMENT NAME** ( *refElemento* ; *nomeElemento* )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"nomeElemento",
					"Text",
					"->",
					"Novo nome do elemento"
				]
			],
			"Summary": "O comando DOM SET XML ELEMENT NAME permite modificar o nome do elemento designado por *refElemento*."
		},
		"DOM SET XML ELEMENT VALUE": {
			"Syntax": "**DOM SET XML ELEMENT VALUE** ( *refElemento* {; *xRota*}; *valorElemento* {; *} )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"xRota",
					"Text",
					"->",
					"Rota do xRota do elemento XML"
				],
				[
					"valorElemento",
					"Text, Variable",
					"->",
					"Novo valor do elemento"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: estabelece o valor em CDATA"
				]
			],
			"Summary": "O comando DOM SET XML ELEMENT VALUE lhe permite modificar o valor do elemento definido por *refElement*."
		},
		"DRAG WINDOW": {
			"Syntax": "**DRAG WINDOW**",
			"Params": [],
			"Summary": "O comando DRAG WINDOW permite arrastar a janela na qual o usuário clica para seguindo os movimentos do mouse."
		},
		"Drop position": {
			"Syntax": "**Drop position** {( colNum|posYimagem )} : Integer",
			"Params": [
				[
					"colNum&#124;posYimagem",
					"Integer",
					"<-",
					"Número de coluna de list box (-1 se soltar antes da última coluna) ou  posição da coordenada Y da imagem"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"• Número (array/list box) ou • Posição (lista hierárquica) ou • Posição em string (texto/combo box) de item destino ou • -1 se soltar antes do último elemento do array ou item da lista • Posição da coordenada X da imagem"
				]
			],
			"Summary": "O comando Drop position pode ser utilizado para descobrir a localização, em um objeto de destino “complexo”, onde um objeto foi (arrastado e) soltado."
		},
		"DROP REMOTE USER": {
			"Syntax": "**DROP REMOTE USER** ( *sessaoUsuario* )",
			"Params": [
				[
					"sessaoUsuario",
					"Text",
					"->",
					"ID de sessão do usuário"
				]
			],
			"Summary": "O comando **DROP REMOTE USER** desconecta a um usuário específico conectado remotamente ao servidor 4D."
		},
		"DUPLICATE RECORD": {
			"Syntax": "**DUPLICATE RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual vai duplicar o registro atual, ou tabela padrão, se omitido"
				]
			],
			"Summary": "DUPLICATE RECORD cria um novo registro para tabela que é uma duplicação do registro atual."
		},
		"Dynamic pop up menu": {
			"Syntax": "**Dynamic pop up menu** ( *menu* {; *porpadrao* {; *coordX* ; *coordY*}} )  : Text",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"Referência de menu"
				],
				[
					"porpadrao",
					"Text",
					"->",
					"Parâmetro de itens selecionado por padrão"
				],
				[
					"coordX",
					"Integer",
					"->",
					"Coordenada X do canto esquerdo superior"
				],
				[
					"coordY",
					"Integer",
					"->",
					"Coordenada Y do canto esquerdo superior"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Parâmetro do menu de item selecionado"
				]
			],
			"Summary": "O comando Dynamic pop up menu faz aparecer um menu suspenso hierárquico na localização atual do mouse ou na localização definida pelos parâmetros opcionais *Coordx* e *Coordy*."
		},
		"EDIT ACCESS": {
			"Syntax": "**EDIT ACCESS**",
			"Params": [],
			"Summary": "EDIT ACCESS permite modificar o sistema de senhas."
		},
		"EDIT FORMULA": {
			"Syntax": "**EDIT FORMULA** ( *tabela* ; *formula* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a mostrar por padrão no editor de fórmulas"
				],
				[
					"formula",
					"Text",
					"->",
					"Variável que contem a fórmula a mostrar no editor de fórmulas ou \"\" somente para mostrar o editor"
				],
				[
					"<-",
					"Fórmula validada pelo usuário"
				]
			],
			"Summary": "O comando **EDIT FORMULA** mostra o editor de fórmulas com o propósito de permitir ao usuário escrever ou modificar uma fórmula."
		},
		"EDIT ITEM": {
			"Syntax": "**EDIT ITEM** ( {* ;} *objeto* {; *item*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Tabela ou Variável (se * é omitido)"
				],
				[
					"item",
					"Integer",
					"->",
					"Número do item"
				]
			],
			"Summary": "O comando **EDIT ITEM** lhe permite editar o elemento atual ou o elemento de número *item* do array ou a lista designada pelo parâmetro *objeto*."
		},
		"ENABLE MENU ITEM": {
			"Syntax": "**ENABLE MENU ITEM** ( *menu* ; *menuItem* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número do item de menu ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				]
			],
			"Summary": "O comando ENABLE MENU ITEM ativa o comando de menu cujo número ou referência de menu e número de elemento que passou em *menu* e *menuItem*."
		},
		"ENCRYPT BLOB": {
			"Syntax": "**ENCRYPT BLOB** ( *toEncrypt* ; *sendPrivKey* {; *recipPubKey*} )",
			"Params": [
				[
					"toEncrypt",
					"Blob",
					"<->",
					"Dados a encriptar"
				],
				[
					"",
					"",
					"",
					"Dados encriptados"
				],
				[
					"sendPrivKey",
					"Blob",
					"->",
					"Chave privada do emissor"
				],
				[
					"recipPubKey",
					"Blob",
					"->",
					"Chave pública do receptor"
				]
			],
			"Summary": "O comando ENCRYPT BLOB criptograma o conteúdo do BLOB *toEncrypt* com a chave privada do remetente *sendPrivKey*, bem como, opcionalmente, a chave pública do destinatário *recipPubKey*."
		},
		"Encrypt data BLOB": {
			"Syntax": "**Encrypt data BLOB** ( *blobAcriptografar* ; objetoChave / passefrase ; *salt* ; blobCriptografado' ) : Boolean",
			"Params": [
				[
					"blobAcriptografar",
					"Blob",
					"->",
					"BLOB que vai criptografar"
				],
				[
					"objetoChave / passefrase",
					"Objeto, Texto",
					"->",
					"Objeto JSON que contém a chave de criptografia ou passefrase para geração de uma chave de criptografia direta (texto)"
				],
				[
					"salt",
					"Integer",
					"->",
					"Sal de criptografia (para adicionar dados aleatórios) para maior segurança do algoritmo"
				],
				[
					"blobCriptografado'",
					"BLOB",
					"<-",
					"BLOB que foi criptografado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE se a criptografia for realizada corretamente, senão FALSE"
				]
			],
			"Summary": "O comando **Encrypt data BLOB** encripta o parâmetro *blobCriptografar* com o mesmo algoritmo que 4D usas para criptografia de dados (AES-256) e retorna o resultao em *blobCriptografado*."
		},
		"Encrypt data file": {
			"Syntax": "**Encrypt data file** ( *rotaEstrutura* ; *rotaDados* {; novaFrasePasse/novaChave {; *arqPasta* {; atualFrasePasse/atualChave {; *nomeMetodo*}}}} ) : Text",
			"Params": [
				[
					"rotaEstrutura",
					"Text",
					"->",
					"Rota para o arquivo estrutura"
				],
				[
					"rotaDados",
					"Text",
					"->",
					"Rota de arquivo de dados a criptografar"
				],
				[
					"novaFrasePasse/novaChave",
					"Texto, Objeto",
					"->",
					"Em caso de mudança: novaFrasePasse (texto) ou nova chave de Criptografia (objeto)"
				],
				[
					"arqPasta",
					"Text",
					"->",
					"Rota da pasta onde os arquivos originais estão armazenados"
				],
				[
					"atualFrasePasse/atualChave",
					"Texto, Objeto",
					"->",
					"frase Passe atual (texto) ou chave de criptografia atual (objeto)"
				],
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome de método de chamada 4D"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota completa de pasta onde os arquivos originais estão armazenados"
				]
			],
			"Summary": "O comando **Encrypt data file** se utiliza para cifrar ou cifrar novamente o arquivo de dados designado pelo parâmetro *rotaDados* associado ao parâmetro *rotaEstrutura*."
		},
		"End selection": {
			"Syntax": "**End selection** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual provar se o ponteiro do registro está além do último registro selecionado, ou Tabela por padrão, se omitida"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Sim (TRUE) ou Não (FALSE)"
				]
			],
			"Summary": "End selection retorna TRUE quando o ponteiro do registro atual está além do último registro da seleção atual de tabela."
		},
		"End SQL": {
			"Syntax": "**End SQL**",
			"Params": []
		},
		"Equal pictures": {
			"Syntax": "**Equal pictures** ( *imagem1* ; *imagem2* ; *mascara* ) : Boolean",
			"Params": [
				[
					"imagem1",
					"Picture, Picture",
					"->",
					"Imagem fonte original"
				],
				[
					"imagem2",
					"Picture, Picture",
					"->",
					"Imagem a comparar"
				],
				[
					"mascara",
					"Picture, Picture",
					"<-",
					"Máscara resultante"
				],
				[
					"resultado",
					"Boolean",
					"<-",
					"True se ambas imagens são idênticas; caso contrário, False"
				]
			],
			"Summary": "O comando **Equal pictures** compara precisamente dois imagens, tanto a nível de suas dimensões como de seu conteúdo."
		},
		"ERASE WINDOW": {
			"Syntax": "**ERASE WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				]
			],
			"Summary": "O comando ERASE WINDOW apaga o conteúdo da janela cujo número de referência se passa em janela."
		},
		"Euro converter": {
			"Syntax": "**Euro converter** ( *valor* ; *deMoeda* ; *paraMoeda* ) : Real",
			"Params": [
				[
					"valor",
					"Real",
					"->",
					"Valor a converter"
				],
				[
					"deMoeda",
					"Text",
					"->",
					"Código da moeda na qual o valor é expresso"
				],
				[
					"paraMoeda",
					"Text",
					"->",
					"Código da moeda para o qual o valor será convertido"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor convertido"
				]
			],
			"Summary": "O comando Euro converter permite realizar todo tipo de conversão de valores entre as diferentes moedas de países que pertencem à “Zona Euro” e ao Euro mesmo."
		},
		"EXECUTE FORMULA": {
			"Syntax": "**EXECUTE FORMULA** ( *instruçao* )",
			"Params": [
				[
					"instruçao",
					"Text",
					"->",
					"Código a executar"
				]
			],
			"Summary": "**EXECUTE FORMULA** executa *instrução* como uma linha de código e opcionalmente, devolve seu valor resultante em *result*."
		},
		"EXECUTE METHOD IN SUBFORM": {
			"Syntax": "**EXECUTE METHOD IN SUBFORM** ( *objetoSubForm* ; *nomeMetodo* {; *retorno* {; *param*} {; *param2* ; ... ; *paramN*}} )",
			"Params": [
				[
					"objetoSubForm",
					"Text",
					"->",
					"Nome de objeto subformulário"
				],
				[
					"nomeMetodo",
					"Object, Text",
					"->",
					"Nome do projeto de método a ser executado"
				],
				[
					"retorno",
					"*, Variable",
					"->",
					"* Se método não retornar um valor"
				],
				[
					"<-",
					"Valor retornado pelo método"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetros a passar ao método"
				]
			],
			"Summary": "O comando EXECUTE METHOD IN SUBFORM pode ser utilizado para executar o método de projeto *nomeMetodo no* contexto do sub formulário *objetoSubform*."
		},
		"EXECUTE METHOD": {
			"Syntax": "**EXECUTE METHOD** ( *nomeMetodo* {; *resultado* {; *param*}}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome do método de projeto a ser executado"
				],
				[
					"resultado",
					"Variable, *",
					"<-",
					"Variável que recebe o método de resultado ou * por um método não retornando um resultado"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetros do método"
				]
			],
			"Summary": "O comando EXECUTE METHOD provoca a execução do método de projeto *nomeMetodo* passando os parâmetros em *param1."
		},
		"EXECUTE ON CLIENT": {
			"Syntax": "**EXECUTE ON CLIENT** ( *nomeCliente* ; *nomeMetodo* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"nomeCliente",
					"Text",
					"->",
					"Nome da sessão 4D Client"
				],
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome do método a ser executado"
				],
				[
					"param",
					"->",
					"Parâmetro(s) do método"
				]
			],
			"Summary": "O comando **EXECUTE ON CLIENT** é usado para forçar a execução do método *nomeMetodo*, com lo parâmetros *param1."
		},
		"Execute on server": {
			"Syntax": "**Execute on server** ( *proced* ; *pilha* {; *nome* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"proced",
					"Text",
					"->",
					"Procedimento a executar no processo"
				],
				[
					"pilha",
					"Integer",
					"->",
					"Tamanho da pilha em bytes"
				],
				[
					"nome",
					"Text",
					"->",
					"Nome do processo criado"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetro(s) do procedimento"
				],
				[
					"*",
					"Operador",
					"->",
					"Processo único"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de processo para o processo criado recentemente ou de um processo que está sendo executado"
				]
			],
			"Summary": "O comando Execute on server inicia um novo processo na máquina servidor (quando se chama em Cliente/Servidor) ou na mesma máquina (se é chamado em monousuário) e devolve o número deste processo."
		},
		"Exp": {
			"Syntax": "**Exp** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Expoente n da exponenciação e^n"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Número neperiano (e=2,718...) elevado a n"
				]
			],
			"Summary": "Exp retorna a exponencial Exp = e^n (onde e = 2.71828...) de *numero*."
		},
		"EXPAND BLOB": {
			"Syntax": "**EXPAND BLOB** ( *BLOB* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a expandir"
				]
			],
			"Summary": "O comando EXPAND BLOB expande o BLOB blob que anteriormente foi compactado usando o comando COMPRESS BLOB."
		},
		"EXPORT DATA": {
			"Syntax": "**EXPORT DATA** ( *nomeArquivo* {; *projeto* {; *}} )",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Rota de acesso do arquivo a exportar"
				],
				[
					"projeto",
					"Text, Blob",
					"->",
					"Conteúdo do projeto de exportação"
				],
				[
					"<-",
					"Novo conteúdo do projeto de exportação (se for passado o parâmetro *)"
				],
				[
					"*",
					"Operador",
					"->",
					"Visualização da caixa de diálogo de exportação e atualização do projeto"
				]
			],
			"Summary": "O comando EXPORT DATA exporta dados no arquivo *nomArquivo*."
		},
		"EXPORT DIF": {
			"Syntax": "**EXPORT DIF** ( {*tabela* ;} *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual exportar dados, ou tabela padrão, se omitida"
				],
				[
					"documento",
					"Text",
					"->",
					"documento DIF que recebe os dados"
				]
			],
			"Summary": "O comando EXPORT DIF escreve os dados dos registros da seleção atual de *tabela* no processo atual."
		},
		"Export structure file": {
			"Syntax": "**Export structure file** ( *rotaPasta* {; *opções*} ) : Object",
			"Params": [
				[
					"rotaPasta",
					"Text",
					"->",
					"Rota da pasta destino para arquivos projeto"
				],
				[
					"opções",
					"Object",
					"->",
					"Opções de exportação"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de validação e mensagens (se houver)"
				]
			],
			"Summary": "O comando **Export structure file** divide a estrutura atual do banco de dados 4D em um conjunto de arquivos de texto ou arquivos de imagem nativos e os armazena na *rotaPastta* especificada."
		},
		"EXPORT STRUCTURE": {
			"Syntax": "**EXPORT STRUCTURE** ( *estruturaXML* {; *formato*} )",
			"Params": [
				[
					"estruturaXML",
					"Text",
					"<-",
					"Exportação da definição XML da estrutura de banco de dados 4D"
				],
				[
					"formato",
					"Text",
					"->",
					"Formato de exportação: formato xml (padrão) ou formato html"
				]
			],
			"Summary": "O comando **EXPORT STRUCTURE** exporta, em *estruturaXML*, a definição da estrutura da base 4D atual ao formato XML."
		},
		"EXPORT SYLK": {
			"Syntax": "**EXPORT SYLK** ( {*tabela* ;} *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual exportar dados, ou tabela padrão, se omitida"
				],
				[
					"documento",
					"Text",
					"->",
					"documento SYLK a receber os dados"
				]
			],
			"Summary": "O comando **EXPORT SYLK** escreve os dados dos registros da seleção atual de *tabela* no processo atual."
		},
		"EXPORT TEXT": {
			"Syntax": "**EXPORT TEXT** ( {*tabela* ;} *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual vai exportar dados, ou tabela Padrão, se omitida"
				],
				[
					"documento",
					"Text",
					"->",
					"Documento texto que recebe os dados"
				]
			],
			"Summary": "O comando EXPORT TEXT escreve os dados dos registros da seleção atual de *tabela* no processo atual."
		},
		"False": {
			"Syntax": "**False**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"False"
				]
			],
			"Summary": "False retorna o valor booleano Falso (False)."
		},
		"Field name": {
			"Syntax": "**Field name** ( *pontCampo* ) : Text<br/>**Field name** ( *numTabela* ; *numCampo* ) : Text",
			"Params": [
				[
					"pontCampo&#124;numTabela",
					"Ponteiro, Inteiro longo",
					"->",
					"Ponteiro Campo ou número da tabela"
				],
				[
					"numCampo",
					"Integer",
					"->",
					"Número do campo se a o número da tabela foi passado no primeiro parâmetro"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do campo"
				]
			],
			"Summary": "O comando Field name retorna o nome do campo cujo ponteiro se passa en *pontCampo* ou cujos números de tabela e de campos se passan en *numTabela e numCampo*."
		},
		"Field": {
			"Syntax": "**Field** ( *numTabela* ; *numCampo* ) -> pontCampo <br/>\n**Field** ( *pontCampo* ) -> Resultado",
			"Params": [
				[
					"numTabela",
					"Integer",
					"->",
					"Número da tabela"
				],
				[
					"numCampo",
					"Integer",
					"->",
					"Nº do campo"
				],
				[
					"pontCampo",
					"Pointer",
					"<-",
					"Ponteiro do campo"
				],
				[
					"Field ( pontCampo ) -> Resultado"
				],
				[
					"Parâmetro",
					"Tipo",
					"Descrição"
				],
				[
					"pontCampo",
					"Pointer",
					"->",
					"Ponteiro do campo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número do campo"
				]
			],
			"Summary": "O comando Field tem duas sintaxe: \n\n* Se passa um número de tabela en *numTabela* e um número de campo en *numCampo*, Field retorna um ponteiro ao campo."
		},
		"FILTER EVENT": {
			"Syntax": "**FILTER EVENT**",
			"Params": [],
			"Summary": "O comando **FILTER EVENT** deve ser chamado desde o interior do método de gestão de eventos instalado utilizando o comando ON EVENT CALL."
		},
		"FILTER KEYSTROKE": {
			"Syntax": "**FILTER KEYSTROKE** ( *carFiltro* )",
			"Params": [
				[
					"carFiltro",
					"Text",
					"->",
					"Caracter de filtrado de tecle ou Cadeia vazia para cancelar o filtrado"
				]
			],
			"Summary": "FILTER KEYSTROKE permite substituir ou caractere introduzido pelo usuário em um campo ou em uma área editável pelo primeiro caractere da string *carFiltro*."
		},
		"Find in array": {
			"Syntax": "**Find in array** ( *array* ; *valor* {; *inicio*} ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a buscar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor do mesmo tipo a ser buscado no array"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Elemento no qual se inicia a busca"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número do primeiro elemento no array que corresponde ao valor"
				]
			],
			"Summary": "O comando Find in array devolve o número do primeiro elemento do Array que corresponde a valor."
		},
		"Find in field": {
			"Syntax": "**Find in field** ( *campoAlvo* ; *valor* ) : Integer",
			"Params": [
				[
					"campoAlvo",
					"Field",
					"->",
					"Campo Alvo no qual executar a pesquisa"
				],
				[
					"valor",
					"Field, Variable",
					"->",
					"valor a procurar"
				],
				[
					"<-",
					"valor encontrado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número do registro encontrado, ou -1 se nenhum registro for encontrado"
				]
			],
			"Summary": "O comando Find in field devolve o número do primeiro registro cujo *campoAlvo* for igual a *valor*."
		},
		"Find in list": {
			"Syntax": "**Find in list** ( {* ;} *lista* ; *valor* ; *alcance*  {; *arrayElem* {; *}} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"valor",
					"Text",
					"->",
					"Valor a buscar"
				],
				[
					"alcance",
					"Integer",
					"->",
					"0=Lista principal, 1=Sub-lista"
				],
				[
					"arrayElem",
					"Integer array",
					"<-",
					"- Se omitido o 2do *: array de posições dos elementos encontrados - Se passado o segundo *: array de números de referência dos elementos encontrados"
				],
				[
					"*",
					"Operador",
					"->",
					"- Se omitido: utiliza a posição dos elementos - Se passado: utiliza o número de referência dos elementos"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"- Se omitido o 2do *: posição do elemento encontrado - Se passado 2do *: número de referência do elemento encontrado"
				]
			],
			"Summary": "O comando Find in list retorna a posição ou referência do primeiro elemento da *lista* que é equivalente à cadeia passada em *valor*."
		},
		"Find in sorted array": {
			"Syntax": "**Find in sorted array** ( *array* ; *valor* ; > or < {; *posPrim* {; *posUlt*}} ) : Boolean",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array para pesquisar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor do mesmo tipo para procurar no array"
				],
				[
					"> or <",
					"Operador",
					"->",
					"> se o array está classificado em ordem crescente, < se ele está em ordem decrescente"
				],
				[
					"posPrim",
					"Integer",
					"<-",
					"Posição da sua primeira ocorrência se o valor for encontrado; caso contrário, a posição em que o valor deve ser inserido"
				],
				[
					"posUlt",
					"Integer",
					"<-",
					"Posição de sua última ocorrência se o valor for encontrado; caso contrário, mesmo que posPrim"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se pelo menos um elemento no array corresponde ao valor, False caso contrário"
				]
			],
			"Summary": "O novo comando **Find in sorted array** devolve **true** se pelo menos um elemento no *array* ordenado com o *valor* e opcionalmente devolve a posição dos elementos correspondentes."
		},
		"Find window": {
			"Syntax": "**Find window** ( *esquerda* ; *superior* {; *parteJanela*} ) : Integer",
			"Params": [
				[
					"esquerda",
					"Integer",
					"->",
					"Coordenada esquerda global"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada superior global"
				],
				[
					"parteJanela",
					"Integer",
					"<-",
					"Número de parte ID da janela"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de janela"
				]
			],
			"Summary": "O comando Find window devolve (se existe) o número de referência da primeira janela “tocada” pelo ponto cujas coordenadas se passam em *esquerda e superior*."
		},
		"FIRST RECORD": {
			"Syntax": "**FIRST RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai mover o primeiro registro selecionado, ou a tabela padrão, se omitido"
				]
			],
			"Summary": "FIRST RECORD faz do primeiro registro da seleção atual de *tabela* o registro atual, e carrega o registro do disco."
		},
		"FLUSH CACHE": {
			"Syntax": "**FLUSH CACHE** {( tamanho|* )}",
			"Params": [
				[
					"tamanho&#124;*",
					"Real, Operador",
					"->",
					"*para completamente liberar a memória cache, ou números de bytes a liberar em cache"
				]
			],
			"Summary": "O comando FLUSH CACHE salva imediatamente os buffers de dados em disco."
		},
		"Focus object": {
			"Syntax": "**Focus object**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro ao objeto que tem o foco"
				]
			],
			"Summary": "Este comando só é conservado por razões de compatibilidade."
		},
		"FOLDER LIST": {
			"Syntax": "**FOLDER LIST** ( *nomeRota* ; *diretorios* )",
			"Params": [
				[
					"nomeRota",
					"Text",
					"->",
					"Rota de acesso ao volume, diretório ou pasta"
				],
				[
					"diretorios",
					"Text array",
					"<-",
					"Nomes dos diretórios presentes nessa localização"
				]
			],
			"Summary": "O comando FOLDER LIST preenche o array de tipo Texto ou Alfa *diretorios* com os nomes das pastas localizadas na rota de acesso que se passa em *rotaAcesso*."
		},
		"Font file": {
			"Syntax": "**Font file** ( *fontFamily* {; *fontStyle*} ) : any",
			"Params": [
				[
					"fontFamily",
					"Text",
					"->",
					"Name of font family"
				],
				[
					"fontStyle",
					"Integer",
					"->",
					"Font style: 0=normal (default), 1=bold, 2=italic"
				],
				[
					"Resultado",
					"Null, Object",
					"<-",
					"Font file object"
				]
			],
			"Summary": "The **Font file** command returns an object describing the font file in your OS corresponding to the *fontFamily* and, optionally, *fontStyle* you passed in parameter."
		},
		"FONT LIST": {
			"Syntax": "**FONT LIST** ( *fontes* {; listType | *} )",
			"Params": [
				[
					"fontes",
					"Text array",
					"<-",
					"Array de nomes de fontes disponíveis"
				],
				[
					"listType &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Tipo de lista de fonte a devolver ou * para devolver os nomes de fonte em macOS"
				]
			],
			"Summary": "O comando FONT LIST enche o array *fontes*, de tipo alfa ou texto, com os nomes das fontes disponíveis em seu sistema."
		},
		"FONT STYLE LIST": {
			"Syntax": "**FONT STYLE LIST** ( *familiaFonte* ; *listaEstilosFonte* ; *listaNomesFonte* )",
			"Params": [
				[
					"familiaFonte",
					"Text",
					"->",
					"Nome da família da fonte"
				],
				[
					"listaEstilosFonte",
					"Text array",
					"<-",
					"Lista de estilos de fonte suportados pela família da fonte"
				],
				[
					"listaNomesFonte",
					"Text array",
					"<-",
					"Lista de nomes completos de fontes suportadas pela família de fonte"
				]
			],
			"Summary": "O comando **FONT STYLE LIST** devolve a lista de estilos e a lista de nomes completos suportados pela familia de fonte designada pelo parámetro *familiaFonte*."
		},
		"FORM Convert to dynamic": {
			"Syntax": "**FORM Convert to dynamic** ( {*Tabela* ;} *nomeForm* ) : Object",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela formulário"
				],
				[
					"nomeForm",
					"Text",
					"->",
					"Nome do formulário \"clássico\" projeto ou tabela"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"nomeForm é convertido a um formulário dinâmico"
				]
			],
			"Summary": "O comando **FORM Convert to dynamic** converte o *nomeFormulario* (formulário clássico) a um formulário dinâmico e o devolve em um objeto."
		},
		"FORM FIRST PAGE": {
			"Syntax": "**FORM FIRST PAGE**",
			"Params": [],
			"Summary": "FORM FIRST PAGE modifica a página atual do formulário pela primeira página do formulário."
		},
		"FORM Get color scheme": {
			"Syntax": "**FORM Get color scheme**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Esquema de cores do formulário atual \"light\" ou \"dark\""
				]
			],
			"Summary": "O comando **FORM Get color scheme** retorna o nome do esquema atual de cores do formulário atualmente sendo exibido ."
		},
		"FORM Get current page": {
			"Syntax": "**FORM Get current page** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Retorna o número da página de subformulário atual"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número da página de formulário exibida atualmente"
				]
			],
			"Summary": "O comando **FORM Get current page** retorna o número da página atual do formulário mostrado atualmente ou do formulário atual carregado via o comando FORM LOAD."
		},
		"FORM GET ENTRY ORDER": {
			"Syntax": "**FORM GET ENTRY ORDER** ( *objectNames* {; numPagina | * } )",
			"Params": [
				[
					"objectNames",
					"Text array",
					"<-",
					"Nomes de objeto ordenados por ordem de entrada"
				],
				[
					"numPagina &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de página para o qual obter a ordem definida de entrada (página atual se omitida)"
				]
			],
			"Summary": "O comando **FORM GET ENTRY ORDER** devolve em *nomObjetos* os nomes ordenados dos objetos que definem a ordem de entrada do formulario."
		},
		"FORM GET HORIZONTAL RESIZING": {
			"Syntax": "**FORM GET HORIZONTAL RESIZING** ( *resize* {; *larguraMin* {; *larguraMax*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"<-",
					"True: Form can be resized horizontally<br/>False: Form cannot be resized horizontally"
				],
				[
					"larguraMin",
					"Integer",
					"<-",
					"Smallest form width allowed (pixels)"
				],
				[
					"larguraMax",
					"Integer",
					"<-",
					"Largest form width allowed (pixels)"
				]
			],
			"Summary": "O comando FORM GET HORIZONTAL RESIZING retorna as propriedades de redimensionamento horizontal do formulário atual nas variáveis *redimension*, *larguraMin* e *larguraMax*."
		},
		"FORM GET NAMES": {
			"Syntax": "**FORM GET NAMES** ( {*tabela* ;} *arrayNome* {; *filtro* {; *marcador*}}{; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Referencia de tabela"
				],
				[
					"arrayNome",
					"Text array",
					"<-",
					"Arrays de nomes de formulário"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de nomes"
				],
				[
					"marcador",
					"Real",
					"->",
					"Marcador para versão mínima a devolver"
				],
				[
					"<-",
					"Novo valor"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passa = o comando é aplicado a base local quando é executado desde um componente(parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **FORM GET NAMES** enche o array *arrayNoms* com os nomes dos formulários da aplicação."
		},
		"FORM GET OBJECTS": {
			"Syntax": "**FORM GET OBJECTS** ( *arrObjetos* {; *arrVariaveis*  {; *arrPags*}} {; *opcaoPag*} )",
			"Params": [
				[
					"arrObjetos",
					"Text array",
					"<-",
					"Nome dos objetos do formulário"
				],
				[
					"arrVariaveis",
					"Pointer array",
					"<-",
					"Ponteiros a variáveis ou campos associados aos objetos"
				],
				[
					"arrPags",
					"Array integer",
					"<-",
					"Número de página de cada objeto"
				],
				[
					"opcaoPag",
					"Integer, *",
					"->",
					"1=Página atual do formulário, 2=Todas as páginas, 4=Páginas herdadas<br/>Se passar * (obsoleto) = página atual com objetos herdados"
				]
			],
			"Summary": "O comando FORM GET OBJECTS retorna em forma de array(s) a lista de todos os objetos presentes no formulário atual da tabela atual."
		},
		"FORM GET PROPERTIES": {
			"Syntax": "**FORM GET PROPERTIES** ( {*tabela* ;} *nomeForm* ; *largura* ; *altura* {; *numPags* {; *larguraFixa* {; *alturaFixa* {; *titulo*}}}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do formulário ou tabela por padrão, se for omitido"
				],
				[
					"nomeForm",
					"Text",
					"->",
					"Nome do formulário"
				],
				[
					"largura",
					"Integer",
					"<-",
					"Largura do formulário (em pixels)"
				],
				[
					"altura",
					"Integer",
					"<-",
					"Altura do formulário (em pixels)"
				],
				[
					"numPags",
					"Integer",
					"<-",
					"Número de páginas no formulário"
				],
				[
					"larguraFixa",
					"Boolean",
					"<-",
					"Verdadeiro = Largura fixo, Falso = Largura variável"
				],
				[
					"alturaFixa",
					"Boolean",
					"<-",
					"Verdadeiro = Altura fixa, Falso = Altura variável"
				],
				[
					"titulo",
					"Text",
					"<-",
					"Título da janela do formulário"
				]
			],
			"Summary": "O comando FORM GET PROPERTIES retorna as propriedades do formulário *nomForm*."
		},
		"FORM GET VERTICAL RESIZING": {
			"Syntax": "**FORM GET VERTICAL RESIZING** ( *redimensao* {; *alturaMin* {; *alturaMax*}} )",
			"Params": [
				[
					"redimensao",
					"Boolean",
					"<-",
					"True: Form can be resized vertically<br/>False: Form cannot be resized vertically"
				],
				[
					"alturaMin",
					"Integer",
					"<-",
					"Smallest form height allowed (pixels)"
				],
				[
					"alturaMax",
					"Integer",
					"<-",
					"Largest form height allowed (pixels)"
				]
			],
			"Summary": "O comando FORM GET VERTICAL RESIZING retorna as propriedades de redimensionamento vertical do formulário atual nas variáveis *redimension*, *alturaMin* e *alturaMax*."
		},
		"FORM GOTO PAGE": {
			"Syntax": "**FORM GOTO PAGE** ( *numPag* {; *} )",
			"Params": [
				[
					"numPag",
					"Integer",
					"->",
					"Exibir página de formulário"
				],
				[
					"*",
					"Operador",
					"->",
					"Mudar página do subformulário atual"
				]
			],
			"Summary": "**FORM GOTO PAGE** modifica a página atual de um formulário para mostrar a página especificada por *numPag*."
		},
		"FORM LAST PAGE": {
			"Syntax": "**FORM LAST PAGE**",
			"Params": [],
			"Summary": "FORM LAST PAGE modifica a página atual de um formulário para mostrar a última página do formulário."
		},
		"FORM NEXT PAGE": {
			"Syntax": "**NEXT PAGE**",
			"Params": [],
			"Summary": "FORM NEXT PAGE modifica a página atual exibida do formulário para mostrar a página seguinte."
		},
		"FORM PREVIOUS PAGE": {
			"Syntax": "**PREVIOUS PAGE**",
			"Params": [],
			"Summary": "FORM PREVIOUS PAGE modifica a página atual de um formulário para mostrar a página anterior."
		},
		"FORM SCREENSHOT": {
			"Syntax": "**FORM SCREENSHOT** ( {{*tabela* ;} *nomeForm* ;} *imagForm* {; *pagNum*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do formulário"
				],
				[
					"nomeForm",
					"Text",
					"->",
					"Nome do formulário"
				],
				[
					"imagForm",
					"Picture",
					"<-",
					"Imagem do formulário em execução se o primeiro parâmetro se omite, ou<br/>Imagem do formulário no editor de formulários se passar um nome de formulário"
				],
				[
					"pagNum",
					"Integer",
					"->",
					"Número de página do formulário"
				]
			],
			"Summary": "O comando **FORM SCREENSHOT** retorna um formulário em forma de imagem."
		},
		"FORM SET ENTRY ORDER": {
			"Syntax": "**FORM SET ENTRY ORDER** ( *nomeObj* {; *numPagina*} )",
			"Params": [
				[
					"nomeObj",
					"Text array",
					"->",
					"Array de nomes de objeto na sua ordem de entrada esperada"
				],
				[
					"numPagina",
					"Integer",
					"->",
					"Números de página para estabelecer a ordem de entrada (página atual se omitido)"
				]
			],
			"Summary": "O comando **FORM SET ENTRY ORDER** permite definir dinâmicamente a ordem de entrada do formulário atual para o processo atual baseado no array *nomObjetos*."
		},
		"FORM SET HORIZONTAL RESIZING": {
			"Syntax": "**FORM SET HORIZONTAL RESIZING** ( *redimensao* {; *larguraMin* {; *larguraMax*}} )",
			"Params": [
				[
					"redimensao",
					"Boolean",
					"->",
					"True: o formulário pode ser redimensionado horizontalmente; False - o formulário não pode ser redimensionado horizontalmente"
				],
				[
					"larguraMin",
					"Integer",
					"->",
					"Melhor largura de formulário permitida (píxels)"
				],
				[
					"larguraMax",
					"Integer",
					"->",
					"Maior largura de formulário permitida (píxels)"
				]
			],
			"Summary": "O comando FORM SET HORIZONTAL RESIZING permite modificar por programação as propriedades de redimensionamento horizontal do formulário atual."
		},
		"FORM SET INPUT": {
			"Syntax": "**FORM SET INPUT** ( {*tabela* ;} *formulario* {; *formUsuario* {; *}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai estabecer o formulário input, ou tabela Padrão, se omitido"
				],
				[
					"formulario",
					"Text, Object",
					"->",
					"Nome do formulário para estabelecer um formulário input"
				],
				[
					"formUsuario",
					"Text",
					"->",
					"Nome do formulário usuário para utilizar"
				],
				[
					"*",
					"Operator",
					"->",
					"Tamanho da janela automático"
				]
			],
			"Summary": "O comando FORM SET INPUT define o formulario de entrada atual de *tabela* para *form* ou *userForm*."
		},
		"FORM SET OUTPUT": {
			"Syntax": "**FORM  SET OUTPUT** ( {*tabela* ;} *formulario* {; *formUsuario*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai estabelecer o formulário output, ou tabela padrão, se omitido"
				],
				[
					"formulario",
					"Text, Object",
					"->",
					"Nome formulário"
				],
				[
					"formUsuario",
					"Text",
					"->",
					"Nome de formulário usuário a utilizar"
				]
			],
			"Summary": "O comando FORM SET OUTPUT define o formulário de salida atual de *formulario* ou *formUsuario*."
		},
		"FORM SET SIZE": {
			"Syntax": "**FORM SET SIZE** ( {*objeto* ;} *horizontal*  ; *vertical* {; *} )",
			"Params": [
				[
					"objeto",
					"Text",
					"->",
					"Nome do objeto que indica os limites do formulário"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"Se passada *: margem horizontal (píxels) Se omitida *: largo (píxels)"
				],
				[
					"vertical",
					"Integer",
					"->",
					"Se passada *: margem vertical (píxels) Se omitida *: altura (píxels)"
				],
				[
					"*",
					"Operador",
					"->",
					"• Se passado: agregar as margens definidas pelos parâmetros horizontal e vertical (tamanho automático ou baseado em um objeto, se passado um objeto) • Se omitido: utilizar horizontal e vertical como largura e altura do formulário"
				]
			],
			"Summary": "O comando FORM SET SIZE lhe permite modificar o tamanho do formulário atual por programação."
		},
		"FORM SET VERTICAL RESIZING": {
			"Syntax": "**FORM SET VERTICAL RESIZING** ( *redimensao* {; *alturaMin* {; *alturaMax*}} )",
			"Params": [
				[
					"redimensao",
					"Boolean",
					"->",
					"True: o formulário pode ser redimensionado verticalmente<br/>False: o formulário não pode ser redimensionado verticalmente"
				],
				[
					"alturaMin",
					"Integer",
					"->",
					"Maior altura de formulário permitida (píxels)"
				],
				[
					"alturaMax",
					"Integer",
					"->",
					"Altura máxima de formulário permitida (píxels)"
				]
			],
			"Summary": "O comando FORM SET VERTICAL RESIZING lhe permite modificar por programação as propriedades de redimensionamento vertical do formulário atual."
		},
		"FORM UNLOAD": {
			"Syntax": "**FORM UNLOAD**",
			"Params": [],
			"Summary": "O comando **FORM UNLOAD** libera da memória o formulário atual designado utilizando o comando FORM LOAD."
		},
		"Frontmost process": {
			"Syntax": "**Frontmost process** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Número do processo para a primeira janela não flutuante"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número do processo cujas janelas estão em primeiro plano"
				]
			],
			"Summary": "Frontmost process devolve o número do processo cuja janela (ou janelas) estão no primeiro plano."
		},
		"Frontmost window": {
			"Syntax": "**Frontmost window** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, considere janela flutuante, se omitido, ignore janela flutuante"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de janela"
				]
			],
			"Summary": "O comando Frontmost window devolve o número de referência da janela localizada no primeiro plano."
		},
		"GENERATE CERTIFICATE REQUEST": {
			"Syntax": "**GENERATE CERTIFICATE REQUEST** ( *chavPriv* ; *peticaoCertificado* ; *codigoArray* ; *arrayNome* )",
			"Params": [
				[
					"chavPriv",
					"Blob",
					"->",
					"BLOB que contém a chave privada"
				],
				[
					"peticaoCertificado",
					"Blob",
					"<-",
					"BLOB que recebe o pedido de certificação"
				],
				[
					"codigoArray",
					"Integer array",
					"->",
					"informação da lista de código"
				],
				[
					"arrayNome",
					"Text array",
					"->",
					"Lista de nomes"
				]
			],
			"Summary": "O comando GENERATE CERTIFICATE REQUEST gera uma pedido de certificação ao formato PKCS o qual pode ser utilizado diretamente pelas autoridades de certificação tal como Verisign(R)."
		},
		"Generate digest": {
			"Syntax": "**Generate digest** ( *param* ; *algoritmo* {; *} ) : Text",
			"Params": [
				[
					"param",
					"Blob, Text",
					"->",
					"Blob o texto para o qual obter uma chave digest"
				],
				[
					"algoritmo",
					"Integer",
					"->",
					"Algoritimo utilizado para retornar a chave: 0 = MD5 Digest, 1 = SHA1 Digest"
				],
				[
					"*",
					"Operador",
					"->",
					"Encode digest in Base64URL"
				],
				[
					"resultado",
					"Text",
					"<-",
					"Valor da chave digest"
				]
			],
			"Summary": "O comando **Generate digest** retorna a chave digest (ou chave de resumo) de um BLOB ou texto depois da aplicação de um algoritmo de criptografia."
		},
		"GENERATE ENCRYPTION KEYPAIR": {
			"Syntax": "**GENERATE ENCRYPTION KEYPAIR** ( *chavPriv* ; *chavPublica* {; *tamanho*} )",
			"Params": [
				[
					"chavPriv",
					"Blob",
					"<-",
					"BLOB que contém a chave privada"
				],
				[
					"chavPublica",
					"Blob",
					"<-",
					"BLOB que contém a chave pública"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Tamanho da chave (bits) [512...2048]. O valor normal é  512"
				]
			],
			"Summary": "O comando GENERATE ENCRYPTION KEYPAIR gera um novo apr de chaves RSA."
		},
		"Generate password hash": {
			"Syntax": "**Generate password hash** ( *senha* {; *opções*} ) : Text",
			"Params": [
				[
					"senha",
					"Text",
					"->",
					"A senha do usuário. Só os primeiros 72 caracteres são usados"
				],
				[
					"opções",
					"Object",
					"->",
					"Um objeto contendo opções"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Retorna a senha hashed"
				]
			],
			"Summary": "A função **Generate password hash** devolve um hash de *senha* seguro gerado por um algoritmo de hash criptográfico."
		},
		"Generate UUID": {
			"Syntax": "**Generate UUID** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Novo UUID como um texto não canônico (32 caracteres)"
				]
			]
		},
		"Get 4D file": {
			"Syntax": "**Get 4D file** ( *arquivo* {; *} ) : Text",
			"Params": [
				[
					"arquivo",
					"Integer",
					"->",
					"Tipo de arquivo"
				],
				[
					"*",
					"Operador",
					"->",
					"Retorna arquivo do banco de dados host"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da rota do arquivo 4D"
				]
			],
			"Summary": "O comando **Get 4D file** devolve a rota de acesso ao arquivo de ambiente 4D especificado pelo parâmetro *arquivo*."
		},
		"Get 4D folder": {
			"Syntax": "**Get 4D folder** {( *pasta* {; *options*} {; *})} : Text",
			"Params": [
				[
					"pasta",
					"Integer",
					"->",
					"Tipo de pasta (se omitido = pasta 4D ativa)"
				],
				[
					"options",
					"Object",
					"->",
					"4D Client database folder path configuration"
				],
				[
					"*",
					"Operador",
					"->",
					"Retorna a pasta do banco local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Endereço para a pasta 4D"
				]
			],
			"Summary": "O comando **Get 4D folder** retorna o caminho para a pasta 4D ativa do aplicativo atual, ou para a pasta do ambiente 4D especificado pelo parâmetro *pasta*, se fornecido."
		},
		"Get adjusted blobs cache priority": {
			"Syntax": "**Get adjusted blobs cache priority** ( *Tabela* ) : Integer",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela para a qual o valor de prioridade dos \"blobs\" vai ser recuperada"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de prioridade atual para campos \"blobs\""
				]
			],
			"Summary": "O comando **Get adjusted blobs cache priority** devolve o valor de prioridade da cache ajustada atual aplicado na cache para os dados \"blobs\" *tabela*."
		},
		"Get adjusted index cache priority": {
			"Syntax": "**Get adjusted index cache priority** ( *Campo* ) : Integer",
			"Params": [
				[
					"Field",
					"Field",
					"->",
					"Campo para o qual a prioridade dos índices vai ser recuperada"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"O valor atual da prioridade dos índices"
				]
			],
			"Summary": "O comando **Get adjusted index cache priority** devolve o valor de prioridade de cache ajustado atual aplicado pelo gestor de cache para os índices de campo."
		},
		"Get adjusted table cache priority": {
			"Syntax": "**Get adjusted table cache priority** ( *Tabela* ) : Integer",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela para a qual os valores de prioridade escalares serão recuperados"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor atual de prioridades para campos escalares"
				]
			],
			"Summary": "O comando **Get adjusted table cache priority** devolve o valor de prioridade da cache ajustada aplicado em cache para os datos escalares *tabela*."
		},
		"GET ALLOWED METHODS": {
			"Syntax": "**GET ALLOWED METHODS** ( *arrMetodos* )",
			"Params": [
				[
					"arrMetodos",
					"Text array",
					"<-",
					"Array de nomes de métodos"
				]
			],
			"Summary": "O comando GET ALLOWED METHODS retorna, em *arrMetodos*, os nomes dos métodos que possam ser utilizados para escrever fórmulas."
		},
		"Get Application color scheme": {
			"Syntax": "**Get Application color scheme** {( * )} : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Retorna o esquema de cores do banco de dados host/anfitrião"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Esquema de cores da aplicação atual"
				]
			],
			"Summary": "O comando **Get Application color scheme** retorna o nome do esquema de cor atual para uso ao nível da aplicação."
		},
		"Get assert enabled": {
			"Syntax": "**Get assert enabled** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True=asserções ativas False =  asserções desativadas"
				]
			],
			"Summary": "O comando Get assert enabled devolve True ou False dependendo de se as asserções estão ativas ou não no processo atual."
		},
		"GET AUTOMATIC RELATIONS": {
			"Syntax": "**GET AUTOMATIC RELATIONS** ( *um* ; *muitos* )",
			"Params": [
				[
					"um",
					"Boolean",
					"<-",
					"Estado de todas as relações Muitos a Um"
				],
				[
					"muitos",
					"Boolean",
					"<-",
					"Estado de todas as relações Um a Muitos"
				]
			],
			"Summary": "O comando GET AUTOMATIC RELATIONS lhe permite saber se o estado automático/manual de todas as relações manuais Muitos a Um e Um a Muitos do banco tenham sido modificadas no processo atual."
		},
		"Get cache size": {
			"Syntax": "**Get cache size**  : Real",
			"Params": [
				[
					"Resultado",
					"Real",
					"<-",
					"Tamanho da cache de banco de dados em bytes"
				]
			],
			"Summary": "O comando **Get cache size** devolve, em bytes, o tamanho atual da cache do banco de dados."
		},
		"Get current printer": {
			"Syntax": "**Get current printer**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da impressora atual"
				]
			],
			"Summary": "O comando Get current printer devolve o nome da impressora atual definida na aplicação 4D."
		},
		"Get database localization": {
			"Syntax": "**Get database localization** {( {*tipoIdioma*}{;}{*} )} : Text",
			"Params": [
				[
					"tipoIdioma",
					"Integer",
					"->",
					"Tipo de idioma"
				],
				[
					"*",
					"Operador",
					"->",
					"Retorna informação sobre banco de dados host"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Idioma atual do banco"
				]
			],
			"Summary": "O comando Get database localization \\[#descv\\] retorna o idioma padrão ou a linguagem do banco de dados especificado pelo *tipoLinguagem*, expresso no padrão definido pela RFC 3066\\."
		},
		"Get database parameter": {
			"Syntax": "**Get database parameter** ( {*tabela* ;} *seletor* {; *valorAlfa*} ) : Real",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do parâmetro ou tabela padrão se este parâmetro for omitido"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Código do parâmetro do banco"
				],
				[
					"valorAlfa",
					"Text",
					"<-",
					"Valor alfa do parâmetro"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor atual do parâmetro"
				]
			],
			"Summary": "O comando **Get database parameter** permite obter o valor atual de um parâmetro do banco 4D."
		},
		"Get default user": {
			"Syntax": "**Get default user**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de ID de usuário"
				]
			],
			"Summary": "O comando Get default user retorna o número de referência único do usuário designado como “Usuário por padrão” na caixa de diálogo de Preferências do banco"
		},
		"GET DOCUMENT ICON": {
			"Syntax": "**GET DOCUMENT ICON** ( *rotaDoc* ; *icone* {; *tamanho*} )",
			"Params": [
				[
					"rotaDoc",
					"Text",
					"->",
					"Nome ou rota de acesso do documento para recuperar ícone, ou string vazia para caixa de diálogo Abrir Arquivo"
				],
				[
					"icone",
					"Picture, Picture",
					"<-",
					"Variavel imagem ou campo"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Tamanho da imagem retornada (em pixels)"
				]
			],
			"Summary": "O comando GET DOCUMENT ICON retorna no campo ou a variável imagem 4D ícone, o ícone do documento cujo nome ou rota de acesso se passa em *rotaDoc."
		},
		"Get document position": {
			"Syntax": "**Get document position** ( *docRef* ) : Real",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referência de documento"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Posição do arquivo (expressa em bytes) a partir do início do arquivo"
				]
			],
			"Summary": "Este comando apenas funciona em um documento aberto cujo número de referência se passa no parâmetro *docRef*."
		},
		"GET DOCUMENT PROPERTIES": {
			"Syntax": "**GET DOCUMENT PROPERTIES** ( *documento* ; *bloqueado* ; *invisivel* ; *criadoEm* ; *criadoAs* ; *modificadoEm* ; *modificadoAs* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome do documento"
				],
				[
					"bloqueado",
					"Boolean",
					"<-",
					"Bloqueado (TRUE) ou desbloqueado(false)"
				],
				[
					"invisivel",
					"Boolean",
					"<-",
					"Invisível (True) ou visível (False)"
				],
				[
					"criadoEm",
					"Date",
					"<-",
					"Data da criação"
				],
				[
					"criadoAs",
					"Time",
					"<-",
					"Hora da criação"
				],
				[
					"modificadoEm",
					"Date",
					"<-",
					"Última data de modificação"
				],
				[
					"modificadoAs",
					"Time",
					"<-",
					"última hora de modificação"
				]
			],
			"Summary": "O comando GET DOCUMENT PROPERTIES retorna informação sobre o documento cujo nome ou rota se passa em *documento*."
		},
		"Get document size": {
			"Syntax": "**Get document size** ( *documento* {; *} ) : Real",
			"Params": [
				[
					"documento",
					"Text, Time",
					"->",
					"Número de referência de documento ou nome do documento"
				],
				[
					"*",
					"Operador",
					"->",
					"Apenas em Mac OS :  se omitido, tamanho do data fork;  se especificado, tamanho do resource fork"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Tamanho (expresso em bytes) do documento"
				]
			],
			"Summary": "O comando Get document size retorna o tamanho de um documento, expresso em bytes."
		},
		"Get edited text": {
			"Syntax": "**Get edited text**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Text being entered"
				]
			],
			"Summary": "O comando Get edited text é utilizado principalmente com o evento de formulário On After Keystroke para recuperar o texto a medida em que é introduzido."
		},
		"Get external data path": {
			"Syntax": "**Get external data path** ( *ocampo* ) : Text",
			"Params": [
				[
					"ocampo",
					"Text, Blob, Picture",
					"->",
					"Campo do qual obter o lugar de armazenamento"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Via de acesso completa do arquivo de armazenamento externo"
				]
			],
			"Summary": "O comando **Get external data path** devolve a via de acesso completa do arquivo de armazenamento externo de dados do campo passado no parâmetro *oCampo*, para o registro atual."
		},
		"GET FIELD ENTRY PROPERTIES": {
			"Syntax": "**GET FIELD ENTRY PROPERTIES** ( *pontCampo* ; *lista* ; *obrigatório* ; *nãoEditável* ; *nãoModificável* )<br/>**GET FIELD ENTRY PROPERTIES** ( *numTabela* ; *numCampo* ; *lista* ; *obrigatório* ; *nãoEditável* ; *nãoModificável* )",
			"Params": [
				[
					"pontCampo&#124;numTabela",
					"Ponteiro, Inteiro longo",
					"->",
					"Ponteiro de campo ou número da tabela"
				],
				[
					"numCampo",
					"Integer",
					"->",
					"Número de campo se o número da tabela for passado como primeiro parâmetro"
				],
				[
					"lista",
					"Text",
					"<-",
					"Lista associada ao campo ou string vazia"
				],
				[
					"obrigatório",
					"Boolean",
					"<-",
					"True = Obrigatório, False = Opcional"
				],
				[
					"nãoEditável",
					"Boolean",
					"<-",
					"True=não editável, False = Editável"
				],
				[
					"nãoModificável",
					"Boolean",
					"<-",
					"True = não modificável, False = modificável"
				]
			],
			"Summary": "O comando GET FIELD ENTRY PROPERTIES retorna as propriedades de entrada de dados para o campo especificado por *numTabela* e *numCampo* ou por *pontCampo*."
		},
		"GET FIELD PROPERTIES": {
			"Syntax": "**GET FIELD PROPERTIES** ( *pontCampo* ; *tipoCampo* {; *tamanhoCampo* {; *indexado* {; *unico* {; *invisivel*}}}} )<br/>**GET FIELD PROPERTIES** ( *numTabela* ; *numCampo* ; *tipoCampo* {; *tamanhoCampo* {; *indexado* {; *unico* {; *invisivel*}}}} )",
			"Params": [
				[
					"pontCampo&#124;numTabela",
					"Ponteiro, Inteiro longo",
					"->",
					"Número de tabela ou ponteiro do campo"
				],
				[
					"numCampo",
					"Integer",
					"->",
					"Número do campo se número de tabela for passado"
				],
				[
					"tipoCampo",
					"Integer",
					"<-",
					"Tipo de Campo"
				],
				[
					"tamanhoCampo",
					"Integer",
					"<-",
					"Comprimento do campo, se alfanumérico"
				],
				[
					"indexado",
					"Boolean",
					"<-",
					"True = indexado, False = não indexado"
				],
				[
					"unico",
					"Boolean",
					"<-",
					"True = único, False = não único"
				],
				[
					"invisivel",
					"Boolean",
					"<-",
					"True = invisível, False = visível"
				]
			],
			"Summary": "O comando GET FIELD PROPERTIES retorna informação sobre o campo designado por *pontCampo* ou por *numTabela* e *campoNum*."
		},
		"GET FIELD RELATION": {
			"Syntax": "**GET FIELD RELATION** ( *campoN* ; *um* ; *muitos* {; *} )",
			"Params": [
				[
					"campoN",
					"Field",
					"->",
					"Iniciar campo da relação"
				],
				[
					"um",
					"Integer",
					"<-",
					"Estado das relações Muitos a Um"
				],
				[
					"muitos",
					"Integer",
					"<-",
					"Estado da relação Um a Muitos"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: um e muitos retorna o estado atual da relação (valores 2 ou 3 apenas) * se omitido (padrão): um e muitos podem retornar o valor 1 se a relação não foi modificada através de programação"
				]
			],
			"Summary": "O comando GET FIELD RELATION permite conhecer o estado automático/manual da relação começando desde o *campoN* para o processo atual."
		},
		"GET FIELD TITLES": {
			"Syntax": "**GET FIELD TITLES** ( *tabela* ; *titulosCampos* ; *numCampos* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para qual você deseja encontrar os nomes dos campos"
				],
				[
					"titulosCampos",
					"Text array",
					"<-",
					"Nomes atuais dos campos"
				],
				[
					"numCampos",
					"Integer array",
					"<-",
					"Números de Campos"
				]
			],
			"Summary": "O comando GET FIELD TITLES preenche os arrays *titulosCampos* e *numCampos* com os nomes e os números dos campos da *Tabela*."
		},
		"Get file from pasteboard": {
			"Syntax": "**Get file from pasteboard** ( *indiceN* ) : Text",
			"Params": [
				[
					"indiceN",
					"Integer",
					"->",
					"Arquivo N incluído na ação de arrastar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota do arquivo extraído da área de transferência"
				]
			],
			"Summary": "O comando Get file from pasteboard devolve a rota de acesso absoluto de um arquivo incluído em uma operação de arrastar e soltar."
		},
		"Get group access": {
			"Syntax": "**Get group access** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de nomes de grupos ao qual o usuário pertence"
				]
			],
			"Summary": "O comando **Get group access** devolve às filiações da conta de usuário 4D para a sessão atual."
		},
		"GET GROUP LIST": {
			"Syntax": "**GET GROUP LIST** ( *nomGrupos* ; *numGrupos* )",
			"Params": [
				[
					"nomGrupos",
					"Text array",
					"<-",
					"Nomes dos grupos como aparecem na janela de editor de senhas"
				],
				[
					"numGrupos",
					"Integer array",
					"<-",
					"Números de ID de grupo correspondentes"
				]
			],
			"Summary": "GET GROUP LIST preenche os arrays *nomGrupos e numGrupos* com os nomes e os números de referência únicos dos grupos tais como aparecem no editor de senhas."
		},
		"GET GROUP PROPERTIES": {
			"Syntax": "**GET GROUP PROPERTIES** ( *refGrupo* ; *nome* ; *proprietario* {; *membros*} )",
			"Params": [
				[
					"refGrupo",
					"Integer",
					"->",
					"Número de referencia ID de grupo"
				],
				[
					"nome",
					"Text",
					"<-",
					"Nome do grupo"
				],
				[
					"proprietario",
					"Integer",
					"<-",
					"Número de ID do proprietário do grupo"
				],
				[
					"membros",
					"Integer array",
					"<-",
					"Membros do grupo"
				]
			],
			"Summary": "GET GROUP PROPERTIES retorna as propriedades do grupo cujo número de referência único de ID de grupo pode passar em *GrupoID*."
		},
		"GET HIGHLIGHT": {
			"Syntax": "**GET HIGHLIGHT** ( {*Objeto* ;} *area* ; *inicioSel* ; *fimSel* )",
			"Params": [
				[
					"Objeto",
					"*",
					"->",
					"Se especificado, objeto é um nome de objeto (string=. Se omitido, objeto é um campo ou variável"
				],
				[
					"area",
					"Field, Variable, any",
					"->",
					"Nome de objeto (se * for especificado) ou Campo ou variável (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"<-",
					"Posição inicial da seleção atual de texto"
				],
				[
					"fimSel",
					"Integer",
					"<-",
					"Posição final da seleção atual de texto"
				]
			],
			"Summary": "O comando GET HIGHLIGHT permite determinar o texto selecionado atualmente em *objeto*."
		},
		"GET HIGHLIGHTED RECORDS": {
			"Syntax": "**GET HIGHLIGHTED RECORDS** ( {*tabela* ;} *nomConjunto* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual os registros selecionados serão lidos. Se omitido, a tabela do formulário atual"
				],
				[
					"nomConjunto",
					"Text",
					"->",
					"Conjunto onde os nomes selecionados serão armazenados"
				]
			],
			"Summary": "O comando GET HIGHLIGHTED RECORDS guarda, no conjunto designado pelo parâmetro *nomConjunto,* os registros selecionados (ou seja, os registros selecionados pelo usuário no formulário listado) da *tabela* passada como parâmetro."
		},
		"Get indexed string": {
			"Syntax": "**Get indexed string** ( *resID* ; *cadeiaNum* {; *resArquivo*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"Nº de recurso Id ou atributo \"id\" do elemento do \"grupo\" (XLIFF)"
				],
				[
					"cadeiaNum",
					"Integer",
					"->",
					"Nº de Cadeia ou atributo de \"id\" ou elemento de \"trans-unit\" (XLIFF)"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Arquivo de número de referencia de Resource se omitido: todos os arquivos XLIFF ou arquivos de resources abertos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor da cadeia indexada"
				]
			],
			"Summary": "das cadeias guardadas no recurso lista de cadeias (“STR#”) cujo número de identificação for passada em *resNum*."
		},
		"Get list item font": {
			"Syntax": "**Get list item font** ( {* ;} *lista* ; refElem | *  ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome de fonte"
				]
			],
			"Summary": "O comando Get list item font retorna o nome da fonte do caractere atual do elemento especificado pelo parâmetro *RefElem* da lista cujo número de referência o nome de objeto se passa em *lista*."
		},
		"GET LIST ITEM ICON": {
			"Syntax": "**GET LIST ITEM ICON** ( {* ;} *lista* ; refElem | * ; *icone* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"icone",
					"Picture",
					"<-",
					"Ícone associado ao elemento"
				]
			],
			"Summary": "O comando GET LIST ITEM ICON retorna, em *ícone*, o ícone associado ao elemento cujo número de referencia se passa em *refElem* da lista cujo número de referencia o nome de objeto passa em *lista*."
		},
		"GET LIST ITEM PARAMETER ARRAYS": {
			"Syntax": "**GET LIST ITEM PARAMETER ARRAYS** ( {* ;} *list* ; *refElemento* ; *arrSeletores* {; *arrValores*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificada, a lista é um nome de objeto (cadeia)<br/>Se for omitida, a lista é um número de referencia de lista"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"Número de referencia de lista ou<br/>Nome de objeto de tipo lista (se passado *)"
				],
				[
					"refElemento",
					"Integer, *",
					"->",
					"Número de referencia do elemento ou<br/>0 para o último elemento agregado à lista ou<br/>* para o elemento atual da lista"
				],
				[
					"arrSeletores",
					"Text array",
					"<-",
					"Array dos nomes dos parâmetros"
				],
				[
					"arrValores",
					"Text array",
					"<-",
					"Array dos valores dos parâmetros"
				]
			],
			"Summary": "O comando **GET LIST ITEM PARAMETER ARRAYS** permite recuperar somente em uma chamada o conjunto dos parâmetros (também como, opcionalmente, seus valores) associados ao elemento *refElemento* da lista hierárquica cuja referencia ou nome de objeto se passou no parâmetro *lista*."
		},
		"GET LIST ITEM PARAMETER": {
			"Syntax": "**GET LIST ITEM PARAMETER** ( {* ;} *lista* ; refElem | * ; *seletor* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"seletor",
					"Text",
					"->",
					"Constante do parâmetro"
				],
				[
					"valor",
					"Text, Boolean, Real",
					"<-",
					"Valor atual do parâmetro"
				]
			],
			"Summary": "O comandoGET LIST ITEM PARAMETER retorna o nome da fonte do caractere atual do elemento especificado pelo parâmetro *refElem* da lista cujo número de referência o nome de objeto se passa em *lista*."
		},
		"GET LIST ITEM PROPERTIES": {
			"Syntax": "**GET LIST ITEM PROPERTIES** ( {* ;} *lista* ; refElem | * ; *editavel* {; *estilos* {; *icone* {; *cor*}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"editavel",
					"Boolean",
					"<-",
					"TRUE = Editável, FALSE = Não editável"
				],
				[
					"estilos",
					"Integer",
					"<-",
					"Estilo de fonte do elemento"
				],
				[
					"icone",
					"Text, Integer",
					"<-",
					"Número de recurso Mac OS ‘cicn’, ou 65536 + número de recurso Mac OS ‘PICT’, ou 131072 + número de referência de imagem"
				],
				[
					"cor",
					"Integer",
					"<-",
					"Valor de cor RGB"
				]
			],
			"Summary": "O comando **GET LIST ITEM PROPERTIES** retorna o nome da fonte do caractere atual do elemento especificado pelo parâmetro *refElem* da lista cujo número de referência o nome de objeto se passa em *lista*."
		},
		"GET LIST ITEM": {
			"Syntax": "**GET LIST ITEM** ( {* ;} *lista* ; posiçaoElem | *  ; *refElem* ; *textoElem* {; *sublista* ; *expandida*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"posiçaoElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Posição do elemento em lista(s) expandida(s) ou contraída(s) * para o elemento atual da lista."
				],
				[
					"refElem",
					"Integer",
					"<-",
					"Número de referência do elemento"
				],
				[
					"textoElem",
					"Text",
					"<-",
					"Texto do elemento da lista"
				],
				[
					"sublista",
					"Integer",
					"<-",
					"Número de referência da sub-lista (se existe)"
				],
				[
					"expandida",
					"Boolean",
					"<-",
					"Se uma sub-lista está associada: TRUE = a sub-lista está expandida FALSE = a sub-lista está contraída"
				]
			],
			"Summary": "O comando GET LIST ITEM retorna a informação sobre o elemento especificado por *posiçaoElem* da lista cujo número de referencia ou nome de objeto se passa em *lista*."
		},
		"GET LIST PROPERTIES": {
			"Syntax": "**GET LIST PROPERTIES** ( *lista* ; *aparencia* {; *icone* {; *alturaLinha* {; *duploClique* {; *multiSeleçao* {; *editavel*}}}}} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"aparencia",
					"Integer",
					"<-",
					"Estilo gráfico da lista 1 = Lista hierárquica à Macintosh 2 = Lista hierárquica à Windows"
				],
				[
					"icone",
					"Integer",
					"<-",
					"Referência de recurso Mac OS ‘cicn’"
				],
				[
					"alturaLinha",
					"Integer",
					"<-",
					"Altura mínima de la linha expressada em pixels"
				],
				[
					"duploClique",
					"Integer",
					"<-",
					"Expandir/Contrair sub-lista com duplo-clique? 0 = Sim, 1= Não"
				],
				[
					"multiSeleçao",
					"Integer",
					"<-",
					"Seleções múltiplas: 0 = Não, 1 = Sim"
				],
				[
					"editavel",
					"Integer",
					"<-",
					"Lista editável pelo usuário: 0 = Não, 1 = Sim"
				]
			],
			"Summary": "O comando GET LIST PROPERTIES  retorna informação sobre a lista cujo número de referência se passa em *lista*."
		},
		"GET MACRO PARAMETER": {
			"Syntax": "**GET MACRO PARAMETER** ( *seletor* ; *paramTexto* )",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Seleção a usar"
				],
				[
					"paramText",
					"Text",
					"<-",
					"Texto retornado"
				]
			],
			"Summary": "O comando GET MACRO PARAMETER retorna, no parâmetro *paramText*, uma parte ou a totalidade do texto do método desde o qual é chamado."
		},
		"Get menu bar reference": {
			"Syntax": "**Get menu bar reference** {( *processo* )} : Text",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referência de menu"
				]
			],
			"Summary": "O comando **Get menu bar reference** devolve a identificação única da barra de menus atual ou da barra de menus de um processo específico."
		},
		"GET MENU ITEM ICON": {
			"Syntax": "**GET MENU ITEM ICON** ( *menu* ; *menuItem* ; *refIcone* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de menu de item ou -1 para o último item adicionado ao menu"
				],
				[
					"refIcone",
					"Text, Integer",
					"<-",
					"Nome ou número da imagem associada com o item de menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "O comando GET MENU ITEM ICON devolve, na variável *refIcone*, a referencia do ícone associado a linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"Get menu item key": {
			"Syntax": "**Get menu item key** ( *menu* ; *menuItem* {; *processo*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de Menu item ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de caractere da tecla de atalho padrão associada com o item de menu"
				]
			],
			"Summary": "O comando Get menu item key devolve o código do atalho **Ctrl** (Windows) ou **Comando** (macOS) para o comando de menu cujo número ou referência de menu se passa em *menu* e cujo número de comando se passa em *menuItem*."
		},
		"Get menu item mark": {
			"Syntax": "**Get menu item mark** ( *menu* ; *menuItem* {; *processo*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Item de menu atual marcado"
				]
			],
			"Summary": "O comando Get menu item mark devolve a marca da linha de menu cujo número ou referência de menu e número de linha se passam em *menu* e *menuItem*."
		},
		"Get menu item method": {
			"Syntax": "**Get menu item method** ( *menu* ; *menuItem* {; *processo*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de referência ou Número de Menu"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do método"
				]
			],
			"Summary": "O comando Get menu item method devolve o nome do método de projeto 4D associado a linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"Get menu item modifiers": {
			"Syntax": "**Get menu item modifiers** ( *menu* ; *menuItem* {; *processo*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de referência ou Número de Menu"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Chave de modificação associada com o item de menu"
				]
			],
			"Summary": "O comando Get menu item modifiers devolve os modificadores adicionais associados aos atalhos de teclado padrão da linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"Get menu item parameter": {
			"Syntax": "**Get menu item parameter** ( *menu* ; *menuItem* ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Parâmetro personalizado do item de menu"
				]
			],
			"Summary": "O comando Get menu item parameter devolve a cadeia de caracteres personalizada associada a linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"GET MENU ITEM PROPERTY": {
			"Syntax": "**GET MENU ITEM PROPERTY** ( *menu* ; *menuItem* ; *propriedade* ; *valor* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Tipo de propriedade"
				],
				[
					"valor",
					"any",
					"<-",
					"Valor da propriedade"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "O comandoGET MENU ITEM PROPERTY devolve, no parâmetro *valor*, o valor atual da linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"Get menu item style": {
			"Syntax": "**Get menu item style** ( *menu* ; *menuItem* {; *processo*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estilo do item de menu atual"
				]
			],
			"Summary": "O comando Get menu item style devolve o estilo de fonte da linha de menu cujo número ou referência se passa em *menu* e cujo número de elemento é passado em *menuItem*."
		},
		"Get menu item": {
			"Syntax": "**Get menu item** ( *menu* ; *menuItem* {; *processo*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto do item de menu"
				]
			],
			"Summary": "O comando Get menu item devolve o texto do comando de menu cujos números de menu e de comando são passados em *menu* e *menuItem*."
		},
		"GET MENU ITEMS": {
			"Syntax": "**GET MENU ITEMS** ( *menu* ; *arrayTitMenus* ; *arrayRefMenus* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"arrayTitMenus",
					"Text array",
					"<-",
					"Array de títulos de menu"
				],
				[
					"arrayRefMenus",
					"Text array",
					"<-",
					"Array de referências de menu"
				]
			],
			"Summary": "O comando GET MENU ITEMS devolve, nos arrays *arrayTitMenus* e *arraysRefMenus*, os títulos e identificadores de todas as linhas de menu ou da barra de menus designada pelo parâmetro *menu*."
		},
		"Get menu title": {
			"Syntax": "**Get menu title** ( *menu* {; *processo*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título do menu"
				]
			],
			"Summary": "O comando Get menu title devolve o título do menu cujo número ou referência é passada em *menu."
		},
		"GET MISSING TABLE NAMES": {
			"Syntax": "**GET MISSING TABLE NAMES** ( *tabelasNaoEncontradas* )",
			"Params": [
				[
					"tabelasNaoEncontradas",
					"Text array",
					"<-",
					"Nomes de tabelas não encontradas no banco de dados"
				]
			],
			"Summary": "O comando GET MISSING TABLE NAMES retorna os nomes de todas as tabelas faltantes do banco no array *tabelaNaoEncontrada*."
		},
		"GET PASTEBOARD DATA TYPE": {
			"Syntax": "**GET PASTEBOARD DATA TYPE** ( *assinaturas4D* ; *tiposNativos* {; *nomesFormatos*} )",
			"Params": [
				[
					"assinaturas4D",
					"Text array",
					"<-",
					"Assinaturas 4D de tipos de dados"
				],
				[
					"tiposNativos",
					"Text array",
					"<-",
					"Tipos de dados nativos"
				],
				[
					"nomesFormatos",
					"Text array",
					"<-",
					"Nomes de formato"
				]
			],
			"Summary": "O comando GET PASTEBOARD DATA TYPE permite obter a lista dos tipos de dados presentes na área de transferência."
		},
		"GET PASTEBOARD DATA": {
			"Syntax": "**GET PASTEBOARD DATA** ( *tipoDados* ; *dados* )",
			"Params": [
				[
					"tipoDados",
					"Text",
					"->",
					"Tipo de dados a adicionar"
				],
				[
					"dados",
					"Blob",
					"<-",
					"Dados extraídos da área de transferência"
				]
			],
			"Summary": "O comando GET PASTEBOARD DATA devolve no campo ou variável de tipo BLOB ou na variável *dados*, os dados que se encontram na área de transferência e cujo tipo se passa em *tipoDados*."
		},
		"Get picture file name": {
			"Syntax": "**Get picture file name** ( *imagem* ) : Text",
			"Params": [
				[
					"imagem",
					"Picture, Picture",
					"->",
					"Imagem para a qual obter o nome por defeito"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome por defeito do arquivo imagem"
				]
			],
			"Summary": "O comando **Get picture file name** retorna o nome atual por defeito como padrão da imagem passada como parâmetro."
		},
		"GET PICTURE FORMATS": {
			"Syntax": "**GET PICTURE FORMATS** ( *imagem* ; *codecID* )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem a analisar"
				],
				[
					"codecID",
					"Text array",
					"<-",
					"ID de codec de imagem"
				]
			],
			"Summary": "**Tema:** Imagens\n\nO comando **GET PICTURE FORMATS** devolve um array de todos os IDs codec contidos na *imagem* passada como parâmetro."
		},
		"GET PICTURE FROM LIBRARY": {
			"Syntax": "**GET PICTURE FROM LIBRARY** ( refImag | nomImag ; *imagem* )",
			"Params": [
				[
					"refImag &#124; nomImag",
					"Inteiro longo, String",
					"->",
					"Número de referência ou Nome da imagem da biblioteca de imagens"
				],
				[
					"imagem",
					"Picture",
					"<-",
					"Imagem da biblioteca de imagens"
				]
			],
			"Summary": "O comando GET PICTURE FROM LIBRARY devolve no parâmetro *imagem* a imagem da biblioteca de imagens cujo número de referência se passa em *refImag* ou cujo nome se passa em *nomImag*."
		},
		"GET PICTURE FROM PASTEBOARD": {
			"Syntax": "**GET PICTURE FROM PASTEBOARD** ( *imagem* )",
			"Params": [
				[
					"imagem",
					"Picture",
					"<-",
					"Imagem extraída da área de transferência"
				]
			],
			"Summary": "GET PICTURE FROM PASTEBOARD devolve a imagem presente na área de transferência no campo ou variável imagem *imagem*."
		},
		"GET PICTURE KEYWORDS": {
			"Syntax": "**GET PICTURE KEYWORDS** ( *imagem* ; *arrayPalavrasChaves* {; *} )",
			"Params": [
				[
					"imagem",
					"Picture, Picture",
					"->",
					"Imagem para à qual obter as palavras chaves associadas"
				],
				[
					"arrayPalavrasChaves",
					"Text array",
					"<-",
					"Array com as palavras chaves extraídas"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = usar valores diferentes"
				]
			],
			"Summary": "O comando **GET PICTURE KEYWORDS** devolve no array *arrayPalavrasChaves*, a lista de palavras-chaves associadas à imagem passada como parâmetro."
		},
		"GET PICTURE METADATA": {
			"Syntax": "**GET PICTURE METADATA** ( *imagem* ; *nomeMeta* ; *conteudoMeta* {; *nomeMeta2* ; *conteudoMeta2* ; ... ; *nomeMetaN* ; *conteudoMetaN*} )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem cujos metadados você deseja conseguir"
				],
				[
					"nomeMeta",
					"Text",
					"->",
					"Nome ou caminho do bloco a ser lido"
				],
				[
					"conteudoMeta",
					"Variable",
					"<-",
					"Conteúdo do Metadado"
				]
			],
			"Summary": "O comando **GET PICTURE METADATA** permite ler o conteúdo dos metadados (ou meta-tags) presentes em *imagem* (campo ou variável imagem 4D)."
		},
		"GET PICTURE RESOURCE": {
			"Syntax": "**GET PICTURE RESOURCE** ( *resNum* ; *resDados* {; *resArquivo*} )",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número de Resource"
				],
				[
					"resDados",
					"Field, Variable",
					"->",
					"Campo imagem ou variável a receber a imagem"
				],
				[
					"<-",
					"Conteúdos do recurso PICT"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo de Resource ou arquivo de resource atual se omitido"
				]
			],
			"Summary": "O comando GET PICTURE RESOURCE retorna no campo ou na variável *resDados* a imagem guardada no recurso imagem (“PICT”) cujo número se passa em *resNum*."
		},
		"Get plugin access": {
			"Syntax": "**Get plugin access** ( *plugIn* ) : Text",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"Número de plug-in"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do grupo associado ao plug-in"
				]
			],
			"Summary": "O comando Get plugin access retorna o nome do grupo de usuários autorizados a utilizar o *plug-in* cujo número se passa no parâmetro *plugIn*."
		},
		"Get pointer": {
			"Syntax": "**Get pointer** ( *nomeVar* ) : Pointer",
			"Params": [
				[
					"nomeVar",
					"Text",
					"->",
					"Nome da variável processo ou interprocesso"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro a variável processo ou interprocesso"
				]
			],
			"Summary": "O comando **Get pointer** devolve um ponteiro até uma variável processo ou interprocesso cujo nome se passa em *nomVar*."
		},
		"Get print marker": {
			"Syntax": "**Get print marker** ( *numeroMarc* ) : Integer",
			"Params": [
				[
					"numeroMarc",
					"Integer",
					"->",
					"Número de marcador"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posição do marcador"
				]
			],
			"Summary": "O comando Get print marker permite obter a posição atual de um marcador durante uma impressão."
		},
		"GET PRINT OPTION": {
			"Syntax": "**GET PRINT OPTION** ( *opção* ; *valor1* {; *valor2*} )",
			"Params": [
				[
					"opção",
					"Integer",
					"->",
					"Número de opção ou código de opção PDF"
				],
				[
					"valor1",
					"Integer, Text",
					"<-",
					"Valor 1 da opção"
				],
				[
					"valor2",
					"Integer, Text",
					"<-",
					"Valor 2 da opção"
				]
			],
			"Summary": "O comando **GET PRINT OPTION** devolve os valores atuais de uma opção de impressão."
		},
		"Get print preview": {
			"Syntax": "**Get print preview**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Vista previa de impressão, <br/>False = Não vista previa de impressão"
				]
			],
			"Summary": "O comando **Get print preview** devolve True se o comando SET PRINT PREVIEW foi chamado com o valor **True** no processo atual."
		},
		"GET PRINTABLE AREA": {
			"Syntax": "**GET PRINTABLE AREA** ( *altura* {; *largura*} )",
			"Params": [
				[
					"altura",
					"Integer",
					"<-",
					"Altura da área de impressão"
				],
				[
					"largura",
					"Integer",
					"<-",
					"Largura da área de impressão"
				]
			],
			"Summary": "O comando GET PRINTABLE AREA devolve o tamanho em píxels da área de impressão nos parâmetros *altura* e *largura* ou tamanho."
		},
		"GET PRINTABLE MARGIN": {
			"Syntax": "**GET PRINTABLE MARGIN** ( *esquerda* ; *superior* ; *direita* ; *inferior* )",
			"Params": [
				[
					"esquerda",
					"Integer",
					"<-",
					"Margem esquerda"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Margem superior"
				],
				[
					"direita",
					"Integer",
					"<-",
					"Margem direita"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Margem inferior"
				]
			],
			"Summary": "O comando GET PRINTABLE MARGIN devolve os valores atuais das diferentes margens definidas utilizando o comando Print form PRINT SELECTION e PRINT RECORD."
		},
		"Get printed height": {
			"Syntax": "**Get printed height**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Posição do marcador"
				]
			],
			"Summary": "O comando Get printed height devolve a altura global (em píxels) da seção impressa pelo comando Print form."
		},
		"GET PROCESS VARIABLE": {
			"Syntax": "**GET PROCESS VARIABLE** ( *processo* ; *srcVar* ; *dstVar* {; *srcVar2* ; *dstVar2* ; ... ; *srcVarN* ; *dstVarN*} )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo da fonte"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"Variável fonte"
				],
				[
					"dstVar",
					"Variable",
					"<-",
					"Variável destino"
				]
			],
			"Summary": "O comando GET PROCESS VARIABLE lê o valor de as variáveis processo *srcVar* (*srvVar2*, etc.) desde o processo fonte cujo número se passa em *processo* e devolve seus valores atuais nas variáveis *dstVar* (*dstVar2*, etc.) do processo atual."
		},
		"GET QUERY DESTINATION": {
			"Syntax": "**GET QUERY DESTINATION** ( *destinoTipo* ; *destinoObjeto* ; *destinoPont* )",
			"Params": [
				[
					"destinoTipo",
					"Integer",
					"<-",
					"0=seleção atual, 1=conjunto, 2=seleção temporal, 3=variável"
				],
				[
					"destinoObjeto",
					"Text",
					"<-",
					"Nome do conjunto ou Nome da seleção temporal ou Cadeia vazia"
				],
				[
					"destinoPont",
					"Pointer",
					"<-",
					"Ponteiro à variável local se destinoTipo=3"
				]
			],
			"Summary": "O comando **GET QUERY DESTINATION** devolve o destino atual dos resultados das pesquisas para o processo em curso."
		},
		"Get query limit": {
			"Syntax": "**Get query limit** : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número limite de registros,0 = número ilimitado"
				]
			],
			"Summary": "O comando **Get query limit** devolve o limite do número de registros que uma pesquisa pode encontrar no processo atual."
		},
		"GET REGISTERED CLIENTS": {
			"Syntax": "**GET REGISTERED CLIENTS** ( *listaClientes* ; *metodos* )",
			"Params": [
				[
					"listaClientes",
					"Text array",
					"<-",
					"Lista dos clientes 4D registrados"
				],
				[
					"metodos",
					"Integer array",
					"<-",
					"Lista de métodos a executar"
				]
			],
			"Summary": "O comando GET REGISTERED CLIENTS preenche dois arrays"
		},
		"GET RELATION PROPERTIES": {
			"Syntax": "**GET RELATION PROPERTIES** ( *pontCampo* ; *tabelaUm* ; *numCampo* {; *discriminante* {; *autoUm* {; *autoMuitos*}}} )<br/>**GET RELATION PROPERTIES** ( *numTabela* ; *numCampo* ; *tabelaUm* ; *campoUmo* {; *discriminante* {; *autoUm* {; *autoMuitos*}}} )",
			"Params": [
				[
					"pontCampo&#124;numTabela",
					"Ponteiro, Inteiro longo",
					"->",
					"Ponteiro de campo ou número da tabela"
				],
				[
					"numCampo",
					"Integer",
					"->",
					"Número de campo se o número da tabela for passado como primeiro parâmetro"
				],
				[
					"tabelaUm",
					"Integer",
					"<-",
					"Nº de tabela ou 0 se nenhuma relação tiver sido definido para o campo"
				],
				[
					"campoUmo",
					"Integer",
					"<-",
					"Número de campo ou 0 se nenhuma relação for definida para o campo."
				],
				[
					"discriminante",
					"Integer",
					"<-",
					"Número de campo discriminante ou 0 se nenhum campo"
				],
				[
					"autoUm",
					"Boolean",
					"<-",
					"True = relação Um automática, False = Relação Um manual"
				],
				[
					"autoMuitos",
					"Boolean",
					"<-",
					"True = relação Um para Muitos automática, False = Relação Um para Muitos manual"
				]
			],
			"Summary": "O comando GET RELATION PROPERTIES retorna as propriedades da relação (se houver) que começa do campo fonte definido por *numTabela* e *numCamp*o ou por *pontCampo*."
		},
		"Get resource name": {
			"Syntax": "**Get resource name** ( *resTipo* ; *resNum* {; *resArquivo*} ) : Text",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"tipo de resource de 4 caracteres"
				],
				[
					"resNum",
					"Integer",
					"->",
					"Número resource"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do recurso"
				]
			],
			"Summary": "O comando Get resource name retorna o nome do recurso cujo tipo se passa em *resTipo* e cujo número de referência (ID) em *resNum*."
		},
		"Get resource properties": {
			"Syntax": "**Get resource properties** ( *resTipo* ; *resNum* {; *resArquivo*} ) : Integer",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"tipo de resource de 4 caracteres"
				],
				[
					"resNum",
					"Integer",
					"->",
					"Número do resource"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Atributos dos resources"
				]
			],
			"Summary": "O comando **Get resource properties** retorna os atributos do recurso cujo tipo se passa em *resTipo* e cujo número de identificação se passa em *resNum*."
		},
		"GET RESOURCE": {
			"Syntax": "**GET RESOURCE** ( *resTipo* ; *resNum* ; *resDados* {; *resArquivo*} )",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"tipo de resource de 4 caracteres"
				],
				[
					"resNum",
					"Integer",
					"->",
					"Número do recurso"
				],
				[
					"resDados",
					"Blob",
					"->",
					"Campo BLOB ou variável para receber os dados"
				],
				[
					"<-",
					"Conteúdos do resource"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				]
			],
			"Summary": "o comando GET RESOURCE retorna no campo o a variável BLOB *resDados* o conteúdo do recurso cujo tipo e número se passa em *resTipo* e *resNum*."
		},
		"Get selected menu item parameter": {
			"Syntax": "**Get selected menu item parameter**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Parâmetro personalizado do item de menu"
				]
			],
			"Summary": "O comando Get selected menu item parameter devolve a cadeia de caracteres personalizada associada a linha de menu selecionada."
		},
		"GET SERIAL PORT MAPPING": {
			"Syntax": "**GET SERIAL PORT MAPPING** ( *numArray* ; *arrayNome* )",
			"Params": [
				[
					"numArray",
					"Integer array",
					"<-",
					"Array de número de portas"
				],
				[
					"arrayNome",
					"Text array",
					"<-",
					"Array de nomes de portas"
				]
			],
			"Summary": "O comando GET SERIAL PORT MAPPING retorna dois arrays, *numArray* e *nomeArray*, contendo os números de porta serial e os nomes porta serial da máquina atual."
		},
		"Get string resource": {
			"Syntax": "**Get string resource** ( *resNum* {; *resArquivo*} ) : Text",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número do resource"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Conteúdos do resource STR"
				]
			],
			"Summary": "o comando Get string resource retorna a string armazenada no recurso string (“STR ”) cujo número de referência se passa em *resNum*."
		},
		"GET STYLE SHEET INFO": {
			"Syntax": "**GET STYLE SHEET INFO** ( *nomeFolhaEstilo* ; *fonte* ; *tam* ; *estilos* )",
			"Params": [
				[
					"nomeFolhaEstilo",
					"Text",
					"->",
					"Nome da folha de estilo"
				],
				[
					"fonte",
					"Text",
					"<-",
					"Tipo de fonte"
				],
				[
					"tam",
					"Integer",
					"<-",
					"Tamanho de fonte"
				],
				[
					"estilos",
					"Integer",
					"<-",
					"Valor do estilo"
				]
			],
			"Summary": "O comando **GET STYLE SHEET INFO** devolve a configuração atual da folha de estilo *nomeFolhaEstilo* ."
		},
		"Get subrecord key": {
			"Syntax": "**Get subrecord key** ( *idField* ) : Integer",
			"Params": [
				[
					"idField",
					"Field",
					"->",
					"\"Subtable Relation\" or \"Longint\" type field of a former subtable relation"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Internal key of relation"
				]
			],
			"Summary": "El comando Get subrecord key facilita la migración del código 4D utilizando subtablas convertidas al código estándar de manipulación de tablas."
		},
		"GET SYSTEM FORMAT": {
			"Syntax": "**GET SYSTEM FORMAT** ( *formato* ; *valor* )",
			"Params": [
				[
					"formato",
					"Integer",
					"->",
					"Formato de sistema a recuperar"
				],
				[
					"valor",
					"Text",
					"<-",
					"Formato de sistema a recuperar"
				]
			],
			"Summary": "O comando GET SYSTEM FORMAT devolve o valor atual de vários parâmetros regionais definidos no sistema operativo."
		},
		"GET TABLE PROPERTIES": {
			"Syntax": "**GET TABLE PROPERTIES** ( *ponTabela* ; *invisible* {; *trigSalvarNovo* {; *trigSalvarRegistro* {; *trigApagarRegistro* {; *trigCarregarRegistro*}}}} )<br/>**GET TABLE PROPERTIES** ( *NumTabela* ; *invisible* {; *trigSalvarNovo* {; *trigSalvarRegistro* {; *trigApagarRegistro* {; *trigCarregarRegistro*}}}} )",
			"Params": [
				[
					"ponTabela&#124;NumTabela",
					"Ponteiro, Inteiro longo",
					"->",
					"Ponteiro de tabela ou número de tabela"
				],
				[
					"invisivel",
					"Boolean",
					"<-",
					"True = invisível, False = visível"
				],
				[
					"trigSalvarNovo",
					"Boolean",
					"<-",
					"True = Trigger \"On saving new record\" ativado; senão, False"
				],
				[
					"trigSalvarRegistro",
					"Boolean",
					"<-",
					"True = Trigger \"On saving an existing record\" ativado; senão, False"
				],
				[
					"trigApagarRegistro",
					"Boolean",
					"<-",
					"True = Trigger \"On deleting a record\" ativado; senão, False"
				],
				[
					"trigCarregarRegistro",
					"Boolean",
					"<-",
					"*** Não usar (obsoleto) ***"
				]
			],
			"Summary": "O comando GET TABLE PROPERTIES retorna as propriedades da tabela passada por *pontTabela* ou *numTabela*."
		},
		"GET TABLE TITLES": {
			"Syntax": "**GET TABLE TITLES** ( *tituloTabelas* ; *numTabelas* )",
			"Params": [
				[
					"tituloTabelas",
					"Text array",
					"<-",
					"Nomes atuais das tabelas"
				],
				[
					"numTabelas",
					"Integer array",
					"<-",
					"Números das tabelas"
				]
			],
			"Summary": "O comando GET TABLE TITLES preenche os arrays *tituloTabelas* e *numTabelas* com os nomes e números das tabelas da banco definidas na janela de estrutura ou através do comando SET TABLE TITLES."
		},
		"Get text from pasteboard": {
			"Syntax": "**Get text from pasteboard**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Retorna o texto (se houver) presente na área de transferência"
				]
			],
			"Summary": "Get text from pasteboard devolve o texto na área de transferência."
		},
		"GET TEXT KEYWORDS": {
			"Syntax": "**GET TEXT KEYWORDS** ( *texto* ; *arrPalavrasChaves* {; *} )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto original"
				],
				[
					"arrPalavrasChaves",
					"Text array",
					"<-",
					"Array que contém as palavras-chave"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = palavras únicas"
				]
			],
			"Summary": "O comando **GET TEXT KEYWORDS** divide todo o *texto* em palavras individuais e cria, para cada palavra obtida, um elemento no array texto *arrPalavrasChaves* para cada palavra."
		},
		"Get text resource": {
			"Syntax": "**Get text resource** ( *resNum* {; *resArquivo*} ) : Text",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número de resource"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Conteúdos do resource TEXT"
				]
			],
			"Summary": "O comando Get text resource retorna o texto guardado no recurso texto (“TEXT”) cujo número de identificação é passado em *resNum*."
		},
		"GET USER LIST": {
			"Syntax": "**GET USER LIST** ( *nomUsuarios* ; *numUsuarios* )",
			"Params": [
				[
					"nomUsuarios",
					"Text array",
					"<-",
					"Nomes dos usuários como aparecem na janela de editor de senhas"
				],
				[
					"numUsuarios",
					"Integer array",
					"<-",
					"Números correspondentes de referências dos usuários"
				]
			],
			"Summary": "GET USER LIST preenche os arrays *nomUsuario* e *numUsuario* com os nomes e os números de referência únicos dos usuários tais como aparecem na janela de senhas."
		},
		"GET USER PROPERTIES": {
			"Syntax": "**GET USER PROPERTIES** ( *refUsuario* ; *nome* ; *inicio* ; *senha* ; *numLogin* ; *ultLogin* {; *adesao* {; *propGrupo*}} )",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Nº de referência de usuário"
				],
				[
					"nome",
					"Text",
					"<-",
					"Nome de usuário"
				],
				[
					"inicio",
					"Text",
					"<-",
					"Nome de método de início"
				],
				[
					"senha",
					"Text",
					"<-",
					"Sempre é uma cadeia vazia"
				],
				[
					"numLogin",
					"Integer",
					"<-",
					"Número de logins para o banco de dados"
				],
				[
					"ultLogin",
					"Date",
					"<-",
					"Data do último login ao banco de dados"
				],
				[
					"adesao",
					"Integer array",
					"<-",
					"Número de ID dos grupos ao qual o usuário pertence"
				],
				[
					"propGrupo",
					"Integer",
					"<-",
					"Número de ID do proprietário do grupo"
				]
			],
			"Summary": "GET USER PROPERTIES retorna a informação sobre o usuário cujo número de referência se passa no parâmetro *refUsuario*."
		},
		"GET WINDOW RECT": {
			"Syntax": "**GET WINDOW RECT** ( *esquerda* ; *superior* ; *direita* ; *inferior* {; *janela*} )",
			"Params": [
				[
					"esquerda",
					"Integer",
					"<-",
					"Coordenada esquerda da área de conteúdo da janela"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenada superior da área de conteúdo da janela"
				],
				[
					"direita",
					"Integer",
					"<-",
					"Coordenada direita da área de conteúdo da janela"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenada inferior da área de conteúdo da janela"
				],
				[
					"janela",
					"Integer",
					"->",
					"Número de referência de janela; ou janela do primeiro plano do processo atual, se omitido; ou janela MDI se for -1 (Windows)"
				]
			],
			"Summary": "O comando GET WINDOW RECT devolve as coordenadas globais da janela cujo número de referência se passa em janela."
		},
		"Get window title": {
			"Syntax": "**Get window title** {( *janela* )} : Text",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título da janela"
				]
			],
			"Summary": "O comando Get window title devolve o título da janela cujo número de referência se passa em *janela*."
		},
		"GOTO OBJECT": {
			"Syntax": "**GOTO OBJECT** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado = objeto é um nome de objeto (string). Se omitido = objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"Field, Variable",
					"->",
					"Nome de objeto (se * for especificado) ou Campo ou Variável (se * for omitido) ao que se vai"
				]
			],
			"Summary": "O comando GOTO OBJECT é utilizado para selecionar o objeto editável *objeto* como a área ativa do formulário."
		},
		"GOTO RECORD": {
			"Syntax": "**GOTO RECORD** ( {*tabela* ;} *registro* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual ir ao registro, ou tabela padrão, se omitido"
				],
				[
					"registro",
					"Integer",
					"->",
					"Número retornado pelo número de Registro"
				]
			]
		},
		"GOTO SELECTED RECORD": {
			"Syntax": "**GOTO SELECTED RECORD** ( {*tabela* ;} *posicao* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual ir ao registro selecionado ou Tabela por padrão, se omitida"
				],
				[
					"posicao",
					"Integer",
					"->",
					"Posição do registro na seleção"
				]
			],
			"Summary": "GOTO SELECTED RECORD move o registro especificado na seleção atual de *tabela* o registro atual."
		},
		"GOTO XY": {
			"Syntax": "**GOTO XY** ( *x* ; *y* )",
			"Params": [
				[
					"x",
					"Integer",
					"->",
					"posição x (horizontal) do cursor"
				],
				[
					"y",
					"Integer",
					"->",
					"posição y (vertical) do cursor"
				]
			],
			"Summary": "O comando GOTO XY se utiliza conjuntamente com o comando MESSAGE quando mostra mensagens em uma janela aberta pelo comando Open window."
		},
		"GRAPH SETTINGS": {
			"Syntax": "**GRAPH SETTINGS** ( *graf* ; *xmin* ; *xmax* ; *ymin* ; *ymax* ; *xprop* ; *xgrid* ; *ygrid* ; *titulo* {; *titulo2* ; ... ; *tituloN*} )",
			"Params": [
				[
					"graf",
					"Picture",
					"->",
					"Área da gráfica ou da variável imagem"
				],
				[
					"xmin",
					"Integer, Date, Time",
					"->",
					"Valor mínimo do eixo das x para gráfico proporcional (linhas ou pontos somente)"
				],
				[
					"xmax",
					"Integer, Date, Time",
					"->",
					"Valor máximo do eixo das x para gráfico proporcional (linhas ou pontos somente)"
				],
				[
					"ymin",
					"Integer",
					"->",
					"Valor mínimo do eixo y"
				],
				[
					"ymax",
					"Integer",
					"->",
					"Valor máximo do eixo y"
				],
				[
					"xprop",
					"Boolean",
					"->",
					"TRUE para eixo x proporcional; FALSE para eixo x normal (linhas ou pontos somente)"
				],
				[
					"xgrid",
					"Boolean",
					"->",
					"TRUE para grade eixo x; FALSE para não grade no eixo x (somente se xprop é TRUE)"
				],
				[
					"ygrid",
					"Boolean",
					"->",
					"TRUE para a grade do eixo y; FALSE para as grades que não forem do eixo y"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título para a legenda do gráfico"
				]
			],
			"Summary": "GRAPH SETTINGS permite modificar os parâmetros dos gráficos mostrados em um formulário."
		},
		"GRAPH": {
			"Syntax": "**GRAPH** ( *grafArea* ; *grafNum* ; *xCategorias* {; *yValores*} {; *yValores2* ; ... ; *yValoresN*} )",
			"Params": [
				[
					"grafArea",
					"Picture",
					"->",
					"Area do gráfico ou variável da imagem"
				],
				[
					"grafNum",
					"Integer, Object",
					"->",
					"Número do tipo do gráfico"
				],
				[
					"xCategorias",
					"Array",
					"->",
					"Rótulos para o eixo x"
				],
				[
					"yValores",
					"Array",
					"->",
					"Dados para gráfico (até oito permitido)"
				]
			],
			"Summary": "O comando **GRAPH** cria um gráfico em uma área de gráfico ou uma variável imagem localizada em um formulário a partir dos valores provenientes dos arrays."
		},
		"HIDE MENU BAR": {
			"Syntax": "**HIDE MENU BAR**",
			"Params": [],
			"Summary": "O comando HIDE MENU BAR torna invisível a barra de menus."
		},
		"HIDE PROCESS": {
			"Syntax": "**HIDE PROCESS** ( *processo* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo ou processo a ocultar"
				]
			],
			"Summary": "HIDE PROCESS oculta todas as janelas que pertencem ao *processo*."
		},
		"HIDE TOOL BAR": {
			"Syntax": "**HIDE TOOL BAR**",
			"Params": [],
			"Summary": "O comando HIDE TOOL BAR  gerencia a visualização das barras de ferramentas personalizadas criadas pelo comando Open form window para o processo atual."
		},
		"HIDE WINDOW": {
			"Syntax": "**HIDE WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela ou processo atual da janela de primeiro plano, se omitido"
				]
			],
			"Summary": "O comando HIDE WINDOW permite ocultar a janela cujo número de referência se passa em *janela* ou, se for omitido este parâmetro, a janela do primeiro plano do processo atual."
		},
		"HIGHLIGHT RECORDS": {
			"Syntax": "**HIGHLIGHT RECORDS** ( {*tabela* }{;}{ *nomConjunto* {; *}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela cujos registros foram selecionados se omitidos, tabela do formulário atual"
				],
				[
					"nomConjunto",
					"Text",
					"->",
					"Conjunto de registros a selecionar ou Userset se omitido"
				],
				[
					"*",
					"Operador",
					"->",
					"Desativar a barra de rolagem automático da lista"
				]
			],
			"Summary": "O comando HIGHLIGHT RECORDS permite selecionar registros em um formulário listado."
		},
		"HIGHLIGHT TEXT": {
			"Syntax": "**HIGHLIGHT TEXT** ( {* ;} *area* ; *inicioSel* ; *fimSel* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é um campo ou variável."
				],
				[
					"area",
					"Field, Variable, any",
					"->",
					"Nome de objeto (se * for especificado), ou campo editável ou variável (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Posição inicial da seleção de texto"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Posição final da seleção de texto"
				]
			],
			"Summary": "O comando HIGHLIGHT TEXT seleciona uma parte de texto em *objeto*."
		},
		"HTTP AUTHENTICATE": {
			"Syntax": "**HTTP AUTHENTICATE** ( *nome* ; *senha* {; *metodoAut*} {; *} )",
			"Params": [
				[
					"nome",
					"Text",
					"->",
					"Nome de usuário"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha de usuário"
				],
				[
					"metodoAut",
					"Integer",
					"->",
					"Método de autenticação: 0 ou se omite = não definido, 1 = BASIC, 2 = DIGEST"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: autenticação por proxy"
				]
			],
			"Summary": "O comando **HTTP AUTHENTICATE** permite fazer petições HTTP aos servidores que necessitam a autenticação da aplicação cliente."
		},
		"HTTP Get certificates folder": {
			"Syntax": "**HTTP Get certificates folder**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Rota completa da pasta de certificados ativa"
				]
			],
			"Summary": "O comando **HTTP Get certificates folder** devolve a rota completa da pasta de certificados ativa do cliente."
		},
		"HTTP GET OPTION": {
			"Syntax": "**HTTP GET OPTION** ( *opção* ; *valor* )",
			"Params": [
				[
					"opção",
					"Integer",
					"->",
					"Código da opção a ler"
				],
				[
					"valor",
					"Integer",
					"<-",
					"Valor atual da opção"
				]
			],
			"Summary": "O comando **HTTP GET OPTION** devolve o valor atual das opções HTTP (opções utilizadas pelo cliente para a próxima solicitação provocada pelo comando HTTP Get ou HTTP Request)."
		},
		"HTTP Get": {
			"Syntax": "**HTTP Get** ( *url* ; *resposta* {; *nomesCab* ; *valoresCab*}{; *} ) : Integer",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"URL ao qual enviar o pedido"
				],
				[
					"resposta",
					"Text, Blob, Picture, Object",
					"<-",
					"Resposta da solicitação"
				],
				[
					"nomesCab",
					"Text array",
					"->",
					"Nomes dos cabeçalhos da solicitação"
				],
				[
					"<-",
					"Nomes dos cabeçalhos devolvidos"
				],
				[
					"valoresCab",
					"Text array",
					"->",
					"Valores dos cabeçalhos da solicitação"
				],
				[
					"<-",
					"Valores dos cabeçalhos devolvidos"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado, a conexão se mantém (keep-alive)Se omitida,a conexão é fechada automaticamente"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de estado HTTP"
				]
			],
			"Summary": "O comando **HTTP Get** envia diretamente um pedido HTTP GET a um URL específico e processa a resposta do servidor HTTP."
		},
		"HTTP Request": {
			"Syntax": "**HTTP Request** ( *metodoHTTP* ; *url* ; *conteúdo* ; *resultado* {; *nomCab* ; *valCab*}{; *} ) : Integer",
			"Params": [
				[
					"metodoHTTP",
					"Text",
					"->",
					"Método HTTP para a solicitação"
				],
				[
					"url",
					"Text",
					"->",
					"URL à qual enviar a solicitação"
				],
				[
					"conteúdo",
					"Text, Blob, Picture, Object",
					"->",
					"Conteúdo do corpo(body)da solicitação"
				],
				[
					"resultado",
					"Text, Blob, Picture, Object",
					"<-",
					"Resultado da solicitação"
				],
				[
					"nomCab",
					"Text array",
					"->",
					"Nomes dos cabeçalhos da solicitação"
				],
				[
					"<-",
					"Nomes dos cabeçalhos devolvidos"
				],
				[
					"valCab",
					"Text array",
					"->",
					"Valores dos cabeçalhos da solicitação"
				],
				[
					"<-",
					"Valores dos cabeçalhos devolvidos"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passada, a conexão se mantém (keep-alive)Se omitida, a conexão é fechada automaticamente."
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de estado HTTP"
				]
			],
			"Summary": "O comando **HTTP Request** permite enviar todo tipo de petição HTTP a um URL específico e processar a resposta do servidor HTTP."
		},
		"HTTP SET CERTIFICATES FOLDER": {
			"Syntax": "**HTTP SET CERTIFICATES FOLDER** ( *pastaCertificados* )",
			"Params": [
				[
					"pastaCertificados",
					"Text",
					"->",
					"Caminho e nome da pasta de certificados do cliente"
				]
			],
			"Summary": "O comando **HTTP SET CERTIFICATES FOLDER** permite modificar a pasta de certificados cliente ativa para o conjunto dos processos na sessão atual."
		},
		"HTTP SET OPTION": {
			"Syntax": "**HTTP SET OPTION** ( *opção* ; *valor* )",
			"Params": [
				[
					"opção",
					"Integer",
					"->",
					"Código da opção a definir"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor da opção"
				]
			],
			"Summary": "O comando **HTTP SET OPTION** permite definir diferentes opções utilizadas durante a próxima solicitação disparada pelos comandos HTTP Get ou HTTP Request."
		},
		"IDLE": {
			"Syntax": "**IDLE**",
			"Params": [],
			"Summary": "O comando IDLE está desenhado para ser utilizado unicamente com o compilador."
		},
		"IMPORT DATA": {
			"Syntax": "**IMPORT DATA** ( *nomeArquivo* {; *projeto* {; *}} )",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Rota de acesso do arquivo importado"
				],
				[
					"projeto",
					"Text, Blob",
					"->",
					"Conteúdo do projeto importado"
				],
				[
					"<-",
					"Novos conteúdos do projeto importado (se o parâmetro * foi passado)"
				],
				[
					"*",
					"Operador",
					"->",
					"Exibir a caixa de diálogo importada e atualiza o projeto"
				]
			],
			"Summary": "O comando IMPORT DATA importa os dados localizados no arquivo *nomeArquivo* 4D pode importar os dados nos seguintes formatos: Texto, Texto de longitude fixa, XML, SYLK, DIF, DBF (dBase) e 4D."
		},
		"IMPORT DIF": {
			"Syntax": "**IMPORT DIF** ( {*tabela* ;} *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual se importarão os dados, ou a tabela Padrão, se omitido"
				],
				[
					"documento",
					"Text",
					"->",
					"documento DIF a importar"
				]
			],
			"Summary": "O comando IMPORT DIF lê dados de *documento*, um documento DIF Windows ou Macintosh e os escreve em *tabela* criando novos registros para essa tabela."
		},
		"IMPORT STRUCTURE": {
			"Syntax": "**IMPORT STRUCTURE** ( *estruturaXML* )",
			"Params": [
				[
					"estruturaXML",
					"Text",
					"->",
					"Definição XML da estrutura da base 4D"
				]
			],
			"Summary": "O comando **IMPORT STRUCTURE** importa, na base atual, a definição XML da estrutura da base 4D passada no parâmetro *estruturaXML*."
		},
		"IMPORT SYLK": {
			"Syntax": "**IMPORT SYLK** ( {*tabela* ;} *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai importar dados, ou tabela Padrão, se omitido"
				],
				[
					"documento",
					"Text",
					"->",
					"documento SYLK do qual vai importar dados"
				]
			],
			"Summary": "O comando IMPORT SYLK lê dados de *documento*, um documento SYLK Windows ou Macintosh e os escreve em *tabela* criando novos registros para essa tabela."
		},
		"IMPORT TEXT": {
			"Syntax": "**IMPORT TEXT** ( {*tabela* ;} *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual se importará os dados, ou tabela Padrão, se omitido"
				],
				[
					"documento",
					"Text",
					"->",
					"Documento texto do qual se importará os dados"
				]
			],
			"Summary": "O comando IMPORT TEXT lê dados de *documento*, um documento texto Windows ou Macintosh e os escreve em *tabela* criando novos registros para essa tabela."
		},
		"In break": {
			"Syntax": "**In break**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução é In break"
				]
			],
			"Summary": "**In break** devolve True para o ciclo de execução In break."
		},
		"In footer": {
			"Syntax": "**In footer**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução é In footer"
				]
			],
			"Summary": "**In footer** devolve True para o ciclo de execução In footer."
		},
		"In header": {
			"Syntax": "**In header**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução é In header"
				]
			],
			"Summary": "**In header** devolve True para o ciclo de execução In header."
		},
		"In transaction": {
			"Syntax": "**In transaction**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Retorna TRUE se processo atual estiver na transação"
				]
			],
			"Summary": "O comando In transaction retorna **TRUE** se o processo atual estiver na transação, senão, retorna **FALSE**."
		},
		"INSERT IN ARRAY": {
			"Syntax": "**INSERT IN ARRAY** ( *array* ; *onde* {; *quantos*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Nome do array"
				],
				[
					"onde",
					"Integer",
					"->",
					"Onde inserir os elementos"
				],
				[
					"quantos",
					"Integer",
					"->",
					"Número de elementos a serem inseridos, ou 1 elemento se omitido"
				]
			],
			"Summary": "O comando INSERT IN ARRAY insere um ou mais elementos no *array*."
		},
		"INSERT IN BLOB": {
			"Syntax": "**INSERT IN BLOB** ( *BLOB* ; *offset* ; *len* {; *filler*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB no qual inserir os bytes"
				],
				[
					"offset",
					"Integer",
					"->",
					"Posição de início de inserção dos bytes"
				],
				[
					"len",
					"Integer",
					"->",
					"Número de bytes a ser inserido"
				],
				[
					"filler",
					"Integer",
					"->",
					"Valor de byte padrão (0x00..0xFF) 0x00 se omitido"
				]
			],
			"Summary": "O comando INSERT IN BLOB insere o número de bytes especificado por *len* no BLOB *blob* na posição especificada pelo deslocamento."
		},
		"INSERT IN LIST": {
			"Syntax": "**INSERT IN LIST** ( {* ;} *lista* ; antesElem | *  ; *textoElem* ; *refElem* {; *sublista* ; *expandida*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"antesElem &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Texto para o novo elemento (max. 255 caracteres)"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referencia único do novo elemento"
				],
				[
					"sublista",
					"Integer",
					"->",
					"Sub-lista opcional para associar ao novo elemento"
				],
				[
					"expandida",
					"Boolean",
					"->",
					"Indica se a sub-lista será expandida ou contraída"
				]
			],
			"Summary": "O comandoINSERT IN LIST insere o elemento designado pelo parâmetro *refElem* na lista cujo número de referência é passado em *lista*."
		},
		"INSERT MENU ITEM": {
			"Syntax": "**INSERT MENU ITEM** ( *menu* ; *depoisItem* ; *textoElem* {; *subMenu* {; *processo*}}{; *} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"depoisItem",
					"Integer",
					"->",
					"Número de item de menu"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Texto para o item de menu a ser inserido"
				],
				[
					"subMenu",
					"Text",
					"->",
					"Referência do submenu associado com o item"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: considerar metacaracteres como caracteres comuns"
				]
			],
			"Summary": "O comandoINSERT MENU ITEM insere novas linhas no menu cujo número ou referência é passada em *menu* e as localiza depois da linha de menu cujo número se passa em *depoisItem*."
		},
		"Insert string": {
			"Syntax": "**Insert string** ( *fonte* ; *inserir* ; *posiçao* ) : Text",
			"Params": [
				[
					"fonte",
					"Text",
					"->",
					"Cadeia na qual vai inserir uma segunda cadeia"
				],
				[
					"inserir",
					"Text",
					"->",
					"Cadeia que será inserida na primeira cadeia"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Onde vai inserir"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia resultante"
				]
			],
			"Summary": "Insert string insere a cadeia de caracteres alfanuméricos *inserir* na cadeia fonte a partir de *posiçao* e devolve a cadeia de caracteres resultante."
		},
		"Int": {
			"Syntax": "**Int** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número cuja porção inteira é devolvida"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Porção inteira do número"
				]
			],
			"Summary": "Int retorna a parte inteira de *numero,* arredondando ao inteiro inferior."
		},
		"INTEGER TO BLOB": {
			"Syntax": "**INTEGER TO BLOB** ( *inteiro* ; *BLOB* ; *byteOrdem* {; offset | *} )",
			"Params": [
				[
					"inteiro",
					"Integer",
					"->",
					"Valor inteiro a escrever no BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a receber o valor inteiro"
				],
				[
					"byteOrdem",
					"Integer",
					"->",
					"0 Ordem de bytes em modo nativo 1 Ordem dos bytes Macintosh 2 Ordem dos bytes PC"
				],
				[
					"offset &#124; *",
					"Variável, Operador",
					"<->",
					"Offset expressado em bytes no BLOB ou * para adicionar o valor"
				],
				[
					"",
					"",
					"",
					"Novo offset depois de escrita se * for omitido"
				]
			],
			"Summary": "O comando INTEGER TO BLOB grava o valor inteiro de 2 bytes Inteiro no BLOB *blob*."
		},
		"INTEGRATE MIRROR LOG FILE": {
			"Syntax": "**INTEGRATE MIRROR LOG FILE** ( *viaAcesso* ; *numOperacao* {; *mode* {; *errObject*}} )",
			"Params": [
				[
					"viaAcesso",
					"Text",
					"->",
					"Nome ou via de acesso do arquivo de histórico a integrar"
				],
				[
					"numOperacao",
					"Real",
					"->",
					"Número da última operação integrada"
				],
				[
					"<-",
					"Novo Número da última operação integrada"
				],
				[
					"mode",
					"Integer",
					"->",
					"0 = modo estrito (modo padrão), 1 =  modo auto reparo"
				],
				[
					"errObject",
					"Object",
					"<-",
					"Operações com erro"
				]
			],
			"Summary": "**Nota preliminar:** este comando só funciona com 4D Server."
		},
		"INTERSECTION": {
			"Syntax": "**INTERSECTION** ( *conjunto1* ; *conjunto2* ; *conjuntoResultado* )",
			"Params": [
				[
					"conjunto1",
					"Text",
					"->",
					"Primeiro conjunto"
				],
				[
					"conjunto2",
					"Text",
					"->",
					"Segundo conjunto"
				],
				[
					"conjuntoResultado",
					"Text",
					"->",
					"Conjunto Resultado"
				]
			],
			"Summary": "INTERSECTION compara *conjunto1 e conjunto2* e seleciona unicamente os registros que estão em ambos conjuntos."
		},
		"INVOKE ACTION": {
			"Syntax": "**INVOKE ACTION** ( *ação* {; *alvo*} )",
			"Params": [
				[
					"ação",
					"Text",
					"->",
					"Nome ação padrão ou padrão incluindo parâmetro se exigido"
				],
				[
					"alvo",
					"Integer",
					"->",
					"Define onde executar a ação: formulário atual (padrão) ou formulário principal"
				]
			],
			"Summary": "O comando **INVOKE ACTION** ativa a ação padrão definida pelo parâmetro ação, opcionalmente no contexto objetivo."
		},
		"Is a list": {
			"Syntax": "**Is a list** ( *lista* ) : Boolean",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Referência da lista a ser testada"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE se a lista é hierárquica e FALSE se não for uma lista hierárquica"
				]
			],
			"Summary": "O comando Is a list retorna TRUE se o valor passado em *lista* é uma referência válida a uma lista hierárquica."
		},
		"Is a variable": {
			"Syntax": "**Is a variable** ( *umPonteiro* ) : Boolean",
			"Params": [
				[
					"umPointer",
					"Pointer",
					"->",
					"Ponteiro a ser testado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE= Ponteiro aponta a variável FALSE = Ponteiro não aponta a variável"
				]
			],
			"Summary": "O comando Is a variable devolve True se o ponteiro passado em *umPonteiro* referenciar uma variável definida."
		},
		"Is compiled mode": {
			"Syntax": "**Is compiled mode** {( * )} : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Retorna a informação do banco local"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Compilado (True), Interpretado (False)"
				]
			],
			"Summary": "Is compiled mode testa se você está executando no modo compilado (True) ou no modo interpretado (False)."
		},
		"Is data file locked": {
			"Syntax": "**Is data file locked**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = arquivo/segmento bloqueado False = arquivo/segmento não bloqueado"
				]
			],
			"Summary": "O comando Is data file locked retorna True se o arquivo de dados do banco de dados aberto, ou pelo menos um dos seus segmentos está fechado - ou seja, protegido contra gravação."
		},
		"Is editing text": {
			"Syntax": "**Is editing text**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se texto estiver sendo digitado, senão False"
				]
			],
			"Summary": "O comando **Is editing text** devolve **True** se o usuário estiver ingressando valores em um objeto de formulário de entrada e **False** em todos os demais casos."
		},
		"Is field number valid": {
			"Syntax": "**Is field number valid** ( *pontTabela* ; *numCampo* ) : Boolean<br/>**Is field number valid** ( *numTabela* ; *numCampo* ) : Boolean",
			"Params": [
				[
					"numTabela&#124;pontTabela",
					"Inteiro longo, Ponteiro",
					"->",
					"Número da tabela ou ponteiro a tabela"
				],
				[
					"numCampo",
					"Integer",
					"->",
					"Número do campo"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Campo exista na tabela; False = campo não existe na tabela"
				]
			],
			"Summary": "O comando Is field number valid retorna True se o campo cujo número for passado no parâmetro *numCampo* existe na tabela cujo número ou ponteiro for passado no parâmetro *numTabela* ou *ponTabela*."
		},
		"Is field value Null": {
			"Syntax": "**Is field value Null** ( *campo* ) : Boolean",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo a ser avaliado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = campo é NULL, False = campo não é NULL"
				]
			],
			"Summary": "O comando Is field value Null retorna **True** se o campo determinado pelo parâmetro *Campo* contem o valor NULL e **False** do contrário."
		},
		"Is in print preview": {
			"Syntax": "**Is in print preview**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Vista previa de impressão,<br/>False = Não vista previa de impressão"
				]
			],
			"Summary": "O comando **Is in print preview** devolve True se a opção **Vista previa de impressão** está selecionada na caixa de diálogo de impressão e False caso contrário."
		},
		"Is in set": {
			"Syntax": "**Is in set** ( *conjunto* ) : Boolean",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto a testar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Registro atual está no conjunto (TRUE) ou Registro atual não está no conjunto (FALSE)"
				]
			],
			"Summary": "Is in set testa se o registro atual da tabela está em *conjunto*."
		},
		"Is license available": {
			"Syntax": "**Is license available** {( *licença* )} : Boolean",
			"Params": [
				[
					"licença",
					"Integer",
					"->",
					"Testar se o plug-in desejado está disponível"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadeiro se o plug-in estiver disponível, senão False"
				]
			],
			"Summary": "O comando Is license available permite conhecer a disponibilidade de um plug-in."
		},
		"Is macOS": {
			"Syntax": "**Is macOS** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se o sistema operacional = macOS, senão False"
				]
			],
			"Summary": "O comando **Is macOS** devolve True se o sistema operativo atual for macOS."
		},
		"Is new record": {
			"Syntax": "**Is new record** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do registro a ser examinado ou tabela Padrão se o parâmetro é omitido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadeiro se o registro está sendo criado, ou então Falso"
				]
			],
			"Summary": "O comando Is new record devolve True quando o registro atual de *tabela* estiver sendo criado e ainda não foi guardado no processo atual."
		},
		"Is nil pointer": {
			"Syntax": "**Is nil pointer** ( *umPonteiro* ) : Boolean",
			"Params": [
				[
					"umPointer",
					"Pointer",
					"->",
					"Ponteiros a ser testado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = ponteiro nulo (->[])FALSE = ponteiro válido a um objeto existente"
				]
			],
			"Summary": "O comando **Is nil pointer** devolve True se o ponteiro que você passa em *umPonteiro* é Nulo (*\\->\\[\\]*)."
		},
		"Is picture file": {
			"Syntax": "**Is picture file** ( *viaArquivo* {; *} ) : Boolean",
			"Params": [
				[
					"viaArquivo",
					"Text",
					"->",
					"Rota do arquivo"
				],
				[
					"*",
					"Operador",
					"->",
					"Validar os dados"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = rotaArquivo indica um arquivo de imagem; de outro modo, False"
				]
			],
			"Summary": "O comando Is picture file prova o arquivo designado pelo parâmetro *rotaArquivo* e devolve True se for um arquivo de imagem válido."
		},
		"Is record loaded": {
			"Syntax": "**Is record loaded** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do registro é examinada ou tabela padrão se o parâmetro for omitido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se o registro é carregado, de outra maneira é False"
				]
			],
			"Summary": "O comando **Is record loaded** devolve True se o registro atual de *tabela* é carregado no processo atual."
		},
		"Is table number valid": {
			"Syntax": "**Is table number valid** ( *numTabela* ) : Boolean",
			"Params": [
				[
					"numTabela",
					"Integer",
					"->",
					"Número de tabela"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = tabela existe no banco de dados; False = tabela não existe no banco de dados"
				]
			],
			"Summary": "O comando Is table number valid retorna True se a tabela cujo número for passado no parâmetro *numTabela* existe no banco, do contrário False."
		},
		"Is user deleted": {
			"Syntax": "**Is user deleted** ( *numUsuario* ) : Boolean",
			"Params": [
				[
					"numUsuario",
					"Integer",
					"->",
					"Número de ID de usuário"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = conta de usuário foi apagada ou não existe; FALSE = Conta de usuário está ativa"
				]
			],
			"Summary": "O comando Is user deleted testa a conta de usuário cujo número de identificação único se passa em *numUsuario*."
		},
		"Is waiting mouse up": {
			"Syntax": "**Is waiting mouse up**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE se o objeto estiver esperando por um evento mouse up. De outro modo, false."
				]
			],
			"Summary": "**Tema:** Eventos formulário\n\nO comando **Is waiting mouse up** devolve **True** depois de que o objeto atual tenha sido clicado e o botão do mouse não tenha sido liberado, e quando o diálogo ainda tem o foco."
		},
		"Is window maximized": {
			"Syntax": "**Is window maximized** ( *janela* ) : Boolean",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"número de referência da janela"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se a janela estiver maximizada. Se não, False"
				]
			],
			"Summary": "O comando **Is window maximized** devolve **True** se a janela cujo número de referência for passado em *janela* estiver maximizada,no momento e **False** no caso contrário."
		},
		"Is window reduced": {
			"Syntax": "**Is window reduced** ( *janela* ) : Boolean",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"true se a janela for reduzida no taskbar ou no dock. Se não, false"
				]
			],
			"Summary": "O comando **Is window reduced** devolve **True** se a janela cujo número de referência se passar na *Janela* estiver atualmente reduzida na barra de tarefas (Windows) ou no dock (macOS), e **False** no caso contrário."
		},
		"Is Windows": {
			"Syntax": "**Is Windows** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se sistema operacional = Windows, senão Falso"
				]
			],
			"Summary": "O comando **Is Windows** devolve True se o sistema operativo atual for Windows."
		},
		"JSON PARSE ARRAY": {
			"Syntax": "**JSON PARSE ARRAY** ( *cadeiaJSON* ; *arrayObjeto* )",
			"Params": [
				[
					"cadeiaJSON",
					"Text",
					"->",
					"Cadeia JSON a analisar"
				],
				[
					"arrayObjeto",
					"Array",
					"<-",
					"Array que contém o resultado da análise da cadeia JSON"
				]
			],
			"Summary": "O comando **JSON PARSE ARRAY** analisa o conteúdo de uma cadeia com formato JSON e localiza os dados extraídos no array *arrayObjeto*."
		},
		"JSON Parse": {
			"Syntax": "**JSON Parse** ( *cadeiaJSON* {; *tipo*}{; *} ) : any",
			"Params": [
				[
					"cadeiaJSON",
					"Text",
					"->",
					"Cadeia em JSON a analisar"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo no qual converter os valores"
				],
				[
					"*",
					"Operador",
					"->",
					"Adiciona uma posição de linha e offset de cada propriedade se o valor retornado for um objeto"
				],
				[
					"Resultado",
					"any, Object",
					"<-",
					"Valores extraídos da cadeia JSON"
				]
			],
			"Summary": "O comando **JSON Parse** analisa o conteúdo de uma cadeia com formato JSON e extraem os valores que podem armazenar em um campo ou variável 4D."
		},
		"JSON Resolve pointers": {
			"Syntax": "**JSON Resolve pointers** ( *objeto* {; *opções*} ) : Object",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto que contém os ponteiros JSON a resolver"
				],
				[
					"<-",
					"Objeto com os ponteiros JSON resolvidos (apenas se o resultado for um objeto)"
				],
				[
					"opções",
					"Object",
					"->",
					"Opções para resolução de ponteiro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto contendo o resultado do processamento"
				]
			],
			"Summary": "O comando **JSON Resolve pointers** resolve todos os ponteiros JSON encontrados no objeto, com respeito à configuração de opções (se existir)."
		},
		"JSON Stringify array": {
			"Syntax": "**JSON Stringify array** ( *array* {; *} ) : Text",
			"Params": [
				[
					"array",
					"Text array, Real array, Boolean array, Pointer array, Object array",
					"->",
					"Array cujo conteúdo deve ser serializado"
				],
				[
					"*",
					"Operador",
					"->",
					"Melhorar o formato"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia que contém o array JSON serializado"
				]
			],
			"Summary": "O comando **JSON Stringify array** converte o array *array* 4D em um array JSON serializado."
		},
		"JSON Stringify": {
			"Syntax": "**JSON Stringify** ( *valor* {; *} ) : Text",
			"Params": [
				[
					"valor",
					"Object, any",
					"->",
					"Dados a converter em cadeia JSON"
				],
				[
					"*",
					"Operador",
					"->",
					"Melhorar o formato"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia que contém o texto JSON serializado"
				]
			],
			"Summary": "O comando **JSON Stringify** converte o parâmetro *valor* em uma cadeia JSON."
		},
		"JSON TO SELECTION": {
			"Syntax": "**JSON TO SELECTION** ( *aTabela* ; *objetoJson* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Ponteiro a tabela 4D"
				],
				[
					"objetoJson",
					"Text",
					"->",
					"Cadeia em JSON"
				]
			],
			"Summary": "O comando **JSON TO SELECTION** copia o conteúdo de um objeto JSON na seleção de registros de *aTabela* ."
		},
		"JSON Validate": {
			"Syntax": "**JSON Validate** ( *vJson* ; *vSchema* ) : Object",
			"Params": [
				[
					"vJson",
					"Object",
					"->",
					"objeto JSON a validar"
				],
				[
					"vSchema",
					"Object",
					"->",
					"Schema JSON usada para validar objetos JSON"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado da validação e erros (se houver)"
				]
			],
			"Summary": "O comando **JSON Validate** verifica a conformidade do conteúdo JSON *vJson* com as regras definidas no esquema JSON *vSchema*."
		},
		"Keystroke": {
			"Syntax": "**Keystroke**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Caracter introduzido pelo usuário"
				]
			],
			"Summary": "Keystroke retorna o caractere introduzido pelo usuário em um campo o em uma área editável."
		},
		"KILL WORKER": {
			"Syntax": "**KILL WORKER** {( *processo* )}",
			"Params": [
				[
					"processo",
					"Text, Integer",
					"->",
					"Número ou nome de processo a terminar (terminar processo atual se omitido)"
				]
			],
			"Summary": "O comando **KILL WORKER** envia uma mensagem ao processo worker cujo nome ou número que passa em *processo*, pedindo ignorar as mensagens pendentes e por fim a sua execução logo que terminem as tarefas atuais."
		},
		"Last field number": {
			"Syntax": "**Last field number** ( *numTabela* ) : Integer<br/>**Last field number** ( *pontTabela* )",
			"Params": [
				[
					"numTabela&#124;pontTabela",
					"Inteiro longo, Ponteiro",
					"->",
					"Número da tabela ou ponteiro a tabela"
				],
				[
					"Resultado de função",
					"Integer",
					"<-",
					"Maior número de campo na tabela"
				]
			],
			"Summary": "O comando Last field number retorna o número de campo mais alto dos campos na tabela cujo número ou ponteiro se passa en *numTabela* ou *pontTabela*."
		},
		"Last query path": {
			"Syntax": "**Last query path** ( *formatDescr* ) : Text",
			"Params": [
				[
					"formatDescr",
					"Integer",
					"->",
					"Formato de descrição (texto ou XML)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Descrição da rota da última pesquisa executada"
				]
			],
			"Summary": "O comando Last query path devolve a descrição interna detalhada da rota real da última pesquisa efetuada nos dados."
		},
		"Last query plan": {
			"Syntax": "**Last query plan** ( *formatDescr* ) : Text",
			"Params": [
				[
					"formatDescr",
					"Integer",
					"->",
					"Formato de descrição (texto ou XML)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Descrição do último plano de pesquisa executado"
				]
			],
			"Summary": "O comando Last query plan devolve a descrição interna do plano de execução da última pesquisa realizada nos dados."
		},
		"LAST RECORD": {
			"Syntax": "**LAST RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual mover ao último registro selecionado, ou tabela padrão, se omitido"
				]
			],
			"Summary": "LAST RECORD designa o último registro da seleção de *tabela* como registro atual e é carregado em memória."
		},
		"Last table number": {
			"Syntax": "**Last table number**  : Integer",
			"Params": [
				[
					"Resultado de função",
					"Integer",
					"<-",
					"Número de tabela mais alto no banco de dados"
				]
			],
			"Summary": "Last table number retorna o maior número de tabela entre as tabelas no banco."
		},
		"Last update log path": {
			"Syntax": "**Get last update log path** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Via de acesso do histórico de atualização mais recente"
				]
			],
			"Summary": "O comando Get last update log path devolve a via de acesso completa do arquivo de histórico de atualização mais recente na máquina onde se chama."
		},
		"LAUNCH EXTERNAL PROCESS": {
			"Syntax": "**LAUNCH EXTERNAL PROCESS** ( *nomeArquivo* {; *fluxoEntrada* {; *fluxoSaida* {; *fluxoErro*}}}{; *pid*} )",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Rota de acesso e argumentos de arquivo a lançar"
				],
				[
					"fluxoEntrada",
					"Text, Blob",
					"->",
					"Fluxo de entrada(stdin)"
				],
				[
					"fluxoSaida",
					"Text, Blob",
					"<-",
					"Fluxo de saída (stdout)"
				],
				[
					"fluxoErro",
					"Text, Blob",
					"<-",
					"Fluxo de erro(stderr)"
				],
				[
					"pid",
					"Integer",
					"<-",
					"Identificador único para processo externo"
				]
			],
			"Summary": "A partir de 4D v19 R4, recomendamos o uso de `4D.SystemWorker class` para rodar e controlar processos externos."
		},
		"LDAP LOGIN": {
			"Syntax": "**LDAP LOGIN** ( *url* ; *login* ; *senha* {; *digest*} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"URL do servidor LDAP ao qual vai conectar"
				],
				[
					"login",
					"Text",
					"->",
					"Login do usuário"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha do login"
				],
				[
					"digest",
					"Integer",
					"->",
					"0 = envia senha em digest MD5 (padrão), 1 = envia senha sem criptografia"
				]
			],
			"Summary": "O comando**LDAP LOGIN** abre uma conexão somente leitura no servidor LDAP especificado pelo parâmetro *url* com os identificadores de *login* e *senha*."
		},
		"LDAP LOGOUT": {
			"Syntax": "**LDAP LOGOUT**",
			"Params": [],
			"Summary": "O comando **LDAP LOGOUT** termina a conexão com um servidor LDAP no processo atual (se for aplicável)."
		},
		"LDAP SEARCH ALL": {
			"Syntax": "**LDAP SEARCH ALL** ( *dnRootEntry* ; *arrResultado* ; *filtro* {; *escopo* {; *atributos* {; *atributosComoArray*}}} )",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"o Distinguished Name do diretório raiz onde a pesquisa começará"
				],
				[
					"arrResultado",
					"Object array",
					"<-",
					"Resultado da pesquisa"
				],
				[
					"filtro",
					"Text",
					"->",
					"filtro de pesquisa LDAP"
				],
				[
					"escopo",
					"Text",
					"->",
					"Escopo da pesquisa \"base\" (padrão), \"one\", ou \"sub\""
				],
				[
					"atributos",
					"Text array",
					"->",
					"Atributos da pesquisa"
				],
				[
					"atributosComoArray",
					"Boolean array",
					"->",
					"True = força os atributos a serem retornados como um array, false = força os atributos a serem retornados como uma variável simples"
				]
			],
			"Summary": "O comando **LDAP SEARCH ALL** encontra todas as ocorrências que correspondem aos critérios definidos no servidor LDAP objetivo."
		},
		"LDAP Search": {
			"Syntax": "**LDAP Search** ( *dnRootEntry* ; *filtro* {; *escopo* {; *atributos* {; *atributoComoArray*}}} ) : Object",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"Nome distinto da root entry onde a pesquisa começa"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de pesquisa LDAP"
				],
				[
					"escopo",
					"Text",
					"->",
					"Escopo da pesquisa: \"base\" (padrão), \"one\", ou \"sub\""
				],
				[
					"atributos",
					"Text array",
					"->",
					"Atributos a capturar"
				],
				[
					"atributoComoArray",
					"Boolean array",
					"->",
					"True= força atributos a ser retornados como array, False = força atributos a ser retornados como uma variável simples"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Atributos Chave/Valor"
				]
			],
			"Summary": "O comando **LDAP Search** encontra a primeira ocorrência que corresponde aos critérios definidos no servidor LDAP alvo."
		},
		"Length": {
			"Syntax": "**Length** ( *cadeia* ) : Integer",
			"Params": [
				[
					"cadeia",
					"Text",
					"->",
					"Cadeia para a qual vai retornar o comprimento"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Comprimento da função"
				]
			],
			"Summary": "**Length** permite obter o comprimento de *cadeia*."
		},
		"Level": {
			"Syntax": "**Level**   : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nível de ruptura ou do cabeçalho atual"
				]
			],
			"Summary": "Level  se utiliza para determinar o nível de quebra do cabeçalho atual."
		},
		"License usage": {
			"Syntax": "**License usage** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Uma coleção de objetos com informação sobre licenças retidas"
				]
			],
			"Summary": "O comando **License usage** retorna uma coleção de objetos contendo informação das licenças retidas."
		},
		"List item parent": {
			"Syntax": "**List item parent** ( {* ;} *lista* ; refElem | * ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência do elemento pai ou 0 se não há"
				]
			],
			"Summary": "O comando List item parent retorna o número de referência do elemento pai."
		},
		"List item position": {
			"Syntax": "**List item position** ( {* ;} *lista* ; *refElem* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referência do elemento"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posição do elemento em listas expandidas/contraídas"
				]
			],
			"Summary": "O comando List item position retorna a posição do elemento cujo número de referencia ou nome de objeto se passa em *refElem*,na lista cujo número de referência se passa na lista."
		},
		"LIST OF CHOICE LISTS": {
			"Syntax": "**LIST OF CHOICE LISTS** ( *arrayNums* ; *arrayNoms* )",
			"Params": [
				[
					"arrayNums",
					"Integer array",
					"<-",
					"Número das listas"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nomes das listas"
				]
			],
			"Summary": "O comando LIST OF CHOICE LISTS retorna, nos arrays sincronizados *arrayNums* e *arrayNoms*, os números e os nomes das listas definidas no editor de listas no ambiente Desenho."
		},
		"LIST OF STYLE SHEETS": {
			"Syntax": "**LIST OF STYLE SHEETS** ( *arrFolhasEstilo* )",
			"Params": [
				[
					"arrFolhasEstilo",
					"Text array",
					"<-",
					"Nomes das folhas de estilo definidas na aplicação"
				]
			],
			"Summary": "O comando **LIST OF STYLE SHEETS** devolve a lista de folhas de estilo da aplicação no array *arrFolhasEstilo*."
		},
		"LIST TO ARRAY": {
			"Syntax": "**LIST TO ARRAY** ( *lista* ; *array* {; *itemRefs*} )",
			"Params": [
				[
					"lista",
					"Text, Integer",
					"->",
					"Lista da qual copiar os itens de primeiro nível"
				],
				[
					"array",
					"Array",
					"<-",
					"Array para o qual copiar os itens da lista"
				],
				[
					"itemRefs",
					"Array",
					"<-",
					"Números de referência da lista de itens"
				]
			],
			"Summary": "O comando LIST TO ARRAY cria ou substitui o array *array* com os elementos de primeiro nível da lista ou da lista de seleção designada por *lista*."
		},
		"LIST TO BLOB": {
			"Syntax": "**LIST TO BLOB** ( *lista* ; *BLOB* {; *} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Lista hierárquica a armazenar no BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a receber a lista hierárquica"
				],
				[
					"*",
					"Operador",
					"->",
					"* adicionar o valor"
				]
			],
			"Summary": "O comando LIST TO BLOB armazena a *lista* hierárquica no BLOB *blob*."
		},
		"LISTBOX COLLAPSE": {
			"Syntax": "**LISTBOX COLLAPSE** ( {* ;} *objeto* {; *recursivo* {; *seletor* {; linha | nivel  {; *coluna*}}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"recursivo",
					"Boolean",
					"->",
					"True = contrai os subníveis False = não contrai os subníveis"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Parte do list box a contrair"
				],
				[
					"linha &#124; nivel",
					"Inteiro longo",
					"->",
					"Número de quebra de fila a colapsar ou <br/>Número de nível de list box a contrair"
				],
				[
					"coluna",
					"Integer",
					"->",
					"Número de quebra de coluna a contrair"
				]
			],
			"Summary": "O comando LISTBOX COLLAPSE é utilizado para contrair linhas de quebra do objeto list box designado pelos parâmetros *objeto* e *\\** ."
		},
		"LISTBOX DELETE COLUMN": {
			"Syntax": "**LISTBOX DELETE COLUMN** ( {* ;} *objeto* ; *posiçaoCol* {; *numero*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é a variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Variável (se * é omitido)"
				],
				[
					"posiçaoCol",
					"Integer",
					"->",
					"Número de coluna a remover"
				],
				[
					"numero",
					"Integer",
					"->",
					"Número de colunas a remover"
				]
			],
			"Summary": "O comando LISTBOX DELETE COLUMN apaga uma ou mais colunas (visíveis ou não) no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX DELETE ROWS": {
			"Syntax": "**LISTBOX DELETE ROWS** ( {* ;} *objeto* ; *posiçao* {; *numRows*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string) se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Variável (se * é omitido)"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Posição da fila a apagar"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Número de linhas a excluir"
				]
			],
			"Summary": "O comando LISTBOX DELETE ROWS apaga a fila número *posição* (visível ou não) do list box definido pelos parâmetros *objeto* e \\*."
		},
		"LISTBOX DUPLICATE COLUMN": {
			"Syntax": "**LISTBOX DUPLICATE COLUMN** ( {* ;} *objeto* ; *posCol* ; *nomCol* ; *varCol* ; *nomCabe* ; *varCabe* {; *nomRodape* ; *varRodape*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"posCol",
					"Integer",
					"->",
					"Localização da nova coluna duplicada"
				],
				[
					"nomCol",
					"Text",
					"->",
					"Nome da nova coluna"
				],
				[
					"varCol",
					"Array, Field, Variable, Pointer",
					"->",
					"Nome da variável array da coluna ou campo ou variável"
				],
				[
					"nomCabe",
					"Text",
					"->",
					"Nome do objeto do cabeçalho da coluna"
				],
				[
					"varCabe",
					"Integer, Pointer",
					"->",
					"Variável do cabeçalho da coluna"
				],
				[
					"nomRodape",
					"Text",
					"->",
					"Nome do objeto do rodapé da coluna"
				],
				[
					"varRodape",
					"Variable, Pointer",
					"->",
					"Variável do rodapé da coluna"
				]
			],
			"Summary": "O comando **LISTBOX DUPLICATE COLUMN** duplica a coluna definida pelos parâmetros *objeto* e *\\** por programação no contexto do formulário executado (Modo Aplicação)."
		},
		"LISTBOX EXPAND": {
			"Syntax": "**LISTBOX EXPAND** ( {* ;} *object* {; *recursive* {; *selector* {; linha | nivel  {; *coluna*}}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"recursive",
					"Boolean",
					"->",
					"True = expand sublevels<br/>False = do not expand sublevels"
				],
				[
					"selector",
					"Integer",
					"->",
					"Part of list box to expand"
				],
				[
					"linha &#124; nivel",
					"Inteiro longo",
					"->",
					"Number of break row to expand or <br/>Number of list box level to expand"
				],
				[
					"coluna",
					"Integer",
					"->",
					"Number of break column to expand"
				]
			],
			"Summary": "O comando LISTBOX EXPAND é utilizado para expandir as linhas de quebra do objeto list box designado pelos parâmetros objeto e \\*."
		},
		"LISTBOX Get array": {
			"Syntax": "**LISTBOX Get array** ( {* ;} *objeto* ; *tipoArray* ) : Pointer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, objeto é um nome de objeto (cadeia) Se for omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Variável (se * for omitido)"
				],
				[
					"tipoArray",
					"Integer",
					"->",
					"Tipo de array"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro ao array associado a propriedade"
				]
			],
			"Summary": "**Nota:** Este comando só funciona com os list box de tipo array."
		},
		"LISTBOX GET ARRAYS": {
			"Syntax": "**LISTBOX GET ARRAYS** ( {* ;} *objeto* ; *arrNomsCols* ; *arrNomsTitulos* ; *arrVarCols* ; *arrVarTitulos* ; *arrColsVisiveis* ; *arrEstilos* {; *arrFooterNames* ; *arrFootersVars*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * for omitido)"
				],
				[
					"arrNomsCols",
					"Text array",
					"<-",
					"Nomes de objetos de colunas"
				],
				[
					"arrNomsTitulos",
					"Text array",
					"<-",
					"Nomes dos objetos títulos cabeçalhos"
				],
				[
					"arrVarCols",
					"Pointer array",
					"<-",
					"Ponteiros para variáveis de colunas ou Ponteiros para campos coluna ou Nil"
				],
				[
					"arrVarTitulos",
					"Pointer array",
					"<-",
					"Ponteiros para variáveis de título"
				],
				[
					"arrColsVisiveis",
					"Boolean array",
					"<-",
					"Visibilidade de cada coluna"
				],
				[
					"arrEstilos",
					"Pointer array",
					"<-",
					"Ponteiros para arrays ou estilos, cores e variáveis de visibilidade ou Nil"
				],
				[
					"arrFooterNames",
					"Text array",
					"<-",
					"Nomes de objetos do rodapé da coluna"
				],
				[
					"arrFootersVars",
					"Pointer array",
					"<-",
					"Ponteiros para variáveis de rodapé de coluna"
				]
			],
			"Summary": "O comando **LISTBOX GET ARRAYS** devolve um conjunto de arrays sincronizados oferecendo informação sobre cada coluna (visível ou invisível) do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX Get auto row height": {
			"Syntax": "**LISTBOX Get auto row height**  ( {* ;} *objeto* ; *seletor* {; *unidade*} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou de variável (se * for omitido)"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Valor de altura a obter: lk row min height ou lk row max height"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Valor da unidade de altura 0 em píxels, 1 em linhas"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de altura de linha selecionado"
				]
			],
			"Summary": "O comando **LISTBOX Get auto row height**  devolve o valor de altura de fila mínimo ou máximo actual definido para o objeto list box designado utilizando os parâmetros *objeto* e *\\**."
		},
		"LISTBOX GET CELL COORDINATES": {
			"Syntax": "**LISTBOX GET CELL COORDINATES** ( {* ;} *objeto* ; *coluna* ; *linha* ; *esquerda* ; *superior* ; *direita* ; *inferior* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado = objeto é um nome de objeto (cadeia)"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou variável (se * for omitido)"
				],
				[
					"coluna",
					"Integer",
					"->",
					"Número de coluna"
				],
				[
					"linha",
					"Integer",
					"->",
					"Número de linha"
				],
				[
					"esquerda",
					"Integer",
					"<-",
					"Coordenada esquerda do objeto"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenada superior do objeto"
				],
				[
					"direita",
					"Integer",
					"<-",
					"Coordenada direita do objeto"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenada inferior do objeto"
				]
			],
			"Summary": "O comando LISTBOX GET CELL COORDINATES devolve nas variáveis ou campos *esq*, *sup*, *dir* e *inf* as coordenadas (em pontos) da célula designada pelos parâmetros *coluna* e *linha*, no list box definido por *\\** e *objeto*."
		},
		"LISTBOX GET CELL POSITION": {
			"Syntax": "**LISTBOX GET CELL POSITION** ( {* ;} *objeto* {; *X* ; *Y* }; *coluna* ; *linha* {; *varCol*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"X",
					"Real",
					"->",
					"Horizontal coordinate of mouse"
				],
				[
					"Y",
					"Real",
					"->",
					"Vertical coordinate of mouse"
				],
				[
					"coluna",
					"Integer",
					"<-",
					"Número de coluna"
				],
				[
					"linha",
					"Integer",
					"<-",
					"Número da fila"
				],
				[
					"varCol",
					"Pointer",
					"<-",
					"Ponteiro para a variável coluna"
				]
			],
			"Summary": "O comando LISTBOX GET CELL POSITION devolve os números da *coluna* e da *fila* correspondentes a localização no list box (designado por *\\** e *objeto*) do último clique ou as coordenadas vertical e horizontal do mouse."
		},
		"LISTBOX Get column formula": {
			"Syntax": "**LISTBOX Get column formula** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Fórmula associada à coluna"
				]
			],
			"Summary": "O comando **LISTBOX Get column formula** devolve a fórmula associada à coluna de list box designada pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX Get column width": {
			"Syntax": "**LISTBOX Get column width** ( {* ;} *objeto* {; *larguraMin* {; *larguraMax*}} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"larguraMin",
					"Integer",
					"<-",
					"Largura mínima da coluna (em pixels)"
				],
				[
					"larguraMax",
					"Integer",
					"<-",
					"Largura máxima da coluna (em píxels)"
				],
				[
					"Resultado da função",
					"Integer",
					"<-",
					"Largura da coluna (em pixels)"
				]
			],
			"Summary": "O comando LISTBOX Get column width devolve a largura (em pixels) da coluna designada pelos parâmetros *objeto* e *\\*."
		},
		"LISTBOX Get footer calculation": {
			"Syntax": "**LISTBOX Get footer calculation** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Tipo de cálculo"
				]
			],
			"Summary": "O novo comando **LISTBOX Get footer calculation** devolve o tipo de cálculo associado à área de rodapé de página do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX Get footers height": {
			"Syntax": "**LISTBOX Get footers height** ( {* ;} *objeto* {; *unidade*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ouVariável (se omitido *)"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Unidade de valor de altura:0 se omitido = píxeles, 1 = linhas"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Alto da linha"
				]
			],
			"Summary": "O comando **LISTBOX Get footers height** devolve a altura da linha de rodapé do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX GET GRID COLORS": {
			"Syntax": "**LISTBOX GET GRID COLORS** ( {* ;} *objeto* ; *corH* ; *corV* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"corH",
					"Text, Integer",
					"<-",
					"Valor de cor RGB para as linhas horizontais"
				],
				[
					"corV",
					"Text, Integer",
					"<-",
					"Valor de cor RGB para as linhas verticais"
				]
			],
			"Summary": "O comando **LISTBOX GET GRID COLORS** devolve a cor das linhas horizontais e verticais que eles compõem a grade do objeto list box designado pelo objeto de parâmetros *objeto* e *\\**."
		},
		"LISTBOX GET GRID": {
			"Syntax": "**LISTBOX GET GRID** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"horizontal",
					"Boolean",
					"<-",
					"True = visível, False = oculto"
				],
				[
					"vertical",
					"Boolean",
					"<-",
					"True = visível, False = oculto"
				]
			],
			"Summary": "O comando **LISTBOX GET GRID** devolve o estado visível/oculto das linhas horizontais e verticais que compõem a grade do objeto list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX Get headers height": {
			"Syntax": "**LISTBOX Get headers height** ( {* ;} *objeto* {; *unidade*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Unidade de valor de altura:0 ou se omitida = pixeles, 1 = linhas"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Alto da linha"
				]
			],
			"Summary": "O comando **LISTBOX Get headers height** devolve a altura da linha horizontais de cabeçalho do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX GET HIERARCHY": {
			"Syntax": "**LISTBOX GET HIERARCHY** ( {* ;} *objeto* ; *hierárquico* {; *hierarquia*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nom de objeto (se * é especificado) ou Variável (se * for omitido)"
				],
				[
					"hierárquico",
					"Boolean",
					"<-",
					"True = list box hierárquico False = list box não hierárquico"
				],
				[
					"hierarquia",
					"Pointer array",
					"<-",
					"Array de ponteiros"
				]
			],
			"Summary": "O comando LISTBOX GET HIERARCHY permite buscar as propriedades hierárquicas do objeto list box designado pelos parámetros *objeto* e *\\** ."
		},
		"LISTBOX Get locked columns": {
			"Syntax": "**LISTBOX Get locked columns** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Número de colunas bloqueadas"
				]
			],
			"Summary": "O comando **LISTBOX Get locked columns** devolve o número de colunas bloquedas no list box designado pelos parâmetros objeto e *\\**."
		},
		"LISTBOX Get number of columns": {
			"Syntax": "**LISTBOX Get number of columns** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de colunas"
				]
			],
			"Summary": "O comando LISTBOX Get number of columns devolve o número total de colunas (visíveis ou invisíveis) presentes no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX Get number of rows": {
			"Syntax": "**LISTBOX Get number of rows** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de filas"
				]
			],
			"Summary": "O comando LISTBOX Get number of rows devolve o número de filas do list box designado pelos parâmetros objeto e \\*."
		},
		"LISTBOX GET OBJECTS": {
			"Syntax": "**LISTBOX GET OBJECTS** ( {* ;} *objeto* ; *arrayNomObjeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, o objeto é um nome de objeto (cadeia)<br/>Se for omitido, o objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome do objeto (se * for especificado) ou Variável (se * for omitido)"
				],
				[
					"arrayNomObjeto",
					"Text array",
					"<-",
					"Nomes dos sub objetos do list box (cabeçalhos, colunas, pés)"
				]
			],
			"Summary": "O comando **LISTBOX GET OBJECTS** devolve um array que contém os nomes de todos os objetos que compõem o list box designado pelos parâmetros *objeto* e *\\** ."
		},
		"LISTBOX GET PRINT INFORMATION": {
			"Syntax": "**LISTBOX GET PRINT INFORMATION** ( {* ;} *objeto* ; *seletor* ; *info* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Informação a conseguir"
				],
				[
					"info",
					"Integer",
					"<-",
					"Valor atual"
				]
			],
			"Summary": "O comando LISTBOX GET PRINT INFORMATION devolve a informação atual relativa a impressão do objeto list box designado pelos parâmetros *objeto e* *\\** ."
		},
		"LISTBOX Get row color as number": {
			"Syntax": "**LISTBOX Get row color as number** ( {* ;} *objeto* ; *fila* {; *tipoCor*} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou variável (se * for omitido)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Número da linha"
				],
				[
					"tipoCor",
					"Integer",
					"->",
					"cor de fonte listbox (normal) ou cor de fundo de list box"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor da cor"
				]
			],
			"Summary": "**Nota:** este comando só funciona com os list box de tipo array."
		},
		"LISTBOX Get row color": {
			"Syntax": "**LISTBOX Get row color** ( {* ;} *objeto* ; *fila* {; *tipoCor*} )  : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome objeto (string) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou  Variável (se * for omitido)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Número de Fila"
				],
				[
					"tipoCor",
					"Integer",
					"->",
					"Cor de Fonte de list box (padrão) ou cor de fundo de list box"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor da cor"
				]
			],
			"Summary": "**Nota:** este comando só funciona com list boxes de tipo array."
		},
		"LISTBOX Get row font style": {
			"Syntax": "**LISTBOX Get row font style** ( {* ;} *objeto* ; *linha* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome do objeto(se especificado *) ou<br/>Variável (se omitido *)"
				],
				[
					"linha",
					"Integer",
					"->",
					"Número linha"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de estilo"
				]
			],
			"Summary": "**Nota:** Este comando só funciona com os list box de tipo array."
		},
		"LISTBOX Get row height": {
			"Syntax": "**LISTBOX Get row height**  ( {* ;} *objeto* ; *linha* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string) se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * for omitido)"
				],
				[
					"linha",
					"Integer",
					"->",
					"Linha list box cuja altura quer obter"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura Linha"
				]
			],
			"Summary": "O comando **LISTBOX Get row height**  devolve a altura da *fila* especificada no objeto list box designado utilizando o *objeto* e os parâmetros *\\**."
		},
		"LISTBOX Get rows height": {
			"Syntax": "**LISTBOX Get rows height** ( {* ;} *objeto* {; *unidade*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Unidade do valor da altura: 0 ou omitido = pixels, 1 = linhas"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"altura da fila (em pixels)"
				]
			],
			"Summary": "O comando **LISTBOX Get rows height** devolve a altura atual (em píxels) das filas do objeto list box designado utilizando os parâmetros *objeto* e *\\**."
		},
		"LISTBOX Get static columns": {
			"Syntax": "**LISTBOX Get static columns** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Número de colunas estáticas"
				]
			],
			"Summary": "O comando **LISTBOX Get static columns** devolve o número de colunas estáticas no list box designado pelos parâmetros objeto e *\\**."
		},
		"LISTBOX GET TABLE SOURCE": {
			"Syntax": "**LISTBOX GET TABLE SOURCE** ( {* ;} *objeto* ; *numTabela* {; *nome* {; *highlightName*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"numTabela",
					"Integer",
					"<-",
					"número da tabela selecionada"
				],
				[
					"nome",
					"Text",
					"<-",
					"Nome da seleção ou ** para seleção atual"
				],
				[
					"highlightName",
					"Text",
					"<-",
					"Nome do set destacado."
				]
			],
			"Summary": "O comando LISTBOX GET TABLE SOURCE permite conhecer a fonte atual de dados mostrados no list box designado pelos parâmetros *\\** e *objeto*."
		},
		"LISTBOX INSERT COLUMN FORMULA": {
			"Syntax": "**LISTBOX INSERT COLUMN FORMULA** ( {* ;} *objeto* ; *posiçaoCol* ; *nomeColuna* ; *formula* ; *tipoDados* ; *nomeCabe* ; *varTitulo* {; *nomeRodape* ; *varRodape*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"posiçaoCol",
					"Integer",
					"->",
					"Localização da coluna a inserir"
				],
				[
					"nomeColuna",
					"Text",
					"->",
					"Nome do objeto de coluna"
				],
				[
					"formula",
					"Text",
					"->",
					"Fórmula 4D associada com a coluna"
				],
				[
					"tipoDados",
					"Integer",
					"->",
					"Tipo de resultado da fórmula"
				],
				[
					"nomeCabe",
					"Text",
					"->",
					"Nome do objeto título da coluna"
				],
				[
					"varTitulo",
					"Integer, Pointer",
					"->",
					"Variável título de coluna"
				],
				[
					"nomeRodape",
					"Text",
					"->",
					"Nome do rodapé  da coluna"
				],
				[
					"varRodape",
					"Variable, Pointer",
					"->",
					"Variável de rodapé da coluna"
				]
			],
			"Summary": "O comando **LISTBOX INSERT COLUMN FORMULA** insere uma coluna no listbox designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX INSERT COLUMN": {
			"Syntax": "**LISTBOX INSERT COLUMN** ( {* ;} *objeto* ; *posiçaoCol* ; *nomeColuna* ; *variavelCol* ; *nomeCabe* ; *varTitulo* {; *nomRodapé* ; *nomeVar*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"posiçaoCol",
					"Integer",
					"->",
					"Localização da coluna a inserir"
				],
				[
					"nomeColuna",
					"Text",
					"->",
					"Nome do objeto coluna"
				],
				[
					"variavelCol",
					"Array, Field, Variable, Pointer",
					"->",
					"Nome de coluna do array ou campo ou variável"
				],
				[
					"nomeCabe",
					"Text",
					"->",
					"Nome do objeto título da coluna"
				],
				[
					"varTitulo",
					"Integer, Pointer",
					"->",
					"Variável título da coluna"
				],
				[
					"nomRodapé",
					"Text",
					"->",
					"Nome do rodapé da coluna"
				],
				[
					"nomeVar",
					"Variable, Pointer",
					"->",
					"Variável do rodapé da coluna"
				]
			],
			"Summary": "O comando LISTBOX INSERT COLUMN insere uma coluna no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX INSERT ROWS": {
			"Syntax": "**LISTBOX INSERT ROWS** ( {* ;} *objeto* ; *posiçao* {; *numFilas*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Posição da fila a apagar"
				],
				[
					"numFilas",
					"Integer",
					"->",
					"Número de filas a inserir"
				]
			],
			"Summary": "O comando **LISTBOX INSERT ROWS** insere uma nova linha no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX MOVE COLUMN": {
			"Syntax": "**LISTBOX MOVE COLUMN** ( {* ;} *objeto* ; *colPosition* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome do objeto (se especificado *) ou<br/>Variável (se omitido *) da coluna a mover"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"Nova localização da coluna"
				]
			],
			"Summary": "O comando **LISTBOX MOVE COLUMN** move por programação a coluna designada pelos parâmetros *objeto* e *\\** no contexto do formulário em execução (modo Aplicação)."
		},
		"LISTBOX MOVED COLUMN NUMBER": {
			"Syntax": "**LISTBOX MOVED COLUMN NUMBER** ( {* ;} *objeto* ; *antPosiçao* ; *novaPosição* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"antPosiçao",
					"Integer",
					"<-",
					"Posição prévia da coluna movimentada"
				],
				[
					"novaPosição",
					"Integer",
					"<-",
					"Nova posição da coluna movimentada"
				]
			],
			"Summary": "O comando LISTBOX MOVED COLUMN NUMBER devolve dois números em *antPosição* e *novPosição* indicando respectivamente a posição anterior e a nova posição da coluna movida no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX MOVED ROW NUMBER": {
			"Syntax": "**LISTBOX MOVED ROW NUMBER** ( {* ;} *objeto* ; *antPosiçao* ; *novaPosiçao* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"antPosiçao",
					"Integer",
					"<-",
					"Posição prévia da fila movimentada"
				],
				[
					"novaPosiçao",
					"Integer",
					"<-",
					"Nova posição da fila movimentada"
				]
			],
			"Summary": "O comando LISTBOX MOVED ROW NUMBER devolve dois números em *antPosição* e *novPosição* indicando respectivamente a posição anterior e a nova posição da fila movida no list box, especificados pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SELECT BREAK": {
			"Syntax": "**LISTBOX SELECT BREAK** ( {* ;} *objeto* ; *fila* ; *coluna* {; *açao*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Número de quebra de fila"
				],
				[
					"coluna",
					"Integer",
					"->",
					"Número de quebra de coluna"
				],
				[
					"açao",
					"Integer",
					"->",
					"Ação de seleção"
				]
			],
			"Summary": "O comando LISTBOX SELECT BREAK  se utiliza para selecionar linhas de quebra no objeto list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SELECT ROW": {
			"Syntax": "**LISTBOX SELECT ROW**  ( {* ;} *objeto* ; *posiçao* {; *açao*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Número da fila a selecionar"
				],
				[
					"açao",
					"Integer",
					"->",
					"Ação de seleção"
				]
			],
			"Summary": "O comando  LISTBOX SELECT ROW seleciona a fila cujo número é passado em *posição* no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SELECT ROWS": {
			"Syntax": "**LISTBOX SELECT ROWS** ( {* ;} *objeto* ; *seleção* {; *ação*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome objeto (string) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Variável (se * for variável)"
				],
				[
					"seleção",
					"Object, Collection",
					"->",
					"objeto ou coleção descrevendo as linhas a selecionar"
				],
				[
					"ação",
					"Integer",
					"->",
					"lk replace selecion (padrão se omitido), lk add to selection, lk remove from selecion."
				]
			],
			"Summary": "**O comandoLISTBOX SELECT ROWS** seleciona as alinhas de uma list box de seleção de entidades ou uma list box coleção que corresponde às entidades ou objetos contendo o parâmetro *seleção*."
		},
		"LISTBOX SET ARRAY": {
			"Syntax": "**LISTBOX SET ARRAY** ( {* ;} *objeto* ; *tipoArray* ; *proArray* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou variável (se * for omitido)"
				],
				[
					"tipoArray",
					"Integer",
					"->",
					"Tipo de Array"
				],
				[
					"proArray",
					"Pointer",
					"->",
					"Array a associar com propriedade"
				]
			],
			"Summary": "**Nota**: este comando só funciona com os list box de tipo array."
		},
		"LISTBOX SET AUTO ROW HEIGHT": {
			"Syntax": "**LISTBOX SET AUTO ROW HEIGHT** ( {* ;} *objeto* ; *seletor* ; *valor* ; *unidade* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, o objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou variável (se * for omitido)"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Valor de altura a estabelecer: lk row min heigh ou lk row max heigh"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor máximo ou mínimo de altura de linha"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Unidade de valor da altura: 0=pixels, 1=linhas"
				]
			],
			"Summary": "O comando **LISTBOX SET AUTO ROW HEIGHT** \\[#descv\\]lhe permite estabelecer o *valor* de altura de fila mínimo ou máximo no objeto de list box designado utilizando os parâmetros *objeto* e *\\**\\[#/descv\\]."
		},
		"LISTBOX SET COLUMN FORMULA": {
			"Syntax": "**LISTBOX SET COLUMN FORMULA** ( {* ;} *objeto* ; *formula* ; *tipoDado* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"formula",
					"Text",
					"->",
					"Fórmula 4D associada à coluna"
				],
				[
					"tipoDado",
					"Integer",
					"->",
					"Tipo de resultado da fórmula"
				]
			],
			"Summary": "O comando **LISTBOX SET COLUMN FORMULA** modifica a *formula* associada à coluna de list box designada pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET COLUMN WIDTH": {
			"Syntax": "**LISTBOX SET COLUMN WIDTH** ( {* ;} *objeto* ; *largura* {; *larguraMin* {; *larguraMax*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"largura",
					"Integer",
					"->",
					"Largura da coluna (em píxels)"
				],
				[
					"larguraMin",
					"Integer",
					"->",
					"Largura mínima da coluna (em pixels)"
				],
				[
					"larguraMax",
					"Integer",
					"->",
					"Largura máxima da coluna (em pixels)"
				]
			],
			"Summary": "O comando LISTBOX SET COLUMN WIDTH le permite modificar por programação a largura de uma ou todas as colunas do objeto (list box, coluna ou título) designado utilizando os parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET FOOTER CALCULATION": {
			"Syntax": "**LISTBOX SET FOOTER CALCULATION** ( {* ;} *objeto* ; *calculo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"calculo",
					"Integer",
					"->",
					"Calculo para à área de rodapé"
				]
			],
			"Summary": "O comando **LISTBOX SET FOOTER CALCULATION** permite definir o cálculo automático associado à área de rodapé do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET FOOTERS HEIGHT": {
			"Syntax": "**LISTBOX SET FOOTERS HEIGHT** ( {* ;} *objeto* ; *altura* {; *unidade*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"altura",
					"Integer",
					"->",
					"Alto de linha"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Unidade de valor de altura:0 ou se omitida = pixeles, 1 = linhas"
				]
			],
			"Summary": "O comando **LISTBOX SET FOOTERS HEIGHT** modifica por programação a altura da linha de rodapé do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET GRID COLOR": {
			"Syntax": "**LISTBOX SET GRID COLOR** ( {* ;} *objeto* ; *cor* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"cor",
					"Text, Integer",
					"->",
					"Valor RGB da cor"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"Use a cor para linhas de grade horizontais"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"Use a cor para linhas de grade vertical"
				]
			],
			"Summary": "O comando **LISTBOX SET GRID COLOR** lhe permite modificar a cor da grade do objeto list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET GRID": {
			"Syntax": "**LISTBOX SET GRID** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"True=mostrar; False=ocultar"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"True=mostrar; False=ocultar"
				]
			],
			"Summary": "O comando **LISTBOX SET GRID** lhe permite mostrar ou ocultar as linhas horizontais e verticais que compõe a matriz no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET HEADERS HEIGHT": {
			"Syntax": "**LISTBOX SET HEADERS HEIGHT** ( {* ;} *objeto* ; *altura* {; *unidade*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"altura",
					"Integer",
					"->",
					"Alto da linha"
				],
				[
					"unidade",
					"Integer",
					"->",
					"Unidade de valor de altura: 0 ou se omitido = pixeles, 1 = linhas"
				]
			],
			"Summary": "O comando **LISTBOX SET HEADERS HEIGHT** modifica por programação a altura da linha de cabeçalho do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET HIERARCHY": {
			"Syntax": "**LISTBOX SET HIERARCHY** ( {* ;} *objeto* ; *hierárquico* {; *hierarquia*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string) se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou variável (se * for omitido)"
				],
				[
					"hierárquico",
					"Boolean",
					"->",
					"True = list box hierárquico False = list box não hierárquico"
				],
				[
					"hierarquia",
					"Pointer array",
					"->",
					"Array dos ponteiros"
				]
			],
			"Summary": "O comando LISTBOX SET HIERARCHY permite configurar o objeto list box designado pelos parâmetros objeto e *\\** em modo hierárquico ou não hierárquico."
		},
		"LISTBOX SET LOCKED COLUMNS": {
			"Syntax": "**LISTBOX SET LOCKED COLUMNS** ( {* ;} *objeto* ; *numColunas* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"numColunas",
					"Integer",
					"->",
					"Número de colunas a bloquear"
				]
			],
			"Summary": "O comando**LISTBOX SET LOCKED COLUMNS** bloqueia as primeiras *numColunas* colunas esquerdas do list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET ROW COLOR": {
			"Syntax": "**LISTBOX SET ROW COLOR** ( {* ;} *objeto* ; *fila* ; *cor* {; *tipoCor*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Variável (se * for omitido)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Numero de fila"
				],
				[
					"cor",
					"Text, Integer",
					"->",
					"Valor de cor RGB"
				],
				[
					"tipoCor",
					"Integer",
					"->",
					"Cor de fonte do Listbox (por padrão) ou cor de fundo do Listbox"
				]
			],
			"Summary": "**Nota:** Este comando só funciona com listboxes de tipo array."
		},
		"LISTBOX SET ROW FONT STYLE": {
			"Syntax": "**LISTBOX SET ROW FONT STYLE** ( {* ;} *objeto* ; *fila* ; *estilo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Variável (se * for omitido)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Número de fila"
				],
				[
					"estilo",
					"Integer",
					"->",
					"Estilo de fonte"
				]
			],
			"Summary": "**Nota:** Este comando só funciona com os list boxes de tipo array."
		},
		"LISTBOX SET ROW HEIGHT": {
			"Syntax": "**LISTBOX SET ROW HEIGHT** ( {* ;} *objeto* ; *linha* ; *altura* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string) Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for omitido) ou variável (se * omitido)"
				],
				[
					"linha",
					"Integer",
					"->",
					"Linha list box cuja altura você quer estabelecer"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura da linha de list box"
				]
			],
			"Summary": "O comando **LISTBOX SET ROW HEIGHT** lhe permite modificar a altura da *fila* especificada no objeto list box designado utilizando os parâmetros *objeto e* *\\**."
		},
		"LISTBOX SET ROWS HEIGHT": {
			"Syntax": "**LISTBOX SET ROWS HEIGHT** ( {* ;} *objeto* ; *altura* {; unidade da altura} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura da linha (em pixels)"
				],
				[
					"unidade da altura",
					"Inteiro longo",
					"->",
					"0 ou se omitido = pixels, 1=linhas"
				]
			],
			"Summary": "O comando LISTBOX SET ROWS HEIGHT lhe permite modificar por programação a altura das filas do objeto list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET STATIC COLUMNS": {
			"Syntax": "**LISTBOX SET STATIC COLUMNS** ( {* ;} *objeto* ; *numColunas* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"numColunas",
					"Integer",
					"->",
					"Número de colunas à converter estáticas"
				]
			],
			"Summary": "O comando **LISTBOX SET STATIC COLUMNS** define as primeiras *numColunas* colunas (começando pela esquerda) no list box designado pelos parâmetros *objeto* e *\\**."
		},
		"LISTBOX SET TABLE SOURCE": {
			"Syntax": "**LISTBOX SET TABLE SOURCE** ( {* ;} *objeto* ; numTabela | tempo  {; *nomeSelecionado*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"numTabela &#124; tempo",
					"Inteiro longo, String",
					"->",
					"Seleção temporária"
				],
				[
					"nomeSelecionado",
					"Text",
					"->",
					"Nome do conjunto selecionado"
				]
			],
			"Summary": "O comando **LISTBOX SET TABLE SOURCE** permite modificar a fonte de dados mostrada no listbox desenhado pelos parâmetros *\\** e *objeto*\n\n**Nota:** este comando só pode ser utilizado quando a propriedade “Fonte de dados” do list box é **Seleção atual** ou **Seleção temporária** (para maior informação, consulte a seção *Gestão de objetos List Box*)."
		},
		"LISTBOX SORT COLUMNS": {
			"Syntax": "**LISTBOX SORT COLUMNS** ( {* ;} *objeto* ; *numColuna* ; *ordenar* {; *numColuna2* ; *ordenar2* ; ... ; *numColunaN* ; *ordenarN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Número da coluna a ordenar"
				],
				[
					"ordenar",
					"*",
					"->",
					"\">\" para ordernar em ordem ascendente ou \"<\" para ordenar em ordem descendente"
				]
			],
			"Summary": "O comando LISTBOX SORT COLUMNS \\[descv\\] ordena as filas do list box designado pelos parâmetros objeto e \\* em função dos valores de uma ou várias colunas."
		},
		"Load 4D View document": {
			"Syntax": "**Load 4D View document** ( *4DViewDocumento* ) : Object",
			"Params": [
				[
					"4DViewDocumento",
					"Blob",
					"->",
					"Documento 4D View"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Representação de objeto no documento 4D View"
				]
			],
			"Summary": "O comando **Load 4D View document** permite converter um documento 4D View é um objeto 4D."
		},
		"Load list": {
			"Syntax": "**Load list** ( *nomeLista* ) : Integer",
			"Params": [
				[
					"nomeLista",
					"Text",
					"->",
					"Nome de uma lista criada no Editor de listas do ambiente Desenho"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência da lista criada recentemente"
				]
			],
			"Summary": "Load list cria uma lista hierárquica cujo conteúdo é copiado da lista passada em *nomeLista*."
		},
		"LOAD RECORD": {
			"Syntax": "**LOAD RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para aqual carregar registros, ou tabela Padrão, se omitido"
				]
			],
			"Summary": "LOAD RECORD carrega o registro atual de *tabela*."
		},
		"LOAD SET": {
			"Syntax": "**LOAD SET** ( {*tabela* ;} *conjunto* ; *documento* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela à qual o conjunto pertence, ou tabela padrão, se omitido"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto a ser criado em memória"
				],
				[
					"documento",
					"Text",
					"->",
					"Documento que contém o conjunto"
				]
			],
			"Summary": "LOAD SET carrega um conjunto desde o arquivo *documento*, criado com o comando SAVE SET."
		},
		"LOAD VARIABLES": {
			"Syntax": "**LOAD VARIABLES** ( *documento* ; *variavel* {; *variavel2* ; ... ; *variavelN*} )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Documento que contém as variáveis 4D"
				],
				[
					"variavel",
					"Variable",
					"<-",
					"variáveis que receberão os valores"
				]
			],
			"Summary": "O comando LOAD VARIABLES carrega uma ou várias variáveis do documento especificado por documento."
		},
		"Localized document path": {
			"Syntax": "**Localized document path** ( *rotaRelativa* ) : Text",
			"Params": [
				[
					"rotaRelativa",
					"Text",
					"->",
					"Rota relativa do documento para qual quer obter a versão localizada"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota de acesso absoluta ao documento localizado"
				]
			],
			"Summary": "O comando Localized document path retorna a rota completa (absoluta) de um documento designado por *rotaRelativa* e localizado na pasta xxx."
		},
		"Localized string": {
			"Syntax": "**Localized string** ( *resNome* ) : Text",
			"Params": [
				[
					"resNome",
					"Text",
					"->",
					"Nome do atributo recurso"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor da string determinar por RecNome na linguagem atual"
				]
			],
			"Summary": "O comando Localized string devolve o valor da string designada pelo atributo *resNome* para a linguagem atual."
		},
		"LOCKED BY": {
			"Syntax": "**LOCKED BY** ( {*tabela* ;} *processo* ; *usuario4D* ; *usuarioSessao* ; *nomeProcesso* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para visualizar os registros bloqueados, ou Tabela Padrão, se omitido"
				],
				[
					"processo",
					"Integer",
					"<-",
					"Nº de referência do processo"
				],
				[
					"usuario4D",
					"Text",
					"<-",
					"Nome do usuário 4D"
				],
				[
					"usuarioSessao",
					"Text",
					"<-",
					"Nome do usuário que abriu a sessão de trabalho"
				],
				[
					"nomeProcesso",
					"Text",
					"<-",
					"Nome do processo"
				]
			],
			"Summary": "LOCKED BY devolve a informação sobre o usuário e o processo que tem bloqueado um registro."
		},
		"Locked records info": {
			"Syntax": "**Locked records info** ( *aTabela* ) : Object",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Tabela da qual obter os registros bloqueados"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Descrição dos registros bloqueados (se houver)"
				]
			],
			"Summary": "O comando **Locked records info** devolve um objeto que contém diferente informação sobre os registros bloqueados atualmente em *aTabela*."
		},
		"Locked": {
			"Syntax": "**Locked** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a marcar para registros atuais bloqueados, ou tabela padrão, se omitido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Registro está bloqueado (TRUE), ou Registros está desbloqueado (FALSE)"
				]
			],
			"Summary": "Locked testa se o registro atual de *tabela* está bloqueado."
		},
		"LOG EVENT": {
			"Syntax": "**LOG EVENT** ( {*tipoSaida* ;} *mensagem* {; *importancia*} )",
			"Params": [
				[
					"tipoSaida",
					"Integer",
					"->",
					"Message output type"
				],
				[
					"mensagem",
					"Text",
					"->",
					"Contents of the message"
				],
				[
					"importancia",
					"Integer",
					"->",
					"Message’s importance level"
				]
			],
			"Summary": "O comando **LOG EVENT** permite configurar um sistema personalizado de registro de eventos internos que ocorrem durante o uso de sua aplicação."
		},
		"LOG FILE TO JSON": {
			"Syntax": "**LOG FILE TO JSON** ( *rotaPastaDest* {; *tamMax* {; *rotaHist* {; *atrCampo*}}} )",
			"Params": [
				[
					"rotaPastaDest",
					"Text",
					"->",
					"Rota da pasta de destino do arquivo salvo"
				],
				[
					"tamMax",
					"Integer",
					"->",
					"Tamanho máximo do arquivo JSON a criar (bytes)"
				],
				[
					"rotaHist",
					"Text",
					"->",
					"Rota do arquivo de histórico a exportar; se omitido, usa o arquivo de histórico atual"
				],
				[
					"atrCampo",
					"Integer",
					"->",
					"Descrição do atributo do campo: 1 = usa número (padrão), 2 = usa nome"
				]
			],
			"Summary": "O comando **LOG FILE TO JSON** salva em formato JSON o arquivo de histórico atual ou todo arquivo de histórico especificado."
		},
		"Log file": {
			"Syntax": "**Log file**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome completo do arquivo de log do banco de dados"
				]
			],
			"Summary": "O comando Log file retorna o nome longo (ou seja, a rota de acesso completa do arquivo, incluindo seu nome) do arquivo de histórico atual do banco de dados aberto."
		},
		"Log": {
			"Syntax": "**Log** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número que você deseja obter o log"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Log de número"
				]
			],
			"Summary": "Log retorna o logaritmo neperiano de *numero*."
		},
		"LONGINT ARRAY FROM SELECTION": {
			"Syntax": "**LONGINT ARRAY FROM SELECTION** ( *tabela* ; *arrayRegistro* {; *seleçao*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da seleção atual"
				],
				[
					"arrayRegistro",
					"Integer array",
					"<-",
					"Array dos números gravados"
				],
				[
					"seleçao",
					"Text",
					"->",
					"Nome da seleção escolhida ou a seleção atual se este parâmetro for omitido"
				]
			],
			"Summary": "O comando LONGINT ARRAY FROM SELECTION preenche o array *arrReg* com os números (absolutos) dos registros que estão em *seleçao*."
		},
		"LONGINT TO BLOB": {
			"Syntax": "**LONGINT TO BLOB** ( *longint* ; *blob* ; *byteOrder* {; offset } )<br/>**LONGINT TO BLOB** ( *longint* ; *blob* ; *byteOrder* {; *} )",
			"Params": [
				[
					"longInt",
					"Integer",
					"->",
					"Valor de tipo Inteiro longo a escrever no BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a receber o valor Inteiro longo"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Ordem de bytes nativo 1 Ordem de bytes Macintosh 2 Ordem de bytes PC"
				],
				[
					"offset &#124; *",
					"Variável, Operador",
					"<->",
					"Offset no BLOB (expressado em bytes) ou * para adicionar o valor"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da escritura se * for omitido"
				]
			],
			"Summary": "O comando LONGINT TO BLOB grava o valor *inteiro longo* de 4-byte no BLOB *blob*."
		},
		"Lowercase": {
			"Syntax": "**Lowercase** ( *cadeia* {; *} ) : Text",
			"Params": [
				[
					"cadeia",
					"Text",
					"->",
					"Cadeia que vai passar para minúsculas"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: manter os acentos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia em letras minúsculas"
				]
			],
			"Summary": "**Lowercase** devolve uma *cadeia* de caracteres igual ao parâmetro *cadeia* com todos os caracteres alfabéticos convertidos para minúsculas."
		},
		"Macintosh command down": {
			"Syntax": "**Macintosh command down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla Comando em Macintosh (tecla Ctrl em Windows)"
				]
			]
		},
		"Macintosh control down": {
			"Syntax": "**Macintosh control down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla Control Macintosh"
				]
			]
		},
		"Macintosh option down": {
			"Syntax": "**Macintosh option down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla de Opção em Macintosh (tecla Alt em Windows)"
				]
			],
			"Summary": "Macintosh option down retorna TRUE se a tecla Opção Macintosh estiver pressionada."
		},
		"Match regex": {
			"Syntax": "**Match regex** ( *padrao* ; *umaCadeia* ; *posiçao* {; pos_encont ; compr_encont}{; *} ) -> Resultado <br/>\n**Match regex** ( *padrao* ; *umaCadeia* ) -> Resultado",
			"Params": [
				[
					"padrao",
					"Text",
					"->",
					"Expressão regular"
				],
				[
					"umaCadeia",
					"Text",
					"->",
					"Cadeia na qual será realizada a pesquisa"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Posição em umaCadeia onde começa a pesquisa"
				],
				[
					"pos_encont",
					"Integer array, Integer",
					"<-",
					"Posição da ocorrência"
				],
				[
					"compr_encont",
					"Integer array, Integer",
					"<-",
					"Comprimento da ocorrência"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado, a função pesquisa apenas na posição indicada"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True=pesquisa encontrou uma ocorrência, se não, False"
				],
				[
					"Match regex ( padrao ; umaCadeia ) -> Resultado"
				],
				[
					"Parâmetro",
					"Tipo",
					"Descrição"
				],
				[
					"padrao",
					"Text",
					"->",
					"Expressão regular (igualdade completa)"
				],
				[
					"umaCadeia",
					"Text",
					"->",
					"Cadeia na qual será realizada a pesquisa"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = pesquisa encontrou uma ocorrência, se não, False"
				]
			],
			"Summary": "O comando **Match regex** permite provar a conformidade de uma cadeia de caracteres relativo a um conjunto de regras sintetizadas por meio de um metalinguagem chamado “expressão regular” ou “expressão racional."
		},
		"Max": {
			"Syntax": "**Max** ( *séries* {; *atributoRota*} ) : any",
			"Params": [
				[
					"séries",
					"Field, Array",
					"->",
					"Dados para os quais se retorna o valor máximo"
				],
				[
					"atributoRota",
					"Text",
					"->",
					"Rota do atributo para o qual retornar o valor máximo"
				],
				[
					"Resultado",
					"Date, Number",
					"<-",
					"Valor máximo na série"
				]
			],
			"Summary": "**Max** retorna o valor máximo em *series*."
		},
		"MAXIMIZE WINDOW": {
			"Syntax": "**MAXIMIZE WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela ou se for omitido, todos os processos atuais de janela de primeiro plano; ou processo atual da janela de primeiro plano (macOS)"
				]
			],
			"Summary": "O comando MAXIMIZE WINDOW provoca a expansão da janela cujo número de referência se passa em *janela*."
		},
		"MEMORY STATISTICS": {
			"Syntax": "**MEMORY STATISTICS** ( *tipoInfo* ; *arrayNomes* ; *arrayValores* ; *arrayContador* )",
			"Params": [
				[
					"tipoInfo",
					"Integer",
					"->",
					"Seletor de informação a ser obtido"
				],
				[
					"arrayNomes",
					"Text array",
					"<-",
					"Títulos da informação"
				],
				[
					"arrayValores",
					"Real array",
					"<-",
					"Valores da informação"
				],
				[
					"arrayContador",
					"Real array",
					"<-",
					"Número de objetos respectivos (se disponível)"
				]
			],
			"Summary": "O comando **MEMORY STATISTICS** recupera informação relacionada ao uso da cache de dados 4D."
		},
		"Menu bar height": {
			"Syntax": "**Menu bar height**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura (expressada em pixeles) da barra de menus (devolve zero se a barra de menus está oculta)"
				]
			],
			"Summary": "Menu bar height retorna a altura da barra menu, expressa em pixels."
		},
		"Menu bar screen": {
			"Syntax": "**Menu bar screen**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número da tela que contém a barra de menus"
				]
			],
			"Summary": "Menu bar screen devolve o número da tela onde está a barra de menus."
		},
		"Menu selected": {
			"Syntax": "**Menu selected** {( *subMenu* )} : Integer",
			"Params": [
				[
					"subMenu",
					"Text",
					"<-",
					"Referência de menu contendo o item selecionado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Comando de menu selecionado \"Palavra Superior\": número de menu Palavra inferior: Número de comando de menu"
				]
			],
			"Summary": "Menu selected é utilizado só quando são mostrados formulários."
		},
		"MESSAGE": {
			"Syntax": "**MESSAGE** ( *mensagem* )",
			"Params": [
				[
					"mensagem",
					"Text",
					"->",
					"Mensagem a exibir"
				]
			],
			"Summary": "O comando **MESSAGE** geralmente se utiliza para informar ao usuário sobre alguma atividade."
		},
		"MESSAGES OFF": {
			"Syntax": "**MESSAGES OFF**",
			"Params": [],
			"Summary": "Os comandos MESSAGES OFF e MESSAGES ON acendem e apagam os termômetros de progressão mostrados por 4D enquanto operações de longa duração são executadas."
		},
		"MESSAGES ON": {
			"Syntax": "**MESSAGES ON**",
			"Params": [],
			"Summary": "Ver a descrição do comando MESSAGES OFF."
		},
		"Method called on error": {
			"Syntax": "**Method called on error** {( *scope* )} : Text",
			"Params": [
				[
					"scope",
					"Integer",
					"->",
					"Escopo/alcance do método de erro"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do método de chamada por erro"
				]
			],
			"Summary": "O comando **Method called on error** retorna o nome do método instalado pelo comando ON ERR CALL para o processo atual ou o e*scope definido*."
		},
		"Method called on event": {
			"Syntax": "**Method called on event**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome de método de chamada de evento"
				]
			],
			"Summary": "O comando Method called on event devolve o nome do método instalado pelo comando ON EVENT CALL."
		},
		"METHOD Get attribute": {
			"Syntax": "**METHOD Get attribute** ( *rota* ; *tipoAtributo* {; *} ) : Boolean",
			"Params": [
				[
					"rota",
					"Text",
					"->",
					"Rota do método projeto"
				],
				[
					"tipoAtributo",
					"Integer",
					"->",
					"Tipo de atributo a obter"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando aplica ao banco de dados local quando é executado desde um componente (parâmetro ignorado fora deste contexto)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Atributo selecionado, do contrário False"
				]
			],
			"Summary": "O comando**METHOD Get attribute**retorna o valor do atributo *tipoAtributo* para o método projeto designado pelo parâmetro *rota*."
		},
		"METHOD GET ATTRIBUTES": {
			"Syntax": "**METHOD GET ATTRIBUTES** ( *caminho* ; *atributos* {; *} )",
			"Params": [
				[
					"caminho",
					"Text, Text array",
					"->",
					"Caminho do método"
				],
				[
					"atributos",
					"Object, Object array",
					"<-",
					"Atributos para métodos selecionados"
				],
				[
					"*",
					"Operador",
					"->",
					"se passado = comando aplica para banco de dados local quando executado a partir de um componente (parâmetro ignorado fora desse contexto)"
				]
			],
			"Summary": "O novo comando **METHOD GET ATTRIBUTES** retorna, em *atributos*, o valor atual de todos os atributos para os métodos especificados no parâmetro *caminho*."
		},
		"METHOD GET CODE": {
			"Syntax": "**METHOD GET CODE** ( *rota* ; *codigo* {; *option*} {; *} )",
			"Params": [
				[
					"rota",
					"Text, Text array",
					"->",
					"Texto ou array de texto que contém uma ou vários caminhos de acesso"
				],
				[
					"codigo",
					"Text, Text array",
					"<-",
					"Código dos métodos designados"
				],
				[
					"option",
					"Integer",
					"->",
					"0 ou omis = exportar simples (sem token), 1 = exportar com tokens"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando é aplicado à base de dados de host quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET CODE** devolve no parâmetro *codigo*, o conteúdo dos métodos designados pelo parâmetro *rota*."
		},
		"METHOD GET COMMENTS": {
			"Syntax": "**METHOD GET COMMENTS** ( *rota* ; *comentários* {; *} )",
			"Params": [
				[
					"rota",
					"Text, Text array",
					"->",
					"Texto ou array de texto que contém uma ou várias rotas de método"
				],
				[
					"comentários",
					"Text, Text array",
					"<-",
					"Comentários dos métodos designados"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET COMMENTS** devolve no parâmetro *comentários*, os comentários dos métodos designados pelo parâmetro *rota*."
		},
		"METHOD GET FOLDERS": {
			"Syntax": "**METHOD GET FOLDERS** ( *arrayNoms* {; *filtro*}{; *} )",
			"Params": [
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Array de nomes de pastas da página de início"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de nomes"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET FOLDERS** devolve no array *arrayNoms*, os nomes das pastas criadas na página Início do Explorador de 4D"
		},
		"METHOD GET MODIFICATION DATE": {
			"Syntax": "**METHOD GET MODIFICATION DATE** ( *rota* ; *dataMod* ; *horaMod* {; *} )",
			"Params": [
				[
					"rota",
					"Text, Text array",
					"->",
					"Texto ou array que contém uma ou mais rotas de acesso"
				],
				[
					"dataMod",
					"Date, Date array",
					"<-",
					"Data(s) de modificação do método"
				],
				[
					"horaMod",
					"Time, Integer array",
					"<-",
					"Hora(s) de modificação do método"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passar = o comando é aplicado ao banco local quando é executado apartir de um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET MODIFICATION DATE** retorna nos parâmetros *dataMod* e *horaMod* as datas e horários da última modificação dos métodos designados pelo parâmetro rota."
		},
		"METHOD GET NAMES": {
			"Syntax": "**METHOD GET NAMES** ( *arrayNoms* {; *filtro*}{; *} )",
			"Params": [
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Arrays de nomes de métodos de projeto"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtros de nomes"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET NAMES** enche o array *arrayNoms* com os nomes dos métodos projeto criados na aplicação."
		},
		"METHOD Get path": {
			"Syntax": "**METHOD Get path** ( *tipoMetodo* {; *aTabela*}{; *nomObjeto*{; *nomObjetoForm*}}{; *} ) : Text",
			"Params": [
				[
					"tipoMetodo",
					"Integer",
					"->",
					"Seletor de tipo objeto"
				],
				[
					"aTable",
					"Table",
					"->",
					"Referência de tabela"
				],
				[
					"nomObjeto",
					"Text",
					"->",
					"Nome de formulário ou método base"
				],
				[
					"nomObjetoForm",
					"Text",
					"<-",
					"Nome do objeto de formulário"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota de acesso completa do objeto"
				]
			],
			"Summary": "O comando **METHOD Get path** devolve a rota de acesso interna completa de um método."
		},
		"METHOD GET PATHS FORM": {
			"Syntax": "**METHOD GET PATHS FORM** ( {*aTabela* ;} *arrRotas* {; *filtro*}{; *marcador*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Referência de tabela"
				],
				[
					"arrRotas",
					"Text array",
					"<-",
					"Arrays de rotas e nomes dos métodos"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtros de nomes"
				],
				[
					"marcador",
					"Real",
					"->",
					"Valor mínimo de marcador"
				],
				[
					"<-",
					"Novo valor atual"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET PATHS FORM** enche o array *arrRotas* com as rotas de acesso internas e os nomes dos métodos de todos os objetos dos formulários assim como também dos métodos formulário."
		},
		"METHOD GET PATHS": {
			"Syntax": "**METHOD GET PATHS** ( {*nomPasta* ;} *tipoMetodo* ; *arrRotas* {; *marcador*}{; *} )",
			"Params": [
				[
					"nomPasta",
					"Text",
					"->",
					"Nome da página da pasta de inicio"
				],
				[
					"tipoMetodo",
					"Integer",
					"->",
					"Seletor de tipo de método a recuperar"
				],
				[
					"arrRotas",
					"Text array",
					"<-",
					"Arrays de rotas e nomes dos métodos"
				],
				[
					"marcador",
					"Real",
					"->",
					"Valor mínimo de marcador"
				],
				[
					"<-",
					"Novo valor atual"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD GET PATHS** enche o array *arrRotas* com as rotas de acesso internas e os nomes dos métodos da aplicação do tipo definido pelo parâmetro *tipoMetodo*."
		},
		"METHOD OPEN PATH": {
			"Syntax": "**METHOD OPEN PATH** ( *rota* {; *line*}{; *} )",
			"Params": [
				[
					"rota",
					"Text",
					"->",
					"Rota do método à abrir"
				],
				[
					"line",
					"Number",
					"->",
					"Line number"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD OPEN PATH** abre, no editor de métodos de 4D, o método cuja rota de acesso interna é passada no parâmetro *rota*."
		},
		"METHOD RESOLVE PATH": {
			"Syntax": "**METHOD RESOLVE PATH** ( *rota* ; *tipoMetodo* ; *prtTabela* ; *nomObjeto* ; *nomObjetoForm* {; *} )",
			"Params": [
				[
					"rota",
					"Text",
					"->",
					"Rota a resolver"
				],
				[
					"tipoMetodo",
					"Integer",
					"<-",
					"Seletor tipo de objeto"
				],
				[
					"prtTabela",
					"Pointer",
					"<-",
					"Referência de tabela"
				],
				[
					"nomObjeto",
					"Text",
					"<-",
					"Nome de formulário ou método de base"
				],
				[
					"nomObjetoForm",
					"Text",
					"<-",
					"Nome de objeto de formulário"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando se aplica à base local quando se executa desde um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD RESOLVE PATH** analisa a rota de acesso interna passada no parâmetro *rota* e devolve seus diferentes componentes nos parâmetros *tipoMetodo*, *ptrTabela*, *nomObjeto* e *nomObjetoForm*."
		},
		"METHOD SET ACCESS MODE": {
			"Syntax": "**METHOD SET ACCESS MODE** ( *modo* )",
			"Params": [
				[
					"modo",
					"Integer",
					"->",
					"Modo de acesso aos objetos bloqueados"
				]
			],
			"Summary": "O comando **METHOD SET ACCESS MODE** permite definir o comportamento de 4D quando intenta acessar em escritura a um objeto que já foi carregado em modificação por outro usuário ou processo ."
		},
		"METHOD SET ATTRIBUTE": {
			"Syntax": "**METHOD SET ATTRIBUTE** ( *rota* ; *tipoAtrib* ; *valorAtrib* {; *tipoAtrib2* ; *valorAtrib2* ; ... ; *tipoAtribN* ; *valorAtribN*}{; *} )",
			"Params": [
				[
					"rota",
					"Text",
					"->",
					"Rota do método projeto"
				],
				[
					"tipoAtrib",
					"Integer",
					"->",
					"Tipo de atributo"
				],
				[
					"valorAtrib",
					"Boolean, Text",
					"->",
					"True = selecionar atributo  False = desfazer a seleção do atributo"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando aplica ao banco de dados local quando é executado de um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD SET ATTRIBUTE** permite definir o valor do atributo tipoAtrib para o método projeto designado pelo parâmetro *rota*."
		},
		"METHOD SET ATTRIBUTES": {
			"Syntax": "**METHOD SET ATTRIBUTES** ( *caminho* ; *atributos* {; *} )",
			"Params": [
				[
					"caminho",
					"Text, Text array",
					"->",
					"Caminho dos métodos"
				],
				[
					"atributos",
					"Object, Object array",
					"->",
					"Atributos a estabelecer para os métodos selecionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = comando aplica ao banco de dados host quando executado a partir de um componente (parâmetro ignorado fora desse contexto)"
				]
			],
			"Summary": "O novo comando **METHOD SET ATTRIBUTES** permite que você defina os valores dos *atributos* para os métodos especificados no parâmetro *caminho*."
		},
		"METHOD SET CODE": {
			"Syntax": "**METHOD SET CODE** ( *rota* ; *codigo* {; *} )",
			"Params": [
				[
					"rota",
					"Text, Text array",
					"->",
					"Texto ou array texto que contém uma ou mais rotas de método"
				],
				[
					"codigo",
					"Text, Text array",
					"->",
					"Código dos métodos designados"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando aplica ao banco de dados local quando é executado de um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD SET CODE** modifica o código dos métodos designados pelo parâmetro *rota* com o conteúdo passado no parâmetro *codigo*."
		},
		"METHOD SET COMMENTS": {
			"Syntax": "**METHOD SET COMMENTS** ( *rota* ; *Comentarios* {; *} )",
			"Params": [
				[
					"rota",
					"Text, Text array",
					"->",
					"Texto ou array texto contendo uma ou mais rotas de método"
				],
				[
					"Comentarios",
					"Text, Text array",
					"->",
					"Comentários dos métodos designados"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = o comando aplica ao banco de dados local quando é executado de um componente (parâmetro ignorado fora deste contexto)"
				]
			],
			"Summary": "O comando **METHOD SET COMMENTS** substitui os comentários dos métodos designados pelo parâmtero *rota* pelos definidos no parâmetro *comentarios*."
		},
		"Milliseconds": {
			"Syntax": "**Milliseconds**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de milissegundos passados desde que se iniciou o equipamento"
				]
			],
			"Summary": "Milliseconds  retorna o número de milissegundos ( 1milisegundo = 1 milésimo de segundo) passados desde que o equipamento foi iniciado."
		},
		"Min": {
			"Syntax": "**Min** ( *series* {; *atributoRota*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Dados para os quais se retorna o valor mínimo"
				],
				[
					"atributoRota",
					"Text",
					"->",
					"Rota do atributo para o qual retorna o valor mínimo"
				],
				[
					"Resultado",
					"Date, Number",
					"<-",
					"Valor mínimo em séries"
				]
			],
			"Summary": "Min devolve o mínimo valor em *series*."
		},
		"MINIMIZE WINDOW": {
			"Syntax": "**MINIMIZE WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência de janela ou se for omitido, todos os processos atuais e janelas de primeiro plano (Windows) ou processo atual de primeiro plano (macOS)"
				]
			],
			"Summary": "O comando MINIMIZE WINDOW define o tamanho da janela, cujo número foi passado em *janela*, do tamanho que tinha antes de ser maximizada."
		},
		"MOBILE APP REFRESH SESSIONS": {
			"Syntax": "**MOBILE APP REFRESH SESSIONS**",
			"Params": [],
			"Summary": "O comando **MOBILE APP REFRESH SESSIONS** comprova todos os arquivos de sessão da aplicação móvel localizados na pasta MobileApps do servidor e atualiza o conteúdo de sessão existente na memória para todo arquivo editado."
		},
		"Mod": {
			"Syntax": "**Mod** ( numero 1 ; numero 2 ) : Real",
			"Params": [
				[
					"numero 1",
					"Inteiro longo",
					"->",
					"Número a ser dividido (dividendo)"
				],
				[
					"numero 2",
					"Inteiro longo",
					"->",
					"Número pelo qual se divide (divisor)"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Devolve o resto da divisão"
				]
			],
			"Summary": "O comando Mod retorna o resto da divisão inteira de *numero1* por *numero2*."
		},
		"Modified record": {
			"Syntax": "**Modified record** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a testar se registro atual foi modificada ou tabela padrão, se omitido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Registro foi modificado (True) ou Registro não foi modificado (False)"
				]
			],
			"Summary": "Modified record devolve True se o registro atual de *tabela* for modificado mas não guardou; do contrário devolve False."
		},
		"Modified": {
			"Syntax": "**Modified** ( *campo* ) : Boolean",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo a provar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadeiro se foi assinalado um novo valor ao campo, caso contrario Falso"
				]
			],
			"Summary": "**Modified** retorna True se um valor tiver sido atribuído por programação a *campo* ou se tiver sido modificado durante a entrada de dados."
		},
		"MODIFY RECORD": {
			"Syntax": "**MODIFY RECORD** ( {*tabela*}{;}{*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a utilizar para entrada de dados ou Tabela por padrão, se omitida"
				],
				[
					"*",
					"Operator",
					"->",
					"Ocultar barras de deslocamento"
				]
			],
			"Summary": "O comando MODIFY RECORD permite ao usuário modificar o registro atual da tabela *tabela* ou da tabela por padrão se é omitido o parâmetro *tabela*."
		},
		"MODIFY SELECTION": {
			"Syntax": "**MODIFY SELECTION** ( {*tabela*}{; *modoSelecao*}{; *entraLista*}{; *}{; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a exibir e modificar, ou tabela padrão, se omitido"
				],
				[
					"modoSelecao",
					"Integer",
					"->",
					"Modo seleção"
				],
				[
					"entraLista",
					"Boolean",
					"->",
					"Permite Enter na lista opção"
				],
				[
					"*",
					"Operator",
					"->",
					"Use formulário de saída para uma seleção de registros e esconder as barras de rolagem no formulário de entrada"
				],
				[
					"*",
					"Operator",
					"->",
					"Mostrar barras de rolagem no formulário de entrada (desativa segunda opção ou o primeiro * opcional)"
				]
			],
			"Summary": "MODIFY SELECTION é quase idêntico ao comando DISPLAY SELECTION."
		},
		"Monitored activity": {
			"Syntax": "**Monitored activity**  : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de atividades monitoradas"
				]
			],
			"Summary": "O comando **Monitored activity** devolve uma coleção de objetos que descrevem operações registradas de acordo com as especificações definidas pelo comando START MONITORING ACTIVITY."
		},
		"Month of": {
			"Syntax": "**Month of** ( *data* ) : Integer",
			"Params": [
				[
					"data",
					"Date",
					"->",
					"Data para a qual devolver o mês"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número que indica o mês da data"
				]
			],
			"Summary": "O comando Month of retorna o mês de *data*."
		},
		"MOUSE POSITION": {
			"Syntax": "**MOUSE POSITION** ( *mouseX* ; *mouseY* ; *botaoMouse* {; *} )",
			"Params": [
				[
					"mouseX",
					"Real",
					"<-",
					"Coordenadas horizontais do mouse"
				],
				[
					"mouseY",
					"Real",
					"<-",
					"Coordenadas verticais do mouse"
				],
				[
					"botaoMouse",
					"Integer",
					"<-",
					"Estado do botão do mouse: 0=botão sem pressionar; 1=botão pressionado; 2= botão direito pressionado; 3=dois botões pressionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Se especificado, sistema global de coordenadas é usado, se omitido, sistema de coordenadas locais é usado"
				]
			],
			"Summary": "O comando MOUSE POSITION retorna o estado atual do mouse."
		},
		"MOVE DOCUMENT": {
			"Syntax": "**MOVE DOCUMENT** ( *rotaFonte* ; *rotaDestino* )",
			"Params": [
				[
					"rotaFonte",
					"Text",
					"->",
					"Nome da rota completa do documento existente"
				],
				[
					"rotaDestino",
					"Text",
					"->",
					"Rota de acesso destino"
				]
			],
			"Summary": "O comando MOVE DOCUMENT move ou renomeia um documento."
		},
		"MULTI SORT ARRAY": {
			"Syntax": "**MULTI SORT ARRAY** ( *array* {; *ordem*}{; *array2* ; *ordem2* ; ... ; *arrayN* ; *ordemN*} ) <br/>\n**MULTI SORT ARRAY** ( *ptrArrayNome*  ; *sortArrayNome*  )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a ser ordenado"
				],
				[
					"ordem",
					"*",
					"->",
					"\">\" para ordernar em ordem crescente ou \"<\" para ordenar em ordem decrescente, se omitido \"aa\" sem ordem"
				],
				[
					"ptrArrayNome",
					"Pointer array",
					"->",
					"Array de um array de ponteiros"
				],
				[
					"sortArrayNome",
					"Integer array",
					"->",
					"Ordenação do array (1 = ordenar em ordem crescente, -1 = ordenar em ordem descrescente, 0 = sincronização com a ordenação anterior)"
				]
			],
			"Summary": "O comando MULTI SORT ARRAY lhe permite realizar um tipo de ordenação multi-nível em um conjunto de arrays."
		},
		"New data key": {
			"Syntax": "**New data key** ( *frasePasse* ) : Object",
			"Params": [
				[
					"frasePasse",
					"Text",
					"->",
					"Frase-passe usada para gerar a chave de criptografia de dados AES"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contém a chave (propriedade encodedKey)"
				]
			],
			"Summary": "O comando **New data key** gera uma chave de cifrado de dados binários a partir do texto passado no parâmetro *frasePasse*."
		},
		"New list": {
			"Syntax": "**New list**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de lista"
				]
			],
			"Summary": "New list cria uma nova lista hierárquica vazia em memória e retorna seu número de referência único."
		},
		"New object": {
			"Syntax": "**New object** {( *propriedade* ; *valor* {; *propriedade2* ; *valor2* ; ... ; *propriedadeN* ; *valorN*} )} : Object",
			"Params": [
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade a criar"
				],
				[
					"valor",
					"any",
					"->",
					"Valor da propriedade"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Novo objeto linguagem"
				]
			],
			"Summary": "O comando **New object** cria um novo objeto vazio ou pré-recheado e devolve sua referência."
		},
		"New process": {
			"Syntax": "**New process** ( *metodo* ; *pilha* {; *nome* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"metodo",
					"Text",
					"->",
					"Método a executar no processo"
				],
				[
					"pilha",
					"Integer",
					"->",
					"Tamanho da pilha em bytes"
				],
				[
					"nome",
					"Text",
					"->",
					"Nome do processo criado"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetros do método"
				],
				[
					"*",
					"Operador",
					"->",
					"Processo único"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número do processo criado recentemente ou do processo que está sendo executado"
				]
			],
			"Summary": "O comando New process inicia um novo processo ( na mesma máquina) e devolve o número deste processo."
		},
		"New shared object": {
			"Syntax": "**New shared object** {( *propriedade* ; *valor* {; *propriedade2* ; *valor2* ; ... ; *propriedadeN* ; *valorN*} )} : Object",
			"Params": [
				[
					"propriedade",
					"Text",
					"->",
					"Nome de propriedade a criar"
				],
				[
					"valor",
					"Text, Date, Boolean, Pointer, Number, Object",
					"->",
					"Valor da propriedade"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Novo objeto compartido"
				]
			],
			"Summary": "O comando **New shared object** cria um novo objeto compartido vazio ou pré-preenchido e devolve sua referência."
		},
		"NEXT RECORD": {
			"Syntax": "**NEXT RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual mover o novo registro selecionado, ou tabela padrão, se omitido"
				]
			],
			"Summary": "NEXT RECORD move o ponteiro do registro atual ao seguinte registro na seleção atual de tabela para o processo atual."
		},
		"Next window": {
			"Syntax": "**Next window** ( *janela* ) : Integer",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de janela"
				]
			]
		},
		"NO DEFAULT TABLE": {
			"Syntax": "**NO DEFAULT TABLE**",
			"Params": [],
			"Summary": "O comando NO DEFAULT TABLE permite cancelar o efeito do comando DEFAULT TABLE."
		},
		"Not": {
			"Syntax": "**Not** ( *booleano*  ) : Boolean",
			"Params": [
				[
					"booleano",
					"Boolean",
					"->",
					"Valor booleano a ser negado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Oposto do booleano"
				]
			],
			"Summary": "A função Not retorna a negação do *booleano*, mudando Verdadeiro por Falso ou Falso por Verdadeiro."
		},
		"NOTIFY RESOURCES FOLDER MODIFICATION": {
			"Syntax": "**NOTIFY RESOURCES FOLDER MODIFICATION**",
			"Params": [],
			"Summary": "O comando NOTIFY RESOURCES FOLDER MODIFICATION \"força\" 4D Server a enviar uma notificação a todas as máquinas conectadas a 4D, indicando que a pasta de Resources do banco de dados foi modificada de modo que eles possam sincronizar sua pasta de recursos locais."
		},
		"Null": {
			"Syntax": "**Null**  : Null",
			"Params": [
				[
					"Resultado",
					"Null",
					"<-",
					"Null value"
				]
			],
			"Summary": "**Null** devolve o valor **null** de tipo *null*."
		},
		"OB Class": {
			"Syntax": "**OB Class** ( *objeto* ) : any",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto cuja classe vai ser retornada"
				],
				[
					"Resultado",
					"Null, Object",
					"<-",
					"Classe do objeto"
				]
			],
			"Summary": "O comando **OB Class** devolve a classe de *objeto* passado no parâmetro."
		},
		"OB Copy": {
			"Syntax": "**OB Copy** ( *objeto* {; resolvePont | {; *opção* {; *groupWith*}}} )  : Object",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"resolvePont",
					"Boolean",
					"->",
					"True = resolve os ponteiros, False ou se omitido = não resolve ponteiros"
				],
				[
					"opção",
					"Integer",
					"->",
					"ck shared: retorna um objeto partilhado, ck resolve pointers: resolve os ponteiros antes de copiar"
				],
				[
					"groupWith",
					"Collection, Object",
					"->",
					"Coleção partilhada ou objeto para ser agrupado com o objeto retornado"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Cópia de objeto"
				]
			],
			"Summary": "O comando **OB Copy** devolve um objeto que contém uma cópia completa das propriedades, sub objetos e valores de *objeto*."
		},
		"OB Entries": {
			"Syntax": "**OB Entries** ( *objeto* ) : Collection",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto para retornar conteúdos"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de objetos com propriedades key/value"
				]
			],
			"Summary": "O comando **OB Entries** retorna uma coleção de objetos contendo os conteúdos de *objeto* como pares de propriedade key/value."
		},
		"OB GET ARRAY": {
			"Syntax": "**OB GET ARRAY** ( *objeto* ; *propriedade* ; *array* )",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade a ler"
				],
				[
					"array",
					"Text array, Real array, Boolean array, Object array, Pointer array, Integer array",
					"<-",
					"Array valor da propriedade"
				]
			],
			"Summary": "O comando **OB GET ARRAY** recupera em *array*, o array de valores armazenados na *propriedade* do objeto de linguagem designado pelo parâmetro *objeto*."
		},
		"OB GET PROPERTY NAMES": {
			"Syntax": "**OB GET PROPERTY NAMES** ( *objeto* ; *arrProp* {; *arrTipos*} )",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto estruturado"
				],
				[
					"arrProp",
					"Text array",
					"<-",
					"Nomes das propriedades"
				],
				[
					"arrTipos",
					"Integer array",
					"<-",
					"Tipos de propriedades"
				]
			],
			"Summary": "O comando **OB GET PROPERTY NAMES** devolve, em *arrProp*, os nomes das propriedades contidas no objeto de linguagem designados pelo parâmetro *objeto* ."
		},
		"OB Get type": {
			"Syntax": "**OB Get type** ( *objeto* ; *propriedade* ) : Integer",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de valor da propriedade"
				]
			],
			"Summary": "O comando **OB Get type** devolve o tipo do valor associado a *propriedade* do *objeto*."
		},
		"OB Get": {
			"Syntax": "**OB Get** ( *objeto* ; *propriedade* {; *tipo*} ) : any",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade a ler"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo ao qual converter o valor"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor atual de propriedade"
				]
			],
			"Summary": "O comando **OB Get** devolve o valor atual da *propriedade* do *objeto*, convertido opcionalmente no *tipo* definido."
		},
		"OB Instance of": {
			"Syntax": "**OB Instance of** ( *objeto* ; *classe* ) : Boolean",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto cuja classe vai ser testada"
				],
				[
					"classe",
					"Object",
					"->",
					"Classe a qual vai testar a pertenência"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se o objeto pertencer à classe especifica ou à uma classe child, senão false"
				]
			],
			"Summary": "O comando **OB Instance of** devolve true se *objeto* pertencer à *classe* ou uma de suas classes filho, e em caso contrário false."
		},
		"OB Is defined": {
			"Syntax": "**OB Is defined** ( *objeto* {; *propriedade*} ) : Boolean",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Se passar = propriedade a verificar, se omitir = verificar o objeto"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Se a propriedade se omite: True se objeto está definido, caso contrário False.<br/>Se a propriedade passar: True se propriedade está definida, caso contrário False"
				]
			],
			"Summary": "O comando**OB Is defined** devolve **True** se *objeto* ou *propriedade* se definem e **False** em caso contrário."
		},
		"OB Is empty": {
			"Syntax": "**OB Is empty** ( *objeto* ) : Boolean",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se objeto está vazio ou indefinido, caso contrário False"
				]
			],
			"Summary": "O comando **OB Is empty** devolve **True** se *objeto* não está definido ou está vazio, e **False** se *objeto* está definido (inicializado) e contém ao menos uma propriedade."
		},
		"OB Is shared": {
			"Syntax": "**OB Is shared** ( *aVerificar* ) : Boolean",
			"Params": [
				[
					"aVerificar",
					"Object, Collection",
					"->",
					"Objeto ou coleção a verificar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se o objeto ou coleção for compartilhável, False se for alterável"
				]
			],
			"Summary": "O comando **OB Is shared** devolve **True** se o objeto ou coleção *aVerificar* é compartido, e **False** em caso contrário (ver *Objetos compartidos e Coleções compartidas*)."
		},
		"OB Keys": {
			"Syntax": "**OB Keys** ( *objeto* ) : Collection",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto a retornar os nomes de propriedade"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de nomes de propriedade (strings)"
				]
			],
			"Summary": "O comando **OB Keys** retorna uma coleção de strings contendo todos os nomes de propriedade enumeráveis do *objeto*."
		},
		"OB REMOVE": {
			"Syntax": "**OB REMOVE** ( *objeto* ; *propriedade* )",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade a remover"
				]
			],
			"Summary": "O comando **OB REMOVE** remove a *propriedade* do objeto de linguagem designado pelo parâmetro *objeto*."
		},
		"OB SET ARRAY": {
			"Syntax": "**OB SET ARRAY** ( *objeto* ; *propriedade* ; *array* )",
			"Params": [
				[
					"objeto",
					"Object, Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade a definir"
				],
				[
					"array",
					"Array, Variable",
					"->",
					"Array a armazenar em propriedade"
				]
			],
			"Summary": "O comando **OB SET ARRAY** define o *array* a ser associado a *propriedade* no objeto definido pelo parâmetro *objeto*."
		},
		"OB SET NULL": {
			"Syntax": "**OB SET NULL** ( *objeto* ; *propriedade* )",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade onde o valor nulo será aplicado"
				]
			],
			"Summary": "O comando **OB SET NULL** armazena o valor **null** no objeto de linguagem designado pelo parâmetro *objeto* ."
		},
		"OB SET": {
			"Syntax": "**OB SET** ( *objeto* ; *propriedade* ; *valor* {; *propriedade2* ; *valor2* ; ... ; *propriedadeN* ; *valorN*} )",
			"Params": [
				[
					"objeto",
					"Object, Object",
					"->",
					"Objeto estruturado"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Nome da propriedade a configurar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Novo valor da propriedade"
				]
			],
			"Summary": "O comando **OB SET** cria ou modifica um ou mais pares de *propriedade*/*valor* no objeto de linguagem designado pelo parâmetro *objeto*."
		},
		"OB Values": {
			"Syntax": "**OB Values** ( *objeto* ) : Collection",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto a retornar valores de propriedade"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de valores propriedade (variante)"
				]
			],
			"Summary": "O comando **OB Values** retorna uma coleção de variantes contendo todas os valores de propriedade enumeráveis de *objeto*."
		},
		"OBJECT DUPLICATE": {
			"Syntax": "**OBJECT DUPLICATE** ( {* ;} *objeto* {; *novoNome* {; *novaVar* {; *relacionadoA* {; *moverH* {; *moverV* {; *redimH* {; *redimV*}}}}}}} {; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Variável ou Campo (se * for omitido)"
				],
				[
					"novoNome",
					"Text",
					"->",
					"Nome do novo objeto"
				],
				[
					"novaVar",
					"Pointer",
					"->",
					"Ponteiro para a variável do novo objeto"
				],
				[
					"relacionadoA",
					"Text",
					"->",
					"Nome do objeto editável anterior (ou do botão de opção)"
				],
				[
					"moverH",
					"Integer",
					"->",
					"Deslocamento horizontal do novo objeto (>0 = a direita, <0 para a esquerda)"
				],
				[
					"moverV",
					"Integer",
					"->",
					"Deslocamento vertical do novo objeto (>0 = para baixo, <0 = para cima)"
				],
				[
					"redimH",
					"Integer",
					"->",
					"Valor do redimensionamento horizontal do objeto"
				],
				[
					"redimV",
					"Integer",
					"->",
					"Valor do redimensionamento vrtical do objeto"
				],
				[
					"*",
					"Operador",
					"->",
					"se especificado = coordenadas absolutadas, se omitida = coordenadas relativas"
				]
			],
			"Summary": "O comando OBJECT DUPLICATE permite criar uma cópia do objeto designado pelo parâmetro *objeto* no contexto do formulário que está sendo executado (modo Aplicação)."
		},
		"OBJECT Get action": {
			"Syntax": "**OBJECT Get action** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, objeto è um nome de objeto (string). Se omitido, objeto é um campo ou variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de Objeto (se * for especificado) ou Campo ou variável (se * for omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da ação padrão associada e (se houver) parâmetro string"
				]
			],
			"Summary": "O comando **OBJECT Get action** devolve o nome e (se for o caso) o parâmetro da ação padrão associada com o objeto designado pelos parâmetros *objeto e* *\\**."
		},
		"OBJECT Get auto spellcheck": {
			"Syntax": "**OBJECT Get auto spellcheck** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável ou campo (se omitido *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = correção automática,False = não correção automática"
				]
			],
			"Summary": "O comando **OBJECT Get auto spellcheck** devolve o estado da opção Correção ortográfica automática do ou dos objeto(s) designado(s) pelos parâmetros *objeto* e *\\** para o processo atual ."
		},
		"OBJECT GET BEST SIZE": {
			"Syntax": "**OBJECT GET BEST SIZE** ( {* ;} *objeto* ; *largIdeal* ; *alturaIdeal* {; *larguraMax*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"largIdeal",
					"Integer",
					"<-",
					"Largura ideal do objeto"
				],
				[
					"alturaIdeal",
					"Integer",
					"<-",
					"Altura ideal do objeto"
				],
				[
					"larguraMax",
					"Integer",
					"->",
					"Altura máxima do objeto"
				]
			],
			"Summary": "O comando **OBJECT GET BEST SIZE** devolve nos parâmetros *largOpt* e *altOpt*, a largo e alto “ótimo” do objeto de formulário designado pelos parâmetros *\\** e *objeto*."
		},
		"OBJECT Get border style": {
			"Syntax": "**OBJECT Get border style** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especifica, objeto é um nome de objeto (cadeia) Se omite, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se for especificado *) ou<br/>Campo ou variável (se for omitido *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estilo de linha de borde"
				]
			],
			"Summary": "O comando **OBJECT Get border style** devolve o estilo de linha de borde do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get context menu": {
			"Syntax": "**OBJECT Get context menu** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Campo ou variável (se * for omitido)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = menu contextual ativo, False = menu contextual inativo"
				]
			],
			"Summary": "O comando **OBJECT Get context menu** devolve o estado atual da opção \"Menú contextual\" do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT GET COORDINATES": {
			"Syntax": "**OBJECT GET COORDINATES** ( {* ;} *objeto* ; *esquerda* ; *superior* ; *direita* ; *inferior* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um  uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"esquerda",
					"Integer",
					"<-",
					"Coordenadas da esquerda do objeto"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenadas superiores do objeto"
				],
				[
					"direita",
					"Integer",
					"<-",
					"Coordenada direita do objeto"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenadas inferiores do objeto"
				]
			],
			"Summary": "O comando **OBJECT GET COORDINATES** devolve as coordenadas *esquerda*, *superior*, *direita* e *inferior* (em pontos) nas variáveis ou campos dos objetos do formulário atual definido pelos parâmetros *\\** e *objeto*."
		},
		"OBJECT Get corner radius": {
			"Syntax": "**OBJECT Get corner radius** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é uma variável ou um campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Campo ou variável (se omitido *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Rádio de esquinas arredondadas (em píxels)"
				]
			],
			"Summary": "O comando **OBJECT Get corner radius** devolve o valor atual do rádio da esquina para o objeto retângulo arredondado cujo nome se passar no parâmetro *objeto*."
		},
		"OBJECT Get data source": {
			"Syntax": "**OBJECT Get data source** ( {* ;} *objeto* ) : Pointer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro a fonte de dados atual do objeto"
				]
			],
			"Summary": "O comando **OBJECT Get data source** devolve a fonte de dados atual dos objetos designados pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT GET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT GET DRAG AND DROP OPTIONS** ( {* ;} *objeto* ; *arrastavel* ; *arrastavelAuto* ; *soltavel* ; *soltavelAuto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"arrastavel",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				],
				[
					"arrastavelAuto",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				],
				[
					"soltavel",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				],
				[
					"soltavelAuto",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				]
			],
			"Summary": "O comando **OBJECT GET DRAG AND DROP OPTIONS** devolve as opções de arrastar e soltar para o objeto o os objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT Get enabled": {
			"Syntax": "**OBJECT Get enabled** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string) se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto ativado: ou então é falso"
				]
			],
			"Summary": "O comando OBJECT Get enabled devolve True se o objeto ou grupo de objetos designado por objeto está ativo no formulário e False se não está ativo."
		},
		"OBJECT Get enterable": {
			"Syntax": "**OBJECT Get enterable** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome objeto (string). Se omitido, objeto é uma variável ou um campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Variável ou campo (se * é omitido)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto editável, ou então, falso"
				]
			],
			"Summary": "O comando OBJECT Get enterable devolve True se o objeto ou grupo de objetos designado por *objeto* tem o atributo **editável**; do contrário, devolve False."
		},
		"OBJECT GET EVENTS": {
			"Syntax": "**OBJECT GET EVENTS** ( {* ;} *objeto* ; *arrEvents* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto \"\" para designar o formulário (se for especificado *) ou<br/>Campo ou variável (se for omitido *)"
				],
				[
					"arrEvents",
					"Integer array",
					"<-",
					"Array de eventos desativados"
				]
			],
			"Summary": "O comando **OBJECT GET EVENTS** permite obter a configuração atual dos eventos formulário do formulário, do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get filter": {
			"Syntax": "**OBJECT Get filter** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome do filtro"
				]
			],
			"Summary": "O comando OBJECT Get filter devolve o nome de todo filtro associado com o objeto ou grupo de objetos designado por *objeto*."
		},
		"OBJECT Get focus rectangle invisible": {
			"Syntax": "**OBJECT Get focus rectangle invisible** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável ou um campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável ou campo (se omitido *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = retângulo de foco oculto, False = retângulo de foco visível"
				]
			],
			"Summary": "O comando **OBJECT Get focus rectangle invisible** devolve o estado da opção de invisibilidade do retângulo de foco do objeto e dos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT Get font size": {
			"Syntax": "**OBJECT Get font size** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Variável ou Campo (se * é omitido)."
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamanho de fonte em pontos"
				]
			],
			"Summary": "O comando OBJECT Get font size devolve o tamanho (em pontos) da fonte utilizada pelo objeto de formulário designado por *objeto*."
		},
		"OBJECT Get font style": {
			"Syntax": "**OBJECT Get font style** ( * ; *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou um campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Variável ou Campo (se * é omitido)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estilo de fonte"
				]
			],
			"Summary": "O comando OBJECT Get font style devolve o estilo atual da fonte utilizada pelo objeto de formulário designado por *objeto*."
		},
		"OBJECT Get font": {
			"Syntax": "**OBJECT Get font** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Variável ou campo (se * for omitido)."
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da fonte"
				]
			],
			"Summary": "O comando OBJECT Get font devolve o nome da fonte utilizada pelo objeto de formulário designado por *objeto*."
		},
		"OBJECT Get format": {
			"Syntax": "**OBJECT Get format** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Exibir formato de objeto"
				]
			],
			"Summary": "O comando **OBJECT Get format** devolve o formato de saída atual aplicado ao objeto especificado no parâmetro *objeto*."
		},
		"OBJECT Get help tip": {
			"Syntax": "**OBJECT Get help tip** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Mensagem de ajuda do objeto"
				]
			],
			"Summary": "O comando **OBJECT Get help tip** devolve a mensagem de ajuda associado ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** no processo atual."
		},
		"OBJECT Get horizontal alignment": {
			"Syntax": "**OBJECT Get horizontal alignment** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de alinhamento"
				]
			],
			"Summary": "O comando **OBJECT Get horizontal alignment** devolve um código indicando o tipo de alinhamento aplicado ao objeto designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get indicator type": {
			"Syntax": "**OBJECT Get indicator type** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de indicador"
				]
			],
			"Summary": "O comando **OBJECT Get indicator type** devolve o tipo do indicador atual atribuído ao termômetro(s) designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get keyboard layout": {
			"Syntax": "**OBJECT Get keyboard layout** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável ou um campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável ou campo(se omitido *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Código da linguagem de configuração, \"\" = sem configuração"
				]
			],
			"Summary": "O comando **OBJECT Get keyboard layout** devolve a configuração do teclado atual associada aos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT Get list name": {
			"Syntax": "**OBJECT Get list name** ( {* ;} *objeto* {; *tipoLista*} ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Variável ou campo (se * for omitido)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: lista de seleção, lista de obrigatórios ou lista de excluídos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da lista de escolha (especificado no modo Desenho)"
				]
			],
			"Summary": "O comando OBJECT Get list name devolve o nome da lista associada ao objeto ou a um grupo de objetos designados por *objeto*."
		},
		"OBJECT Get list reference": {
			"Syntax": "**OBJECT Get list reference** ( {* ;} *objeto* {; *tipoLista*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Campo ou variável (se * for omitido)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: lista de Seleção, lista obrigatória ou a lista de excluídos"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de lista"
				]
			],
			"Summary": "O comando **OBJECT Get list reference** devolve o número de referência (*RefList*) da lista hierárquica associada ao objeto ou grupo de objetos designados pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT GET MAXIMUM VALUE": {
			"Syntax": "**OBJECT GET MAXIMUM VALUE** ( {* ;} *objeto* ; *valorMax* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"valorMax",
					"Date, Time, Number",
					"<-",
					"Valor máximo atual para objeto"
				]
			],
			"Summary": "O comando **OBJECT GET MAXIMUM VALUE** devolve, na variável *valorMax*, o valor máximo atual do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT GET MINIMUM VALUE": {
			"Syntax": "**OBJECT GET MINIMUM VALUE** ( {* ;} *objeto* ; *valorMin* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"valorMin",
					"Date, Time, Number",
					"<-",
					"Valor mínimo atual do objeto"
				]
			],
			"Summary": "O comando **OBJECT GET MINIMUM VALUE** devolve, na variável *valorMin*, o valor mínimo atual do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get multiline": {
			"Syntax": "**OBJECT Get multiline** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estado Multi linha do objeto"
				]
			],
			"Summary": "O comando **OBJECT Get multiline** devolve o estado atual da opção \"Multi linha\" do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT Get name": {
			"Syntax": "**OBJECT Get name** {( *seletor* )} : Text",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Categoria de objeto"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome de objeto"
				]
			],
			"Summary": "O comando OBJECT Get name retorna o nome de um objeto de formulário."
		},
		"OBJECT Get placeholder": {
			"Syntax": "**OBJECT Get placeholder** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto de exemplo associado ao objeto"
				]
			],
			"Summary": "O comando **OBJECT Get placeholder** devolve o texto de exemplo associado ao objeto ou aos objetos designado(s) pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get pointer": {
			"Syntax": "**OBJECT Get pointer** {( *seletor* {; *nomeObjeto* {; *nomeSubformulario*}})} : Pointer",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Categoria objeto"
				],
				[
					"nomeObjeto",
					"Text",
					"->",
					"Nome do objeto"
				],
				[
					"nomeSubformulario",
					"Text",
					"->",
					"Nome de objeto de subformulário"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Ponteiro à variável de objeto"
				]
			],
			"Summary": "O comando OBJECT Get pointer retorna um ponteiro à variável de um objeto de formulário."
		},
		"OBJECT GET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT GET PRINT VARIABLE FRAME** ( {* ;} *objeto* ; *tamVariavel* {; *subformFixo*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"tamVariavel",
					"Boolean",
					"<-",
					"True = Impressão tamanho variável, False = impressão tamanho fixo"
				],
				[
					"subformFixo",
					"Integer",
					"<-",
					"Opção para impressão de sub formulários de tamanho fixo"
				]
			],
			"Summary": "O comando **OBJECT GET PRINT VARIABLE FRAME** obtém a configuração atual das opções de impressão em tamanho variável do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT GET RESIZING OPTIONS": {
			"Syntax": "**OBJECT GET RESIZING OPTIONS** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"horizontal",
					"Integer",
					"<-",
					"Opção de redimensionar horizontalmente"
				],
				[
					"vertical",
					"Integer",
					"<-",
					"Opção de redimensionar verticalmente"
				]
			],
			"Summary": "O comando **OBJECT GET RESIZING OPTIONS** devolve as opções de redimensionar atualmente os objetos designados pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT GET RGB COLORS": {
			"Syntax": "**OBJECT GET RGB COLORS** ( {* ;} *objeto* ; *corPrimeiroPlano* {; *corFundo* {; *corFundoAlternativo*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificar, objeto é um nome de objeto (string) se omitido, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome do objeto (se * é especificado) ou Variável ou Campo (se * é omitido)"
				],
				[
					"corPrimeiroPlano",
					"Text, Integer",
					"<-",
					"Valor da cor RGB do primeiro plano"
				],
				[
					"corFundo",
					"Text, Integer",
					"<-",
					"Valor da cor do RGB para segundo plano (fundo)"
				],
				[
					"corFundoAlternativo",
					"Text, Integer",
					"<-",
					"Valor da cor RGB do fundo alternativo"
				]
			],
			"Summary": "O comando OBJECT GET RGB COLORS devolve as cores de fundo e primeiro plano do objeto ou grupo de objetos designados por *objeto*."
		},
		"OBJECT GET SCROLL POSITION": {
			"Syntax": "**OBJECT GET SCROLL POSITION** ( {* ;} *objeto* ; *vPosicao* {; *hPosicao*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificar, objeto é um nome de objeto (string) se omitir, objeto é uma variável, um campo ou uma tabela."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou variável ou campo ou tabela (se * é omitido)"
				],
				[
					"vPosicao",
					"Integer",
					"<-",
					"Número da primeira linha exibido ou deslocamento vertical em pixels (imagens)"
				],
				[
					"hPosicao",
					"Integer",
					"<-",
					"Número da primeira coluna exibido ou rolagem horizontal em pixels (imagens)"
				]
			],
			"Summary": "OBJECT GET SCROLL POSITION devolve, nos parâmetros *vPosição* e *hPosição*, informação relacionada com a posição das barras de rolagem do objeto de formulário designado pelos parâmetros *\\** e *objeto*."
		},
		"OBJECT GET SCROLLBAR": {
			"Syntax": "**OBJECT GET SCROLLBAR** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável ou um campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"<-",
					"True = exibido, False = escondido"
				],
				[
					"vertical",
					"Boolean, Integer",
					"<-",
					"True = disponível, False = escondido"
				]
			],
			"Summary": "O comando OBJECT GET SCROLLBAR se utiliza para mostrar ou ocultar as barras de deslocamento horizontal e/ou vertical no objeto designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT GET SHORTCUT": {
			"Syntax": "**OBJECT GET SHORTCUT** ( {* ;} *objeto* ; *tecla* ; *modificadores* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"tecla",
					"Text",
					"<-",
					"Tecla associada ao objeto"
				],
				[
					"modificadores",
					"Integer",
					"<-",
					"Máscara ou combinação de máscaras de teclas de modificação"
				]
			],
			"Summary": "O comando **OBJECT GET SHORTCUT** devolve o atalho de teclado associado ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** no processo atual."
		},
		"OBJECT Get style sheet": {
			"Syntax": "**OBJECT Get style sheet** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da folha de estilo"
				]
			],
			"Summary": "O comando **OBJECT Get style sheet** devolve o nome da folha de estilos associada ao objeto ou aos objetos designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT GET SUBFORM CONTAINER SIZE": {
			"Syntax": "**OBJECT GET SUBFORM CONTAINER SIZE** ( *largura* ; *altura* )",
			"Params": [
				[
					"largura",
					"Integer",
					"<-",
					"Largura do objeto sub-formulário"
				],
				[
					"altura",
					"Integer",
					"<-",
					"Altura do objeto sub-formulário"
				]
			],
			"Summary": "O comando **OBJECT GET SUBFORM CONTAINER SIZE** devolve a *largura* e a *altura* (em pixels) de um objeto sub-formulário \"atual\", mostrado no formulário pai."
		},
		"OBJECT Get subform container value": {
			"Syntax": "**OBJECT Get subform container value**  : any",
			"Params": [
				[
					"Resultado",
					"any",
					"<-",
					"Current value of the subform container data source"
				]
			],
			"Summary": "The **OBJECT Get subform container value** command returns the current value of the data source bound with the subform container displayed in the parent form."
		},
		"OBJECT GET SUBFORM": {
			"Syntax": "**OBJECT GET SUBFORM** ( {* ;} *objeto* ; *pontTabela* ; *subFormDet* {; *subFormList*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"pontTable",
					"Table",
					"<-",
					"Ponteiro à tabela do formulário"
				],
				[
					"subFormDet",
					"Text",
					"<-",
					"Nome do formulário detalhado do sub-formulário"
				],
				[
					"subFormList",
					"Text",
					"<-",
					"Nome do formulário listado do sub-formulário (formulário tabela)"
				]
			],
			"Summary": "O comando **OBJECT GET SUBFORM** obtém os nomes dele ou dos formulário(s) associado(s) ao objeto sub-formulário designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get text orientation": {
			"Syntax": "**OBJECT Get text orientation** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especifica, objeto é um nome de objeto (cadeia) Se omite, objeto é um campo ou uma variável"
				],
				[
					"object",
					"any",
					"->",
					"Nome de objeto (se for especificado *) ou Campo ou variável (se for omitido *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Ângulo de rotação de texto"
				]
			],
			"Summary": "O comando **OBJECT Get text orientation** devolve o valor de orientação atual aplicado ao texto do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get three states checkbox": {
			"Syntax": "**OBJECT Get three states checkbox** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = caixa de seleção de três estados, False = caixa de seleção padrão"
				]
			],
			"Summary": "O comando **OBJECT Get three states checkbox** devolve o estado atual da propriedade \"Três estados\" da(s) caixa(s) de seleção designada(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT Get title": {
			"Syntax": "**OBJECT Get title** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objueto é um nome de objeto (string), se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou variável ou campo (se * for omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título do botão"
				]
			],
			"Summary": "O comando OBJECT Get title devolve o título (etiqueta) do objeto de formulário designado por *objeto* ."
		},
		"OBJECT Get type": {
			"Syntax": "**OBJECT Get type** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é uma variável"
				],
				[
					"object",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de objeto"
				]
			],
			"Summary": "The **OBJECT Get type** command returns the type of the object designated by the *object* and *\\** parameters in the current form."
		},
		"OBJECT Get value": {
			"Syntax": "**OBJECT Get value** ( *nomObjeto* ) : any",
			"Params": [
				[
					"nomObjeto",
					"Text",
					"->",
					"Nome do objeto"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor atual da fonte de dados do objeto formulário"
				]
			],
			"Summary": "O comando **OBJECT Get value** retorna o valor atual da fonte de dados para os objetos formulários determinados pelo parâmetro *nomObjeto*."
		},
		"OBJECT Get vertical alignment": {
			"Syntax": "**OBJECT Get vertical alignment** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de alienação"
				]
			],
			"Summary": "O comando **OBJECT Get vertical alignment** devolve um valor indicando o tipo de alinhamento vertical aplicada ao objeto designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT Get visible": {
			"Syntax": "**OBJECT Get visible** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou variável ou campo (se * é omitido)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto visível , ou então False"
				]
			],
			"Summary": "O comando OBJECT Get visible devolve True se o objeto ou grupo de objetos designado por *objeto* tem o atributo visível e do contrário False."
		},
		"OBJECT Is styled text": {
			"Syntax": "**OBJECT Is styled text** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou<br/>Campo ou variável (se omitido *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se o objeto é um texto multi estilo, False em caso contrário"
				]
			],
			"Summary": "O comando **OBJECT Is styled text** devolve **True** se a opção \"Multiestilo\" está selecionada para o(s) objeto(s) designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT MOVE": {
			"Syntax": "**OBJECT MOVE** ( {* ;} *objeto* ; *moverH* ; *moverV* {; *redimH* {; *redimV* {; *}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um  uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Variável (se * é omitido)"
				],
				[
					"moverH",
					"Integer",
					"->",
					"Valor do movimento horizontal do objeto (>0 - para a direita, <0 - para esquerda)"
				],
				[
					"moverV",
					"Integer",
					"->",
					"Valor do movimento vertical do objeto (>0 - para baixo, <0 - para cima)"
				],
				[
					"redimH",
					"Integer",
					"->",
					"Valor do redimensionamento horizontal do objeto"
				],
				[
					"redimV",
					"Integer",
					"->",
					"Valor do redimensionamento vrtical do objeto"
				],
				[
					"*",
					"Operador",
					"->",
					"se especificado = coordenadas absolutas e se omitido = coordenadas relativas"
				]
			],
			"Summary": "O comando OBJECT MOVE permite mover os objetos no formulário atual, definido pelos parâmetros *\\** e *objeto, moveH* píxels horizontalmente e *moveV* píxels verticalmente."
		},
		"OBJECT SET ACTION": {
			"Syntax": "**OBJECT SET ACTION** ( {* ;} *objeto* ; *acao* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, objeto é um nome de objeto (cadeia) Se for omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado ) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"acao",
					"Text",
					"->",
					"Ação para associar"
				]
			],
			"Summary": "O comando **OBJECT SET ACTION** modifica, para o processo atual, a ação estandarte associada ao objeto ou aos objetos designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET AUTO SPELLCHECK": {
			"Syntax": "**OBJECT SET AUTO SPELLCHECK** ( {* ;} *objeto* ; *correAuto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"correAuto",
					"Boolean",
					"->",
					"True = correção automática,False= não correção automática"
				]
			],
			"Summary": "O comando **OBJECT SET AUTO SPELLCHECK** permite definir ou modificar dinamicamente o estado da opção **Correção ortográfica** dos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET BORDER STYLE": {
			"Syntax": "**OBJECT SET BORDER STYLE** ( {* ;} *objeto* ; *estiloBorde* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"estiloBorde",
					"Integer",
					"->",
					"Estilo de linha de borde"
				]
			],
			"Summary": "O comando **OBJECT SET BORDER STYLE** modifica o estilo de linha do borde do objeto(s) designada pelos parâmetros   *objeto* e *\\** ."
		},
		"OBJECT SET CONTEXT MENU": {
			"Syntax": "**OBJECT SET CONTEXT MENU** ( {* ;} *objeto* ; *menuContext* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou<br/>Campo ou variável (se omitido *)"
				],
				[
					"menuContext",
					"Boolean",
					"->",
					"True = ativar o menu contextual, False = desativar o menu contextual"
				]
			],
			"Summary": "O comando **OBJECT SET CONTEXT MENU** ativa ou desativa, para o processo atual, a associação de um menu contextual por padrão ao objeto ou aos objetos designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET COORDINATES": {
			"Syntax": "**OBJECT SET COORDINATES** ( {* ;} *object* ; *esquerda* ; *superior* {; *direita* ; *bottom*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificar, objeto é um nome de objeto (cadeia) Se omite, objeto é um campo ou uma variável"
				],
				[
					"object",
					"Integer",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"esquerda",
					"Integer",
					"->",
					"Coordenada esquerda do objeto em pixels"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada superior do objeto em pixels"
				],
				[
					"direita",
					"Integer",
					"->",
					"Coordenada direita do objeto em pixels"
				],
				[
					"bottom",
					"Integer",
					"->",
					"Coordenada inferior do objeto em pixels"
				]
			],
			"Summary": "The **OBJECT SET COORDINATES** command modifies the location and, optionally, the size of the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET CORNER RADIUS": {
			"Syntax": "**OBJECT SET CORNER RADIUS** ( {* ;} *objeto* ; *radio* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificar, objeto é um nome de objeto (cadeia) Se omitir, objeto é uma variável ou um campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificar *) ou Campo ou variável (se omitir *)"
				],
				[
					"radio",
					"Integer",
					"->",
					"Novo rádio de esquinas arredondadas (em píxels)"
				]
			],
			"Summary": "O comando **OBJECT SET CORNER RADIUS** modifica o rádio das esquinas dos objetos retângulo arredondado cujos nomes passou no parâmetro *objeto*."
		},
		"OBJECT SET DATA SOURCE": {
			"Syntax": "**OBJECT SET DATA SOURCE** ( {* ;} *objeto* ; *fonteDados* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) o<br/>Campo ou variável (se * for omitido)"
				],
				[
					"fonteDados",
					"Pointer",
					"->",
					"Ponteiro a nova fonte de dados do objeto"
				]
			],
			"Summary": "O comando **OBJECT SET DATA SOURCE** modifica a fonte de dados dos objetos designados pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT SET DRAG AND DROP OPTIONS** ( {* ;} *objeto* ; *arrastavel* ; *arrastavelAuto* ; *soltavel* ; *soltavelAuto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"arrastavel",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				],
				[
					"arrastavelAuto",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				],
				[
					"soltavel",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				],
				[
					"soltavelAuto",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				]
			],
			"Summary": "O comando **OBJECT SET DRAG AND DROP OPTIONS** define ou modifica dinamicamente as opções de arrastar e soltar para o objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET ENABLED": {
			"Syntax": "**OBJECT SET ENABLED** ( {* ;} *objeto* ; *ativo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(string), se omitido, objeto é uma variável ou um campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado)ou variável (se * é omitido)"
				],
				[
					"ativo",
					"Boolean",
					"->",
					"True = objeto ativo, ou então False"
				]
			],
			"Summary": "O comando OBJECT SET ENABLED utilizado para ativar ou desativar o objeto ou grupo de objetos especificado por *objeto no* formulário atual."
		},
		"OBJECT SET ENTERABLE": {
			"Syntax": "**OBJECT SET ENTERABLE** ( {* ;} *objeto* ; *editavel* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"editavel",
					"Boolean, Integer",
					"->",
					"True se editável; False para não editável"
				]
			],
			"Summary": "O comando **OBJECT SET ENTERABLE** torna editáveis ou não editáveis os objetos de formulário especificados por *objeto* e podem estabelecer o atributo *focável* \n\n**Note**: Um objeto de formulário focável pode obter o foco e ativar os eventos de formulário *On Getting focus* / *On Losing focus* ."
		},
		"OBJECT SET EVENTS": {
			"Syntax": "**OBJECT SET EVENTS** ( {* ;} *objeto* ; *arrEventos* ; *modo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, objeto é um nome de objeto (cadeia) Se for omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto ou \"\" para designar o formulário (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"arrEventos",
					"Integer array",
					"->",
					"Array de eventos a definir"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo de ativação dos eventos definidos em arrEventos"
				]
			],
			"Summary": "O comando **OBJECT SET EVENTS** modifica, para o processo atual, a configuração dos eventos formulário do formulário, dos objetos designados pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET FILTER": {
			"Syntax": "**OBJECT SET FILTER** ( {* ;} *objeto* ; *filtroEntrada* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"filtroEntrada",
					"Text",
					"->",
					"Novo filtro de entrada de dados para a área editável"
				]
			],
			"Summary": "**OBJECT SET FILTER** substitui o filtro de entrada para os objetos especificados por *objeto* por *filtroEntrada*."
		},
		"OBJECT SET FOCUS RECTANGLE INVISIBLE": {
			"Syntax": "**OBJECT SET FOCUS RECTANGLE INVISIBLE** ( {* ;} *objeto* ; *invisível*  )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"invisível",
					"Boolean",
					"->",
					"True = retângulo de foco oculto, False = retângulo de foco invisível"
				]
			],
			"Summary": "O comando **OBJECT SET FOCUS RECTANGLE INVISIBLE** permite definir ou modificar dinamicamente a opção invisibilidade do retângulo de foco do objeto designado para os parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET FONT SIZE": {
			"Syntax": "**OBJECT SET FONT SIZE** ( {* ;} *objeto* ; *tamanho* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Variável (se * é omitido)"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Tamanho da fonte em pontos"
				]
			],
			"Summary": "OBJECT SET FONT SIZE define o tamanho da fonte dos objetos de formulário especificados por *objeto* utilizando o tamanho de fonte que se passa em *tamanho*."
		},
		"OBJECT SET FONT STYLE": {
			"Syntax": "**OBJECT SET FONT STYLE** ( {* ;} *objeto* ; *estilos* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"estilos",
					"Integer",
					"->",
					"Estilo de fonte"
				]
			],
			"Summary": "OBJECT SET FONT STYLE atribui o estilo de fonte de *estilos* aos objetos de formulário especificados por *objeto*."
		},
		"OBJECT SET FONT": {
			"Syntax": "**OBJECT SET FONT** ( {* ;} *objeto* ; *fonte* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"fonte",
					"Text",
					"->",
					"Nome da fonte ou número da fonte"
				]
			],
			"Summary": "OBJECT SET FONT mostra *objeto* utilizando a fonte especificada no parâmetro *fonte*."
		},
		"OBJECT SET FORMAT": {
			"Syntax": "**OBJECT SET FORMAT** ( {* ;} *objeto* ; *formato* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"formato",
					"Text",
					"->",
					"Novo formato de exibição do objeto"
				]
			],
			"Summary": "OBJECT SET FORMAT substitui o formato de saída para os objetos especificados por *objeto* pelo formato que passa em *formatSaída*."
		},
		"OBJECT SET HELP TIP": {
			"Syntax": "**OBJECT SET HELP TIP** ( {* ;} *objeto* ; *mensagemAjuda* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"mensagemAjuda",
					"Text",
					"->",
					"Conteúdo da mensagem de Ajuda"
				]
			],
			"Summary": "O comando **OBJECT SET HELP TIP** permite definir ou modificar dinamicamente a mensagem de ajuda associado ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET HORIZONTAL ALIGNMENT": {
			"Syntax": "**OBJECT SET HORIZONTAL ALIGNMENT** ( {* ;} *objeto* ; *alinhamento* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"alinhamento",
					"Integer",
					"->",
					"Código de alinhamento"
				]
			],
			"Summary": "O comando **OBJECT SET HORIZONTAL ALIGNMENT** permite determinar o tipo de alinhamento aplicado ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT SET INDICATOR TYPE": {
			"Syntax": "**OBJECT SET INDICATOR TYPE** ( {* ;} *objeto* ; *indicador* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"indicador",
					"Integer",
					"->",
					"Tipo de indicador"
				]
			],
			"Summary": "O comando **OBJECT SET INDICATOR TYPE** modifica o tipo de indicador de progressão do(s) termômetro(s) designado(s) pelos parâmetros *objeto* e *\\** no processo atual."
		},
		"OBJECT SET KEYBOARD LAYOUT": {
			"Syntax": "**OBJECT SET KEYBOARD LAYOUT** ( {* ;} *objeto* ; *codigoLing* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável ou um campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável ou campo (se omitido *)"
				],
				[
					"codigoLing",
					"Text",
					"->",
					"Código de lenguaje RFC3066 ISO639 e ISO3166,\"\" = não muda"
				]
			],
			"Summary": "O comando **OBJECT SET KEYBOARD LAYOUT** permite definir ou modificar dinamicamente a configuração de teclado associada ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET LIST BY NAME": {
			"Syntax": "**OBJECT SET LIST BY NAME** ( {* ;} *objeto* {; *tipoLista*}; *lista* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: lista de seleção, lista de obrigatórios ou lista de excluídos"
				],
				[
					"lista",
					"Text",
					"->",
					"Nome da lista a ser usada como Lista de Escolha (definida no ambiente Desenho)"
				]
			],
			"Summary": "O comando OBJECT SET LIST BY NAME define ou substitui a lista associada ao objeto o grupo de objetos designado por *objeto* A lista cujo nome é passado no parâmetro *lista* deve ter sido criada no editor de listas, em modo Desenho*."
		},
		"OBJECT SET LIST BY REFERENCE": {
			"Syntax": "**OBJECT SET LIST BY REFERENCE** ( {* ;} *objeto* {; *tipoLista*}; *lista* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: Lista de valores, Lista de obrigatórios ou Lista de excluídos"
				],
				[
					"lista",
					"Integer",
					"->",
					"Número de referência de lista"
				]
			],
			"Summary": "O comando **OBJECT SET LIST BY REFERENCE** define ou substitui a lista associada com o objeto ou objetos definidos pelos parâmetros *objeto* e *\\**, com a lista hierárquica definida no parâmetro *lista*."
		},
		"OBJECT SET MAXIMUM VALUE": {
			"Syntax": "**OBJECT SET MAXIMUM VALUE** ( {* ;} *objeto* ; *valorMax* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto(cadeia) Se omitido, objeto é um campo ou variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome do objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"valorMax",
					"Date, Time, Number",
					"->",
					"Valor máximo para o objeto"
				]
			],
			"Summary": "O comando **OBJECT SET MAXIMUM VALUE** modifica o valor máximo do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET MINIMUM VALUE": {
			"Syntax": "**OBJECT SET MINIMUM VALUE** ( {* ;} *objeto* ; *valorMinimo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omite, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"valorMinimo",
					"Date, Time, Number",
					"->",
					"Valor mínimo para o objeto"
				]
			],
			"Summary": "O comando **OBJECT SET MINIMUM VALUE** modifica o valor mínimo do objeto ou dos objetos designado(s) pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET MULTILINE": {
			"Syntax": "**OBJECT SET MULTILINE** ( {* ;} *objeto* ; *multilinha* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se for especificado *) ou<br/>campo ou variável (se for omitido *)"
				],
				[
					"multilinha",
					"Integer",
					"->",
					"Estado da propriedade multi linha"
				]
			],
			"Summary": "O comando **OBJECT SET MULTILINE** modifica a propriedade \"Multilinha\" do objeto(s) designada pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET PLACEHOLDER": {
			"Syntax": "**OBJECT SET PLACEHOLDER** ( {* ;} *objeto* ; *textoExemplo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"textoExemplo",
					"Text",
					"->",
					"Texto de exemplo associado ao objeto"
				]
			],
			"Summary": "O comando **OBJECT SET PLACEHOLDER** associa um texto de exemplo ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT SET PRINT VARIABLE FRAME** ( {* ;} *objeto* ; *marcoVariavel* {; *subFormFixo*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"marcoVariavel",
					"Boolean",
					"->",
					"True = Impressão de marco variável, False = Impressão de marco fixo"
				],
				[
					"subFormFixo",
					"Integer",
					"->",
					"Opções impressão de sub formulários em tamanho fixo"
				]
			],
			"Summary": "O comando **OBJECT SET PRINT VARIABLE FRAME** modifica a propriedade de marco de impressão variável do objeto ou dos objetos designados pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT SET RESIZING OPTIONS": {
			"Syntax": "**OBJECT SET RESIZING OPTIONS** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"Opção de redimensionamento horizontal"
				],
				[
					"vertical",
					"Integer",
					"->",
					"Opção de redimensionamento vertical"
				]
			],
			"Summary": "O comando **OBJECT SET RESIZING OPTIONS** permite definir ou modificar dinamicamente as opções de redimensionamento do objeto ou dos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET RGB COLORS": {
			"Syntax": "**OBJECT SET RGB COLORS** ( {* ;} *objeto* ; *corPrimeiroPlano* {; *corFundo* {; *corFundoAlternativo*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"corPrimeiroPlano",
					"Text, Integer",
					"->",
					"Valor de cor RGB para a cor de Primeiro Plano"
				],
				[
					"corFundo",
					"Text, Integer",
					"->",
					"Valor RGB da cor de Fundo"
				],
				[
					"corFundoAlternativo",
					"Text, Integer",
					"->",
					"Valor RGB da cor de fundo alternativa"
				]
			],
			"Summary": "O comando OBJECT SET RGB COLORS modifica as cores de fundo e primeiro plano dos objetos especificados por objeto e o parâmetro opcional \\*."
		},
		"OBJECT SET SCROLL POSITION": {
			"Syntax": "**OBJECT SET SCROLL POSITION**   ( * ; *objeto* {; *posiçao* {; *hPosicao*}}{; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Tabela ou Campo ou Variável (se * é omitido)"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Número da fila a selecionar ou rolagem vertical em pixels (imagens)"
				],
				[
					"hPosicao",
					"Integer",
					"->",
					"Número de coluna a exibir (list box) ou rolagem horizontal em pixels (imagens)"
				],
				[
					"*",
					"Operador",
					"->",
					"Exibição da linha (e coluna se parâmetro hPosição é passada) na primeira posição após rolagem."
				]
			],
			"Summary": "O comando OBJECT SET SCROLL POSITION permite deslocar o conteúdo de vários tipos de objetos: linhas de um subformulário, de um formulário listado mostrado utilizando os comandos MODIFY SELECTION, DISPLAY SELECTION ou de uma lista hierárquica, linhas e colunas de um list box ou inclusive os píxels de uma imagem."
		},
		"OBJECT SET SCROLLBAR": {
			"Syntax": "**OBJECT SET SCROLLBAR** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"->",
					"True = exibir, False = esconder"
				],
				[
					"vertical",
					"Boolean, Integer",
					"->",
					"True = exibir, False = esconder"
				]
			],
			"Summary": "O comando OBJECT SET SCROLLBAR lhe permite mostrar ou ocultar as barras de rolagem horizontal ou vertical no objeto designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT SET SHORTCUT": {
			"Syntax": "**OBJECT SET SHORTCUT** ( {* ;} *objeto* ; *tecla* {; *modifiers*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável ou um campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável ou campo (se omitido *)"
				],
				[
					"tecla",
					"Text",
					"->",
					"Tecla à associar ao objeto"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"Modifier key mask or combination of masks"
				]
			],
			"Summary": "O comando **OBJECT SET SHORTCUT** permite definir ou modificar dinamicamente o atalho de teclado associado ao objeto ou aos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET STYLE SHEET": {
			"Syntax": "**OBJECT SET STYLE SHEET** ( {* ;} *objeto* ; *nomFolhaEstilo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"nomFolhaEstilo",
					"Text",
					"->",
					"Nome da folha de estilo"
				]
			],
			"Summary": "O comando **OBJECT SET STYLE SHEET** modifica, para o processo atual, a folha de estilo associada ao objeto(s) designado(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET SUBFORM CONTAINER VALUE": {
			"Syntax": "**OBJECT SET SUBFORM CONTAINER VALUE** ( *value* )",
			"Params": [
				[
					"value",
					"any",
					"->",
					"New value for the data source"
				]
			],
			"Summary": "The **OBJECT SET SUBFORM CONTAINER VALUE** command sets the current value of the data source bound with the subform container displayed in the parent form."
		},
		"OBJECT SET SUBFORM": {
			"Syntax": "**OBJECT SET SUBFORM** ( {* ;} *objeto* {; *aTabela*}; *subFormDet* {; *subFormList*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"aTable",
					"Table",
					"->",
					"Tabela de formulário (se tabela de formulário)"
				],
				[
					"subFormDet",
					"Text, Object",
					"->",
					"Nome do formulário detalhado de sub-formulário"
				],
				[
					"subFormList",
					"Text, Object",
					"->",
					"Nome do formulário listado de sub-formulário (formulário tabela)"
				]
			],
			"Summary": "O comando **OBJECT SET SUBFORM** permite modificar dinamicamente o formulário detalhado assim também, opcionalmente, o formulário listado associado ao objeto sub-formulário designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT SET TEXT ORIENTATION": {
			"Syntax": "**OBJECT SET TEXT ORIENTATION** ( {* ;} *objeto* ; *orientacao* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"orientacao",
					"Integer",
					"->",
					"Valor de orientação do objeto"
				]
			],
			"Summary": "O comando **OBJECT SET TEXT ORIENTATION** modifica a orientação do conteúdo do objeto ou dos objetos designados pelos parâmetros *objeto* e *\\** para o processo atual."
		},
		"OBJECT SET THREE STATES CHECKBOX": {
			"Syntax": "**OBJECT SET THREE STATES CHECKBOX** ( {* ;} *objeto* ; *tresEsta* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, objeto é um nome de objeto (cadeia) Se for omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado ) ou Campo ou variável (se * for omitido)"
				],
				[
					"tresEsta",
					"Boolean",
					"->",
					"True = caixa de seleção de três estados, False = caixa de seleção padrão"
				]
			],
			"Summary": "O comando **OBJECT SET THREE STATES CHECKBOX**  modifica para o processo atual, a propriedade de \"Três Estados\" da(s) caixa(s) de seleção designada(s) pelos parâmetros *objeto* e *\\** ."
		},
		"OBJECT SET TITLE": {
			"Syntax": "**OBJECT SET TITLE** ( {* ;} *objeto* ; *titulo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Variável (se * é omitido)"
				],
				[
					"titulo",
					"Text",
					"->",
					"Novo título do objeto"
				]
			]
		},
		"OBJECT SET VALUE": {
			"Syntax": "**OBJECT SET VALUE** ( *nomObjeto* ; *valor* )",
			"Params": [
				[
					"nomObjeto",
					"Text",
					"->",
					"Nome de objeto"
				],
				[
					"valor",
					"any",
					"->",
					"Novo valor para a fonte de dados do objeto formulário"
				]
			],
			"Summary": "**OBJECT SET VALUE** estabelece *valor* da fonte de dados atual para os objetos formulário determinados pelo parâmetro *nomObjeto*."
		},
		"OBJECT SET VERTICAL ALIGNMENT": {
			"Syntax": "**OBJECT SET VERTICAL ALIGNMENT** ( {* ;} *objeto* ; *alinhamento* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia)Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se especificado *) ou Variável (se omitido *)"
				],
				[
					"alinhamento",
					"Integer",
					"->",
					"Código de alinhamento"
				]
			],
			"Summary": "O comando **OBJECT SET VERTICAL ALIGNMENT** modifica por programação o tipo de alinhamento vertical aplicada ao objeto designado pelos parâmetros *objeto* e *\\**."
		},
		"OBJECT SET VISIBLE": {
			"Syntax": "**OBJECT SET VISIBLE** ( {* ;} *objeto* ; *visivel* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* é especificado) ou Campo ou Variável (se * é omitido)"
				],
				[
					"visivel",
					"Boolean",
					"->",
					"True para visível, False para invisível"
				]
			],
			"Summary": "O comando OBJECT SET VISIBLE mostra ou oculta os objetos especificados por *objeto*."
		},
		"Object to path": {
			"Syntax": "**Object to path** ( *objRota* ) : Text",
			"Params": [
				[
					"objRota",
					"Object",
					"->",
					"Objeto que descreve os conteúdos da rota"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da rota"
				]
			],
			"Summary": "O comando **Object to path** devolve um nome de rota (string) em função da informação de rota que passou no parâmetro *objRota*."
		},
		"OLD RELATED MANY": {
			"Syntax": "**OLD RELATED MANY** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Um Campo"
				]
			]
		},
		"OLD RELATED ONE": {
			"Syntax": "**OLD RELATED ONE** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Muitos campos"
				]
			],
			"Summary": "OLD RELATED ONE funciona da mesma forma que RELATE ONE, com a diferença de que OLD RELATED ONE utiliza o valor anterior de *campo* para estabelecer a relação."
		},
		"Old": {
			"Syntax": "**Old** ( *campo* ) : any",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo ao qual devolver o valor anterior"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor original do campo"
				]
			],
			"Summary": "O comando Old devolve o valor armazenado em *campo* antes de que se tenha atribuído um valor por programação ou modificado durante a entrada de dados."
		},
		"On Backup Shutdown database method": {
			"Syntax": "On Backup Shutdown ($status)",
			"Params": [
				[
					"$status",
					"Integer",
					"<-",
					"0 = backup executed correctly; other value = error, interrupted by user or code returned by On Backup Startup"
				]
			],
			"Summary": "O On Backup Shutdown database method é chamado a cada vez que o backup do banco de dados termina."
		},
		"On Backup Startup database method": {
			"Syntax": "**On Backup Startup database method**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"0 = backup can be launched; value other than 0 = backup not authorized"
				]
			],
			"Summary": "O *Método de banco de dados On Backup Startup* é chamado cada vez que um backup está a ponto de ser iniciado (backup manual, backup automático programado, ou utilizando o comando BACKUP)."
		},
		"On Drop database method": {
			"Syntax": "**On Drop database method**",
			"Params": [],
			"Summary": "O On Drop database method está disponível em aplicações 4D locais ou remotas."
		},
		"ON ERR CALL": {
			"Syntax": "**ON ERR CALL** ( *metodoErro* {; *escopo*} )",
			"Params": [
				[
					"metodoErro",
					"Text",
					"->",
					"Método de erro a ser chamado, ou string Vazia para não capturar erros"
				],
				[
					"escopo",
					"Integer",
					"->",
					"Escopo do método de erro"
				]
			],
			"Summary": "O comando **ON ERR CALL** instala o método de projeto, cujo nome se passa em *metodoErro*, como método de tratamento de ocorrências ou método de gestão de erros."
		},
		"ON EVENT CALL": {
			"Syntax": "**ON EVENT CALL** ( *metodoEvento* {; *nomeProcesso*} )",
			"Params": [
				[
					"metodoEvento",
					"Text",
					"->",
					"Método evento a ser invocado, ou cadeia vazia para parar eventos interceptados"
				],
				[
					"nomeProcesso",
					"Text",
					"->",
					"Nome do processo"
				]
			],
			"Summary": "O comando **ON EVENT CALL** instala o método, cujo nome se passa em *metodoEvento*, como método de gestão de eventos."
		},
		"On Exit database method": {
			"Syntax": "**Método banco de dados On Exit**",
			"Params": [],
			"Summary": "O Método banco de dados On Exit é chamado quando se sai do banco."
		},
		"On Host Database Event database method": {
			"Syntax": "On Host Database Event (*$event* : Integer)",
			"Params": [
				[
					"$event",
					"Integer",
					"<-",
					"Código do evento"
				]
			],
			"Summary": "O **On Host Database Event database method** permite aos recipientes 4D executar código quando se abre e fecha a base local."
		},
		"On Mobile App Action database method": {
			"Syntax": "$1 -> On Mobile App Action database method : Object",
			"Params": [
				[
					"$1",
					"Objeto",
					"->",
					"Informação passada pela aplicação móvel"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado da ação e sincronização de dados"
				]
			],
			"Summary": "**Documentação trasladada**"
		},
		"On Mobile App Authentication database method": {
			"Syntax": "**On Mobile App Authentication database method** ( *mobileinfo* ; *status* )",
			"Params": [
				[
					"mobileinfo",
					"Object",
					"->",
					"Informação passada pela aplicação móvel"
				],
				[
					"status",
					"Object",
					"<-",
					"Status de autenticação"
				]
			],
			"Summary": "**Documentação movida**\n\nA documentação desse método foi atualizada e movida para [developer."
		},
		"On REST Authentication database method": {
			"Syntax": "$1, $2, $3, $4 -> On REST Authentication database method : Boolean",
			"Params": [
				[
					"$1",
					"Texto",
					"<-",
					"Nome de usuário"
				],
				[
					"$2",
					"Texto",
					"<-",
					"Senha"
				],
				[
					"$3",
					"Booleano",
					"<-",
					"True = modo Digest, False = modo Basic"
				],
				[
					"$4",
					"Texto",
					"<-",
					"Endereço IP do caller"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = pedido aceito, False = pedido rejeitado"
				]
			],
			"Summary": "**On REST Authentication database method** está obsoleto em projetos desde 4D 20 R6."
		},
		"On Server Close Connection database method": {
			"Syntax": "On Server Close Connection ($user : Integer ; $id : Integer ; $toIgnore : Integer)",
			"Params": [
				[
					"$user",
					"Integer",
					"<-",
					"Número de usuário utilizado internamente por 4D Server para identificar usuários"
				],
				[
					"$id",
					"Integer",
					"<-",
					"Número de conexão utilizado internamente por 4D Server para identificar uma conexão"
				],
				[
					"$toIgnore",
					"Integer",
					"<-",
					"Obsoleto: devolve sempre 0 mas deve ser declarado"
				]
			],
			"Summary": "O **On Server Close Connection database method** é chamado no computador servidor cada vez que termina um processo 4D Client."
		},
		"On Server Open Connection database method": {
			"Syntax": "On Server Open Connection($user : Integer ; $id : Integer ; $toIgnore : Integer) -> $status : Boolean",
			"Params": [
				[
					"$user",
					"Integer",
					"<-",
					"Número de usuário utilizado internamente por 4D Server para identificar os usuários"
				],
				[
					"$id",
					"Integer",
					"<-",
					"Número de conexão utilizado internamente por 4D Server para identificar uma conexão"
				],
				[
					"$toIgnore",
					"Integer",
					"<-",
					"Obsoleto: devolve sempre 0 (mas deve ser declarado)"
				],
				[
					"$status",
					"Integer",
					"<-",
					"0 se omitido = conexão aceita; outro valor = conexão rejeitada"
				]
			],
			"Summary": "O **On Server Open Connection database method** é chamado uma vez no equipo servidor cada vez que um equipo remoto 4D inicia um processo de conexão."
		},
		"On Server Shutdown database method": {
			"Syntax": "**On Server Shutdown database method**",
			"Params": [],
			"Summary": "O On Server Shutdown database method é chamado uma vez na máquina servidor quando a base atual é fechada em 4D Server."
		},
		"On Server Startup database method": {
			"Syntax": "**On Server Startup database method**",
			"Params": [],
			"Summary": "O On Server Startup database method é chamado uma vez na máquina servidor quando abre uma base com 4D Server."
		},
		"On SQL Authentication database method": {
			"Syntax": "$user, $pw, $ip -> On SQL Authentication database method : Boolean",
			"Params": [
				[
					"$user",
					"Texto",
					"<-",
					"Nome de usuário"
				],
				[
					"$pw",
					"Texto",
					"<-",
					"Senha"
				],
				[
					"$ip",
					"Texto",
					"<-",
					"(Opcional) endereço IP de cliente na origem do pedido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadeiro = pedido aceito, Falso = pedido recusado"
				]
			],
			"Summary": "O On SQL Authentication database method pode ser utilizado para filtrar os pedidos enviados ao servidor SQL integrado de 4D."
		},
		"On Startup database method": {
			"Syntax": "**Método banco de dados On Startup**",
			"Params": [],
			"Summary": "O Método banco de dados On Startup é chamada uma vez que se abra um banco."
		},
		"On System Event database method": {
			"Syntax": "$event -> Método base de dados On System Event",
			"Params": [
				[
					"$event",
					"Integer",
					"<-",
					"Código do evento"
				]
			],
			"Summary": "O método **Método base de dados On System Event** é chamado toda vez que ocorre um evento sistema."
		},
		"On Web Authentication database method": {
			"Syntax": "$url, $http, $ipBrowser, $ipServer, $user, $pw -> On Web Authentication database method : Boolean",
			"Params": [
				[
					"$url",
					"Texto",
					"<-",
					"URL"
				],
				[
					"$http",
					"Texto",
					"<-",
					"cabeçalho HTTP + corpo HTTP"
				],
				[
					"$ipBrowser",
					"Texto",
					"<-",
					"Endereço IP do navegador"
				],
				[
					"$ipServer",
					"Texto",
					"<-",
					"Endereço IP do servidor"
				],
				[
					"$user",
					"Texto",
					"<-",
					"Nome de usuário"
				],
				[
					"$pw",
					"Texto",
					"<-",
					"Senha"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadeiro = pedido aceito, Falso = pedido recusado"
				]
			],
			"Summary": "O On Web Authentication database method administra o acesso ao motor do servidor web."
		},
		"On Web Connection database method": {
			"Syntax": "On Web Connection($url : Text ; $http : Text ; $ipBrowser : Text ; $ipServer : Text ; $user : Text ; $pw : Text) -> $result : Boolean",
			"Params": [
				[
					"$url",
					"Texto",
					"<-",
					"URL"
				],
				[
					"$http",
					"Texto",
					"<-",
					"cabeçalho HTTP + corpo HTTP"
				],
				[
					"$ipBrowser",
					"Texto",
					"<-",
					"Endereço IP do navegador"
				],
				[
					"$ipServer",
					"Texto",
					"<-",
					"Endereço IP do servidor"
				],
				[
					"$user",
					"Texto",
					"<-",
					"Nome de usuário"
				],
				[
					"$pw",
					"Texto",
					"<-",
					"Senha"
				]
			],
			"Summary": "O On Web Connection database method pode ser chamado nos seguintes casos:  \n\n* o servidor web recebe uma petição que começa pelo URL *4DCGI*."
		},
		"On Web Legacy Close Session database method": {
			"Syntax": "**On Web Legacy Close Session database method**",
			"Params": [],
			"Summary": "Este método de banco de dados só pode ser usado com **sessões legado web** disponíveis em bancos de dados convertidos de versões anteriores a 4D v18 R6\\."
		},
		"ONE RECORD SELECT": {
			"Syntax": "**ONE RECORD SELECT** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual reduzir a seleção ao registro atual, ou tabela padrão, se omitido"
				]
			],
			"Summary": "ONE RECORD SELECT reduza seleção atual de *tabela* ao registro atual."
		},
		"OPEN ADMINISTRATION WINDOW": {
			"Syntax": "**OPEN ADMINISTRATION WINDOW**",
			"Params": [],
			"Summary": "O comando OPEN ADMINISTRATION WINDOW exibe a janela de administração do servidor no equipo que executa."
		},
		"OPEN COLOR PICKER": {
			"Syntax": "**OPEN COLOR PICKER** {( *textOrBackground* )}",
			"Params": [
				[
					"textOrBackground",
					"Integer",
					"->",
					"0 ou se omite = cor do texto, 1 = cor do fundo do texto"
				]
			],
			"Summary": "O comando **OPEN COLOR PICKER** mostra a caixa de diálogo de seleção de cor do sistema."
		},
		"OPEN DATA FILE": {
			"Syntax": "**OPEN DATA FILE** ( *endAcesso* )",
			"Params": [
				[
					"endAcesso",
					"Text",
					"->",
					"Nome o endereço de acesso completo ao arquivo de dados a ser aberto"
				]
			],
			"Summary": "O comando **OPEN DATA FILE** permite alterar os dados do arquivo aberto pela aplicação 4D on-the-fly."
		},
		"OPEN DATABASE": {
			"Syntax": "**OPEN DATABASE** ( *filePath* )",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"Nome ou via de acesso completa do arquivo de base de dados a abrir (.4db, .4dc, .4dbase ou .4dlink)"
				]
			],
			"Summary": "O comando **OPEN DATABASE** fecha o banco de dados 4D atual e abre, com o processo em andamento, o banco definido por *rotaArquivo*."
		},
		"Open document": {
			"Syntax": "**Open document** ( *documento* {; *tipoArquivo*}{; *modo*} ) : Time",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome de documento ou rota de acesso completa ou string vazia para caixa de diálogo de arquivo"
				],
				[
					"tipoArquivo",
					"Text",
					"->",
					"Lista de tipos de documentos a serem pesquisados, ou \"*\" para não pesquisar os documentos"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo de abertura do documento"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referência de documento"
				]
			],
			"Summary": "O comando Open document abre o documento cujo nome ou rota de acesso se passa em *documento*."
		},
		"OPEN FONT PICKER": {
			"Syntax": "**OPEN FONT PICKER**",
			"Params": [],
			"Summary": "O comando **OPEN FONT PICKER** mostra a caixa de diálogo de seleção de fonte do sistema ."
		},
		"Open form window": {
			"Syntax": "**Open form window** ( {*tabela* ;} *nomeForm* {; *tipo* {; *hPos* {; *vPos* {; *}}}} ) : Integer",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela do formulário ou tabela padrão, se omitido"
				],
				[
					"nomeForm",
					"Text, Object",
					"->",
					"Nome do formulário"
				],
				[
					"tipo",
					"Integer",
					"->",
					"tipo de janela"
				],
				[
					"hPos",
					"Integer",
					"->",
					"Posição horizontal da janela"
				],
				[
					"vPos",
					"Integer",
					"->",
					"Posição vertical da janela"
				],
				[
					"*",
					"Operador",
					"->",
					"Salvar posição atual e tamanho da janela"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de janela"
				]
			],
			"Summary": "O comando Open form window abre uma nova janela utilizando as propriedades de tamanho e de redimensionamentos do formulário *nomForm*."
		},
		"OPEN PRINTING JOB": {
			"Syntax": "**OPEN PRINTING JOB**",
			"Params": [],
			"Summary": "O comando OPEN PRINTING JOB abre uma tarefa de impressão e empilha todas as ordens de impressão executadas até que se chame o comando CLOSE PRINTING JOB."
		},
		"Open resource file": {
			"Syntax": "**Open resource file** ( *resNomArq* {; *tipoArquivo*} ) : Time",
			"Params": [
				[
					"resNomArq",
					"Text",
					"->",
					"Nome curto ou longo ou arquivo de resource ou string Vazia para caixa de diálogo Abrir Arquivo"
				],
				[
					"tipoArquivo",
					"Text",
					"->",
					"Tipo de arquivo Mac OS (string de 4-caracteres), ou arquivo de extensao Windows  (string 1- a 3-caracteres), ou Todos arquivos, se omitido."
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referência do arquivo de Resouce"
				]
			],
			"Summary": "O comando **Open resource file** abre o arquivo de recursos cujo nome ou rota de acesso completa se passa em *resNomArquivo*."
		},
		"OPEN RUNTIME EXPLORER": {
			"Syntax": "**OPEN RUNTIME EXPLORER**",
			"Params": [],
			"Summary": "O comando OPEN RUNTIME EXPLORER exibe o Runtime Explorer em uma janela flutuante."
		},
		"OPEN SECURITY CENTER": {
			"Syntax": "**OPEN SECURITY CENTER**",
			"Params": [],
			"Summary": "O comando OPEN SECURITY CENTERmostra a janela do Centro de segurança e manutenção (CSM)."
		},
		"OPEN SETTINGS WINDOW": {
			"Syntax": "**OPEN SETTINGS WINDOW** ( *seletor* {; *acesso* {; *tipoConfiguração*}} )",
			"Params": [
				[
					"seletor",
					"Text",
					"->",
					"Chave que designa um tema ou página ou um grupo de parâmetros da caixa de diálogo Preferências"
				],
				[
					"acesso",
					"Boolean",
					"->",
					"True=Bloquear as outras páginas da caixa de diálogo, False ou se omitir=Deixar ativas as outras páginas da caixa de diálogo"
				],
				[
					"tipoConfiguração",
					"Integer",
					"->",
					"0 ou omitido = configuração da estrutura; 1 = configuração de usuário, 2 = Configuração usuário para arquivo de dados"
				]
			]
		},
		"OPEN URL": {
			"Syntax": "**OPEN URL** ( *rota* {; *appName*}{; *} )",
			"Params": [
				[
					"rota",
					"Text",
					"->",
					"Path of document or URL to open"
				],
				[
					"appName",
					"Text",
					"->",
					"Name of application to use"
				],
				[
					"*",
					"Operador",
					"->",
					"Se especificado = URL não é traduzido, se omitido = URL é traduzido"
				]
			],
			"Summary": "O comando **OPEN URL** lança seu navegador web por padrão e o abre com a URL passada no parâmetro *url*."
		},
		"Open window": {
			"Syntax": "**Open window** ( *esquerda* ; *superior* ; *direita* ; *inferior* {; *tipo* {; *titulo* {; *caixaFechar*}}} ) : Integer",
			"Params": [
				[
					"esquerda",
					"Integer",
					"->",
					"Coordenada global da área de conteúdo da janela"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada superior da área de conteúdos da janela"
				],
				[
					"direita",
					"Integer",
					"->",
					"Coordenada direita da área de conteúdos da janela, ou -1 para usar tamanho padrão do formulário"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Coordenada inferior da área de conteúdos da janela, ou -1 para usar tamanho padrão do formulário"
				],
				[
					"tipo",
					"Integer",
					"->",
					"tipo da janela"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título da janela ou \"\" para usar título do formulário padrão"
				],
				[
					"caixaFechar",
					"Text",
					"->",
					"Método a chamar quando a caixa control-menu recebe um clique duplo, ou quanod a caixa Fechar é clicada"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência de janela"
				]
			],
			"Summary": "Open window abre uma nova janela cujas dimensões são definidas pelos quatro primeiros parâmetros"
		},
		"ORDER BY ATTRIBUTE": {
			"Syntax": "**ORDER BY ATTRIBUTE** ( {*tabela* ;} *campoObjeto* ; *rotaAtrib* ; > ou < {; *campoObjeto2* ; *rotaAtrib2* ; > ou <2 ; ... ; *campoObjetoN* ; *rotaAtribN* ; > ou <N} {; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai ordenar registros selecionados, ou a tabela padrão, se omitido"
				],
				[
					"campoObjeto",
					"Object",
					"->",
					"Campo Objeto contendo o atributo de ordenação"
				],
				[
					"rotaAtrib",
					"Text",
					"->",
					"Nome ou rota do atributo para o qual vai estabelecer a ordem para cada nível"
				],
				[
					"> ou <",
					"Operador",
					"->",
					"Direção de ordenação para cada nível: > para ordenar em ordem ascendente, ou < para ordenar em ordem descendente."
				],
				[
					"*",
					"Operador",
					"->",
					"Continuar a bandeira de ordem"
				]
			],
			"Summary": "O comando **ORDER BY ATTRIBUTE** ordena (reordena) os registros da seleção atual de *tabela* para o processo atual baseado no conteúdo de *rotaAtrib* de *campoObjeto*."
		},
		"ORDER BY FORMULA": {
			"Syntax": "**ORDER BY FORMULA** ( *tabela* ; *expressao* {; >ou<}{; *expressao2* ; >ou<2 ; ... ; *expressaoN* ; >ou<N} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai ordenar os registros"
				],
				[
					"expressao",
					"Expression",
					"->",
					"Fórmula de ordem para cada nível (pode ser de tipo Alfanumérico, Real, Inteiro, Inteiro longo, Data, Hora ou Booleano)"
				],
				[
					">ou<",
					"Operador",
					"->",
					"Sentido da ordenação para cada nível: > ordem crescente, ou < ordem decrescente"
				]
			],
			"Summary": "**ORDER BY FORMULA** ordena (reordena) os registros da seleção atual de *tabela* para o processo atual."
		},
		"ORDER BY": {
			"Syntax": "**ORDER BY** ( {*tabela* ;}{ *campo* }{; > ou < }{; *campo2* ; > ou <2 ; ... ; *campoN* ; > ou <N}{; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai ordenar os registros selecionados, ou tabela Padrão, se omitido"
				],
				[
					"campo",
					"Field",
					"->",
					"Campo no qual estabelecer a ordem para cada nível"
				],
				[
					"> ou <",
					"Operador",
					"->",
					"Direção da ordem para cada nível: > para ordenar em ordem ascendente, ou < para ordenar em ordem descendente"
				],
				[
					"*",
					"Operador",
					"->",
					"Continuar a bandeira de ordem"
				]
			],
			"Summary": "**ORDER BY** ordena (reordena) os registros da seleção atual de *tabela* para o processo atual."
		},
		"Outside call": {
			"Syntax": "**Outside call**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devolve True se o ciclo de execução é Outside call"
				]
			],
			"Summary": "**Outside call** retorna True para o ciclo de execução After."
		},
		"PAGE BREAK": {
			"Syntax": "**PAGE BREAK** {( *|> )}",
			"Params": [
				[
					"*&#124;>",
					"->",
					"* Cancela o trabalho de impressão iniciado com o Formulário de Impressão, ou > para forçar um trabalho de impressão."
				]
			],
			"Summary": "PAGE BREAK dispara a impressão de dados enviados a la impressora e provocar um salto de página."
		},
		"Parse formula": {
			"Syntax": "**Parse formula** ( *formula* {; *opções*}{; *mensagemErro*} ) : Text",
			"Params": [
				[
					"formula",
					"Text",
					"->",
					"Fórmula de texto simples"
				],
				[
					"opções",
					"Integer",
					"->",
					"Instruções para input/output"
				],
				[
					"mensagemErro",
					"Text",
					"<-",
					"Mensagem de erro (string vazia se não houver erro)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Fórmula transformada (texto simples)"
				]
			],
			"Summary": "A função **Parse formula** analisa a *fórmula* 4D, verifica sua sintaxe e devolve seu formulário normalizado."
		},
		"Pasteboard data size": {
			"Syntax": "**Pasteboard data size** ( *tipoDados* ) : Integer",
			"Params": [
				[
					"tipoDados",
					"Text",
					"->",
					"Tipo de dados a adicionar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamanho (em bytes) dos dados armazenados na área de transferência ou então código do erro"
				]
			],
			"Summary": "O comando Pasteboard data size permite testar se hay dados do tipo *tipoDatos* na área de transferência."
		},
		"Path to object": {
			"Syntax": "**Path to object**  ( *rota* {; *tipoRota*} ) : Object",
			"Params": [
				[
					"rota",
					"Text",
					"->",
					"Nome da rota"
				],
				[
					"tipoRota",
					"Integer",
					"->",
					"Sintaxe do tipo de rota: System (padrão) ou Posix"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que descreve o conteúdo da rota."
				]
			],
			"Summary": "O comando **Path to object**  devolve um objeto que contenha as propriedades específicas da *rota* que passou no parâmetro."
		},
		"PAUSE INDEXES": {
			"Syntax": "**PAUSE INDEXES** ( *aTabela* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Tabela para a qual parar os índices"
				]
			],
			"Summary": "O comando **PAUSE INDEXES**  desativa temporariamente todos os índices de *aTabela*, exceto o índice da chave primária ."
		},
		"PAUSE PROCESS": {
			"Syntax": "**PAUSE PROCESS** ( *processo* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "PAUSE PROCESS suspende a execução de *processo* até que seja reativada pelo comando RESUME PROCESS."
		},
		"PHP Execute": {
			"deprecated": true,
			"Syntax": "**PHP Execute** ( *rotaScript* {; *nomeFuncao* {; *resultadoPHP* {; *param*} {; *param2* ; ... ; *paramN*}}} ) : Boolean",
			"Params": [
				[
					"rotaScript",
					"Text",
					"->",
					"Rota de acesso ao script PHP ou \"\" para executar a função PHP"
				],
				[
					"nomeFuncao",
					"Text",
					"->",
					"Função PHP a ser executada"
				],
				[
					"resultadoPHP",
					"*, Variable, Field",
					"<-",
					"Resultado da função PHP executada ou * para não receber nenhum resultado"
				],
				[
					"param",
					"Text, Boolean, Real, Integer, Date, Time",
					"->",
					"Parâmetros da função PHP"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True =execução correta; False = erro de execução"
				]
			],
			"Summary": "O comando PHP Execute permite executar um script ou uma função PHP."
		},
		"PHP GET FULL RESPONSE": {
			"deprecated": true,
			"Syntax": "**PHP GET FULL RESPONSE** ( *stdOut* {; *etiquetaErr* ; *valoresErr*} {; *camposCabHttp* {; *valoresCabHttp*}} )",
			"Params": [
				[
					"stdOut",
					"Text, Blob",
					"<-",
					"Conteúdo do buffer stdOut"
				],
				[
					"etiquetaErr",
					"Text array",
					"<-",
					"Etiquetas dos erros"
				],
				[
					"valoresErr",
					"Text array",
					"<-",
					"Valores dos erros"
				],
				[
					"camposCabHttp",
					"Text array",
					"<-",
					"Nome dos cabeçalhos HTTP"
				],
				[
					"valoresCabHttp",
					"Text array",
					"<-",
					"Valores dos cabeçalhos HTTP"
				]
			],
			"Summary": "O comando PHP GET FULL RESPONSE permite obter informação adicional sobre a resposta devolvida pelo intérprete PHP."
		},
		"PHP GET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP GET OPTION** ( *opção* ; *valor* )",
			"Params": [
				[
					"opção",
					"Integer",
					"->",
					"Opção a conseguir"
				],
				[
					"valor",
					"Boolean",
					"<-",
					"Valor atual da opção"
				]
			],
			"Summary": "O comando PHP GET OPTION permite conhecer o valor atual de uma opção relativa à execução de scripts PHP."
		},
		"PHP SET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP SET OPTION** ( *opçao* ; *valor* {; *} )",
			"Params": [
				[
					"opçao",
					"Integer",
					"->",
					"Opção a ser estabelecida"
				],
				[
					"valor",
					"Boolean",
					"->",
					"Novo valor da opção"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: modificação apenas se aplica à próxima chamada"
				]
			],
			"Summary": "O comando PHP SET OPTION se utiliza para definir opções específicas antes de chamar o comando PHP Execute."
		},
		"PICTURE CODEC LIST": {
			"Syntax": "**PICTURE CODEC LIST** ( *arrayCodec* {; *arrayNomes*}{; *} )",
			"Params": [
				[
					"arrayCodec",
					"Text array",
					"<-",
					"Identificadores de codecs de imagens disponíveis"
				],
				[
					"arrayNomes",
					"Text array",
					"<-",
					"Nomes dos Codecs de imagens"
				],
				[
					"*",
					"Operador",
					"->",
					"Retorna a lista de Codecs de leitura"
				]
			],
			"Summary": "O comando PICTURE CODEC LIST preenche o array *arrayCodec* com a lista dos identificadores dos codecs de imagens que estão disponíveis na máquina onde se executa."
		},
		"PICTURE LIBRARY LIST": {
			"Syntax": "**PICTURE LIBRARY LIST** ( *refsImagem* ; *nomsImagem* )",
			"Params": [
				[
					"refsImagem",
					"Integer array",
					"<-",
					"Números de referência dos gráficos da biblioteca de Imagens"
				],
				[
					"nomsImagem",
					"Text array",
					"<-",
					"Nomes dos gráficos da biblioteca de Imagens"
				]
			],
			"Summary": "O comando PICTURE LIBRARY LIST devolve os números de referência e os nomes das imagens armazenadas na biblioteca de imagens do banco de dados."
		},
		"PICTURE PROPERTIES": {
			"Syntax": "**PICTURE PROPERTIES** ( *imagem* ; *largura* ; *altura* {; *hDesp* {; *vDesp* {; *modo*}}} )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem para a qual conseguir informação"
				],
				[
					"largura",
					"Real",
					"<-",
					"Largura da imagem expressa em pixels"
				],
				[
					"altura",
					"Real",
					"<-",
					"Altura da imagem expressa em pixels"
				],
				[
					"hDesp",
					"Integer",
					"<-",
					"Offset horizontal quando a imagem é exibida no segundo plano"
				],
				[
					"vDesp",
					"Integer",
					"<-",
					"Offset vertical quando a imagem é exibida no segundo plano"
				],
				[
					"modo",
					"Integer",
					"<-",
					"Modo de transferência quando a imagem é exibida no segundo plano"
				]
			],
			"Summary": "O comando PICTURE PROPERTIES devolve a informação sobre a imagem que passa no parâmetro *imagem*."
		},
		"Picture size": {
			"Syntax": "**Picture size** ( *imagem* ) : Integer",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem para qual vai retornar o tamanho em bytes"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamanho, em bytes, da imagem"
				]
			],
			"Summary": "A função Picture size devolve o tamanho de imagem em bytes."
		},
		"PICTURE TO BLOB": {
			"Syntax": "**PICTURE TO BLOB** ( *imagem* ; *imagemBlob* ; *codec* )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Campo ou variável tipo Imagem"
				],
				[
					"imagemBlob",
					"Blob",
					"<-",
					"BLOB para receber a imagem convertida"
				],
				[
					"codec",
					"Text",
					"->",
					"Codec de identificação de Imagem"
				]
			],
			"Summary": "O comando PICTURE TO BLOB converte uma imagem armazenada em uma variável ou em um campo 4D em outro formato e localiza a imagem resultante em um BLOB."
		},
		"PLAY": {
			"Syntax": "**PLAY** ( *nomeObjeto* {; *canal*} )",
			"Params": [
				[
					"nomeObjeto",
					"Text",
					"->",
					"Nome d arquivo de som ou recurso de Mac OS \"snd\" ou string vazia de som de sistema para parar a ação assincrônica"
				],
				[
					"canal",
					"Integer",
					"->",
					"Se especificado, canal de sintetizadr e execução assincrônica; se omitido, execução sincrônica"
				]
			],
			"Summary": "O comando PLAY permite reproduzir arquivos de som ou multimídia."
		},
		"PLUGIN LIST": {
			"Syntax": "**PLUGIN LIST** ( *numerosArray* ; *arrayNomes* )",
			"Params": [
				[
					"numerosArray",
					"Integer array",
					"<-",
					"Números de plug-ins"
				],
				[
					"arrayNomes",
					"Text array",
					"<-",
					"Nomes de plug-ins"
				]
			],
			"Summary": "O comandoPLUGIN LISTpreenche os arrays *numerosArray* e *arraynomes* com os números e os nomes dos plug-ins carregados e utilizáveis pela aplicação 4D."
		},
		"POP RECORD": {
			"Syntax": "**POP RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual desempilhar o registro, a tabela padrão, se omitido"
				]
			],
			"Summary": "POP RECORD carrega o primeiro registro da pilha de registros da tabela e o transforma no registro atual."
		},
		"Pop up menu": {
			"Syntax": "**Pop up menu** ( *conteudo* {; *padrao* {; *coordX* ; *coordY*}} )  : Integer",
			"Params": [
				[
					"conteudo",
					"Text",
					"->",
					"Definição texto do menu"
				],
				[
					"padrao",
					"Integer",
					"->",
					"Número do item de menu selecionado como padrão"
				],
				[
					"coordX",
					"Integer",
					"->",
					"Coordenadas X da esquina esquerda superior"
				],
				[
					"coordY",
					"Integer",
					"->",
					"Coordenadas Y de esquina superior esquerda"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de item de menu selecionado"
				]
			],
			"Summary": "O comando Pop up menu mostra um menu pop up na localização atual do mouse ou na localização definida pelos parâmetros opcionais *coordX* e *coordY*."
		},
		"Position": {
			"Syntax": "**Position** ( *pesquisar* ; *cadeia* {; *inicio* {; *comprEncont*}}{; *} ) -> Resultado  <br/>\n**Position** ( *pesquisar* ; *string* ; *inicio* ; *comprimentoEncontrado* ; *opções* ) -> Resultado",
			"Params": [
				[
					"pesquisar",
					"Text",
					"->",
					"Cadeia a procurar"
				],
				[
					"cadeia",
					"Text",
					"->",
					"Cadeia na qual procurar"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Posição na cadeia onde iniciar a pesquisa"
				],
				[
					"comprEncont",
					"Integer",
					"<-",
					"Comprimento da cadeia encontrada"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: avaliação baseada em códigos de caracteres"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posição da primeira ocorrência"
				],
				[
					"Position ( pesquisar ; string ; inicio ; comprimentoEncontrado ; opções ) -> Resultado"
				],
				[
					"Parâmetro",
					"Tipo",
					"Descrição"
				],
				[
					"pesquisar",
					"Text",
					"->",
					"String a pesquisar"
				],
				[
					"string",
					"Text",
					"->",
					"texto no qual procurar"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Posição no texto onde a pesquisa começa"
				],
				[
					"comprimentoEncontrado",
					"Integer",
					"->",
					"Comprimento do texto encontrado"
				],
				[
					"opções",
					"Integer",
					"->",
					"Condições de pesquisa"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posição da primeira ocorrência"
				]
			],
			"Summary": "Position devolve a posição da primeira ocorrência de *pesquisar* em *cadeia*."
		},
		"POST CLICK": {
			"Syntax": "**POST CLICK** ( *mouseX* ; *mouseY* {; *processo*} {; *} )",
			"Params": [
				[
					"mouseX",
					"Integer",
					"->",
					"Coordenada Horizontal"
				],
				[
					"mouseY",
					"Integer",
					"->",
					"Coordenada Vertical"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo destino; ou, omitido, fila de evento de Aplicação, ou 0"
				],
				[
					"*",
					"Operator",
					"->",
					"Se especificado sistema de coordenadas global é usado; se omitido, sistema de coordenadas locais é usado"
				]
			],
			"Summary": "O comando POST CLICK simula um clique do mouse."
		},
		"POST EVENT": {
			"Syntax": "**POST EVENT** ( *que* ; *mensagem* ; *quando* ; *mouseX* ; *mouseY* ; *modificadores* {; *processo*} )",
			"Params": [
				[
					"que",
					"Integer",
					"->",
					"Tipo de evento"
				],
				[
					"mensagem",
					"Integer",
					"->",
					"Mensagem de evento"
				],
				[
					"quando",
					"Integer",
					"->",
					"Tempo de evento expresso em ticks"
				],
				[
					"mouseX",
					"Integer",
					"->",
					"Coordenadas horizontais do mouse"
				],
				[
					"mouseY",
					"Integer",
					"->",
					"Coordenadas verticais do mouse"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Estado de teclas modificadoras"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo de destino; ou fila de evento de aplicação, se omitido, ou 0."
				]
			],
			"Summary": "O comando POST EVENT simula um evento de teclado ou de mouse."
		},
		"POST KEY": {
			"Syntax": "**POST KEY** ( *codigo* {; *modificadores* {; *processo*}} )",
			"Params": [
				[
					"codigo",
					"Integer",
					"->",
					"Código do caractere ou código da tecla de função"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Estado de teclas modificadoras"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo destino; ou fila do evento de aplicação, se omitido, ou 0"
				]
			],
			"Summary": "O comando POST KEY simula uma tecla."
		},
		"POST OUTSIDE CALL": {
			"Syntax": "**POST OUTSIDE CALL** ( *processo* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"número de processo"
				]
			],
			"Summary": "Esse comando era chamado **CALL PROCESS** em lançamentos 4D anteriores."
		},
		"PREVIOUS RECORD": {
			"Syntax": "**PREVIOUS RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai mover o registro previamente selecionado, ou tabela padrão, se omitido"
				]
			],
			"Summary": "PREVIOUS RECORD move o ponteiro do registro atual ao registro anterior na seleção de *tabela* para o processo atual."
		},
		"PRINT LABEL": {
			"Syntax": "**PRINT LABEL** ( {*tabela* }{;}{ *documento* {; *|>}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a imprimir, ou tabela padrão, se omitido"
				],
				[
					"documento",
					"Text",
					"->",
					"Nome do documento de etiquetas do disco"
				],
				[
					"*&#124;>",
					"->",
					"* para apagar as caixas de diálogo de impressão, ou > para não reiniciar os parâmetros de impressão"
				]
			],
			"Summary": "PRINT LABEL permite imprimir etiquetas com los datos de la seleção de *tabela*."
		},
		"Print object": {
			"Syntax": "**Print object** ( {* ;} *objeto* {; *posX* {; *posY* {; *largura* {; *alto*}}}} ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se* for especificado) ou variável (se * é omitido)"
				],
				[
					"posX",
					"Integer",
					"->",
					"Localização horizontal do objeto"
				],
				[
					"posY",
					"Integer",
					"->",
					"Localização Vertical do objeto"
				],
				[
					"largura",
					"Integer",
					"->",
					"Largura do objeto (pixels)"
				],
				[
					"alto",
					"Integer",
					"->",
					"Altura do objeto (pixels)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdade = objeto impresso completamente; de outro modo False"
				]
			],
			"Summary": "O comando **Print object** permite imprimir ele ou os objetos de formulário designado(s) pelos parâmetros *objeto* e *\\**, na localização definida pelos parâmetros *posX* e *posY*."
		},
		"PRINT OPTION VALUES": {
			"Syntax": "**PRINT OPTION VALUES** ( *opçao* ; *arrayNoms* {; *info1Array* {; *info2Array*}} )",
			"Params": [
				[
					"opçao",
					"Integer",
					"->",
					"Número de opção"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nomes dos valores"
				],
				[
					"info1Array",
					"Integer array",
					"<-",
					"Valores (1) da opção"
				],
				[
					"info2Array",
					"Integer array",
					"<-",
					"Valores (2) da opção"
				]
			],
			"Summary": "O comando PRINT OPTION VALUES \\[#descv\\]devolve em *nomesArray*,uma lista de nomes de valores disponíveis para a *opçao* de impressão definida."
		},
		"PRINT RECORD": {
			"Syntax": "**PRINT RECORD** ( {*tabela*}{;}{* | > } )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual imprimir o registro, ou Tabela padrão, caso omitido"
				],
				[
					"* &#124; >",
					"Operador",
					"->",
					"* to suppress the printing dialog box, or > to not reinitialize print settings"
				]
			],
			"Summary": "PRINT RECORD imprime o registro atual de *tabela*, sem modificar a seleção atual."
		},
		"PRINT SELECTION": {
			"Syntax": "**PRINT SELECTION** ( {*tabela*}{;}{* | > } )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual imprimir a seleção, ou Tabela por padrão, se for omitido"
				],
				[
					"* &#124; >",
					"Operador",
					"->",
					"* para apagar as caixas de diálogo de impressão, ou > para não reiniciar as preferências de impressão"
				]
			],
			"Summary": "PRINT SELECTION imprime a seleção atual de tabela."
		},
		"Print settings to BLOB": {
			"Syntax": "**Print settings to BLOB** ( *confImpress* ) : Integer",
			"Params": [
				[
					"confImpress",
					"Blob",
					"<-",
					"Configuração de impressão atuais"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"código de estado 1= operação bem sucedida, 0=sem impressora atual"
				]
			],
			"Summary": "O comando **Print settings to BLOB** salva os ajustes de impressão 4D atuais no BLOB *confImp*."
		},
		"PRINT SETTINGS": {
			"Syntax": "**PRINT SETTINGS** {( *dialType* )}",
			"Params": [
				[
					"dialType",
					"Integer",
					"->",
					"Caixas de diálogo a mostrar"
				]
			],
			"Summary": "O comando PRINT SETTINGS mostra una o dos caixas de diálogo de parâmetros de impressão."
		},
		"PRINTERS LIST": {
			"Syntax": "**PRINTERS LIST** ( *arrayNoms* {; *altNomesArray* {; *modelosArray*}} )",
			"Params": [
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nomes das impressoras"
				],
				[
					"altNomesArray",
					"Text array",
					"<-",
					"Windows: localização das impressoras; macOS: Nomes personalizados das impressoras"
				],
				[
					"modelosArray",
					"Text array",
					"<-",
					"Modelos de impressoras"
				]
			],
			"Summary": "O comando PRINTERS LIST preenche os arrays passados como parâmetros com os nomes e opcionalmente com a localização os nomes personalizados e os modelos de impressão disponíveis para a máquina."
		},
		"Printing page": {
			"Syntax": "**Printing page**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de página da página atualmente sendo impressa"
				]
			],
			"Summary": "Printing page devolvido o número da página em impressão."
		},
		"PROCESS 4D TAGS": {
			"Syntax": "**PROCESS 4D TAGS** ( *dadosEntrada* ; *dadosSaida* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"dadosEntrada",
					"Text",
					"->",
					"Dados que contém as etiquetas HTML a processar"
				],
				[
					"dadosSaida",
					"Text",
					"<-",
					"Dados processados"
				],
				[
					"param",
					"Expression",
					"->",
					"Parâmetros passados ao template sendo executado"
				]
			],
			"Summary": "O comando PROCESS 4D TAGS provoca o processamento das etiquetas de transformação 4D contidas em *dadosEntrada* (campo ou variável de tipo Texto ou BLOB) enquanto opcionalmente insere valores utilizando os valores via os parâmetros *param* e retorna os dados resultantes em *dadosSaida*."
		},
		"Process aborted": {
			"Syntax": "**Process aborted**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = o processo está prestes a ser abortado, False = o processo não será abortado"
				]
			],
			"Summary": "O comando Process aborted retorna **True** se o processo no qual foi chamado, está prestes a ser interrompido inesperadamente, o que significa que a execução do comando, não teve uma execução \"normal\"."
		},
		"Process state": {
			"Syntax": "**Process state** ( *processo* ) : Integer",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estado do processo"
				]
			],
			"Summary": "O comando Process state devolve o estado do processo cujo número foi passado em *processo*."
		},
		"PUSH RECORD": {
			"Syntax": "**PUSH RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual empilhar os registros, ou tabela padrão, se omitido"
				]
			],
			"Summary": "PUSH RECORD empilha uma cópia do registro atual de *tabela* na pilha de registros da tabela."
		},
		"QR BLOB TO REPORT": {
			"Syntax": "**QR BLOB TO REPORT** ( *area* ; *BLOB* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contém o relatório"
				]
			],
			"Summary": "O comando QR BLOB TO REPORT coloca o relatório contido no *BLOB* na área de relatório rápido passada em *area*."
		},
		"QR Count columns": {
			"Syntax": "**QR Count columns** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de colunas em área"
				]
			],
			"Summary": "O comando QR Count columns devolve o número de colunas presentes na *area* do relatório rápido."
		},
		"QR DELETE COLUMN": {
			"Syntax": "**QR DELETE COLUMN** ( *area* ; *numColuna* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Número de Coluna"
				]
			],
			"Summary": "O comando QR DELETE COLUMN apaga da *area* a coluna cujo número se passou em *numColuna*."
		},
		"QR DELETE OFFSCREEN AREA": {
			"Syntax": "**QR DELETE OFFSCREEN AREA** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				]
			],
			"Summary": "O comando QR DELETE OFFSCREEN AREA apaga da memória a área fora de tela do relatório rápido cuja referência se passa no parâmetro *area*."
		},
		"QR EXECUTE COMMAND": {
			"Syntax": "**QR EXECUTE COMMAND** ( *area* ; *comando* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"comando",
					"Integer",
					"->",
					"Comando de menu a ser executado"
				]
			],
			"Summary": "O comando **QR EXECUTE COMMAND** executa o comando de menu ou o botão da barra de ferramentas cuja referência se passa em *comando*."
		},
		"QR Find column": {
			"Syntax": "**QR Find column** ( *area* ; *expressao* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"expressao",
					"Text, Pointer",
					"->",
					"Objeto de coluna"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número da coluna"
				]
			],
			"Summary": "O comando QR Find column devolve o número da primeira coluna cujo conteúdo corresponde à *expressao* passada em parâmetro."
		},
		"QR Get area property": {
			"Syntax": "**QR Get area property** ( *area* ; *propriedade* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"propriedade",
					"Integer",
					"->",
					"Elemento de interface"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"1-exibir, 0 - ocultar"
				]
			],
			"Summary": "O comando **QR Get area property** devolve 0 se não mostra o elemento de interface (barra de ferramentas ou barra de menus) passado em *propriedade*; do contrário, devolve 1\\."
		},
		"QR GET BORDERS": {
			"Syntax": "**QR GET BORDERS** ( *area* ; *coluna* ; *linha* ; *borda* ; linha | nivel  {; *cor*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"coluna",
					"Integer",
					"->",
					"Número de coluna"
				],
				[
					"linha",
					"Integer",
					"->",
					"Número da Linha"
				],
				[
					"borda",
					"Integer",
					"->",
					"Border value"
				],
				[
					"linha &#124; nivel",
					"Integer",
					"<-",
					"Grossura da linha"
				],
				[
					"cor",
					"Integer",
					"<-",
					"Cor da borda"
				]
			],
			"Summary": "O comando QR GET BORDERS permite recuperar o estilo do borda de uma célula determinada."
		},
		"QR Get command status": {
			"Syntax": "**QR Get command status** ( *area* ; *comando* {; *valor*} ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"comando",
					"Integer",
					"->",
					"Número de comando"
				],
				[
					"valor",
					"Integer, Text",
					"<-",
					"Valor do subelemento selecionado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estado do comando"
				]
			],
			"Summary": "O comando QR Get command status devolve 0 se o *comando* estiver inativo ou 1 se estiver ativo."
		},
		"QR GET DESTINATION": {
			"Syntax": "**QR GET DESTINATION** ( *area* ; *tipo* {; *especificos*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"tipo",
					"Integer",
					"<-",
					"Tipo de relatório"
				],
				[
					"especificos",
					"Text, Variable",
					"<-",
					"Específicos associados ao tipo de saída"
				]
			],
			"Summary": "O comando QR GET DESTINATION recupera o *tipo* de saída do relatório para a área cuja referência se passou em *area*."
		},
		"QR Get document property": {
			"Syntax": "**QR Get document property** ( *area* ; *propriedade* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"propriedade",
					"Integer",
					"->",
					"1 = Diálogo de Impressão, 2 = Unidade de documento"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor da propriedade"
				]
			],
			"Summary": "O comando QR Get document property permite recuperar o estado mostrado para a caixa de diálogo de impressão ou a unidade utilizada para o documento presente na *area*."
		},
		"QR Get drop column": {
			"Syntax": "**QR Get drop column** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Espaço de soltar"
				]
			],
			"Summary": "O comando QR Get drop column devolve um valor dependendo de onde se realiza uma ação soltar"
		},
		"QR GET HEADER AND FOOTER": {
			"Syntax": "**QR GET HEADER AND FOOTER** ( *area* ; *seletor* ; *tituloEsq* ; *tituloCentro* ; *tituloDir* ; *alto* {; *imagem* {; *alinImag*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"seletor",
					"Integer",
					"->",
					"1= Cabeçalho, 2 = Rodapé"
				],
				[
					"tituloEsq",
					"Text",
					"<-",
					"Título mostrado à esquerda"
				],
				[
					"tituloCentro",
					"Text",
					"<-",
					"Texto mostrado ao centro"
				],
				[
					"tituloDir",
					"Text",
					"<-",
					"Texto exibido à direita"
				],
				[
					"alto",
					"Integer",
					"<-",
					"Altura do cabeçalho ou rodapé"
				],
				[
					"imagem",
					"Picture",
					"<-",
					"Imagem a exibir"
				],
				[
					"alinImag",
					"Integer",
					"<-",
					"Alinhamento atribuído para a Imagem"
				]
			],
			"Summary": "O comando QR GET HEADER AND FOOTER permite recuperar o conteúdo e o tamanho do cabeçalho ou rodapé de página."
		},
		"QR Get HTML template": {
			"Syntax": "**QR Get HTML template** ( *area* ) : Text",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Código HTML usado como modelo"
				]
			],
			"Summary": "O comando QR Get HTML template devolve o modelo HTML utilizado atualmente pela área do relatório rápido referenciada por área."
		},
		"QR GET INFO COLUMN": {
			"Syntax": "**QR GET INFO COLUMN** ( *area* ; *numColuna* ; *titulo* ; *objeto* ; *ocultar* ; *tamanho* ; *valoresRepetidos* ; *formato* {; *resultVar*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Nº da coluna"
				],
				[
					"titulo",
					"Text",
					"<-",
					"Título da coluna"
				],
				[
					"objeto",
					"Text",
					"<-",
					"Objeto atribuído a coluna"
				],
				[
					"ocultar",
					"Integer",
					"<-",
					"0=exibir, 1=ocultar"
				],
				[
					"tamanho",
					"Integer",
					"<-",
					"Tamanho da coluna"
				],
				[
					"valoresRepetidos",
					"Integer",
					"<-",
					"0=não repetido, 1=repetido"
				],
				[
					"formato",
					"Text",
					"<-",
					"Formato de exibição dos dados"
				],
				[
					"resultVar",
					"Text",
					"<-",
					"Nome da variável da fórmula"
				]
			],
			"Summary": "### Relatórios em lista \n\nO comando QR GET INFO COLUMN permite recuperar os parâmetros de uma coluna existente."
		},
		"QR Get info row": {
			"Syntax": "**QR Get info row** ( *area* ; *linha* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área criada"
				],
				[
					"linha",
					"Integer",
					"->",
					"Designa a Linha"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"0=exibir, 1=ocultar"
				]
			],
			"Summary": "O comando QR Get info row indica se *linha* se mostra o se oculta na *area*."
		},
		"QR Get report kind": {
			"Syntax": "**QR Get report kind** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de relatório"
				]
			],
			"Summary": "O comando QR Get report kind devolve o tipo do relatório presente em *area*."
		},
		"QR Get report table": {
			"Syntax": "**QR Get report table** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Nº de tabela"
				]
			],
			"Summary": "O comando QR Get report table devolve o número da tabela atual do relatório designado pelo parâmetro *area*."
		},
		"QR GET SELECTION": {
			"Syntax": "**QR GET SELECTION** ( *area* ; *esquerda* ; *superior* {; *direita* {; *inferior* }} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"esquerda",
					"Integer",
					"<-",
					"Limite esquerdo"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Limite superior"
				],
				[
					"direita",
					"Integer",
					"<-",
					"Limite direito"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Limite inferior"
				]
			],
			"Summary": "O comando QR GET SELECTION devolve as coordenadas da seleção atual de *area*."
		},
		"QR GET SORTS": {
			"Syntax": "**QR GET SORTS** ( *area* ; *aColunas* ; *aOrdem* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"aColunas",
					"Real array",
					"<-",
					"Colunas que estão ordenadas"
				],
				[
					"aOrdem",
					"Real array",
					"<-",
					"Sentido da ordenação"
				]
			],
			"Summary": "O comando QR GET SORTS preenche dois arrays"
		},
		"QR Get text property": {
			"Syntax": "**QR Get text property** ( *area* ; *numColuna* ; *numLinha* ; *propriedade* ) : any",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Nº da coluna"
				],
				[
					"numLinha",
					"Integer",
					"->",
					"N° da linha"
				],
				[
					"propriedade",
					"Integer",
					"->",
					"Número da propriedade"
				],
				[
					"Function result",
					"Inteiro longo, String",
					"<-",
					"Valor da propriedade selecionada"
				]
			],
			"Summary": "O comando QR Get text property devolve o valor da propriedade dos atributos de texto na célula determinada por *numColuna* e *numLinha*."
		},
		"QR GET TOTALS DATA": {
			"Syntax": "**QR GET TOTALS DATA** ( *area* ; *numColuna* ; *numQuebra* ; *operador* ; *texto* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Nº da coluna"
				],
				[
					"numQuebra",
					"Integer",
					"->",
					"Número de quebra"
				],
				[
					"operador",
					"Integer",
					"<-",
					"Valor do operador para a célula"
				],
				[
					"texto",
					"Text",
					"<-",
					"Conteúdo da célula"
				]
			],
			"Summary": "### List Mode \n\nO comando QR GET TOTALS DATA permite recuperar o conteúdo de uma linha de quebra específica."
		},
		"QR GET TOTALS SPACING": {
			"Syntax": "**QR GET TOTALS SPACING** ( *area* ; *subtotal* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"Nº de subtotal"
				],
				[
					"valor",
					"Integer",
					"<-",
					"0= sem espaço, 32000=insere um salto de página, >0=espaço adicionado no topo do nível de quebra, <0=incremento proporcional"
				]
			],
			"Summary": "O comando QR GET TOTALS SPACING permite recuperar o valor do espaço adicionado sobre uma linha de subtotal."
		},
		"QR INSERT COLUMN": {
			"Syntax": "**QR INSERT COLUMN** ( *area* ; *numColuna* ; *objeto* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Número de Coluna"
				],
				[
					"objeto",
					"Field, Variable, Pointer",
					"->",
					"Objeto a inserir na coluna"
				]
			],
			"Summary": "O comando QR INSERT COLUMN insere ou cria uma coluna em una posição específica."
		},
		"QR MOVE COLUMN": {
			"Syntax": "**QR MOVE COLUMN** ( *area* ; *numColuna* ; *novaPosição* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Número de coluna"
				],
				[
					"novaPosição",
					"Integer",
					"->",
					"Nova posição para a coluna"
				]
			],
			"Summary": "O comando **QR MOVE COLUMN** move a coluna que se encontra atualmente na posição *numColuna* para a posição *novaPosição*."
		},
		"QR NEW AREA": {
			"Syntax": "**QR NEW AREA** ( *ptr* )",
			"Params": [
				[
					"ptr",
					"Pointer",
					"->",
					"Ponteiro para uma variável"
				]
			],
			"Summary": "O comando **QR NEW AREA** cria uma nova área de relatório rápido e armazena seu número de referência na variável de tipo Inteiro longo referenciada pelo ponteiro *ptr*."
		},
		"QR New offscreen area": {
			"Syntax": "**QR New offscreen area**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Referência da área criada"
				]
			],
			"Summary": "O comando QR New offscreen area cria uma área de relatório rápido fora de tela e devolve seu número de referência."
		},
		"QR ON COMMAND": {
			"Syntax": "**QR ON COMMAND** ( *area* ; *nomeMetodo* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome do método a ser chamado"
				]
			],
			"Summary": "O comando QR ON COMMAND executa o método de projeto 4D passado no parâmetro *nomMetodo* quando um comando do editor de relatórios rápidos for chamado pelo usuário, selecionando um comando de menu ou clicando em um botão."
		},
		"QR REPORT TO BLOB": {
			"Syntax": "**QR REPORT TO BLOB** ( *area* ; *BLOB* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"Blob",
					"Blob",
					"<-",
					"BLOB a hospedar o Relatório Rápido"
				]
			],
			"Summary": "O comando QR REPORT TO BLOB coloca o relatório cuja referência foi passada em *area* em um *BLOB* (variável ou campo)."
		},
		"QR REPORT": {
			"Syntax": "**QR REPORT** ( {*tabela* ;} *documento* {; *nomeMetodo*}{; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a utilizar para o relatório ou tabela por padrão se for omitido"
				],
				[
					"documento",
					"Text",
					"->",
					"Documento de Relatório Rápido a carregar"
				],
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome do mètodo a chamar"
				],
				[
					"*",
					"Operador",
					"->",
					"Eliminação das caixas de diálogo de impressão"
				]
			],
			"Summary": "QR REPORT imprime um relatório para *tabela*, criado com o editor de relatórios rápidos ."
		},
		"QR RUN": {
			"Syntax": "**QR RUN** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área a executar"
				]
			],
			"Summary": "O comando QR RUN provoca a execução do relatório rápido designado pelo parâmetro *area*."
		},
		"QR SET AREA PROPERTY": {
			"Syntax": "**QR SET AREA PROPERTY** ( *area* ; *propriedade* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"propriedade",
					"Integer",
					"->",
					"Elemento de interface"
				],
				[
					"valor",
					"Integer",
					"->",
					"1=exibir, 0=ocultar"
				]
			],
			"Summary": "O comando **QR SET AREA PROPERTY** permite mostrar ou ocultar o elemento de interface (barra de ferramentas ou barra de menus) cuja referência se passa em *propriedade*."
		},
		"QR SET BORDERS": {
			"Syntax": "**QR SET BORDERS** ( *area* ; *coluna* ; *linha* ; *borda* ; linha | nivel  {; *cor*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"coluna",
					"Integer",
					"->",
					"Número de coluna"
				],
				[
					"linha",
					"Integer",
					"->",
					"Nº da linha"
				],
				[
					"borda",
					"Integer",
					"->",
					"Valor composto da borda"
				],
				[
					"linha &#124; nivel",
					"Inteiro longo",
					"->",
					"Largura da linha"
				],
				[
					"cor",
					"Integer",
					"->",
					"Cor da linha"
				]
			],
			"Summary": "O comando QR SET BORDERS permite definir o estilo da borda de uma célula dada."
		},
		"QR SET DESTINATION": {
			"Syntax": "**QR SET DESTINATION** ( *area* ; *tipo* {; *especificos*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo do relatório"
				],
				[
					"especificos",
					"Text, Variable",
					"->",
					"Específicos conectados ao tipo de saída"
				]
			],
			"Summary": "O comando QR SET DESTINATION permite definir o tipo de saída do relatório rápido em *area*."
		},
		"QR SET DOCUMENT PROPERTY": {
			"Syntax": "**QR SET DOCUMENT PROPERTY** ( *area* ; *propriedade* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"propriedade",
					"Integer",
					"->",
					"1=Diálogo de impressão, 2=Unidade do documento"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor da propriedade"
				]
			],
			"Summary": "O comando QR SET DOCUMENT PROPERTY permite mostrar a caixa de diálogo de impressão ou definir a unidade utilizada pelo documento."
		},
		"QR SET HEADER AND FOOTER": {
			"Syntax": "**QR SET HEADER AND FOOTER** ( *area* ; *seletor* ; *tituloEsq* ; *tituloCentro* ; *tituloDir* ; *altura* {; *imagem* {; *alinImag*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"seletor",
					"Integer",
					"->",
					"1= Cabeçalho, 2 = Rodapé"
				],
				[
					"tituloEsq",
					"Text",
					"->",
					"Texto a esquerda"
				],
				[
					"tituloCentro",
					"Text",
					"->",
					"Texto centralizado"
				],
				[
					"tituloDir",
					"Text",
					"->",
					"Texto a direita"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura do cabeçalho ou rodap~e"
				],
				[
					"imagem",
					"Picture",
					"->",
					"Imagem a exibir"
				],
				[
					"alinImag",
					"Integer",
					"->",
					"Atributo de alinhamento da imagem"
				]
			],
			"Summary": "O comando QR SET HEADER AND FOOTER permite definir o conteúdo e o tamanho do cabeçalho e o rodapé de *area*."
		},
		"QR SET HTML TEMPLATE": {
			"Syntax": "**QR SET HTML TEMPLATE** ( *area* ; *modelo* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"modelo",
					"Text",
					"->",
					"Modelo HTML"
				]
			],
			"Summary": "O comando QR SET HTML TEMPLATE define o *modelo* HTML a utilizar para a área de relatório rápido referenciada por *area*."
		},
		"QR SET INFO COLUMN": {
			"Syntax": "**QR SET INFO COLUMN** ( *area* ; *numColuna* ; *titulo* ; *objeto* ; *ocultar* ; *tamanho* ; *valoresRepetidos* ; *formato* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Nº da coluna"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título da coluna"
				],
				[
					"objeto",
					"Field, Variable",
					"->",
					"Objeto atribuido a coluna"
				],
				[
					"ocultar",
					"Integer",
					"->",
					"0=exibir, 1=ocultar"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Tamanho da coluna"
				],
				[
					"valoresRepetidos",
					"Integer",
					"->",
					"0=não repetido, 1= repetido"
				],
				[
					"formato",
					"Text",
					"->",
					"Formatação dos dados"
				]
			],
			"Summary": "O comando QR SET INFO COLUMN permite definir os parâmetros de uma coluna existente."
		},
		"QR SET INFO ROW": {
			"Syntax": "**QR SET INFO ROW** ( *area* ; *linha* ; *ocultar* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área criada"
				],
				[
					"linha",
					"Integer",
					"->",
					"Designa a Linha"
				],
				[
					"ocultar",
					"Integer",
					"->",
					"0=exibir, 1=ocultar"
				]
			],
			"Summary": "O comando QR SET INFO ROW mostra/oculta a fila cuja referência se passa em *linha*."
		},
		"QR SET REPORT KIND": {
			"Syntax": "**QR SET REPORT KIND** ( *area* ; *tipo* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo do relatório"
				]
			],
			"Summary": "O comando QR SET REPORT KIND define o *tipo* do relatório presente em *area*."
		},
		"QR SET REPORT TABLE": {
			"Syntax": "**QR SET REPORT TABLE** ( *area* ; *tabela* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"tabela",
					"Integer",
					"->",
					"Número de tabela"
				]
			],
			"Summary": "O comando QR SET REPORT TABLE define a tabela atual para a área do relatório referenciada pelo parâmetro *area* a tabela número *tabela*."
		},
		"QR SET SELECTION": {
			"Syntax": "**QR SET SELECTION** ( *area* ; *esquerda* ; *superior* {; *direita* {; *inferior* }} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"esquerda",
					"Integer",
					"->",
					"Borda esquerda"
				],
				[
					"superior",
					"Integer",
					"->",
					"margem superiro"
				],
				[
					"direita",
					"Integer",
					"->",
					"limite direita"
				],
				[
					"inferior",
					"Integer",
					"->",
					"limite inferior"
				]
			],
			"Summary": "O comando QR SET SELECTION permite selecionar uma célula, uma fila, uma coluna ou toda uma *area* como seria feito com um mouse."
		},
		"QR SET SORTS": {
			"Syntax": "**QR SET SORTS** ( *area* ; *aColunas* {; *aOrdem*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"aColunas",
					"Real array",
					"->",
					"Colunas"
				],
				[
					"aOrdem",
					"Real array",
					"->",
					"Ordenar"
				]
			],
			"Summary": "O comando QR SET SORTS permite definir o sentido de ordenação de cada coluna do relatório rápido cuja referência é passada em *area*."
		},
		"QR SET TEXT PROPERTY": {
			"Syntax": "**QR SET TEXT PROPERTY** ( *area* ; *numColuna* ; *numLinha* ; *propriedade* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Nº da coluna"
				],
				[
					"numLinha",
					"Integer",
					"->",
					"N° da linha"
				],
				[
					"propriedade",
					"Integer",
					"->",
					"Valor do operador para a célula"
				],
				[
					"valor",
					"Integer, Text",
					"->",
					"Valor para a propriedade selecionada"
				]
			],
			"Summary": "O comando QR SET TEXT PROPERTY permite definir as propriedades de texto da célula determinada pelos parâmetros *numColuna* e *numLinha*."
		},
		"QR SET TOTALS DATA": {
			"Syntax": "**QR SET TOTALS DATA** ( *area* ; *numColuna* ; *numQuebra* ; operador | valor )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"numColuna",
					"Integer",
					"->",
					"Nº da coluna"
				],
				[
					"numQuebra",
					"Integer",
					"->",
					"Número de quebra"
				],
				[
					"operador &#124; valor",
					"Inteiro longo, String",
					"->",
					"Operador para a célula ou conteúdo da célula"
				]
			],
			"Summary": "**Nota:** este comando não pode criar um subtotal."
		},
		"QR SET TOTALS SPACING": {
			"Syntax": "**QR SET TOTALS SPACING** ( *area* ; *subtotal* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referência da área"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"Nº de subtotal"
				],
				[
					"valor",
					"Integer",
					"->",
					"0=sem espaço, 32000=insere um salta de página, >0=espaço adicionado ao topo da quebra de nível, <0=incremento proporcional"
				]
			],
			"Summary": "O comando QR SET TOTALS SPACING permite definir um espaço sobre a linha de subtotal."
		},
		"QUERY BY ATTRIBUTE": {
			"Syntax": "**QUERY BY ATTRIBUTE** ( {*umaTabela*}{;}{*opConj* ;} *campoObjeto* ; *caminhoAtributo* ; *opPesq* ; *valor* {; *} )",
			"Params": [
				[
					"umaTable",
					"Table",
					"->",
					"Tabela para a qual retornar uma seleção de registros, ou tabela padrão se for omitido"
				],
				[
					"opConj",
					"*",
					"->",
					"Operador de Conjunção para juntar múltiplas pesquisas"
				],
				[
					"campoObjeto",
					"Field",
					"->",
					"Campo Objeto para atributos de pesquisa"
				],
				[
					"caminhoAtributo",
					"Text",
					"->",
					"Nome ou caminho do atributo"
				],
				[
					"opPesq",
					"Text, *",
					"->",
					"Operador pesquisa (comparador)"
				],
				[
					"valor",
					"Text, Number, Date, Time",
					"->",
					"Valor a comparar"
				],
				[
					"*",
					"Operador",
					"->",
					"Continua a flag de pesquisa"
				]
			],
			"Summary": "**QUERY BY ATTRIBUTE** localiza os registros que correspondam com a string de consulta definida utilizando os parâmetros *campoObjeto*, *caminhoAtributo*, *opPesq* e *valor* e retorna uma seleção de registros para a *tabela*."
		},
		"QUERY BY EXAMPLE": {
			"Syntax": "**QUERY BY EXAMPLE** ( {*tabela*}{;}{*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai retornar a seleção de registros, ou a tabela Padrão, se omitido"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado, a barra de rolagem não será exibida"
				]
			],
			"Summary": "QUERY BY EXAMPLE realiza a mesma ação que o comando de menu Pesquisa por formulário."
		},
		"QUERY BY FORMULA": {
			"Syntax": "**QUERY BY FORMULA** ( *tabela* {; *formula*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual retornar a seleção de registros"
				],
				[
					"formula",
					"Boolean",
					"->",
					"Fórmula de pesquisa"
				]
			],
			"Summary": "QUERY BY FORMULA procura registros em *tabela*."
		},
		"QUERY BY SQL": {
			"Syntax": "**QUERY BY SQL** ( {*tabela* ;} *sqlFormula* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual se devolve a seleção de registros  ou tabela padrão se o parâmetro for omitido"
				],
				[
					"sqlFormula",
					"Text",
					"->",
					"Fórmula válida de pesquisa SQL representando a cláusula WHERE da pesquisa SELECT"
				]
			],
			"Summary": "O comando QUERY BY SQL permite aproveitar diretamente o motor SQL integrado de 4D."
		},
		"QUERY SELECTION BY ATTRIBUTE": {
			"Syntax": "**QUERY SELECTION BY ATTRIBUTE** ( {*umaTabela*}{;}{*operadorConj* ;} *campoObj* ; *rotaAtributo* ; *operadorPesq* ; *valor* {; *} )",
			"Params": [
				[
					"umaTable",
					"Table",
					"->",
					"Tabela para a quel vai retornar uma seleção de registros, ou tabela Padrão se omitido"
				],
				[
					"operadorConj",
					"*",
					"->",
					"Operador Conjunção para usar para unir múltiplas pesquisas (se alguma)"
				],
				[
					"campoObj",
					"Field",
					"->",
					"Campo objeto para atributos de pesquisa"
				],
				[
					"rotaAtributo",
					"Text",
					"->",
					"Nome ou rota do atributo"
				],
				[
					"operadorPesq",
					"*, Text",
					"->",
					"Operador Pesquisa (comparador)"
				],
				[
					"valor",
					"Text, Number, Date, Time",
					"->",
					"Valor a comparar"
				],
				[
					"*",
					"Operador",
					"->",
					"Continua flag de pesquisa"
				]
			],
			"Summary": "**QUERY SELECTION BY ATTRIBUTE** realiza as mesmas ações que QUERY BY ATTRIBUTE."
		},
		"QUERY SELECTION BY FORMULA": {
			"Syntax": "**QUERY SELECTION BY FORMULA** ( *tabela* {; *formula*} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual retornar a seleção de registros"
				],
				[
					"formula",
					"Boolean",
					"->",
					"Fórmula de pesquisa"
				]
			],
			"Summary": "O comando QUERY SELECTION BY FORMULA pesquisa registros em tabela."
		},
		"QUERY SELECTION WITH ARRAY": {
			"Syntax": "**QUERY SELECTION WITH ARRAY** ( *campoAlvo* ; *array* )",
			"Params": [
				[
					"campoAlvo",
					"Field",
					"->",
					"Campo usado para comparar os valores"
				],
				[
					"array",
					"Array",
					"->",
					"Array de valores pesquisados"
				]
			],
			"Summary": "O comando QUERY SELECTION WITH ARRAY busca na tabela do campo passado como primeiro parâmetro os registros para os quais o valor de *campoAlvo* for igual a ao menos um dos valores dos elementos no *array*."
		},
		"QUERY SELECTION": {
			"Syntax": "**QUERY SELECTION** ( {*tabela* }{;}{ *criterioPesquisa* {; *}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual devolver uma seleção de registros ou Tabela por padrão, se for omitido"
				],
				[
					"criterioPesquisa",
					"Expression",
					"->",
					"Critério de Pesquisa"
				],
				[
					"*",
					"Operador",
					"->",
					"Flag para continuar a pesquisa"
				]
			],
			"Summary": "**QUERY SELECTION** busca registros em *tabela*."
		},
		"QUERY WITH ARRAY": {
			"Syntax": "**QUERY WITH ARRAY** ( *campoAlvo* ; *array* )",
			"Params": [
				[
					"campoAlvo",
					"Field",
					"->",
					"Campo usado para comparar os valores"
				],
				[
					"array",
					"Array",
					"->",
					"Array de valores pesquisados"
				]
			],
			"Summary": "O comando **QUERY WITH ARRAY** busca na tabela do campo passado no primeiro parâmetro todos os registros para os quais o valor de *campoAlvo*, for igual ao menos a um dos valores dos elementos em Array."
		},
		"QUERY": {
			"Syntax": "**QUERY** ( {*tabela* }{;}{ *criterioPesquisa* {; *}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual devolver uma seleção de registros ou Tabela por padrão, se for omitido"
				],
				[
					"criterioPesquisa",
					"Expression",
					"->",
					"Critério de pesquisa"
				],
				[
					"*",
					"Operador",
					"->",
					"Continuar a execução da pesquisa"
				]
			],
			"Summary": "O comando QUERY pesquisa os registros que correspondem ao critério especificado em *criterioPesquisa* e devolve una seleção de registros de *tabela*."
		},
		"QUIT 4D": {
			"Syntax": "**QUIT 4D** {( *tempo* )}",
			"Params": [
				[
					"tempo",
					"Integer",
					"->",
					"Tempo (em seg) antes de sair do servidor"
				]
			],
			"Summary": "O comando QUIT 4Dfinaliza a aplicação 4D atual e retorna para o Desktop."
		},
		"Random": {
			"Syntax": "**Random**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número inteiro aleatório"
				]
			],
			"Summary": "Random retorna um valor inteiro aleatório entre 0 e 32 767 (inclusive)."
		},
		"Read only state": {
			"Syntax": "**Read only state** {( *tabela* )} : Boolean",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai testar o estado apenas-leitura, ou tabela padrão, se omitido"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Acesso à tabela é apenas-leitura (TRUE) ou Acesso a tabela é leitura-escrita (FALSE)"
				]
			],
			"Summary": "Esta função é utilizada para testar se *tabela* está em modo apenas leitura no processo no qual se chamou a função."
		},
		"READ ONLY": {
			"Syntax": "**READ ONLY** {( aTabela | * )}",
			"Params": [
				[
					"aTabela &#124; *",
					"Tabela, Operador",
					"->",
					"Tabela para qual estabelecer o estado apenas leitura, ou * para todas as tabelas, ou tabela padrão, se for omitido"
				]
			],
			"Summary": "READ ONLY muda o estado de tabela a modo apenas leitura para o processo no qual se chama ao comando."
		},
		"READ PICTURE FILE": {
			"Syntax": "**READ PICTURE FILE** ( *nomeArquivo* ; *imagem* {; *} )",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Nome ou rota completa do arquivo a ser lido, ou string vazio"
				],
				[
					"imagem",
					"Picture",
					"<-",
					"Campo ou variável que recebe a imagem"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = aceitar qualquer tipo de arquivo"
				]
			],
			"Summary": "O comando READ PICTURE FILE  permite abrir a imagem guardada no arquivo do disco *nomeArquivo* e carregá-la no campo ou variável 4D *imagem*."
		},
		"READ WRITE": {
			"Syntax": "**READ WRITE** {( tabela | * )}",
			"Params": [
				[
					"tabela &#124; *",
					"Tabela, Operador",
					"->",
					"Tabela para a qual vai estabelecer o estado apenas leitura, ou * para todas as tabelas, ou tabela padrão, se omitido"
				]
			],
			"Summary": "READ WRITE muda o estado de *tabela* a modo leitura/escrita para o processo no qual se chama ao comando."
		},
		"REAL TO BLOB": {
			"Syntax": "**REAL TO BLOB** ( *real* ; *blob* ; *realFormat* {; offset } )<br/>**REAL TO BLOB** ( *real* ; *blob* ; *realFormat* {; *} )",
			"Params": [
				[
					"real",
					"Real",
					"->",
					"Valor de tipo real a escrever no BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a receber o valor Real"
				],
				[
					"realFormat",
					"Integer",
					"->",
					"0 Formato real nativo 1 Formato real estendido 2 Formato real doble Macintosh 3 Formato real duplo Windows"
				],
				[
					"offset &#124; *",
					"Variável, Operador",
					"<->",
					"Offset no BLOB (expressado em bytes) ou * para adicionar o valor"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da escritura se * for omitido"
				]
			],
			"Summary": "O comando REAL TO BLOB grava o valor *real* no BLOB *blob*."
		},
		"RECEIVE BUFFER": {
			"Syntax": "**RECEIVE BUFFER** ( *receiveVar* )",
			"Params": [
				[
					"receiveVar",
					"Text",
					"<-",
					"Variable to receive data"
				]
			],
			"Summary": "RECEIVE BUFFER lê a porta serial que foi aberta anteriormente com SET CHANNEL."
		},
		"RECEIVE PACKET": {
			"Syntax": "**RECEIVE PACKET** ( {*docRef* ;} *receiveVar* ; *stopChar* )<br/>**RECEIVE PACKET** ( {*docRef* ;} *receiveVar* ; *numBytes* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referência do documento, o canal atual (porta serial ou documento)"
				],
				[
					"receiveVar",
					"Text, Blob",
					"<-",
					"Variável a receber os dados"
				],
				[
					"stopChar &#124; numBytes",
					"String, Inteiro longo",
					"->",
					"Caractere(s) no qual parar a recepção, ou Número de bytes a receber"
				]
			],
			"Summary": "RECEIVE PACKET lê caracteres a partir de uma porta serial ou de um documento."
		},
		"RECEIVE RECORD": {
			"Syntax": "**RECEIVE RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual receber o registro, ou tabela padrão, se omitido"
				]
			],
			"Summary": "RECEIVE RECORD recebe um registro na *tabela* a partir da porta serial ou documento aberto pelo comando SET CHANNEL."
		},
		"RECEIVE VARIABLE": {
			"Syntax": "**RECEIVE VARIABLE** ( *variavel* )",
			"Params": [
				[
					"variavel",
					"Variable",
					"<-",
					"Variável na qual receber"
				]
			],
			"Summary": "RECEIVE VARIABLE recebe a *variavel*, que anteriormente foi enviada pelo SEND VARIABLE do documento ou porta serial aberta anteriormente pelo SET CHANNEL."
		},
		"Record number": {
			"Syntax": "**Record number** {( *tabela* )} : Integer",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para qual devolver o número do registro atual, ou tabela padrão, se omitido"
				],
				[
					"Resultado de função",
					"Integer",
					"<-",
					"Nº de registro atual"
				]
			],
			"Summary": "**Record number** devolve o número do registro atual de *tabela*."
		},
		"Records in selection": {
			"Syntax": "**Records in selection** {( *tabela* )} : Integer",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual retornar número dos registros selecionados, ou tabela padrão, se omitido"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Registros em seleção da tabela"
				]
			],
			"Summary": "Records in selection retorna o número de registros na seleção atual de *tabela*."
		},
		"Records in set": {
			"Syntax": "**Records in set** ( *conjunto* ) : Integer",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto a testar"
				],
				[
					"Resultado Função",
					"Integer",
					"<-",
					"Número de registros em conjunto"
				]
			],
			"Summary": "Records in set retorna o número de registros em *conjunto*."
		},
		"Records in table": {
			"Syntax": "**Records in table** {( *tabela* )} : Integer",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai devolver o número de registros, ou tabela padrão, se omitida"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número total de registros na tabela"
				]
			],
			"Summary": "Records in table devolve o número total dos registros que contém tabela."
		},
		"REDRAW WINDOW": {
			"Syntax": "**REDRAW WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				]
			],
			"Summary": "O comando REDRAW WINDOW provoca uma atualização do conteúdo da janela cujo número de referência é passado em janela."
		},
		"REDRAW": {
			"Syntax": "**REDRAW** ( *objeto* )",
			"Params": [
				[
					"objeto",
					"any",
					"->",
					"Tabela para a qual vai redesenhar o sub-formulário; ou Campo para o qual redesenhar a área; ou Variável para a qual redesenhar a área; ou List Box a ser atualizada; ou Formulário de tabela a redesenhar ou um navegador Web."
				]
			],
			"Summary": "Quando utilizar um método para modificar o conteúdo de um campo ou sub campo mostrado em um sub-formulário, deve executar REDRAW para ter certeza que o formulário esteja corretamente atualizado."
		},
		"REDUCE RESTORE WINDOW": {
			"Syntax": "**REDUCE RESTORE WINDOW** ( *janela* )",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência de janela"
				]
			],
			"Summary": "O comando **REDUCE RESTORE WINDOW** reduz/expande a janela cujo número de referência foi passado em *janela d*esde a barra de tarefas em Windows ou no dock em macOS."
		},
		"REDUCE SELECTION": {
			"Syntax": "**REDUCE SELECTION** ( {*tabela* ;} *numero* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai reduzir a seleção, ou tabela padrão, se omitido"
				],
				[
					"numero",
					"Integer",
					"->",
					"Número de registros para manter selecionados"
				]
			]
		},
		"Refresh license": {
			"Syntax": "**Refresh license** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Status object"
				]
			],
			"Summary": "O comando **Refresh license** atualiza a licença atual de servidor 4D."
		},
		"REGENERATE MISSING TABLE": {
			"Syntax": "**REGENERATE MISSING TABLE** ( *nomeTabela* )",
			"Params": [
				[
					"nomeTabela",
					"Text",
					"->",
					"Nome de tabela não encontrada a regenerar"
				]
			],
			"Summary": "O comando REGENERATE MISSING TABLE reconstrui a tabela não encontrada cujo nome é passado no parâmetro *nomTabela*."
		},
		"REGISTER CLIENT": {
			"Syntax": "**REGISTER CLIENT** ( *nomeCliente* {; *periodo*}{; *} )",
			"Params": [
				[
					"nomeCliente",
					"Text",
					"->",
					"Nome da sessão 4D Client"
				],
				[
					"periodo",
					"Integer",
					"->",
					"***Ignorado a partir da versão 11.3***"
				],
				[
					"*",
					"Operador",
					"->",
					"Processo local"
				]
			],
			"Summary": "O comando REGISTER CLIENT “registra” uma máquina cliente com o nome especificado em *nomeCliente* no 4D Server, a fim de permitir outros clientes ou eventualmente 4D server (utilizando métodos armazenados) executar métodos fazendo uso do comando EXECUTE ON CLIENT."
		},
		"Register data key": {
			"Syntax": "**Register data key** ( *curPassPhrase* ) : Boolean<br/>**Register data key** ( *curDataKey* ) : Boolean",
			"Params": [
				[
					"curPassPhrase &#124; curDataKey",
					"Texto, Objeto",
					"->",
					"Frase passe atual (texto) ou chave de criptografia de dados atual (objeto)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se a chave de criptografia tiver sido adicionada com sucesso ao chaveiro 4D, False se já estiver no chaveiro."
				]
			],
			"Summary": "O comando **Register data key** agrega a chave de cifrado de dados passada no parâmetro ao chaveiro 4D."
		},
		"REJECT NEW REMOTE CONNECTIONS": {
			"Syntax": "**REJECT NEW REMOTE CONNECTIONS** ( *rejeitarStatus* )",
			"Params": [
				[
					"rejeitarStatus",
					"Boolean",
					"->",
					"Verdadeiro se novas conexões forem rejeitadas, senão false"
				]
			],
			"Summary": "O comando **REJECT NEW REMOTE CONNECTIONS** especifica se o servidor de aplicações aceita ou não as novas conexões de usuários remotos."
		},
		"REJECT": {
			"Syntax": "**REJECT** {( *campo* )}",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo a rejeitar"
				]
			],
			"Summary": "REJECT tem duas sintaxes."
		},
		"RELATE MANY SELECTION": {
			"Syntax": "**RELATE MANY SELECTION** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo da tabela Muitos (onde a relação começa)"
				]
			],
			"Summary": "O comando RELATE MANY SELECTION cria uma seleção de registros na tabela Muitos, baseada na seleção atual da tabela Um."
		},
		"RELATE MANY": {
			"Syntax": "**RELATE MANY** ( tabela1 | campo1 )",
			"Params": [
				[
					"tabela1 &#124; campo1",
					"Tabela, Campo",
					"->",
					"Tabela para estabelecer todas as relações Um a Muitos, ou campo UM"
				]
			],
			"Summary": "RELATE MANY tem duas sintaxes."
		},
		"RELATE ONE SELECTION": {
			"Syntax": "**RELATE ONE SELECTION** ( *tabelaN* ; *tabela1* )",
			"Params": [
				[
					"tabelaN",
					"Table",
					"->",
					"Nome da tabela Muitos (onde inicia a relação)"
				],
				[
					"tabela1",
					"Table",
					"->",
					"Nome da Tabela Um (onde termina a relação)"
				]
			],
			"Summary": "O comando **RELATE ONE SELECTION** cria uma nova seleção de registros em *tabela1* a partir da seleção de registros da *tabelaN* relacionada e carrega o primeiro registro da nova seleção como o registro atual."
		},
		"RELATE ONE": {
			"Syntax": "**RELATE ONE** ( tabelasN | campoN {; *discriminante* } )",
			"Params": [
				[
					"tabelasN &#124; campoN",
					"Tabela, Campo",
					"->",
					"Tabela para a qual estabelecer todas as relações automáticas, ou  Campo com as relações manuais para tabela Um"
				],
				[
					"discriminante",
					"Field",
					"->",
					"Campo discriminante da tabela 1"
				]
			],
			"Summary": "RELATE ONE aceita duas sintaxes."
		},
		"RELEASE MENU": {
			"Syntax": "**RELEASE MENU** ( *menu* )",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"Referência de menu"
				]
			],
			"Summary": "O comando RELEASE MENU apaga da memória o menu cuja referência se passa em *menu*."
		},
		"RELOAD EXTERNAL DATA": {
			"Syntax": "**RELOAD EXTERNAL DATA** ( *oCampo* )",
			"Params": [
				[
					"oCampo",
					"Text, Blob, Picture, Object",
					"->",
					"Campo para definir a localização de armazenamento"
				]
			],
			"Summary": "O comando **RELOAD EXTERNAL DATA** permite recarregar em memória o conteúdo de um arquivo de armazenamento externo associado a um campo de tipo BLOB, Imagem ou Texto."
		},
		"RELOAD PROJECT": {
			"Syntax": "**RELOAD PROJECT**",
			"Params": [],
			"Summary": "O comando **RELOAD PROJECT** recarrega as definições do arquivo fonte (métodos, formulários, etc.) do disco para o projeto executando no ambiente atual 4D."
		},
		"REMOVE FROM SET": {
			"Syntax": "**REMOVE FROM SET** ( {*tabela* ;} *conjunto* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Registro atual da tabela, ou tabela padrão, se omitido"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto ao qual para remover o registro atual"
				]
			],
			"Summary": "REMOVE FROM SET elimina o registro atual de *tabela* de *conjunto*."
		},
		"REMOVE PICTURE FROM LIBRARY": {
			"Syntax": "**REMOVE PICTURE FROM LIBRARY** ( refImag | nomImag )",
			"Params": [
				[
					"refImag &#124; nomImag",
					"Inteiro longo, String",
					"->",
					"Número de referência ou nome da imagem da biblioteca de imagens"
				]
			],
			"Summary": "O comando REMOVE PICTURE FROM LIBRARY elimina da biblioteca de imagens a imagem cujo número de referência se passa em *refImag* ou cujo nome se passa em *nomImag*."
		},
		"Replace string": {
			"Syntax": "**Replace string** ( *fonte* ; *obsoleto* ; *novo* {; *quantasVezes*}{; *} ) : Text",
			"Params": [
				[
					"fonte",
					"Text",
					"->",
					"Cadeia original"
				],
				[
					"obsoleto",
					"Text",
					"->",
					"Caracteres a substituir"
				],
				[
					"novo",
					"Text",
					"->",
					"Cadeia que vai substituir a velha (se estiver vazia, as ocorrências são apagadas)"
				],
				[
					"quantasVezes",
					"Integer",
					"->",
					"Quantas vezes substituir; se omitido, todas as ocorrências serão substituídas"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: avaliação baseada em códigos de caracteres"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia resultante"
				]
			],
			"Summary": "Replace string substitui um número *quantasVezes* de ocorrências, em *fonte,* de *obsoleto* por *novo* ."
		},
		"Request": {
			"Syntax": "**Request** ( *mensagem* {; *respostaPadrao* {; *okBotaoTitulo* {; *cancelarBotaoTitulo*}}} )  : Text",
			"Params": [
				[
					"mensagem",
					"Text",
					"->",
					"Mensagem a exibir na caixa de diálogo de alerta"
				],
				[
					"respostaPadrao",
					"Text",
					"->",
					"Dados automáticos para a área de entrada de texto"
				],
				[
					"okBotaoTitulo",
					"Text",
					"->",
					"Título do botão OK"
				],
				[
					"cancelarBotaoTitulo",
					"Text",
					"->",
					"Título do botão Cancelar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor introduzido pelo usuário"
				]
			],
			"Summary": "O comando **Request** mostra uma caixa de diálogo composta de uma mensagem, uma área de entrada de texto, um botão **OK** e um botão **Cancelar**."
		},
		"RESIZE FORM WINDOW": {
			"Syntax": "**RESIZE FORM WINDOW** ( *largura* ; *altura* )",
			"Params": [
				[
					"largura",
					"Integer",
					"->",
					"Pixels a adicionar ou remover da largura da janela do formulário atual"
				],
				[
					"altura",
					"Integer",
					"->",
					"Pixels a adicionar ou remover da altura da janela do formulário atual"
				]
			],
			"Summary": "O comando RESIZE FORM WINDOW permite modificar o tamanho da janela do formulário atual."
		},
		"RESOLVE ALIAS": {
			"Syntax": "**RESOLVE ALIAS** ( *rotaAlias* ; *rotaObjetivo* )",
			"Params": [
				[
					"rotaAlias",
					"Text",
					"->",
					"Nome ou rota de acesso do alias/atalho"
				],
				[
					"rotaObjetivo",
					"Text",
					"<-",
					"Nome ou rota de acesso do alias/atalho alvo"
				]
			],
			"Summary": "O comando RESOLVE ALIAS retorna a rota completa do arquivo ou pasta objetivo de um alias (chamado atalho em Windows)."
		},
		"RESOLVE POINTER": {
			"Syntax": "**RESOLVE POINTER** ( *umPonteiro* ; *nomeVar* ; *numTabela* ; *numCampo* )",
			"Params": [
				[
					"umPointer",
					"Pointer",
					"->",
					"Ponteiro do qual recuperar o objeto referenciado"
				],
				[
					"nomeVar",
					"Text",
					"<-",
					"Nome da variável referenciada ou da string vazia"
				],
				[
					"numTabela",
					"Integer",
					"<-",
					"Número de tabela referenciada ou elemento array ou 0 ou -1"
				],
				[
					"numCampo",
					"Integer",
					"<-",
					"Número de campo referenciado ou 0"
				]
			],
			"Summary": "O comando RESOLVE POINTER recupera a informação do objeto referenciado pela expressão de ponteiro *ponteiro* e a devolve nos parâmetros *nomVar*, *numTabela,* e *numCamp*."
		},
		"RESOURCE LIST": {
			"Syntax": "**RESOURCE LIST** ( *resTipo* ; *resNum* ; *resNomes* {; *resArquivo*} )",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"Tipo de resource de 4 caracteres"
				],
				[
					"resNum",
					"Integer array",
					"<-",
					"Nº de resources para recursos desse tipo"
				],
				[
					"resNomes",
					"Text array",
					"<-",
					"Nomes de resouces para recursos desse tipo"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				]
			],
			"Summary": "O comando RESOURCE LIST preenche os arrays *resNum* e *resNomes* com os números e os nomes dos recursos cujo tipo se passa em *resTipo*."
		},
		"RESOURCE TYPE LIST": {
			"Syntax": "**RESOURCE TYPE LIST** ( *resTipos* {; *resArquivo*} )",
			"Params": [
				[
					"resTipos",
					"Text array",
					"<-",
					"Lista de tipos resources disponíveis"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Número de referência do arquivo Resource, ou todos os arquivos de referência abertos, se omitido"
				]
			],
			"Summary": "O comando RESOURCE TYPE LIST preenche o array *resTipos* com os tipos de recursos presentes no(os) arquivo(s) de recursos aberto(s)."
		},
		"RESTART 4D": {
			"Syntax": "**RESTART 4D** {( *demora* {; *mensagem*} )}",
			"Params": [
				[
					"demora",
					"Integer",
					"->",
					"Tempo de atraso (segundos) antes que 4D reinicie"
				],
				[
					"mensagem",
					"Text",
					"->",
					"Texto a mostrar nas máquinas clientes"
				]
			],
			"Summary": "O comando **RESTART 4D** reinicia a aplicação fundida 4D atual."
		},
		"RESTORE INFO": {
			"Syntax": "**RESTORE INFO** ( *seletor* ; *info1* ; *info2* )",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Tipo de informação a ser obtida"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"Valor 1 do seletor"
				],
				[
					"info2",
					"Text, Time",
					"<-",
					"Valor 2 do seletor"
				]
			],
			"Summary": "O comando RESTORE INFO permite obter informações relacionadas com a última restauração automática da base de dados."
		},
		"RESTORE": {
			"Syntax": "**RESTORE** {( *endArquivo* {; *endPastaDestino*} )}",
			"Params": [
				[
					"endArquivo",
					"Text",
					"->",
					"Endereço de acesso do arquivo a ser restituído"
				],
				[
					"endPastaDestino",
					"Text",
					"->",
					"Endereço de acesso da pasta de destino"
				]
			],
			"Summary": "O comando RESTORE permite restaurar o ou os arquivos incluidos em um arquivo de 4D."
		},
		"RESUME INDEXES": {
			"Syntax": "**RESUME INDEXES** ( *aTable* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to resume indexes"
				],
				[
					"*",
					"Operador",
					"->",
					"If passed = asynchronous indexing"
				]
			],
			"Summary": "The **RESUME INDEXES** command reactivates all the indexes of *aTable* when they have been paused previously using the PAUSE INDEXES command."
		},
		"RESUME PROCESS": {
			"Syntax": "**RESUME PROCESS** ( *processo* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "RESUME PROCESS reativa um *processo* cuja execução foi atrasada ou suspendida."
		},
		"RESUME TRANSACTION": {
			"Syntax": "**RESUME TRANSACTION**",
			"Params": [],
			"Summary": "O comando **RESUME TRANSACTION** reativa a transação que foi suspensa utilizando *ServerSpecialBuild*  no nível correspondente no processo atual."
		},
		"Right click": {
			"Syntax": "**Right click**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se detectado um clique direito, se não False"
				]
			],
			"Summary": "O comando Right click retorna True se fizer clique no botão direito do mouse."
		},
		"Round": {
			"Syntax": "**Round** ( *round* ; *decimais* ) : Real",
			"Params": [
				[
					"round",
					"Real",
					"->",
					"Número a ser arredondado"
				],
				[
					"decimais",
					"Integer",
					"->",
					"Número de casas decimais a arredondar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor arredondado ao número de casas decimais especificada por decimais"
				]
			],
			"Summary": "Round retorna *numero* arredondado ao número de decimais especificado por *decimais*."
		},
		"SAVE LIST": {
			"Syntax": "**SAVE LIST** ( *lista* ; *nomeLista* )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"nomeLista",
					"Text",
					"->",
					"Nome da lista como aparecerá no editor de listas do entorno Desenho"
				]
			],
			"Summary": "O comando SAVE LIST guarda a lista cujo número de referência passou em *lista*, no editor de listas no ambiente Desenho, sob o nome que passou em *nomeLista*."
		},
		"SAVE RECORD": {
			"Syntax": "**SAVE RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai salvar o registro atual, ou tabela padrão, se omitido"
				]
			],
			"Summary": "SAVE RECORD guarda o registro atual de *tabela* no processo atual."
		},
		"SAVE RELATED ONE": {
			"Syntax": "**SAVE RELATED ONE** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo Muitos"
				]
			],
			"Summary": "SAVE RELATED ONE guarda o registro relacionado a *campo*."
		},
		"SAVE SET": {
			"Syntax": "**SAVE SET** ( *conjunto* ; *documento* )",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto a salvar"
				],
				[
					"documento",
					"Text",
					"->",
					"Nome do arquivo de disco para o qual vai salvar o conjunto"
				]
			],
			"Summary": "SAVE SET guarda *conjunto* no arquivo *documento*."
		},
		"SAVE VARIABLES": {
			"Syntax": "**SAVE VARIABLES** ( *documento* ; *variavel* {; *variavel2* ; ... ; *variavelN*} )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Documento no qual vai guardar as variáveis"
				],
				[
					"variavel",
					"Variable",
					"->",
					"Variáveis a guardar"
				]
			],
			"Summary": "O comando SAVE VARIABLES guarda uma ou várias variáveis no documento cujo nome se passa em parâmetro *documento*."
		},
		"SAX ADD PROCESSING INSTRUCTION": {
			"Syntax": "**SAX ADD PROCESSING INSTRUCTION** ( *documento* ; *instruçao* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"instruçao",
					"Text",
					"->",
					"Instrução a inserir no documento"
				]
			],
			"Summary": "O comando SAX ADD PROCESSING INSTRUCTION adiciona no *documento* XML referenciado por documento, uma *instruçao* de processamento XML."
		},
		"SAX ADD XML CDATA": {
			"Syntax": "**SAX ADD XML CDATA** ( *documento* ; *dados* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"dados",
					"Blob, Text",
					"->",
					"Texto ou BLOB a inserir no documento entre etiquetas CData"
				]
			],
			"Summary": "O comando SAX ADD XML CDATA adiciona no documento XML referenciado por *documento*, os dados de tipo texto ou BLOB."
		},
		"SAX ADD XML COMMENT": {
			"Syntax": "**SAX ADD XML COMMENT** ( *documento* ; *comentario* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"comentario",
					"Text",
					"->",
					"Comentário a ser adicionado"
				]
			],
			"Summary": "O comando SAX ADD XML COMMENT adiciona um *comentario* no documento XML referenciado por *documento*."
		},
		"SAX ADD XML DOCTYPE": {
			"Syntax": "**SAX ADD XML DOCTYPE** ( *documento* ; *docType* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"docType",
					"Text",
					"->",
					"DOCTYPE a ser adicionado"
				]
			],
			"Summary": "O comando SAX ADD XML DOCTYPE adiciona a instrução DocType definida pelo parâmetro *docType* no documento XML referenciado por *documento*."
		},
		"SAX ADD XML ELEMENT VALUE": {
			"Syntax": "**SAX ADD XML ELEMENT VALUE** ( *documento* ; *dados* {; *} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"dados",
					"Text, Variable",
					"->",
					"Texto ou variáveis a inserir no documento"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: criptografa os caracteres especiais; se omitido: não codifica."
				]
			],
			"Summary": "O comando SAX ADD XML ELEMENT VALUE adiciona diretamente no documento XML referenciado por *document*o os dados sem convertê-los."
		},
		"SAX CLOSE XML ELEMENT": {
			"Syntax": "**SAX CLOSE XML ELEMENT** ( *documento* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				]
			],
			"Summary": "O comando SAX CLOSE XML ELEMENT escreve no documento XML referenciado por *documento* as instruções necessárias para fechar o último elemento aberto utilizando o comando SAX OPEN XML ELEMENT."
		},
		"SAX GET XML CDATA": {
			"Syntax": "**SAX GET XML CDATA** ( *documento* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"valor",
					"Text, Blob",
					"<-",
					"Valor do elemento"
				]
			],
			"Summary": "O comando SAX GET XML CDATA permite recuperar o *valor* CDATA de um elemento XML existente no documento XML referenciado no parâmetro *documento*."
		},
		"SAX GET XML COMMENT": {
			"Syntax": "**SAX GET XML COMMENT** ( *documento* ; *comentario* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"comentario",
					"Text",
					"<-",
					"XML comment"
				]
			],
			"Summary": "O comando SAX GET XML COMMENT devolve um *comentario* se um evento SAX de tipo XML Comment se gera no documento XML referenciado no parâmetro *documento*."
		},
		"SAX GET XML DOCUMENT VALUES": {
			"Syntax": "**SAX GET XML DOCUMENT VALUES** ( *documento* ; *codificaçao* ; *versao* ; *autonomo* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"codificaçao",
					"Text",
					"<-",
					"conjunto de caracteres do documento XML"
				],
				[
					"versao",
					"Text",
					"<-",
					"Versão XML"
				],
				[
					"autonomo",
					"Boolean",
					"<-",
					"True = documento é autônomo; senão False"
				]
			],
			"Summary": "O comando SAX GET XML DOCUMENT VALUES extrai informação básica do cabeçalho XML do documento XML referenciado por *documento*."
		},
		"SAX GET XML ELEMENT VALUE": {
			"Syntax": "**SAX GET XML ELEMENT VALUE** ( *documento* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"valor",
					"Text, Blob",
					"<-",
					"Valor do elemento"
				]
			],
			"Summary": "O comando SAX GET XML ELEMENT VALUE permite recuperar o valor de um elemento XML existente no documento XML referenciado por *documento*."
		},
		"SAX GET XML ELEMENT": {
			"Syntax": "**SAX GET XML ELEMENT** ( *documento* ; *nome* ; *prefixo* ; *nomesAtributos* ; *valoresAtributos*  )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"nome",
					"Text",
					"<-",
					"Element name"
				],
				[
					"prefixo",
					"Text",
					"<-",
					"Namespace"
				],
				[
					"nomesAtributos",
					"Text array",
					"<-",
					"Attribute names"
				],
				[
					"valoresAtributos",
					"Text array",
					"<-",
					"Attribute values"
				]
			],
			"Summary": "O comando SAX GET XML ELEMENT devolve diversa informação relativa ao elemento nome presente no documento XML referenciado por documento."
		},
		"SAX GET XML ENTITY": {
			"Syntax": "**SAX GET XML ENTITY** ( *documento* ; *nome* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"nome",
					"Text",
					"<-",
					"Nome da entidade"
				],
				[
					"valor",
					"Text",
					"<-",
					"Entity value"
				]
			],
			"Summary": "O comando SAX GET XML ENTITY permite recuperar o nome e valor de uma entidade XML presente no documento XML referenciado por *documento*."
		},
		"SAX Get XML node": {
			"Syntax": "**SAX Get XML node** ( *documento* ) : Integer",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Event returned by function"
				]
			],
			"Summary": "O comando SAX Get XML node devolve um inteiro longo indicando o tipo de evento SAX devolvido durante a análise do documento XML referenciado por *documento*."
		},
		"SAX GET XML PROCESSING INSTRUCTION": {
			"Syntax": "**SAX GET XML PROCESSING INSTRUCTION** ( *documento* ; *nome* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"nome",
					"Text",
					"<-",
					"Instruction name"
				],
				[
					"valor",
					"Text",
					"<-",
					"Instruction value"
				]
			],
			"Summary": "O comando SAX GET XML PROCESSING INSTRUCTION devolve o *nome* e o *valor* da instrução de processo XML analizada no documento XML referenciada por documento."
		},
		"SAX OPEN XML ELEMENT ARRAYS": {
			"Syntax": "**SAX OPEN XML ELEMENT ARRAYS** ( *documento* ; *etiqueta* {; *atribNomesArray* ; *attribValuesArray*} {; *atribNomesArray2* ; *attribValuesArray2* ; ... ; *atribNomesArrayN* ; *attribValuesArrayN*} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"etiqueta",
					"Text",
					"->",
					"Nome do elemento a abrir"
				],
				[
					"atribNomesArray",
					"Text array",
					"->",
					"Array de nomes de atributo"
				],
				[
					"attribValuesArray",
					"Text array, Integer array, Date array, Real array, Picture array, Boolean array",
					"->",
					"Array of attribute values"
				]
			],
			"Summary": "O comando SAX OPEN XML ELEMENT ARRAYS permite adicionar um novo elemento no documento XML cuja referência se passa em document como também, opcionalmente, atributos e seus valores em forma de arrays."
		},
		"SAX OPEN XML ELEMENT": {
			"Syntax": "**SAX OPEN XML ELEMENT** ( *documento* ; *etiqueta* {; *nomeAtrib* ; *valorAtributo*} {; *nomeAtrib2* ; *valorAtributo2* ; ... ; *nomeAtribN* ; *valorAtributoN*} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"etiqueta",
					"Text",
					"->",
					"Nome do elemento a abrir"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Nome de atributo"
				],
				[
					"valorAtributo",
					"Text",
					"->",
					"Valor do atributo"
				]
			],
			"Summary": "O comando SAX OPEN XML ELEMENT permite adicionar um novo elemento no documento XML referenciado por *documento*, assim como, opcionalmente, atributos e seus valores."
		},
		"SAX SET XML DECLARATION": {
			"Syntax": "**SAX SET XML DECLARATION** ( *documento* ; *codificaçao* {; *autonomo*} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referência do documento aberto"
				],
				[
					"codificaçao",
					"Text",
					"->",
					"Conjunto de caracteres usado no documento XML"
				],
				[
					"autonomo",
					"Boolean",
					"->",
					"True= o documento é autônomo (standalone); False (padrão) = documento não é standalone"
				]
			],
			"Summary": "O comando **SAX SET XML DECLARATION** inicializa o documento XML referenciado por *documento* utilizando a codificação especificada."
		},
		"SCAN INDEX": {
			"Syntax": "**SCAN INDEX** ( *campo* ; *numero* {; > ou <} )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo indexado onde vai procurar o índice"
				],
				[
					"numero",
					"Integer",
					"->",
					"Nº de registros  a retornar"
				],
				[
					"> ou <",
					"Operador",
					"->",
					">a partir do começo do índice,"
				]
			],
			"Summary": "SCAN INDEX retorna uma seleção de *numero* de registros da *tabela*."
		},
		"SCREEN COORDINATES": {
			"Syntax": "**SCREEN COORDINATES** ( *esquerda* ; *superior* ; *direita* ; *inferior*  {; *tela* {; *areaTela*}} )",
			"Params": [
				[
					"esquerda",
					"Integer",
					"<-",
					"Coordenada esquerda da área da tela"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenada superior da área da tela"
				],
				[
					"direita",
					"Integer",
					"<-",
					"Coordenada direita da área da tela"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenada inferior da área da tela"
				],
				[
					"tela",
					"Integer",
					"->",
					"Número da tela, ou tela principal se omitida"
				],
				[
					"areaTela",
					"Integer",
					"->",
					"Tela inteira (padrão)ou então área de trabalho"
				]
			],
			"Summary": "O comando SCREEN COORDINATES devolve nos parâmetros *esquerda*, *acima*, *direita,* e *abaixo* as coordenadas da tela especificada por *IDtela*."
		},
		"SCREEN DEPTH": {
			"Syntax": "**SCREEN DEPTH** ( *profundidade* ; *cor* {; *tela*} )",
			"Params": [
				[
					"profundidade",
					"Integer",
					"<-",
					"Profundidade da tela (número de cores = 2 ^ profundidade)"
				],
				[
					"cor",
					"Integer",
					"<-",
					"1 = Tela cor 0 = Tela branco e preto ou escala de cinzas"
				],
				[
					"tela",
					"Integer",
					"->",
					"Número da tela, ou tela principal se omitida"
				]
			],
			"Summary": "O comando SCREEN DEPTH devolve nos parâmetros *profundidade* e *cor* a informação sobre o monitor."
		},
		"Screen height": {
			"Syntax": "**Screen height** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Windows: altura da janela da aplicação ou altura da tela se especificada * Macintosh: altura da tela principal"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura expressada em pixeles"
				]
			],
			"Summary": "Em Windows, Screen height devolve a altura da janela da aplicação 4D (janela MDI)."
		},
		"Screen width": {
			"Syntax": "**Screen width** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Windows: largo da janela da aplicação ou altura da tela se especificada * Macintosh: largo da tela principal"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Largo expressado em pixeles"
				]
			],
			"Summary": "Em Windows, Screen width devolve o largo da janela da aplicação 4D (janela MDI)."
		},
		"Select document": {
			"Syntax": "**Select document** ( *diretorio* ; *tipoArquivos* ; *titulo* ; *opçoes* {; *selecionados*} ) : Text",
			"Params": [
				[
					"diretorio",
					"Text, Integer",
					"->",
					"Rota de acesso do diretório a exibir na caixa de diálogo de seleção de documentos, ou String vazia para exibir a pasta de usuário padrão (\"Meus documentos\" em Windows e \"Documentos\" em Mac OS) ou Número da rota de acesso memorizada."
				],
				[
					"tipoArquivos",
					"Text",
					"->",
					"Lista de tipos de documentos a filtrar, ou \"*\" para não filtrar os documentos"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título da caixa de diálogo de seleção"
				],
				[
					"opçoes",
					"Integer",
					"->",
					"Opções de seleção"
				],
				[
					"selecionados",
					"Text array",
					"<-",
					"Array que contém a lista de rotas de acesso + nomes dos arquivos selecionados"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome dos arquivos selecionados (primeiro arquivo da lista em caso de seleção múltipla)"
				]
			],
			"Summary": "O comando Select document mostra uma caixa de diálogo padrão de abertura de documentos, permitindo ao usuário definir um ou mais arquivos e devolver o nome e/ou rota de acesso completa dos arquivos selecionados."
		},
		"Select folder": {
			"Syntax": "**Select folder** ( {*mensagem* }{;}{ *rotaPadrao* {; *opções*}} ) : Text",
			"Params": [
				[
					"mensagem",
					"Text",
					"->",
					"Título da janela"
				],
				[
					"rotaPadrao",
					"Text, Integer",
					"->",
					"• Rota padrão ou • String vazia para mostrar a pasta de usuário padrão (“Meus documentos” em Windows, “Documentos” em Mac OS), ou • Número de rota memorizada"
				],
				[
					"opções",
					"Integer",
					"->",
					"Opções de seleção em Mac OS"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota de acesso à pasta selecionada"
				]
			],
			"Summary": "O comando Select folder mostra uma caixa de diálogo que lhe permite selecionar manualmente uma pasta e depois recuperar a rota de acesso completa a essa pasta."
		},
		"SELECT LIST ITEMS BY POSITION": {
			"Syntax": "**SELECT LIST ITEMS BY POSITION** ( {* ;} *lista* ; *posiçaoElem*  {; *posiçaoArray*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"posiçaoElem",
					"Integer",
					"->",
					"Posição do elemento na(s) lista(s) expandida(s) /contraída(s)"
				],
				[
					"posiçaoArray",
					"Integer array",
					"->",
					"Array de posições na(s) lista(s) expandida(s) /contraída(s)"
				]
			],
			"Summary": "O comando SELECT LIST ITEMS BY POSITION seleciona os elementos cuja posição se passa em *posiçaoElem* e opcionalmente em *posiçao* *Array* na lista cujo número de referência ou nome de objeto é passada em *lista*."
		},
		"SELECT LIST ITEMS BY REFERENCE": {
			"Syntax": "**SELECT LIST ITEMS BY REFERENCE** ( *lista* ; *refElem* {; *refArray*} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referência do elemento ou 0 para o último elemento adicionado à lista"
				],
				[
					"refArray",
					"Integer array",
					"->",
					"Array de números de referência de elementos"
				]
			],
			"Summary": "O comando SELECT LIST ITEMS BY REFERENCE seleciona os elementos cujo número de referência se passa em *refElem* e opcionalmente em *refArray*, na lista cujo número de referência se passa em *lista*."
		},
		"Select RGB color": {
			"Syntax": "**Select RGB color** {( *corDefeito* {; *mensagem*} )} : Integer",
			"Params": [
				[
					"corDefeito",
					"Integer",
					"->",
					"Cor RGB pré-selecionada"
				],
				[
					"mensagem",
					"Text",
					"->",
					"Título da janela de seleção"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Cor RGB"
				]
			],
			"Summary": "O comando Select RGB color mostra a janela sistema de seleção de cor e devolve o valor RGB da cor selecionada pelo usuário."
		},
		"Selected list items": {
			"Syntax": "**Selected list items** ( {* ;} *lista* {; *arrayElem* {; *}} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"arrayElem",
					"Integer array",
					"<-",
					"Se omitido o segundo *: Array contém as posições dos elementos selecionados na(s) lista(s) Se passado o segundo *: Array contém as referências dos elementos selecionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Se omitido: posição(es) do(s) elemento(s) Se passado: referencia(s) do(s) elemento(s)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Se omitido o segundo *: posição do elemento selecionado na(s) lista(s) expandida(s) Se passado o segundo *: Referência do elemento selecionado"
				]
			],
			"Summary": "O comando Selected list items retorna a posição ou referência do elemento selecionado na lista cujo número de referência ou nome de objeto é passada em *lista*."
		},
		"Selected record number": {
			"Syntax": "**Selected record number** {( *tabela* )} : Integer",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual retornar o número de registros selecionados ou tabela padrão se omitida"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Nº registro selecionado do registro atual"
				]
			],
			"Summary": "Selected record number retorna a posição do registro atual na seleção atual de *tabela*."
		},
		"SELECTION RANGE TO ARRAY": {
			"Syntax": "**SELECTION RANGE TO ARRAY** ( *inicio* ; *fim* {; umCampo | umaTabela ; *array*} {; umCampo | umaTabela2 ; *array2* ; ... ; umCampo | umaTabelaN ; *arrayN*} )",
			"Params": [
				[
					"inicio",
					"Integer",
					"->",
					"Número do registro selecionado onde a recuperação de dados começa"
				],
				[
					"fim",
					"Integer",
					"->",
					"Número de registro selecionado onde termina a recuperação de dados"
				],
				[
					"umCampo &#124; umaTabela",
					"Campo, Tabela",
					"->",
					"Campo usado para pedir dados ou Tabela usada para pedir números de registros"
				],
				[
					"array",
					"Array",
					"<-",
					"Array para receber dados do campo ou número de registros"
				]
			],
			"Summary": "**SELECTION RANGE TO ARRAY** cria um ou mais arrays e copia os dados dos campos ou números de registro da seleção atual para os arrays."
		},
		"SELECTION TO ARRAY": {
			"Syntax": "**SELECTION TO ARRAY** {( umCampo | umaTabela ; *array* {; *campo* ; *array* {; *campo2* ; *array2* ; ... ; *campoN* ; *arrayN*}}{; *})}",
			"Params": [
				[
					"umCampo &#124; umaTabela",
					"Campo, Tabela",
					"->",
					"Campo usado para pedir dados ou Tabela usada para pedir números de registros"
				],
				[
					"array",
					"Array",
					"<-",
					"Array para receber dados do campo ou número de registros"
				],
				[
					"campo",
					"Field",
					"->",
					"Campo a ser requisitado no array"
				],
				[
					"array",
					"Array",
					"<-",
					"Array a receber os dados do campo"
				],
				[
					"*",
					"Operador",
					"->",
					"Aguarde execução"
				]
			],
			"Summary": "O comando **SELECTION TO ARRAY** cria um ou mais arrays e copia os dados nos campos ou números de registros da seleção atual para os arrays."
		},
		"Selection to JSON": {
			"Syntax": "**Selection to JSON** ( *aTabela* {; *oCampo*}{; *oCampo2* ; ... ; *oCampoN*}{; *modelo*})  : Text",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Tabela a serializar"
				],
				[
					"oField",
					"Field",
					"->",
					"Campo(s) cujo(s) conteúdos devem ser serializados"
				],
				[
					"modelo",
					"Object",
					"->",
					"Objeto para a seleção de etiquetas e de campos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia que contém o array JSON serializado"
				]
			],
			"Summary": "O comando **Selection to JSON** devolve uma cadeia JSON que contém os valores dos campos da seleção atual de *aTabela*."
		},
		"Self": {
			"Syntax": "**Self**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Pointer to form object (if any) whose method is currently being executed. Otherwise Nil (->[]) if outside of context"
				]
			],
			"Summary": "Este comando só é conservada por razões de compatibilidade."
		},
		"Semaphore": {
			"Syntax": "**Semaphore** ( *semaforo* {; *tickCount*} ) : Boolean",
			"Params": [
				[
					"semaforo",
					"Text",
					"->",
					"Semáforo a testar e estabelecer"
				],
				[
					"tickCount",
					"Integer",
					"->",
					"Máximo tempo de espera"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"O semáforo foi criado corretamente (FALSE) ou O semáforo já tinha sido criado (TRUE)"
				]
			],
			"Summary": "Um semáforo é uma bandeira compartihada entre estações de trabalho (o computador de cada usuário) ou entre processos na mesma estação de trabalho."
		},
		"SEND MESSAGE TO REMOTE USER": {
			"Syntax": "**SEND MESSAGE TO REMOTE USER** ( *message* {; *userSession*} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Text sent to user"
				],
				[
					"userSession",
					"Text",
					"->",
					"User's session ID"
				]
			],
			"Summary": "The **SEND MESSAGE TO REMOTE USER** command sends a message to all remote users or to a specific remote user."
		},
		"SEND PACKET": {
			"Syntax": "**SEND PACKET** ( {*docRef* ;} *pacote* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referência do documento, o canal atual (porta serial ou documento)"
				],
				[
					"pacote",
					"Text, Blob",
					"->",
					"String ou BLOB a ser enviado"
				]
			],
			"Summary": "O comando SEND PACKET envia um pacote para uma porta serial ou a um documento."
		},
		"SEND RECORD": {
			"Syntax": "**SEND RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela da qual enviar o registro corrente, ou Tabela padrão, se omitido"
				]
			],
			"Summary": "SEND RECORD envia o registro atual de *tabela* à porta serial ou documento aberto pelo comando SET CHANNEL."
		},
		"SEND VARIABLE": {
			"Syntax": "**SEND VARIABLE** ( *variavel* )",
			"Params": [
				[
					"variavel",
					"Variable",
					"->",
					"Variável a ser enviada"
				]
			],
			"Summary": "SEND VARIABLE envia *variavel* para o documento ou a porta serial aberta anteriormente pelo SET CHANNEL."
		},
		"Sequence number": {
			"Syntax": "**Sequence number** {( *tabela* )} : Integer",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual devolver o número de sequência, ou tabela padrão, se omitido"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de sequência"
				]
			],
			"Summary": "**Sequence number** devolve o próximo número automático de *tabela*."
		},
		"SET ABOUT": {
			"Syntax": "**SET ABOUT** ( *textoElem* ; *metodo* )",
			"Params": [
				[
					"textoElem",
					"Text",
					"->",
					"Novo item do menu Sobre"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nome de método a executar quando o item de menu for escolhido"
				]
			],
			"Summary": "O comando SET ABOUT muda o comando de menu Sobre 4D do menu **Ajuda** (Windows) ou do menu **Aplicação** (macOS) em *textoItem*."
		},
		"SET APPLICATION COLOR SCHEME": {
			"Syntax": "**SET APPLICATION COLOR SCHEME** ( *esquemaCor* )",
			"Params": [
				[
					"esquemaCor",
					"Text",
					"->",
					"\"light/claro\", \"dark/escuro\" ou \"inherited/herdado\""
				]
			],
			"Summary": "O comando **SET APPLICATION COLOR SCHEME** define o esquema de cores a usar no nível da aplicação para a sessão atual."
		},
		"SET ASSERT ENABLED": {
			"Syntax": "**SET ASSERT ENABLED** ( *asserções* {; *} )",
			"Params": [
				[
					"asserções",
					"Boolean",
					"->",
					"TRUE = Ativa asserções FALSE = desativa asserções"
				],
				[
					"*",
					"Operador",
					"->",
					"Se omitido = comando aplica a todos os processos (existidos ou que serão criados) se passado, o comando = aplica apenas ao processo atual."
				]
			],
			"Summary": "O comando SET ASSERT ENABLED é utilizado para desativar ou reativar as asserções inseridas no código 4D da aplicação."
		},
		"SET AUTOMATIC RELATIONS": {
			"Syntax": "**SET AUTOMATIC RELATIONS** ( *um* {; *muitos*} )",
			"Params": [
				[
					"um",
					"Boolean",
					"->",
					"Estado de todas as relação Muitos a Um"
				],
				[
					"muitos",
					"Boolean",
					"->",
					"Estado de todas as relações Um a Muitos"
				]
			],
			"Summary": "SET AUTOMATIC RELATIONS muda temporariamente todas as relações manuais em relações automáticas para todo o banco no processo atual."
		},
		"SET BLOB SIZE": {
			"Syntax": "**SET BLOB SIZE** ( *BLOB* ; *tamanho* {; *preenchimento*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"Campo ou variável BLOB"
				],
				[
					"tamanho",
					"Integer",
					"->",
					"Novo tamanho do BLOB"
				],
				[
					"preenchimento",
					"Integer",
					"->",
					"Código ASCII do caractere de preenchimento"
				]
			],
			"Summary": "SET BLOB SIZE redimensiona o BLOB *blob* de acordo com o valor passado no *tamanho*."
		},
		"SET BLOBS CACHE PRIORITY": {
			"Syntax": "**SET BLOBS CACHE PRIORITY** ( *Tabela* ; *prioridade* )",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela cujo valor de prioridade de dados dos \"blobs\" vai ser estabelecido para a sessão"
				],
				[
					"prioridade",
					"Integer",
					"->",
					"Valor de prioridade de cache para BLOBS na tabela"
				]
			],
			"Summary": "Este comando está reservado para necessidades específicas."
		},
		"SET CACHE SIZE": {
			"Syntax": "**SET CACHE SIZE** ( *tamanho* {; *libMin*} )",
			"Params": [
				[
					"tamanho",
					"Real",
					"->",
					"Tamanho do banco de dados em bytes"
				],
				[
					"libMin",
					"Real",
					"->",
					"Mínimo número de bytes a liberar quando cache estiver cheia"
				]
			],
			"Summary": "O comando SET CACHE SIZE define dinâmicamente o tamanho da cache do banco de dados e, opcionalmente, permite definir o tamanho minino em bytes a partir do qual começa a liberar memória."
		},
		"SET CHANNEL": {
			"Syntax": "**SET CHANNEL** ( *porta* ; *configuraçao* ) <br/>\n**SET CHANNEL** ( *operaçao* ; *documento* )",
			"Params": [
				[
					"porta",
					"Integer",
					"->",
					"Número da porta serial"
				],
				[
					"configuraçao",
					"Integer",
					"->",
					"Configuração da porta serial"
				],
				[
					"SET CHANNEL ( operaçao ; documento )"
				],
				[
					"Parâmetro",
					"Tipo",
					"Descrição"
				],
				[
					"operaçao",
					"Integer",
					"->",
					"Operação de documento a ser realizada"
				],
				[
					"documento",
					"Text",
					"->",
					"Nome do documento"
				]
			],
			"Summary": "O comando SET CHANNEL abre uma porta serial ou um documento."
		},
		"SET CURRENT PRINTER": {
			"Syntax": "**SET CURRENT PRINTER** ( *nomImpr* )",
			"Params": [
				[
					"nomImpr",
					"Text",
					"->",
					"Nome da impressora a ser usada"
				]
			],
			"Summary": "O comando **SET CURRENT PRINTER** utiliza para designar a impressora a utilizar par imprimir com a aplicação 4D atual."
		},
		"SET CURSOR": {
			"Syntax": "**SET CURSOR** {( *cursor* )}",
			"Params": [
				[
					"cursor",
					"Integer",
					"->",
					"Número de resource de cursor"
				]
			],
			"Summary": "O comando SET CURSOR muda o cursor do mouse para o cursos do sistema cujo número de ID você passar em *cursor*."
		},
		"SET DATABASE LOCALIZATION": {
			"Syntax": "**SET DATABASE LOCALIZATION** ( *codigoIdioma* {; *} )",
			"Params": [
				[
					"codigoIdioma",
					"Text",
					"->",
					"Seletor de idioma"
				],
				[
					"*",
					"Operador",
					"->",
					"Escopo do comando"
				]
			],
			"Summary": "O comando SET DATABASE LOCALIZATION é utilizado para modificar o idioma atual do banco de dados para a sessão atual."
		},
		"SET DATABASE PARAMETER": {
			"Syntax": "**SET DATABASE PARAMETER** ( {*tabela* ;} *seletor* ; *value* )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela a qual atribuir o parâmetro ou, Tabela padrão se o parâmetro for omitido."
				],
				[
					"seletor",
					"Integer",
					"->",
					"Código do banco de dados a ser modificado"
				],
				[
					"value",
					"Real, Text",
					"->",
					"Valor do parâmetro"
				]
			],
			"Summary": "O comando **SET DATABASE PARAMETER** permite modificar vários parâmetros internos do banco de dados 4D."
		},
		"SET DEFAULT CENTURY": {
			"Syntax": "**SET DEFAULT CENTURY** ( *seculo* {; *anoPivo*} )",
			"Params": [
				[
					"seculo",
					"Integer",
					"->",
					"Século por padrão (menos um) para a entrada de anos com dois dígitos"
				],
				[
					"anoPivo",
					"Integer",
					"->",
					"Ano pivô para a entrada de anos com dois dígitos"
				]
			],
			"Summary": "O comando SET DEFAULT CENTURY permite especificar o século por padrão e o ano pivô utilizado por 4D quando introduz uma data com só dois dígitos para o ano."
		},
		"SET DOCUMENT POSITION": {
			"Syntax": "**SET DOCUMENT POSITION** ( *docRef* ; *offset* {; *ancora*} )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referência de documento"
				],
				[
					"offset",
					"Real",
					"->",
					"Posição de arquivo (expresso em bytes)"
				],
				[
					"ancora",
					"Integer",
					"->",
					"1 = em relação ao começo do arquivo 2= em relação ao final do arquivo 3= em relação a posição atual"
				]
			],
			"Summary": "Este comando funciona apenas em um documento aberto cujo número de referência é passado em *docRef*."
		},
		"SET DOCUMENT PROPERTIES": {
			"Syntax": "**SET DOCUMENT PROPERTIES** ( *documento* ; *bloqueado* ; *invisivel* ; *criadoEm* ; *criadoAs* ; *modificadoEm* ; *modificadoAs* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nome do documento ou rota de acesso completa"
				],
				[
					"bloqueado",
					"Boolean",
					"->",
					"Bloqueado (True) ou Desbloqueado (False)"
				],
				[
					"invisivel",
					"Boolean",
					"->",
					"Invisível (True) ou Visível (False)"
				],
				[
					"criadoEm",
					"Date",
					"->",
					"Data de criação"
				],
				[
					"criadoAs",
					"Time",
					"->",
					"HOra de criação"
				],
				[
					"modificadoEm",
					"Date",
					"->",
					"última modificação de data"
				],
				[
					"modificadoAs",
					"Time",
					"->",
					"última hora modificada"
				]
			],
			"Summary": "O comando SET DOCUMENT PROPERTIES modifica a informação do documento cujo nome ou rota de acesso se passar em *documento*."
		},
		"SET DOCUMENT SIZE": {
			"Syntax": "**SET DOCUMENT SIZE** ( *docRef* ; *tamanho* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referência de documento"
				],
				[
					"tamanho",
					"Real",
					"->",
					"Novo tamanho expresso em bytes"
				]
			],
			"Summary": "O comando SET DOCUMENT SIZE define o tamanho de um documento para o número de bytes que são passados em *tamanho*."
		},
		"SET DRAG ICON": {
			"Syntax": "**SET DRAG ICON** ( *icone* {; *deslH* {; *deslV*}} )",
			"Params": [
				[
					"icone",
					"Picture",
					"->",
					"Ícone a utilizar durante arrastar"
				],
				[
					"deslH",
					"Integer",
					"->",
					"Deslocamento horizontal do borde esquerdo da imagem com respeito a posição do cursor (> = 0, a esquerda, <0 = a direita)"
				],
				[
					"deslV",
					"Integer",
					"->",
					"Deslocamento vertical do borde superior da imagem com respeito a posição do cursor (> 0 = para cima, <0 = para baixo)"
				]
			],
			"Summary": "O comando **SET DRAG ICON** associa a imagem de ícone ao cursor durante as operações de arrastar e soltar que se manipulam por programação."
		},
		"SET ENVIRONMENT VARIABLE": {
			"Syntax": "**SET ENVIRONMENT VARIABLE** ( *nomeVar* ; *valorVar* )",
			"Params": [
				[
					"nomeVar",
					"Text",
					"->",
					"nome da variável a estabelecer."
				],
				[
					"valorVar",
					"Text",
					"->",
					"Valor da variável ou \"\" para resetar para o valor padrão"
				]
			],
			"Summary": "O comando **SET ENVIRONMENT VARIABLE** permite fixar o valor de uma variável de ambiente em macOS e Windows."
		},
		"SET EXTERNAL DATA PATH": {
			"Syntax": "**SET EXTERNAL DATA PATH** ( *aCampo* ; *rota* )",
			"Params": [
				[
					"aCampo",
					"Text, Blob, Picture",
					"->",
					"Campo para definir o local de armazenamento"
				],
				[
					"rota",
					"Text, Integer",
					"->",
					"Caminho e nome do arquivo d armazenamento externo ou0=usar definição da estrutura1=usar pasta padrão"
				]
			],
			"Summary": "* O comando **SET EXTERNAL DATA PATH**, define ou modifica, para o atual registro, a localização do armazenamento externo para o campo *aCampo* passado como parâmetro."
		},
		"SET FIELD RELATION": {
			"Syntax": "**SET FIELD RELATION** ( tabelaN | campoN ; *um* ; *muitos* )",
			"Params": [
				[
					"tabelaN &#124; campoN",
					"Tabela, Campo",
					"->",
					"Tabela de início das relações ou Campo de início da relação"
				],
				[
					"um",
					"Integer",
					"->",
					"Estado da relação Muitos a Um a partir do campo ou das relações Muitos a Um da tabela"
				],
				[
					"muitos",
					"Integer",
					"->",
					"Estado da relação Um a Muitos a partir do campo ou das relações Um a Muitos da tabela"
				]
			],
			"Summary": "O comando SET FIELD RELATION permite definir separadamente o estado automático/manual de cada relação do banco para o processo atual, sem considerar seu estado inicial definido no ambiente Desenho na janela de propriedades das relações."
		},
		"SET FIELD TITLES": {
			"Syntax": "**SET FIELD TITLES** ( *tabela* ; *titulosCampos* ; *numCampos* {; *} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai estabelecer os títulos dos campos"
				],
				[
					"titulosCampos",
					"Text array",
					"->",
					"Nomes dos campos do jeito que eles vão aparecer nas caixas de diálogo"
				],
				[
					"numCampos",
					"Integer array",
					"->",
					"Números de campos atuais"
				],
				[
					"*",
					"Operator",
					"->",
					"Use os nomes personalizados no editor de fórmulas"
				]
			],
			"Summary": "SET FIELD TITLES permite ocultar, renomear e reorganizar os campos de uma tabela ou de uma subtabela passada em *tabela* ou *subtabela* quando aparecem nos editores padrão de 4D, tal como o editor de pesquisas, em modo Aplicação (mais especificamente, quando os editores são chamados através dos comandos do linguagem de 4D)."
		},
		"SET FIELD VALUE NULL": {
			"Syntax": "**SET FIELD VALUE NULL** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo onde o valor NULL vai ser atribuído"
				]
			],
			"Summary": "O comando SET FIELD VALUE NULL atribui o valor NULL ao campo designado pelo parâmetro *campo*."
		},
		"SET FILE TO PASTEBOARD": {
			"Syntax": "**SET FILE TO PASTEBOARD** ( *rotaArquivo* {; *} )",
			"Params": [
				[
					"rotaArquivo",
					"Text",
					"->",
					"Nome do arquivo ou rota de acesso completa"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passar = adicionar; se omitido = substituir"
				]
			],
			"Summary": "O comando SET FILE TO PASTEBOARD adiciona a área de transferência à rota de acesso completa do arquivo passada no parâmetro *arquivo*."
		},
		"SET GROUP ACCESS": {
			"Syntax": "**SET GROUP ACCESS** {( *grupos* )}",
			"Params": [
				[
					"grupos",
					"Collection",
					"->",
					"Nome dos grupos ao qual a conta de usuário 4D deve pertencer durante a sessão"
				]
			],
			"Summary": "O comando **SET GROUP ACCESS** modifica o nível de filiação da conte de usuário 4D para a sesão atual."
		},
		"Set group properties": {
			"Syntax": "**Set group properties** ( *refGrupo* ; *nome* ; *proprietario* {; *membros*} )  : Integer",
			"Params": [
				[
					"refGrupo",
					"Integer",
					"->",
					"Número de ID do grupo; ou -1 para adicionar um grupo Designer, ou -2 para adicionar um grupo Administrador"
				],
				[
					"<-",
					"Número de ID única do grupo adicionado (se houver)"
				],
				[
					"nome",
					"Text",
					"->",
					"Novo nome do grupo"
				],
				[
					"proprietario",
					"Integer",
					"->",
					"Número de ID do novo proprietário do grupo"
				],
				[
					"membros",
					"Integer array",
					"->",
					"Novos membros do grupo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Nº de ID do novo grupo"
				]
			],
			"Summary": "Set group properties permite modificar e atualizar as propriedades de um grupo existente cujo número de referência único se passa em *refGrupo*, ou para adicionar um novo grupo\n\nSe modificar as propriedades de um grupo existente, deve passar um número de referência válido retornado pelo comando GET GROUP LIST."
		},
		"SET HELP MENU": {
			"Syntax": "**SET HELP MENU** ( *menuCol* )",
			"Params": [
				[
					"menuCol",
					"Collection",
					"->",
					"Coleção de objetos menu"
				]
			],
			"Summary": "O comando **SET HELP MENU** lhe permite substituir o menu **Ajuda** por padrão de 4D pela coleção de elementos do menu *menuCol* de modo aplicação."
		},
		"SET INDEX CACHE PRIORITY": {
			"Syntax": "**SET INDEX CACHE PRIORITY** ( *Campo* ; *prioridade* )",
			"Params": [
				[
					"Field",
					"Field",
					"->",
					"Campo cujo valor de prioridade de índices vai ser estabelecida para a sessão"
				],
				[
					"prioridade",
					"Integer",
					"->",
					"Valor de prioridade cache para o campo índice"
				]
			],
			"Summary": "Este comando está reservado para necessidades específicas."
		},
		"SET INDEX": {
			"Syntax": "**SET INDEX** ( *campo* ; *indice* {; *} )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"campo para o qual criar ou apagar o índice"
				],
				[
					"indice",
					"Boolean, Integer",
					"->",
					"True = criar índice, False = apagar índice, ou Criar um índice do tipo: -1=palavras chaves, 0= por padrão, 1=B-Tree padrão, 3=B-Tree cluster"
				],
				[
					"*",
					"Operator",
					"->",
					"Índice assincrônico se * for passado"
				]
			],
			"Summary": "**SET INDEX**, apesar de ser um comando herdado, ainda é compatível e pode permanecer em sua aplicação, não é necessário voltar a escrever o código existente."
		},
		"SET LIST ITEM FONT": {
			"Syntax": "**SET LIST ITEM FONT** ( {* ;} *lista* ; refElem | *  ; *fonte* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"fonte",
					"Text, Integer",
					"->",
					"Nome ou número de fonte"
				]
			],
			"Summary": "O comando SET LIST ITEM FONT modifica a fonte de caracteres do elemento especificado pelo parâmetro *refElem* da lista cujo número de referência ou nome de objeto se passa em *lista*."
		},
		"SET LIST ITEM ICON": {
			"Syntax": "**SET LIST ITEM ICON** ( {* ;} *lista* ; refElem | *  ; *icone* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Inteiro longo, Operador",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"icone",
					"Picture",
					"->",
					"Ícone a associar ao elemento"
				]
			],
			"Summary": "O comando SET LIST ITEM ICON permite modificar o ícone associado ao elemento especificado pelo parâmetro *refElem* da lista cujo número de referência o nome de objeto se passa em *lista*   \n\n**Nota:** é possível modificar o ícone associado com um elemento utilizando o comando SET LIST ITEM PROPERTIES."
		},
		"SET LIST ITEM PARAMETER": {
			"Syntax": "**SET LIST ITEM PARAMETER** ( {* ;} *lista* ; refElem | * ; *seletor* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"seletor",
					"Text",
					"->",
					"Constante do parâmetro"
				],
				[
					"valor",
					"Text, Boolean, Real",
					"->",
					"Valor do parâmetro"
				]
			],
			"Summary": "O comando SET LIST ITEM PARAMETER permite modificar o parâmetro *seletor* para o elemento *refElem* da lista hierárquica cuja referência ou nome de objeto são passadas no parâmetro *lista*."
		},
		"SET LIST ITEM PROPERTIES": {
			"Syntax": "**SET LIST ITEM PROPERTIES** ( {* ;} *lista* ; refElem | * ; *editavel* ; *estilos* {; *icone* {; *cor*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se for especificado, lista é um nome de objeto (string). Se omitido, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número lista referência (se* for omitido) ou Nome do objeto tipo lista (se * for passado)"
				],
				[
					"refElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Número referência Item, ou 0 para o último item anexado a lista, ou * para o item de lista atual"
				],
				[
					"editavel",
					"Boolean",
					"->",
					"True = editável, False = não editável"
				],
				[
					"estilos",
					"Integer",
					"->",
					"Estilo de fonte para o item"
				],
				[
					"icone",
					"Text, Integer",
					"->",
					"Nome da Imagem ou número (\"\" ou 0 se não houver ícone)"
				],
				[
					"cor",
					"Integer",
					"->",
					"Valor de cor RGB ou -1 = volta para a cor original"
				]
			],
			"Summary": "O comando **SET LIST ITEM PROPERTIES** modifica o elemento designado pelo parâmetro *refElem* da lista cujo número de referência ou nome de objeto se passa em *lista*."
		},
		"SET LIST ITEM": {
			"Syntax": "**SET LIST ITEM** ( {* ;} *lista* ; refElem | * ; *novoText* ; *novoNum* {; *sublista* ; *expandida*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificada, lista é um nome de objeto (cadeia) Se omitida, lista é um número de referência de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referência de lista (se omitida *) ou Nome do objeto de tipo lista (se passada *)"
				],
				[
					"refElem &#124; *",
					"Operador, Inteiro longo",
					"->",
					"Número de referencia do elemento, ou 0 para o último elemento adicionado à lista ou * para o elemento da lista atualmente selecionada"
				],
				[
					"novoText",
					"Text",
					"->",
					"Novo texto do elemento"
				],
				[
					"novoNum",
					"Integer",
					"->",
					"Novo número de referência do elemento"
				],
				[
					"sublista",
					"Integer",
					"->",
					"Nova sub-lista associada ao elemento, ou 0 = nenhuma sub-lista (separar atual, se existe), ou -1 = nenhuma muda"
				],
				[
					"expandida",
					"Boolean",
					"->",
					"Indica se a sub-lista deve ser expandida ou contraída"
				]
			],
			"Summary": "O comando SET LIST ITEM modifica o elemento designado pelo parâmetro *refElem* na lista cujo número de referência ou nome de objeto se passa em *lista*."
		},
		"SET LIST PROPERTIES": {
			"Syntax": "**SET LIST PROPERTIES** ( *lista* ; *aparencia* {; *icone* {; *alturaLinha* {; *duploClique* {; *multiSeleçao* {; *editavel*}}}}} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"aparencia",
					"Integer",
					"->",
					"Estilo gráfico da lista 1 = Lista hierárquica à Macintosh 2 = Lista hierárquica à Windows 0 = Aparição auto dependendo da plataforma"
				],
				[
					"icone",
					"Integer",
					"->",
					"ID de recurso Mac OS ‘cicn’ ou 0 = ícone por padrão da plataforma"
				],
				[
					"alturaLinha",
					"Integer",
					"->",
					"Altura mínima da linha expressada em pixels"
				],
				[
					"duploClique",
					"Integer",
					"->",
					"Expandir/Contrair sub-lista com duplo-clique 0 = Sim, 1= Não"
				],
				[
					"multiSeleçao",
					"Integer",
					"->",
					"Seleções múltiplas: 0 = Não (por padrão), 1 = Sim"
				],
				[
					"editavel",
					"Integer",
					"->",
					"0=Lista não é editável pelo usuário, 1=Lista não é editável pelo usuário (padrão)"
				]
			],
			"Summary": "O comando SET LIST PROPERTIES define a aparência da lista hierárquica cuja referência é passada no parâmetro *lista*."
		},
		"SET MACRO PARAMETER": {
			"Syntax": "**SET MACRO PARAMETER** ( *seletor* ; *paramTexto* )",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Seleção a usar"
				],
				[
					"paramText",
					"Text",
					"->",
					"Texto enviado"
				]
			],
			"Summary": "O comando SET MACRO PARAMETER insere o texto *paramText* no método desde o qual é chamado."
		},
		"SET MENU BAR": {
			"Syntax": "**SET MENU BAR** ( *barra* {; *processo*}{; *} )",
			"Params": [
				[
					"barra",
					"Integer, Text, Text",
					"->",
					"Número ou nome da barra de menu ou referência de Menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				],
				[
					"*",
					"Operador",
					"->",
					"Guardar estado da barra de menu"
				]
			],
			"Summary": "MENU BAR substitui a barra de menus atual com a especificada por *barra* no processo atual unicamente."
		},
		"SET MENU ITEM ICON": {
			"Syntax": "**SET MENU ITEM ICON** ( *menu* ; *menuItem* ; *iconeRef* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de referência ou Número de Menu"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número do item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"iconeRef",
					"Text, Integer",
					"->",
					"Nome ou número de imagem a ser associado com o item de menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "O comando **SET MENU ITEM ICON** permite modificar o ícone associado à linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"SET MENU ITEM MARK": {
			"Syntax": "**SET MENU ITEM MARK** ( *menu* ; *menuItem* ; *marcar* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de Item ou -1 para o último item adicionado"
				],
				[
					"marcar",
					"Text",
					"->",
					"Marcar item Novo menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				]
			],
			"Summary": "O comando SET MENU ITEM MARK modifica a marca do elemento de menu cujo número ou referência de menu é passado em *menu* e cujo número de linha se passa em *menuItem* ao primeiro caractere da cadeia passada em *marcar*."
		},
		"SET MENU ITEM METHOD": {
			"Syntax": "**SET MENU ITEM METHOD** ( *menu* ; *menuItem* ; *nomeMetodo* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome do método"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "O comando SET MENU ITEM METHOD pode ser utilizada para modificar o método de projeto 4D associado à linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"SET MENU ITEM PARAMETER": {
			"Syntax": "**SET MENU ITEM PARAMETER** ( *menu* ; *menuItem* ; *param* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"param",
					"Text",
					"->",
					"String a ser associado como parâmetro"
				]
			],
			"Summary": "O comando SET MENU ITEM PARAMETER permite associar uma cadeia de caracteres personalizada com uma linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"SET MENU ITEM PROPERTY": {
			"Syntax": "**SET MENU ITEM PROPERTY** ( *menu* ; *menuItem* ; *propriedade* ; *valor* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado ao menu"
				],
				[
					"propriedade",
					"Text",
					"->",
					"Tipo de propriedade"
				],
				[
					"valor",
					"Text, Number, Boolean",
					"->",
					"Valor da propriedade"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de processo"
				]
			],
			"Summary": "O comando SET MENU ITEM PROPERTY permite fixar o *valor* da *propriedade* para a linha de menu designada pelos parâmetros *menu* e *menuItem*."
		},
		"SET MENU ITEM SHORTCUT": {
			"Syntax": "**SET MENU ITEM SHORTCUT** ( *menu* ; *menuItem* ; *itemKey* ; *modificadores* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para o último item adicionado"
				],
				[
					"itemKey",
					"Text, Integer",
					"->",
					"Letra de atalho do teclado ou código do Caractere do atalho de teclado (sintaxe antiga)"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Modificador(es) para associar com atalho (ignorado se código de tecla for passado)"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				]
			],
			"Summary": "O comando  SET MENU ITEM SHORTCUT  modifica o atalho Ctrl (Windows) ou comando (Macintosh) para o comando de menu cujos números de menu e de elemento são passados em *menu* e *menuItem,* pelo caracter cujo caractere de código ou texto se passa em *itemKey*."
		},
		"SET MENU ITEM STYLE": {
			"Syntax": "**SET MENU ITEM STYLE** ( *menu* ; *menuItem* ; *itemEstilo* {; *processo*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item de menu ou -1 para último item adicionado"
				],
				[
					"itemEstilo",
					"Integer",
					"->",
					"Novo estilo de item de menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência de processo"
				]
			],
			"Summary": "O comando SET MENU ITEM STYLE cambia o estilo da fonte da linha de menu cujo número ou referência de menu se passa em *menu* e cujo número de elemento se passa em *menuItem* de acordo ao estilo de fonte passado em *itemEstilo*."
		},
		"SET MENU ITEM": {
			"Syntax": "**SET MENU ITEM** ( *menu* ; *menuItem* ; *textoElem* {; *processo*}{; *} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menu ou menu de referência"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Número de item menu ou  -1 para o último item adicionado"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Novo texto para o item de menu"
				],
				[
					"processo",
					"Integer",
					"->",
					"Número de referência do processo"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: considerar metacaracteres como caracteres comuns"
				]
			],
			"Summary": "O comando SET MENU ITEM modifica o texto da linha de menu cujo número ou referencia de menu se passa em *menu* e cujo número de elemento se passa em *menuItem*, para o texto que passou em *itemText*."
		},
		"SET PICTURE FILE NAME": {
			"Syntax": "**SET PICTURE FILE NAME** ( *imagem* ; *nomArquivo* )",
			"Params": [
				[
					"imagem",
					"Picture, Picture",
					"->",
					"Imagem para à qual definir o nome por padrão"
				],
				[
					"nomArquivo",
					"Text",
					"->",
					"Nome da imagem por padrão"
				]
			],
			"Summary": "O comando **SET PICTURE FILE NAME** define ou modifica o nome do arquivo por defeito da imagem passada como parâmetro."
		},
		"SET PICTURE METADATA": {
			"Syntax": "**SET PICTURE METADATA** ( *imagem* ; *nomeMeta* ; *conteudoMeta* {; *nomeMeta2* ; *conteudoMeta2* ; ... ; *nomeMetaN* ; *conteudoMetaN*} )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem cujos metadados você deseja estabelecer"
				],
				[
					"nomeMeta",
					"Text",
					"->",
					"Nome ou caminho do bloco a ser estabelecido"
				],
				[
					"conteudoMeta",
					"Variable",
					"->",
					"Conteúdo do metadado"
				]
			],
			"Summary": "O comando SET PICTURE METADATA permite escrever ou modificar o conteúdo dos metadados (ou meta-etiquetas) presentes em *imagem* (campo ou variável imagem 4D)."
		},
		"SET PICTURE TO LIBRARY": {
			"Syntax": "**SET PICTURE TO LIBRARY** ( *imagem* ; *refImag* ; *nomeImagem* )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Nova Imagem"
				],
				[
					"refImag",
					"Integer",
					"->",
					"Número de referência da Biblioteca de Imagens"
				],
				[
					"nomeImagem",
					"Text",
					"->",
					"Novo nome da imagem"
				]
			],
			"Summary": "O comando SET PICTURE TO LIBRARY cria uma nova imagem ou substitui uma imagem existente na biblioteca de imagens."
		},
		"SET PICTURE TO PASTEBOARD": {
			"Syntax": "**SET PICTURE TO PASTEBOARD** ( *imagem* )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Imagem a ser colocada na área de transferência"
				]
			],
			"Summary": "SET PICTURE TO PASTEBOARD limpa a área de transferência e coloca uma cópia da imagem que passou em *imagem* na área de transferência."
		},
		"SET PLUGIN ACCESS": {
			"Syntax": "**SET PLUGIN ACCESS** ( *plugIn* ; *grupo* )",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"Número de plug-in"
				],
				[
					"grupo",
					"Text",
					"->",
					"Nome do grupo associado ao plug-in"
				]
			],
			"Summary": "O comando SET PLUGIN ACCESS permite especificar por programação o grupo de usuários autorizado a utilizar cada plug-in com “número de série” instalado na base."
		},
		"SET PRINT MARKER": {
			"Syntax": "**SET PRINT MARKER** ( *markNum* ; *posiçao* {; *} )",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"Número do marcador"
				],
				[
					"posiçao",
					"Integer",
					"->",
					"Nova posição do marcador"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = mover marcadores seguintes; se omitido = não move os marcadores seguintes"
				]
			],
			"Summary": "O comando SET PRINT MARKER permite definir a posição de um marcador durante a impressão."
		},
		"SET PRINT OPTION": {
			"Syntax": "**SET PRINT OPTION** ( *opção* ; *valor1* {; *valor2*} )",
			"Params": [
				[
					"opção",
					"Integer",
					"->",
					"Número da opção"
				],
				[
					"valor1",
					"Integer, Text",
					"->",
					"Valor 1 da opção"
				],
				[
					"valor2",
					"Integer, Text",
					"->",
					"Valor 2 da opção"
				]
			],
			"Summary": "O comando SET PRINT OPTION se utiliza para modificar por programação o valor de una opção de impressão."
		},
		"SET PRINT PREVIEW": {
			"Syntax": "**SET PRINT PREVIEW** ( *vistaprevia* )",
			"Params": [
				[
					"vistaprevia",
					"Boolean",
					"->",
					"Pré-visualização em tela (TRUE), ou sem vista prévia (FALSE)"
				]
			],
			"Summary": "SET PRINT PREVIEW lhe permite selecionar ou desmarcar por programação a opção de pré-visualização em tela."
		},
		"SET PRINTABLE MARGIN": {
			"Syntax": "**SET PRINTABLE MARGIN** ( *esquerda* ; *superior* ; *direita* ; *inferior* )",
			"Params": [
				[
					"esquerda",
					"Integer",
					"->",
					"Margem esquerda"
				],
				[
					"superior",
					"Integer",
					"->",
					"Margem superior"
				],
				[
					"direita",
					"Integer",
					"->",
					"Margem direita"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Margem inferior"
				]
			],
			"Summary": "O comando SET PRINTABLE MARGIN\\#descv\\]permite atribuir os valores de varias margens de impressão utilizando os comandos [Print form, PRINT SELECTION e PRINT RECORD."
		},
		"SET PROCESS VARIABLE": {
			"Syntax": "**SET PROCESS VARIABLE** ( *processo* ; *dstVar* ; *expr* {; *dstVar2* ; *expr2* ; ... ; *dstVarN* ; *exprN*} )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número do processo de destino"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"Variável de destino"
				],
				[
					"expr",
					"Variable",
					"->",
					"Fonte da expressão (ou variável fonte)"
				]
			],
			"Summary": "O comando SET PROCESS VARIABLE escreve as variáveis processo *dstVar* (*dstVar2*, etc.) do processo de destino cujo número se passa em *processo* utilizando os valores passados em *expr1* (*expr2*, etc.)."
		},
		"SET QUERY AND LOCK": {
			"Syntax": "**SET QUERY AND LOCK** ( *bloq* )",
			"Params": [
				[
					"bloq",
					"Boolean",
					"->",
					"True = bloquear os registros encontrados por pesquisas; False = Não bloquear os registros"
				]
			],
			"Summary": "O comando SET QUERY AND LOCK permite solicitar o bloqueio automático dos registros encontrados por todas as pesquisas que seguem o chamado deste comando na transação atual."
		},
		"SET QUERY DESTINATION": {
			"Syntax": "**SET QUERY DESTINATION** ( *tipoDestino* {; *objetoDestino* {; *destPonteiro*}} )",
			"Params": [
				[
					"tipoDestino",
					"Integer",
					"->",
					"0 - seleção atual 1 - conjunto 2 - seleção temporária 3 - variável"
				],
				[
					"objetoDestino",
					"Text, Variable",
					"->",
					"Nome do conjunto, ou nome da seleção temporária, ou Variável"
				],
				[
					"destPointer",
					"Pointer",
					"->",
					"Poneiro a variável local se destinação for Tipo=3"
				]
			],
			"Summary": "O comando **SET QUERY DESTINATION** permite indicar a 4D onde colocar o resultado de todas as pesquisas posteriores para o processo atual."
		},
		"SET QUERY LIMIT": {
			"Syntax": "**SET QUERY LIMIT** ( *limite* )",
			"Params": [
				[
					"limite",
					"Integer",
					"->",
					"Número de registros, ou 0 se não houver limite"
				]
			],
			"Summary": "SET QUERY LIMIT permite pedir a 4D deter todas as pesquisas posteriores no processo atual logo que encontre o número de registros definido em *limite*."
		},
		"SET REAL COMPARISON LEVEL": {
			"Syntax": "**SET REAL COMPARISON LEVEL** ( *epsilon* )",
			"Params": [
				[
					"epsilon",
					"Real",
					"->",
					"Valor epsilon para comparações de igualdade entre reais"
				]
			],
			"Summary": "O comando **SET REAL COMPARISON LEVEL**  retorna o valor epsilon utilizado por 4D para fazer comparações de igualdade de valores e expressões de tipo real."
		},
		"SET RECENT FONTS": {
			"Syntax": "**SET RECENT FONTS** ( *fontsArray* )",
			"Params": [
				[
					"fontsArray",
					"Text array",
					"->",
					"Array of font names"
				]
			],
			"Summary": "The **SET RECENT FONTS** command modifies the list of fonts displayed in the context menu of the \"recent fonts\"."
		},
		"SET TABLE CACHE PRIORITY": {
			"Syntax": "**SET TABLE CACHE PRIORITY** ( *Tabela* ; *prioridade* )",
			"Params": [
				[
					"Table",
					"Table",
					"->",
					"Tabela cuja prioridade de dados escalar vai ser estabelecida para a sessão"
				],
				[
					"prioridade",
					"Integer",
					"->",
					"Valor de prioridade de cache para valores escalares na tabela"
				]
			],
			"Summary": "Este comando está reservado para necessidades específicas."
		},
		"SET TABLE TITLES": {
			"Syntax": "**SET TABLE TITLES** {( *titulosTabela* ; *numTabelas* {; *})}",
			"Params": [
				[
					"titulosTabela",
					"Text array",
					"->",
					"Nomes de tabela da maneira que aparecem na caixa de diálogo"
				],
				[
					"numTabelas",
					"Integer array",
					"->",
					"Número atual de tabela"
				],
				[
					"*",
					"Operador",
					"->",
					"Use os nomes personalizados no editor de fórmulas"
				]
			],
			"Summary": "SET TABLE TITLES permite ocultar, renomear e reordenar as tabelas de seu banco quando aparecem nos editores padrão de 4D em modo Aplicação (quando os editores se chamam via os comandos da linguagem 4D)."
		},
		"SET TEXT TO PASTEBOARD": {
			"Syntax": "**SET TEXT TO PASTEBOARD** ( *texto* )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto a copiar na área de transferência"
				]
			],
			"Summary": "SET TEXT TO PASTEBOARD limpa a área de transferência e depois coloca uma cópia do texto em *texto* na área de transferência."
		},
		"SET TIMEOUT": {
			"Syntax": "**SET TIMEOUT** ( *segundos* )",
			"Params": [
				[
					"segundos",
					"Integer",
					"->",
					"Segundos até o timeout"
				]
			],
			"Summary": "O comando SET TIMEOUT especifica quanto tempo um comando de porta serial tem para terminar."
		},
		"SET TIMER": {
			"Syntax": "**SET TIMER** ( *ticCont* )",
			"Params": [
				[
					"ticCont",
					"Integer",
					"->",
					"Número de tics"
				]
			],
			"Summary": "O comando SET TIMER permite ativar o evento de formulário On Timer e fixar, para o processo e formulário atual, o número de tics (1 tic = 1/60 de segundo) entre cada evento de formulário On Timer."
		},
		"SET UPDATE FOLDER": {
			"Syntax": "**SET UPDATE FOLDER** ( *viaPasta* {; *errosDiscretos*} )",
			"Params": [
				[
					"viaPasta",
					"Text",
					"->",
					"Via de acesso da pasta (pacote sob macOS) que contém a aplicação atualizada"
				],
				[
					"errosDiscretos",
					"Boolean",
					"->",
					"False (por padrão) = mostrar mensagens de erro, True = não reportar eles"
				]
			],
			"Summary": "O comando **SET UPDATE FOLDER** especifica a pasta que contém a atualização da aplicação 4D fusionada atual."
		},
		"SET USER ALIAS": {
			"Syntax": "**SET USER ALIAS** ( *alias* )",
			"Params": [
				[
					"alias",
					"Text",
					"->",
					"Alias ou apelido é o nome de usuário alternativo para a conta de usuário 4D ou \"\" para resetar"
				]
			],
			"Summary": "O comando **SET USER ALIAS** define um nome personalizado alternativo para usar ao invés do nome da conta de usuário 4D atual para a sessão atual."
		},
		"Set user properties": {
			"Syntax": "**Set user properties** ( *refUsuario* ; *nome* ; *inicio* ; *senha* ; *numLogin* ; *ultLogin* {; *adesao* {; *propGrupo*}} ) : Integer",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Número de ID de conta de usuário; -1 para adicionar um usuário"
				],
				[
					"<-",
					"Número de ID de conta de usuário adicionado (se houver)"
				],
				[
					"nome",
					"Text",
					"->",
					"Novo nome de usuário"
				],
				[
					"inicio",
					"Text",
					"->",
					"Novo método de início"
				],
				[
					"senha",
					"Text",
					"->",
					"Nova senha (não criptografada); ou * para deixar a senha intocada"
				],
				[
					"numLogin",
					"Integer",
					"->",
					"Novo número de logins do banco de dados"
				],
				[
					"ultLogin",
					"Date",
					"->",
					"Nova data do último login ao banco de dados"
				],
				[
					"adesao",
					"Integer array",
					"->",
					"Números de IDs dos grupos aos quais pertence o usuário"
				],
				[
					"propGrupo",
					"Integer",
					"->",
					"Número de referência de usuário do proprietário do grupo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de ID de referência do novo usuário"
				]
			],
			"Summary": "Set user properties permite modificar e atualizar as propriedades de uma conta ativa de usuário existente cujo número de referência se passa no parâmetro *refUsuario* ou para adicionar um novo usuário."
		},
		"SET WINDOW RECT": {
			"Syntax": "**SET WINDOW RECT** ( *esquerda* ; *superior* ; *direita* ; *inferior* {; *janela*}{; *} )",
			"Params": [
				[
					"esquerda",
					"Integer",
					"->",
					"Coordenada global esquerda da área de conteúdo da janela"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada global superior da área de conteúdo da janela"
				],
				[
					"direita",
					"Integer",
					"->",
					"Coordenada global direita da área de conteúdo da janela"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Coordenada global inferior da área de conteúdo da janela"
				],
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				],
				[
					"*",
					"Operador",
					"->",
					"Se omitido (padrão) = muda janela para o fundo<br/>Se passado = não muda o nível da janela"
				]
			],
			"Summary": "O comando SET WINDOW RECT modifica as coordenadas globais da janela cujo número de referência for passado em janela."
		},
		"SET WINDOW TITLE": {
			"Syntax": "**SET WINDOW TITLE** ( *titulo* {; *janela*} )",
			"Params": [
				[
					"titulo",
					"Text",
					"->",
					"título da janela"
				],
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				]
			],
			"Summary": "O comando SET WINDOW TITLE muda o título da janela cujo número de referência é passado em *janela* para o texto passado em *titulo* (longitude máxima 80 caracteres)."
		},
		"Shift down": {
			"Syntax": "**Shift down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla Shift"
				]
			],
			"Summary": "Shift down retorna TRUE se a tecla Shift estiver pressionada."
		},
		"SHOW MENU BAR": {
			"Syntax": "**SHOW MENU BAR**",
			"Params": [],
			"Summary": "O comando SHOW MENU BAR torna visível a barra de menus."
		},
		"SHOW ON DISK": {
			"Syntax": "**SHOW ON DISK** ( *nomeRota* {; *} )",
			"Params": [
				[
					"nomeRota",
					"Text",
					"->",
					"Rota de acesso ao item a exibir"
				],
				[
					"*",
					"Operador",
					"->",
					"Se o item é uma pasta, mostras os conteúdos"
				]
			],
			"Summary": "O comando SHOW ON DISK mostra em uma janela padrão do sistema operativo o arquivo ou a pasta na qual a rota de acesso for passada no parâmetro *nomeRota*."
		},
		"SHOW PROCESS": {
			"Syntax": "**SHOW PROCESS** ( *processo* )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo a ser mostrado"
				]
			],
			"Summary": "SHOW PROCESS mostra todas as janelas que pertencem a *processo*."
		},
		"SHOW TOOL BAR": {
			"Syntax": "**SHOW TOOL BAR**",
			"Params": [],
			"Summary": "O comando **SHOW TOOL BAR** \\#descn\\] a visualização das barras de ferramentas personalizadas criadas pelo comando [Open form window para o processo atual\\[#/descv\\]."
		},
		"SHOW WINDOW": {
			"Syntax": "**SHOW WINDOW** {( *janela* )}",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela ou processo atual da janela de primeiro plano, se omitido"
				]
			],
			"Summary": "O comando SHOW WINDOW permite mostrar a janela cujo número foi passado em *janela*."
		},
		"Sin": {
			"Syntax": "**Sin** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número, em radianos, cujo seno será devolvido"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Seno de número"
				]
			],
			"Summary": "Sin retorna o seno do *numero*, onde *numero* é expresso em radianos."
		},
		"Size of array": {
			"Syntax": "**Size of array** ( *array* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array cujo tamanho é retornado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Retorna o número de elementos no array"
				]
			],
			"Summary": "O comando Size of Array retorna o número de elementos no *array*."
		},
		"SOAP DECLARATION": {
			"Syntax": "**SOAP DECLARATION** ( *variavel* ; *tipo* ; entrada_saida {; *apelido*} )",
			"Params": [
				[
					"variavel",
					"Variable",
					"->",
					"Variável que referencia um argumento de entrada ou saída SOAP"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo 4D para o qual o argumento aponta"
				],
				[
					"entrada_saida",
					"Integer",
					"->",
					"1 = entrada SOAP; 2 = saída SOAP"
				],
				[
					"apelido",
					"Text",
					"->",
					"Nome publicado por esse argumento usando trocas SOAP"
				]
			],
			"Summary": "O comando SOAP DECLARATION permite declarar explicitamente o tipo dos parâmetros utilizados em um método 4D publicado como serviço web."
		},
		"SOAP Get info": {
			"Syntax": "**SOAP get info** ( *numInfo* ) : Text",
			"Params": [
				[
					"numInfo",
					"Integer",
					"->",
					"Número do tipo de informação SOAP a conseguir"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Informação SOAP"
				]
			],
			"Summary": "O comando SOAP get info permite recuperar na forma de cadeia de caracteres diferentes tipos de informação relacionadas com uma petição SOAP."
		},
		"SOAP REJECT NEW REQUESTS": {
			"Syntax": "**SOAP REJECT NEW REQUESTS** ( *rejeitarEstado* )",
			"Params": [
				[
					"rejeitarEstado",
					"Boolean",
					"->",
					"True se novas petições forem rejeitadas, senão false"
				]
			],
			"Summary": "O comando **SOAP REJECT NEW REQUESTS** especifica se o servidor de serviços web aceita ou não novas solicitações SOAP."
		},
		"SOAP Request": {
			"Syntax": "**SOAP request**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se a petição for SOAP; senão, FAlse"
				]
			],
			"Summary": "O comando SOAP request devolve True se o código em execução for parte de uma petição SOAP."
		},
		"SOAP SEND FAULT": {
			"Syntax": "**SOAP SEND FAULT** ( *tipoErro* ; *descriçao* )",
			"Params": [
				[
					"tipoErro",
					"Integer",
					"->",
					"1 = Erro cliente; 2= erro Servidor"
				],
				[
					"descriçao",
					"Text",
					"->",
					"Descrição do erro a enviar ao cliente SOAP"
				]
			],
			"Summary": "O comando SOAP SEND FAULT permite devolver um erro a um cliente SOAP indicando a origem do erro: cliente ou servidor."
		},
		"SORT ARRAY": {
			"Syntax": "**SORT ARRAY** ( *array* {; *array2* ; ... ; *arrayN*}{; > or <} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a ser ordenado"
				],
				[
					"> or <",
					"Operador",
					"->",
					"\">\" para ordenar em ordem crescente, ou \"<\" para ordernar em ordem decrescente, ou ordem crescente se omitido"
				]
			],
			"Summary": "O comando SORT ARRAY ordena um ou mais arrays em ordem ascendente ou descendente."
		},
		"SORT LIST": {
			"Syntax": "**SORT LIST** ( *lista* {; > ou <} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referência da lista"
				],
				[
					"> ou <",
					"Operador",
					"->",
					"Critério de ordenação: > ordenar em ordem ascendente, ou < ordenar em ordem descendente"
				]
			],
			"Summary": "O comando SORT LIST ordena a lista cujo número de referência se passa em *lista*."
		},
		"SPELL ADD TO USER DICTIONARY": {
			"Syntax": "**SPELL ADD TO USER DICTIONARY** ( *palavras* )",
			"Params": [
				[
					"palavras",
					"Text, Text array",
					"->",
					"Palavra ou lista de palavras para agregar ao dicionário do usuário"
				]
			],
			"Summary": "O comando **SPELL ADD TO USER DICTIONARY** agrega uma ou mais palavras ao dicionário usuário atual."
		},
		"SPELL CHECK TEXT": {
			"Syntax": "**SPELL CHECK TEXT** ( *texto* ; *posErr* ; *longErr* ; *posVerif* ; *arrSug* )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto a revisar"
				],
				[
					"posErr",
					"Integer",
					"<-",
					"Posição do primeiro caracter da palavra desconhecida"
				],
				[
					"longErr",
					"Integer",
					"<-",
					"Longitude da palavra desconhecida"
				],
				[
					"posVerif",
					"Integer",
					"->",
					"Posição de inicio da verificação"
				],
				[
					"arrSug",
					"Text array",
					"<-",
					"Lista de sugestões"
				]
			],
			"Summary": "O comando **SPELL CHECK TEXT** verifica o conteúdo do parâmetro *texto* a partir do caracter *posVerif* e devolve a posição da primeira palavra desconhecida encontrada (se houver)."
		},
		"SPELL CHECKING": {
			"Syntax": "**SPELL CHECKING**",
			"Params": [],
			"Summary": "O comando **SPELL CHECKING** ativa a revisão ortográfica de campo ou variável que tem o foco no formulário em tela."
		},
		"SPELL Get current dictionary": {
			"Syntax": "**SPELL Get current dictionary**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"ID do dicionário utilizado para a correção ortográfica"
				]
			],
			"Summary": "O comando **SPELL Get current dictionary** devolve o número de ID do dicionário que está sendo utilizado."
		},
		"SPELL GET DICTIONARY LIST": {
			"Syntax": "**SPELL GET DICTIONARY LIST** ( *lingID* ; *lingArquivos* ; *lingNoms* )",
			"Params": [
				[
					"lingID",
					"Integer array",
					"<-",
					"IDs únicos das linguagens"
				],
				[
					"lingArquivos",
					"Text array",
					"<-",
					"Nomes dos arquivos de linguagem instalados"
				],
				[
					"lingNoms",
					"Text array",
					"<-",
					"Nomes locais das linguagens"
				]
			],
			"Summary": "O comando **SPELL GET DICTIONARY LIST** devolve nos arrays *lingID*, *lingArquivos* e *lingNoms*, os IDs, os nomes de arquivos e os nomes dos linguagens correspondentes aos arquivos de dicionário Hunspell instalados no equipo."
		},
		"SPELL SET CURRENT DICTIONARY": {
			"Syntax": "**SPELL SET CURRENT DICTIONARY** ( *dicionário* )",
			"Params": [
				[
					"dicionário",
					"Integer, Text",
					"->",
					"Dicionário a ser usado para correção ortográfica"
				]
			],
			"Summary": "O comando SPELL SET CURRENT DICTIONARYsubstitui o dicionário atual pelo especificado no parâmetro *dicionario*."
		},
		"Split string": {
			"Syntax": "**Split string** ( *stringAseparar* ; *string* {; *opções*} ) : Collection",
			"Params": [
				[
					"stringAseparar",
					"Text",
					"->",
					"Valor string"
				],
				[
					"string",
					"Text",
					"->",
					"String que stringAseparar separa. Se string vazia (\"\"), cada caractere de stringAseparar é uma substring"
				],
				[
					"opções",
					"Integer",
					"->",
					"Opções referentes a strings vazias e espaços"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de substrings"
				]
			],
			"Summary": "O comando **Split string** devolve uma coleção de strings, criada ao dividir string*Aseparar* em substrings nos limites especificados pelo parâmetro *separador*."
		},
		"SQL CANCEL LOAD": {
			"Syntax": "**SQL CANCEL LOAD**",
			"Params": [],
			"Summary": "O comando SQL CANCEL LOAD finaliza a solicitação *SELECT* atual e inicializa os parâmetros."
		},
		"SQL End selection": {
			"Syntax": "**SQL End selection**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Limites do conjunto resultado atingidos"
				]
			],
			"Summary": "O comando SQL End selection é utiliza para determinar se os limites do resultado obtido foram alcançado."
		},
		"SQL EXECUTE SCRIPT": {
			"Syntax": "**SQL EXECUTE SCRIPT** ( *rotaScript* ; *açãoErro* {; *nomeAtrib* ; *valorAtrib*} {; *nomeAtrib2* ; *valorAtrib2* ; ... ; *nomeAtribN* ; *valorAtribN*} )",
			"Params": [
				[
					"rotaScript",
					"Text",
					"->",
					"Nome completo da rota do arquivo que contém o script SQL a ser executado"
				],
				[
					"açãoErro",
					"Integer",
					"->",
					"Ação a executar em caso de erro durante a execução do script"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Nome do atributo a usar"
				],
				[
					"valorAtrib",
					"Text",
					"->",
					"Valor do atributo"
				]
			],
			"Summary": "O comando SQL EXECUTE SCRIPT permite executar uma série de instruções SQL localizadas no arquivo de script designado por *rotaScript*."
		},
		"SQL EXECUTE": {
			"Syntax": "**SQL EXECUTE** ( *instrucaoSQL* {; *objAssoc*}{; *objAssoc2* ; ... ; *objAssocN*} )",
			"Params": [
				[
					"instrucaoSQL",
					"Text",
					"->",
					"Comando SQL a executar"
				],
				[
					"objAssoc",
					"Variable, Field",
					"<-",
					"Recebe resultado (se necessário)"
				]
			],
			"Summary": "O comando SQL EXECUTE é utilizado para executar um comando SQL e associar o resultado a objetos 4D (arrays, variáveis ou campos)."
		},
		"SQL EXPORT DATABASE": {
			"Syntax": "**SQL EXPORT DATABASE** ( *rotaPasta* {; *numArquivos* {; *tamMaxArquivos* {; *tamLimCampos*}}} )",
			"Params": [
				[
					"rotaPasta",
					"Text",
					"->",
					"Nome da rota da pasta de exportação ou \"\" para exibir caixa de diálogo de seleção de pasta"
				],
				[
					"numArquivos",
					"Integer",
					"->",
					"Máximo número de arquivos por pasta"
				],
				[
					"tamMaxArquivos",
					"Integer",
					"->",
					"Tamanho máximo dos arquivos exportados (em Kb)"
				],
				[
					"tamLimCampos",
					"Integer",
					"->",
					"Tamanho limite (em bytes) abaixo do qual os conteúdos dos campos texto, BLOB ou Imagem são integrados no arquivo principal"
				]
			],
			"Summary": "O comando SQL EXPORT DATABASE exporta ao formato SQL todos os registros de todas as tabelas do banco."
		},
		"SQL EXPORT SELECTION": {
			"Syntax": "**SQL EXPORT SELECTION** ( *tabela* ; *rotaPasta* {; *numArquivos* {; *tamMaxArquivos* {; *tamLimCampos*}}} )",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela para a qual vai exportar a seleção"
				],
				[
					"rotaPasta",
					"Text",
					"->",
					"Nome da rota da pasta de exportação ou \"\" para exibir caixa de diálogo de seleção de pasta"
				],
				[
					"numArquivos",
					"Integer",
					"->",
					"Máximo número de arquivos por pasta"
				],
				[
					"tamMaxArquivos",
					"Integer",
					"->",
					"Tamanho máximo de arquivo Export.sql (em Kb)"
				],
				[
					"tamLimCampos",
					"Integer",
					"->",
					"Tamanho limite (em bytes) abaixo do qual os conteúdos dos campos Texto, BLOB ou Imagem são incluídos no arquivo principal"
				]
			],
			"Summary": "O comando SQL EXPORT SELECTION exporta ao formato SQL os registros da seleção atual da tabela 4D especificada pelo parâmetro *Tabela*."
		},
		"SQL Get current data source": {
			"Syntax": "**SQL Get current data source**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da fonte de dados atualmente sendo usada"
				]
			],
			"Summary": "O comando SQL Get current data source retorna o nome da fonte de dados atual da aplicação."
		},
		"SQL GET DATA SOURCE LIST": {
			"Syntax": "**SQL GET DATA SOURCE LIST** ( *tipoFonte* ; *arrayNomesFontes* ; *arrayDrivers* )",
			"Params": [
				[
					"tipoFonte",
					"Integer",
					"->",
					"Tipo da fonte: usuário ou sistema"
				],
				[
					"arrayNomesFontes",
					"Text array",
					"<-",
					"Array dos nomes das fontes dos dados"
				],
				[
					"arrayDrivers",
					"Text array",
					"<-",
					"Array dos drives das fontes"
				]
			],
			"Summary": "O comando SQL GET DATA SOURCE LIST retorna nos arrays *arrayNomesFontes* e *arrayDrivers*, os nomes e drivers das fontes de dados de tipo *tipoFonte* definidas no administrador ODBC do Sistema operativo."
		},
		"SQL GET LAST ERROR": {
			"Syntax": "**SQL GET LAST ERROR** ( *codigoErro* ; *textoErro* ; *erroODBC* ; *erroSQLServer* )",
			"Params": [
				[
					"codigoErro",
					"Integer",
					"<-",
					"Código do Erro"
				],
				[
					"textoErro",
					"Text",
					"<-",
					"Erro do texto"
				],
				[
					"erroODBC",
					"Text",
					"<-",
					"Código do erro ODBC"
				],
				[
					"erroSQLServer",
					"Integer",
					"<-",
					"Código de erro nativo do servidor"
				]
			],
			"Summary": "O comando SQL GET LAST ERROR retorna a informação relacionada com o último erro encontrado durante a execução de um comando ODBC."
		},
		"SQL GET OPTION": {
			"Syntax": "**SQL GET OPTION** ( *opçao* ; *valor* )",
			"Params": [
				[
					"opçao",
					"Integer",
					"->",
					"Número de opção"
				],
				[
					"valor",
					"Integer, Text",
					"<-",
					"Valor de opção"
				]
			],
			"Summary": "O comando SQL GET OPTION retorna o *valor* atual da opção passada no parâmetro *opçao*."
		},
		"SQL LOAD RECORD": {
			"Syntax": "**SQL LOAD RECORD** {( *numReg* )}",
			"Params": [
				[
					"numReg",
					"Integer",
					"->",
					"Número de registros a carregar"
				]
			],
			"Summary": "O comando SQL LOAD RECORD recupera a 4D um ou mais registros da fonte de dados aberta na conexão atual."
		},
		"SQL LOGIN": {
			"Syntax": "**SQL LOGIN** {( *entradaDados* ; *nomeUsuario* ; *senha* ; * )}",
			"Params": [
				[
					"entradaDados",
					"Text",
					"->",
					"Nome da publicação do banco de dados 4D ou o endereço IP do banco remoto ou Nome da fonte de dados de entrada no ODBC Manager ou \"\" para exibir a caixa de diálogo de seleção"
				],
				[
					"nomeUsuario",
					"Text",
					"->",
					"Nome do usuário registrado na fonte de dados"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha do usuário registrado na fonte de dados"
				],
				[
					"*",
					"Operador",
					"->",
					"Aplicado ao Begin SQL/End SQL se omitido: não aplica (banco de dados local); se passado: aplica."
				]
			],
			"Summary": "O comando SQL LOGIN permite que se conecte a uma fonte de dados SQL especificada no parâmetro *entradaDados* ."
		},
		"SQL LOGOUT": {
			"Syntax": "**SQL LOGOUT**",
			"Params": [],
			"Summary": "O comando SQL LOGOUT fecha a conexão com uma fonte ODBC aberta no processo atual (se aplicado)."
		},
		"SQL SET OPTION": {
			"Syntax": "**SQL SET OPTION** ( *opçao* ; *valor* )",
			"Params": [
				[
					"opçao",
					"Integer",
					"->",
					"Número da opçaõ a estabelecer"
				],
				[
					"valor",
					"Integer, Text",
					"->",
					"Novo valor da opçãop"
				]
			],
			"Summary": "O comando SQL SET OPTION é utilizado para modificar o *valor* da opção passada em *opçao*."
		},
		"SQL SET PARAMETER": {
			"Syntax": "**SQL SET PARAMETER** ( *objeto* ; *paramTipo* )",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto 4D a ser usado (variável, array ou campo)"
				],
				[
					"paramTipo",
					"Integer",
					"->",
					"Tipo de parâmetro"
				]
			],
			"Summary": "O comando SQL SET PARAMETER permite o uso do valor de uma variável, array ou campo 4D nas pedidos SQL."
		},
		"Square root": {
			"Syntax": "**Square root** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número cuja raiz quadrada é calculada"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Raiz quadrada do número"
				]
			],
			"Summary": "Square root retorna a raiz quadrada de *numero*."
		},
		"ST COMPUTE EXPRESSIONS": {
			"Syntax": "**ST COMPUTE EXPRESSIONS** ( {* ;} *objeto* {; *inicioSel* {; *fimSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				]
			],
			"Summary": "O comando **ST COMPUTE EXPRESSIONS** atualiza as expressões dinâmicas 4D encontradas no campo ou variável com multi-estilo ou 4D Write Pro definido pelo parâmetro *objeto*."
		},
		"ST FREEZE EXPRESSIONS": {
			"Syntax": "**ST FREEZE EXPRESSIONS** ( {* ;} *objeto* {; *inicioSel* {; *fimSel*}}{; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passar = atualizar as expressões antes de congelar elas"
				]
			],
			"Summary": "O comando **ST FREEZE EXPRESSIONS** \"congela\" o conteúdo das expressões encontradas em texto mult-estilo ou no campo ou variável 4D Write Pro com estilo definido pelo parâmetro *objeto*."
		},
		"ST GET ATTRIBUTES": {
			"Syntax": "**ST GET ATTRIBUTES** ( {* ;} *objeto* ; *inicioSel* ; *fimSel* ; *nomeAtributo* ; *valorAtrib* {; *nomeAtributo2* ; *valorAtrib2* ; ... ; *nomeAtributoN* ; *valorAtribN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string) se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é específico) ou variável ou campo (se * é omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"início da seleção de texto"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção de texto"
				],
				[
					"nomeAtributo",
					"Integer",
					"->",
					"Atributo a ser lido"
				],
				[
					"valorAtrib",
					"Variable",
					"<-",
					"Valor atual do atributo"
				]
			],
			"Summary": "O comando ST GET ATTRIBUTES é utilizado para recuperar o valor atual de um atributo de estilo em uma selección de texto do objeto de formulário designado por *objeto*."
		},
		"ST Get content type": {
			"Syntax": "**ST Get content type** ( {* ;} *objeto* {; *inicioSel* {; *fimSel* {; *inicioBloq* {; *fimBloq*}}}} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				],
				[
					"inicioBloq",
					"Integer",
					"<-",
					"Inicio de posição do primeiro tipo da seleção"
				],
				[
					"fimBloq",
					"Integer",
					"<-",
					"Fim de posição do primeiro tipo da seleção"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de conteúdo"
				]
			],
			"Summary": "O comando **ST Get content type** devolve o tipo de conteúdo encontrado no campo ou a variável de texto multi estilo designada pelo parâmetro *objeto* ."
		},
		"ST Get expression": {
			"Syntax": "**ST Get expression** ( {* ;} *objeto* {; *inicioSel* {; *fimSel*}} )  : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Etiqueta da expressão"
				]
			],
			"Summary": "O comando **ST Get expression** devolve a primeira expressão que se encontra na seleção atual do campo ou da variável de texto com estilo designada pelo parâmetro *objeto*."
		},
		"ST GET OPTIONS": {
			"Syntax": "**ST GET OPTIONS** ( {* ;} *objeto* ; *opcao* ; *valor* {; *opcao2* ; *valor2* ; ... ; *opcaoN* ; *valorN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"opcao",
					"Integer",
					"->",
					"Opção a ler"
				],
				[
					"valor",
					"Integer",
					"<-",
					"Valor atual da opção"
				]
			],
			"Summary": "O comando **ST GET OPTIONS** obtém o valor atual de uma ou várias opções de funcionamento do campo ou da variável de texto com estilo designada pelo parâmetro *objeto*."
		},
		"ST Get plain text": {
			"Syntax": "**ST Get plain text** ( {* ;} *objeto* {; *refMode*} ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * é especificado) ou Variável ou campo (se * é omitido)"
				],
				[
					"refMode",
					"Integer",
					"->",
					"Mode for handling references found in the text"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto sem tags"
				]
			],
			"Summary": "O comando *OBJECT Get plain text* remove as etiquetas de estilo da variável ou campo de texto designado pelos parâmetros *\\** e *objeto* e devolve o texto plano."
		},
		"ST Get text": {
			"Syntax": "**ST Get text** ( {* ;} *objeto* {; *inicioSel* {; *fimSel*}} )  : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se nao, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificada) ou campo texto ou variável (se * for omitida)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"final da seleção"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto incluindo etiquetas de estilo"
				]
			],
			"Summary": "O comando *OBJECT Get styled text* devolve o texto com estilo encontrado no campo ou variável de texto designado pelo parâmetro *objeto*."
		},
		"ST GET URL": {
			"Syntax": "**ST GET URL** ( {* ;} *objeto* ; *textoURL* ; *enderecoURL* {; *inicioSel* {; *fimSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"textoURL",
					"Text",
					"<-",
					"Texto visível do URL"
				],
				[
					"enderecoURL",
					"Text",
					"<-",
					"Endereço do URL"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				]
			],
			"Summary": "O comando **ST GET URL** devolve a etiqueta e o endereço da primeira URL detectada no campo ou a variável de texto multi estilo designado pelo parâmetro *objeto*."
		},
		"ST INSERT EXPRESSION": {
			"Syntax": "**ST INSERT EXPRESSION** ( {* ;} *objeto* ; *expressao* {; *inicioSel* {; *fimSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"Object",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"expressao",
					"Text",
					"->",
					"Expressão e (opcional) formato a inserir"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Início da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				]
			],
			"Summary": "O comando **ST INSERT EXPRESSION** insere uma referência a expressão no campo ou a variável de texto multi estilo designada pelo parâmetro *objeto*."
		},
		"ST INSERT URL": {
			"Syntax": "**ST INSERT URL** ( {* ;} *objeto* ; *textoURL* ; *enderecoURL* {; *inicioSel* {; *fimSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou<br/>Campo ou variável (se * for omitido)"
				],
				[
					"textoURL",
					"Text",
					"->",
					"Texto visível do URL"
				],
				[
					"enderecoURL",
					"Text",
					"->",
					"Endereço do URL"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da seleção"
				]
			],
			"Summary": "O comando **ST INSERT URL** insere um link URL no campo ou a variável de texto com estilo designada pelo parâmetro *objeto* ."
		},
		"ST SET ATTRIBUTES": {
			"Syntax": "**ST SET ATTRIBUTES** ( {* ;} *objeto* ; *inicioSel* ; *fimSel* ; *nomeAtrib* ; *valorAtributo* {; *nomeAtrib2* ; *valorAtributo2* ; ... ; *nomeAtribN* ; *valorAtributoN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou campo ou variável texto (se * for omitido)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Início da nova seleção de texto"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Fim da nova seleção de texto"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Atributo a definir"
				],
				[
					"valorAtributo",
					"Text, Integer",
					"->",
					"Novo valor do atributo"
				]
			],
			"Summary": "O comando ST SET ATTRIBUTES permite modificar um ou mais atributos de estilo no(s) objeto(s) de formulário designado(s) por *objeto*."
		},
		"ST SET OPTIONS": {
			"Syntax": "**ST SET OPTIONS** ( {* ;} *objeto* ; *opcao* ; *valor* {; *opcao2* ; *valor2* ; ... ; *opcaoN* ; *valorN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (cadeia) Se omitido, objeto é um campo ou uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome do objeto (se * for especificado) ou Campo ou variável (se * for omitido)"
				],
				[
					"opcao",
					"Integer",
					"->",
					"Opção a definir"
				],
				[
					"valor",
					"Integer",
					"->",
					"Novo valor da opção"
				]
			],
			"Summary": "O comando **ST SET OPTIONS** modifica uma ou várias opções de funcionamento do campo ou da variável de texto com estilo designada pelo parâmetro *objeto* ."
		},
		"ST SET PLAIN TEXT": {
			"Syntax": "**ST SET PLAIN TEXT** ( {* ;} *objeto* ; *novoTexto* {; *inicioSel* {; *fimSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"se especificado, objeto é um nome de objeto (string), se não, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Variável ou campo (se * for omitido)"
				],
				[
					"novoText",
					"Text",
					"->",
					"Texto a inserir"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"final da seleção"
				]
			],
			"Summary": "O comando ST SET PLAIN TEXT insere o texto passado no parâmetro *novTexto* no campo ou a variável de texto com estilo designado pelo parâmetro *objeto* ."
		},
		"ST SET TEXT": {
			"Syntax": "**ST SET TEXT** ( {* ;} *objeto* ; *novoTexto* {; *inicioSel* {; *fimSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string), se omitido, objeto é uma variável ou campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou campo ou variável Texto (se * for omitido)"
				],
				[
					"novoText",
					"Text",
					"->",
					"Texto a inserir"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Início da seleção"
				],
				[
					"fimSel",
					"Integer",
					"->",
					"Final da seleção"
				]
			],
			"Summary": "O comando OBJECT SET STYLED TEXT insere o texto passado no parâmetro *novoTexto* no campo ou variável de texto com estilo designado pelo parâmetro *objeto*."
		},
		"START MONITORING ACTIVITY": {
			"Syntax": "**START MONITORING ACTIVITY** ( *duração* {; *fonte*} )",
			"Params": [
				[
					"duração",
					"Real",
					"->",
					"Duração de tempo (em segundos) antes do inicio do logging"
				],
				[
					"fonte",
					"Integer",
					"->",
					"Origem da operação"
				]
			],
			"Summary": "**O comando START MONITORING ACTIVITY**grava operações que excedem uma *duração* especifica na memória."
		},
		"START SQL SERVER": {
			"Syntax": "**START SQL SERVER**",
			"Params": [],
			"Summary": "O comando START SQL SERVER lança o servidor SQL integrado da aplicação 4D na qual é executado."
		},
		"START TRANSACTION": {
			"Syntax": "**START TRANSACTION**",
			"Params": []
		},
		"Std deviation": {
			"Syntax": "**Std deviation** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Dados para os quais se retorna o desvio padrão"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Desvio padrão da série"
				]
			],
			"Summary": "Std deviation devolve o desvio padrão de *series*."
		},
		"STOP MONITORING ACTIVITY": {
			"Syntax": "**STOP MONITORING ACTIVITY**",
			"Params": [],
			"Summary": "O comando **STOP MONITORING ACTIVITY** para o rastreamento da atividade iniciado com o comando START MONITORING ACTIVITY."
		},
		"STOP SQL SERVER": {
			"Syntax": "**STOP SQL SERVER**",
			"Params": [],
			"Summary": "O comando STOP SQL SERVER pára o servidor SQL integrado da aplicação 4D na qual foi executado."
		},
		"Storage": {
			"Syntax": "**Storage**  : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Catálogo de objetos compartidos e coleções compartidas registrados"
				]
			],
			"Summary": "O método **Storage** devolve um catálogo de objetos compartidos registrados ou coleções compartidas disponíveis para todos os processos na máquina ou componente atual."
		},
		"STRING LIST TO ARRAY": {
			"Syntax": "**STRING LIST TO ARRAY** ( *resNum* ; *cadeias* {; *resArquivo*} )",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Nº do recurso ou atributo \"id\" do elemento \"group\" (XLIFF)"
				],
				[
					"cadeias",
					"Text array",
					"<-",
					"Strings do recurso STR# ou strings do elemento \"group\"(XLIFF)"
				],
				[
					"resArquivo",
					"Time",
					"->",
					"Arquivo de número de referencia de Resource se omitido: todos os arquivos XLIFF ou arquivos de resources abertos"
				]
			],
			"Summary": "O comando STRING LIST TO ARRAY preenche o array *cadeias*"
		},
		"Structure file": {
			"Syntax": "**Structure file** {( * )} : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Retorna o arquivo de estrutura do banco de dados local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome longo do arquivo de estrutura do banco de dados"
				]
			],
			"Summary": "O comando Structure file retorna o nome completo do arquivo de estrutura do banco de dados com o qual você está trabalhando atualmente."
		},
		"Substring": {
			"Syntax": "**Substring** ( *fonte* ; *aPartirDe* {; *numCars*} ) : Text",
			"Params": [
				[
					"fonte",
					"Text",
					"->",
					"Cadeia da qual se tira a substring"
				],
				[
					"aPartirDe",
					"Integer",
					"->",
					"Posição do primeiro caractere"
				],
				[
					"numCars",
					"Integer",
					"->",
					"Número de caracteres a pegar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Substring de fonte"
				]
			],
			"Summary": "O comando **Substring** devolve a parte de *fonte* definida por *aPartirDe* e *numCars*."
		},
		"Subtotal": {
			"Syntax": "**Subtotal** ( *valores* {; *saltoPag*} ) : Real",
			"Params": [
				[
					"valores",
					"Field",
					"->",
					"Campo númerico ou variável onde quer devolver o subtotal"
				],
				[
					"saltoPag",
					"Integer",
					"->",
					"Nivel de quebra para o qual realizar um salto de página"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Subtotal dos valores"
				]
			],
			"Summary": "Subtotal devolve o subtotal de valores para o nível de quebra atual ou anterior."
		},
		"Sum squares": {
			"Syntax": "**Sum squares** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Dados para os quais se retorna a soma de quadrados."
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Soma dos quadrados dos valores da série"
				]
			],
			"Summary": "**Sum squares** devolve a soma de quadrados de *series*."
		},
		"Sum": {
			"Syntax": "**Sum** ( *series* {; *atributoRota*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Dados para os quais se retorna a Soma"
				],
				[
					"atributoRota",
					"Text",
					"->",
					"Rota do atributo para o qual vai retornar a soma"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Soma para a série"
				]
			],
			"Summary": "O comando **Sum** devolve a soma (total de todos os valores) para *series*."
		},
		"SUSPEND TRANSACTION": {
			"Syntax": "**SUSPEND TRANSACTION**",
			"Params": [],
			"Summary": "O comando **SUSPEND TRANSACTION** detem a transação atual no processo atual."
		},
		"SVG EXPORT TO PICTURE": {
			"Syntax": "**SVG EXPORT TO PICTURE** ( *refElemento* ; *varImagem* {; *tipoExport*} )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência do elemento Root XMLK"
				],
				[
					"varPicture",
					"Picture",
					"->",
					"Variável de imagem que recebe a árvore XML (Imagem SVG)"
				],
				[
					"tipoExport",
					"Integer",
					"->",
					"0= Não armazenar fonte de dados, 1 = Copiar fonte de dados (padrão), 2 = Fonte de dados própria"
				]
			],
			"Summary": "O comando SVG EXPORT TO PICTURE permite guardar na variável ou campo imagem indicado pelo parâmetro *varImag* uma imagem em formato SVG contida em uma árvore XML."
		},
		"SVG Find element ID by coordinates": {
			"Syntax": "**SVG Find element ID by coordinates** ( {* ;} *objetoImagem* ; *X* ; *Y* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objetoImagem é um nome de objeto (string), se omitido, objetoImagem é um campo ou variável"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nome de objeto (Se * for especificado) ou Campo ou Variável (se * for omitido)"
				],
				[
					"X",
					"Integer",
					"->",
					"Coordenadas X em píxels"
				],
				[
					"Y",
					"Integer",
					"->",
					"Coordenadas Y em píxels"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"ID do elemento encontrado na localização X, Y"
				]
			],
			"Summary": "O comando SVG Find element ID by coordinates retorna a identificação (\"id\" ou atributo \"xml:id\") do elemento XML encontrado na localização definida pelas coordenadas (x,y) na imagem SVG designada pelo parâmetro *objetoImagem*."
		},
		"SVG Find element IDs by rect": {
			"Syntax": "**SVG Find element IDs by rect** ( {* ;} *objetoImagem* ; *x* ; *y* ; *largura* ; *alto* ; *arrIDs* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objetoImagem é um nome de objeto (string). Se omitido, objetoImagem é uma variável"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nome do objeto (se * for especificado) ou Campo ou variável (se * for omitido)"
				],
				[
					"x",
					"Integer",
					"->",
					"Coordenada horizontal da esquina esquerda superior do retângulo de seleção"
				],
				[
					"y",
					"Integer",
					"->",
					"Coordenada vertical da esquina superior esquerda do retângulo de seleção"
				],
				[
					"largura",
					"Integer",
					"->",
					"Largura da seleção retangular"
				],
				[
					"alto",
					"Integer",
					"->",
					"Altura da seleção retangular"
				],
				[
					"arrIDs",
					"Text array",
					"<-",
					"IDs dos elementos cujas molduras do retângulo intersecciona com o retângulo de seleção"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = ao menos um elemento é encontrado"
				]
			],
			"Summary": "O comando SVG Find element IDs by rect preenche o array texto arrIDs com os IDs (atributo \"id\" ou \"xml:id\") dos elementos XML cujo retângulo circundante está em intersecção com o retângulo de seleção na localização definida pelos parâmetros *x* e *y*."
		},
		"SVG GET ATTRIBUTE": {
			"Syntax": "**SVG GET ATTRIBUTE** ( {* ;} *objetoImagem* ; id_Elemento ; *nomeAtrib* ; *valorAtributo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objetoImagem é um nome de objeto (string). Se omitido, objetoImagem é uma variável"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nome de objeto (se * for especificado) ou variável ou campo (se * for omitido)"
				],
				[
					"id_Elemento",
					"Text",
					"->",
					"ID do elemento cujo valor de atributo você deseja conseguir"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Atributo cujo valor você deseja obter"
				],
				[
					"valorAtributo",
					"Text, Integer",
					"<-",
					"Valor atual do atributo"
				]
			],
			"Summary": "O comando SVG GET ATTRIBUTE é utilizado para obter o valor atual do atributo *nomAtrib* em um objeto ou uma imagem SVG."
		},
		"SVG SET ATTRIBUTE": {
			"Syntax": "**SVG SET ATTRIBUTE** ( {* ;} *objetoImagem* ; id_Elemento ; *nomeAtrib* ; *valorAtributo* {; *nomeAtrib2* ; *valorAtributo2* ; ... ; *nomeAtribN* ; *valorAtributoN*} {; *})",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objImagem é um nome objeto (string). Se omitido, objImagem é uma variável"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nome de objeto (se * for especificado) ou variável ou campo (se * for otimido)"
				],
				[
					"id_Elemento",
					"Text",
					"->",
					"ID do elemento onde um ou mais atributos são estabelecidos"
				],
				[
					"nomeAtrib",
					"Text",
					"->",
					"Atributo a estabelecer"
				],
				[
					"valorAtributo",
					"Text, Integer",
					"->",
					"Novo valor do atributo"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = modifica a própria imagem SVG"
				]
			],
			"Summary": "**O comando SVG SET ATTRIBUTE** é usado para modificar o valor de um atributo existente na árvore de renderização SVG de uma imagem exibida ou na árvore interna DOM de uma imagem."
		},
		"SVG SHOW ELEMENT": {
			"Syntax": "**SVG SHOW ELEMENT** ( {* ;} *objetoImagem* ; *id* {; *margem*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objetoImagem é um nome de objeto (string). Se omitido, objetoImagem é uma variável"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nome de objeto (se * for especificado) ou variável ou campo (se * for otimido)"
				],
				[
					"id",
					"Text",
					"->",
					"Atributo ID do elemento a exibir"
				],
				[
					"margem",
					"Integer",
					"->",
					"Margem de visbilidade (em pixels por padrão)"
				]
			],
			"Summary": "O comando SVG SHOW ELEMENT move o documento SVG *objetoImagem* para mostrar o elemento cujo atributo \"id\" é especificado pelo parâmetro *id*."
		},
		"System folder": {
			"Syntax": "**System folder** {( *tipo* )} : Text",
			"Params": [
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de pasta sistema"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Rota de acesso de uma pasta do sistema ativo"
				]
			],
			"Summary": "O comando **System folder** devolve a rota de acesso a uma pasta particular do sistema operativo ou à pasta ativa do sistema Windows ou Mac OS."
		},
		"System info": {
			"Syntax": "**System info**  : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Informação do sistema"
				]
			],
			"Summary": "O comando **System info** devolve um objeto que contém informação sobre o sistema operativo e as características do hardware e software do sistema da máquina em que é executado."
		},
		"Table fragmentation": {
			"Syntax": "**Table fragmentation** ( *aTabela* ) : Real",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Tabela para a qual obter a taxa de fragmentação"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Porcentagem de fragmentação"
				]
			],
			"Summary": "O comando Table fragmentation retorna o percentual de fragmentação lógica para os registros da tabela designada pelo parâmetro *aTabela*."
		},
		"Table name": {
			"Syntax": "**Table name** ( *numTabela* ) : Text<br/>**Table name** ( *pontTabela* ) : Text",
			"Params": [
				[
					"numTabela&#124;pontTabela",
					"Inteiro longo, Ponteiro",
					"->",
					"Número da tabela ou ponteiro a tabela"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nome da tabela"
				]
			],
			"Summary": "O comando Table name retorna o nome da tabela cujo número ou ponteiro é passado em *numTabela* ou *pontTabela*."
		},
		"Table": {
			"Syntax": "**Table** ( *numTabela* ) : Pointer<br/>**Table** ( *ptrTabela* ) : Integer<br/>**Table** ( *ptrCampo* ) : Integer",
			"Params": [
				[
					"numTabela",
					"Integer",
					"->",
					"Número de tabela"
				],
				[
					"ptrTabela",
					"Pointer",
					"->",
					"Ponteiro de Tabela"
				],
				[
					"ptrCampo",
					"Pointer",
					"->",
					"Ponteiro de Campo"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Ponteiro tabela, se um número de tabela for passado<br/>Número de tabela, se um ponteiro de tabela ou um ponteiro de Campo for passado"
				]
			],
			"Summary": "O comando Table tem três sintaxes diferentes: \n\n* Se passa um número de tabela em *numTabela*, Table retorna um ponteiro para a tabela."
		},
		"Tan": {
			"Syntax": "**Tan** ( *numero* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número, em radianos, cuja tangente é devolvida"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Tangente do número"
				]
			],
			"Summary": "Tan retorna a tangente do *numero*, onde *numero* é expresso em radianos."
		},
		"Temporary folder": {
			"Syntax": "**Temporary folder**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Rota de acesso à pasta temporal"
				]
			],
			"Summary": "O comando Temporary folder devolve a rota de acesso à pasta temporal atual definida por seu sistema."
		},
		"Test path name": {
			"Syntax": "**Test path name** ( *nomeRota* ) : Integer",
			"Params": [
				[
					"nomeRota",
					"Text",
					"->",
					"Rota ao diretório, pasta ou documento"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"1 - rota de acesso do documento existente, 0 - rota do diretório ou pasta existente, <0 - rota inválida, código de erro do gestor de arquivo OS"
				]
			],
			"Summary": "A função Test path name verifica se um documento ou pasta cujo nome ou via de acesso se passa em *viaAcesso* está presente no disco."
		},
		"Test semaphore": {
			"Syntax": "**Test semaphore** ( *semaforo* ) : Boolean",
			"Params": [
				[
					"semaforo",
					"Text",
					"->",
					"Semáforo a testar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = o semáforo existe, False = o semáforo não existe"
				]
			],
			"Summary": "O comando Test semaphore lhe permite provar a existência de um semáforo."
		},
		"TEXT TO ARRAY": {
			"Syntax": "**TEXT TO ARRAY** ( *varText* ; *arrText* ; *largo* ; *nomFonte* ; *tamFonte* {; *estiloFonte* {; *}} )",
			"Params": [
				[
					"varText",
					"Text",
					"->",
					"Texto original a dividir"
				],
				[
					"arrText",
					"Text array",
					"<-",
					"Array que contém o texto dividido em palavras ou linhas"
				],
				[
					"largo",
					"Integer",
					"->",
					"Largo máximo da cadeia(em pixeles)"
				],
				[
					"nomFonte",
					"Text",
					"->",
					"Nome da fonte"
				],
				[
					"tamFonte",
					"Integer",
					"->",
					"Tamanho da fonte"
				],
				[
					"estiloFonte",
					"Integer",
					"->",
					"Estilo da fonte"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado = interpretar o texto como multistyle"
				]
			],
			"Summary": "O comando **TEXT TO ARRAY** transforma uma variável texto em um array texto."
		},
		"TEXT TO BLOB": {
			"Syntax": "**TEXT TO BLOB** ( *texto* ; *BLOB* {; *textFormat* {; offset | *}} )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto a escrever no BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a receber o texto"
				],
				[
					"textFormat",
					"Integer",
					"->",
					"Formato e conjunto de caracteres de texto"
				],
				[
					"offset &#124; *",
					"Variável, Operador",
					"<->",
					"Offset no BLOB (expressado em bytes) ou * para adicionar o valor"
				],
				[
					"",
					"",
					"",
					"Novo offset depois da escritura se * for omitido"
				]
			],
			"Summary": "O comando TEXT TO BLOB escreve o *texto* no BLOB *blob*."
		},
		"TEXT TO DOCUMENT": {
			"Syntax": "**TEXT TO DOCUMENT** ( *nomeArquivo* ; *texto* {; *conjCaracteres* {; *modoRetorno*}} )",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Nome do documento ou caminho de acesso ao documento"
				],
				[
					"texto",
					"Text",
					"->",
					"Texto a armazenar no documento"
				],
				[
					"conjCaracteres",
					"Text, Integer",
					"->",
					"Nome ou número do conjunto de caracteres"
				],
				[
					"modoRetorno",
					"Integer",
					"->",
					"Modo de processamento para os retornos de linha"
				]
			],
			"Summary": "O comando **TEXT TO DOCUMENT** le permite escrever o *texto* diretamente no arquivo de disco."
		},
		"throw": {
			"Syntax": "**throw** ( *errorCode* {; *descrição*} ) <br/>\n*throw* {( *erroObj* )}",
			"Params": [
				[
					"errorCode",
					"Integer",
					"->",
					"Um inteiro longo representando o código de erro"
				],
				[
					"descrição",
					"Text",
					"->",
					"Um texto fornecendo uma descrição do erro"
				],
				[
					"throw {( erroObj )}"
				],
				[
					"Parâmetro",
					"Tipo",
					"Descrição"
				],
				[
					"erroObj",
					"Object",
					"->",
					"Um objeto contendo propriedades para construir o erro"
				]
			],
			"Summary": "O comando **throw** cria um erro que será lançado inmediatamente ou quando o método que o chamar o devolva a seu chamador (modo diferido)."
		},
		"Tickcount": {
			"Syntax": "**Tickcount**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tics (60avo de um segundo) passados desde que se inicio o equipo"
				]
			],
			"Summary": "Tickcount retorna o número de tics (1 tic = 1 / 60 avos de um segundo) passados desde que se iniciou a máquina."
		},
		"Time string": {
			"Syntax": "**Time string** ( *segundos* ) : Text",
			"Params": [
				[
					"segundos",
					"Integer, Time",
					"->",
					"Segundos desde a meia noite"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Hora como uma cadeia em formato 24 horas"
				]
			],
			"Summary": "O comando Time string retorna a string da expressão tipo hora que passou em *segundos*."
		},
		"Time": {
			"Syntax": "**Time** ( *horaString* ) : Time",
			"Params": [
				[
					"horaText",
					"Text, Integer",
					"->",
					"Hora para a qual devolver o número de segundos"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Hora especificada por horaString"
				]
			],
			"Summary": "O comando **Time** retorna uma expressão de tipo Hora equivalente à hora especificada como uma string por *horaString*."
		},
		"Timestamp": {
			"Syntax": "**Timestamp** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Hora atual retornada usando formato ISO com milissegundos"
				]
			],
			"Summary": "**Timestamp** retorna a hora UTC atual em formato ISO com milissegundos, ou seja, aaaa-MM-ddTHH:mm:ss."
		},
		"Tool bar height": {
			"Syntax": "**Tool bar height**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura (expresso em pixels) da barra de ferramentas ou 0 se a barra de ferramentas estiver escondida"
				]
			],
			"Summary": "O comando Tool bar height devolve a altura da barra de ferramentas visível atualmente, expressada em píxels."
		},
		"TRACE": {
			"Syntax": "**TRACE**",
			"Params": [],
			"Summary": "O comando **TRACE** se utiliza para executar passo a passo métodos durante o desenvolvimento de um banco."
		},
		"Transaction level": {
			"Syntax": "**Transaction level**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nível transação atual (0 se nenhuma transação for iniciada)"
				]
			],
			"Summary": "O comando Transaction level retorna o nível de transação atual para o processo."
		},
		"TRANSFORM PICTURE": {
			"Syntax": "**TRANSFORM PICTURE** ( *imagem* ; *operador* {; *param1* {; *param2* {; *param3* {; *param4*}}}} )",
			"Params": [
				[
					"imagem",
					"Picture",
					"->",
					"Fonte da imagem a ser transformada"
				],
				[
					"<-",
					"Imagem resultante depois da transformação"
				],
				[
					"operador",
					"Integer",
					"->",
					"Tipo de transformação a ser feita"
				],
				[
					"param1",
					"Real",
					"->",
					"Parâmetro de transformação"
				],
				[
					"param2",
					"Real",
					"->",
					"Parâmetro de transformação"
				],
				[
					"param3",
					"Real",
					"->",
					"Parâmetro de transformação"
				],
				[
					"param4",
					"Real",
					"->",
					"Parâmetro de transformação"
				]
			],
			"Summary": "O comando TRANSFORM PICTURE permite aplicar uma transformação de tipo *operador* à imagem passada no parâmetro *imagem*."
		},
		"Trigger event": {
			"Syntax": "**Trigger event**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"0 = Fora de um ciclo de execução de trigger; 1 = Guardar um novo registro; 2 = Guardar um registro existente; 3 = Apagar um registro."
				]
			],
			"Summary": "Quando chamado de dentro de um trigger, o comando **Trigger event** retorna um valor numérico que indica o tipo do evento do banco, em outras palavras, a razão pela qual é chamado o trigger."
		},
		"Trigger level": {
			"Syntax": "**Trigger level**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nível de execução do trigger (0 se fora de qualquer ciclo de execução de trigger)"
				]
			],
			"Summary": "O comando Trigger level retorna o nível de execução do trigger."
		},
		"TRIGGER PROPERTIES": {
			"Syntax": "**TRIGGER PROPERTIES** ( *nivelTrigger* ; *dbEvent* ; *numTabela* ; *numRegistro* )",
			"Params": [
				[
					"nivelTrigger",
					"Integer",
					"->",
					"Nível de ciclo de execução do Trigger"
				],
				[
					"dbEvent",
					"Integer",
					"<-",
					"Evento de banco de dados"
				],
				[
					"numTabela",
					"Integer",
					"<-",
					"Número de tabela envolvido"
				],
				[
					"numRegistro",
					"Integer",
					"<-",
					"Número de registro envolvido"
				]
			],
			"Summary": "O comando TRIGGER PROPERTIES retorna a informação sobre o nível de execução do trigger que se passa em *nivelTrigger*."
		},
		"True": {
			"Syntax": "**True**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True"
				]
			],
			"Summary": "True retorna o valor booleano Verdadeiro (True)."
		},
		"Trunc": {
			"Syntax": "**Trunc** ( *numero* ; *decimais* ) : Real",
			"Params": [
				[
					"numero",
					"Real",
					"->",
					"Número a ser truncado"
				],
				[
					"decimais",
					"Integer",
					"->",
					"Número de decimais usadas para truncar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Número com a parte decimal truncada ao número de casas decimais especificada por Decimais"
				]
			],
			"Summary": "Trunc retorna *numero* com sua parte decimal truncada a partir do número de decimais especificada por *decimais*."
		},
		"TRUNCATE TABLE": {
			"Syntax": "**TRUNCATE TABLE** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela onde todos os registros serão apagados ou tabela padrão se esse parâmetro for omitido"
				]
			],
			"Summary": "O comando TRUNCATE TABLE \\[#descv\\]apaga rapidamente todos os registros de *tabela*."
		},
		"Type": {
			"Syntax": "**Type** ( *campVar* ) : Integer",
			"Params": [
				[
					"campVar",
					"Field, Variable",
					"->",
					"Campo ou Variável a ser testada"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tipo de dados"
				]
			],
			"Summary": "O comando Type devolve um valor numérico que indica o tipo do campo ou da variável que passa em *campVar*."
		},
		"Undefined": {
			"Syntax": "**Undefined** ( *variavel* ) : Boolean",
			"Params": [
				[
					"variavel",
					"Expression",
					"->",
					"Variável a testar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE=Variável é atualmente indefinida; FALSE= Variável é atualmente definida"
				]
			],
			"Summary": "Undefined retorna True se não for definida *variavel* e False se *variavel* não for definida."
		},
		"UNION": {
			"Syntax": "**UNION** ( *conjunto1* ; *conjunto2* ; *conjuntoResultado* )",
			"Params": [
				[
					"conjunto1",
					"Text",
					"->",
					"Primeiro conjunto"
				],
				[
					"conjunto2",
					"Text",
					"->",
					"Segundo conjunto"
				],
				[
					"conjuntoResultado",
					"Text",
					"->",
					"Conjunto Resultado"
				]
			],
			"Summary": "UNION cria um novo conjunto que contém todos os registros de *conjunto1 e conjunto2*."
		},
		"UNLOAD RECORD": {
			"Syntax": "**UNLOAD RECORD** {( *tabela* )}",
			"Params": [
				[
					"tabela",
					"Table",
					"->",
					"Tabela na qual vai descarregar o registro, ou tabela padrão, se omitido"
				]
			],
			"Summary": "UNLOAD RECORD descarrega o registro atual de *tabela*."
		},
		"UNREGISTER CLIENT": {
			"Syntax": "**UNREGISTER CLIENT**",
			"Params": [],
			"Summary": "O comando UNREGISTER CLIENT cancela o registro de uma máquina 4D Client."
		},
		"Uppercase": {
			"Syntax": "**Uppercase** ( *cadeia* {; *} ) : Text",
			"Params": [
				[
					"cadeia",
					"Text",
					"->",
					"Cadeia a converter para maiúsculas"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: manter os acentos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadeia em letras maiúsculas"
				]
			],
			"Summary": "Uppercase devolve uma cadeia de caracteres igual a *cadeia* com todos os caracteres alfabéticos convertidos em maiúsculas."
		},
		"USE CHARACTER SET": {
			"Syntax": "**USE CHARACTER SET** ( *mapa* {; *mapaEntradaSaida*} )",
			"Params": [
				[
					"mapa",
					"Text, *",
					"->",
					"Nome do conjunto de caracteres a ser usado (modo Unicode), ou nome do Documento do mapa ASCII a ser usado (ASCII mode) ou * para reiniciar para o conjunto de caracteres/mapa ASCII padrão"
				],
				[
					"mapaEntradaSaida",
					"Integer",
					"->",
					"0 = Mapa de saída 1 = Mapa de entrada, se omitido, mapa de saída"
				]
			],
			"Summary": "USE CHARACTER SET modifica o conjunto de caracteres usado por 4D durante a transferência de dados entre o banco de dados e um documento ou uma porta serial para o processo atual."
		},
		"USE NAMED SELECTION": {
			"Syntax": "**USE NAMED SELECTION** ( *nome* )",
			"Params": [
				[
					"nome",
					"Text",
					"->",
					"Nome da seleção temporal a utilizar"
				]
			],
			"Summary": "USE NAMED SELECTION utiliza o nome da seleção temporária como seleção atual para la tabela a qual pertence."
		},
		"USE SET": {
			"Syntax": "**USE SET** ( *conjunto* )",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nome do conjunto a usar"
				]
			],
			"Summary": "USE SET transforma os registros em *conjunto* na nova seleção atual para a tabela para o qual pertence o conjunto\n\nQuando cria um conjunto, a posição do registro atual é lembrada pelo conjunto USE SET recupera esta informação e faz do registro o novo registro atual."
		},
		"User in group": {
			"Syntax": "**User in group** ( *usuario* ; *grupo* ) : Boolean",
			"Params": [
				[
					"usuario",
					"Text",
					"->",
					"Nome de usuário"
				],
				[
					"grupo",
					"Text",
					"->",
					"Nome do grupo"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = usuário no grupo; FALSE = usuário não está no grupo"
				]
			],
			"Summary": "User in group retorna TRUE se *user* estlver em *group*."
		},
		"USERS TO BLOB": {
			"Syntax": "**USERS TO BLOB** ( *usuarios* )",
			"Params": [
				[
					"usuarios",
					"Blob",
					"->",
					"Blob que contém os usuários"
				],
				[
					"<-",
					"Conta de usuários (criptografadas)"
				]
			],
			"Summary": "**Nota de compatibilidade*: este comando só funciona em bancos de dados binários."
		},
		"Validate password": {
			"Syntax": "**Validate password** ( *refUsuario* ; *senha* {; *digest*} ) : Boolean",
			"Params": [
				[
					"refUsuario",
					"Integer, Text",
					"->",
					"ID de usuário"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha não criptografada"
				],
				[
					"digest",
					"Boolean",
					"->",
					"Senha digest = True, Senha texto plano (por padrão) = False"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE= senha válida; FALSE = senha inválida"
				]
			]
		},
		"VALIDATE TRANSACTION": {
			"Syntax": "**VALIDATE TRANSACTION**",
			"Params": [],
			"Summary": "VALIDATE TRANSACTION aceita a transação que foi iniciada com START TRANSACTION do nível correspondente do processo atual."
		},
		"Value type": {
			"Syntax": "**Value type** ( *expressão* ) : Integer",
			"Params": [
				[
					"expressão",
					"Expression",
					"->",
					"Expressão cujo valor resultante será testado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número do tipo de dado"
				]
			],
			"Summary": "O comando Value type devolve o tipo de valor resultante da avaliação da *expressão* que passou como parâmetro."
		},
		"VARIABLE TO BLOB": {
			"Syntax": "**VARIABLE TO BLOB** ( *variável* ; *BLOB* {; offset | *} )",
			"Params": [
				[
					"variável",
					"Variable",
					"->",
					"Variável a ser armazenada no BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a receber a variável"
				],
				[
					"offset &#124; *",
					"Variável, Operador",
					"<->",
					"Offset da variável(expressado em bytes) no BLOB ou * para adicionar o valor"
				],
				[
					"",
					"",
					"",
					"Novo offset depois de escrita se * for omitido"
				]
			],
			"Summary": "O comando VARIABLE TO BLOB armazena a *variável* no BLOB *blob*."
		},
		"VARIABLE TO VARIABLE": {
			"Syntax": "**VARIABLE TO VARIABLE** ( *processo* ; *dstVar* ; *srcVar* {; *dstVar2* ; *srcVar2* ; ... ; *dstVarN* ; *srcVarN*} )",
			"Params": [
				[
					"processo",
					"Integer",
					"->",
					"Número de processo de destino"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"Variável de destino"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"Variável fonte"
				]
			],
			"Summary": "O comando VARIABLE TO VARIABLE escreve as variáveis processo *dstVar* (*dstVar2*, etc.) do processo de destino cujo número se passa em processo utilizando os valores das variáveis *srcVar1 srcVar2*, etc."
		},
		"Variance": {
			"Syntax": "**Variance** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Dados para os quais se retorna a variância"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Variância da série"
				]
			],
			"Summary": "Variance devolve a variância para *series*."
		},
		"VERIFY CURRENT DATA FILE": {
			"Syntax": "**VERIFY CURRENT DATA FILE** {( *objetos* ; *opções* ; *metodo* {; *arrayTabelas* {; *arrayCampos*}} )}",
			"Params": [
				[
					"objetos",
					"Integer",
					"->",
					"Objeto a ser verificado"
				],
				[
					"opções",
					"Integer",
					"->",
					"Opções de verificação"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nome do método 4D de retrochamada"
				],
				[
					"arrayTabelas",
					"Integer array",
					"->",
					"Números de tabelas a serem verificadas"
				],
				[
					"arrayCampos",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"Número de índices a serem verificados"
				]
			],
			"Summary": "O comando VERIFY CURRENT DATA FILE realiza uma verificação estrutural dos objetos encontrados no arquivo de dados atualmente aberto por 4D."
		},
		"VERIFY DATA FILE": {
			"Syntax": "**VERIFY DATA FILE** ( *endEstrutura* ; *endDados* ; *objetos* ; *opçoes* ; *metodo* {; *arrayTabelas* {; *arrayCampos*}} )",
			"Params": [
				[
					"endEstrutura",
					"Text",
					"->",
					"Endereço do arquivo de estrutura a ser verificado"
				],
				[
					"endDados",
					"Text",
					"->",
					"Endereço do arquivo de dados a ser verificado"
				],
				[
					"objetos",
					"Integer",
					"->",
					"Objetos a serem verificados"
				],
				[
					"opçoes",
					"Integer",
					"->",
					"Opções de verificação"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nome do método 4D de retrochamada"
				],
				[
					"arrayTabelas",
					"Integer array",
					"->",
					"Números de tabelas a serem verificadas"
				],
				[
					"arrayCampos",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"Número de índices a serem verificados"
				]
			],
			"Summary": "O comando VERIFY DATA FILE\\[#descv\\] realiza uma verificação estrutural dos objetos contidos no arquivo de dados 4D criado por *endereçoEstrutura* e *endereçoDados*."
		},
		"Verify password hash": {
			"Syntax": "**Verify password hash**  ( *senha* ; *hash* ) : Boolean",
			"Params": [
				[
					"senha",
					"Text",
					"->",
					"A senha do usuário. Só os primeiros 72 caracteres são usados"
				],
				[
					"hash",
					"Text",
					"->",
					"O hash da senha"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Retorna TRUE se a senha e o hash coincidirem, ou então retorna FALSE"
				]
			],
			"Summary": "A função **Verify password hash** verifica que o hash dado coincida com a *senha* dada."
		},
		"Version type": {
			"Syntax": "**Version type**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Informação sobre o tipo de versão (bitfield)"
				]
			],
			"Summary": "O comando Version type retorna um valor numérico que representa o tipo de versão de 4D ou 4D Server que você está utilizando."
		},
		"VOLUME ATTRIBUTES": {
			"Syntax": "**VOLUME ATTRIBUTES** ( *volume* ; *tamanho* ; *usado* ; *livre* )",
			"Params": [
				[
					"volume",
					"Text",
					"->",
					"Nome volume"
				],
				[
					"tamanho",
					"Real",
					"<-",
					"Tamanho do volume expresso em bytes"
				],
				[
					"usado",
					"Real",
					"<-",
					"Espaço usado expresso em bytes"
				],
				[
					"livre",
					"Real",
					"<-",
					"Espaço livre expresso em bytes"
				]
			],
			"Summary": "O comando VOLUME ATTRIBUTES retorna em bytes o tamanho, o espaço utilizado e o espaço livre do volume cujo nome se passa em *volume*."
		},
		"VOLUME LIST": {
			"Syntax": "**VOLUME LIST** ( *volumes* )",
			"Params": [
				[
					"volumes",
					"Text array",
					"<-",
					"Nomes dos volumes atualmente montados"
				]
			],
			"Summary": "O comando VOLUME LIST preenche o array *volumes*, tipo de texto, com os nomes dos volumes definidos (Windows) ou montados (macOS) em sua máquina."
		},
		"WA Back URL available": {
			"Syntax": "**WA Back URL available** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE se houver uma URL anterior na sequência de URLs abertas; senão, FALSE"
				]
			],
			"Summary": "O comando WA Back URL available descobre se existe uma URL anterior disponível na sequência de URLs abertas na área web designada pelos parâmetros \\* e *objeto*."
		},
		"WA Create URL history menu": {
			"Syntax": "**WA Create URL history menu** ( {* ;} *objeto* {; *endereço*} ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"endereço",
					"Integer",
					"->",
					"0 ou omitido = Lista de URLs anteriores; 1 = Lista de próximas URLs"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Menu reference"
				]
			],
			"Summary": "O comando WA Create URL history menu cria e preenche um menu que pode ser utilizado diretamente para a navegação entre as URLs visitadas durante a sessão na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA Evaluate JavaScript": {
			"Syntax": "**WA Evaluate JavaScript** ( {* ;} *objeto* ; *codeJS* {; *tipo*} )  : any",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"codeJS",
					"Text",
					"->",
					"Código Java Script"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo ao qual converter o resultado"
				],
				[
					"Resultado",
					"Date, Time, Object, Pointer, Real, Text",
					"<-",
					"Resultado da função"
				]
			],
			"Summary": "O comando WA Evaluate JavaScript executa na área web designada pelos parâmetros *\\** e *objeto* o código JavaScript passado em *codeJS* e retorna o resultado."
		},
		"WA EXECUTE JAVASCRIPT FUNCTION": {
			"Syntax": "**WA EXECUTE JAVASCRIPT FUNCTION** ( {* ;} *objeto* ; *funcaoJS* ; resultado|* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"funcaoJS",
					"Text",
					"->",
					"Nome da função JavaScript a executar"
				],
				[
					"resultado&#124;*",
					"Variável",
					"->",
					"* para a função sem resultado ou"
				],
				[
					"<-",
					"Resultado da função (se esperado)"
				],
				[
					"param",
					"Text, Number, Date, Object, Collection",
					"->",
					"Parâmetros a passar a função"
				]
			],
			"Summary": "O comando WA EXECUTE JAVASCRIPT FUNCTION executa, na área Web designada pelos parâmetros *\\** e *objeto*, a função JavaScript *funcaoJS* retorna opcionalmente seu resultado no parâmetro *resultado*."
		},
		"WA Forward URL available": {
			"Syntax": "**WA Forward URL available** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE se houver uma URL depois da sequencia de URLs abertas; senão, FALSE"
				]
			],
			"Summary": "O comando WA Forward URL available permite conhecer se existe uma URL seguinte disponível na sequência de URLs abertas na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA Get current URL": {
			"Syntax": "**WA Get current URL** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"URL carregada na área web atualmente"
				]
			],
			"Summary": "O comando WA Get current URL retorna a direção URL da página mostrada na área web designada pelos parâmetros \\* e *objeto*."
		},
		"WA GET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA GET EXTERNAL LINKS FILTERS** ( {* ;} *objeto* ; *arrFiltro* ; *permitirArrRecusar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"arrFiltro",
					"Text array",
					"<-",
					"Array de filtros"
				],
				[
					"permitirArrRecusar",
					"Boolean array",
					"<-",
					"Permitir array recusar"
				]
			],
			"Summary": "O comando WA GET EXTERNAL LINKS FILTERS retorna nos arrays *arrFiltro* e *permitirArrRecusar*, os filtros de links externos da área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA Get last filtered URL": {
			"Syntax": "**WA Get last filtered URL** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Última URL filtrada"
				]
			],
			"Summary": "O comando WA Get last filtered URL retorna a última URL filtrada na área web designada pelos parâmetros \\* e *objeto*."
		},
		"WA GET LAST URL ERROR": {
			"Syntax": "**WA GET LAST URL ERROR** ( {* ;} *objeto* ; *url* ; *descriçao* ; *codigoErro* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"url",
					"Text",
					"<-",
					"URL na origem do erro"
				],
				[
					"descriçao",
					"Text",
					"<-",
					"Description of error (macOS)"
				],
				[
					"codigoErro",
					"Integer",
					"<-",
					"Código de Erro"
				]
			],
			"Summary": "O comando WA GET LAST URL ERROR permite recuperar vários elementos de informação relacionados com o último erro ocorrido na área Web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA Get page content": {
			"Syntax": "**WA Get page content** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"HTML source code"
				]
			],
			"Summary": "O comando WA Get page content retorna o código HTML da página atual ou da página que vai ser mostrada na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA Get page title": {
			"Syntax": "**WA Get page title** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título da página atual"
				]
			],
			"Summary": "O comando WA Get page title retorna o título da página atual ou que vai a ser mostrada na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA GET PREFERENCE": {
			"Syntax": "**WA GET PREFERENCE** ( {* ;} *objeto* ; *seletor* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Preferência a obter"
				],
				[
					"valor",
					"Variable",
					"<-",
					"Valor atual da preferência"
				]
			],
			"Summary": "O comando WA GET PREFERENCE permite obter o valor atual de uma preferência na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA GET URL FILTERS": {
			"Syntax": "**WA GET URL FILTERS** ( {* ;} *objeto* ; *arrFiltro* ; *permitirArrRecusar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"arrFiltro",
					"Text array",
					"<-",
					"Array de filtros"
				],
				[
					"permitirArrRecusar",
					"Boolean array",
					"<-",
					"Permitir array recusar"
				]
			],
			"Summary": "O comando WA GET URL FILTERS retorna nos arrays *arrFiltro* e *permitirArrRecusar*, os filtros ativos na área web designada pelos parâmetros *\\** e *objeto* ."
		},
		"WA GET URL HISTORY": {
			"Syntax": "**WA GET URL HISTORY** ( {* ;} *objeto* ; *arrayURLs* {; *endereço* {; *arrTitulos*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"arrayURLs",
					"Text array",
					"<-",
					"Array das URLs visitadas"
				],
				[
					"endereço",
					"Integer",
					"->",
					"0 ou omitido = Lista das URLs anteriores; 1 = Lista das próximas URLs"
				],
				[
					"arrTitulos",
					"Text array",
					"<-",
					"Array de titulos"
				]
			],
			"Summary": "O comando WA GET URL HISTORY retorna um ou dois arrays que contenhamm as URLs visitadas durante a sessão na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA OPEN BACK URL": {
			"Syntax": "**WA OPEN BACK URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				]
			],
			"Summary": "O comando WA OPEN BACK URL carrega na área web designada pelos parâmetros *\\** e *objeto* a URL antecedente na sequência das URLs abertos."
		},
		"WA OPEN FORWARD URL": {
			"Syntax": "**WA OPEN FORWARD URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				]
			],
			"Summary": "O comando WA OPEN FORWARD URL carrega na área web designada pelos parâmetros \\* e *objeto* a URL passada no parâmetro url."
		},
		"WA OPEN URL": {
			"Syntax": "**WA OPEN URL** ( {* ;} *objeto* ; *url* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"url",
					"Text",
					"->",
					"URL a carregar na área Web"
				]
			],
			"Summary": "O comando **WA OPEN URL** carrega na área web designada pelos parâmetros *\\** e *objeto* o URL passado no parâmetro *url*."
		},
		"WA OPEN WEB INSPECTOR": {
			"Syntax": "**WA OPEN WEB INSPECTOR** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado objeto é um nome de objeto (string). Se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome de objeto (se * for especificado) ou Variável (se * for omitido)"
				]
			],
			"Summary": "O comando **WA OPEN WEB INSPECTOR** abre um inspetor web para a área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA REFRESH CURRENT URL": {
			"Syntax": "**WA REFRESH CURRENT URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				]
			],
			"Summary": "O comando WA REFRESH CURRENT URL recarrega a URL atual mostrada na área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA Run offscreen area": {
			"Syntax": "**WA Run offscreen area** ( *parâmetro* ) : any",
			"Params": [
				[
					"parâmetro",
					"Object",
					"->",
					"Objeto que contém os atributos da área web"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor retornado pelo método de callback"
				]
			],
			"Summary": "O comando **WA Run offscreen area** cria uma área web na memória que pode ser usada para carregar automaticamente e analisar as páginas web\n\n**Nota:** Esse comando usa o motor de renderização web embebido."
		},
		"WA SET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA SET EXTERNAL LINKS FILTERS** ( {* ;} *objeto* ; *arrFiltro* ; *permitirArrRecusar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"arrFiltro",
					"Text array",
					"->",
					"Array filtros"
				],
				[
					"permitirArrRecusar",
					"Boolean array",
					"->",
					"Allow-deny array"
				]
			],
			"Summary": "O comando WA SET EXTERNAL LINKS FILTERS permite estabelecer um ou mais filtros de links externos para a zona web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA SET PAGE CONTENT": {
			"Syntax": "**WA SET PAGE CONTENT** ( {* ;} *objeto* ; *conteúdo* ; *bancoURL* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"conteúdo",
					"Text",
					"->",
					"código de fonte HTML"
				],
				[
					"bancoURL",
					"Text",
					"->",
					"URL para referências relativas (macOS)"
				]
			],
			"Summary": "Este comando não é mais útil."
		},
		"WA SET PREFERENCE": {
			"Syntax": "**WA SET PREFERENCE** ( {* ;} *objeto* ; *seletor* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Preferência a ser modificada"
				],
				[
					"valor",
					"Boolean",
					"->",
					"Valor de preferência (True=permitido; False = não permitido)"
				]
			],
			"Summary": "O comando WA SET PREFERENCE permite fixar diferentes preferências para o área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA SET URL FILTERS": {
			"Syntax": "**WA SET URL FILTERS** ( {* ;} *objeto* ; *arrFiltro* ; *permitirArrRecusar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				],
				[
					"arrFiltro",
					"Text array",
					"->",
					"Array filtros"
				],
				[
					"permitirArrRecusar",
					"Boolean array",
					"->",
					"Array autorizar- recusar"
				]
			],
			"Summary": "O comando WA SET URL FILTERS permite colocar um ou mais filtros para a área Web designada pelos parâmetros *\\** e *objeto*."
		},
		"WA STOP LOADING URL": {
			"Syntax": "**WA STOP LOADING URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				]
			],
			"Summary": "O comando WA STOP LOADING URL para de carregar os recurso da URL atual da área web determinada pelos parâmetros *\\** e *objeto*."
		},
		"WA ZOOM IN": {
			"Syntax": "**WA ZOOM IN** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				]
			],
			"Summary": "O comando WA ZOOM IN aumenta o tamanho do texto mostrado na área web designada pelos parâmetros \\* e *objeto*."
		},
		"WA ZOOM OUT": {
			"Syntax": "**WA ZOOM OUT** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, objeto é um nome de objeto (string); se omitido, objeto é uma variável"
				],
				[
					"objeto",
					"any",
					"->",
					"Nome objeto (se * for especificado) ou Variável (se * é omitido)"
				]
			],
			"Summary": "O comando WA ZOOM OUT reduz o tamanho do texto mostrado no área web designada pelos parâmetros *\\** e *objeto*."
		},
		"WEB Get body part count": {
			"Syntax": "**WEB Get body part count** : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Números de partes no corpo"
				]
			],
			"Summary": "O comando **WEB Get body part count** devolve o número de partes que compõe o corpo recebido."
		},
		"WEB GET BODY PART": {
			"Syntax": "**WEB GET BODY PART** ( *parte* ; *conteudo* ; *nome* ; *tipoMime* ; *nomArquivo* )",
			"Params": [
				[
					"parte",
					"Integer",
					"->",
					"Número de parte"
				],
				[
					"conteudo",
					"Blob, Text",
					"<-",
					"Conteúdo de parte"
				],
				[
					"nome",
					"Text",
					"<-",
					"Nome da variável \"input\""
				],
				[
					"tipoMime",
					"Text",
					"<-",
					"Tipo mime do arquivo"
				],
				[
					"nomArquivo",
					"Text",
					"<-",
					"Nome do arquivo enviado"
				]
			],
			"Summary": "O comando **WEB GET BODY PART** chamado no contexto de um processo web, permite analisar a parte \"body\" de uma petição multi-part."
		},
		"WEB Get current session ID": {
			"Syntax": "**WEB Get current session ID**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"UUID da sessão"
				]
			],
			"Summary": "O comando **WEB Get current session ID** devolve o ID da sessão aberta para a petição web."
		},
		"WEB GET HTTP BODY": {
			"Syntax": "**WEB GET HTTP BODY** ( *corpo* )",
			"Params": [
				[
					"corpo",
					"Blob, Text",
					"<-",
					"corpo da petição HTTP"
				]
			],
			"Summary": "O comando **WEB GET HTTP BODY** retorna o corpo da solicitação HTTP que esta sendo processada."
		},
		"WEB GET HTTP HEADER": {
			"Syntax": "**WEB GET HTTP HEADER** ( cabeçalho|arrayCampo {; *valorArray*} )",
			"Params": [
				[
					"cabeçalho&#124;arrayCampo",
					"Texto, Array texto",
					"<-",
					"Petição HTTP cabeçalho ou campos HTTP cabeçalho"
				],
				[
					"valorArray",
					"Text array",
					"<-",
					"Conteúdo dos campos cabeçalho HTTP"
				]
			],
			"Summary": "O comando **WEB GET HTTP HEADER** retorna uma string ou dois arrays, que contém o cabeçalho HTTP utilizado na petição em processo."
		},
		"WEB GET OPTION": {
			"Syntax": "**WEB GET OPTION** ( *seletor* ; *valor* )",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Código da opção a modificar"
				],
				[
					"valor",
					"Integer, Text, Collection",
					"<-",
					"Valor da opção"
				]
			],
			"Summary": "O comando **WEB GET OPTION** permite ler o valor atual de uma opção de funcionamento do servidor web de 4D."
		},
		"WEB Get server info": {
			"Syntax": "**WEB Get server info** {( *comCache* )} : Object",
			"Params": [
				[
					"comCache",
					"Boolean",
					"->",
					"True para retornar a descrição web cache. Senão (pré-determinado) a descrição da cache não é retornada"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Informação no servidor Web executando e servidor SOAP"
				]
			],
			"Summary": "O comando **WEB Get server info** devolve um objeto que contèm informação do tempo de execução detalhada na sessão atual do servidor web 4D."
		},
		"WEB GET STATISTICS": {
			"Syntax": "**WEB GET STATISTICS** ( *paginas* ; *hits* ; *uso* )",
			"Params": [
				[
					"paginas",
					"Text array",
					"<-",
					"Nomes das páginas mais consultadas"
				],
				[
					"hits",
					"Integer array",
					"<-",
					"Nomes de hits para cada página"
				],
				[
					"uso",
					"Integer",
					"<-",
					"Porcentagem de cache usado"
				]
			],
			"Summary": "O comando WEB GET STATISTICS permite obter a informação sobre as páginas mais consultadas, carregadas na caché do servidor web."
		},
		"WEB GET VARIABLES": {
			"Syntax": "**WEB GET VARIABLES** ( *nomeArray* ; *valorArray* )",
			"Params": [
				[
					"nomeArray",
					"Text array",
					"<-",
					"Nomes de variáveis de webform"
				],
				[
					"valorArray",
					"Text array",
					"<-",
					"Valor de variável de webform"
				]
			],
			"Summary": "O comando WEB GET VARIABLES preenche os arrays texto *arrayNoms e arrayValores* com os nomes e valores das variáveis contidas no formulário web “enviado” (ou seja enviado ao servidor web)."
		},
		"WEB Is secured connection": {
			"Syntax": "**WEB Is secured connection**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = se a conexão web for segura, False = se a conexão web não for segura"
				]
			],
			"Summary": "O comando WEB Is secured connection retorna um booleano indicando se a conexão ao servidor web 4D se realiza em modo seguro através de TLS/SSL (a petição começa com “https:” ao invés de “http:”)."
		},
		"WEB Is server running": {
			"Syntax": "**WEB Is server running** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se o servidor Web está sendo executado, caso contrário False"
				]
			],
			"Summary": "O comando **WEB Is server running** devolve **True** se o servidor web integrado 4D está executando e **False** se o servidor web está desligado."
		},
		"WEB LEGACY CLOSE SESSION": {
			"Syntax": "**WEB LEGACY CLOSE SESSION** ( *sessao* )",
			"Params": [
				[
					"sessao",
					"Text",
					"->",
					"Sessão UUID"
				]
			],
			"Summary": "Este comando só pode ser utilizado com **sessões web herdadas**, disponíveis em bancos convertidos a partir de versões anteriores a 4D v18 R6\\."
		},
		"WEB LEGACY GET SESSION EXPIRATION": {
			"Syntax": "**WEB LEGACY GET SESSION EXPIRATION** ( *idSessao* ; *dataVenc* ; *horaVenc* )",
			"Params": [
				[
					"idSessao",
					"Text",
					"->",
					"UUID de sessão"
				],
				[
					"dataVenc",
					"Date",
					"<-",
					"Data de vencimento da cookie"
				],
				[
					"horaVenc",
					"Time",
					"<-",
					"Hora de vencimento da cookie"
				]
			],
			"Summary": "Este comando só pode ser utilizao com **sessões web herdadas**, disponíveis em bancos convertidos a partir de versões anteriores a 4D v18 R6\\."
		},
		"WEB SEND BLOB": {
			"Syntax": "**WEB SEND BLOB** ( *BLOB* ; *tipo* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"Blob a enviar ao browser"
				],
				[
					"tipo",
					"Text",
					"->",
					"Tipo de dados do BLOB"
				]
			],
			"Summary": "O comando **WEB SEND BLOB** permite enviar o BLOB *blob* ao navegador."
		},
		"WEB SEND FILE": {
			"Syntax": "**WEB SEND FILE** ( *htmlArquivo* )",
			"Params": [
				[
					"htmlArquivo",
					"Text",
					"->",
					"Rota do arquivo HTML ou string vazia para terminar SEND HTML FILE"
				]
			],
			"Summary": "O comando **WEB SEND FILE** envia ao navegador web a página HTML ou o arquivo web armazenado no documento cuja rota se passa em *arquivohtml*."
		},
		"WEB SEND HTTP REDIRECT": {
			"Syntax": "**WEB SEND HTTP REDIRECT** ( *url* {; *} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"Nova URL"
				],
				[
					"*",
					"Operador",
					"->",
					"Se especificado = URL não for traduzido, se omitido = URL é traduzido"
				]
			],
			"Summary": "O comando **WEB SEND HTTP REDIRECT** permite transformar uma URL em outra."
		},
		"WEB SEND RAW DATA": {
			"Syntax": "**WEB SEND RAW DATA** ( *dados* {; *} )",
			"Params": [
				[
					"dados",
					"Blob",
					"->",
					"Dados HTTP a enviar"
				],
				[
					"*",
					"Operador",
					"->",
					"Enviar em pedaços"
				]
			],
			"Summary": "O comando \\[**#current\\_title\\]** permite ao servidor web 4D enviar dados HTTP \"brutos\", os quais podem estar em pedaços."
		},
		"WEB SEND TEXT": {
			"Syntax": "**WEB SEND TEXT** ( *textoHTML* {; *semContexto*} )",
			"Params": [
				[
					"textoHTML",
					"Text",
					"->",
					"Texto do campo HTML ou variável a ser enviado ao navegador Web"
				],
				[
					"semContexto",
					"Text",
					"->",
					"True = Vai para o modo não contextual se False; se omitido = permanece no modo atual."
				]
			],
			"Summary": "O comando WEB SEND TEXT enviar diretamente os dados de texto com formato HTML."
		},
		"WEB SERVICE AUTHENTICATE": {
			"Syntax": "**WEB SERVICE AUTHENTICATE** ( *nome* ; *senha* {; *metAutenticaçao*} {; *} )",
			"Params": [
				[
					"nome",
					"Text",
					"->",
					"nome de usuário"
				],
				[
					"senha",
					"Text",
					"->",
					"senha de usuário"
				],
				[
					"metAutenticaçao",
					"Integer",
					"->",
					"Método autenticação 0 ou omitido = não especificado; 1= BASIC; 2=DIGEST"
				],
				[
					"*",
					"Operador",
					"->",
					"Se passado: autenticação por proxy"
				]
			],
			"Summary": "O comando **WEB SERVICE AUTHENTICATE** permite utilizar os serviços web que necessitem da autenticação da aplicação cliente (autenticação simples)."
		},
		"WEB SERVICE CALL": {
			"Syntax": "**WEB SERVICE CALL** ( *urlAcesso* ; *soapAction* ; *nomeMetodo* ; *nomeEspaço* {; *tipoComplexo* {; *}} )",
			"Params": [
				[
					"urlAcesso",
					"Text",
					"->",
					"Acesso URL ao Webservice"
				],
				[
					"soapAction",
					"Text",
					"->",
					"Conteúdos do campo SOAPAction"
				],
				[
					"nomeMetodo",
					"Text",
					"->",
					"Nome do método"
				],
				[
					"nomeEspaço",
					"Text",
					"->",
					"nomeespaço XML"
				],
				[
					"tipoComplexo",
					"Integer",
					"->",
					"Configuração de tipos complexos (tipos simples se omitido)"
				],
				[
					"*",
					"Operador",
					"->",
					"Não fechar a conexão"
				]
			],
			"Summary": "O comando **WEB SERVICE CALL** se utiliza para chamar um serviço web enviando uma petição HTTP."
		},
		"WEB SERVICE Get info": {
			"Syntax": "**WEB SERVICE Get info** ( *tipoInfo* ) : Text",
			"Params": [
				[
					"tipoInfo",
					"Integer",
					"->",
					"Informação a ser recuperada"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Informação sobre o último erro SOAP"
				]
			],
			"Summary": "O comando **WEB SERVICE Get info** retorna informação de todo erro achado durante a execução da última petição SOAP enviada até um serviço web remoto."
		},
		"WEB SERVICE GET RESULT": {
			"Syntax": "**WEB SERVICE GET RESULT** ( *valorRetornado* {; *nomeRetornado* {; *}} )",
			"Params": [
				[
					"valorRetornado",
					"Variable",
					"<-",
					"Valor retornado pelo Web Service"
				],
				[
					"nomeRetornado",
					"Text",
					"->",
					"Nome do parâmetro a ser retornado"
				],
				[
					"*",
					"Operator",
					"->",
					"Liberar memória"
				]
			],
			"Summary": "O comando **WEB SERVICE GET RESULT** permite recuperar um valor enviado pelo serviço web como resultado do processo realizado."
		},
		"WEB SERVICE SET OPTION": {
			"Syntax": "**WEB SERVICE SET OPTION** ( *opçao* ; *valor* )",
			"Params": [
				[
					"opçao",
					"Integer",
					"->",
					"Código da opção a estabelecer"
				],
				[
					"valor",
					"Integer, Text",
					"->",
					"Valor da opção"
				]
			],
			"Summary": "Este comando está criado para os usuários de serviços web."
		},
		"WEB SERVICE SET PARAMETER": {
			"Syntax": "**WEB SERVICE SET PARAMETER** ( *nome* ; *valor* {; *tipoSoap*} )",
			"Params": [
				[
					"nome",
					"Text",
					"->",
					"Nome do parâmetro a incluir na petição SOAP"
				],
				[
					"valor",
					"Variable",
					"->",
					"Variável 4D que contém o valor do parâmetro"
				],
				[
					"tipoSoap",
					"Text",
					"->",
					"Tipo SOAP do parâmetro"
				]
			],
			"Summary": "O comando WEB SERVICE SET PARAMETER permite a definição de um parâmetro utilizado por uma petição SOAP cliente."
		},
		"WEB SET HOME PAGE": {
			"Syntax": "**WEB SET HOME PAGE** ( *pagInicio* )",
			"Params": [
				[
					"pagInicio",
					"Text",
					"->",
					"Nome da página ou rota de acesso HTML a página ou \"\" para não enviar a home page personalizada"
				]
			],
			"Summary": "O comando WEB SET HOME PAGE lhe permite modificar a página de início personalizada para o processo web atual."
		},
		"WEB SET HTTP HEADER": {
			"Syntax": "**WEB SET HTTP HEADER** ( cabeçalho|arrayCampo {; *valorArray*} )",
			"Params": [
				[
					"cabeçalho&#124;arrayCampo",
					"Texto, Array texto",
					"->",
					"Campo ou variável contendo o cabeçalho HTTP requisitado ou campos cabeçalho HTTP"
				],
				[
					"valorArray",
					"Text array",
					"->",
					"Conteúdo de campo de cabeçalho HTTP"
				]
			],
			"Summary": "O comando **WEB SET HTTP HEADER** permite definir os campos do cabeçalho HTTP da resposta enviada ao navegador web por 4D."
		},
		"WEB SET OPTION": {
			"Syntax": "**WEB SET OPTION** ( *seletor* ; *valor* )",
			"Params": [
				[
					"seletor",
					"Integer",
					"->",
					"Código da opção a modificar"
				],
				[
					"valor",
					"Integer, Text, Collection",
					"->",
					"Valor da opção"
				]
			],
			"Summary": "O comando WEB SET OPTION modifica o valor atual das diferentes opções de funcionamento do servidor web de 4D."
		},
		"WEB SET ROOT FOLDER": {
			"Syntax": "**WEB SET ROOT FOLDER** ( *pastaRaiz* )",
			"Params": [
				[
					"pastaRaiz",
					"Text",
					"->",
					"Rota de acesso da pasta raiz do webserver"
				]
			],
			"Summary": "O comando WEB SET ROOT FOLDER é utilizado para modificar a pasta raiz por padrão na qual 4D procura os arquivos HTML pedidos ao servidor web."
		},
		"WEB START SERVER": {
			"Syntax": "**WEB START SERVER**",
			"Params": [],
			"Summary": "O comando WEB START SERVER inicia o servidor web da aplicação 4D na qual é executado (4D ou 4D Server)."
		},
		"WEB STOP SERVER": {
			"Syntax": "**WEB STOP SERVER**",
			"Params": [],
			"Summary": "O comando WEB STOP SERVER para o servidor web da aplicação 4D no qual foi executado (4D ou 4D Server)."
		},
		"WEB Validate digest": {
			"Syntax": "**WEB Validate digest** ( *nomeUsuario* ; *senha* ) : Boolean",
			"Params": [
				[
					"nomeUsuario",
					"Text",
					"->",
					"Nome do usuário"
				],
				[
					"senha",
					"Text",
					"->",
					"Senha de usuário"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Autenticação OK; False = autenticação falha"
				]
			],
			"Summary": "O comando WEB Validate digest permite verificar a validez da informação de identificação (nome e senha) fornecida por um usuário que se conecta ao servidor web."
		},
		"Window kind": {
			"Syntax": "**Window kind** {( *janela* )} : Integer",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da Janela, ou a janela ativa do processo atual, se omitido"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de janela"
				]
			],
			"Summary": "O comando Window kind devolve o tipo de janela 4D cujo número de referência for passado no parâmetro *janela*."
		},
		"WINDOW LIST": {
			"Syntax": "**WINDOW LIST** ( *janelas* {; *} )",
			"Params": [
				[
					"janelas",
					"Array",
					"<-",
					"Array de números de referência de janelas"
				],
				[
					"*",
					"Operador",
					"->",
					"Se especificado, considere janela flutuante, se omitido, ignore janela flutuante"
				]
			],
			"Summary": "O comando WINDOW LIST preenche o array *janelas* com os números de referência das janelas abertas atualmente em todos os processos (processos kernel ou usuário)."
		},
		"Window process": {
			"Syntax": "**Window process** {( *janela* )} : Integer",
			"Params": [
				[
					"janela",
					"Integer",
					"->",
					"Número de referência da janela"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referência do processo"
				]
			],
			"Summary": "O comando Window process devolve o número de processo que executa a janela cujo número de referência é passado em *janela*."
		},
		"Windows Alt down": {
			"Syntax": "**Windows Alt down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla Alt em windows (ou tecla Opção em Macintosh)"
				]
			]
		},
		"Windows Ctrl down": {
			"Syntax": "**Windows Ctrl down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado da tecla Windows Ctrl (ou tecla Comando em Macintosh)"
				]
			]
		},
		"WRITE PICTURE FILE": {
			"Syntax": "**WRITE PICTURE FILE** ( *nomeArquivo* ; *imagem* {; *codec*} )",
			"Params": [
				[
					"nomeArquivo",
					"Text",
					"->",
					"Nome ou rota completa do arquivo a escrever, ou string vazia"
				],
				[
					"imagem",
					"Picture",
					"->",
					"Campo de imagem ou variável a escrever"
				],
				[
					"codec",
					"Text",
					"->",
					"Codec de identificação de Imagem"
				]
			],
			"Summary": "O comando WRITE PICTURE FILE permite guardar em um arquivo no disco a imagem passada no parâmetro *imagem,* no formato definido por *codec*."
		},
		"XML DECODE": {
			"Syntax": "**XML DECODE** ( *valorXML* ; *objeto4D* )",
			"Params": [
				[
					"valorXML",
					"Text",
					"->",
					"Valor do tipo Texto que vem de uma estrutura XML"
				],
				[
					"objeto4D",
					"Field, Variable",
					"<-",
					"Variável 4D ou campo que recebe o valor XML convertido"
				]
			],
			"Summary": "O comando XML DECODE converte um valor salvado como uma string XML em um valor 4D."
		},
		"XML GET ERROR": {
			"Syntax": "**XML GET ERROR** ( *refElemento* ; *textoErro* {; *linha* {; *coluna*}} )",
			"Params": [
				[
					"refElemento",
					"Text",
					"->",
					"Referência de elemento XML"
				],
				[
					"textoErro",
					"Variable",
					"<-",
					"Texto do erro"
				],
				[
					"linha",
					"Variable",
					"<-",
					"Número de linha"
				],
				[
					"coluna",
					"Variable",
					"<-",
					"Número de coluna"
				]
			],
			"Summary": "O comando XML GET ERROR retorna no parâmetro *textoErro* a descrição do erro encontrado durante o processo do elemento XML designado pelo parâmetro *refElement*."
		},
		"XML GET OPTIONS": {
			"Syntax": "**XML GET OPTIONS** ( elemRef|documento ; *seletor* ; *valor* {; *seletor2* ; *valor2* ; ... ; *seletorN* ; *valorN*} )",
			"Params": [
				[
					"elemRef&#124;documento",
					"Texto",
					"->",
					"Elemento de referência raiz XML ou Referência de documento aberto"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Opção a conseguir"
				],
				[
					"valor",
					"Integer",
					"<-",
					"Valor atual da opção"
				]
			],
			"Summary": "O comando XML GET OPTIONS é utilizado para ler o valor atual de um ou mais dos parâmetros XML definidos para a sessão atual e o usuário atual."
		},
		"XML SET OPTIONS": {
			"Syntax": "**XML SET OPTIONS** ( elemRef|documento ; *seletor* ; *valor* {; *seletor2* ; *valor2* ; ... ; *seletorN* ; *valorN*} )",
			"Params": [
				[
					"elemRef&#124;documento",
					"Texto",
					"->",
					"Elemento de referencia raiz XML ou Referência de documento aberto"
				],
				[
					"seletor",
					"Integer",
					"->",
					"Opção a estabelecer"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor da opção"
				]
			],
			"Summary": "O comando XML SET OPTIONS é utilizado para modificar o valor de um ou mais parâmetros XML para estrutura passada no primeiro parâmetro."
		},
		"Year of": {
			"Syntax": "**Year of** ( *data* ) : Integer",
			"Params": [
				[
					"data",
					"Date",
					"->",
					"Data para a qual devolver o ano"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número indicando o ano da data"
				]
			],
			"Summary": "O comando Year of retorna o ano de *data*."
		},
		"cs": {
			"Syntax": "**cs** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"Class store de usuário para o projeto ou componente"
				]
			],
			"Summary": "devolve a loja de classes de utilizadores para o projecto ou componente actual"
		},
		"4D": {
			"Syntax": "**4D** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"Class store 4D"
				]
			],
			"Summary": "retorna a classe store para as classes 4D incorporadas disponíveis"
		},
		"WP Add picture": {
			"Syntax": "**WP Add picture** ( *wpDoc* {; *picture*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *picturePath*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *pictureFileObj*} ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"picture",
					"Imagem",
					"->",
					"Imagem 4D"
				],
				[
					"picturePath",
					"Text",
					"->",
					"Picture path"
				],
				[
					"pictureFileObj",
					"4D. File",
					"->",
					"4D.File object representing a picture file"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Object referencing the picture"
				]
			],
			"Summary": "anchors the picture passed as parameter at a fixed location within the specified *wpDoc* and returns its reference."
		},
		"WP DELETE SECTION": {
			"Syntax": "**WP DELETE SECTION** ( *section* )<br/> **WP DELETE SECTION** ( *wpDoc* ; *indexNumber* {; *count*} )",
			"Params": [
				[
					"section",
					"Object",
					"->",
					"Seção 4D Write Pro"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indexNumber",
					"Integer",
					"->",
					"Index of the section to be deleted"
				],
				[
					"count",
					"Integer",
					"->",
					"Number of sections to be deleted"
				]
			],
			"Summary": "deletes the passed *section* object, or deletes one or more sections starting at  *indexNumber* and depending on the *count* passed"
		},
		"WP DELETE SUBSECTION": {
			"Syntax": "**WP DELETE SUBSECTION** ( *wpSection* ; *subSectionType* )<br/>**WP DELETE SUBSECTION** ( *subSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Seção 4D Write Pro"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Tipo de subseção (wk first page, wk left page ou wk right page)"
				],
				[
					"subSection",
					"Object",
					"->",
					"Subseção 4D Write Pro"
				]
			],
			"Summary": "removes the *subSectionType* subsection elements from the *wpSection* 4D Write Pro section, or it directly removes the passed *subSection*"
		},
		"WP EXPORT DOCUMENT": {
			"Syntax": "**WP EXPORT DOCUMENT** ( *wpDoc* ; *filePath* {; *format* {; *option*}} )<br/>**WP EXPORT DOCUMENT** ( *wpDoc* ; *fileObj* {; *format* {; *option*}} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Variável 4D Write Pro"
				],
				[
					"filePath",
					"Text",
					"->",
					"Caminho do arquivo exportado"
				],
				[
					"fileObj",
					"4D. File",
					"->",
					"Objeto do arquivo a exportar"
				],
				[
					"format",
					"Integer",
					"->",
					"Document output format (e.g., .docx, .pdf, etc.)"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"Export options, which can vary depending on the format chosen."
				]
			],
			"Summary": "exports the *wpDoc* 4D Write Pro object to a document on disk according to the *filePath* or *fileObj* parameter as well as any optional parameters."
		},
		"WP EXPORT VARIABLE": {
			"Syntax": "**WP EXPORT VARIABLE** ( *wpDoc* ; *destination* ; *format* {; *option*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Variável 4D Write Pro"
				],
				[
					"destination",
					"Text, Blob",
					"->",
					"Variable to receive exported contents"
				],
				[
					"format",
					"Integer",
					"->",
					"Formato de saída variável"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"Opções de exportação"
				]
			],
			"Summary": "The **WP EXPORT VARIABLE** command exports the *wpDoc* 4D Write Pro object to the 4D *destination* variable in the specified *format*."
		},
		"WP Get attributes": {
			"Syntax": "**WP Get attributes** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP Get attributes** ( *targetObj* ; *attribColl* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"attribName",
					"Text",
					"->",
					"Nome do atributo para obter"
				],
				[
					"attribValue",
					"Text, Number, Array, Collection, Picture, Date",
					"<-",
					"Current value of attribute for the target"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"Collection of attribute names to get"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nomes e valores dos atributos"
				]
			],
			"Summary": "returns the value of any attribute in a 4D Write Pro range, header, body, footer, table, or document."
		},
		"WP Import document": {
			"Syntax": "**WP Import document** ( *filePath* {; *option*} ) : Object<br/>**WP Import document** ( *fileObj* {; *option*} ) : Object",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"Path to: a 4D Write document (.4w7 or .4wt) or a 4D Write Pro document (.4wp) or a .docx document (.docx)"
				],
				[
					"fileObj",
					"4D. File",
					"->",
					"Objeto do arquivo a importar"
				],
				[
					"option",
					"Integer, Object",
					"->",
					"(Integer) Import option for HTML expressions, (object) Import options for .docx document"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto 4D Write Pro"
				]
			],
			"Summary": "converts an existing 4D Write Pro / 4D Write document (.4wp, .4w7 or .4wt) or MS Word document (.docx) to a new 4D Write Pro object."
		},
		"WP Insert break": {
			"Syntax": "**WP Insert break** ( *targetObj* ; *breakType* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"breakType",
					"Integer",
					"->",
					"Type of break to insert"
				],
				[
					"mode",
					"Integer",
					"->",
					"Modo de inserção"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Modo de atualização de intervalo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Text range of the break character"
				]
			],
			"Summary": "inserts a new break of the *breakType* type in the *targetObj* according to the specified insertion *mode* and *rangeUpdate* parameters, and  returns the text range of the break character"
		},
		"WP Insert document body": {
			"Syntax": "**WP Insert document body** ( *targetObj* ; *wpDoc* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"mode",
					"Integer",
					"->",
					"Modo de inserção"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Modo de atualização de intervalo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Text range object referencing the inserted document body"
				]
			],
			"Summary": "inserts the body of the *wpDoc* document into the specified *targetObj* according to the passed insertion *mode* and *rangeUpdate* parameters, and it returns the range of the inserted document body."
		},
		"WP Insert formula": {
			"Syntax": "**WP Insert formula** ( *targetObj* ; *formula* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Intervalo ou elemento ou documento 4D Write Pro"
				],
				[
					"formula",
					"Object",
					"->",
					"Objeto de fórmula OU Objeto com propriedades de fórmula e nome"
				],
				[
					"mode",
					"Number",
					"->",
					"Modo de inserção"
				],
				[
					"rangeUpdate",
					"Number",
					"->",
					"Inclui ou exclui o conteúdo inserido dentro do intervalo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de intervalo de texto que representa o resultado da fórmula"
				]
			],
			"Summary": "insere uma *fórmula* em *targetObj* de acordo com o *modo* de inserção especificado e retorna o intervalo de texto resultante."
		},
		"WP Insert picture": {
			"Syntax": "**WP Insert picture** ( *targetObj* ; *picture* ; *mode* {; *rangeUpdate*} ): Object<br/>**WP Insert picture** ( *targetObj* ; *pictureFileObj*; *mode* {; *rangeUpdate*}): Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Intervalo ou elemento ou documento 4D Write Pro"
				],
				[
					"picture",
					"Imagem",
					"->",
					"Campo de imagem ou variável, ou caminho para o arquivo de imagem no disco"
				],
				[
					"pictureFileObj",
					"4D. File",
					"->",
					"Um objeto de arquivo representando um arquivo de imagem."
				],
				[
					"mode",
					"Integer",
					"->",
					"Modo de inserção"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Modo de atualização de intervalo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto referenciando a imagem"
				]
			],
			"Summary": "insere uma *imagem* ou um *pictureFileObj* no *targetObj* especificado de acordo com os parâmetros *modo* de inserção passada e *rangeUpdate*, e retorna uma referência ao elemento imagem."
		},
		"WP RESET ATTRIBUTES": {
			"Syntax": "**WP RESET ATTRIBUTES** ( *targetObj* ; *attribName* {; *attribName2* ; ... ; *attribNameN*} )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribName* }{; *attribName2* ; ... ; *attribNameN*} )<br/>**WP RESET ATTRIBUTES** ( *targetObj* ; *attribColl* )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribColl*})",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"sectionOrSubsection",
					"Object",
					"->",
					"Section or subsection of a 4D Write Pro document"
				],
				[
					"attribName",
					"Text",
					"->",
					"Nome do(s) atributo(s) a remover"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"Collection of attributes to remove"
				]
			],
			"Summary": "allows you to reset the value of one or more attributes in the range, element, or document passed as parameter."
		},
		"WP SET ATTRIBUTES": {
			"Syntax": "**WP SET ATTRIBUTES** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP SET ATTRIBUTES** ( *targetObj* ; *attribObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"attribName",
					"Text",
					"->",
					"Nome do atributo a ser definido"
				],
				[
					"attribValue",
					"Text, Number, Object, Collection, Picture, Date",
					"->",
					"Novo valor de atributo"
				],
				[
					"attribObj",
					"Object",
					"->",
					"Object containing attribute names and their corresponding values to set"
				]
			],
			"Summary": "allows you to set the value of any attribute in a range, element, document."
		},
		"WP Table append row": {
			"Syntax": "**WP Table append row** ( *tableRef* ; *value* {; *value2* ; ... ; *valueN*} )  : Object<br/>**WP Table append row** ( *tableRef* ; *valueColl* ) : Object",
			"Params": [
				[
					"tableRef",
					"Object",
					"->",
					"Referência da tabela"
				],
				[
					"value",
					"Text, Number, Time, Date, Picture, Object",
					"->",
					"Valor(es) a serem definidos na linha"
				],
				[
					"valueColl",
					"Collection",
					"->",
					"Collection of values to set in the row"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto intervalo linha"
				]
			],
			"Summary": "appends one row to the *tableRef* table, fills it with *value*(s) or a *valueColl* collection, and returns the corresponding row range object."
		},
		"WP Bookmark range": {
			"Syntax": "**WP Bookmark range** ( *docWP* ; *NomeBK* ) -> Resultado",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"NomeBK",
					"Text",
					"->",
					"Nome de bookmark cuja faixa quer obter"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Faixa de bookmark"
				]
			],
			"Summary": "O comando **WP Bookmark range** devolve um objeto de tipo faixa de texto (objFaixa) que contém a faixa para o marcador com o nome *nombk* em *docWP*."
		},
		"WP COMPUTE FORMULAS": {
			"Syntax": "**WP COMPUTE FORMULAS** ( *objTarget* )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				]
			],
			"Summary": "O comando **WP COMPUTE FORMULAS** avalia as fórmulas em *objTarget*."
		},
		"WP DELETE BOOKMARK": {
			"Syntax": "**WP DELETE BOOKMARK** ( *wpDoc* ; *nomBK* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"nomBK",
					"Text",
					"->",
					"Nome de bookmark a apagar"
				]
			],
			"Summary": "O comando **WP DELETE BOOKMARK** elimina o marcador chamado *nombk de* *docWP*."
		},
		"WP DELETE FOOTER": {
			"Syntax": "**WP DELETE FOOTER** ( *wpSeção* )",
			"Params": [
				[
					"wpSeção",
					"Object",
					"->",
					"Seção ou subseção 4D Write Pro"
				]
			],
			"Summary": "O comando **WP DELETE FOOTER** elimina o elemento do rodapé associado à seção ou subseção definida pelo parâmetro *wpSection*."
		},
		"WP DELETE HEADER": {
			"Syntax": "**WP DELETE HEADER**  ( *wpSecao* )",
			"Params": [
				[
					"wpSecao",
					"Object",
					"->",
					"Seção ou subseção 4D Write Pro"
				]
			],
			"Summary": "O comando **WP DELETE HEADER**  elimina o elemento do cabeçalho associado à seção ou subseção definida pelo parâmetro *wpSection*."
		},
		"WP DELETE PICTURE": {
			"Syntax": "**WP DELETE PICTURE**  ( *imgObj* )",
			"Params": [
				[
					"imgObj",
					"Object",
					"->",
					"Objeto imagem (tipo inline ou ancorada)"
				]
			],
			"Summary": "O comando **WP DELETE PICTURE**  apaga a imagem definida pelo parâmetro *imgObj*."
		},
		"WP DELETE STYLE SHEET": {
			"Syntax": "**WP DELETE STYLE SHEET** ( *objFolhaEstilo* ) | (*wpDoc* ; *nomeFolhaEstilo* )",
			"Params": [
				[
					"objFolhaEstilo",
					"Object",
					"->",
					"objeto folha de estilo"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"nomeFolhaEstilo",
					"Text",
					"->",
					"Nome da folha de estilo"
				]
			],
			"Summary": "O comando **WP DELETE STYLE SHEET** elimina o parágrafo designado ou a folha de estilo de caracteres de documento atual."
		},
		"WP DELETE TEXT BOX": {
			"Syntax": "**WP DELETE TEXT BOX** ( *textBox* )",
			"Params": [
				[
					"textBox",
					"Object",
					"->",
					"Text box"
				]
			],
			"Summary": "O comando **WP DELETE TEXT BOX** apaga a text box definida no parâmetro *textBox* ."
		},
		"WP Find all": {
			"Syntax": "**WP Find all** ( *objAlvo* ; *valorPesquisa* ; *condiçãoPesquisa* {; *valorSubstituir*} )  -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Range ou elemento ou do documento 4D Write Pro"
				],
				[
					"valorPesquisa",
					"Text",
					"->",
					"Valor pesquisa"
				],
				[
					"condiçãoPesquisa",
					"Integer",
					"->",
					"Pesquisa regras"
				],
				[
					"valorSubstituir",
					"Text",
					"->",
					"String substituição"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de objetos range"
				]
			],
			"Summary": "O comando WP Find all pesquisa *objAlvo*, pelo *valorPesquisa* baseado na *condiçãoPesquisa*."
		},
		"WP Find next": {
			"Syntax": "**WP Find next** ( *objAlvo* ; *pesquisarDepois* ; *valorPesquisa* ; *condiçãoPesquisa* {; *valorSubstituir*} ) -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"pesquisarDepois",
					"Object",
					"->",
					"Range depois da qual vai começar a pesquisa"
				],
				[
					"valorPesquisa",
					"Text",
					"->",
					"valor a ser pesquisado"
				],
				[
					"condiçãoPesquisa",
					"Integer",
					"->",
					"Regras da pesquisa"
				],
				[
					"valorSubstituir",
					"Text",
					"->",
					"String que vai opcionalmente substituir o valor encontrado"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Range/seleção dos valores encontrados/substituídos"
				]
			],
			"Summary": "O comando **WP Find next** pesquisa *objAlvo*, depois da range/faixa de seleção *pesquisarDepois*, pesquisando por *valorPesquisa* baseado na *condiçãoPesquisa*."
		},
		"WP Find previous": {
			"Syntax": "**WP Find previous**  ( *objAlvo* ; *pesquisarAntes* ; *valorPesquisa* ; *condiçãoPesquisa* {; *substituirValor*} ) -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"pesquisarAntes",
					"Object",
					"->",
					"Range/seleção antes da qual vai começar a pesquisa"
				],
				[
					"valorPesquisa",
					"Text",
					"->",
					"Valor a ser pesquisado"
				],
				[
					"condiçãoPesquisa",
					"Integer",
					"->",
					"Regras da pesquisa"
				],
				[
					"substituirValor",
					"Text",
					"->",
					"String se quiser substituir o valor"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Range/seleção do valor encontrado/substituído"
				]
			],
			"Summary": "O comando **WP Find previous**  pesquisa *objAlvo*, antes da range *pesquisarAntes*, para o *valorPesquisa* baseado em *condiçõesPesquisa*."
		},
		"WP FREEZE FORMULAS": {
			"Syntax": "**WP FREEZE FORMULAS** ( *alvoObj* {; *recompute*} )",
			"Params": [
				[
					"alvoObj",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"recompute",
					"Integer",
					"->",
					"Opção para controlar a recomputação"
				]
			],
			"Summary": "O comando **WP FREEZE FORMULAS** \"congela\" os conteúdos das fórmulas em *alvoObj*."
		},
		"WP Get body": {
			"Syntax": "**WP Get body** ( *wpDoc* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Corpo 4D Write Pro"
				]
			],
			"Summary": "O comando **WP Get body** retorna o elemento corpo do documento *wpDoc* 4D Write Pro."
		},
		"WP GET BOOKMARKS": {
			"Syntax": "**WP GET BOOKMARKS** ( *docWP* ; *arrayNomeMarcadores* )",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"arrayNomeMarcadores",
					"Array texto",
					"&#x1F858;",
					"Array de nome de marcadores"
				]
			],
			"Summary": "O comando **WP GET BOOKMARKS** devolve um array que contém os nomes de todos os marcadores definidos em *docWP*."
		},
		"WP Get breaks": {
			"Syntax": "**WP Get breaks** ( *objAlvo* {; *tipoQuebra*} ) -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Range/faixa de seleção ou elemento ou documento 4D write Pro"
				],
				[
					"tipoQuebra",
					"Integer",
					"->",
					"Tipo de quebra a retornar"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de ranges/faixas de seleção"
				]
			],
			"Summary": "O comando **WP Get breaks** retorna a coleção de todas as quebras inseridas em *objAlvo*."
		},
		"WP Get data context": {
			"Syntax": "**WP Get data context** ( *wpDoc* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"documento 4d write pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"objeto contexto data"
				]
			],
			"Summary": "O comando **WP Get data context** devolve o contexto de dados do documento wpDoc para o processo atual."
		},
		"WP Get element by ID": {
			"Syntax": "**WP Get element by ID** ( *wpDoc* ; *ID* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"ID",
					"Text",
					"->",
					"Identificador do elemento a recuperar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"elemento 4D Write Pro"
				]
			],
			"Summary": "O comando **WP Get element by ID** devolve um objeto que contenha o elemento de *wpDoc* passado no parâmetro *ID*."
		},
		"WP Get elements": {
			"Syntax": "**WP Get elements** ( *objAlvo* {; *tipoElemento*} ) -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Intervalo ou referência de elemento ou documento 4D Write Pro"
				],
				[
					"tipoElemento",
					"Integer",
					"->",
					"Tipo desejado de elemento a recuperar"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção que contém os elementos de referência"
				]
			],
			"Summary": "O comando **WP Get elements** devolve uma coleção de objetos que contém parágrafos, imagens, tabelas ou referências de filas."
		},
		"WP Get footer": {
			"Syntax": "**WP Get footer** ( *objFaixa* ) | (*docWP* ; *indiceSecao* {; *subtipoSecao*} )  -> Resultado",
			"Params": [
				[
					"objFaixa",
					"Object",
					"->",
					"Faixa do 4D Write Pro"
				],
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indiceSecao",
					"Integer",
					"->",
					"Índice de Seção"
				],
				[
					"subtipoSecao",
					"Integer",
					"->",
					"Subtipo de seção (wk first page, wk left page ou wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rodapé 4D Write Pro"
				]
			],
			"Summary": "O comando **WP Get footer** devolveo rodapé de página associado a faixa *objfaixa* ou ao *indiceSeção* especificado do documento *wpDoc*."
		},
		"WP Get formulas": {
			"Syntax": "**WP Get formulas** ( *alvoObj* ) -> Resultado",
			"Params": [
				[
					"alvoObj",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de fórmulas"
				]
			],
			"Summary": "O comando **WP Get formulas** devolve uma coleção de todas as fórmulas definidas em *objTarget*."
		},
		"WP Get frame": {
			"Syntax": "**WP Get frame** ( {* ;} *wpArea* {; *textBoxID*} ) -> Resultado",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, wpArea é um nome de objeto de formulário (string). Se omitido, wpArea é um campo de objeto ou variável"
				],
				[
					"wpArea",
					"Text",
					"->",
					"Nome de objeto de formulário (se * for especificado) ou variável ou campo de objeto 4D Write Pro"
				],
				[
					"textBoxID",
					"String",
					"&#x1F858;",
					"ID of the text box (only filled if a text box has the focus)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"o Frame onde o cursor está atualmente estabelecido"
				]
			],
			"Summary": "O comando **WP Get frame** devolve o marco no qual se encontra atualmente o cursor na área 4D Write Pro *wpArea*."
		},
		"WP Get header": {
			"Syntax": "**WP Get header** ( *objFaixa* ) | (*docWP* ; *indiceSecao* {; *subsecaoTipo*} )  -> Resultado",
			"Params": [
				[
					"objFaixa",
					"Object",
					"->",
					"Faixa 4D Write Pro"
				],
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indiceSecao",
					"Integer",
					"->",
					"Indice seção"
				],
				[
					"subsecaoTipo",
					"Integer",
					"->",
					"Tipo sub-seção (wk first page, wk left page ou wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Cabeçalho 4D Write Pro"
				]
			],
			"Summary": "O comando **WP Get header** devolve um cabeçalho associado a faixa *objFaixa* ou ao *indiceSecao* do documento *wpDoc*."
		},
		"WP Get links": {
			"Syntax": "**WP Get links** ( *objRange* ) -> Resultado",
			"Params": [
				[
					"objRange",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de links"
				]
			],
			"Summary": "**WP Get links** devolve a coleção de todos os links definidos em *objRange*."
		},
		"WP Get page count": {
			"Syntax": "**WP Get page count** ( *docWP* ) -> Resultado",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de páginas em documento"
				]
			],
			"Summary": "O comando **WP Get page count** devolve o número total de páginas definidas no documento 4D Write Pro *docWP*."
		},
		"WP Get position": {
			"Syntax": "**WP Get position** ( *objRange* {; *layout*} ) -> Resultado",
			"Params": [
				[
					"objRange",
					"Object",
					"->",
					"Elemento ou range ou documento 4D Write &#124;Pro"
				],
				[
					"layout",
					"Integer",
					"->",
					"Layout documento 4D Write Pro usado para avaliação: 0 (padrão) = 4D Write Pro layout; 1= HTML WYSWYG"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Informação posição"
				]
			],
			"Summary": "O comando **WP Get position** devolve um objeto que descreve a posição atual de *objRange*."
		},
		"WP Get section": {
			"Syntax": "**WP Get section** ( *alvoObj* ) | (*wpDoc* ; índiceSeção ) -> Resultado",
			"Params": [
				[
					"alvoObj",
					"Object",
					"->",
					"Range ou elemento de referência"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write pro"
				],
				[
					"índiceSeção",
					"Integer",
					"->",
					"Índice da seção"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Seção 4D Write Pro"
				]
			],
			"Summary": "O comando **WP Get section** devolve a primeira seção intersectada pela range *alvoObj* ou elemento, ou ao *indiceSeção*  especificado do documento *wpDoc*."
		},
		"WP Get sections": {
			"Syntax": "**WP Get sections** ( *alvoObj* ) -> Resultado",
			"Params": [
				[
					"alvoObj",
					"Object",
					"->",
					"Range ou documento 4D Write Pro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de todas as seções (principais) encontrados em alvoObj"
				]
			],
			"Summary": "O comando **WP Get sections** devolve uma coleção de todas as seções definidas no parâmetro *targetObj*."
		},
		"WP Get style sheet": {
			"Syntax": "**WP Get style sheet** ( *wpDoc* ; *nomeFolhaEstilo* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4d Write Pro"
				],
				[
					"nomeFolhaEstilo",
					"Text",
					"->",
					"Nome da folha de estilo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto estiloFolha"
				]
			],
			"Summary": "O comando **WP Get style sheet** devolve o objeto de folha de estilo designado por *nomeFolhaEstilo*."
		},
		"WP Get style sheets": {
			"Syntax": "**WP Get style sheets** ( *wpDoc* ; *tipo* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de folha de estilo"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Coleção de objetos folha de estilo"
				]
			],
			"Summary": "O comando **WP Get style sheets** devolve uma coleção de todos os objetos de folha de estilo de *tipo* definido em *wpDoc*."
		},
		"WP Get subsection": {
			"Syntax": "**WP Get subsection** ( *targetObj* ) | (*wpSection* ; *subSectionType* ) -> Resultado",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range ou elemento"
				],
				[
					"wpSection",
					"Object",
					"->",
					"Seção 4D Write Pro"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Tipo de subseção (wk first page, wk left page, ou wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Subseção"
				]
			],
			"Summary": "O comando **WP Get subsection** devolve uma primeira subseção intersectada pela range ou elemento *targetObj*, ou à subseção especificada *subSectionType* da seção *wpSection*."
		},
		"WP Get text": {
			"Syntax": "**WP Get text** ( *objAlvo* {; *expressoes*} ) -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"expressoes",
					"Number",
					"->",
					"Instruções para avaliação de expressões"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto do objRange"
				]
			],
			"Summary": "O comando **WP Get text** recupera o conteúdo de texto de um documento 4D Write Pro dentro do *objRange* especificado."
		},
		"WP Get view properties": {
			"Syntax": "**WP Get view properties** ( * ; *wpArea* ) -> Resultado",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, wpArea é um nome de objeto formulário (string). Se omitido, wpArea é um campo objeto ou variável (documento)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Nome objeto formulário (se * for especificado) ou variável objeto ou campo 4D Write Pro (se * for omitido)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Propriedades vista atual"
				]
			],
			"Summary": "O comando **WP Get view properties** devolve as propriedades da vista atual para a área 4D Write Pro designada por *wpArea*."
		},
		"WP IMPORT STYLE SHEETS": {
			"Syntax": "**WP IMPORT STYLE SHEETS** ( *targetDoc* ; *sourceDoc* )",
			"Params": [
				[
					"targetDoc",
					"Object",
					"->",
					"Documento 4D Write Pro que vai receber as folhas de estilo"
				],
				[
					"sourceDoc",
					"Object",
					"->",
					"Documento 4D Write Pro do qual vai receber as folhas de estilo"
				]
			],
			"Summary": "O comando **WP IMPORT STYLE SHEETS** importa todas as folhas de estilo de *sourceDoc* em *targetDoc*."
		},
		"WP Insert table": {
			"Syntax": "**WP Insert table** ( *objFaixa* ; *modo* {; *atFaixa* {; *numCol* {; *numFilas*}}} ) -> Resultado",
			"Params": [
				[
					"objFaixa",
					"Object",
					"->",
					"Objeto Faixa de seleção"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo inserção"
				],
				[
					"atFaixa",
					"Integer",
					"->",
					"Modo de atualização da faixa"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de colunas a estabelecer na tabela"
				],
				[
					"numFilas",
					"Integer",
					"->",
					"Numero de filas a estabelecer na tabela"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto referência tabela"
				]
			],
			"Summary": "O comando **WP Insert table**insere uma nova tabela em *objRango* de acordo com o *modo* de inserçao especificado e retorna o novo objeto de tabela correspondente."
		},
		"WP Is font style supported": {
			"Syntax": "**WP Is font style supported**  ( *faixaObj* ; *wpEstiloFonte* ) -> Resultado",
			"Params": [
				[
					"faixaObj",
					"Object",
					"->",
					"Faixa do Objeto parse"
				],
				[
					"wpEstiloFonte",
					"Integer",
					"->",
					"Constante de Estilo de Fonte wk font negrito wk font itálico wk texto subscrito, wk texto estilo linha atravessada"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True se qualquer parte de faixaObj suporta wpEstiloFonte, se não False"
				]
			],
			"Summary": "O novo comando **WP Is font style supported**  devolve True se o estilo *estiloFonteWP* for suportado por alguma parte do texto em *faixaObj*."
		},
		"WP NEW BOOKMARK": {
			"Syntax": "**WP NEW BOOKMARK** ( *objFaixa* ; *nomeBookm* )",
			"Params": [
				[
					"objFaixa",
					"Object",
					"->",
					"faixa 4D Write Pro"
				],
				[
					"nomeBookm",
					"Text",
					"->",
					"Nome da Bookmark a criar"
				]
			],
			"Summary": "O comando **WP NEW BOOKMARK** \\[#/descv\\]cria uma nova bookmark ou marcador de página chamado *nomeBookm* baseado na *FaixaObj* 4D Write Pro na faixa do documento pai."
		},
		"WP New footer": {
			"Syntax": "**WP New footer** ( *wpSeção* ) -> Resultado",
			"Params": [
				[
					"wpSeção",
					"Object",
					"->",
					"Seção ou subseção 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Cabeçalho 4D Write Pro"
				]
			],
			"Summary": "O comando **WP New footer** cria e devolve um rodapé associado à seção ou subseção definida pelo paâmetro *wpSection*."
		},
		"WP New header": {
			"Syntax": "**WP New header** ( *wpSeção* ) -> Resultado",
			"Params": [
				[
					"wpSeção",
					"Object",
					"->",
					"Seção ou subseção 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Cabeçalho 4D Write Pro"
				]
			],
			"Summary": "O comando **WP New header** cria e devolve um cabeçalho associado à seção ou subseção definida pelo parâmetro *wpSection*."
		},
		"WP New style sheet": {
			"Syntax": "**WP New style sheet** ( *wpDoc* ; *tipoFolhaEstilo* ; *nomeFolhaEstilo* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"tipoFolhaEstilo",
					"Integer",
					"->",
					"Tipo de Folha de Estilo"
				],
				[
					"nomeFolhaEstilo",
					"Text",
					"->",
					"Nome da folha de estilo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto folha estilo"
				]
			],
			"Summary": "O comando **WP New style sheet** cria um novo objeto de folha de estilo (vazio) para o *wpDoc* designado."
		},
		"WP New subsection": {
			"Syntax": "**WP New subsection** ( *wpSeção* ; *subSeçãoTipo* ) -> Resultado",
			"Params": [
				[
					"wpSeção",
					"Object",
					"->",
					"seção 4D Write Pro"
				],
				[
					"subSeçãoTipo",
					"Integer",
					"->",
					"Tipo de subseção (wk first page, wk left page ou wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nova subseção"
				]
			],
			"Summary": "O comando **WP New subsection** cria e retorna uma nova subseção do tipo *subSeçãoTipo* na seção 4D Write Pro *wpSeção*."
		},
		"WP New text box": {
			"Syntax": "**WP New text box** ( *wpDoc* ; *pageNum* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"pageNum",
					"Number",
					"->",
					"Número de página onde ancorar a caixa de texto"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto caixa de texto"
				]
			],
			"Summary": "O comando **WP New text box** cria e retorna um novo objeto caixa de texto na página *pageNum* de *wpDoc*."
		},
		"WP New": {
			"Syntax": "**WP New** {( *fonte* {; *opção*} )} -> Resultado",
			"Params": [
				[
					"fonte",
					"Text, Blob, Object",
					"->",
					"Fonte HTML 4D ou Blob 4D Write"
				],
				[
					"opção",
					"Integer",
					"->",
					"Opção de importação para expressões HTML"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto 4D Write Pro"
				]
			],
			"Summary": "O comando **WP New** cria e devolve um objeto 4D Write Pro."
		},
		"WP Paragraph range": {
			"Syntax": "**WP Paragraph range** ( *faixaObj* ) -> Resultado",
			"Params": [
				[
					"faixaObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Faixa de objeto direcionando apenas parágrafos"
				]
			],
			"Summary": "O comando **WP Paragraph range** devolve uma faixa de objetos específica que se refere unicamente aos parágrafos contidos em *rfaixaObj* que foi passada como parâmetro."
		},
		"WP Picture range": {
			"Syntax": "**WP Picture range** ( *faixaObj* ) -> Resultado",
			"Params": [
				[
					"faixaObj",
					"Object",
					"->",
					"Faixa do Objeto (range) do qual pegar as imagens"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Faixa de objeto contendo apenas imagens"
				]
			],
			"Summary": "O comando **WP Picture range** devolve uma faixa de objeto específica que se refere unicamente as imagens contidas em *faixaObj* que foi passada como parâmetro."
		},
		"WP PRINT": {
			"Syntax": "**WP PRINT** ( *wpDoc* {; *modoImpr*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Nome do documento 4D Write Pro"
				],
				[
					"modoImpr",
					"Integer",
					"->",
					"Modo de impressão para o documento 4D Write Pro: 0 (normal) = modo 4D Write Pro, 1 = HTML WYSWYG"
				]
			],
			"Summary": "O comando **WP PRINT** lança uma tarefa de impressão para o documento 4D Write Pro especificado em *wpDoc* (ou agrega o documento ao trabalho de impressão atual se for chamado entre OPEN PRINTING JOB e CLOSE PRINTING JOB)."
		},
		"WP SELECT": {
			"Syntax": "**WP SELECT** ( {{* ;} *wpArea*;} {*wpArea*} {; *faixaInicio* ; *faixaFim*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, wpArea é um formulário nome objeto (string). Se omitido, wpArea é um campo objeto ou variável"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Nome de objeto formulário (se * for especificado) ou objeto variável ou campo 4D Write Pro (se * for omitido)"
				],
				[
					"wpArea",
					"Object",
					"->",
					"Nome de objeto de formulário (se * for especificado) ou 4D Write Pro variável objeto ou campo (se * for omitido)"
				],
				[
					"faixaInicio",
					"Integer",
					"->",
					"Início offset da faixa de texto"
				],
				[
					"faixaFim",
					"Integer",
					"->",
					"Final offset da faixa de texto"
				]
			],
			"Summary": "O novo comando **WP SELECT** cria uma nova seleção de texto na área 4D Write Pro *wpArea*, baseado na *faixaObj* de um nova faixa definida por *faixaInicio* e *faixaFinal*."
		},
		"WP Selection range": {
			"Syntax": "**WP Selection range** ( {* ;} *wpArea* ) -> Resultado",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, wpArea é um nome de objeto de formulário (string). Se omitido, wpArea é um campo de objeto ou variável"
				],
				[
					"wpArea",
					"Text",
					"->",
					"Nome de objeto de formulário (se * é especificado) ou variável de objeto 4D Write Pro ou campo (se * for omitido)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Faixa de objeto"
				]
			],
			"Summary": "O comando **WP Selection range** devolve um novo objeto faixa ou um objeto imagem baseado no conteúdo atualmente selecionado na área *wpArea* 4D Write Pro."
		},
		"WP SET DATA CONTEXT": {
			"Syntax": "**WP SET DATA CONTEXT** ( *wpDoc* ; *contextoData* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"contextoData",
					"Object",
					"->",
					"Data a ser colocado em contexto"
				]
			],
			"Summary": "O Comando **WP SET DATA CONTEXT** estabelece o objeto *contextData* como contexto de dados do documento *wpDoc* 4D Write Pro para o processo atual."
		},
		"WP SET FRAME": {
			"Syntax": "**WP SET FRAME** ( {* ;} *wpArea* ; *frameSelector* {; *idTextBox*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, wpArea é um nome de objeto de formulário (string). Se omitido, wpArea e um campo ou variável objeto"
				],
				[
					"wpArea",
					"Text",
					"->",
					"nome objeto Form (se * especificado) ou variável objeto 4D Write Pro ou campo (se * for omitido)"
				],
				[
					"frameSelector",
					"Integer",
					"->",
					"Frame/quadro onde o cursor é estabelecido"
				],
				[
					"idTextBox",
					"Text",
					"->",
					"id da caixa de texto onde o cursor deve ser estabelecido"
				]
			],
			"Summary": "O comando **WP SET FRAME** coloca o cursor no frame designado por *frameSelector* na área *wpArea* 4D Write Pro."
		},
		"WP SET LINK": {
			"Syntax": "**WP SET LINK** ( *objRange* ; *objLink* )",
			"Params": [
				[
					"objRange",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"objLink",
					"Object",
					"->",
					"Valor do hyperlink"
				]
			],
			"Summary": "**WP SET LINK** aplica uma referência de hiperlink ao *objRange*."
		},
		"WP SET TEXT": {
			"Syntax": "**WP SET TEXT** ( *wpRange* ; *novoTexto* ; *posiçaoTexto* {; *alcanceRange*} )",
			"Params": [
				[
					"wpRange",
					"Object",
					"->",
					"Objeto Range"
				],
				[
					"novoText",
					"Text",
					"->",
					"Texto a inserir"
				],
				[
					"posiçaoTexto",
					"Number",
					"->",
					"Inserir posição (substituir, antes, depois)"
				],
				[
					"alcanceRange",
					"Number",
					"->",
					"Inclui ou exclui o conteúdo inserido dentro da range"
				]
			],
			"Summary": "O comando **WP SET TEXT** insere o texto passado no parâmetro *novoTexto* como texto sem formato em in the *targetObj* em uma posição específica designada pelos parâmetros *wpRango* e *posiçãoTexto*."
		},
		"WP SET VIEW PROPERTIES": {
			"Syntax": "**WP SET VIEW PROPERTIES** ( {* ;} *wpArea* ; *wpViewProps* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Se especificado, wpArea é um nome de objeto formulário (string). Se omitido, wpArea é um campo objeto ou variável (documento)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Nome objeto formulário (se * for especificado) ou viarável ou campo objeto 4D Wriote Pro (se * for omitido)"
				],
				[
					"wpViewProps",
					"Object",
					"->",
					"Propriedades de vista a modificar"
				]
			],
			"Summary": "O comando **WP SET VIEW PROPERTIES** le permite configurar dinamicamente uma ou mais propriedades de vista da área 4D Write Pro *wpArea*."
		},
		"WP TABLE DELETE COLUMNS": {
			"Syntax": "**WP TABLE DELETE COLUMNS** ( *objTarget* ) | ( *refTabela* ; *numCol* {; *numColunas*} )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"refTabela",
					"Object",
					"->",
					"Referência da tabela"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de coluna"
				],
				[
					"numColunas",
					"Integer",
					"->",
					"número de colunas a eliminar (normal =1)"
				]
			],
			"Summary": "O comando **WP TABLE DELETE COLUMNS** elimina uma ou várias colunas de uma tabela 4D Write."
		},
		"WP TABLE DELETE ROWS": {
			"Syntax": "**WP TABLE DELETE ROWS** ( *objTarget* ) | ( *refTabela* ; *numLinha* {; *nbLinhas*} )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"refTabela",
					"Object",
					"->",
					"Referência de Tabela"
				],
				[
					"numLinha",
					"Integer",
					"->",
					"número índice Linhas"
				],
				[
					"nbLinhas",
					"Integer",
					"->",
					"Número linhas a apagar"
				]
			],
			"Summary": "O comando **WP TABLE DELETE ROWS** elimina uma ou várias linhas de uma tabela 4D Write Pro."
		},
		"WP Table get cells": {
			"Syntax": "**WP Table get cells** ( *objTarget* ) | ( *refTab* ; *inCol* ; *iniFila* {; *numCol*{; *numFilas*}} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range (seleção de elementos) ou elemento ou documento 4D Write Pro"
				],
				[
					"refTab",
					"Object",
					"->",
					"objeto referência de tabela"
				],
				[
					"inCol",
					"Integer",
					"->",
					"posição da primeira célula da coluna"
				],
				[
					"iniFila",
					"Integer",
					"->",
					"posição da primeira linha da coluna"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de colunas a obter"
				],
				[
					"numFilas",
					"Integer",
					"->",
					"Número de filas a obter"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nova faixa contendo células"
				]
			],
			"Summary": "O comando **WP Table get cells** \\[#descv\\]devolve um novo objeto de faixa de células que contenha a seleção de células *refTabela* definida por *colIni*, *filaIni*, *numCol* e *numFilas*."
		},
		"WP Table get columns": {
			"Syntax": "**WP Table get columns**  ( *objTarget* ) | ( *tabREf* ; *colInicio* {; *numCol*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"tabREf",
					"Object",
					"->",
					"objeto referencia tabela"
				],
				[
					"colInicio",
					"Integer",
					"->",
					"posição da primeira coluna"
				],
				[
					"numCol",
					"Integer",
					"->",
					"numero de colunas a obter"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nova faixa de tabela contendo colunas selecionadas"
				]
			],
			"Summary": "O comando **WP Table get columns** \\[#/descv\\]."
		},
		"WP Table get rows": {
			"Syntax": "**WP Table get rows** ( *objAlvo* ) | ( *refTab* ; *iniFila* {; *numFilas*} )  -> Resultado",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"intervalo ou elemento ou documento 4D Write Pro"
				],
				[
					"refTab",
					"Object",
					"->",
					"objeto referência de tabela"
				],
				[
					"iniFila",
					"Integer, Text",
					"->",
					"Posição início fila"
				],
				[
					"numFilas",
					"Integer",
					"->",
					"Número de filas a obter"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nova faixa de tabela contendo filas selecionadas"
				]
			],
			"Summary": "O comando **WP Table get rows** devolve um novo objeto de range de filas que contenha a seleção das filas de *objTarget* ou *refTabela* (definidas por *filaIni* e *numFilas*)\n\nPasse:\n\n* *objTarget* *:*  \n   * uma range ou  \n   * um elemento (fila / parágrafo / corpo / cabeçalho / rodapé / imagem inline / seção / subseção), ou  \n   * um documento 4D Write Pro\n\nSe *objTarget* não se cruza com uma tabela ou range de texto onde se pode recuperar uma seleção de filas, o comando devolve Null."
		},
		"WP Table insert columns": {
			"Syntax": "**WP Table insert columns** ( objTarget | {*refTabela* ; *numCol*} {; *numColunas*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range ou elemento ou documento 4D Write Pro"
				],
				[
					"refTabela",
					"Object",
					"->",
					"Referência de tabela"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número da coluna"
				],
				[
					"numColunas",
					"Integer",
					"->",
					"Número de colunas a inserir (valor predefinido = 1)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Range/seleção de colunas da tabela"
				]
			],
			"Summary": "O comando **WP Table insert columns** insere uma ou várias colunas em uma tabela 4D Write Pro."
		},
		"WP Table insert rows": {
			"Syntax": "**WP Table insert rows** ( objTarget | {*refTabela* ; *numLinha*} {; *numLinhasInserir*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Range ou elemento ou 4D Write Pro"
				],
				[
					"refTabela",
					"Object",
					"->",
					"Referência de Tabela"
				],
				[
					"numLinha",
					"Integer",
					"->",
					"Número índice da linha"
				],
				[
					"numLinhasInserir",
					"Integer",
					"->",
					"Número de linhas a inserir (valor predeterminado =1)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Range/seleção de linhas da tabela"
				]
			],
			"Summary": "O comando **WP Table insert rows** insere uma ou várias linhas em uma tabela 4D Write Pro."
		},
		"WP TABLE MERGE CELLS": {
			"Syntax": "**WP TABLE MERGE CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Intervalo ou elemento ou documento 4D Write Pro"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Referência de Tabela"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"Posição da primeira célula da coluna"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Posição da primeira linha da coluna"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"Número de colunas para fundir"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"Número de linhas a fundir"
				]
			],
			"Summary": "o comando **WP TABLE MERGE CELLS** fusiona a seleção de células em *targetObj* ou *tableRef* (definido por *startColumn*, *startRow*, *columnCount* e *rowCount*)."
		},
		"WP Table range": {
			"Syntax": "**WP Table range** ( *objFaixa* ) -> Resultado",
			"Params": [
				[
					"objFaixa",
					"Object",
					"->",
					"faixa de objetos ou elemento do documento 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de Faixa contendo apenas tabelas"
				]
			],
			"Summary": "**WP Table range** era chamada **WP Create table range** em versões anteriores de 4D Write Pro."
		},
		"WP TABLE SPLIT CELLS": {
			"Syntax": "**WP TABLE SPLIT CELLS** ( *objAlvo* ) | ( *TableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"objAlvo",
					"Object",
					"->",
					"Intervalo ou elemento ou documento 4D Write Pro"
				],
				[
					"TableRef",
					"Object",
					"->",
					"Referência de TAbela"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"Posição da primeira célula de coluna"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Posição da primeira linha da coluna"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"Número de colunas a dividir"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"Número de linhas a dividir"
				]
			],
			"Summary": "O comando **WP TABLE SPLIT CELLS** divide a seleção de intersecção de células em *targetObj* ou *tableRef* (definido por *startColumn*, *startRow*, *columnCount* e *rowCount*)."
		},
		"WP Text range": {
			"Syntax": "**WP Text range** ( *wpArea* ; *inicioFaixa* ; *fimFaixa* ) -> Resultado",
			"Params": [
				[
					"wpArea",
					"Object",
					"->",
					"Objeto variável ou campo 4D Write Pro"
				],
				[
					"inicioFaixa",
					"Integer",
					"->",
					"Início offset da faixa de texto"
				],
				[
					"fimFaixa",
					"Integer",
					"->",
					"Final offset da faixa texto"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Faixa de objeto"
				]
			],
			"Summary": "O comando **WP Text range** devolve um novo objeto de faixa de texto (objFaixa) que contem a seleção entre *faixaInicio* e *faixaFim* na área *wpArea* 4D Write Pro."
		},
		"WP USE PAGE SETUP": {
			"Syntax": "**WP USE PAGE SETUP** ( *docWP* )",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Nome do documento 4D Write Pro"
				]
			],
			"Summary": "O comando **WP USE PAGE SETUP** modifica as opções de impressão da página atual, baseado nos atributos de documento 4D Write Pro para o tamanho de página e a orientação."
		}
	},
	"WebFormItem": {
		"hide()": {
			"Syntax": "**.hide**()",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "oculta o component"
		},
		"show()": {
			"Syntax": "**.show**()",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "torna o componente visível"
		},
		"addCSSClass()": {
			"Syntax": "**.addCSSClass**(*className* : string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"Nome da classe CSS a ser adicionada ao componente"
				]
			],
			"Summary": "adiciona a classe especificada no *className* ao component"
		},
		"removeCSSClass()": {
			"Syntax": "**.removeCSSClass**(*className*: string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"Nome da classe CSS a ser removida do componente"
				]
			],
			"Summary": "remove a classe especificada em *className* do componente"
		}
	},
	"WebServer": {
		"accessKeyDefined": {
			"Syntax": "**.accessKeyDefined** : Boolean",
			"Summary": "true se uma chave de acesso estiver definida nas configurações do servidor Web"
		},
		"certificateFolder": {
			"Syntax": "**.certificateFolder** : Text",
			"Summary": "pasta onde os arquivos de certificados estão localizados"
		},
		"characterSet": {
			"Syntax": "**.characterSet** : Number<br/>**.characterSet** : Text",
			"Summary": "conjunto de caracteres que o servidor Web 4D deve usar para se comunicar com navegadores conectados à aplicação"
		},
		"cipherSuite": {
			"Syntax": "**.cipherSuite** : Text",
			"Summary": "lista de cifras usada para o protocolo seguro"
		},
		"CORSEnabled": {
			"Syntax": "**.CORSEnabled** : Boolean",
			"Summary": "estado do serviço CORS (*Cross-origin resource sharing*) para o servidor"
		},
		"CORSSettings": {
			"Syntax": "**.CORSSettings** : Collection",
			"Summary": "lista dos hosts e métodos permitidos para o serviço CORS"
		},
		"debugLog": {
			"Syntax": "**.debugLog** : Integer",
			"Summary": "do arquivo de registro de solicitação HTTP"
		},
		"defaultHomepage": {
			"Syntax": "**.defaultHomepage** : Text",
			"Summary": "nome da página inicial padrão"
		},
		"HSTSEnabled": {
			"Syntax": "**.HSTSEnabled** : Boolean",
			"Summary": "estado do HTTP Strict Transport Security (HSTS)"
		},
		"HSTSMaxAge": {
			"Syntax": "**.HSTSMaxAge** : Integer",
			"Summary": "tempo máximo (em segundos) que HSTS está ativo para cada nova conexão cliente"
		},
		"HTTPCompressionLevel": {
			"Syntax": "**.HTTPCompressionLevel** : Integer",
			"Summary": "nível de compressão para todas as trocas HTTP comprimidas para o servidor HTTP 4D (solicitações do cliente ou respostas do servidor)"
		},
		"HTTPCompressionThreshold": {
			"Syntax": "**.HTTPCompressionThreshold** : Integer",
			"Summary": "limite de tamanho das solicitações (bytes) para abaixo do qual as trocas não devem ser compactadas"
		},
		"HTTPEnabled": {
			"Syntax": "**.HTTPEnabled** : Boolean",
			"Summary": "HTTP"
		},
		"HTTPPort": {
			"Syntax": "**.HTTPPort** : Integer",
			"Summary": "número da porta IP de escuta para HTTP"
		},
		"HTTPTrace": {
			"Syntax": "**.HTTPTrace** : Boolean",
			"Summary": "ativação de `HTTP TRACE`"
		},
		"HTTPSEnabled": {
			"Syntax": "**.HTTPSEnabled** : Boolean",
			"Summary": "estado do protocolo HTTPS"
		},
		"HTTPSPort": {
			"Syntax": "**.HTTPSPort** : Integer",
			"Summary": "número da porta IP de escuta para HTTPS"
		},
		"inactiveProcessTimeout": {
			"Syntax": "**.inactiveProcessTimeout** : Integer",
			"Summary": "duração da vida (em minutos) dos processos de sessão legados inativos"
		},
		"inactiveSessionTimeout": {
			"Syntax": "**.inactiveSessionTimeout** : Integer",
			"Summary": "duração (em minutos) das sessões legadas inativas (duração definida no cookie)"
		},
		"IPAddressToListen": {
			"Syntax": "**.IPAddressToListen** : Text",
			"Summary": "Endereço IP no qual o Servidor Web 4D receberá solicitações HTTP"
		},
		"isRunning": {
			"Syntax": "**.isRunning** : Boolean",
			"Summary": "estado de execução do servidor web"
		},
		"keepSession": {
			"Syntax": "**.keepSession** : Boolean",
			"Summary": "`True` se as sessões legadas estiverem ativadas no servidor da Web; caso contrário, `False`"
		},
		"logRecording": {
			"Syntax": "**.logRecording** : Integer",
			"Summary": "modo de registro do log das solicitações (logweb.txt)"
		},
		"maxConcurrentProcesses": {
			"Syntax": "**.maxConcurrentProcesses** : Integer",
			"Summary": "número máximo de processos web simultâneos suportados pelo servidor"
		},
		"maxRequestSize": {
			"Syntax": "**.maxRequestSize** : Integer",
			"Summary": "tamanho máximo (em bytes) das solicitações HTTP de entrada (POST) que o servidor da Web tem permissão para processar"
		},
		"maxSessions": {
			"Syntax": "**.maxSessions** : Integer",
			"Summary": "número máximo de sessões legacy simultâneas"
		},
		"minTLSVersion": {
			"Syntax": "**.minTLSVersion** : Integer",
			"Summary": "versão mínima de TLS aceita para as conexões"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "nome da aplicação web server"
		},
		"openSSLVersion": {
			"Syntax": "**.openSSLVersion** : Text",
			"Summary": "versão da biblioteca OpenSSL usada"
		},
		"perfectForwardSecrecy": {
			"Syntax": "**.perfectForwardSecrecy** : Boolean",
			"Summary": "disponibilidade de PFS no servidor"
		},
		"rootFolder": {
			"Syntax": "**.rootFolder** : Text",
			"Summary": "caminho da pasta raiz do servidor web"
		},
		"scalableSession": {
			"Syntax": "**.scalableSession** : Boolean",
			"Summary": "`True` se sessões escalonáveis forem usadas no servidor da Web e `False` caso contrário"
		},
		"sessionCookieDomain": {
			"Syntax": "**.sessionCookieDomain** : Text",
			"Summary": "\"domain\" do cookie de sessão"
		},
		"sessionCookieName": {
			"Syntax": "**.sessionCookieName** : Text",
			"Summary": "nome do cookie usado para armazenar o ID da sessão"
		},
		"sessionCookiePath": {
			"Syntax": "**.sessionCookiePath** : Text",
			"Summary": "campo \"path\" do cookie de sessão"
		},
		"sessionCookieSameSite": {
			"Syntax": "**.sessionCookieSameSite** : Text",
			"Summary": "valor \"SameSite\" do cookie de sessão"
		},
		"sessionIPAddressValidation": {
			"Syntax": "**.sessionIPAddressValidation** : Boolean",
			"Summary": "validação de endereço IP para cookies de sessão"
		},
		"start()": {
			"Syntax": "**.start**() : Object<br/>**.start**( *settings* : Object ) : Object",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Configurações do servidor Web a definir no arranque"
				],
				[
					"Resultados",
					"Object",
					"<-",
					"Estado de arranque do servidor web"
				]
			],
			"Summary": "inicia o servidor da Web no qual ela é aplicada"
		},
		"stop()": {
			"Syntax": "**.stop()**",
			"Params": [
				[
					"",
					"",
					"",
					"Não exige nenhum parâmetro"
				]
			],
			"Summary": "interrompe o servidor web no qual ele é aplicado"
		}
	},
	"WebSocket": {
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "o tipo do conteúdo do corpo de resposta"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "o acessório que obtém o objeto `connectionHandler` usado para iniciar a conexão"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "o identificador único da conexão"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text, Blob, Object",
					"->",
					"Mensagem a enviar"
				]
			],
			"Summary": "envia *mensagem* ao servidor de WebSocket no tipo de dados definido (Texto, Blob, ou Objeto)"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "o status atual da conexão (pode ser \"Connecting\", \"Closing\", \"Closed\" ou \"Connected\")"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer { ; *reason* : Text } } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Código de estado que explica porque é que a ligação está a ser encerrada"
				],
				[
					"reason",
					"Text",
					"->",
					"O motivo pelo qual a ligação está a fechar"
				]
			],
			"Summary": "fecha a conexão de WebSocket, juntamente com parâmetros opcionais *code* e *reason*"
		},
		"url": {
			"Syntax": "**.url** : Text",
			"Summary": "a URL à qual o WebSocket se conectou"
		}
	},
	"WebSocketConnection": {
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "o acessório que obtém o objeto `connectionHandler` usado para iniciar a conexão"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "o identificador único da conexão"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text / Blob / Object",
					"->",
					"A mensagem a enviar"
				]
			],
			"Summary": "envia uma *message* para o cliente"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "o status da conexão (pode ser \"Closing\", \"Closed\" ou \"Connected\")"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer ; *message* : Text } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Código de erro enviado ao cliente (deve ser > 3000, caso contrário a mensagem não é enviada)"
				],
				[
					"message",
					"Text",
					"->",
					"Mensagem de erro enviada ao cliente"
				]
			],
			"Summary": "força a conexão a fechar"
		},
		"wss": {
			"Syntax": "**.wss** : 4D.WebSocketServer",
			"Summary": "o objeto pai `WebSocketServer` da conexão"
		}
	},
	"WebSocketServer": {
		"connections": {
			"Syntax": "**.connections** : Collection",
			"Summary": "todas as conexões atuais tratadas pelo servidor WebSocket"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "o tipo de dados recebidos ou enviados"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "o acessório que obtém o objeto `WSSHandler` usado para iniciar o servidor WebSocket"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "o padrão do caminho para acessar o servidor de WebSocket"
		},
		"terminate()": {
			"Syntax": "**.terminate**()<br/>**.terminate**( *timeout* : Integer )",
			"Params": [
				[
					"timeout",
					"Integer",
					"->",
					"Tempo de espera em segundos antes de terminar o servidor WebSocket"
				]
			],
			"Summary": "fecha o servidor de WebSocket"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "True se o servidor de WebSocket estiver fechado"
		}
	},
	"ZipArchive": {
		"root": {
			"Syntax": "**.root** : 4D.ZipFolder",
			"Summary": "uma pasta virtual fornecendo acesso ao conteúdo do arquivo ZIP"
		}
	},
	"ZipFile": {
		"_inheritedFrom_": "Document"
	},
	"ZipFolder": {
		"_inheritedFrom_": "Directory"
	}
}