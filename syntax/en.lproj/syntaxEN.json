{
	"4D": {
		"Blob": {
			"new()": {
				"Syntax": "**4D.Blob.new()** : 4D.Blob<br/>**4D.Blob.new**( *blobScal* : Blob ) : 4D.Blob<br/>**4D.Blob.new**( *blobObj* : 4D.Blob ) : 4D.Blob",
				"Params": [
					[
						"blob",
						"Blob or 4D.Blob",
						"->",
						"Blob to copy"
					],
					[
						"Result",
						"4D.Blob",
						"<-",
						"New 4D.Blob"
					]
				],
				"Summary": "creates a new `4D.Blob` object optionally encapsulating a copy of the data from another blob (scalar blob or `4D.Blob`)"
			}
		},
		"CryptoKey": {
			"new()": {
				"Syntax": "**4D.CryptoKey.new**( *settings* : Object ) : 4D.CryptoKey",
				"Params": [
					[
						"settings",
						"Object",
						"->",
						"Settings to generate or load a key pair"
					],
					[
						"Result",
						"4D.CryptoKey",
						"<-",
						"Object encapsulating an encryption key pair"
					]
				],
				"Summary": "creates a new `4D.CryptoKey` object encapsulating an encryption key pair"
			}
		},
		"File": {
			"new()": {
				"Syntax": "**4D.File.new** ( *path* : Text { ; *pathType* : Integer } ) : 4D.File<br/>**4D.File.new** ( *fileConstant* : Integer ) : 4D.File",
				"Summary": "creates and returns a new object of the `4D.File` type"
			}
		},
		"Folder": {
			"new()": {
				"Syntax": "**4D.Folder.new** ( *path* : Text { ; *pathType* : Integer }{ ; * } ) : 4D.Folder<br/>**4D.Folder.new** ( *folderConstant* : Integer { ; * } ) : 4D.Folder",
				"Summary": "creates and returns a new object of the `4D.Folder` type"
			}
		},
		"HTTPAgent": {
			"new()": {
				"Syntax": "**4D.HTTPAgent.new**( { *options* : Object } ) : 4D.HTTPAgent",
				"Params": [
					[
						"options",
						"Object",
						"->",
						"default options for the HTTPAgent"
					],
					[
						"Result",
						"4D.HTTPAgent",
						"<-",
						"New HTTPAgent object"
					]
				],
				"Summary": "creates a shareable HTTPAgent object with the defined *options*, and returns a `4D.HTTPAgent` object"
			}
		},
		"HTTPRequest": {
			"new()": {
				"Syntax": "**4D.HTTPRequest.new**( *url* : Text { ; *options* : Object } ) : 4D.HTTPRequest",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"URL to which to send the request"
					],
					[
						"options",
						"Object",
						"->",
						"Request configuration properties"
					],
					[
						"Result",
						"4D.HTTPRequest",
						"<-",
						"New HTTPRequest object"
					]
				],
				"Summary": "creates and sends a HTTP request to the HTTP server defined in *url* with the defined *options*, and returns a `4D.HTTPRequest` object"
			}
		},
		"IMAPTransporter": {
			"new()": {
				"Syntax": "**4D.IMAPTransporter.new**( *server* : Object ) : 4D.IMAPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Mail server information"
					],
					[
						"Result",
						"4D.IMAPTransporter",
						"<-",
						"IMAP transporter object"
					]
				],
				"Summary": "creates and returns a new object of the `4D.IMAPTransporter` type"
			}
		},
		"MailAttachment": {
			"new()": {
				"Syntax": "**4D.MailAttachment.new**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
				"Params": [
					[
						"file",
						"4D.File",
						"->",
						"Attachment file"
					],
					[
						"zipFile",
						"4D.ZipFile",
						"->",
						"Attachment Zipfile"
					],
					[
						"blob",
						"4D.Blob",
						"->",
						"BLOB containing the attachment"
					],
					[
						"path",
						"Text",
						"->",
						"Path of the attachment file"
					],
					[
						"name",
						"Text",
						"->",
						"Name + extension used by the mail client to designate the attachment"
					],
					[
						"cid",
						"Text",
						"->",
						"ID of attachment (HTML messages only), or \" \" if no cid is required"
					],
					[
						"type",
						"Text",
						"->",
						"Value of the content-type header"
					],
					[
						"disposition",
						"Text",
						"->",
						"Value of the content-disposition header: \"inline\" or \"attachment\"."
					],
					[
						"Result",
						"4D.MailAttachment",
						"<-",
						"Attachment object"
					]
				],
				"Summary": "creates and returns a new object of the `4D.MailAttachment` type"
			}
		},
		"POP3Transporter": {
			"new()": {
				"Syntax": "**4D.POP3Transporter.new**( *server* : Object ) : 4D.POP3Transporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Mail server information"
					],
					[
						"Result",
						"4D.POP3Transporter",
						"<-",
						"POP3 transporter object"
					]
				],
				"Summary": "creates and returns a new object of the `4D.POP3Transporter` type"
			}
		},
		"SMTPTransporter": {
			"new()": {
				"Syntax": "**4D.SMTPTransporter.new**( *server* : Object ) : 4D.SMTPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Mail server information"
					],
					[
						"Result",
						"4D.SMTPTransporter",
						"<-",
						"SMTP transporter object"
					]
				],
				"Summary": "creates and returns a new object of the `4D.SMTPTransporter` type"
			}
		},
		"SystemWorker": {
			"new()": {
				"Syntax": "**4D.SystemWorker.new** ( *commandLine* : Text { ; options : Object } ) : 4D.SystemWorker",
				"Params": [
					[
						"commandLine",
						"Text",
						"->",
						"Command line to execute"
					],
					[
						"options",
						"Object",
						"->",
						"Worker parameters"
					],
					[
						"result",
						"4D.SystemWorker",
						"<-",
						"New asynchronous System worker or null if process not started"
					]
				],
				"Summary": "creates and returns a `4D.SystemWorker` object that will execute the *commandLine* you passed as parameter to launch an external process"
			}
		},
		"TCPConnection": {
			"new()": {
				"Syntax": "**4D.TCPConnection.new**( *serverAddress* : Text ; *serverPort* : Number ; *options* : Object  ) : 4D.TCPConnection",
				"params": [
					[
						"serverAddress",
						"Text",
						"->",
						"Domain name or IP address of the server"
					],
					[
						"serverPort",
						"Integer",
						"->",
						"Port number of the server",
						""
					],
					[
						"options",
						"Object",
						"->",
						"Configuration options for the connection"
					],
					[
						"Result",
						"4D.TCPConnection",
						"<-",
						"New TCPConnection object"
					]
				],
				"Summary": "creates a new TCP connection to the specified *serverAddress* and *serverPort*, using the defined *options*, and returns a `4D.TCPConnection` object"
			}
		},
		"TCPListener": {
			"new()": {
				"Syntax": "**4D.TCPListener.new**( *port* : Number ; *options* : Object  ) : 4D.TCPListener",
				"params": [
					[
						"port",
						"Number",
						"->",
						"TCP port to listen"
					],
					[
						"options",
						"Object",
						"->",
						"Configuration options for the listener"
					],
					[
						"Result",
						"4D.TCPListener",
						"<-",
						"New TCPListener object"
					]
				],
				"Summary": "creates a new TCP server listening to the specified *port* using the defined *options*, and returns a `4D.TCPListener` object"
			}
		},
		"UDPSocket": {
			"new()": {
				"Syntax": "**4D.UDPSocket.new**() : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *options* : Object ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ; *options* : Object ) : 4D.UDPSocket",
				"params": [
					[
						"port",
						"Integer",
						"->",
						"Local port used for UDP socket (0 or omitted = find any unused port to use)"
					],
					[
						"options",
						"Object",
						"->",
						"Configuration options for the socket"
					],
					[
						"Result",
						"UDPSocket",
						"<-",
						"New UDPSocket object"
					]
				],
				"Summary": "creates a new UDP socket using the defined *options* (if any) on the specified *port* (if any) or on a random unused port, and returns a `4D.UDPSocket` object"
			}
		},
		"Vector": {
			"new()": {
				"Syntax": "**4D.Vector.new** ( *parameter* : Collection ) : 4D.Vector",
				"Params": [
					[
						"parameter",
						"Collection of reals",
						"->",
						"Collection of real numbers representing a vector"
					],
					[
						"Result",
						"4D.Vector",
						"<-",
						"New Vector object"
					]
				],
				"Summary": "creates and returns a new object of the `4D.Vector` type"
			}
		},
		"WebSocket": {
			"new()": {
				"Syntax": "**4D.WebSocket.new**( *url* : Text { ; *connectionHandler* : Object } ) : 4D.WebSocket",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"URL to which to connect"
					],
					[
						"connectionHandler",
						"Object",
						"->",
						"Object declaring WebSocket callbacks"
					],
					[
						"Result",
						"4D.WebSocket",
						"<-",
						"New WebSocket object"
					]
				],
				"Summary": "creates and returns a new `4D.WebSocket` object connected to the WebSocket server at the address you passed in *url*"
			}
		},
		"WebSocketServer": {
			"new()": {
				"Syntax": "**4D.WebSocketServer.new**( *WSSHandler* : Object { ; *options* : Object } ) : 4D.WebSocketServer",
				"Params": [
					[
						"WSSHandler",
						"Object",
						"->",
						"Object of the user class declaring the WebSocket Server callbacks"
					],
					[
						"options",
						"Object",
						"->",
						"WebSocket configuration parameters"
					],
					[
						"Result",
						"4D.WebSocketServer",
						"<-",
						"New WebSocketServer object"
					]
				],
				"Summary": "creates and starts a WebSocket server that will use the specified *WSSHandler* callbacks and (optionally) *options*, and returns a `4D.WebSocketServer` object"
			}
		}
	},
	"Blob": {
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "returns the size of a `4D.Blob`, expressed in bytes."
		},
		"slice()": {
			"Syntax": "**.slice()** : 4D.Blob<br/>**.slice**( *start* : Real ) : 4D.Blob<br/>**.slice**( *start* : Real; *end* : Real ) : 4D.Blob",
			"Params": [
				[
					"start",
					"Real",
					"->",
					"index of the first byte to include in the new `4D.Blob`."
				],
				[
					"end",
					"Real",
					"->",
					"index of the first byte that will not be included in the new `4D.Blob`"
				],
				[
					"Result",
					"4D.Blob",
					"<-",
					"New `4D.Blob`"
				]
			],
			"Summary": "creates and returns a `4D.Blob ` that references data from a subset of the blob on which it's called. The original blob is not altered."
		}
	},
	"Class": {
		"isSessionSingleton": {
			"Syntax": "**.isSessionSingleton** : Boolean",
			"Summary": "returns `true` if the user class has been defined as a session singleton class"
		},
		"isShared": {
			"Syntax": "**.isShared** : Boolean",
			"Summary": "returns `true` if the user class has been defined as shared class"
		},
		"isSingleton": {
			"Syntax": "**.isSingleton** : Boolean",
			"Summary": "returns `true` if the user class has been defined as a singleton class"
		},
		"me": {
			"Syntax": "**.me** : 4D.Object",
			"Summary": "returns the singleton instance of the `cs.className` singleton class"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "contains the name of the `4D.Class` object"
		},
		"new()": {
			"Syntax": "**.new**( { *...param* : any } ) : 4D.Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to the constructor function"
				],
				[
					"Result",
					"4D.Object",
					"<-",
					"New object of the class"
				]
			],
			"Summary": "creates and returns a `cs.className` object which is a new instance of the class on which it is called"
		},
		"superclass": {
			"Syntax": "**.superclass** : 4D.Class",
			"Summary": "returns the parent class of the class"
		}
	},
	"Collection": {
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : any",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Index of element to return"
				],
				[
					"Result",
					"any",
					"<-",
					"The element at that index"
				]
			],
			"Summary": "returns the item at position *index*, allowing for positive and negative integers"
		},
		"average()": {
			"Syntax": "**.average**( {*propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path to be used for calculation"
				],
				[
					"Result",
					"Real, Undefined",
					"<-",
					"Arithmetic mean (average) of collection values"
				]
			],
			"Summary": "returns the arithmetic mean (average) of defined values in the collection instance"
		},
		"clear()": {
			"Syntax": "**.clear()** : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Original collection with all elements removed"
				]
			],
			"Summary": "removes all elements from the collection instance and returns an empty collection"
		},
		"combine()": {
			"Syntax": "**.combine**( *col2* : Collection {; *index* : Integer } ) : Collection",
			"Params": [
				[
					"col2",
					"Collection",
					"->",
					"Collection to combine"
				],
				[
					"index",
					"Integer",
					"->",
					"Position to which insert elements to combine in collection (default=length+1)"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Original collection containing combined element(s)"
				]
			],
			"Summary": "inserts *col2* elements at the end or at the specified *index* position in the collection instance and returns the edited collection"
		},
		"concat()": {
			"Syntax": "**.concat**( *value* : any { *;...valueN* } ) : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Object, Collection, Date, Time, Boolean, Picture",
					"->",
					"Value(s) to concatenate. If *value* is a collection, all collection elements are added to the original collection"
				],
				[
					"Result",
					"Collection",
					"<-",
					"New collection with value(s) added to the original collection"
				]
			],
			"Summary": "returns a new collection containing the elements of the original collection with all elements of the *value* parameter added to the end"
		},
		"copy()": {
			"Syntax": "**.copy**() : Collection<br/>**.copy**( *option* : Integer ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithCol* : Collection ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithObj* : Object ) : Collection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck resolve pointers`: resolve pointers before copying,<br/>`ck shared`: return a shared collection"
				],
				[
					"groupWithCol",
					"Collection",
					"->",
					"Shared collection to be grouped with the resulting collection"
				],
				[
					"groupWithObj",
					"Object",
					"->",
					"Shared object to be grouped with the resulting collection"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Deep copy of the original collection"
				]
			],
			"Summary": "returns a deep copy of the collection instance"
		},
		"count()": {
			"Syntax": "**.count**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path to be used for calculation"
				],
				[
					"Result",
					"Real",
					"<-",
					"Number of elements in the collection"
				]
			],
			"Summary": "returns the number of non-null elements in the collection"
		},
		"countValues()": {
			"Syntax": "**.countValues**( *value* : any {; *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"value",
					"Text, Number, Boolean, Date, Object, Collection",
					"->",
					"Value to count"
				],
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path to be used for calculation"
				],
				[
					"Result",
					"Real",
					"<-",
					"Number of occurrences of the value"
				]
			],
			"Summary": "returns the number of times value is found in the collection"
		},
		"distinct()": {
			"Syntax": "**.distinct**( {*options* : Integer} ) : Collection<br/>**.distinct**( *propertyPath* : Text {; *options* : Integer } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Path of attribute whose distinct values you want to get"
				],
				[
					"options",
					"Integer",
					"->",
					"`ck diacritical`, `ck count values`"
				],
				[
					"Result",
					"Collection",
					"<-",
					"New collection with only distinct values"
				]
			],
			"Summary": "returns a collection containing only distinct (different) values from the original collection"
		},
		"equal()": {
			"Syntax": "**.equal**( *collection2* : Collection {; *option* : Integer } ) : Boolean",
			"Params": [
				[
					"collection2",
					"Collection",
					"->",
					"Collection to compare"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck diacritical`: diacritical evaluation (\"A\" # \"a\" for example)"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if collections are identical, false otherwise"
				]
			],
			"Summary": "recursively compares the contents of the collection and *collection2* (deep comparison)"
		},
		"every()": {
			"Syntax": "**.every**( { *startFrom* : Integer ; } *formula* : 4D.Function { ;*...param* : any } ) : Boolean<br/>**.every**( { *startFrom* : Integer ; } *methodName* : Text { ;*...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the test at"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to *formula* or *methodName*"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if all elements successfully passed the test"
				]
			],
			"Summary": "returns **true** if all elements in the collection successfully passed a test implemented in the provided *formula* object or *methodName* method"
		},
		"extract()": {
			"Syntax": "**.extract**( *propertyPath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *propertyPath* : Text ;  *targetPath* : Text  { ;...*propertyPathOrTargetPathN* : Text } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path whose values must be extracted to the new collection"
				],
				[
					"targetpath",
					"Text",
					"->",
					"Target property path or property name"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: include null properties in the returned collection (ignored by default). Parameter ignored if *targetPath* passed."
				],
				[
					"Result",
					"Collection",
					"<-",
					"New collection containing extracted values"
				]
			],
			"Summary": "creates and returns a new collection containing *propertyPath* values extracted from the original collection of objects"
		},
		"fill()": {
			"Syntax": "**.fill**( *value* : any ) : Collection<br/>**.fill**( *value* : any ;  *startFrom*  : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"value",
					"number, Text, Collection, Object, Date, Boolean",
					"->",
					"Filling value"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Start index (included)"
				],
				[
					"end",
					"Integer",
					"->",
					"End index (not included)"
				],
				[
					"Result",
					"collection",
					"<-",
					"Original collection with filled values"
				]
			],
			"Summary": "fills the collection with the specified *value*, optionally from *startFrom* index to *end* index, and returns the resulting collection"
		},
		"filter()": {
			"Syntax": "**.filter**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.filter**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to *formula* or *methodName*"
				],
				[
					"Result",
					"Collection",
					"<-",
					"New collection containing filtered elements (shallow copy)"
				]
			],
			"Summary": "returns a new collection containing all elements of the original collection for which the *formula* or *methodName* result is **true**"
		},
		"find()": {
			"Syntax": "**.find**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : any<br/>**.find**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : any",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the search at"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to *formula* or *methodName*"
				],
				[
					"Result",
					"any",
					"<-",
					"First value found, or Undefined if not found"
				]
			],
			"Summary": "returns the first value in the collection for which *formula* or *methodName* result, applied on each element, returns **true**"
		},
		"findIndex()": {
			"Syntax": "**.findIndex**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : Integer<br/>**.findIndex**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : Integer",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the search at"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to *formula* or *methodName*"
				],
				[
					"Result",
					"Integer",
					"<-",
					"Index of first value found, or -1 if not found"
				]
			],
			"Summary": "returns the index, in the collection, of the first value for which *formula* or *methodName*, applied on each element, returns **true**"
		},
		"first()": {
			"Syntax": "**.first**() : any",
			"Params": [
				[
					"Result",
					"any",
					"<-",
					"First element of collection"
				]
			],
			"Summary": "returns the first element of the collection"
		},
		"flat()": {
			"Syntax": "**.flat**( { *depth* : Integer } ) : Collection",
			"Params": [
				[
					"depth",
					"Integer",
					"->",
					"How deep a nested collection structure should be flattened. Default=1"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Flattened collection"
				]
			],
			"Summary": "creates a new collection with all sub-collection elements concatenated into it recursively up to the specified *depth*"
		},
		"flatMap()": {
			"Syntax": "**.flatMap**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.flatMap**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to *formula* or *methodName*"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of transformed values and flattened by a depth of 1"
				]
			],
			"Summary": "creates a new collection based upon the result of the call of the *formula* 4D function or *methodName* method on each element of the original collection and flattened by a depth of 1"
		},
		"includes()": {
			"Syntax": "**.includes**( *toSearch* : expression { ; *startFrom* : Integer } ) : Boolean",
			"Params": [
				[
					"toSearch",
					"expression",
					"->",
					"Expression to search in the collection"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the search at"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if *toSearch* is found in the collection"
				]
			],
			"Summary": "returns True if the *toSearch* expression is found among collection elements, otherwise False"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**(  *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"expression",
					"->",
					"Expression to search in the collection"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the search at"
				],
				[
					"Result",
					"Integer",
					"<-",
					"Index of the first occurrence of toSearch in the collection, -1 if not found"
				]
			],
			"Summary": "searches the *toSearch* expression among collection elements and returns the index of the first found occurrence, or -1 if it was not found"
		},
		"indices()": {
			"Syntax": "**.indices**(  *queryString* : Text { ; *...value* : any } ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Search criteria"
				],
				[
					"value",
					"any",
					"->",
					"Value(s) to compare when using placeholder(s)"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Element index(es) matching queryString in the collection"
				]
			],
			"Summary": "returns indexes, in the original collection, of object collection elements that match the *queryString* search conditions"
		},
		"insert()": {
			"Syntax": "**.insert**( *index* : Integer ; *element* : any ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Where to insert the element"
				],
				[
					"element",
					"any",
					"->",
					"Element to insert in the collection"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Original collection containing inserted element"
				]
			],
			"Summary": "inserts *element* at the specified *index* position in the collection instance and returns the edited collection"
		},
		"join()": {
			"Syntax": "**.join**( *delimiter* : Text { ; *option* : Integer } ) : Text",
			"Params": [
				[
					"delimiter",
					"Text",
					"->",
					"Separator to use between elements"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck ignore null or empty`: ignore null and empty strings in the result"
				],
				[
					"Result",
					"Text",
					"<-",
					"String containing all elements of the collection, separated by delimiter"
				]
			],
			"Summary": "converts all elements of the collection to strings and concatenates them using the specified *delimiter* string as separator"
		},
		"last()": {
			"Syntax": "**.last**() : any",
			"Params": [
				[
					"Result",
					"any",
					"<-",
					"Last element of collection"
				]
			],
			"Summary": "returns the last element of the collection"
		},
		"lastIndexOf()": {
			"Syntax": "**.lastIndexOf**( *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"expression",
					"->",
					"The element that is to be searched for within the collection"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the search at"
				],
				[
					"Result",
					"Integer",
					"<-",
					"Index of last occurrence of toSearch in the collection, -1 if not found"
				]
			],
			"Summary": "searches the *toSearch* expression among collection elements and returns the index of the last occurrence"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "returns the number of elements in the collection"
		},
		"map()": {
			"Syntax": "**.map**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.map**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to *formula* or *methodName*"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of transformed values"
				]
			],
			"Summary": "creates a new collection based upon the result of the call of the *formula* 4D function or *methodName* method on each element of the original collection"
		},
		"max()": {
			"Syntax": "**.max**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path to be used for evaluation"
				],
				[
					"Result",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"Maximum value in the collection"
				]
			],
			"Summary": "returns the element with the highest value in the collection"
		},
		"min()": {
			"Syntax": "**.min**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path to be used for evaluation"
				],
				[
					"Result",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"Minimum value in the collection"
				]
			],
			"Summary": "returns the element with the smallest value in the collection"
		},
		"multiSort()": {
			"Syntax": "**.multiSort**() : Collection<br/>**.multiSort**( *colsToSort* : Collection ) : Collection<br/>**.multiSort**( *formula* : 4D.Function ; *colsToSort* : Collection ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"colsToSort",
					"Collection",
					"->",
					"Collection of collections and/or objects with {`collection`:*colToSort*;`order`:`ck ascending` or `ck descending`} properties"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Original collection sorted"
				]
			],
			"Summary": "enables you to carry out a multi-level synchronized sort on a set of collections"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( ) : Collection<br/>**.orderBy**( *pathStrings* : Text ) : Collection<br/>**.orderBy**( *pathObjects* : Collection ) : Collection<br/>**.orderBy**( *ascOrDesc* : Integer ) : Collection",
			"Params": [
				[
					"pathStrings",
					"Text",
					"->",
					"Property path(s) on which to order the collection"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"Collection of criteria objects"
				],
				[
					"ascOrDesc",
					"Integer",
					"->",
					"`ck ascending` or `ck descending` (scalar values)"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Ordered copy of the collection (shallow copy)"
				]
			],
			"Summary": "returns a new collection containing all elements of the collection in the specified order"
		},
		"orderByMethod()": {
			"Syntax": "**.orderByMethod**( *formula* : 4D.Function { ; ...*extraParam* : expression } ) : Collection<br/>**.orderByMethod**( *methodName* : Text { ; ...*extraParam* : expression } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"extraParam",
					"any",
					"->",
					"Parameter(s) to pass"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Sorted copy of the collection (shallow copy)"
				]
			],
			"Summary": "returns a new collection containing all elements of the collection in the order defined through the *formula* 4D function or *methodName* method"
		},
		"pop()": {
			"Syntax": "**.pop()** : any",
			"Params": [
				[
					"Result",
					"any",
					"<-",
					"Last element of collection"
				]
			],
			"Summary": "removes the last element from the collection and returns it as the function result"
		},
		"push()": {
			"Syntax": "**.push**( *element* : any { ;...*elementN* } ) : Collection",
			"Params": [
				[
					"element",
					"any",
					"->",
					"Element(s) to add to the collection"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Original collection containing added elements"
				]
			],
			"Summary": "appends one or more *element*(s) to the end of the collection instance and returns the edited collection"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text ) : Collection<br/>**.query**( *queryString* : Text ; *...value* : any ) : Collection<br/>**.query**( *queryString* : Text ; *querySettings* : Object ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Search criteria"
				],
				[
					"value",
					"any",
					"->",
					"Value(s) to compare when using placeholder(s)"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Query options: parameters, attributes"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Element(s) matching queryString in the collection"
				]
			],
			"Summary": "returns all elements of a collection of objects that match the search conditions"
		},
		"reduce()": {
			"Syntax": "**.reduce**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduce**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"Value to use as the first argument to the first call of *formula* or *methodName*"
				],
				[
					"param",
					"expression",
					"->",
					"Parameter(s) to pass"
				],
				[
					"Result",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"Result of the accumulator value"
				]
			],
			"Summary": "applies the *formula* or *methodName* callback against an accumulator and each element in the collection (from left to right) to reduce it to a single value"
		},
		"reduceRight()": {
			"Syntax": "**.reduceRight**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduceRight**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"Value to use as the first argument to the first call of *formula* or *methodName*"
				],
				[
					"param",
					"expression",
					"->",
					"Parameter(s) to pass"
				],
				[
					"Result",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"Result of the accumulator value"
				]
			],
			"Summary": "applies the *formula* or *methodName* callback against an accumulator and each element in the collection (from right to left) to reduce it to a single value"
		},
		"remove()": {
			"Syntax": "**.remove**( *index* : Integer { ; *howMany* : Integer } ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Element at which to start removal"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Number of elements to remove, or 1 element if omitted"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Modified collection without removed element(s)"
				]
			],
			"Summary": "removes one or more element(s) from the specified *index* position in the collection and returns the edited collection"
		},
		"resize()": {
			"Syntax": "**.resize**( *size* : Integer { ; *defaultValue* : any } ) : Collection",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"New size of the collection"
				],
				[
					"defaultValue",
					"Number, Text, Object, Collection, Date, Boolean",
					"->",
					"Default value to fill new elements"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Resized original collection"
				]
			],
			"Summary": "sets the collection length to the specified new size and returns the resized collection"
		},
		"reverse()": {
			"Syntax": "**.reverse( )** : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Inverted copy of the collection"
				]
			],
			"Summary": "returns a deep copy of the collection with all its elements in reverse order"
		},
		"shift()": {
			"Syntax": "**.shift()** : any",
			"Params": [
				[
					"Result",
					"any",
					"<-",
					"First element of collection"
				]
			],
			"Summary": "removes the first element of the collection and returns it as the function result"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Start index (included)"
				],
				[
					"end",
					"Integer",
					"->",
					"End index (not included)"
				],
				[
					"Result",
					"Collection",
					"<-",
					"New collection containing sliced elements (shallow copy)"
				]
			],
			"Summary": "returns a portion of a collection into a new collection"
		},
		"some()": {
			"Syntax": "**.some**( { *startFrom* : Integer ; } *formula* : 4D.Function { ; *...param* : any } ) : Boolean<br/>**.some**( { *startFrom* : Integer ; } *methodName* : Text { ; *...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the test at"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if at least one element successfully passed the test"
				]
			],
			"Summary": "returns true if at least one element in the collection successfully passed a test implemented in the provided *formula* or *methodName* code"
		},
		"sort()": {
			"Syntax": "**.sort**() : Collection<br/>**.sort**( *formula* : 4D.Function { ; *...extraParam* : any } ) : Collection<br/>**.sort**( *methodName* : Text { ; *...extraParam* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Formula object"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of a method"
				],
				[
					"extraParam",
					"any",
					"->",
					"Parameter(s) for the method"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Original collection sorted"
				]
			],
			"Summary": "sorts the elements of the original collection and also returns the sorted collection"
		},
		"sum()": {
			"Syntax": "**.sum**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Object property path to be used for calculation"
				],
				[
					"Result",
					"Real",
					"<-",
					"Sum of collection values"
				]
			],
			"Summary": "returns the sum for all values in the collection instance"
		},
		"unshift()": {
			"Syntax": "**.unshift**( *value* : any { ;...*valueN* : any } ) : Collection",
			"Params": [
				[
					"value",
					"Text, Number, Object, Collection, Date",
					"->",
					"Value(s) to insert at the beginning of the collection"
				],
				[
					"Result",
					"Real",
					"<-",
					"Collection containing added element(s)"
				],
				[]
			],
			"Summary": "inserts the given *value*(s) at the beginning of the collection"
		}
	},
	"CryptoKey": {
		"curve": {
			"Syntax": "**.curve** : Text",
			"Summary": "normalised curve name of the key"
		},
		"decrypt()": {
			"Syntax": "**.decrypt**( *message* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Message string to be decoded using `options.encodingEncrypted` and decrypted.",
					""
				],
				[
					"options",
					"Object",
					"->",
					"Decoding options"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status"
				]
			],
			"Summary": "decrypts the *message* parameter using the **private** key"
		},
		"encrypt()": {
			"Syntax": "**.encrypt**( *message* : Text ; *options* : Object ) : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Message string to be encoded using `options.encodingDecrypted` and encrypted.",
					""
				],
				[
					"options",
					"Object",
					"->",
					"Encoding options"
				],
				[
					"Result",
					"Text",
					"<-",
					"Message encrypted and encoded using the `options.encodingEncrypted`"
				]
			],
			"Summary": "encrypts the *message* parameter using the **public** key"
		},
		"getPrivateKey()": {
			"Syntax": "**.getPrivateKey()** : Text",
			"Params": [
				[
					"Result",
					"Text",
					"<-",
					"Private key in PEM format"
				]
			],
			"Summary": "returns the private key of the `CryptoKey` object"
		},
		"getPublicKey()": {
			"Syntax": "**.getPublicKey**() : Text",
			"Params": [
				[
					"Result",
					"Text",
					"<-",
					"Public key in PEM format"
				]
			],
			"Summary": "returns the public key of the `CryptoKey` object"
		},
		"pem": {
			"Syntax": "**.pem** : Text",
			"Summary": "PEM definition of an encryption key to load. If the key is a private key, the RSA or ECDSA public key will be deduced from it."
		},
		"sign()": {
			"Syntax": ".**sign** (*message* : Text ; *options* : Object) : Text<br/>.**sign** (*message* : Blob ; *options* : Object) : Text",
			"Params": [
				[
					"message",
					"Text OR Blob",
					"->",
					"Message to sign",
					""
				],
				[
					"options",
					"Object",
					"->",
					"Signing options"
				],
				[
					"Result",
					"Text",
					"<-",
					"Signature in Base64 or Base64URL representation, depending on \"encoding\" option"
				]
			],
			"Summary": "signs the utf8 representation of a *message* string or Blob"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "the size of the key in bits"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "name of the key type - \"RSA\", \"ECDSA\", \"PEM\""
		},
		"verify()": {
			"Syntax": "**.verify**( *message* : Text ; *signature* : Text ; *options* : Object) : Object<br/>*.verify**( *message* : Blob ; *signature* : Text ; *options* : Object) : Object",
			"Params": [
				[
					"message",
					"Text OR Blob",
					"->",
					"Message that was used to produce the signature",
					""
				],
				[
					"signature",
					"Text",
					"->",
					"Signature to verify, in Base64 or Base64URL representation, depending on `options.encoding` value"
				],
				[
					"options",
					"Object",
					"->",
					"Signing options"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the verification"
				]
			],
			"Summary": "verifies the base64 signature against the utf8 representation of *message*"
		}
	},
	"DataClass": {
		"all()": {
			"Syntax": "**.all** ( { *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Build option: context"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"References on all entities related to the Dataclass"
				]
			],
			"Summary": "queries the datastore to find all the entities related to the dataclass and returns them as an entity selection"
		},
		"clearRemoteCache()": {
			"Syntax": "**.clearRemoteCache()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "empties the ORDA cache of a dataclass"
		},
		"fromCollection()": {
			"Syntax": "**.fromCollection**( *objectCol* : Collection { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"objectCol",
					"Collection",
					"->",
					"Collection of objects to be mapped with entities"
				],
				[
					"settings",
					"Object",
					"->",
					"Build option: context"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"Entity selection filled from the collection"
				]
			],
			"Summary": "updates or creates entities in the dataclass according to the *objectCol* collection of objects, and returns the corresponding entity selection"
		},
		"get()": {
			"Syntax": "**.get**( *primaryKey* : Integer { ; *settings* : Object } ) : 4D.Entity<br/>**.get**( *primaryKey* : Text { ; *settings* : Object } ) : 4D.Entity",
			"Params": [
				[
					"primaryKey",
					"Integer OR Text",
					"->",
					"Primary key value of the entity to retrieve"
				],
				[
					"settings",
					"Object",
					"->",
					"Build option: context"
				],
				[
					"Result",
					"4D.Entity",
					"<-",
					"Entity matching the designated primary key"
				]
			],
			"Summary": "queries the dataclass to retrieve the entity matching the *primaryKey* parameter"
		},
		"getCount()": {
			"Syntax": "**.getCount()** : Integer",
			"Params": [
				[
					"result",
					"Integer",
					"<-",
					"Number of entities in the dataclass"
				]
			],
			"Summary": "returns the number of entities in a dataclass"
		},
		"getDataStore()": {
			"Syntax": "**.getDataStore()** : cs.DataStore",
			"Params": [
				[
					"Result",
					"cs.DataStore",
					"<-",
					"Datastore of the dataclass"
				]
			],
			"Summary": "returns the datastore for the specified dataclass"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()** : Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Information on the dataclass"
				]
			],
			"Summary": "returns an object providing information about the dataclass"
		},
		"getRemoteCache()": {
			"Syntax": "**.getRemoteCache**() : Object",
			"Params": [
				[
					"result",
					"Object",
					"<-",
					"Object describing the contents of the ORDA cache for the dataclass."
				]
			],
			"Summary": "returns an object that holds the contents of the ORDA cache for a dataclass."
		},
		"new()": {
			"Syntax": "**.new()** : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"New entity matching the Dataclass"
				]
			],
			"Summary": "creates in memory and returns a new blank entity related to the Dataclass"
		},
		"newSelection()": {
			"Syntax": "**.newSelection**( { *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered`: creates an ordered entity selection,<br/>`dk non ordered`: creates an unordered entity selection (default if omitted)"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New blank entity selection related to the dataclass"
				]
			],
			"Summary": "creates a new, blank, non-shareable entity selection, related to the dataclass, in memory"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Search criteria as string"
				],
				[
					"formula",
					"Object",
					"->",
					"Search criteria as formula object"
				],
				[
					"value",
					"any",
					"->",
					"Value(s) to use for indexed placeholder(s)"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Query options: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection made up of entities from dataclass meeting the search criteria specified in *queryString* or *formula*"
				]
			],
			"Summary": "searches for entities that meet the search criteria specified in *queryString* or *formula* and (optionally) *value*(s)"
		},
		"setRemoteCacheSettings()": {
			"Syntax": "**.setRemoteCacheSettings**(*settings* : Object)",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Object that sets the timeout and maximum size of the ORDA cache for the dataclass."
				]
			],
			"Summary": "sets the timeout and maximum size of the ORDA cache for a dataclass."
		}
	},
	"DataStore": {
		"cancelTransaction()": {
			"Syntax": "**.cancelTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "cancels the transaction"
		},
		"clearAllRemoteContexts()": {
			"Syntax": "**.clearAllRemoteContexts()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "clears all the attributes for all the active contexts in the datastore"
		},
		"encryptionStatus()": {
			"Syntax": "**.encryptionStatus()**: Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Information about the encryption of the current datastore and of each table"
				]
			],
			"Summary": "returns an object providing the encryption status for the current data file"
		},
		"flushAndLock()": {
			"Syntax": "**.flushAndLock()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "flushes the cache of the local datastore and prevents other processes from performing write operations on the database"
		},
		"getAllRemoteContexts()": {
			"Syntax": "**.getAllRemoteContexts()** : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Collection of optimization context objects"
				]
			],
			"Summary": "returns a collection of objects containing information on all the active optimization contexts in the datastore"
		},
		"getGlobalStamp()": {
			"Syntax": "**.getGlobalStamp**() : Real",
			"Params": [
				[
					"Result",
					"Real",
					"<-",
					"Current value of the global modification stamp"
				]
			],
			"Summary": "returns the current value of the global modification stamp of the datastore"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()**: Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Datastore properties"
				]
			],
			"Summary": "returns an object providing information about the datastore"
		},
		"getRemoteContextInfo()": {
			"Syntax": "**.getRemoteContextInfo**(*contextName* : Text) : Object",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"Name of the context"
				],
				[
					"Result",
					"Object",
					"<-",
					"Description of the optimization context"
				]
			],
			"Summary": "returns an object that holds information on the *contextName* optimization context in the datastore."
		},
		"getRequestLog()": {
			"Syntax": "**.getRequestLog()** : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Collection of objects, where each object describes a request"
				]
			],
			"Summary": "returns the ORDA requests logged in memory on the client side"
		},
		"isAdminProtected()": {
			"Syntax": "**.isAdminProtected()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if the Data Explorer access is disabled, False if it is enabled (default)"
				]
			],
			"Summary": "returns `True` if Data Explorer access has been disabled for the working session"
		},
		"locked()": {
			"Syntax": "**.locked()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if locked"
				]
			],
			"Summary": "returns True if the local datastore is currently locked"
		},
		"makeSelectionsAlterable()": {
			"Syntax": "**.makeSelectionsAlterable()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "sets all entity selections as alterable by default in the current application datastores"
		},
		"provideDataKey()": {
			"Syntax": "**.provideDataKey**( *curPassPhrase* : Text ) : Object <br/>**.provideDataKey**( *curDataKey* : Object ) : Object",
			"Params": [
				[
					"curPassPhrase",
					"Text",
					"->",
					"Current encryption passphrase"
				],
				[
					"curDataKey",
					"Object",
					"->",
					"Current data encryption key"
				],
				[
					"Result",
					"Object",
					"<-",
					"Result of the encryption key matching"
				]
			],
			"Summary": "allows providing a data encryption key for the current data file of the datastore and detects if the key matches the encrypted data"
		},
		"setAdminProtection()": {
			"Syntax": "**.setAdminProtection**( *status* : Boolean )",
			"Params": [
				[
					"status",
					"Boolean",
					"->",
					"True to disable Data Explorer access to data on the `webAdmin` port, False (default) to grant access"
				]
			],
			"Summary": "allows disabling any data access on the web admin port, including for the Data Explorer in `WebAdmin` sessions"
		},
		"setGlobalStamp()": {
			"Syntax": "**.setGlobalStamp**( *newStamp* : Real)",
			"Params": [
				[
					"newStamp",
					"Real",
					"->",
					"New value of global modification stamp"
				]
			],
			"Summary": "sets *newStamp* as new value for the current global modification stamp for the datastore"
		},
		"setRemoteContextInfo()": {
			"Syntax": "**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer}})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer }})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"Name of the context"
				],
				[
					"dataClassName",
					"Text",
					"->",
					"Name of the dataclass"
				],
				[
					"dataClassObject",
					"4D.DataClass",
					"->",
					"dataclass object (e.g datastore.Employee)"
				],
				[
					"attributes",
					"Text",
					"->",
					"Attribute list separated by a comma"
				],
				[
					"attributesColl",
					"Collection",
					"->",
					"Collection of attribute names (text)"
				],
				[
					"contextType",
					"Text",
					"->",
					"If provided, value must be \"main\" or \"currentItem\""
				],
				[
					"pageLength",
					"Integer",
					"->",
					"Page length of the entity selection linked to the context (default is 80)"
				]
			],
			"Summary": "links the specified dataclass attributes to the *contextName* optimization context"
		},
		"startRequestLog()": {
			"Syntax": "**.startRequestLog**()<br/>**.startRequestLog**( *file* : 4D.File )<br/>**.startRequestLog**( *file* : 4D.File ; *options* : Integer )<br/>**.startRequestLog**( *reqNum* : Integer )",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"File object"
				],
				[
					"options",
					"Integer",
					"->",
					"Log response option (server only)"
				],
				[
					"reqNum",
					"Integer",
					"->",
					"Number of requests to keep in memory (client only)"
				]
			],
			"Summary": "starts the logging of ORDA requests on the client side or on the server side"
		},
		"startTransaction()": {
			"Syntax": "**.startTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "starts a transaction in the current process on the database matching the datastore to which it applies"
		},
		"stopRequestLog()": {
			"Syntax": "**.stopRequestLog()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "stops any logging of ORDA requests on the machine it is called (client or server)"
		},
		"unlock()": {
			"Syntax": "**.unlock()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "removes the current lock on write operations in the datastore, if it has been set in the same process"
		},
		"validateTransaction()": {
			"Syntax": "**.validateTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "accepts the transaction"
		}
	},
	"Directory": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "the creation date of the folder"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "the creation time of the folder"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "true if the folder exists on disk"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "returns the extension of the folder name (if any)"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "returns the full name of the folder, including its extension (if any)"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "true if the folder is set as \"hidden\" at the system level"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "always **false** for a `Folder` object"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "always **false** for a folder"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "always **true** for a folder"
		},
		"isPackage": {
			"Syntax": "**.isPackage** : Boolean",
			"Summary": "true if the folder is a package on macOS  (and exists on disk)"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "the date of the folder's last modification"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "the time of the folder's last modification"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "the name of the folder, without extension (if any)"
		},
		"original": {
			"Syntax": "**.original** : 4D.Folder",
			"Summary": "the same Folder object as the folder"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "the parent folder object of the folder"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "the POSIX path of the folder"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "the path of the folder expressed with the current platform syntax"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Destination folder"
				],
				[
					"newName",
					"Text",
					"->",
					"Name for the copy"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"`fk overwrite` to replace existing elements"
				],
				[
					"Result",
					"4D.Folder",
					"<-",
					"Copied file or folder"
				]
			],
			"Summary": "copies the `Folder` object into the specified *destinationFolder*"
		},
		"file()": {
			"Syntax": "**.file**( *path* : Text ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Relative POSIX file pathname"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"`File` object (null if invalid path)"
				]
			],
			"Summary": "a `File` object inside the `Folder` object and returns its reference"
		},
		"files()": {
			"Syntax": "**.files**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"File list options"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of children file objects"
				]
			],
			"Summary": "a collection of `File` objects contained in the folder"
		},
		"folder()": {
			"Syntax": "**.folder**( *path* : Text ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Relative POSIX file pathname"
				],
				[
					"Result",
					"4D.Folder",
					"<-",
					"Created folder object (null if invalid *path*)"
				]
			],
			"Summary": "creates a `Folder` object inside the parent `Folder` object and returns its reference"
		},
		"folders()": {
			"Syntax": "**.folders**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"Folder list options"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of children folder objects"
				]
			],
			"Summary": "returns a collection of `Folder` objects contained in the parent folder"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Side length for the returned picture (pixels)"
				],
				[
					"Result",
					"Picture",
					"<-",
					"Icon"
				]
			],
			"Summary": "returns the icon of the folder"
		}
	},
	"Document": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "the creation date of the file"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "the creation  time of the file"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "true if the file exists on disk"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "the extension of the file name (if any)"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "the full name of the file, including its extension (if any)"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "true if the file is set as \"hidden\" at the system level"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "true if the file is an alias, a shortcut, or a symbolic link"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "always true for a file"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "always false for a file"
		},
		"isWritable": {
			"Syntax": "**.isWritable** : Boolean",
			"Summary": "true if the file exists on disk and is writable"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "the date of the file's last modification"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "the time of the file's last modification"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "the name of the file without extension (if any)"
		},
		"original": {
			"Syntax": "**.original** : 4D.File<br/>**.original** : 4D.Folder",
			"Summary": "the target element for an alias, a shortcut, or a symbolic link file"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "the parent folder object of the file"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "the POSIX path of the file"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "the path of the file expressed with the current platform syntax"
		},
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "the size of the file expressed in bytes"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Destination folder"
				],
				[
					"newName",
					"Text",
					"->",
					"Name for the copy"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"`fk overwrite` to replace existing elements"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"Copied file"
				]
			],
			"Summary": "copies the `File` object into the specified *destinationFolder*"
		},
		"getContent()": {
			"Syntax": "**.getContent( )** : 4D.Blob",
			"Params": [
				[
					"Result",
					"4D.Blob",
					"<-",
					"File content"
				]
			],
			"Summary": "returns a `4D.Blob` object containing the entire content of a file"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Side length for the returned picture (pixels)"
				],
				[
					"Result",
					"Picture",
					"<-",
					"Icon"
				]
			],
			"Summary": "the icon of the file"
		},
		"getText()": {
			"Syntax": "**.getText**( { *charSetName* : Text { ; *breakMode* : Integer } } ) : Text<br/>**.getText**( { *charSetNum* : Integer { ; *breakMode* : Integer } } ) : Text",
			"Params": [
				[
					"charSetName",
					"Text",
					"->",
					"Name of character set"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"Number of character set"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Processing mode for line breaks"
				],
				[
					"Result",
					"Text",
					"<-",
					"Text from the document"
				]
			],
			"Summary": "returns the contents of the file as text"
		}
	},
	"Email": {
		"attachments": {
			"Syntax": "**.attachments** : Collection",
			"Summary": "collection of `4D.MailAttachment` object(s)"
		},
		"bcc": {
			"Syntax": "**.bcc** : Text<br/>**.bcc** : Object<br/>**.bcc** : Collection",
			"Summary": "Blind Carbon Copy (BCC) hidden email recipient addresse(s) of the email"
		},
		"bodyStructure": {
			"Syntax": "**.bodyStructure** : Object",
			"Summary": "*EmailBodyPart* object, i.e. the full MIME structure of the message body (optional)"
		},
		"bodyValues": {
			"Syntax": "**.bodyValues** : Object",
			"Summary": "*EmailBodyValue* object, containing an object for each \\<partID\\> of `bodyStructure` (optional)"
		},
		"cc": {
			"Syntax": "**.cc** : Text<br/>**.cc** : Object<br/>**.cc** : Collection",
			"Summary": "Carbon Copy (CC) additional email recipient addresse(s) of the email"
		},
		"comments": {
			"Syntax": "**.comments** : Text",
			"Summary": "additional comments header"
		},
		"from": {
			"Syntax": "**.from** : Text<br/>**.from** : Object<br/>**.from** : Collection",
			"Summary": "Originating address(es) of the email"
		},
		"headers": {
			"Syntax": "**.headers** : Collection",
			"Summary": "collection of `EmailHeader` objects, in the order they appear in the message"
		},
		"htmlBody": {
			"Syntax": "**.htmlBody** : Text",
			"Summary": "HTML representation of the email message (default charset is UTF-8) (optional, SMTP only)"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "unique ID from the IMAP server"
		},
		"inReplyTo": {
			"Syntax": "**.inReplyTo** : Text",
			"Summary": "message identifier(s) of the original message(s) to which the current message is a reply"
		},
		"keywords": {
			"Syntax": "**.keywords** : Object",
			"Summary": "set of keywords as an object, where each property name is a keyword and each value is true"
		},
		"messageId": {
			"Syntax": "**.messageId** : Text",
			"Summary": "message identifier header (\"message-id\")"
		},
		"receivedAt": {
			"Syntax": "**.receivedAt** : Text",
			"Summary": "timestamp of the email's arrival on the IMAP server in ISO 8601 UTC format (ex: 2020-09-13T16:11:53Z)"
		},
		"references": {
			"Syntax": "**.references** : Collection",
			"Summary": "Collection of all message-ids of messages in the preceding reply chain"
		},
		"replyTo": {
			"Syntax": "**.replyTo** : Text<br/>**.replyTo** : Object<br/>**.replyTo** : Collection",
			"Summary": "addresse(s) for responses"
		},
		"sendAt": {
			"Syntax": "**.sendAt** : Text",
			"Summary": "Email timestamp in ISO 8601 UTC format"
		},
		"sender": {
			"Syntax": "**.sender** : Text<br/>**.sender** : Object<br/>**.sender** : Collection",
			"Summary": "email source addresse(s) of the email"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "size (expressed in bytes) of the Email object returned by the IMAP server"
		},
		"subject": {
			"Syntax": "**.subject** : Text",
			"Summary": "description of topic"
		},
		"textBody": {
			"Syntax": "**.textBody** : Text",
			"Summary": "Plain text representation of the email message (default charset is UTF-8) (optional, SMTP only)"
		},
		"to": {
			"Syntax": "**.to** : Text<br/>**.to** : Object<br/>**.to** : Collection",
			"Summary": "primary recipient addresse(s) of the email"
		}
	},
	"Entity": {
		"clone()": {
			"Syntax": "**.clone()** : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"New entity referencing the record"
				]
			],
			"Summary": "creates in memory a new entity referencing the same record as the original entity"
		},
		"diff()": {
			"Syntax": "**.diff**( *entityToCompare* : 4D.Entity { ; *attributesToCompare* : Collection } ) : Collection",
			"Params": [
				[
					"entityToCompare",
					"4D.Entity",
					"->",
					"Entity to be compared with the original entity"
				],
				[
					"attributesToCompare",
					"Collection",
					"->",
					"Name of attributes to be compared"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Differences between the entities"
				]
			],
			"Summary": "compares the contents of two entities and returns their differences"
		},
		"drop()": {
			"Syntax": "**.drop**( {*mode* : Integer} ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk force drop if stamp changed`: Forces the drop even if the stamp has changed"
				],
				[
					"Result",
					"Object",
					"<-",
					"Result of drop operation"
				]
			],
			"Summary": "deletes the data contained in the entity from the datastore"
		},
		"first()": {
			"Syntax": "**.first()**: 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"Reference to first entity of an entity selection (Null if not found)"
				]
			],
			"Summary": "returns a reference to the entity in first position of the entity selection which the entity belongs to"
		},
		"fromObject()": {
			"Syntax": "**.fromObject**( *filler* : Object )",
			"Params": [
				[
					"filler",
					"Object",
					"->",
					"Object from which to fill the entity"
				]
			],
			"Summary": "fills an entity with the *filler* content"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass()** : 4D.DataClass",
			"Params": [
				[
					"Result",
					"4D.DataClass",
					"<-",
					"DataClass object to which the entity belongs"
				]
			],
			"Summary": "returns the dataclass of the entity"
		},
		"getKey()": {
			"Syntax": "**.getKey**( { *mode* : Integer } ) : any",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk key as string`: primary key is returned as a string, no matter the primary key type"
				],
				[
					"Result",
					"any",
					"<-",
					"Value of the primary key of the entity (Integer or Text)"
				]
			],
			"Summary": "returns the primary key value of the entity"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes()** : Text",
			"Params": [
				[
					"result",
					"Text",
					"<-",
					"Context attributes linked to the entity, separated by a comma"
				]
			],
			"Summary": "returns information about the optimization context used by the entity"
		},
		"getSelection()": {
			"Syntax": "**.getSelection()**: 4D.EntitySelection",
			"Params": [
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"Entity selection to which the entity belongs (Null if not found)"
				]
			],
			"Summary": "returns the entity selection which the entity belongs to"
		},
		"getStamp()": {
			"Syntax": "**.getStamp()** : Integer",
			"Params": [
				[
					"Result",
					"Integer",
					"<-",
					"Stamp of the entity (0 if entity has just been created)"
				]
			],
			"Summary": "returns the current value of the stamp of the entity"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**( { *entitySelection* : 4D.EntitySelection } ) : Integer",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Position of the entity is given according to this entity selection"
				],
				[
					"Result",
					"Integer",
					"<-",
					"Position of the entity in an entity selection"
				]
			],
			"Summary": "returns the position of the entity in an entity selection"
		},
		"isNew()": {
			"Syntax": "**.isNew()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if entity has just been created and not yet saved. Otherwise, False."
				]
			],
			"Summary": "returns True if the entity to which it is applied has just been created and has not yet been saved in the datastore"
		},
		"last()": {
			"Syntax": "**.last()** : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"Reference to last entity of an entity selection (Null if not found)"
				]
			],
			"Summary": "returns a reference to the entity in last position of the entity selection which the entity belongs to"
		},
		"lock()": {
			"Syntax": "**.lock**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk reload if stamp changed`: Reload before locking if stamp changed"
				],
				[
					"Result",
					"Object",
					"<-",
					"Result of lock operation"
				]
			],
			"Summary": "puts a pessimistic lock on the record referenced by the entity"
		},
		"next()": {
			"Syntax": "**.next()** : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"Reference to next entity in the entity selection (Null if not found)"
				]
			],
			"Summary": "returns a reference to the next entity in the entity selection which the entity belongs to"
		},
		"previous()": {
			"Syntax": "**.previous()**  : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"Reference to previous entity in the entity selection (Null if not found)"
				]
			],
			"Summary": "returns a reference to the previous entity in the entity selection which the entity belongs to"
		},
		"reload()": {
			"Syntax": "**.reload()** : Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Status object"
				]
			],
			"Summary": "reloads the content of the entity in memory"
		},
		"save()": {
			"Syntax": "**.save**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk auto merge`: Enables the automatic merge mode"
				],
				[
					"Result",
					"Object",
					"<-",
					"Result of save operation"
				]
			],
			"Summary": "saves the changes made to the entity"
		},
		"toObject()": {
			"Syntax": "**.toObject**() : Object<br/>**.toObject**( *filterString* : Text { ; *options* : Integer}  ) : Object<br/>**.toObject**( *filterCol* : Collection { ; *options* : Integer } ) : Object",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"Attribute(s) to extract (comma-separated string)"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"Collection of attribute(s) to extract"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: adds the \\_\\_KEY property;<br/>`dk with stamp`: adds the \\_STAMP property"
				],
				[
					"Result",
					"Object",
					"<-",
					"Object built from the entity"
				]
			],
			"Summary": "returns an object which has been built from the entity"
		},
		"touched()": {
			"Syntax": "**.touched()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if at least one entity attribute has been modified and not yet saved, else False"
				]
			],
			"Summary": "returns True if at least one entity attribute has been modified since the entity was loaded into memory or saved"
		},
		"touchedAttributes()": {
			"Syntax": "**.touchedAttributes()** : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Names of touched attributes, or empty collection"
				]
			],
			"Summary": "returns the names of the attributes that have been modified since the entity was loaded into memory"
		},
		"unlock()": {
			"Syntax": "**.unlock()** : Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Status object"
				]
			],
			"Summary": "removes the pessimistic lock on the record matching the entity"
		}
	},
	"EntitySelection": {
		"add()": {
			"Syntax": "**.add**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.add**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entity to be added to the entity selection"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection to be added to the original entity selection"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"Entity selection including the added *entity* or *entitySelection*"
				]
			],
			"Summary": "adds the specified *entity* or *entitySelection* to the original entity selection and returns the modified entity selection"
		},
		"and()": {
			"Syntax": "**.and**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.and**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entity to intersect with"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection to intersect with"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection with the result of intersection with logical AND operator"
				]
			],
			"Summary": "combines the entity selection with an *entity* or *entitySelection* parameter using the logical AND operator"
		},
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : 4D.Entity",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Index of entity to return"
				],
				[
					"Result",
					"4D.Entity",
					"<-",
					"The entity at that index"
				]
			],
			"Summary": "returns the entity at position *index*, allowing for positive and negative integer"
		},
		"average()": {
			"Syntax": "**.average**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Attribute path to be used for calculation"
				],
				[
					"Result",
					"Real",
					"<-",
					"Arithmetic mean (average) of entity attribute values (Undefined if empty entity selection)"
				]
			],
			"Summary": "returns the arithmetic mean (average) of all the non-null values of *attributePath* in the entity selection"
		},
		"clean()": {
			"Syntax": "**.clean**() : 4D.EntitySelection",
			"Params": [
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection without deleted entities"
				]
			],
			"Summary": "returns a new entity selection based upon the original entity selection but without deleted entities, if any"
		},
		"contains()": {
			"Syntax": "**.contains**( *entity* : 4D.Entity ) : Boolean",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entity to evaluate"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if the entity belongs to the entity selection, else False"
				]
			],
			"Summary": "returns true if entity reference belongs to the entity selection"
		},
		"count()": {
			"Syntax": "**.count**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Path of the attribute to be used for calculation"
				],
				[
					"Result",
					"Real",
					"<-",
					"Number of non null *attributePath* values in the entity selection"
				]
			],
			"Summary": "returns the number of entities in the entity selection with a non-null value in *attributePath*"
		},
		"copy()": {
			"Syntax": "**.copy**( { *option* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck shared`: return a shareable entity selection"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"Copy of the entity selection"
				]
			],
			"Summary": "returns a copy of the original entity selection"
		},
		"distinct()": {
			"Syntax": "**.distinct**( *attributePath* : Text { ; *options* : Integer } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Path of attribute whose distinct values you want to get"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk diacritical`, `dk count values`"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection with only distinct values"
				]
			],
			"Summary": "returns a collection containing only distinct (different) values from the *attributePath* in the entity selection"
		},
		"distinctPaths()": {
			"Syntax": "**.distinctPaths**( *attribute* : Text ) : Collection",
			"Params": [
				[
					"attribute",
					"Text",
					"->",
					"Object attribute name whose paths you want to get"
				],
				[
					"Result",
					"Collection",
					"<-",
					"New collection with distinct paths"
				]
			],
			"Summary": "returns a collection of distinct paths found in the indexed object *attribute* for the entity selection"
		},
		"drop()": {
			"Syntax": "**.drop**( { *mode* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk stop dropping on first error`: stops method execution on first non-droppable entity"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"Empty entity selection if successful, else entity selection containing non-droppable entity(ies)"
				]
			],
			"Summary": "removes the entities belonging to the entity selection from the table related to its dataclass within the datastore"
		},
		"extract()": {
			"Syntax": "**.extract**( *attributePath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *attributePath* { ; *targetPath* } { ; *...attributePathN* : Text ; *targetPathN* : Text } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Attribute path whose values must be extracted to the new collection"
				],
				[
					"targetPath",
					"Text",
					"->",
					"Target attribute path or attribute name"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: include null attributes in the returned collection (ignored by default)"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection containing extracted values"
				]
			],
			"Summary": "returns a collection containing *attributePath* values extracted from the entity selection"
		},
		"first()": {
			"Syntax": "**.first**() : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"Reference to the first entity of the entity selection (Null if selection is empty)"
				]
			],
			"Summary": "returns a reference to the entity in the first position of the entity selection"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass**() : 4D.DataClass",
			"Params": [
				[
					"Result",
					"4D.DataClass",
					"<-",
					"Dataclass object to which the entity selection belongs"
				]
			],
			"Summary": "returns the dataclass of the entity selection"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes**() : Text",
			"Params": [
				[
					"result",
					"Text",
					"<-",
					"Context attributes linked to the entity selection, separated by a comma"
				]
			],
			"Summary": "returns information about the optimization context used by the entity selection"
		},
		"isAlterable()": {
			"Syntax": "**.isAlterable**() : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if the entity selection is alterable, False otherwise"
				]
			],
			"Summary": "returns True if the entity selection is alterable"
		},
		"isOrdered()": {
			"Syntax": "**.isOrdered**() : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if the entity selection is ordered, False otherwise"
				]
			],
			"Summary": "returns True if the entity selection is ordered"
		},
		"last()": {
			"Syntax": "**.last**() : 4D.Entity",
			"Params": [
				[
					"Result",
					"4D.Entity",
					"<-",
					"Reference to the last entity of the entity selection (Null if empty entity selection)"
				]
			],
			"Summary": "returns a reference to the entity in last position of the entity selection"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "returns the number of entities in the entity selection"
		},
		"max()": {
			"Syntax": "**.max**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Path of the attribute to be used for calculation"
				],
				[
					"Result",
					"any",
					"<-",
					"Highest value of attribute"
				]
			],
			"Summary": "returns the highest (or maximum) value among all the values of *attributePath* in the entity selection"
		},
		"min()": {
			"Syntax": "**.min**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Path of the attribute to be used for calculation"
				],
				[
					"Result",
					"any",
					"<-",
					"Lowest value of attribute"
				]
			],
			"Summary": "returns the lowest (or minimum) value among all the values of attributePath in the entity selection"
		},
		"minus()": {
			"Syntax": "**.minus**( *entity* : 4D.Entity { ; *keepOrder* : Integer } ) : 4D.EntitySelection<br/>**.minus**( *entitySelection* : 4D.EntitySelection { ; *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entity to substract"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection to substract"
				],
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered` (integer) to keep the initial order in the resulting entity selection"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection or a new reference on the existing entity selection"
				]
			],
			"Summary": "excludes from the entity selection to which it is applied the *entity* or the entities of *entitySelection* and returns the resulting entity selection"
		},
		"or()": {
			"Syntax": "**.or**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.or**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entity to intersect with"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection to intersect with"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection or new reference to the original entity selection"
				]
			],
			"Summary": "combines the entity selection with the *entity* or *entitySelection* parameter using the logical (not exclusive) OR operator"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( *pathString* : Text ) : 4D.EntitySelection<br/>**.orderBy**( *pathObjects* : Collection ) : 4D.EntitySelection",
			"Params": [
				[
					"pathString",
					"Text",
					"->",
					"Attribute path(s) and sorting instruction(s) for the entity selection"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"Collection of criteria objects"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection in the specified order"
				]
			],
			"Summary": "returns a new ordered entity selection containing all entities of the entity selection in the order specified by *pathString* or *pathObjects* criteria"
		},
		"orderByFormula()": {
			"Syntax": "**.orderByFormula**( *formulaString* : Text { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection<br/>**.orderByFormula**( *formulaObj* : Object { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"Formula string"
				],
				[
					"formulaObj",
					"Object",
					"->",
					"Formula object"
				],
				[
					"sortOrder",
					"Integer",
					"->",
					"`dk ascending` (default) or `dk descending`"
				],
				[
					"settings",
					"Object",
					"->",
					"Parameter(s) for the formula"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New ordered entity selection"
				]
			],
			"Summary": "returns a new, ordered entity selection"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Search criteria as string"
				],
				[
					"formula",
					"Object",
					"->",
					"Search criteria as formula object"
				],
				[
					"value",
					"any",
					"->",
					"Value(s) to use for indexed placeholder(s)"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Query options: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection made up of entities from entity selection meeting the search criteria specified in *queryString* or *formula*"
				]
			],
			"Summary": "searches for entities that meet the search criteria specified in *queryString* or *formula* and (optionally) *value*(s) among all the entities in the entity selection"
		},
		"queryPath": {
			"Syntax": "**.queryPath** : Text",
			"Summary": "contains a detailed description of the query as it was actually performed by 4D"
		},
		"queryPlan": {
			"Syntax": "**.queryPlan** : Text",
			"Summary": "contains a detailed description of the query just before it is executed (i.e., the planned query)"
		},
		"refresh()": {
			"Syntax": "**.refresh**()",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "immediately \"invalidates\" the entity selection data in the local ORDA cache"
		},
		"selected()": {
			"Syntax": "**.selected**( *selectedEntities* : 4D.EntitySelection ) : Object",
			"Params": [
				[
					"selectedEntities",
					"4D.EntitySelection",
					"->",
					"Entity selection with entities for which to know the rank in the entity selection"
				],
				[
					"Result",
					"Object",
					"<-",
					"Range(s) of selected entities in entity selection"
				]
			],
			"Summary": "returns an object describing the position(s) of *selectedEntities* in the original entity selection"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Index to start the operation at (included)"
				],
				[
					"end",
					"Integer",
					"->",
					"End index (not included)"
				],
				[
					"Result",
					"4D.EntitySelection",
					"<-",
					"New entity selection containing sliced entities (shallow copy)"
				]
			],
			"Summary": "returns a portion of an entity selection into a new entity selection"
		},
		"sum()": {
			"Syntax": "**.sum**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Path of the attribute to be used for calculation"
				],
				[
					"Result",
					"Real",
					"<-",
					"Sum of entity selection values"
				]
			],
			"Summary": "returns the sum for all *attributePath* values in the entity selection"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**( { *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer } } ) : Collection<br/>**.toCollection**( *filterString* : Text {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection<br/>**.toCollection**( *filterCol* : Collection {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"String with entity attribute path(s) to extract"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"Collection of entity attribute path(s) to extract"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: adds the primary key<br/>`dk with stamp`: adds the stamp"
				],
				[
					"begin",
					"Integer",
					"->",
					"Designates the starting index"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Number of entities to extract"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of objects containing attributes and values of entity selection"
				]
			],
			"Summary": "creates and returns a collection where each element is an object containing a set of properties and values"
		}
	},
	"File": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if the file was created successfully, false otherwise"
				]
			],
			"Summary": "creates a file on disk according to the properties of the `File` object"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Destination folder for the alias or shortcut"
				],
				[
					"aliasName",
					"Text",
					"->",
					"Name of the alias or shortcut"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"Type of the alias link"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"Alias or shortcut file reference"
				]
			],
			"Summary": "creates an alias (macOS) or a shortcut (Windows)"
		},
		"delete()": {
			"Syntax": "**.delete**()",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "deletes the file"
		},
		"getAppInfo()": {
			"Syntax": "**.getAppInfo**() : Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Application file information"
				]
			],
			"Summary": "returns the contents of an application file information as an object"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Destination folder"
				],
				[
					"newName",
					"Text",
					"->",
					"Full name for the moved file"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"Moved file"
				]
			],
			"Summary": "moves or renames the `File` object into the specified *destinationFolder*"
		},
		"open()": {
			"Syntax": "**.open**( { *mode* : Text } ) : 4D.FileHandle<br/>**.open**( { *options* : Object } ) : 4D.FileHandle",
			"Params": [
				[
					"mode",
					"Text",
					"->",
					"Opening mode: \"read\", \"write\", \"append\""
				],
				[
					"options",
					"Object",
					"->",
					"Opening options"
				],
				[
					"Result",
					"4D.FileHandle",
					"<-",
					"New File handle object"
				]
			],
			"Summary": "creates and returns a new 4D.FileHandle object on the file, in the specified *mode* or with the specified *options*"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.File",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"New full name for the file"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"Renamed file"
				]
			],
			"Summary": "renames the file with the name you passed in *newName* and returns the renamed `File` object"
		},
		"setAppInfo()": {
			"Syntax": "**.setAppInfo**( *info* : Object )",
			"Params": [
				[
					"info",
					"Object",
					"->",
					"Properties to write in an application file information"
				]
			],
			"Summary": "writes the *info* properties as information contents of an application file"
		},
		"setContent()": {
			"Syntax": "**.setContent** ( *content* : Blob )",
			"Params": [
				[
					"content",
					"BLOB",
					"->",
					"New contents for the file"
				]
			],
			"Summary": "rewrites the entire content of the file using the data stored in the *content* BLOB"
		},
		"setText()": {
			"Syntax": "**.setText** ( *text* : Text {; *charSetName* : Text { ; *breakMode* : Integer } } )<br/>**.setText** ( *text* : Text {; *charSetNum* : Integer { ; *breakMode* : Integer } } )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Text to store in the file"
				],
				[
					"charSetName",
					"Text",
					"->",
					"Name of character set"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"Number of character set"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Processing mode for line breaks"
				]
			],
			"Summary": "writes *text* as the new contents of the file"
		},
		"_inheritedFrom_": "Document"
	},
	"FileHandle": {
		"breakModeRead": {
			"Syntax": "**.breakModeRead** : Text",
			"Summary": "the processing mode for line breaks used when reading the file"
		},
		"breakModeWrite": {
			"Syntax": "**.breakModeWrite** : Text",
			"Summary": "the processing mode for line breaks used when writing to the file"
		},
		"charset": {
			"Syntax": "**.charset** : Text",
			"Summary": "the charset used when reading from or writing to the file"
		},
		"eof": {
			"Syntax": "**.eof** : Boolean",
			"Summary": "True is the `offset` has reached the end of the file, and False otherwise"
		},
		"file": {
			"Syntax": "**.file** : 4D.File",
			"Summary": "the 4D.File object on which the handle has been created"
		},
		"getSize()": {
			"Syntax": "**.getSize()** : Real",
			"Params": [
				[
					"Result",
					"Real",
					"<-",
					"Size of the document in bytes"
				]
			],
			"Summary": "returns the current size of the document, expressed in bytes"
		},
		"mode": {
			"Syntax": "**.mode** : Text",
			"Summary": "the mode in which the file handle was created: \"read\", \"write\", or \"append\""
		},
		"offset": {
			"Syntax": "**.offset** : Real",
			"Summary": "the current offset of the data stream (position inside the document)"
		},
		"readBlob()": {
			"Syntax": "**.readBlob**( *bytes* : Real ) : 4D.Blob",
			"Params": [
				[
					"bytes",
					"Real",
					"->",
					"Number of bytes to be read"
				],
				[
					"Result",
					"4D.Blob",
					"<-",
					"Bytes read from the file"
				]
			],
			"Summary": "returns a blob a *bytes* size from the file, starting from the current position"
		},
		"readLine()": {
			"Syntax": "**.readLine()** : Text",
			"Params": [
				[
					"Result",
					"Text",
					"<-",
					"Line of text"
				]
			],
			"Summary": "returns a line of text from the current position until an end-of-line delimiter is encountered or the end of the document is reached"
		},
		"readText()": {
			"Syntax": "**.readText**( { *stopChar* : Text } ) : Text",
			"Params": [
				[
					"stopChar",
					"Text",
					"->",
					"Character(s) at which to stop reading"
				],
				[
					"Result",
					"Text",
					"<-",
					"Text from the file"
				]
			],
			"Summary": "returns text from the file, starting from the current position until the first *stopChar* string is encountered (if passed) or the end of file is reached"
		},
		"setSize()": {
			"Syntax": "**.setSize**( *size* : Real )",
			"Params": [
				[
					"size",
					"Real",
					"->",
					"New size of the document in bytes"
				]
			],
			"Summary": "sets a new *size* in bytes for the document"
		},
		"writeBlob()": {
			"Syntax": "**.writeBlob**( *blob* : 4D.Blob )",
			"Params": [
				[
					"blob",
					"4D.Blob",
					"->",
					"Blob to write in the file"
				]
			],
			"Summary": "writes *blob* into the file, starting from the current position"
		},
		"writeLine()": {
			"Syntax": "**.writeLine**( *lineOfText* : Text )",
			"Params": [
				[
					"lineOfText",
					"Text",
					"->",
					"Text to write"
				]
			],
			"Summary": "writes *lineOfText* content at the current position and inserts an end-of-line delimiter"
		},
		"writeText()": {
			"Syntax": "**.writeText**( *textToWrite* : Text )",
			"Params": [
				[
					"textToWrite",
					"Text",
					"->",
					"Text to write"
				]
			],
			"Summary": "writes *textToWrite* content at the current position and does not insert a final end-of-line delimiter"
		}
	},
	"Folder": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if the folder was created successfully, false otherwise"
				]
			],
			"Summary": "creates a folder on disk according to the properties of the `Folder` object"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Destination folder for the alias or shortcut"
				],
				[
					"aliasName",
					"Text",
					"->",
					"Name of the alias or shortcut"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"Type of the alias link"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"Alias or shortcut reference"
				]
			],
			"Summary": "creates an alias (macOS) or a shortcut (Windows)"
		},
		"delete()": {
			"Syntax": "**.delete**( { *option* : Integer } )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Folder deletion option"
				]
			],
			"Summary": "deletes the folder"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Destination folder"
				],
				[
					"newName",
					"Text",
					"->",
					"Full name for the moved folder"
				],
				[
					"Result",
					"4D.Folder",
					"<-",
					"Moved folder"
				]
			],
			"Summary": "moves or renames the `Folder` object (source folder) into the specified *destinationFolder*"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.Folder",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"New full name for the folder"
				],
				[
					"Result",
					"4D.Folder",
					"<-",
					"Renamed folder"
				]
			],
			"Summary": "renames the folder with the name you passed in *newName* and returns the renamed `Folder` object"
		},
		"_inheritedFrom_": "Directory"
	},
	"Function": {
		"apply()": {
			"Syntax": "**.apply**() : any<br/>**.apply**( *thisObj* : Object { ; *formulaParams* : Collection } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"Object to be returned by the This command in the formula"
				],
				[
					"formulaParams",
					"Collection",
					"->",
					"Collection of values to be passed as $1...$n when `formula` is executed"
				],
				[
					"Result",
					"any",
					"<-",
					"Value from formula execution"
				]
			],
			"Summary": "executes the `formula` object to which it is applied and returns the resulting value"
		},
		"call()": {
			"Syntax": "**.call**() : any<br/>**.call**( *thisObj* : Object { ; ...*params* : any } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"Object to be returned by the This command in the formula"
				],
				[
					"params",
					"any",
					"->",
					"Value(s) to be passed as $1...$n when formula is executed"
				],
				[
					"Result",
					"any",
					"<-",
					"Value from formula execution"
				]
			],
			"Summary": "executes the `formula` object to which it is applied and returns the resulting value"
		},
		"source": {
			"Syntax": "**.source** : Text",
			"Summary": "contains the source expression of the `formula` as text"
		}
	},
	"HTTPAgent": {
		"params": {
			"Syntax": "**options** : Object",
			"Summary": "the current used options of the HTTPAgent"
		},
		"requestsCount": {
			"Syntax": "**requestsCount** : Integer",
			"Summary": "the number of requests currently handled by the HTTPAgent"
		},
		"freeSocketsCount": {
			"Syntax": "**freeSocketsCount** : Integer",
			"Summary": "the number of free sockets from `maxSockets` associated with the HTTPAgent"
		}
	},
	"HTTPRequest": {
		"agent": {
			"Syntax": "**agent** : 4D.HTTPAgent",
			"Summary": "the `agent`object passed in `options` or the global agent object if it was omitted"
		},
		"dataType": {
			"Syntax": "**dataType** : Text",
			"Summary": "the `dataType` passed in the `options` object when calling new(), \"auto\" if it was omitted"
		},
		"encoding": {
			"Syntax": "**encoding** : Text",
			"Summary": "the `encoding` passed in the `options` object when calling new(), \"UTF-8\" if it was omitted"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "the collection of all the errors if at least one error has been triggered"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "the `headers` passed in the `options` object when calling new()"
		},
		"method": {
			"Syntax": "**method** : Text",
			"Summary": "the `method` passed in the `options` object when calling new()"
		},
		"protocol": {
			"Syntax": "**protocol** : Text",
			"Summary": "the `protocol` passed in the `options` object when calling new()"
		},
		"response": {
			"Syntax": "**response** : Object",
			"Summary": "the response to the request if it has received at least the status code, undefined otherwise"
		},
		"returnResponseBody": {
			"Syntax": "**returnResponseBody** : Boolean",
			"Summary": "the `returnResponseBody` passed in the `options` object when calling new()"
		},
		"terminate()": {
			"Syntax": "**.terminate()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "aborts the HTTP request"
		},
		"terminated": {
			"Syntax": "**terminated** : Boolean",
			"Summary": "True if the request is terminated (after the call to `onTerminate`), false otherwise"
		},
		"timeout": {
			"Syntax": "**timeout** : Real",
			"Summary": "the `timeout` passed in the `options` object when calling new()"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "the URL of the HTTP request"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : 4D.HTTPRequest",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Maximum wait time in seconds"
				],
				[
					"Result",
					"4D.HTTPRequest",
					"<-",
					"HTTPRequest object"
				]
			],
			"Summary": "waits waits for a response from the server or until the specified `timeout` is reached"
		}
	},
	"IMAPTransporter": {
		"addFlags()": {
			"Syntax": "**.addFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Longint  ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"Collection of strings: Message unique IDs (text)<br/>Text: Unique ID of a message<br/>Longint (IMAP all): All messages in the selected mailbox"
				],
				[
					"keywords",
					"Object",
					"->",
					"Keyword flags to add"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the addFlags operation"
				]
			],
			"Summary": "adds flags to the `msgIDs` for the specified `keywords`"
		},
		"append()": {
			"Syntax": "**.append**( *mailObj* : Object ; *destinationBox* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"mailObj",
					"Object",
					"->",
					"Email object"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Mailbox to receive Email object"
				],
				[
					"options",
					"Object",
					"->",
					"Object containing charset info"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the append operation"
				]
			],
			"Summary": "appends a `mailObj` to the `destinationBox`"
		},
		"checkConnectionDelay": {
			"Syntax": "**.checkConnectionDelay** : Integer",
			"Summary": "the maximum time (in seconds) allowed prior to checking the connection to the server"
		},
		"copy()": {
			"Syntax": "**.copy**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.copy**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Collection of message unique IDs (strings)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: All messages in the selected mailbox"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Mailbox to receive copied messages"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the copy operation"
				]
			],
			"Summary": "copies the messages defined by *msgsIDs* or *allMsgs* to the *destinationBox* on the IMAP server"
		},
		"createBox()": {
			"Syntax": "**.createBox**( *name* :  Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of the new mailbox"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the mailbox creation operation"
				]
			],
			"Summary": "creates a mailbox with the given `name`"
		},
		"delete()": {
			"Syntax": "**.delete**( *msgsIDs* : Collection ) : Object<br/>**.delete**( *allMsgs* : Integer ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Collection of message unique IDs (strings)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: All messages in the selected mailbox"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the delete operation"
				]
			],
			"Summary": "sets the \"deleted\" flag for the messages defined in `msgsIDs` or `allMsgs`"
		},
		"deleteBox()": {
			"Syntax": "**.deleteBox**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of the mailbox to delete"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the mailbox deletion operation"
				]
			],
			"Summary": "permanently removes the mailbox with the given `name` from the IMAP server"
		},
		"expunge()": {
			"Syntax": "**.expunge()** : Object",
			"Summary": "removes all messages with the \"deleted\" flag from the IMAP mail server."
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo**( { *name* : Text }) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of the mailbox"
				],
				[
					"Result",
					"Object",
					"<-",
					"boxInfo object"
				]
			],
			"Summary": "returns a `boxInfo` object corresponding to the current maibox, or the mailbox *name*"
		},
		"getBoxList()": {
			"Syntax": "**.getBoxList**( { *parameters* : Object } ) : Collection",
			"Params": [
				[
					"parameters",
					"Object",
					"->",
					"Parameter object"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of mailbox objects"
				]
			],
			"Summary": "returns a collection of mailboxes describing all of the available mailboxes"
		},
		"getDelimiter()": {
			"Syntax": "**.getDelimiter()** : Text",
			"Params": [
				[
					"Result",
					"Text",
					"<-",
					"Hierarchy delimiter character"
				]
			],
			"Summary": "returns the character used to delimit levels of hierarchy in the mailbox name"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber*: Integer { ; *options* : Object } ) : Object<br/>**.getMail**( *msgID*: Text { ; *options* : Object } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Sequence number of the message"
				],
				[
					"msgID",
					"Text",
					"->",
					"Unique ID of the message"
				],
				[
					"options",
					"Object",
					"->",
					"Message handling instructions"
				],
				[
					"Result",
					"Object",
					"<-",
					"Email object"
				]
			],
			"Summary": "returns the `Email` object corresponding to the *msgNumber* or *msgID* in the mailbox designated by the `IMAP_transporter`"
		},
		"getMails()": {
			"Syntax": "**.getMails**( *ids* : Collection { ; *options* : Object } ) : Object<br/>**.getMails**( *startMsg* : Integer ; *endMsg* : Integer { ; *options* : Object } ) : Object",
			"Params": [
				[
					"ids",
					"Collection",
					"->",
					"Collection of message ID"
				],
				[
					"startMsg",
					"Integer",
					"->",
					"Sequence number of the first message"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"Sequence number of the last message"
				],
				[
					"options",
					"Object",
					"->",
					"Message handling instructions"
				],
				[
					"Result",
					"Object",
					"<-",
					"Object containing:<br/><ul><li>a collection of Email objects and</li><li>a collection of IDs or numbers for missing messages, if any</li></ul>"
				]
			],
			"Summary": "returns an object containing a collection of `Email` objects"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer { ; *updateSeen* : Boolean } ) : Blob<br/>**.getMIMEAsBlob**( *msgID* : Text { ; *updateSeen* : Boolean } ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Sequence number of the message"
				],
				[
					"msgID",
					"Text",
					"->",
					"Unique ID of the message"
				],
				[
					"updateSeen",
					"Boolean",
					"->",
					"If True, the message is marked \"seen\" in the mailbox. If False the message is left untouched."
				],
				[
					"Result",
					"BLOB",
					"<-",
					"Blob of the MIME string returned from the mail server"
				]
			],
			"Summary": "returns a BLOB containing the MIME contents for the message corresponding to the *msgNumber* or *msgID* in the mailbox designated by the `IMAP_transporter`"
		},
		"move()": {
			"Syntax": "**.move**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.move**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Collection of message unique IDs (strings)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: All messages in the selected mailbox"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Mailbox to receive moved messages"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the move operation"
				]
			],
			"Summary": "moves the messages defined by *msgsIDs* or *allMsgs* to the *destinationBox* on the IMAP server"
		},
		"numToID()": {
			"Syntax": "**.numToID**( *startMsg* : Integer ; *endMsg* : Integer ) : Collection",
			"Params": [
				[
					"startMsg",
					"Integer",
					"->",
					"Sequence number of the first message"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"Sequence number of the last message"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of unique IDs"
				]
			],
			"Summary": "converts the sequence numbers to IMAP unique IDs for the messages in the sequential range designated by *startMsg* and *endMsg*"
		},
		"removeFlags()": {
			"Syntax": "**.removeFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Longint ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"Collection of strings: Message unique IDs (text)<br/>Text: Unique ID of a message<br/>Longint (IMAP all): All messages in the selected mailbox"
				],
				[
					"keywords",
					"Object",
					"->",
					"Keyword flags to remove"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the removeFlags operation"
				]
			],
			"Summary": "removes flags from the `msgIDs` for the specified `keywords`"
		},
		"renameBox()": {
			"Syntax": "**.renameBox**( *currentName* : Text ; *newName* : Text ) : Object",
			"Params": [
				[
					"currentName",
					"Text",
					"->",
					"Name of the current mailbox"
				],
				[
					"newName",
					"Text",
					"->",
					"New mailbox name"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the renaming operation"
				]
			],
			"Summary": "changes the name of a mailbox on the IMAP server"
		},
		"searchMails()": {
			"Syntax": "**.searchMails**( *searchCriteria* : Text ) : Collection",
			"Params": [
				[
					"searchCriteria",
					"Text",
					"->",
					"Search criteria"
				],
				[
					"Result",
					"Collection",
					"<-",
					"Collection of message numbers"
				]
			],
			"Summary": "searches for messages that match the given *searchCriteria* in the current mailbox"
		},
		"selectBox()": {
			"Syntax": "**.selectBox**( *name* : Text { ; *state* : Integer } ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of the mailbox"
				],
				[
					"state",
					"Integer",
					"->",
					"Mailbox access status"
				],
				[
					"Result",
					"Object",
					"<-",
					"boxInfo object"
				]
			],
			"Summary": "selects the *name* mailbox as the current mailbox"
		},
		"subscribe()": {
			"Syntax": "**.subscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of the mailbox"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the subscribe operation"
				]
			],
			"Summary": "allows adding the specified mailbox to the IMAP server’s set of “subscribed” mailboxes"
		},
		"unsubscribe()": {
			"Syntax": "**.unsubscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of the mailbox"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the unsubscribe operation"
				]
			],
			"Summary": "removes a mailbox from a set of subscribed mailboxes"
		},
		"_inheritedFrom_": "Transporter"
	},
	"IncomingMessage": {
		"getBlob()": {
			"Syntax": "**.getBlob**() : Blob",
			"Params": [
				[
					"Result",
					"Blob",
					"<-",
					"Body of the request as a Blob"
				]
			],
			"Summary": "returns the body of the request as a Blob"
		},
		"getHeader()": {
			"Syntax": "**.getHeader**( *key* : Text ) : Text",
			"Params": [
				[
					"key",
					"Text",
					"->",
					"Header property to get"
				],
				[
					"Result",
					"Text",
					"<-",
					"Value of the header property"
				]
			],
			"Summary": "returns the value of the *key* header"
		},
		"getJSON()": {
			"Syntax": "**.getJSON**() : Variant",
			"Params": [
				[
					"Result",
					"Variant",
					"<-",
					"JSON resolution of the body of the request"
				]
			],
			"Summary": "returns the body of the request as a JSON resolution"
		},
		"getPicture()": {
			"Syntax": "**.getPicture**() : Picture",
			"Params": [
				[
					"Result",
					"Picture",
					"<-",
					"Body of the request as picture"
				]
			],
			"Summary": "returns the body of the request as a picture (in case of a body sent as a picture)"
		},
		"getText()": {
			"Syntax": "**.getText**() : Text",
			"Params": [
				[
					"Result",
					"Text",
					"<-",
					"Body of the request as text"
				]
			],
			"Summary": "returns the body of the request as a text value"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "the current headers of the incoming message as key/value pairs (strings)"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "the URL of the request without the *IP:port* part and as a string"
		},
		"urlPath": {
			"Syntax": "**urlPath** : Collection",
			"Summary": "the URL of the request without the *IP:port* part and as a collection of strings"
		},
		"urlQuery": {
			"Syntax": "**urlQuery** : Object",
			"Summary": "the parameters of the request when they have been given in the URL as key/value pairs"
		},
		"verb": {
			"Syntax": "**verb** : Text",
			"Summary": "the verb used by the request"
		}
	},
	"MailAttachment": {
		"cid": {
			"Syntax": "**.cid** : Text",
			"Summary": "the ID of the attachment"
		},
		"disposition": {
			"Syntax": "**.disposition** : Text",
			"Summary": "the value of the `Content-Disposition` header"
		},
		"getContent()": {
			"Syntax": "**.getContent()** : 4D.Blob",
			"Params": [
				[
					"Result",
					"4D.Blob",
					"<-",
					"Content of the attachment"
				]
			],
			"Summary": "returns the contents of the attachment object in a `4D.Blob` object"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "the name and extension of the attachment"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "the POSIX path of the attachment file, if it exists"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "the path of the attachment file expressed with the current platform syntax"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "the value of the `size` header of the attachment file"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "the `content-type` of the attachment file"
		}
	},
	"OutgoingMessage": {
		"body": {
			"Syntax": "**body** : any",
			"Summary": "the outgoing message body"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "the current headers of the outgoing message as key/value pairs"
		},
		"setBody()": {
			"Syntax": "**.setBody**( *body* : any )",
			"Params": [
				[
					"body",
					"any",
					"->",
					"Body of the outgoing message"
				]
			],
			"Summary": "sets the outgoing message *body*"
		},
		"setHeader()": {
			"Syntax": "**.setHeader**( *key* : Text ; *value* : Text )",
			"Params": [
				[
					"key",
					"Text",
					"->",
					"Header property to set"
				],
				[
					"value",
					"Text",
					"->",
					"Value of the header property"
				]
			],
			"Summary": "sets the outgoing message header *key* with the provided *value*"
		},
		"setStatus()": {
			"Syntax": "**.setStatus**( *status* : Integer )",
			"Params": [
				[
					"status",
					"Integer",
					"->",
					"Status to set"
				]
			],
			"Summary": "sets the `status` property with the given *status*"
		},
		"status": {
			"Syntax": "**status** : Integer",
			"Summary": "the current status of the outgoing message"
		}
	},
	"POP3Transporter": {
		"delete()": {
			"Syntax": "**.delete**( *msgNumber* : Integer )",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Number of the message to delete"
				]
			],
			"Summary": "flags the *msgNumber* email for deletion from the POP3 server"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo()** : Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"boxInfo object"
				]
			],
			"Summary": "returns a `boxInfo` object corresponding to the mailbox designated by the `POP3 transporter`"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber* : Integer { ; *headerOnly* : Boolean } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Number of the message in the list"
				],
				[
					"headerOnly",
					"Boolean",
					"->",
					"True to download only the email headers (default is False)"
				],
				[
					"Result",
					"Object",
					"<-",
					"Email object"
				]
			],
			"Summary": "returns the `Email` object corresponding to the *msgNumber* in the mailbox designated by the `POP3 transporter`"
		},
		"getMailInfo()": {
			"Syntax": "**.getMailInfo**( *msgNumber* : Integer ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Number of the message in the list"
				],
				[
					"Result",
					"Object",
					"<-",
					"mailInfo object"
				]
			],
			"Summary": "returns a `mailInfo` object corresponding  corresponding to the *msgNumber* in the mailbox designated by the `POP3 transporter`"
		},
		"getMailInfoList()": {
			"Syntax": "**.getMailInfoList()** : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Collection of `mailInfo` objects"
				]
			],
			"Summary": "returns a collection of `mailInfo` objects describing all messages in the mailbox designated by the `POP3 transporter`"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Number of the message in the list"
				],
				[
					"Result",
					"Blob",
					"<-",
					"Blob of the MIME string returned from the mail server"
				]
			],
			"Summary": "returns a BLOB containing the MIME contents for the message corresponding to the *msgNumber* in the mailbox designated by the `POP3_transporter`"
		},
		"undeleteAll()": {
			"Syntax": "**.undeleteAll()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "removes all delete flags set on the emails in the `POP3_transporter`"
		},
		"_inheritedFrom_": "Transporter"
	},
	"Session": {
		"clearPrivileges()": {
			"Syntax": "**.clearPrivileges()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if the execution is successful"
				]
			],
			"Summary": "removes all the privileges associated to the session and returns **True** if the execution was successful"
		},
		"createOTP()": {
			"Syntax": "**.createOTP** ( { *lifespan* : Integer } ) : Text",
			"Params": [
				[
					"lifespan",
					"Integer",
					"->",
					"Session token lifespan in seconds"
				],
				[
					"Result",
					"Text",
					"<-",
					"UUID of the session"
				]
			],
			"Summary": "creates a new OTP (One Time Passcode) for the session and returns its token UUID"
		},
		"expirationDate": {
			"Syntax": "**.expirationDate** : Text",
			"Summary": "the expiration date and time of the session cookie"
		},
		"getPrivileges()": {
			"Syntax": "**.getPrivileges**() : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Collection of privilege names (strings)"
				]
			],
			"Summary": "returns a collection of all the privilege names associated to the session"
		},
		"hasPrivilege()": {
			"Syntax": "**.hasPrivilege**( *privilege* : Text ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"Name of the privilege to verify"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if session has *privilege*, False otherwise"
				]
			],
			"Summary": "returns True if the *privilege* is associated to the session, and False otherwise"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "the unique identifier (UUID) of the user session"
		},
		"idleTimeout": {
			"Syntax": "**.idleTimeout** : Integer",
			"Summary": "the inactivity session timeout (in minutes), after which the session is automatically closed by 4D"
		},
		"info": {
			"Syntax": "**.info** : Object",
			"Summary": "describes the remote client or stored procedure session on the server, or the standalone session"
		},
		"isGuest()": {
			"Syntax": "**.isGuest()** : Boolean",
			"Params": [
				[
					"Result",
					"Boolean",
					"<-",
					"True if session is a Guest one, False otherwise"
				]
			],
			"Summary": "returns True if the session is a Guest session (i.e. it has no privileges)"
		},
		"restore()": {
			"Syntax": "**.restore** ( *token* : Text ) : Boolean",
			"Params": [
				[
					"token",
					"Text",
					"->",
					"Session token UUID"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if the current session has been successfully replaced by the session in token"
				]
			],
			"Summary": "replaces the current web user session with their original session corresponding to the *token* UUID"
		},
		"setPrivileges()": {
			"Syntax": "**.setPrivileges**( *privilege* : Text ) : Boolean<br/>**.setPrivileges**( *privileges* : Collection )<br/>**.setPrivileges**( *settings* : Object ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"Privilege name"
				],
				[
					"privileges",
					"Collection",
					"->",
					"Collection of privilege names"
				],
				[
					"settings",
					"Object",
					"->",
					"Object with a \"privileges\" property (string or collection)"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"True if the execution is successful"
				]
			],
			"Summary": "associates the privilege(s) and/or role(s) defined in the parameter to the session and returns **True** if the execution was successful"
		},
		"storage": {
			"Syntax": "**.storage** : Object",
			"Summary": "a shared object that can be used to store information available to all processes of the session"
		},
		"userName": {
			"Syntax": "**.userName** : Text",
			"Summary": "the user name associated to the session"
		}
	},
	"Signal": {
		"description": {
			"Syntax": "**.description** : Text",
			"Summary": "contains a custom description for the `Signal` object."
		},
		"signaled": {
			"Syntax": "**.signaled** : Boolean",
			"Summary": "contains the current state of the `Signal` object"
		},
		"trigger()": {
			"Syntax": "**.trigger( )**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "sets the `signaled` property of the signal object to **true**"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : Boolean",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Maximum wait time in seconds"
				],
				[
					"Result",
					"Boolean",
					"<-",
					"State of the `.signaled` property"
				]
			],
			"Summary": "waits until the `.signaled` property of the Signal object becomes **true** or the specified `timeout` is reached"
		}
	},
	"SMTPTransporter": {
		"keepAlive": {
			"Syntax": "**.keepAlive** : Boolean",
			"Summary": "**True** if the SMTP connection must be kept alive until the `transporter` object is destroyed"
		},
		"send()": {
			"Syntax": "**.send**( *mail* : Object ) : Object",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Email to send"
				],
				[
					"Result",
					"Object",
					"<-",
					"SMTP status"
				]
			],
			"Summary": "sends the *mail* object to the SMTP server defined in the `transporter` object and returns a status object"
		},
		"_inheritedFrom_": "Transporter"
	},
	"SystemWorker": {
		"closeInput()": {
			"Syntax": "**.closeInput**()",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "closes the input stream (*stdin*) of the external process"
		},
		"commandLine": {
			"Syntax": "**.commandLine** : Text",
			"Summary": "contains the command line passed as parameter to the `new()` function"
		},
		"currentDirectory": {
			"Syntax": "**.currentDirectory** : 4D.Folder",
			"Summary": "contains the working directory in which the external process is executed"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "contains the type of the response body content"
		},
		"encoding": {
			"Syntax": "**.encoding** : Text",
			"Summary": "contains the encoding of the response body content"
		},
		"errors": {
			"Syntax": "**.errors** : Collection",
			"Summary": "contains a collection of 4D errors in case of execution error(s) if any"
		},
		"exitCode": {
			"Syntax": "**.exitCode** : Integer",
			"Summary": "contains the exit code returned by the external process"
		},
		"hideWindow": {
			"Syntax": "**.hideWindow** : Boolean",
			"Summary": "can be used to hide the window of the DOS console or the window of the launched executable (**Windows only**)"
		},
		"pid": {
			"Syntax": "**.pid** : Integer",
			"Summary": "contains the process unique identifier of the external process at the system level"
		},
		"postMessage()": {
			"Syntax": "**.postMessage**( *message* : Text)<br/>**.postMessage**( *messageBLOB* : Blob)",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Text to write on the input stream (stdin) of the external process"
				],
				[
					"messageBLOB",
					"Blob",
					"->",
					"Bytes write on the input stream"
				]
			],
			"Summary": "allows you to write on the input stream (stdin) of the external process"
		},
		"response": {
			"Syntax": "**.response** : Text<br/>**.response** : Blob",
			"Summary": "contains the concatenation of all data returned once the request is terminated"
		},
		"responseError": {
			"Syntax": "**.responseError** : Text",
			"Summary": "contains the concatenation of all the errors returned, once the request is terminated"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "forces the `SystemWorker` to terminate its execution"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "contains **true** if the external process is terminated"
		},
		"timeout": {
			"Syntax": "**.timeout** : Integer",
			"Summary": "contains the duration in seconds before the external process will be killed if it is still alive"
		},
		"wait()": {
			"Syntax": "**.wait**( {*timeout* : Real} ) : 4D.SystemWorker",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Maximum wait time in seconds"
				],
				[
					"Result",
					"4D.SystemWorker",
					"<-",
					"SystemWorker object"
				]
			],
			"Summary": "waits until the end of the `SystemWorker` execution or the specified *timeout* is reached"
		}
	},
	"TCPConnection": {
		"address": {
			"Syntax": "**address** : Text",
			"Summary": "the IP addess or domain name of the remote machine"
		},
		"closed": {
			"Syntax": "**closed** : Boolean",
			"Summary": "whether the connection is closed"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "a collection of error objects associated with the connection"
		},
		"listener": {
			"Syntax": "**listener** : Object",
			"Summary": "the `TCPListener` object that created the `TCPConnection`, if any"
		},
		"noDelay": {
			"Syntax": "**noDelay** : Boolean",
			"Summary": "whether Nagle's algorithm is disabled (`true`) or enabled (`false`)"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number of the remote machine"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob )",
			"params": [
				[
					"data",
					"Blob",
					"->",
					"Data to be sent"
				]
			],
			"Summary": "sends data to the server"
		},
		"shutdown()": {
			"Syntax": "**.shutdown**()",
			"params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "closes the *write* channel of the connection (client to server stream)"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } )",
			"params": [
				[
					"timeout",
					"Real",
					"->",
					"Maximum wait time in seconds"
				]
			],
			"Summary": "waits until  the TCP connection is closed or the specified `timeout` is reached"
		}
	},
	"TCPEvent": {
		"address": {
			"Syntax": "**address** : Text",
			"Summary": "the IP address of the remote machine"
		},
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "the data associated with the event"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number of the remote machine"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "the type of the event"
		}
	},
	"TCPListener": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "a collection of error objects associated with the connection"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number of the machine"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "closes the listener and releases the port"
		}
	},
	"Transporter": {
		"acceptUnsecureConnection": {
			"Syntax": "**.acceptUnsecureConnection** : Boolean",
			"Summary": "**True** if 4D is allowed to establish an unencrypted connection"
		},
		"authenticationMode": {
			"Syntax": "**.authenticationMode** : Text",
			"Summary": "the authentication mode used to open the session on the mail server"
		},
		"bodyCharset": {
			"Syntax": "**.bodyCharset** : Text",
			"Summary": "the charset and encoding used for the body part of the email"
		},
		"connectionTimeOut": {
			"Syntax": "**.connectionTimeOut** : Integer",
			"Summary": "the maximum wait time (in seconds) allowed to establish a connection to the server"
		},
		"headerCharset": {
			"Syntax": "**.headerCharset** : Text",
			"Summary": "the charset and encoding used for the email header"
		},
		"host": {
			"Syntax": "**.host** : Text",
			"Summary": "the name or the IP address of the host server"
		},
		"logFile": {
			"Syntax": "**.logFile** : Text",
			"Summary": "the path of the extended log file defined (if any) for the mail connection"
		},
		"port": {
			"Syntax": "**.port** : Integer",
			"Summary": "the port number used for mail transactions"
		},
		"sendTimeOut": {
			"Syntax": "**.sendTimeOut** : Integer",
			"Summary": "the maximum wait time (in seconds) of a call to `.send( )` before a timeout occurs"
		},
		"user": {
			"Syntax": "**.user** : Text",
			"Summary": "the user name used for authentication on the mail server"
		},
		"checkConnection()": {
			"Syntax": "**.checkConnection()** : Object",
			"Params": [
				[
					"Result",
					"Object",
					"<-",
					"Status of the transporter object connection"
				]
			],
			"Summary": "checks the connection using information stored in the transporter object"
		}
	},
	"UDPEvent": {
		"address": {
			"Syntax": "**address** : Text",
			"Summary": "the IP address of the remote machine"
		},
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "the data associated with the event"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number of the remote machine"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "the type of the event"
		}
	},
	"UDPSocket": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "a collection of error objects associated with the socket"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number to listen to"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob ; *hostName* : Text ; *remotePort* : Integer )",
			"params": [
				[
					"data",
					"Blob",
					"->",
					"Data to be sent"
				],
				[
					"hostName",
					"Text",
					"->",
					"Name or IP address of server"
				],
				[
					"remotePort",
					"Integer",
					"->",
					"Remote port to connect to (0=any)"
				]
			],
			"Summary": "sends *data* to the remote *hostName* server on the specified *remotePort*"
		}
	},
	"Vector": {
		"cosineSimilarity()": {
			"Syntax": "**.cosineSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector to compare with"
				],
				[
					"Result",
					"Real",
					"<-",
					"Distance between vectors"
				]
			],
			"Summary": "calculates the cosine similarity between the current 4D vector and the one you passed in the *vector* parameter"
		},
		"dotSimilarity()": {
			"Syntax": "**.dotSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector to compare with"
				],
				[
					"Result",
					"Real",
					"<-",
					"Distance between vectors"
				]
			],
			"Summary": "calculates the dot product of the current 4D vector and the one you passed in the *vector* parameter"
		},
		"euclideanDistance()": {
			"Syntax": "**.euclideanDistance**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector to compare with"
				],
				[
					"Result",
					"Real",
					"<-",
					"Distance between vectors"
				]
			],
			"Summary": "calculates the Euclidean distance between the current 4D vector and the one you passed in the *vector* parameter"
		},
		"length": {
			"Syntax": "**length** : Integer",
			"Summary": "the number of vector components"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**() : Collection",
			"Params": [
				[
					"Result",
					"Collection",
					"<-",
					"Collection of real numbers representing the vector components"
				]
			],
			"Summary": "returns the vector components as a collection of reals"
		}
	},
	"WebForm": {
		"componentName": {
			"Syntax": "***.componentName*** : 4D.WebFormItem",
			"Summary": "objects that are available directly as properties"
		},
		"disableState()": {
			"Syntax": "**.disableState**( *state* : string)",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Name of state to disable from the web form"
				]
			],
			"Summary": "disables the rendering of the *state* in the current web form"
		},
		"enableState()": {
			"Syntax": "**.enableState**( *state* : string )",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Name of state to enable on the web form"
				]
			],
			"Summary": "enables the rendering of the *state* in the current web form"
		},
		"setError()": {
			"Syntax": "**.setError**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Error message to display in the web form"
				]
			],
			"Summary": "sends *msg* as an error message to the web form"
		},
		"setMessage()": {
			"Syntax": "**.setMessage**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Information message to display in the web form"
				]
			],
			"Summary": "sends *msg* as an information message to the web form"
		},
		"setWarning()": {
			"Syntax": "**.setWarning**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Warning message to display in the web form"
				]
			],
			"Summary": "sends *msg* as a warning message to the web form"
		}
	},
	"_command_": {
		"Web Form": {
			"Syntax": "**Web Form** : 4D.WebForm",
			"Params": [
				[
					"Result",
					"4D.WebForm",
					"<-",
					"New `WebForm` proxy object"
				]
			],
			"Summary": "returns a `4D.WebForm` proxy object that allows you to interact with the web form"
		},
		"Web Event": {
			"Syntax": "**Web Event** : Object",
			"Params": [
				[
					"Result",
					"object",
					"<-",
					"object"
				]
			],
			"Summary": "returns an object with information on a triggered event linked to a webform component"
		},
		"Call chain": {
			"Syntax": "**Call chain** : Collection",
			"Params": [
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of objects describing the call chain within a process"
				]
			],
			"Summary": "The **Call chain** command returns a collection of objects describing each step of the method call chain within the current process."
		},
		"Command name": {
			"Syntax": "**Command name** ( *command* {; *info* {; *theme*}} ) : Text",
			"Params": [
				[
					"command",
					"Integer",
					"->",
					"Command number"
				],
				[
					"info",
					"Integer",
					"<-",
					"Command property to evaluate"
				],
				[
					"theme",
					"Text",
					"<-",
					"Language theme of command"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Localized command name"
				]
			],
			"Summary": "returns the name as well as (optionally) the properties of the command whose command number you pass in *command*."
		},
		"Compile project": {
			"Syntax": "**Compile project** {( {*projectFile*}{;}{*options*} )} : Object",
			"Params": [
				[
					"projectFile",
					"4D.File",
					"->",
					".4DProject file to compile"
				],
				[
					"options",
					"Object",
					"->",
					"Object that specifies compilation options"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object containing information on the compilation status"
				]
			],
			"Summary": "allows you to compile the current host project or the project specified in the *projectFile* parameter."
		},
		"Create deployment license": {
			"Syntax": "**Create deployment license** ( *mergedApp* ; *autoLicenseTarget* ) : Object<br/>**Create deployment license** ( *mergedApp* ; *buildLicense* {; *oemLicense*} ) : Object",
			"Params": [
				[
					"mergedApp",
					"4D.Folder",
					"->",
					"Folder containing the merged application"
				],
				[
					"autoLicenseTarget",
					"Integer",
					"->",
					"Target license for automatic license embedding"
				],
				[
					"buildLicense",
					"4D.File",
					"->",
					"License required to generate the embedded license"
				],
				[
					"oemLicense",
					"4D.File",
					"->",
					"4D OEM XML Key license if server license"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Status"
				]
			],
			"Summary": "The **Create deployment license** command creates an embedded license file in the Licenses folder of the *mergedApp* built application."
		},
		"Create entity selection": {
			"Syntax": "**Create entity selection** ( *dsTable* : Table { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"dsTable",
					"Table",
					"->",
					"Table in the 4D database whose current selection will be used to build the entity selection"
				],
				[
					"settings",
					"Object",
					"->",
					"Build option: context"
				],
				[
					"Function result",
					"4D.EntitySelection",
					"<-",
					"Entity selection matching the dataclass related to the given table"
				]
			],
			"Summary": "builds and returns a new, alterable entity selection related to the dataclass matching the given *dsTable*, according to the current selection of this table"
		},
		"DIALOG": {
			"Syntax": "**DIALOG** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table owning the form or If omitted: default table or use of project form"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of table or project form, or a POSIX path (string) to a .json file describing the form, or an object describing the form"
				],
				[
					"formData",
					"Object",
					"->",
					"Data to associate to the form"
				],
				[
					"*",
					"Operator",
					"->",
					"Use the same process"
				]
			],
			"Summary": "The **DIALOG** command presents the *form* to the user, along with *formData* parameter(s) (optional)."
		},
		"ds": {
			"Syntax": "**ds** { ( *localID* : Text ) } : cs.DataStore",
			"Params": [
				[
					"localID",
					"Text",
					"->",
					"Local ID of the remote datastore to return"
				],
				[
					"Result",
					"cs.DataStore",
					"<-",
					"Reference to the datastore"
				]
			],
			"Summary": "returns a reference to the datastore matching the current 4D database or the database designated by *localID*"
		},
		"File": {
			"Syntax": "**File** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.File<br/>**File** ( *fileConstant* : Integer { ; \\* } ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"File path"
				],
				[
					"fileConstant",
					"Integer",
					"->",
					"4D file constant"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (default) or `fk platform path`"
				],
				[
					"*",
					"operator",
					"->",
					"* to return file of host database"
				],
				[
					"Result",
					"4D.File",
					"<-",
					"New file object"
				]
			],
			"Summary": "creates and returns a new object of the `4D.File` type"
		},
		"Folder": {
			"Syntax": "**Folder** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**Folder** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Folder path"
				],
				[
					"folderConstant",
					"Integer",
					"->",
					"4D folder constant"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (default) or `fk platform path`"
				],
				[
					"*",
					"operator",
					"->",
					"* to return folder of host database"
				],
				[
					"Result",
					"4D.Folder",
					"<-",
					"New folder object"
				]
			],
			"Summary": "creates and returns a new object of the `4D.Folder` type"
		},
		"FORM EDIT": {
			"Syntax": "**FORM EDIT** ( {*aTable* ;} *form* )<br/>**FORM EDIT** ( {*aTable* ;} *form* ; *object* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table owning the form or If omitted: default table or use of project form"
				],
				[
					"form",
					"Text",
					"->",
					"Form name"
				],
				[
					"object",
					"Text",
					"->",
					"Form object name or group name"
				]
			],
			"Summary": "The **FORM EDIT** command opens the *form* associated to *aTable* in the 4D Form editor, with optionnally *object* selected."
		},
		"Form event code": {
			"Syntax": "**Form event code**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Form event number"
				]
			]
		},
		"FORM Event": {
			"Syntax": "**FORM Event** : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Event object"
				]
			],
			"Summary": "**FORM Event** returns an object containing information about the form event that has just occurred."
		},
		"FORM LOAD": {
			"Syntax": "**FORM LOAD** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table form to load (if omitted, load a project form)"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of form (project or table), ora POSIX path (string) to a .json file describing the form, or an object describing the form to open"
				],
				[
					"formData",
					"Object",
					"->",
					"Data to associate to the form"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when it is executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **FORM LOAD** command is used to load the *form* in memory in the current process along with *formData* (optional) in order to print its data or parse its contents."
		},
		"Form": {
			"Syntax": "**Form**  : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Form data of the current form"
				]
			],
			"Summary": "The **Form** command returns the object associated with the current form (instantiated from the *formData* parameter or the user class assigned in the Form editor)."
		},
		"Formula from string": {
			"Syntax": "**Formula from string**( *formulaString* : Text ) : 4D.Function<br/>**Formula from string**( *formulaString* : Text ; *context* : Longint ) : 4D.Function",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"Text formula to be returned as object"
				],
				[
					"context",
					"Number",
					"->",
					"`sk execute in current database` (default) or `sk execute in host database`"
				],
				[
					"Result",
					"4D.Function",
					"<-",
					"Native object encapsulating the formula"
				]
			],
			"Summary": "creates a `4D.Function` object based upon the *formulaString* and, optionnally, a *context*"
		},
		"Formula": {
			"Syntax": "**Formula** ( *formulaExp* : Expression ) : 4D.Function",
			"Params": [
				[
					"formulaExp",
					"Expression",
					"->",
					"Formula to be returned as object"
				],
				[
					"Result",
					"4D.Function",
					"<-",
					"Native function encapsulating the formula"
				]
			],
			"Summary": "creates a `4D Function` object based upon the *formulaExp* expression"
		},
		"HTTP Parse message": {
			"Syntax": "**HTTP Parse message** ( *data* : Text ) : Object<br/>**HTTP Parse message**( *data* : Blob ) : Object",
			"Params": [
				[
					"data",
					"Text, Blob",
					"->",
					"Data to be parsed"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object, each property is a part of the multipart data"
				]
			],
			"Summary": "parses a multipart/form-data text or blob (HTTP \"response\" message) and extracts the content to an object. Each property of the returned object corresponds to a part of the multipart data"
		},
		"IMAP New transporter": {
			"Syntax": "**IMAP New transporter**( *server* : Object ) : 4D.IMAPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Mail server information"
				],
				[
					"Result",
					"4D.IMAPTransporter",
					"<-",
					"IMAP transporter object"
				]
			],
			"Summary": "configures a new IMAP connection"
		},
		"Last errors": {
			"Syntax": "**Last errors** : Collection",
			"Params": [
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of error objects"
				]
			],
			"Summary": "The **Last errors** command returns the current stack of errors of the 4D application as a collection of error objects, or **null** if no error occurred."
		},
		"License info": {
			"Syntax": "**License info** : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Information about the active licence"
				]
			],
			"Summary": "The **License info** command returns an object providing detailed information about the active license."
		},
		"LISTBOX Get property": {
			"Syntax": "**LISTBOX Get property** ( {* ;} *object* ; *property* ) : any",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string). If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"property",
					"Integer",
					"->",
					"Property whose value you want to get"
				],
				[
					"Function result",
					"Integer, Text",
					"<-",
					"Current value"
				]
			],
			"Summary": "The **LISTBOX Get property** command returns the value of the *property* of the list box or column specified using the *object* and *\\** parameters."
		},
		"LISTBOX SET PROPERTY": {
			"Syntax": "**LISTBOX SET PROPERTY** ( {* ;} *object* ; *property* ; *value* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string). If omitted, object is a variable."
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"property",
					"Integer",
					"->",
					"List box or column property"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"Value of property"
				]
			],
			"Summary": "The **LISTBOX SET PROPERTY** command sets the *value* for the *property* of the list box or list box column specified using the *object* and *\\** parameters."
		},
		"MAIL Convert from MIME": {
			"Syntax": "**MAIL Convert from MIME**( *mime* : Blob ) : Object<br/>**MAIL Convert from MIME**( *mime* : Text ) : Object",
			"Params": [
				[
					"mime",
					"Blob, Text",
					"->",
					"Email in MIME"
				],
				[
					"Result",
					"Object",
					"<-",
					"Email object"
				]
			],
			"Summary": "converts a MIME document into a valid email object"
		},
		"MAIL Convert to MIME": {
			"Syntax": "**MAIL Convert to MIME**( *mail* : Object { ; *options* : Object } ) : Text",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Email object"
				],
				[
					"options",
					"Object",
					"->",
					"Charset and encoding mail options"
				],
				[
					"Result",
					"Text",
					"<-",
					"Email object converted to MIME"
				]
			],
			"Summary": "converts an email object into MIME text"
		},
		"MAIL New attachment": {
			"Syntax": "**MAIL New attachment**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"Attachment file"
				],
				[
					"zipFile",
					"4D.ZipFile",
					"->",
					"Attachment Zipfile"
				],
				[
					"blob",
					"4D.Blob",
					"->",
					"BLOB containing the attachment"
				],
				[
					"path",
					"Text",
					"->",
					"Path of the attachment file"
				],
				[
					"name",
					"Text",
					"->",
					"Name + extension used by the mail client to designate the attachment"
				],
				[
					"cid",
					"Text",
					"->",
					"ID of attachment (HTML messages only), or \" \" if no cid is required"
				],
				[
					"type",
					"Text",
					"->",
					"Value of the content-type header"
				],
				[
					"disposition",
					"Text",
					"->",
					"Value of the content-disposition header: \"inline\" or \"attachment\"."
				],
				[
					"Result",
					"4D.MailAttachment",
					"<-",
					"Attachment object"
				]
			],
			"Summary": "allows you to create an attachment object that you can add to an Email object"
		},
		"New collection": {
			"Syntax": "**New collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection, Picture, Pointer",
					"->",
					"Collection's value(s)"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"New collection"
				]
			],
			"Summary": "creates a new empty or prefilled collection and returns its reference."
		},
		"New log file": {
			"Syntax": "**New log file** : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Full pathname of closed log file"
				]
			],
			"Summary": "The **New log file** command closes the current log file, renames it and creates a new one with the same name in the same location as the previous one"
		},
		"New shared collection": {
			"Syntax": "**New shared collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection",
					"->",
					"Shared collection's value(s)"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"New shared collection"
				]
			],
			"Summary": "creates a new empty or prefilled shared collection"
		},
		"New signal": {
			"Syntax": "**New signal** { ( *description* : Text ) } : 4D.Signal",
			"Params": [
				[
					"description",
					"Text",
					"->",
					"Description for the signal"
				],
				[
					"Function result",
					"4D.Signal",
					"<-",
					"Native object encapsulating the signal"
				]
			],
			"Summary": "creates a `4D.Signal` object"
		},
		"OBJECT Get data source formula": {
			"Syntax": "**OBJECT Get data source formula** ( {* ;} *object* ) : *formula*",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"formula",
					"4D.Formula",
					"<-",
					"Formula associated with the form object (`Null` if no formula is associated)"
				]
			],
			"Summary": "returns the formula (if any) associated object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET DATA SOURCE FORMULA": {
			"Syntax": "**OBJECT SET DATA SOURCE FORMULA** ( {* ;} *object* ; *formula* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"formula",
					"4D.Formula",
					"->",
					"Formula to assign as the data source"
				]
			],
			"Summary": "assigns a formula (expression) as the data source of the object(s) designated by the *object* and *\\** parameters"
		},
		"Open datastore": {
			"Syntax": "**Open datastore**( *connectionInfo* : Object ; *localID* : Text ) : 4D.DataStoreImplementation",
			"Params": [
				[
					"connectionInfo",
					"Object",
					"->",
					"Connection properties used to reach the remote datastore"
				],
				[
					"localID",
					"Text",
					"->",
					"Id to assign to the opened datastore on the local application (mandatory)"
				],
				[
					"Function result",
					"4D.DataStoreImplementation",
					"<-",
					"Datastore object"
				]
			],
			"Summary": "connects the application to the remote datastore identified by the *connectionInfo* parameter"
		},
		"POP3 New transporter": {
			"Syntax": "**POP3 New transporter**( *server* : Object ) : 4D.POP3Transporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Mail server information"
				],
				[
					"Function result",
					"4D.POP3Transporter",
					"<-",
					"POP3 transporter object"
				]
			],
			"Summary": "configures a new POP3 connection"
		},
		"Print form": {
			"Syntax": "**Print form** ( {*aTable* ;} *form* {; *formData*} {; *areaStart*{; *areaEnd*}} ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table owning the form, or Default table, if omitted"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of the form, or a POSIX path (string) to a .json file describing the form, or an object describing the form to print"
				],
				[
					"formData",
					"Object",
					"->",
					"Data to associate to the form"
				],
				[
					"areaStart",
					"Integer",
					"->",
					"Print marker, or Beginning area (if areaEnd is specified)"
				],
				[
					"areaEnd",
					"Integer",
					"->",
					"Ending area (if areaStart specified)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Height of printed section"
				]
			],
			"Summary": "The **Print form** command simply prints *form* with the current values of fields and variables of *aTable*."
		},
		"Process activity": {
			"Syntax": "**Process activity** () : Object<br/>**Process activity** ( *options* ) : Object<br/>**Process activity** ( *sessionID* ) : Object<br/>**Process activity** ( *sessionID* ; *options* ) : Object",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"Session ID"
				],
				[
					"options",
					"Integer",
					"->",
					"Return options"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Snapshot of running processes and/or (4D Server only) user sessions"
				]
			],
			"Summary": "The **Process activity** command returns a snapshot of running processes and/or (4D Server only) connected user sessions at a given time."
		},
		"Process info": {
			"Syntax": "**Process info** ( *processNumber* : Integer ) : Object",
			"Params": [
				[
					"processNumber",
					"Integer",
					"->",
					"Process number"
				],
				[
					"Result",
					"Object",
					"<-",
					"Information about the process"
				]
			],
			"Summary": "returns an object providing detailed information about process whose number you pass in *processNumber*"
		},
		"Process number": {
			"Syntax": "**Process number** ( *name* {; *} ) : Integer<br/>**Process number** ( *id* {; *} ) : Integer",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of process for which to retrieve the process number"
				],
				[
					"id",
					"Text",
					"->",
					"ID of process for which to retrieve the process number"
				],
				[
					"*",
					"Operator",
					"->",
					"Return the process number from the server"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Process number"
				]
			],
			"Summary": "The `Process number` command returns the number of the process whose *name* or *id* you pass in the first parameter"
		},
		"SELECT LOG FILE": {
			"Syntax": "**SELECT LOG FILE** ( *logFile* )<br/>**SELECT LOG FILE** ( * )",
			"Params": [
				[
					"logFile",
					"Text",
					"->",
					"Name of the log file"
				],
				[
					"\\*",
					"Operator",
					"->",
					"Close the current log file"
				]
			],
			"Summary": "The **SELECT LOG FILE** command creates, or closes the log file according to the value you pass in parameter"
		},
		"Session info": {
			"Syntax": "**Session info** ( *sessionId* : Integer ) : Object",
			"Params": [
				[
					"sessionID",
					"Integer",
					"->",
					"Session ID"
				],
				[
					"Result",
					"Object",
					"<-",
					"Information about the session"
				]
			],
			"Summary": "returns an object describing the session whose ID you pass in the *sessionID* parameter."
		},
		"Session storage": {
			"Syntax": "**Session storage** ( *id* ) : Object",
			"Params": [
				[
					"id",
					"Text",
					"->",
					"Unique identifier (UUID) of the session"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Storage object of the session"
				]
			],
			"Summary": "The **Session storage** command returns the storage object of the session whose unique identifier you passed in the *id* parameter."
		},
		"Session": {
			"Syntax": "**Session** : 4D.Session",
			"Params": [
				[
					"Function result",
					"4D.Session",
					"<-",
					"Session object"
				]
			],
			"Summary": "returns the `Session` object corresponding to the current user session"
		},
		"SET ALLOWED METHODS": {
			"Syntax": "**SET ALLOWED METHODS** ( *methodsArray* )",
			"Params": [
				[
					"methodsArray",
					"Text array",
					"->",
					"Array of method names"
				]
			],
			"Summary": "The **SET ALLOWED METHODS** command designates the project methods that can be entered via the application."
		},
		"SET WINDOW DOCUMENT ICON": {
			"Syntax": "**SET WINDOW DOCUMENT ICON** ( *winRef* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *image* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *file* )<br/>**SET WINDOW DOCUMENT ICON** (  *winRef* ; *image* ; *file* )",
			"Params": [
				[
					"winRef",
					"Integer",
					"->",
					"Window reference number"
				],
				[
					"image",
					"Picture",
					"->",
					"Custom icon"
				],
				[
					"file",
					"4D.File, 4D.Folder",
					"->",
					"File path or folder path"
				]
			],
			"Summary": "allows you to define an icon for windows in multi-window applications using either an *image* and/or *file* with the window reference *winRef*"
		},
		"SMTP New transporter": {
			"Syntax": "**SMTP New transporter**( *server* : Object ) : 4D.SMTPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Mail server information"
				],
				[
					"Function result",
					"4D.SMTPTransporter",
					"<-",
					"SMTP transporter object"
				]
			],
			"Summary": "configures a new SMTP connection"
		},
		"Super": {
			"Syntax": "**Super**( ...param : any )<br/>**Super** : Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"Parameter(s) to pass to the parent constructor"
				],
				[
					"Result",
					"Object",
					"<-",
					"Object's parent"
				]
			],
			"Summary": "allows calls to the `superclass`, i.e. the parent class"
		},
		"This": {
			"Syntax": "**This** : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Current element or object"
				]
			],
			"Summary": "returns a reference to the currently processed object."
		},
		"USE ENTITY SELECTION": {
			"Syntax": "**USE ENTITY SELECTION** ( *entitySelection* : 4D.EntitySelection )",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"An entity selection"
				]
			],
			"Summary": "updates the current selection of the table matching the dataclass of the *entitySelection* parameter, according to the content of the entity selection"
		},
		"WA Get context": {
			"Syntax": "**WA Get context** ( {* ;} *object* ) -> *contextObj*",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, *object* is an object name (string). If omitted, *object* is a variable."
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)."
				],
				[
					"contextObj",
					"Object",
					"<-",
					"Context object if previously defined, otherwise `null`."
				]
			],
			"Summary": "retrieves the context object defined for `$4d` in the Web area designated by the * and *object* parameters using `WA SET CONTEXT`."
		},
		"WA SET CONTEXT": {
			"Syntax": "**WA SET CONTEXT** ( {* ;} *object* ; *contextObj* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, *object* is an object name (string). If omitted, *object* is a variable."
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)."
				],
				[
					"contextObj",
					"Object",
					"->",
					"Object containing the functions that can be called with `$4d`."
				]
			],
			"Summary": "defines a context object *contextObj* for `$4d` in the Web area designated by the * and *object* parameters. When this command is used, `$4d` can only access contents declared within the provided *contextObj*. When no context object is set, `$4d` has access to all 4D methods and can not access user classes."
		},
		"WEB Server list": {
			"Syntax": "**WEB Server list** : Collection",
			"Params": [
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of the available Web Server objects"
				]
			],
			"Summary": "returns a collection of all Web server objects available in the 4D application"
		},
		"WEB Server": {
			"Syntax": "**WEB Server** : 4D.WebServer<br/>**WEB Server**( *option* : Integer ) : 4D.WebServer",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Web server to get (default if omitted = `Web server database`)"
				],
				[
					"Function result",
					"4D.WebServer",
					"<-",
					"Web server object"
				]
			],
			"Summary": "returns the default Web server object, or the Web server object defined through the *option* parameter"
		},
		"ZIP Create archive": {
			"Syntax": "**ZIP Create archive** ( *fileToZip* : 4D.File ; *destinationFile* : 4D.File ) : Object<br/>**ZIP Create archive** ( *folderToZip* : 4D.Folder ; *destinationFile* : 4D.File { ; *options* : Integer }) : Object<br/>**ZIP Create archive** ( *zipStructure* : Object ; *destinationFile* : 4D.File ) : Object",
			"Params": [
				[
					"fileToZip",
					"4D.File",
					"->",
					"File or Folder object to compress"
				],
				[
					"folderToZip",
					"4D.Folder",
					"->",
					"File or Folder object to compress"
				],
				[
					"zipStructure",
					"Object",
					"->",
					"File or Folder object to compress"
				],
				[
					"destinationFile",
					"4D.File",
					"->",
					"Destination file for the archive"
				],
				[
					"options",
					"Integer",
					"->",
					"*folderToZip* option: `ZIP Without enclosing folder`"
				],
				[
					"Result",
					"Object",
					"<-",
					"Status object"
				]
			],
			"Summary": "creates a compressed ZIP archive object and returns the status of the operation"
		},
		"ZIP Read archive": {
			"Syntax": "**ZIP Read archive** ( *zipFile* : 4D.File { ; *password* : Text }) : 4D.ZipArchive",
			"Params": [
				[
					"zipFile",
					"4D.File",
					"->",
					"Zip archive file"
				],
				[
					"password",
					"Text",
					"->",
					"ZIP archive password if any"
				],
				[
					"Result",
					"4D.ZipArchive",
					"<-",
					"Archive object"
				]
			],
			"Summary": "retrieves the contents of *zipFile* and returns it as a `4D.ZipArchive` object"
		},
		"ABORT PROCESS BY ID": {
			"Syntax": "**ABORT PROCESS BY ID** ( *uniqueID* )",
			"Params": [
				[
					"uniqueID",
					"Integer",
					"->",
					"Unique process ID"
				]
			],
			"Summary": "The **ABORT PROCESS BY ID** command stops a specific process on the 4D Server."
		},
		"ABORT": {
			"Syntax": "**ABORT**",
			"Params": [],
			"Summary": "The **ABORT** command is used from within an error-handling project method installed using the command ON ERR CALL."
		},
		"Abs": {
			"Syntax": "**Abs** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number for which to return the absolute value"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Absolute value of number"
				]
			],
			"Summary": "Abs returns the absolute (unsigned, positive) value of *number*."
		},
		"ACCEPT": {
			"Syntax": "**ACCEPT**",
			"Params": [],
			"Summary": "**ACCEPT** performs the same action as if a user had pressed the Enter key. After the form is accepted, the OK system variable is set to 1."
		},
		"ACCUMULATE": {
			"Syntax": "**ACCUMULATE** ( *data* {; *data2* ; ... ; *dataN*} )",
			"Params": [
				[
					"data",
					"Field, Variable",
					"->",
					"Numeric field or variable on which to accumulate"
				]
			],
			"Summary": "**ACCUMULATE** specifies the fields or variables to be accumulated during a form report performed using PRINT SELECTION."
		},
		"Action info": {
			"Syntax": "**Action info** ( *action* {; *target*} ) : Object",
			"Params": [
				[
					"action",
					"Text",
					"->",
					"Standard action name or pattern including parameter if required"
				],
				[
					"target",
					"Integer",
					"->",
					"Defines the target of the action to get information: main form or current form"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object containing action status as boolean properties: isEnabled, isVisible, isChecked, isMixed, isUnknownState"
				]
			],
			"Summary": "The **Action info** command returns several information, including availability and status, about the defined *action* in the *target*, according to the current application context."
		},
		"Activated": {
			"Syntax": "**Activated**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns TRUE if the execution cycle is an activation"
				]
			],
			"Summary": "The **Activated** command (obsolete) returns **True** in a form method when the window containing the form becomes the frontmost window of the frontmost process."
		},
		"Active transaction": {
			"Syntax": "**Active transaction** : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns False if the current transaction is suspended"
				]
			],
			"Summary": "The **Active transaction** command returns **True** if the current process is in transaction, and this transaction is not suspended."
		},
		"ACTIVITY SNAPSHOT": {
			"Syntax": "**ACTIVITY SNAPSHOT** ( *arrActivities* {; *} )<br/>**ACTIVITY SNAPSHOT** ( *arrUUID* ; *arrStart* ; *arrDuration* ; *arrInfo* {; *arrDetails*}{; *} )",
			"Params": [
				[
					"arrActivities &#124; arrUUID",
					"Object array, Text array",
					"<-",
					"Complete description of operations (object array) or<br/>Operation UUIDs (text array)"
				],
				[
					"arrStart",
					"Text array",
					"<-",
					"Operation start times"
				],
				[
					"arrDuration",
					"Array integer",
					"<-",
					"Operation durations in milliseconds"
				],
				[
					"arrInfo",
					"Text array",
					"<-",
					"Description"
				],
				[
					"arrDetails",
					"Object array",
					"<-",
					"Details of context and sub-operations (if any)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = Get server activity"
				]
			],
			"Summary": "The **ACTIVITY SNAPSHOT** command returns a single or several arrays describing operations in progress on the 4D data."
		},
		"ADD RECORD": {
			"Syntax": "**ADD RECORD** ( {*aTable*}{;}{*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to use for data entry, or Default table, if omitted"
				],
				[
					"*",
					"Operator",
					"->",
					"Hide scroll bars"
				]
			],
			"Summary": "*This command was implemented in 4D's early releases and is still useful for prototyping or basic developments."
		},
		"Add to date": {
			"Syntax": "**Add to date** ( *date* ; *years* ; *months* ; *days* ) : Date",
			"Params": [
				[
					"date",
					"Date",
					"->",
					"Date to which to add days, months, and years"
				],
				[
					"years",
					"Integer",
					"->",
					"Number of years to add to the date"
				],
				[
					"months",
					"Integer",
					"->",
					"Number of months to add to the date"
				],
				[
					"days",
					"Integer",
					"->",
					"Number of days to add to the date"
				],
				[
					"Function result",
					"Date",
					"<-",
					"Resulting date"
				]
			],
			"Summary": "The **Add to date** command adds *years*, *months,* and *days* to the date you pass in *aDate*, then returns the result."
		},
		"ADD TO SET": {
			"Syntax": "**ADD TO SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Current record's table, or Default table, if omitted"
				],
				[
					"set",
					"Text",
					"->",
					"Name of the set to which to add the current record"
				]
			],
			"Summary": "ADD TO SET adds the current record of *aTable* to *set*."
		},
		"ADJUST BLOBS CACHE PRIORITY": {
			"Syntax": "**ADJUST BLOBS CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table whose \"blobs\" data priority value has to be adjusted"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for BLOBs in the table"
				]
			],
			"Summary": "This command is reserved for specific needs."
		},
		"ADJUST INDEX CACHE PRIORITY": {
			"Syntax": "**ADJUST INDEX CACHE PRIORITY** ( *aField* ; *priority* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field whose index(es) priority value has to be adjusted"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for the field index(es)"
				]
			],
			"Summary": "This command is reserved for specific needs."
		},
		"ADJUST TABLE CACHE PRIORITY": {
			"Syntax": "**ADJUST TABLE CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table whose scalar data priority value has to be adjusted"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for the table"
				]
			],
			"Summary": "This command is reserved for specific needs."
		},
		"After": {
			"Syntax": "**After**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns True if the execution cycle is an after"
				]
			],
			"Summary": "**After** returns True for the After execution cycle."
		},
		"ALERT": {
			"Syntax": "**ALERT** ( *message* {; *okButtonTitle*} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Message to display in the alert dialog box"
				],
				[
					"okButtonTitle",
					"Text",
					"->",
					"OK button title"
				]
			],
			"Summary": "The **ALERT** command displays an alert dialog box composed of a note icon, a message, and an OK button."
		},
		"ALL RECORDS": {
			"Syntax": "**ALL RECORDS** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to select all records, or Default table, if omitted"
				]
			],
			"Summary": "ALL RECORDS selects all the records of *aTable* for the current process."
		},
		"APPEND DATA TO PASTEBOARD": {
			"Syntax": "**APPEND DATA TO PASTEBOARD** ( *dataType* ; *data* )",
			"Params": [
				[
					"dataType",
					"Text",
					"->",
					"Type of data to be added"
				],
				[
					"data",
					"Blob",
					"->",
					"Data to append to the pasteboard"
				]
			],
			"Summary": "The APPEND DATA TO PASTEBOARD command appends to the pasteboard the data contained in the BLOB *data* under the data type specified in *dataType*."
		},
		"Append document": {
			"Syntax": "**Append document** ( *document* {; *fileType*} ) : Time",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document name or Full document pathname or Empty string for standard file dialog box"
				],
				[
					"fileType",
					"Text",
					"->",
					"List of types of documents to be screened, or \"*\" to not screen the documents"
				],
				[
					"Function result",
					"Time",
					"<-",
					"Document reference number"
				]
			],
			"Summary": "The **Append document** command does the same as thing as Open document: it opens a document on disk."
		},
		"APPEND MENU ITEM": {
			"Syntax": "**APPEND MENU ITEM** ( *menu* ; *itemText* {; *subMenu* {; *process* {; *}}} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Menu number or Menu reference"
				],
				[
					"itemText",
					"Text",
					"->",
					"Text for the new menu items"
				],
				[
					"subMenu",
					"Text",
					"->",
					"Reference of submenu associated with item"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: consider metacharacters as standard characters"
				]
			],
			"Summary": "The **APPEND MENU ITEM** command appends new menu items to the menu whose number or reference is passed in *menu*."
		},
		"APPEND TO ARRAY": {
			"Syntax": "**APPEND TO ARRAY** ( *array* ; *value* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array to which an element will be appended"
				],
				[
					"value",
					"Expression",
					"->",
					"Value to append"
				]
			],
			"Summary": "The APPEND TO ARRAY command adds a new element at the end of *array* and assigns *value* to the element."
		},
		"APPEND TO LIST": {
			"Syntax": "**APPEND TO LIST** ( *list* ; *itemText* ; *itemRef* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"itemText",
					"Text",
					"->",
					"Text of the new list item"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"Unique reference number for the new list item"
				],
				[
					"sublist",
					"Integer",
					"->",
					"Optional sublist to attach to the new list item"
				],
				[
					"expanded",
					"Boolean",
					"->",
					"Indicates if the optional sublist will be expanded or collapsed"
				]
			],
			"Summary": "The **APPEND TO LIST** command appends a new item to the hierarchical list whose list reference number you pass in *list*."
		},
		"Application file": {
			"Syntax": "**Application file**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Long name of the 4D executable file or application"
				]
			],
			"Summary": "The Application file command returns the long name of the 4D executable file or application you are running."
		},
		"Application info": {
			"Syntax": "**Application info** : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Information about the active application activity"
				]
			],
			"Summary": "The **Application info** command returns an object providing detailed information about the active application's activity and network configuration."
		},
		"Application type": {
			"Syntax": "**Application type**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Numeric value denoting the type of the application"
				]
			],
			"Summary": "The Application type command returns a numeric value that denotes the type of 4D environment that you are running."
		},
		"Application version": {
			"Syntax": "**Application version** {( *buildNum* {; *} )} : Text",
			"Params": [
				[
					"buildNum",
					"Integer",
					"<-",
					"Build number"
				],
				[
					"*",
					"Operator",
					"->",
					"Long version number if passed, otherwise Short version number"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Version number encoded string"
				]
			],
			"Summary": "The Application version command returns an encoded string value that expresses the version number of the 4D environment you are running."
		},
		"APPLY TO SELECTION": {
			"Syntax": "**APPLY TO SELECTION** ( *aTable* ; *statement* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to apply statement"
				],
				[
					"statement",
					"Expression",
					"->",
					"One line of code or a method"
				]
			],
			"Summary": "**APPLY TO SELECTION** applies *statement* to each record in the current selection of *aTable*."
		},
		"Arctan": {
			"Syntax": "**Arctan** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Tangent for which to calculate the angle"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Angle in radians"
				]
			],
			"Summary": "Arctan returns the angle, expressed in radians, of the tangent *number*."
		},
		"ARRAY BLOB": {
			"Syntax": "**ARRAY BLOB** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of array elements or Number of arrays if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of 2D array elements"
				]
			],
			"Summary": "The **ARRAY BLOB** command creates and/or resizes an array of Blob type elements in memory."
		},
		"ARRAY BOOLEAN": {
			"Syntax": "**ARRAY BOOLEAN** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY BOOLEAN command creates and/or resizes an array of Boolean elements in memory."
		},
		"ARRAY DATE": {
			"Syntax": "**ARRAY DATE** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY DATE command creates and/or resizes an array of Date elements in memory."
		},
		"ARRAY INTEGER": {
			"Syntax": "**ARRAY INTEGER** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY INTEGER command creates and/or resizes an array of 2-byte Integer-1) (2-byte integer)\") elements in memory."
		},
		"ARRAY LONGINT": {
			"Syntax": "**ARRAY LONGINT** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY LONGINT command creates and/or resizes an array of 4-byte Longint-1 (4-byte Integer)\") elements in memory."
		},
		"ARRAY OBJECT": {
			"Syntax": "**ARRAY OBJECT** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of array elements or Number of arrays if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of 2D array elements"
				]
			],
			"Summary": "The **ARRAY OBJECT** command creates and/or resizes an array of language Object type elements in memory."
		},
		"ARRAY PICTURE": {
			"Syntax": "**ARRAY PICTURE** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array, or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY PICTURE command creates and/or resizes an array of Picture elements in memory."
		},
		"ARRAY POINTER": {
			"Syntax": "**ARRAY POINTER** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array, or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The **ARRAY POINTER** command creates or resizes an array of Pointer, table, or field\") elements in memory."
		},
		"ARRAY REAL": {
			"Syntax": "**ARRAY REAL** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY REAL command creates and/or resizes an array of Real\") elements in memory."
		},
		"ARRAY TEXT": {
			"Syntax": "**ARRAY TEXT** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of elements in the array or Number of rows if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of columns in a two-dimensional array"
				]
			],
			"Summary": "The ARRAY TEXT command creates and/or resizes an array of Text elements in memory."
		},
		"ARRAY TIME": {
			"Syntax": "**ARRAY TIME** ( *arrayName* ; *size* {; *size2*} )",
			"Params": [
				[
					"arrayName",
					"Array",
					"->",
					"Name of array"
				],
				[
					"size",
					"Integer",
					"->",
					"Number of array elements or Number of arrays if size2 is specified"
				],
				[
					"size2",
					"Integer",
					"->",
					"Number of 2D array elements"
				]
			],
			"Summary": "The **ARRAY TIME** command creates and/or resizes an array of Time type elements in memory."
		},
		"ARRAY TO COLLECTION": {
			"Syntax": "**ARRAY TO COLLECTION** ( *collection* ; *array* {; *propertyName*}{; *array2* ; *propertyName2* ; ... ; *arrayN* ; *propertyNameN*} )",
			"Params": [
				[
					"collection",
					"Collection",
					"<-",
					"Collection to receive the array data"
				],
				[
					"array",
					"Array",
					"->",
					"Array to copy to the collection; if propertyName passed, array to copy to the values of propertyName in the collection"
				],
				[
					"propertyName",
					"Text",
					"->",
					"Object property name whose value to fill with array elements"
				]
			],
			"Summary": "The **ARRAY TO COLLECTION** command copies one or more *array*(s) into the elements or the *propertyName* values of *collection*."
		},
		"ARRAY TO LIST": {
			"Syntax": "**ARRAY TO LIST** ( *array* ; *list* {; *itemRefs*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array from which to copy array elements"
				],
				[
					"list",
					"Text, Integer",
					"->",
					"Name or reference of list into which to copy array elements"
				],
				[
					"itemRefs",
					"Array",
					"->",
					"Numeric array of item reference numbers"
				]
			],
			"Summary": "The ARRAY TO LIST command creates or replaces the hierarchical list or the choice list (created in the List editor) that is specified in *list* using the elements of the array *array."
		},
		"ARRAY TO SELECTION": {
			"Syntax": "**ARRAY TO SELECTION** {( *array* ; *aField* {; *array2* ; *aField2* ; ... ; *arrayN* ; *aFieldN*}{; *} )}",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array to copy to the selection"
				],
				[
					"aField",
					"Field",
					"<-",
					"Field to receive the array data"
				],
				[
					"*",
					"Operator",
					"->",
					"Await execution"
				]
			],
			"Summary": "The **ARRAY TO SELECTION** command copies one or more arrays into a selection of records."
		},
		"ASSERT": {
			"Syntax": "**ASSERT** ( *boolExpression* {; *messageText*} )",
			"Params": [
				[
					"boolExpression",
					"Boolean",
					"->",
					"Boolean expression"
				],
				[
					"messageText",
					"Text",
					"->",
					"Text of error message"
				]
			],
			"Summary": "The **ASSERT** command evaluates the *boolExpression* assertion passed in parameter and, if it returns false, stops the code execution with an error message."
		},
		"Asserted": {
			"Syntax": "**Asserted** ( *boolExpression* {; *messageText*} ) : Boolean",
			"Params": [
				[
					"boolExpression",
					"Boolean",
					"->",
					"Boolean expression"
				],
				[
					"messageText",
					"Text",
					"->",
					"Text of error message"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Result of evaluation of boolExpression"
				]
			],
			"Summary": "The **Asserted** command has an operation similar to that of the ASSERT command, with one difference in that it returns a value which is the result of the evaluation of the *boolExpression* parameter."
		},
		"Average": {
			"Syntax": "**Average** ( *series* {; *attributePath*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the average"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Path of attribute for which to return the average"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Arithmetic mean (average) of series"
				]
			],
			"Summary": "**Average** returns the arithmetic mean (average) of *series*."
		},
		"BACKUP INFO": {
			"Syntax": "**BACKUP INFO** ( *selector* ; *info1* ; *info2* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Type of information to get"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"Value 1 of the selector"
				],
				[
					"info2",
					"Time, Text",
					"<-",
					"Value 2 of the selector"
				]
			],
			"Summary": "The BACKUP INFO command gets information related to the last backup performed on the database data."
		},
		"BACKUP": {
			"Syntax": "**BACKUP**",
			"Params": [],
			"Summary": "The BACKUP command starts the backup of the database using the current backup settings."
		},
		"BASE64 DECODE": {
			"Syntax": "**BASE64 DECODE** ( *toDecode* {; *decoded*}{; *} )",
			"Params": [
				[
					"toDecode",
					"Text, Blob",
					"->",
					"Encoded value to decode"
				],
				[
					"<-",
					"Decoded value (if decoded parameter omitted)"
				],
				[
					"decoded",
					"Text, Blob",
					"<-",
					"Decoded value"
				],
				[
					"*",
					"Operator",
					"->",
					"Decode in Base64URL format"
				]
			],
			"Summary": "The **BASE64 DECODE** command decodes the text or blob value coded in Base64 or Base64URL format passed in the *toDecode* parameter."
		},
		"BASE64 ENCODE": {
			"Syntax": "**BASE64 ENCODE** ( *toEncode* {; *encoded*}{; *} )",
			"Params": [
				[
					"toEncode",
					"Blob, Text",
					"->",
					"Value to encode"
				],
				[
					"<-",
					"Encoded value (if encoded parameter omitted)"
				],
				[
					"encoded",
					"Blob, Text",
					"<-",
					"Encoded value"
				],
				[
					"*",
					"Operator",
					"->",
					"Encode in Base64URL format"
				]
			],
			"Summary": "The **BASE64 ENCODE** command encodes the text or blob value passed in the *toEncode* parameter in Base64 or Base64URL format."
		},
		"BEEP": {
			"Syntax": "**BEEP**",
			"Params": [],
			"Summary": "The BEEP command causes the PC or Macintosh to generate a beep."
		},
		"Before selection": {
			"Syntax": "**Before selection** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to test if record pointer is before the first selected record, or Default table, if omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Yes (TRUE) or No (FALSE)"
				]
			],
			"Summary": "**Before selection** returns TRUE when the current record pointer is before the first record of the current selection of *table*."
		},
		"Before": {
			"Syntax": "**Before**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns True if the execution cycle is a before"
				]
			],
			"Summary": "**Before** returns True for the Before execution cycle."
		},
		"Begin SQL": {
			"Syntax": "**Begin SQL**",
			"Params": [],
			"Summary": "Begin SQL is a keyword used in the Method editor to indicate the beginning of a sequence of SQL commands that must be interpreted by the current data source of the process (the integrated SQL engine of 4D or any source specified via the SQL LOGIN command)."
		},
		"BLOB PROPERTIES": {
			"Syntax": "**BLOB PROPERTIES** ( *blob* ; *compressed* {; *expandedSize* {; *currentSize*}} )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB for which to get information"
				],
				[
					"compressed",
					"Integer",
					"<-",
					"0 = BLOB is not compressed, 1 = Compact compression, 2 = Fast compression, -1 = GZIP Best compression, -2 = GZIP Fast compression"
				],
				[
					"expandedSize",
					"Integer",
					"<-",
					"Size of BLOB (in bytes) when not compressed"
				],
				[
					"currentSize",
					"Integer",
					"<-",
					"Current size of BLOB (in bytes)"
				]
			],
			"Summary": "The **BLOB PROPERTIES** command returns information about the BLOB *blob*."
		},
		"BLOB size": {
			"Syntax": "**BLOB size** ( *blob* ) : Integer",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB field or variable"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Size in bytes of the BLOB"
				]
			],
			"Summary": "BLOB sizereturns the size of *blob* expressed in bytes."
		},
		"BLOB TO DOCUMENT": {
			"Syntax": "**BLOB TO DOCUMENT** ( *document* ; *blob* )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Name of the document"
				],
				[
					"blob",
					"Blob",
					"->",
					"New contents for the document"
				]
			],
			"Summary": "BLOB TO DOCUMENT rewrites the whole contents of *document* using the data stored in *blob*."
		},
		"BLOB to integer": {
			"Syntax": "**BLOB to integer** ( *blob* ; *byteOrder* {; *offset*} ) : Integer",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB from which to get the integer value"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset within the BLOB (expressed in bytes)"
				],
				[
					"",
					"",
					"",
					"New offset after reading"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"2-byte Integer value"
				]
			],
			"Summary": "The BLOB to integer command returns a 2-byte Integer value read from the BLOB *blob*."
		},
		"BLOB to list": {
			"Syntax": "**BLOB to list** ( *blob* {; *offset*} ) : Integer",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB containing a hierarchical list"
				],
				[
					"offset",
					"Integer",
					"<->",
					"Offset within the BLOB (expressed in bytes)"
				],
				[
					"",
					"",
					"",
					"New offset after reading"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Reference to newly created list"
				]
			],
			"Summary": "The BLOB to list command creates a new hierarchical list with the data stored within the BLOB *blob* at the byte offset (starting at zero) specified by *offset* and returns a List Reference number for that new list."
		},
		"BLOB to longint": {
			"Syntax": "**BLOB to longint** ( *blob* ; *byteOrder* {; *offset*} ) : Integer",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB from which to get the Long Integer value"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 = Native byte ordering, 1 = Macintosh byte ordering, 2 = PC byte ordering"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset within the BLOB (expressed in bytes)"
				],
				[
					"",
					"",
					"",
					"New offset after reading"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"4-byte Long Integer value"
				]
			],
			"Summary": "The BLOB to longint command returns a 4-byte Long Integer value read from the BLOB *blob*."
		},
		"BLOB TO PICTURE": {
			"Syntax": "**BLOB TO PICTURE** ( *pictureBlob* ; *picture* {; *codec*} )",
			"Params": [
				[
					"pictureBlob",
					"Blob",
					"->",
					"BLOB containing a picture"
				],
				[
					"picture",
					"Picture",
					"<-",
					"Picture from BLOB"
				],
				[
					"codec",
					"Text",
					"->",
					"Picture codec ID"
				]
			],
			"Summary": "The **BLOB TO PICTURE** command inserts a picture stored in a BLOB into a 4D picture variable or field, regardless its original format."
		},
		"BLOB to print settings": {
			"Syntax": "**BLOB to print settings** ( *printSettings* {; *params*} ) : Integer",
			"Params": [
				[
					"printSettings",
					"Blob",
					"->",
					"BLOB containing print settings"
				],
				[
					"params",
					"Integer",
					"->",
					"0=Restore saved values for number of copies and page range, 1=Reset to default values"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Status code: 1=Operation successful, 0=No current printer, -1=Incorrect parameters, 2=Printer changed"
				]
			],
			"Summary": "The **BLOB to print settings** command replaces the current 4D print settings with the parameters stored in the *printSettings* BLOB."
		},
		"BLOB to real": {
			"Syntax": "**BLOB to real** ( *blob* ; *realFormat* {; *offset*} ) : Real",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB from which to get the Real value"
				],
				[
					"realFormat",
					"Integer",
					"->",
					"0=Native real format, 1=Extended real format, 2=Macintosh Double real format, 3=Windows Double real format"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset within the BLOB (expressed in bytes)"
				],
				[
					"",
					"",
					"",
					"New offset after reading"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Real value"
				]
			],
			"Summary": "The BLOB to real command returns a Real value read from the BLOB *blob*."
		},
		"BLOB to text": {
			"Syntax": "**BLOB to text** ( *blob* ; *textFormat* {; *offset* {; *textLength*}} )  : Text",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB from which to get the text"
				],
				[
					"textFormat",
					"Integer",
					"->",
					"Format and character set of text"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset within the BLOB (expressed in bytes)"
				],
				[
					"",
					"",
					"",
					"New offset after reading"
				],
				[
					"textLength",
					"Integer",
					"->",
					"Number of characters to be read"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Text extracted"
				]
			],
			"Summary": "The BLOB to text command returns a Text value read from the BLOB *blob*."
		},
		"BLOB TO USERS": {
			"Syntax": "**BLOB TO USERS** ( *users* )",
			"Params": [
				[
					"users",
					"Blob",
					"->",
					"BLOB (encrypted) containing database user accounts created and saved by the database Administrator"
				]
			],
			"Summary": "The BLOB TO USERS command replaces the user accounts and groups found in the BLOB *users* in the current database."
		},
		"BLOB TO VARIABLE": {
			"Syntax": "**BLOB TO VARIABLE** ( *blob* ; *variable* {; *offset*} )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB containing 4D variables"
				],
				[
					"variable",
					"Variable",
					"<-",
					"Variable to write with BLOB contents"
				],
				[
					"offset",
					"Integer",
					"<->",
					"Position of variable within BLOB"
				],
				[
					"",
					"",
					"",
					"Position of following variable within BLOB"
				]
			],
			"Summary": "The BLOB TO VARIABLE command rewrites the variable *variable* with the data stored within the BLOB *blob* at the byte offset (starting at zero) specified by *offset*."
		},
		"Bool": {
			"Syntax": "**Bool** ( *expression* ) : Boolean",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"Expression for which to return the boolean form"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Boolean form of the expression"
				]
			],
			"Summary": "The **Bool** command returns the boolean form of the expression you passed in *expression*."
		},
		"BOOLEAN ARRAY FROM SET": {
			"Syntax": "**BOOLEAN ARRAY FROM SET** ( *booleanArr* {; *set*} )",
			"Params": [
				[
					"booleanArr",
					"Boolean array",
					"<-",
					"Array to indicate if a record is in the set or not"
				],
				[
					"set",
					"Text",
					"->",
					"Name of the set or UserSet if this parameter is omitted"
				]
			],
			"Summary": "The BOOLEAN ARRAY FROM SET command fills an array of Booleans indicating if each record in the table is or is not in *set*."
		},
		"BREAK LEVEL": {
			"Syntax": "**BREAK LEVEL** ( *level* {; *pageBreak*} )",
			"Params": [
				[
					"level",
					"Integer",
					"->",
					"Number of break levels"
				],
				[
					"pageBreak",
					"Integer",
					"->",
					"Break level for which to do a page break"
				]
			],
			"Summary": "**BREAK LEVEL** specifies the number of break levels in a report performed using PRINT SELECTION."
		},
		"BRING TO FRONT": {
			"Syntax": "**BRING TO FRONT** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number of the process to pass to the frontmost level"
				]
			],
			"Summary": "**BRING TO FRONT** brings all the windows belonging to *process* to the front."
		},
		"BUILD APPLICATION": {
			"Syntax": "**BUILD APPLICATION** {( *buildAppSettings* )}",
			"Params": [
				[
					"buildAppSettings",
					"Text",
					"->",
					"Full access path of the settings file to use"
				]
			],
			"Summary": "The BUILD APPLICATION command launches the application generation process."
		},
		"Cache info": {
			"Syntax": "**Cache info** {( *dbFilter* )} : Object",
			"Params": [
				[
					"dbFilter",
					"Object",
					"->",
					"Defines list of attributes to be returned (filtered per DB)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Information about cache"
				]
			],
			"Summary": "The **Cache info** command returns an object that contains detailed information about the current cache contents (used memory, loaded tables and indexes, etc.)"
		},
		"CALL FORM": {
			"Syntax": "**CALL FORM** ( *window* ; *formula* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number"
				],
				[
					"formula",
					"Object, Text",
					"->",
					"Formula object or Name of project method"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) passed to formula"
				]
			],
			"Summary": "The **CALL FORM** command executes the 4D code designated in *formula* with the optional *param*(s) in the context of a form displayed in a *window*, regardless of the process owning the window."
		},
		"CALL SUBFORM CONTAINER": {
			"Syntax": "**CALL SUBFORM CONTAINER** ( *event* )",
			"Params": [
				[
					"event",
					"Integer",
					"->",
					"Event to be sent"
				]
			],
			"Summary": "The CALL SUBFORM CONTAINER command lets a subform instance send the *event* to the subform object that contains it."
		},
		"CALL WORKER": {
			"Syntax": "**CALL WORKER** ( *process* ; *formula* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"process",
					"Text, Integer",
					"->",
					"Name or number of worker process"
				],
				[
					"formula",
					"Object, Text",
					"->",
					"Formula object or Name of project method"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) passed to formula"
				]
			],
			"Summary": "The **CALL WORKER** command creates or calls the worker process whose name or ID you passed in *process*, and requests the execution of the code designated by *formula* in its context with the optional *param* parameter(s)."
		},
		"CANCEL TRANSACTION": {
			"Syntax": "**CANCEL TRANSACTION**",
			"Params": [],
			"Summary": "**CANCEL TRANSACTION** cancels the transaction that was started with START TRANSACTION of the corresponding level in the current process."
		},
		"CANCEL": {
			"Syntax": "**CANCEL**",
			"Params": [],
			"Summary": "In the context of data entry, **CANCEL** performs the same action as if the user had pressed the cancel key (**Esc**)."
		},
		"Caps lock down": {
			"Syntax": "**Caps lock down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Caps Lock key"
				]
			],
			"Summary": "Caps lock down returns TRUE if the Caps Lock key is pressed."
		},
		"CHANGE CURRENT USER": {
			"Syntax": "**CHANGE CURRENT USER** {( *user* ; *password* )}",
			"Params": [
				[
					"user",
					"Text, Integer",
					"->",
					"Name or unique user ID"
				],
				[
					"password",
					"Text",
					"->",
					"Password (not encrypted)"
				]
			],
			"Summary": "**CHANGE CURRENT USER** changes the identity of the current user in the database, without needing to quit."
		},
		"CHANGE LICENSES": {
			"Syntax": "**CHANGE LICENSES**",
			"Params": [],
			"Summary": "The CHANGE LICENSES command displays the 4D License Manager dialog box."
		},
		"CHANGE PASSWORD": {
			"Syntax": "**CHANGE PASSWORD** ( *password* )",
			"Params": [
				[
					"password",
					"Text",
					"->",
					"New password"
				]
			],
			"Summary": "CHANGE PASSWORD changes the password of the current user."
		},
		"Change string": {
			"Syntax": "**Change string** ( *source* ; *newChars* ; *where* ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"Original string"
				],
				[
					"newChars",
					"Text",
					"->",
					"New characters"
				],
				[
					"where",
					"Integer",
					"->",
					"Where to start the changes"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Resulting string"
				]
			],
			"Summary": "Change string changes a group of characters in *source* and returns the resulting string."
		},
		"Char": {
			"Syntax": "**Char** ( *charCode* ) : Text",
			"Params": [
				[
					"charCode",
					"Integer",
					"->",
					"Character code"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Character represented by the charCode"
				]
			],
			"Summary": "The **Char** command returns the character whose code is *charCode*."
		},
		"Character code": {
			"Syntax": "**Character code** ( *character* ) : Integer",
			"Params": [
				[
					"character",
					"Text",
					"->",
					"Character for which you want to get the code"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Character code"
				]
			],
			"Summary": "The **Character code** command returns the Unicode UTF-16 code (included between 1 and 65535) of *character*."
		},
		"CHECK LOG FILE": {
			"Syntax": "**CHECK LOG FILE**",
			"Params": [],
			"Summary": "The **CHECK LOG FILE** command displays the dialog box for viewing the current log file of the database (which can also be accessed via the Maintenance Security Center window)"
		},
		"Choose": {
			"Syntax": "**Choose** ( *criterion* ; *value* {; *value2* ; ... ; *valueN*} )  : any",
			"Params": [
				[
					"criterion",
					"Boolean, Integer",
					"->",
					"Value to test"
				],
				[
					"value",
					"Expression",
					"->",
					"Possible values"
				],
				[
					"Function result",
					"any",
					"<-",
					"Value of criterion"
				]
			],
			"Summary": "The **Choose** command returns one of the values passed in the *value1*, *value2*, etc."
		},
		"CLEAR LIST": {
			"Syntax": "**CLEAR LIST** ( *list* {; *} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified, clear sublists from memory, if any. If omitted, sublists (if any) are not cleared."
				]
			],
			"Summary": "The **CLEAR LIST** command deletes the hierarchical list whose list reference number you pass in *list*."
		},
		"CLEAR NAMED SELECTION": {
			"Syntax": "**CLEAR NAMED SELECTION** ( *name* )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of named selection to be cleared"
				]
			],
			"Summary": "**CLEAR NAMED SELECTION** clears *name* from memory and frees the memory used by *name*."
		},
		"CLEAR PASTEBOARD": {
			"Syntax": "**CLEAR PASTEBOARD**",
			"Params": [],
			"Summary": "The CLEAR PASTEBOARD command clears the pasteboard of all its contents."
		},
		"CLEAR SEMAPHORE": {
			"Syntax": "**CLEAR SEMAPHORE** ( *semaphore* )",
			"Params": [
				[
					"semaphore",
					"Text",
					"->",
					"Semaphore to clear"
				]
			],
			"Summary": "**CLEAR SEMAPHORE** erases *semaphore* previously set by the Semaphore function."
		},
		"CLEAR SET": {
			"Syntax": "**CLEAR SET** ( *set* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"Name of the set to clear from memory"
				]
			],
			"Summary": "**CLEAR SET** clears *set* from memory and frees the memory used by *set*."
		},
		"CLEAR VARIABLE": {
			"Syntax": "**CLEAR VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable to clear"
				]
			],
			"Summary": "CLEAR VARIABLE resets *variable* to its default type value (*i.e.*, empty string for Text variables, *0* for numeric variables, no elements for arrays, etc.)."
		},
		"Clickcount": {
			"Syntax": "**Clickcount**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of consecutive clicks"
				]
			],
			"Summary": "The **Clickcount** command returns, in the context of a mouse click event, the number of times the user has clicked in rapid succession with the same mouse button."
		},
		"CLOSE DOCUMENT": {
			"Syntax": "**CLOSE DOCUMENT** ( *docRef* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Document reference number"
				]
			],
			"Summary": "**CLOSE DOCUMENT** closes the document specified by *docRef*."
		},
		"CLOSE PRINTING JOB": {
			"Syntax": "**CLOSE PRINTING JOB**",
			"Params": [],
			"Summary": "The **CLOSE PRINTING JOB** command closes the print job previously opened by the OPEN PRINTING JOB command and sends any printing document that has been assembled to the current printer."
		},
		"CLOSE RESOURCE FILE": {
			"Syntax": "**CLOSE RESOURCE FILE** ( *resFile* )",
			"Params": [
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number"
				]
			],
			"Summary": "The **CLOSE RESOURCE FILE** command closes the resource file whose reference number is passed in *resFile*."
		},
		"CLOSE WINDOW": {
			"Syntax": "**CLOSE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				]
			],
			"Summary": "**CLOSE WINDOW** closes the active window opened by the Open window or Open form window command in the current process."
		},
		"COLLECTION TO ARRAY": {
			"Syntax": "**COLLECTION TO ARRAY** ( *collection* ; *array* {; *propertyName*}{; *array2* ; *propertyName2* ; ... ; *arrayN* ; *propertyNameN*} )",
			"Params": [
				[
					"collection",
					"Collection",
					"->",
					"Collection to copy in array(s)"
				],
				[
					"array",
					"Array",
					"<-",
					"Array to receive the elements of the collection; if propertyName passed, array to receive the values of propertyName in the collection"
				],
				[
					"propertyName",
					"Text",
					"->",
					"Object property name whose values to copy in array (\"\" for all elements)"
				]
			],
			"Summary": "The **COLLECTION TO ARRAY** command fills one or more *array*(s) with elements or *propertyName* values from the *collection* into the *array*(s)."
		},
		"COMBINE PICTURES": {
			"Syntax": "**COMBINE PICTURES** ( *resultingPict* ; *pict1* ; *operator* ; *pict2* {; *horOffset* ; *vertOffset*} )",
			"Params": [
				[
					"resultingPict",
					"Picture",
					"<-",
					"Picture resulting from combination"
				],
				[
					"pict1",
					"Picture",
					"->",
					"First picture to combine"
				],
				[
					"operator",
					"Integer",
					"->",
					"Type of combination to be done"
				],
				[
					"pict2",
					"Picture",
					"->",
					"Second picture to combine"
				],
				[
					"horOffset",
					"Integer",
					"->",
					"Horizontal offset for superimposition"
				],
				[
					"vertOffset",
					"Integer",
					"->",
					"Vertical offset for superimposition"
				]
			],
			"Summary": "The **COMBINE PICTURES** command combines the *pict1* and *pict2* pictures in *operator* mode in order to produce a third, *resultingPict*."
		},
		"Compact data file": {
			"Syntax": "**Compact data file** ( *structurePath* ; *dataPath* {; *archiveFolder* {; *option* {; *method*}}} ) : Text",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"Pathname of structure file"
				],
				[
					"dataPath",
					"Text",
					"->",
					"Pathname of data file to be compacted"
				],
				[
					"archiveFolder",
					"Text",
					"->",
					"Pathname of folder where original data file will be put"
				],
				[
					"option",
					"Integer",
					"->",
					"Compacting options"
				],
				[
					"method",
					"Text",
					"->",
					"Name of 4D callback method"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Complete pathname of folder containing original data file"
				]
			],
			"Summary": "The **Compact data file** command compacts the data file designated by the *dataPath* parameter associated with the *structurePath* structure file."
		},
		"Compare strings": {
			"Syntax": "**Compare strings** ( *aString* ; *bString* {; *options*} ) : Integer",
			"Params": [
				[
					"aText",
					"Text",
					"->",
					"String to compare"
				],
				[
					"bText",
					"Text",
					"->",
					"String to compare"
				],
				[
					"options",
					"Integer",
					"->",
					"Comparison rule(s)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Result of string comparison"
				]
			],
			"Summary": "The **Compare strings** command returns a negative, zero, or positive value depending on if *aString* is evaluated as lower, equal, or higher than *bString*."
		},
		"COMPONENT LIST": {
			"Syntax": "**COMPONENT LIST** ( *componentsArray* )",
			"Params": [
				[
					"componentsArray",
					"Text array",
					"<-",
					"Names of the components"
				]
			],
			"Summary": "The COMPONENT LIST command sizes and fills the *componentsArray* array with the names of the components loaded by the 4D application for the current host database."
		},
		"COMPRESS BLOB": {
			"Syntax": "**COMPRESS BLOB** ( *blob* {; *compression*} )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB to compress"
				],
				[
					"compression",
					"Integer",
					"->",
					"If not omitted: 1, compress as compact as possible 2, compress as fast as possible"
				]
			],
			"Summary": "The **COMPRESS BLOB** command compresses the BLOB *blob* using a compression algorithm."
		},
		"CONFIRM": {
			"Syntax": "**CONFIRM** ( *message* {; *okButtonTitle* {; *cancelButtonTitle*}} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Message to display in the confirmation dialog box"
				],
				[
					"okButtonTitle",
					"Text",
					"->",
					"OK button title"
				],
				[
					"cancelButtonTitle",
					"Text",
					"->",
					"Cancel button title"
				]
			],
			"Summary": "The CONFIRM command displays a confirm dialog box composed of a note icon, a message, an OK button, and a Cancel Button."
		},
		"Contextual click": {
			"Syntax": "**Contextual click**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if a contextual click was detected, otherwise False"
				]
			],
			"Summary": "The Contextual click command returns True if a contextual click has been made"
		},
		"CONVERT COORDINATES": {
			"Syntax": "**CONVERT COORDINATES** ( *xCoord* ; *yCoord* ; *from* ; *to* )",
			"Params": [
				[
					"xCoord",
					"Integer",
					"->",
					"Horizontal coordinate of a point (initial)"
				],
				[
					"<-",
					"Horizontal coordinate of a point (converted)"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"Vertical coordinate of a point (initial)"
				],
				[
					"<-",
					"Vertical coordinate of a point (converted)"
				],
				[
					"from",
					"Integer",
					"->",
					"Coordinates system to convert from"
				],
				[
					"to",
					"Integer",
					"->",
					"Coordinates system to convert to"
				]
			],
			"Summary": "The **CONVERT COORDINATES** command converts the (x;y) coordinates of a point from one coordinate system to another."
		},
		"CONVERT FROM TEXT": {
			"Syntax": "**CONVERT FROM TEXT** ( *4Dtext* ; *charSet* ; *convertedBLOB* )",
			"Params": [
				[
					"4Dtext",
					"Text",
					"->",
					"Text expressed in current character set of 4D"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"Name or Number of character set"
				],
				[
					"convertedBlob",
					"Blob",
					"<-",
					"BLOB containing converted text"
				]
			],
			"Summary": "The CONVERT FROM TEXT command can be used to convert a text expressed in the current character set of 4D to a text expressed in another character set."
		},
		"Convert path POSIX to system": {
			"Syntax": "**Convert path POSIX to system** ( *posixPath* {; *} ) : Text",
			"Params": [
				[
					"posixPath",
					"Text",
					"->",
					"POSIX pathname"
				],
				[
					"*",
					"Operator",
					"->",
					"Encoding option"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Pathname expressed in system syntax"
				]
			],
			"Summary": "The **Convert path POSIX to system** command converts a pathname expressed with the POSIX (Unix) syntax into a pathname expressed with the system syntax."
		},
		"Convert path system to POSIX": {
			"Syntax": "**Convert path system to POSIX** ( *systemPath* {; *} ) : Text",
			"Params": [
				[
					"systemPath",
					"Text",
					"->",
					"Relative or absolute pathname expressed in system syntax"
				],
				[
					"*",
					"Operator",
					"->",
					"Encoding option"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Absolute pathname expressed in POSIX syntax"
				]
			],
			"Summary": "The Convert path system to POSIX command converts a pathname expressed with the system syntax as a pathname expressed with the POSIX (Unix) syntax."
		},
		"CONVERT PICTURE": {
			"Syntax": "**CONVERT PICTURE** ( *picture* ; *codec* {; *compression*} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture to be converted"
				],
				[
					"<-",
					"Converted picture"
				],
				[
					"codec",
					"Text",
					"->",
					"Picture Codec ID"
				],
				[
					"compression",
					"Real",
					"->",
					"Quality of compression"
				]
			],
			"Summary": "The **CONVERT PICTURE** command converts *picture* into a new type."
		},
		"Convert to text": {
			"Syntax": "**Convert to text** ( *blob* ; *charSet* ) : Text",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB containing text expressed in a specific character set"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"Name or Number of BLOB character set"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Contents of BLOB expressed in 4D character set"
				]
			],
			"Summary": "The **Convert to text** command converts the text contained in the *blob* parameter and returns it in text expressed in the character set of 4D."
		},
		"COPY ARRAY": {
			"Syntax": "**COPY ARRAY** ( *source* ; *destination* )",
			"Params": [
				[
					"source",
					"Array",
					"->",
					"Array from which to copy"
				],
				[
					"destination",
					"Array",
					"<-",
					"Array to which to copy"
				]
			],
			"Summary": "The COPY ARRAY command creates or overwrites the destination array *destination* with the exact contents, size, and type of the source array *source*."
		},
		"COPY BLOB": {
			"Syntax": "**COPY BLOB** ( *srcBLOB* ; *dstBLOB* ; *srcOffset* ; *dstOffset* ; *len* )",
			"Params": [
				[
					"srcBlob",
					"Blob",
					"->",
					"Source BLOB"
				],
				[
					"dstBlob",
					"Blob",
					"->",
					"Destination BLOB"
				],
				[
					"srcOffset",
					"Integer",
					"->",
					"Source position for the copy"
				],
				[
					"dstOffset",
					"Integer",
					"->",
					"Destination position for the copy"
				],
				[
					"len",
					"Integer",
					"->",
					"Number of bytes to be copied"
				]
			],
			"Summary": "The COPY BLOB command copies the number of bytes specified by *len* from the BLOB *srcBLOB* to the BLOB *dstBLOB*."
		},
		"COPY DOCUMENT": {
			"Syntax": "**COPY DOCUMENT** ( *sourceName* ; *destinationName* {; *newName*} {; *} )",
			"Params": [
				[
					"sourceName",
					"Text",
					"->",
					"Pathname of file or folder to be copied"
				],
				[
					"destinationName",
					"Text",
					"->",
					"Name or pathname of copied file or folder"
				],
				[
					"newName",
					"Text",
					"->",
					"New name of copied file or folder"
				],
				[
					"*",
					"Operator",
					"->",
					"Override existing document if any"
				]
			],
			"Summary": "The **COPY DOCUMENT** command copies the file or folder specified by *sourceName* to the location specified by *destinationName* and, optionally, renames it."
		},
		"Copy list": {
			"Syntax": "**Copy list** ( *list* ) : Integer",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"Reference to list to be copied"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"List reference number to duplicated list"
				]
			],
			"Summary": "The **Copy list** command duplicates the list whose reference number you pass in *list,* and returns the list reference number of the new list."
		},
		"COPY NAMED SELECTION": {
			"Syntax": "**COPY NAMED SELECTION** ( {*aTable* ;} *name* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to copy selection, or Default table, if omitted"
				],
				[
					"name",
					"Text",
					"->",
					"Name of the named selection to create"
				]
			],
			"Summary": "**COPY NAMED SELECTION** copies the current selection of *aTable* to the named selection *name*."
		},
		"Copy parameters": {
			"Syntax": "**Copy parameters** {( *startFrom* )} : Collection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Starting index (included)"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"New collection containing parameters actually passed"
				]
			],
			"Summary": "The Copy parameters command returns a new collection containing all parameters actually passed to a method or a function."
		},
		"COPY SET": {
			"Syntax": "**COPY SET** ( *srcSet* ; *dstSet* )",
			"Params": [
				[
					"srcSet",
					"Text",
					"->",
					"Source set name"
				],
				[
					"dstSet",
					"Text",
					"->",
					"Destination set name"
				]
			],
			"Summary": "The COPY SET command copies the contents of the set *srcSet* into the set *dstSet*."
		},
		"Cos": {
			"Syntax": "**Cos** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number, in radians, whose cosine is returned"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Cosine of number"
				]
			],
			"Summary": "Cos returns the cosine of *number*, where *number* is expressed in radians."
		},
		"Count in array": {
			"Syntax": "**Count in array** ( *array* ; *value* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array where count should occur"
				],
				[
					"value",
					"Expression",
					"->",
					"Value to count"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of instances found"
				]
			],
			"Summary": "The Count in array command returns the number of times *value* is found in *array*."
		},
		"Count list items": {
			"Syntax": "**Count list items** ( {* ;} *list* {; *} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"*",
					"Operator",
					"->",
					"If omitted (default): Return visible list items (expanded) If specified: Return all list items"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of visible (expanded) list items (if 2nd * omitted) or Total number of list items (if 2nd * present)"
				]
			],
			"Summary": "The Count list items command returns either the number of items currently “visible” or the total number of items in the list whose reference number or object name you pass in *list*."
		},
		"Count menu items": {
			"Syntax": "**Count menu items** ( *menu* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of menu items in the menu"
				]
			],
			"Summary": "The **Count menu items** command returns the number of menu items present in the menu whose number or reference is passed in *menu."
		},
		"Count menus": {
			"Syntax": "**Count menus** {( *process* )} : Integer",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of menus in the current menu bar"
				]
			],
			"Summary": "The **Count menus** command returns the number of menus present in the menu bar."
		},
		"Count parameters": {
			"Syntax": "**Count parameters**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of parameters actually passed"
				]
			],
			"Summary": "The Count parameters command returns the number of parameters passed to a project method."
		},
		"Count screens": {
			"Syntax": "**Count screens**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of monitors"
				]
			],
			"Summary": "The Count screens command returns the number of screen monitors connected to your machine."
		},
		"Count tasks": {
			"Syntax": "**Count tasks**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of open processes (including kernel processes)"
				]
			],
			"Summary": "**Count tasks** returns the highest alive process number in the 4D single-user, 4D remote, or 4D Server (stored procedures) version."
		},
		"Count user processes": {
			"Syntax": "**Count user processes**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of live processes (excluding internal processes)"
				]
			],
			"Summary": "Count user processes returns the current number of \"live\" processes in the 4D application whose type is different from -25 (Internal Timer Process), -31 (Client Manager Process) and -15 (Server Interface Process)."
		},
		"Count users": {
			"Syntax": "**Count users**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of users connected to the server"
				]
			],
			"Summary": "The **Count users** command returns the number of users connected to the server."
		},
		"CREATE ALIAS": {
			"Syntax": "**CREATE ALIAS** ( *targetPath* ; *aliasPath* )",
			"Params": [
				[
					"targetPath",
					"Text",
					"->",
					"Name or access path of the alias/shortcut target"
				],
				[
					"aliasPath",
					"Text",
					"->",
					"Name or full pathname for the alias or shortcut"
				]
			],
			"Summary": "The CREATE ALIAS command creates an alias (named “shortcut” under Windows) for the target file or folder passed in *targetPath*."
		},
		"CREATE DATA FILE": {
			"Syntax": "**CREATE DATA FILE** ( *accessPath* )",
			"Params": [
				[
					"accessPath",
					"Text",
					"->",
					"Name or complete access path of the data file to create"
				]
			],
			"Summary": "The **CREATE DATA FILE** command creates a new data file to disk and replaces the data file opened by the 4D application on-the-fly."
		},
		"Create document": {
			"Syntax": "**Create document** ( *document* {; *fileType*} ) : Time",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document name or Full document pathname or Empty string for standard file dialog box"
				],
				[
					"fileType",
					"Text",
					"->",
					"List of types of documents to be screened, or \"*\" to not screen the documents"
				],
				[
					"Function result",
					"Time",
					"<-",
					"Document reference number"
				]
			],
			"Summary": "The**Create document** command creates a new document and returns its document reference number."
		},
		"CREATE EMPTY SET": {
			"Syntax": "**CREATE EMPTY SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to create an empty set, or Default table, if omitted"
				],
				[
					"set",
					"Text",
					"->",
					"Name of the new empty set"
				]
			],
			"Summary": "**CREATE EMPTY SET** creates a new empty set, *set*, for *aTable*."
		},
		"CREATE FOLDER": {
			"Syntax": "**CREATE FOLDER** ( *folderPath* {; *} )",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"Pathname to new folder to create"
				],
				[
					"*",
					"Operator",
					"->",
					"Create folder hierarchy"
				]
			],
			"Summary": "The **CREATE FOLDER** command creates a folder according to the pathname you pass in *folderPath*."
		},
		"CREATE INDEX": {
			"Syntax": "**CREATE INDEX** ( *aTable* ; *fieldsArray* ; *indexType* ; *indexName* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to create an index"
				],
				[
					"fieldsArray",
					"Pointer array",
					"->",
					"Pointer(s) to field(s) to be indexed"
				],
				[
					"indexType",
					"Integer",
					"->",
					"Type of index to create: -1 = Keywords, 0 = default, 1 = Standard B-Tree, 3 = Cluster B-Tree"
				],
				[
					"indexName",
					"Text",
					"->",
					"Name of index to create"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = asynchronous indexing"
				]
			],
			"Summary": "standard index on one or more fields (composite index)"
		},
		"Create menu": {
			"Syntax": "**Create menu** {( *menu* )} : Text",
			"Params": [
				[
					"menu",
					"Text, Integer, Text",
					"->",
					"Menu reference or Number or Name of menu bar"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Menu reference"
				]
			],
			"Summary": "The **Create menu** command creates a new menu in memory."
		},
		"CREATE RECORD": {
			"Syntax": "**CREATE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to create a new record, or Default table, if omitted"
				]
			],
			"Summary": "**CREATE RECORD** creates a new empty record for *aTable*, but does not display the new record."
		},
		"CREATE RELATED ONE": {
			"Syntax": "**CREATE RELATED ONE** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Many field"
				]
			],
			"Summary": "**CREATE RELATED ONE** performs two actions."
		},
		"CREATE SELECTION FROM ARRAY": {
			"Syntax": "**CREATE SELECTION FROM ARRAY** ( *aTable* ; *recordArray* {; *selectionName*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to create the selection"
				],
				[
					"recordArray",
					"Integer, Boolean array",
					"->",
					"Array of record numbers, or Array of booleans (True = the record is in the selection, False = the record is not in the selection)"
				],
				[
					"selectionName",
					"Text",
					"->",
					"Name of the named selection to create, or Apply the command to the current selection if the parameter is omitted"
				]
			],
			"Summary": "The **CREATE SELECTION FROM ARRAY** command creates the named selection *selectionName*"
		},
		"CREATE SET FROM ARRAY": {
			"Syntax": "**CREATE SET FROM ARRAY** ( *aTable* ; *recordsArray* {; *setName*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table of the set"
				],
				[
					"recordsArray",
					"Integer, Boolean array",
					"->",
					"Array of record numbers, or Array of booleans (True = the record is in the set, False = the record is not in the set)"
				],
				[
					"setName",
					"Text",
					"->",
					"Name of the set to create, or Apply the command to the Userset if omitted"
				]
			],
			"Summary": "The **CREATE SET FROM ARRAY** command creates *setName*"
		},
		"CREATE SET": {
			"Syntax": "**CREATE SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to create a set from the selection, or Default table, if omitted"
				],
				[
					"set",
					"Text",
					"->",
					"Name of the new set"
				]
			],
			"Summary": "**CREATE SET** creates a new set, *set*, for *aTable*, and places the current selection in *set*."
		},
		"CREATE THUMBNAIL": {
			"Syntax": "**CREATE THUMBNAIL** ( *source* ; *dest* {; *width* {; *height* {; *mode* {; *depth*}}}} )",
			"Params": [
				[
					"source",
					"Picture",
					"->",
					"4D picture field or variable to convert as a thumbnail"
				],
				[
					"dest",
					"Picture",
					"<-",
					"Resulting thumbnail"
				],
				[
					"width",
					"Integer",
					"->",
					"Thumbnail width in pixels, Default value = 48"
				],
				[
					"height",
					"Integer",
					"->",
					"Thumbnail height in pixels, Default value = 48"
				],
				[
					"mode",
					"Integer",
					"->",
					"Thumbnail creation mode Default value = Scaled to fit prop centered (6)"
				],
				[
					"depth",
					"Integer",
					"->",
					"Obsolete, do not use"
				]
			],
			"Summary": "The **CREATE THUMBNAIL** command returns a thumbnail from a given source picture."
		},
		"Current client authentication": {
			"Syntax": "**Current client authentication** {( *domain* ; *protocol* )} : Text",
			"Params": [
				[
					"domain",
					"Text",
					"<-",
					"Domain name"
				],
				[
					"protocol",
					"Text",
					"<-",
					"\"Kerberos\", \"NTLM\", or empty string"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Session user login returned by Windows"
				]
			],
			"Summary": "The **Current client authentication** command asks the Windows Active Directory server to authenticate the current client and, if successful, returns the Windows login name for this client (session identifier)."
		},
		"Current date": {
			"Syntax": "**Current date** {( * )} : Date",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Returns the current date from the server"
				],
				[
					"Function result",
					"Date",
					"<-",
					"Current date"
				]
			],
			"Summary": "The Current date command returns the current date as kept by the system clock."
		},
		"Current default table": {
			"Syntax": "**Current default table**  : Pointer",
			"Params": [
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to the default table"
				]
			],
			"Summary": "**Current default table** returns a pointer to the table that has been passed to the last call to DEFAULT TABLE for the current process."
		},
		"Current form name": {
			"Syntax": "**Current form name**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Name of current project form or current table form in the process"
				]
			],
			"Summary": "The **Current form name** command returns the name of the current form defined for the process."
		},
		"Current form table": {
			"Syntax": "**Current form table**  : Pointer",
			"Params": [
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to the table of the currently displayed form"
				]
			],
			"Summary": "The Current form table command returns the pointer to the table of the form being displayed or printed in the current process."
		},
		"Current form window": {
			"Syntax": "**Current form window**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Current form window reference number"
				]
			],
			"Summary": "The **Current form window** command returns the reference of the current form window."
		},
		"Current machine": {
			"Syntax": "**Current machine**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Network name of the machine"
				]
			],
			"Summary": "The Current machine command returns the name of the machine as set in the network parameters of the operating system."
		},
		"Current method name": {
			"Syntax": "**Current method name**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Calling method name"
				]
			],
			"Summary": "The Current method name command returns the method name where it has been invoked."
		},
		"Current method path": {
			"Syntax": "**Current method path**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Full internal pathname of the method being executed"
				]
			],
			"Summary": "The **Current method path** command returns the internal pathname of the database method, trigger, project method, form method or object method being executed."
		},
		"Current process name": {
			"Syntax": "**Current process name**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Name of current process"
				]
			],
			"Summary": "The **Current process name** command returns the name of the process within which this command is called."
		},
		"Current process": {
			"Syntax": "**Current process**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Process number"
				]
			],
			"Summary": "**Current process** returns the process reference number of the process within which this command is called."
		},
		"Current system user": {
			"Syntax": "**Current system user**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Network name of the system user"
				]
			],
			"Summary": "The **Current system user** command returns the owner name of your machine, as set in the current user account on the machine."
		},
		"Current time": {
			"Syntax": "**Current time** {( * )} : Time",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Returns the current time from the server"
				],
				[
					"Function result",
					"Time",
					"<-",
					"Current time"
				]
			],
			"Summary": "The **Current time** command returns the current time from the system clock."
		},
		"Current user": {
			"Syntax": "**Current user** {( *user* )} : Text",
			"Params": [
				[
					"user",
					"Integer",
					"->",
					"User alias or 4D user account"
				],
				[
					"Function result",
					"Text",
					"<-",
					"User name of the current user"
				]
			],
			"Summary": "Current user returns the alias or account name of the current user."
		},
		"CUT NAMED SELECTION": {
			"Syntax": "**CUT NAMED SELECTION** ( {*aTable* ;} *name* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to cut selection, or Default table, if omitted"
				],
				[
					"name",
					"Text",
					"->",
					"Name of the named selection to create"
				]
			],
			"Summary": "**CUT NAMED SELECTION** creates a named selection *name* and moves the current selection of *aTable* to it."
		},
		"Data file encryption status": {
			"Syntax": "**Data file encryption status** ( structurePath , dataPath ) : Object",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"Pathname of 4D structure file to be checked"
				],
				[
					"dataPath",
					"Text",
					"->",
					"Pathname of 4D data file to be checked"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Information about the encryption of the data file and of each table"
				]
			],
			"Summary": "The **Data file encryption status** command returns an object providing the encryption status for the data file designated by the *structurePath* and *dataPath* parameters."
		},
		"Data file": {
			"Syntax": "**Data file** {( *segment* )} : Text",
			"Params": [
				[
					"segment",
					"Integer",
					"->",
					"Obsolete, do not use"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Long name of the data file for the database"
				]
			],
			"Summary": "The Data file command returns the long name of the data file for the database with which you are currently working."
		},
		"Database measures": {
			"Syntax": "**Database measures** {( *options* )} : Object",
			"Params": [
				[
					"options",
					"Object",
					"->",
					"Return options"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object containing database measures"
				]
			],
			"Summary": "The **Database measures** command allows you to get detailed information about 4D database engine events."
		},
		"Date": {
			"Syntax": "**Date** ( *expression* ) : Date",
			"Params": [
				[
					"expression",
					"Text, Date",
					"->",
					"String representing the date to be returned or Date expression"
				],
				[
					"Function result",
					"Date",
					"<-",
					"Date expression"
				]
			],
			"Summary": "The Date command evaluates *expression* and returns a date."
		},
		"Day number": {
			"Syntax": "**Day number** ( *aDate* ) : Integer",
			"Params": [
				[
					"aDate",
					"Date",
					"->",
					"Date for which to return the number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number representing the weekday on which date falls"
				]
			],
			"Summary": "The **Day number** command returns a number representing the weekday on which *aDate* falls."
		},
		"Day of": {
			"Syntax": "**Day of** ( *date* ) : Integer",
			"Params": [
				[
					"date",
					"Date",
					"->",
					"Date for which to return the day"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Day of the month of date"
				]
			],
			"Summary": "The **Day of** command returns the day of the month of *aDate*."
		},
		"Deactivated": {
			"Syntax": "**Deactivated**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns TRUE if the execution cycle is a deactivation"
				]
			],
			"Summary": "The **Deactivated** command returns True in a form or object method when the frontmost window of the frontmost process, containing the form, moves to the back."
		},
		"Dec": {
			"Syntax": "**Dec** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number whose decimal portion is returned"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Decimal part of number"
				]
			],
			"Summary": "Dec returns the decimal (fractional) portion of *number*."
		},
		"DECRYPT BLOB": {
			"Syntax": "**DECRYPT BLOB** ( *toDecrypt* ; *sendPubKey* {; *recipPrivKey*} )",
			"Params": [
				[
					"toDecrypt",
					"Blob",
					"<->",
					"Data to decrypt"
				],
				[
					"",
					"",
					"",
					"Decrypted data"
				],
				[
					"sendPubKey",
					"Blob",
					"->",
					"Sender’s public key"
				],
				[
					"recipPrivKey",
					"Blob",
					"->",
					"Recipient’s private key"
				]
			],
			"Summary": "The DECRYPT BLOB command decrypts the content of the BLOB *toDecrypt* using the sender’s public key *sendPubKey* and, optionally, the recipient’s private key *recipPrivKey*."
		},
		"Decrypt data BLOB": {
			"Syntax": "**Decrypt data BLOB** ( *blobToDecrypt* ; *keyObject* ; *salt* ; *decryptedBLOB* ) : Boolean<br/>**Decrypt data BLOB** ( *blobToDecrypt* ; *passPhrase* ; *salt* ; *decryptedBLOB* ) : Boolean",
			"Params": [
				[
					"blobToDecrypt",
					"Blob",
					"->",
					"BLOB to decrypt"
				],
				[
					"keyObject &#124; passPhrase",
					"Object, Text",
					"->",
					"JSON object containing the encryption key or passphrase for direct encryption key generation (text)"
				],
				[
					"salt",
					"Integer",
					"->",
					"Additional salt for algorithm"
				],
				[
					"decryptedBlob",
					"Blob",
					"<-",
					"decrypted BLOB"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if decryption has been correctly performed, False otherwise"
				]
			],
			"Summary": "The **Decrypt data BLOB** command decrypts the *blobToDecrypt* parameter with the same algorithm as 4D uses to decrypt data (AES-256) and returns the result in *decryptedBLOB*."
		},
		"DEFAULT TABLE": {
			"Syntax": "**DEFAULT TABLE** ( *aTable* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to set as the default"
				]
			],
			"Summary": "**Tip:** Although using **DEFAULT TABLE** and omitting the table name may make the code easier to read, many programmers find that using this command actually causes more problems and confusion than it is worth."
		},
		"DELAY PROCESS": {
			"Syntax": "**DELAY PROCESS** ( *process* ; *duration* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number"
				],
				[
					"duration",
					"Real",
					"->",
					"Duration expressed in ticks"
				]
			],
			"Summary": "DELAY PROCESS delays the execution of a *process* for a number of ticks (1 tick = 1/60th of a second)."
		},
		"DELETE DOCUMENT": {
			"Syntax": "**DELETE DOCUMENT** ( *document* )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document name or Full document pathname"
				]
			],
			"Summary": "The **DELETE DOCUMENT** command deletes the document whose name you pass in *document*."
		},
		"DELETE FOLDER": {
			"Syntax": "**DELETE FOLDER** ( *folder* {; *deleteOption*} )",
			"Params": [
				[
					"folder",
					"Text",
					"->",
					"Name or full path of the folder to be deleted"
				],
				[
					"deleteOption",
					"Integer",
					"->",
					"Folder deletion option"
				]
			],
			"Summary": "The **DELETE FOLDER** command deletes the folder whose name or full path has been passed in *folder*."
		},
		"DELETE FROM ARRAY": {
			"Syntax": "**DELETE FROM ARRAY** ( *array* ; *where* {; *howMany*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array from which to delete elements"
				],
				[
					"where",
					"Integer",
					"->",
					"Element at which to begin deletion"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Number of elements to delete, or 1 element if omitted"
				]
			],
			"Summary": "The DELETE FROM ARRAY command deletes one or more elements from *array*."
		},
		"DELETE FROM BLOB": {
			"Syntax": "**DELETE FROM BLOB** ( *blob* ; *offset* ; *len* )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB from which to delete bytes"
				],
				[
					"offset",
					"Integer",
					"->",
					"Starting offset where bytes will be deleted"
				],
				[
					"len",
					"Integer",
					"->",
					"Number of bytes to be deleted"
				]
			],
			"Summary": "The DELETE FROM BLOB command deletes the number of bytes specified by *len* from the BLOB *blob* at the position specified by *offset* (expressed relative to the beginning of the BLOB)."
		},
		"DELETE FROM LIST": {
			"Syntax": "**DELETE FROM LIST** ( {* ;} *list* ; *itemRef* {; *} )<br/>**DELETE FROM LIST** ( * ; *list* ; * {; *} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number, or 0 for the last item added to the list or * for the currently selected list item"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified, erases sublists (if any) from memory If omitted, sublists (if any) are not erased"
				]
			],
			"Summary": "The **DELETE FROM LIST** command deletes the item designated by the *itemRef* parameter of the list whose reference number or object name is passed in *list*."
		},
		"DELETE INDEX": {
			"Syntax": "**DELETE INDEX** ( *fieldPtr* {; *} )<br/>**DELETE INDEX** ( *indexName* {; *} )",
			"Params": [
				[
					"fieldPtr &#124; indexName",
					"Pointer, Text",
					"->",
					"Pointer to field whose indexes are to be deleted or Name of index to be deleted"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = asynchronous operation"
				]
			],
			"Summary": "The DELETE INDEX command deletes one or more existing indexes from the database."
		},
		"DELETE MENU ITEM": {
			"Syntax": "**DELETE MENU ITEM** ( *menu* ; *menuItem* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				]
			],
			"Summary": "The **DELETE MENU ITEM** command deletes the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem*."
		},
		"DELETE RECORD": {
			"Syntax": "**DELETE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table where the current record will be deleted, or Default table, if omitted"
				]
			],
			"Summary": "**DELETE RECORD** deletes the current record of *aTable* in the process."
		},
		"DELETE SELECTION": {
			"Syntax": "**DELETE SELECTION** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to delete the current selection, or Default table, if omitted"
				]
			],
			"Summary": "**DELETE SELECTION** deletes the current selection of records from *aTable*."
		},
		"Delete string": {
			"Syntax": "**Delete string** ( *source* ; *where* ; *numChars* ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"String from which to delete characters"
				],
				[
					"where",
					"Integer",
					"->",
					"First character to delete"
				],
				[
					"numChars",
					"Integer",
					"->",
					"Number of characters to delete"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Resulting string"
				]
			],
			"Summary": "Delete string deletes *numChars* from *source*, starting at *where*, and returns the resulting string."
		},
		"DELETE USER": {
			"Syntax": "**DELETE USER** ( *userID* )",
			"Params": [
				[
					"userID",
					"Integer",
					"->",
					"ID number of user to delete"
				]
			],
			"Summary": "The **DELETE USER** command deletes the user whose unique user ID number you pass in *userID*."
		},
		"DESCRIBE QUERY EXECUTION": {
			"Syntax": "**DESCRIBE QUERY EXECUTION** ( *status* )",
			"Params": [
				[
					"status",
					"Boolean",
					"->",
					"True=Enable internal query analysis, False=Disable internal query analysis"
				]
			],
			"Summary": "The **DESCRIBE QUERY EXECUTION** command enables or disables the query analysis mode for the current process."
		},
		"DIFFERENCE": {
			"Syntax": "**DIFFERENCE** ( *set1* ; *set2* ; *resultSet* )",
			"Params": [
				[
					"set1",
					"Text",
					"->",
					"Set"
				],
				[
					"set2",
					"Text",
					"->",
					"Set to subtract"
				],
				[
					"resultSet",
					"Text",
					"->",
					"Resulting set"
				]
			],
			"Summary": "**DIFFERENCE** compares *set1* and *set2* and excludes all records that are in *set2* from the *resultSet*."
		},
		"DISABLE MENU ITEM": {
			"Syntax": "**DISABLE MENU ITEM** ( *menu* ; *menuItem* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for the last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Proces reference number"
				]
			],
			"Summary": "The DISABLE MENU ITEM command disables the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem*."
		},
		"Discover data key": {
			"Syntax": "**Discover data key**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if a valid encryption key for the currently open data file has been found, else False"
				]
			],
			"Summary": "The **Discover data key** command searches for a valid encryption key corresponding to the currently opened data file at the root level of all connected devices and returns **True** if successful."
		},
		"DISPLAY NOTIFICATION": {
			"Syntax": "**DISPLAY NOTIFICATION** ( *title* ; *text* {; *duration*} )",
			"Params": [
				[
					"title",
					"Text",
					"->",
					"Notification title"
				],
				[
					"text",
					"Text",
					"->",
					"Notification text"
				],
				[
					"duration",
					"Integer",
					"->",
					"Display duration in seconds"
				]
			],
			"Summary": "The DISPLAY NOTIFICATION command displays a notification message to the user."
		},
		"DISPLAY RECORD": {
			"Syntax": "**DISPLAY RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to display the current record, or Default table, if omitted"
				]
			],
			"Summary": "The **DISPLAY RECORD** command displays the current record of *aTable*, using the current input form."
		},
		"DISPLAY SELECTION": {
			"Syntax": "**DISPLAY SELECTION** ( {*aTable*}{; *selectMode*}{; *enterList*}{; *}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to display, or Default table, if omitted"
				],
				[
					"selectMode",
					"Integer",
					"->",
					"Selection mode"
				],
				[
					"enterList",
					"Boolean",
					"->",
					"Authorize Enter in list option"
				],
				[
					"*",
					"Operator",
					"->",
					"Use output form for one record selection and hide scroll bars in the input form"
				],
				[
					"*",
					"Operator",
					"->",
					"Show scroll bars in the input form (overrides second option of first optional *)"
				]
			],
			"Summary": "**DISPLAY SELECTION** displays the selection of *aTable*, using the output form."
		},
		"Displayed line number": {
			"Syntax": "**Displayed line number**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of row being displayed"
				]
			],
			"Summary": "The **Displayed line number** command only works with the On Display Detail form event."
		},
		"DISTINCT ATTRIBUTE PATHS": {
			"Syntax": "**DISTINCT ATTRIBUTE PATHS** ( *objectField* ; *pathArray* )",
			"Params": [
				[
					"objectField",
					"Field",
					"->",
					"Indexed object field"
				],
				[
					"pathArray",
					"Text array",
					"<-",
					"Array to receive list of distinct paths"
				]
			],
			"Summary": "The **DISTINCT ATTRIBUTE PATHS** command returns the list of distinct paths found in the indexed object field you passed in *objectField* for the current selection of the table to which this field belongs."
		},
		"DISTINCT ATTRIBUTE VALUES": {
			"Syntax": "**DISTINCT ATTRIBUTE VALUES** ( *objectField* ; *path* ; *valuesArray* )",
			"Params": [
				[
					"objectField",
					"Field",
					"->",
					"Object field from which to get the list of distinct attribute values"
				],
				[
					"path",
					"Text",
					"->",
					"Path of attribute whose distinct values you want to get"
				],
				[
					"valuesArray",
					"Text array, Array integer, Boolean array, Date array, Time array",
					"<-",
					"Distinct values in attribute path"
				]
			],
			"Summary": "The **DISTINCT ATTRIBUTE VALUES** command creates and populates the *valuesArray* with non-repeated (unique) values coming from the *path* attribute in the *objectField* field for the current selection of the table to which this field belongs."
		},
		"DISTINCT VALUES": {
			"Syntax": "**DISTINCT VALUES** ( *aField* ; *array* {; *countArray*} )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Indexable field to use for data"
				],
				[
					"array",
					"Array",
					"<-",
					"Array to receive field data"
				],
				[
					"countArray",
					"Array integer, Real array",
					"<-",
					"Array to receive count of each value"
				]
			],
			"Summary": "The **DISTINCT VALUES** command creates and populates the array *array* with non-repeated (unique) values coming from the field *aField* for the current selection of the table to which the field belongs and, optionally, returns the number of occurrences of each value in the *countArray* parameter."
		},
		"DOCUMENT LIST": {
			"Syntax": "**DOCUMENT LIST** ( *pathname* ; *documents* {; *options*} )",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"Pathname to volume, directory or folder"
				],
				[
					"documents",
					"Text array",
					"<-",
					"Names of the documents present at this location"
				],
				[
					"options",
					"Integer",
					"->",
					"Options for building list"
				]
			],
			"Summary": "The **DOCUMENT LIST** command populates the Text array *documents* with the names of the documents located at the location you pass in *pathname*."
		},
		"DOCUMENT TO BLOB": {
			"Syntax": "**DOCUMENT TO BLOB** ( *document* ; *blob* )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Name of the document"
				],
				[
					"blob",
					"Blob",
					"<->",
					"BLOB field or variable to receive the document"
				],
				[
					"",
					"",
					"",
					"Document contents"
				]
			],
			"Summary": "DOCUMENT TO BLOB loads the whole contents of *document* into *blob*."
		},
		"Document to text": {
			"Syntax": "**Document to text** ( *fileName* {; *charSet* {; *breakMode*}} ) : Text",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"Document name or Pathname to document"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"Name or Number of character set"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Processing mode for line breaks"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Text from the document"
				]
			],
			"Summary": "The **Document to text** command lets you retrieve the contents of a file directly on disk in a 4D text variable or text field."
		},
		"DOM Append XML child node": {
			"Syntax": "**DOM Append XML child node** ( *elementRef* ; *childType* ; *childValue* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"childType",
					"Integer",
					"->",
					"Type of child to append"
				],
				[
					"childValue",
					"Text, Blob",
					"->",
					"Text or variable (Text or BLOB) whose value must be inserted as child node"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of child XML element"
				]
			],
			"Summary": "The DOM Append XML child node command is used to append the *childValue* value to the XML node designated by *elementRef*."
		},
		"DOM Append XML element": {
			"Syntax": "**DOM Append XML element** ( *targetElementRef* ; *sourceElementRef* ) : Text",
			"Params": [
				[
					"targetElementRef",
					"Text",
					"->",
					"Reference of XML parent element"
				],
				[
					"sourceElementRef",
					"Text",
					"->",
					"Reference of XML element to append"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of new XML element"
				]
			],
			"Summary": "The DOM Append XML element command is used to add a new XML element to the children of the XML element whose reference is passed in the *targetElementRef* parameter."
		},
		"DOM CLOSE XML": {
			"Syntax": "**DOM CLOSE XML** ( *elementRef* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML root element reference"
				]
			],
			"Summary": "The DOM CLOSE XML command frees up the memory occupied by the XML object designated by *elementRef*."
		},
		"DOM Count XML attributes": {
			"Syntax": "**DOM Count XML attributes** ( *elementRef* ) : Integer",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of attributes"
				]
			],
			"Summary": "The **DOM Count XML attributes** command returns the number of XML attributes present in the XML element designated by *elementRef*."
		},
		"DOM Count XML elements": {
			"Syntax": "**DOM Count XML elements** ( *elementRef* ; *elementName* ) : Integer",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"elementName",
					"Text",
					"->",
					"Name of XML elements to count"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of elements"
				]
			],
			"Summary": "The DOM Count XML elements command returns the number of “child” elements dependent on the *elementRef* parent element and named *elementName*."
		},
		"DOM Create XML element arrays": {
			"Syntax": "**DOM Create XML element arrays** ( *elementRef* ; *xPath* {; *attribNamesArray* ; *attribValuesArray*} {; *attribNamesArray2* ; *attribValuesArray2* ; ... ; *attribNamesArrayN* ; *attribValuesArrayN*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML root element reference"
				],
				[
					"xPath",
					"Text",
					"->",
					"XPath path of the XML element to create"
				],
				[
					"attribNamesArray",
					"Text array",
					"->",
					"Array of attribute names"
				],
				[
					"attribValuesArray",
					"Text array",
					"->",
					"Array of attribute values"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of created XML element"
				]
			],
			"Summary": "The **DOM Create XML element arrays** command is used to add a new element in the *elementRef* XML element, as well as, optionally, attributes and their values in the form of arrays."
		},
		"DOM Create XML element": {
			"Syntax": "**DOM Create XML element** ( *elementRef* ; *xPath* {; *attribName* ; *attrValue*} {; *attribName2* ; *attrValue2* ; ... ; *attribNameN* ; *attrValueN*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Root XML element reference"
				],
				[
					"xPath",
					"Text",
					"->",
					"XPath path of the XML element to create"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute to set"
				],
				[
					"attrValue",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"New attribute value"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of the created XML element"
				]
			],
			"Summary": "The **DOM Create XML element** command creates a new element in the XML element *elementRef* in the path set by the *xPath* parameter and adds attributes to it if necessary."
		},
		"DOM Create XML Ref": {
			"Syntax": "**DOM Create XML Ref** ( *root* {; *nameSpace*} {; *nameSpaceName* ; *nameSpaceValue*} {; *nameSpaceName2* ; *nameSpaceValue2* ; ... ; *nameSpaceNameN* ; *nameSpaceValueN*} ) : Text",
			"Params": [
				[
					"root",
					"Text",
					"->",
					"Name of root element"
				],
				[
					"nameSpace",
					"Text",
					"->",
					"Value of namespace"
				],
				[
					"nameSpaceName",
					"Text",
					"->",
					"Namespace name"
				],
				[
					"nameSpaceValue",
					"Text",
					"->",
					"Namespace value"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Root XML element reference"
				]
			],
			"Summary": "The **DOM Create XML Ref** command creates an empty XML tree in memory and returns its reference."
		},
		"DOM EXPORT TO FILE": {
			"Syntax": "**DOM EXPORT TO FILE** ( *elementRef* ; *filePath* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Root XML element reference"
				],
				[
					"filePath",
					"Text",
					"->",
					"Full access path of the file"
				]
			],
			"Summary": "The DOM EXPORT TO FILE command stores an XML tree in a file on disk."
		},
		"DOM EXPORT TO VAR": {
			"Syntax": "**DOM EXPORT TO VAR** ( *elementRef* ; *vXmlVar* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Root XML element reference"
				],
				[
					"vXmlVar",
					"Text, Blob",
					"<-",
					"Variable to receive XML tree"
				]
			],
			"Summary": "The **DOM EXPORT TO VAR** command saves an XML tree in a text or BLOB variable."
		},
		"DOM Find XML element by ID": {
			"Syntax": "**DOM Find XML element by ID** ( *elementRef* ; *id* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"id",
					"Text",
					"->",
					"Value of ID attribute of element to look for"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of the element found (if applicable)"
				]
			],
			"Summary": "The DOM Find XML element by ID command searches within an XML document for the element whose id attribute equals the value passed in the *id* parameter."
		},
		"DOM Find XML element": {
			"Syntax": "**DOM Find XML element** ( *elementRef* ; *xPath* {; *arrElementRefs*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"xPath",
					"Text",
					"->",
					"XPath path of the element to look for"
				],
				[
					"arrElementRefs",
					"Text array",
					"<-",
					"List of element references found (if applicable)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of the element found (if applicable)"
				]
			],
			"Summary": "The DOM Find XML element command looks for specific XML elements in an XML structure."
		},
		"DOM Get first child XML element": {
			"Syntax": "**DOM Get first child XML element** ( *elementRef* {; *childElemName* {; *childElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"childElemName",
					"Text",
					"<-",
					"Name of child XML element"
				],
				[
					"childElemValue",
					"Text",
					"<-",
					"Value of child XML element"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Child XML element reference"
				]
			],
			"Summary": "The DOM Get first child XML element command returns a reference to the first “child” of the XML element passed in *elementRef*."
		},
		"DOM Get last child XML element": {
			"Syntax": "**DOM Get last child XML element** ( *elementRef* {; *childElemName* {; *childElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"childElemName",
					"Text",
					"<-",
					"Name of child element"
				],
				[
					"childElemValue",
					"Text",
					"<-",
					"Value of child element"
				],
				[
					"Function result",
					"Text",
					"<-",
					"XML element reference"
				]
			],
			"Summary": "The DOM Get last child XML element command returns an XML reference to the last “child” of the XML element passed as reference in *elementRef*."
		},
		"DOM Get next sibling XML element": {
			"Syntax": "**DOM Get next sibling XML element** ( *elementRef* {; *siblingElemName* {; *siblingElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"siblingElemName",
					"Text",
					"<-",
					"Name of sibling XML element"
				],
				[
					"siblingElemValue",
					"Text",
					"<-",
					"Value of sibling XML element"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Sibling XML element reference"
				]
			],
			"Summary": "The DOM Get next sibling XML element command returns a reference to the next “sibling” of the XML element passed as reference."
		},
		"DOM Get parent XML element": {
			"Syntax": "**DOM Get parent XML element** ( *elementRef* {; *parentElemName* {; *parentElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"parentElemName",
					"Text",
					"<-",
					"Name of parent XML element"
				],
				[
					"parentElemValue",
					"Text",
					"<-",
					"Value of parent XML element"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Parent XML element reference"
				]
			],
			"Summary": "The DOM Get parent XML element command returns an XML reference to the “parent” of the XML element passed as reference in *elementRef*."
		},
		"DOM Get previous sibling XML element": {
			"Syntax": "**DOM Get previous sibling XML element** ( *elementRef* {; *siblingElemName* {; *siblingElemValue*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"siblingElemName",
					"Text",
					"<-",
					"Name of sibling XML element"
				],
				[
					"siblingElemValue",
					"Text",
					"<-",
					"Value of sibling XML element"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Sibling XML element reference"
				]
			],
			"Summary": "The DOM Get previous sibling XML element command returns a reference to the previous “sibling” of the XML element passed as reference."
		},
		"DOM Get root XML element": {
			"Syntax": "**DOM Get root XML element** ( *elementRef* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of root element or \"\" in case of error"
				]
			],
			"Summary": "The DOM Get root XML element command returns a reference to the root element of the document to which the XML element that is passed in the *elementRef* parameter belongs."
		},
		"DOM GET XML ATTRIBUTE BY INDEX": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY INDEX** ( *elementRef* ; *attribIndex* ; *attribName* ; *attribValue* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"attribIndex",
					"Integer",
					"->",
					"Attribute index number"
				],
				[
					"attribName",
					"Variable",
					"<-",
					"Attribute name"
				],
				[
					"attribValue",
					"Variable",
					"<-",
					"Attribute value"
				]
			],
			"Summary": "The **DOM GET XML ATTRIBUTE BY INDEX** command gets the name of an attribute specified by its index number as well as its value."
		},
		"DOM GET XML ATTRIBUTE BY NAME": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY NAME** ( *elementRef* ; *attribName* ; *attribValue* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute name"
				],
				[
					"attribValue",
					"Variable",
					"<-",
					"Attribute value"
				]
			],
			"Summary": "The DOM GET XML ATTRIBUTE BY NAME command gets the value of an attribute specified by name."
		},
		"DOM GET XML CHILD NODES": {
			"Syntax": "**DOM GET XML CHILD NODES** ( *elementRef* ; *childTypesArr* ; *nodeRefsArr* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"childTypesArr",
					"Array integer",
					"<-",
					"Types of child nodes"
				],
				[
					"nodeRefsArr",
					"Text array",
					"<-",
					"References or Values of child nodes"
				]
			],
			"Summary": "The **DOM GET XML CHILD NODES** command returns the types and references or values of all the child nodes of the XML element designated by *elementRef*."
		},
		"DOM Get XML document ref": {
			"Syntax": "**DOM Get XML document ref** ( *elementRef* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Reference of existing element in DOM tree"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of first element of a DOM tree (document node)"
				]
			],
			"Summary": "The **DOM Get XML document ref** command is used to recover the reference of the \"document\" element of the DOM tree whose reference you have passed in *elementRef*."
		},
		"DOM GET XML ELEMENT NAME": {
			"Syntax": "**DOM GET XML ELEMENT NAME** ( *elementRef* ; *elementName* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"elementName",
					"Variable",
					"<-",
					"Name of the element"
				]
			],
			"Summary": "The DOM GET XML ELEMENT NAME command returns, in the *elementName* parameter, the name of the XML element designated by *elementRef*."
		},
		"DOM GET XML ELEMENT VALUE": {
			"Syntax": "**DOM GET XML ELEMENT VALUE** ( *elementRef* ; *elementValue* {; *cDATA*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"elementValue",
					"Variable",
					"<-",
					"Value of the element"
				],
				[
					"cDATA",
					"Variable",
					"<-",
					"Contents of the CDATA section"
				]
			],
			"Summary": "The **DOM GET XML ELEMENT VALUE** command returns, in the *elementValue* parameter, the value of the XML element designated by *elementRef*."
		},
		"DOM Get XML element": {
			"Syntax": "**DOM Get XML element** ( *elementRef* ; *elementName* ; *index* ; *elementValue* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"elementName",
					"Text",
					"->",
					"Name of element to get"
				],
				[
					"index",
					"Integer",
					"->",
					"Index number of element to get"
				],
				[
					"elementValue",
					"Variable",
					"<-",
					"Value of the element"
				],
				[
					"Function result",
					"Text",
					"<-",
					"XML reference (16 characters)"
				]
			],
			"Summary": "The DOM Get XML element command returns a reference to the “child” element dependent on the *elementName* and *index* parameters."
		},
		"DOM Get XML information": {
			"Syntax": "**DOM Get XML information** ( *elementRef* ; *xmlInfo* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML root element reference"
				],
				[
					"xmlInfo",
					"Integer",
					"->",
					"Type of information to get"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Value of the XML information"
				]
			],
			"Summary": "The DOM Get XML information command retrieves diverse information about the XML element designated by *elementRef*."
		},
		"DOM Insert XML element": {
			"Syntax": "**DOM Insert XML element** ( *targetElementRef* ; *sourceElementRef* ; *childIndex* ) : Text",
			"Params": [
				[
					"targetElementRef",
					"Text",
					"->",
					"Parent XML element reference"
				],
				[
					"sourceElementRef",
					"Text",
					"->",
					"XML element reference to insert"
				],
				[
					"childIndex",
					"Integer",
					"->",
					"Index of child of target element above which the new element must be inserted"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of new XML element"
				]
			],
			"Summary": "The DOM Insert XML element command can be used to insert a new XML element among the child elements of the XML element whose reference is passed in the *targetElementRef* parameter."
		},
		"DOM Parse XML source": {
			"Syntax": "**DOM Parse XML source** ( *document* {; *validation* {; *dtd* }} ) : Text<br/>**DOM Parse XML source** ( *document* {; *validation* {; *schema* }} ) : Text",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document pathname"
				],
				[
					"validation",
					"Boolean",
					"->",
					"True = Validation False = No validation"
				],
				[
					"dtd &#124; schema",
					"Text",
					"->",
					"Location of the DTD or XML schema"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of XML element"
				]
			],
			"Summary": "The DOM Parse XML source command parses a document containing an XML structure and returns a reference for this document."
		},
		"DOM Parse XML variable": {
			"Syntax": "**DOM Parse XML variable** ( *variable* {; *validation* {; *dtd* }} ) : Text<br/>**DOM Parse XML variable** ( *variable* {; *validation* {; *schema*}} ) : Text",
			"Params": [
				[
					"variable",
					"Blob, Text",
					"->",
					"Name of the variable"
				],
				[
					"validation",
					"Boolean",
					"->",
					"True = Validation by the DTD, False = No validation"
				],
				[
					"dtd &#124; schema",
					"Text",
					"->",
					"Location of the DTD or XML schema"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Reference of XML element"
				]
			],
			"Summary": "The DOM Parse XML variable command parses a BLOB or Text type variable containing an XML structure and returns a reference for this variable."
		},
		"DOM REMOVE XML ATTRIBUTE": {
			"Syntax": "**DOM REMOVE XML ATTRIBUTE** ( *elementRef* ; *attribName* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute to be removed"
				]
			],
			"Summary": "The DOM REMOVE XML ATTRIBUTE command removes, if it exists, the attribute designated by *attribName* from the XML element whose reference is passed in the *elementRef* parameter."
		},
		"DOM REMOVE XML ELEMENT": {
			"Syntax": "**DOM REMOVE XML ELEMENT** ( *elementRef* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				]
			],
			"Summary": "The DOM REMOVE XML ELEMENT command removes the element designated by *elementRef*."
		},
		"DOM SET XML ATTRIBUTE": {
			"Syntax": "**DOM SET XML ATTRIBUTE** ( *elementRef* ; *attribName* ; *attrValue* {; *attribName2* ; *attrValue2* ; ... ; *attribNameN* ; *attrValueN*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute to set"
				],
				[
					"attrValue",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"New attribute value"
				]
			],
			"Summary": "The DOM SET XML ATTRIBUTE command adds one or more attributes to the XML element whose reference is passed in the *elementRef* parameter."
		},
		"DOM SET XML DECLARATION": {
			"Syntax": "**DOM SET XML DECLARATION** ( *elementRef* ; *encoding* {; *standalone* {; *indentation*}} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"encoding",
					"Text",
					"->",
					"XML document character set"
				],
				[
					"standalone",
					"Boolean",
					"->",
					"True = document is standalone False (default) = document is not standalone"
				],
				[
					"indentation",
					"Boolean",
					"->",
					"*** Obsolete, do not use ***"
				]
			],
			"Summary": "The **DOM SET XML DECLARATION** command allows you to define various options that are useful in creating the XML tree set using *elementRef*."
		},
		"DOM SET XML ELEMENT NAME": {
			"Syntax": "**DOM SET XML ELEMENT NAME** ( *elementRef* ; *elementName* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"elementName",
					"Text",
					"->",
					"New name of element"
				]
			],
			"Summary": "The DOM SET XML ELEMENT NAME command modifies the name of the element set by *elementRef*."
		},
		"DOM SET XML ELEMENT VALUE": {
			"Syntax": "**DOM SET XML ELEMENT VALUE** ( *elementRef* {; *xPath*}; *elementValue* {; *} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"xPath",
					"Text",
					"->",
					"XPath path of the XML element"
				],
				[
					"elementValue",
					"Text, Variable",
					"->",
					"New value of element"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: set the value in CDATA"
				]
			],
			"Summary": "The **DOM SET XML ELEMENT VALUE** command modifies the value of the element set by *elementRef*."
		},
		"DRAG WINDOW": {
			"Syntax": "**DRAG WINDOW**",
			"Params": [],
			"Summary": "The DRAG WINDOW command lets users drag the window on which they clicked following the movements of the mouse."
		},
		"Drop position": {
			"Syntax": "**Drop position** {( *columnNumber* )} : Integer<br/>**Drop position** {( *pictPosY* )} : Integer",
			"Params": [
				[
					"columnNumber &#124; pictPosY",
					"Integer",
					"<-",
					"List box column number (-1 if the drop occurs beyond the last column) or Position of Y coordinate in picture"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"• Number (list box) or • Position (hierarchical list) or • Position in string (text/combo box/4D Write Pro area) of destination item or • -1 if drop occurred beyond the last list item • Position of X coordinate in picture"
				]
			],
			"Summary": "The Drop position command can be used to find out the location, in a “complex” destination object, where an object has been (dragged and) dropped."
		},
		"DROP REMOTE USER": {
			"Syntax": "**DROP REMOTE USER** ( *userSession* )",
			"Params": [
				[
					"userSession",
					"Text",
					"->",
					"User's session ID"
				]
			],
			"Summary": "The **DROP REMOTE USER** command disconnects a specific user remotely connected to the 4D Server."
		},
		"DUPLICATE RECORD": {
			"Syntax": "**DUPLICATE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to duplicate the current record, or Default table, if omitted"
				]
			],
			"Summary": "**DUPLICATE RECORD** creates a new record for *aTable* that is a duplicate of the current record."
		},
		"Dynamic pop up menu": {
			"Syntax": "**Dynamic pop up menu** ( *menu* {; *default* {; *xCoord* ; *yCoord*}} )  : Text",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"Menu reference"
				],
				[
					"default",
					"Text",
					"->",
					"Parameter of item selected by default"
				],
				[
					"xCoord",
					"Integer",
					"->",
					"X coordinate of top left corner"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"Y coordinate of top left corner"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Parameter of selected menu item"
				]
			],
			"Summary": "The **Dynamic pop up menu** causes a hierarchical pop-up menu to appear at the current location of the mouse or at the location set by the optional *xCoord* and *yCoord* parameters."
		},
		"EDIT ACCESS": {
			"Syntax": "**EDIT ACCESS**",
			"Params": [],
			"Summary": "EDIT ACCESS lets the user edit the password system."
		},
		"EDIT FORMULA": {
			"Syntax": "**EDIT FORMULA** ( *aTable* ; *formula* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to display by default in the Formula editor"
				],
				[
					"formula",
					"Text",
					"->",
					"Variable containing the formula to display in the Formula editor or \"\" to display editor only"
				],
				[
					"",
					"<-",
					"Formula validated by the user"
				]
			],
			"Summary": "The **EDIT FORMULA** command displays the Formula editor in order to let the user write or modify a formula."
		},
		"EDIT ITEM": {
			"Syntax": "**EDIT ITEM** ( {* ;} *object* {; *item*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If set, object is an object name (string) If omitted, object is a table or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * set) or Table or variable (if * omitted)"
				],
				[
					"item",
					"Integer",
					"->",
					"Item number"
				]
			],
			"Summary": "The **EDIT ITEM** command allows you to edit the current item or the item number *item* in the array or the list set in the *object* parameter."
		},
		"ENABLE MENU ITEM": {
			"Syntax": "**ENABLE MENU ITEM** ( *menu* ; *menuItem* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for the last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Proces reference number"
				]
			],
			"Summary": "The **ENABLE MENU ITEM** command enables the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem*."
		},
		"ENCRYPT BLOB": {
			"Syntax": "**ENCRYPT BLOB** ( *toEncrypt* ; *sendPrivKey* {; *recipPubKey*} )",
			"Params": [
				[
					"toEncrypt",
					"Blob",
					"<->",
					"Data to encrypt"
				],
				[
					"",
					"",
					"",
					"Encrypted data"
				],
				[
					"sendPrivKey",
					"Blob",
					"->",
					"Sender’s private key"
				],
				[
					"recipPubKey",
					"Blob",
					"->",
					"Recipient’s public key"
				]
			],
			"Summary": "The ENCRYPT BLOB command encrypts the content of the *toEncrypt* BLOB with the sender’s private key *sendPrivKey*, as well as optionally the recipient’s public key *recipPubKey*."
		},
		"Encrypt data BLOB": {
			"Syntax": "**Encrypt data BLOB** ( *blobToEncrypt* ; *keyObject* ; *salt* ; *encryptedBLOB* ) : Boolean<br/>**Encrypt data BLOB** ( *blobToEncrypt* ; *passPhrase* ; *salt* ; *encryptedBLOB* ) : Boolean",
			"Params": [
				[
					"blobToEncrypt",
					"Blob",
					"->",
					"BLOB to encrypt"
				],
				[
					"keyObject &#124; passPhrase",
					"Object, Text",
					"->",
					"JSON object containing the encryption key or passphrase for direct encryption key generation (text)"
				],
				[
					"salt",
					"Integer",
					"->",
					"Additional salt for algorithm"
				],
				[
					"encryptedBlob",
					"Blob",
					"<-",
					"Encrypted BLOB"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if encryption has been correctly performed, False otherwise"
				]
			],
			"Summary": "The **Encrypt data BLOB** command encrypts the *blobToEncrypt* parameter with the same algorithm as 4D uses to encrypt data (AES-256) and returns the result in *encryptedBlob*."
		},
		"Encrypt data file": {
			"Syntax": "**Encrypt data file** ( *structurePath* ; *dataPath* {; *newPassPhrase* {; *archiveFolder* {; *curPassPhrase* {; *methodName*}}}} ) : Text<br/>**Encrypt data file** ( *structurePath* ; *dataPath* {; *newDataKey* {; *archiveFolder* {; *curDataKey* {; *methodName*}}}} ) : Text",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"Pathname of structure file"
				],
				[
					"dataPath",
					"Text",
					"->",
					"Pathname of data file to encrypt"
				],
				[
					"newPassPhrase &#124; newDataKey",
					"Text, Object",
					"->",
					"In case of replacement: new passPhrase (text) or new encryption key (object)"
				],
				[
					"archiveFolder",
					"Text",
					"->",
					"Pathname of folder where original files will be stored"
				],
				[
					"curPassPhrase &#124; curDataKey",
					"Text, Object",
					"->",
					"Current passPhrase (text) or current encryption key (object)"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of 4D callback method"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Full pathname of folder where original files have been stored"
				]
			],
			"Summary": "The **Encrypt data file** command is used to encrypt or re-encrypt the data file designated by the *dataPath* parameter associated to the *structurePath* parameter."
		},
		"End selection": {
			"Syntax": "**End selection** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to test if record pointer is beyond the last selected record, or Default table, if omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Yes (TRUE) or No (FALSE)"
				]
			],
			"Summary": "**End selection** returns TRUE when the current record pointer is beyond the last record of the current selection of *aTable*."
		},
		"End SQL": {
			"Syntax": "**End SQL**",
			"Params": [],
			"Summary": "**End SQL** is a keyword indicating the end of a sequence of SQL commands in the Method editor."
		},
		"Equal pictures": {
			"Syntax": "**Equal pictures** ( *picture1* ; *picture2* ; *mask* ) : Boolean",
			"Params": [
				[
					"picture1",
					"Picture, Picture",
					"->",
					"Original source picture"
				],
				[
					"picture2",
					"Picture, Picture",
					"->",
					"Picture to compare"
				],
				[
					"mask",
					"Picture, Picture",
					"<-",
					"Resulting mask"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if both pictures are identical; otherwise, False"
				]
			],
			"Summary": "The **Equal pictures** command precisely compares both the dimensions and the contents of two pictures."
		},
		"ERASE WINDOW": {
			"Syntax": "**ERASE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				]
			],
			"Summary": "The **ERASE WINDOW** command clears the contents of the window whose reference number is passed in *window*."
		},
		"Euro converter": {
			"Syntax": "**Euro converter** ( *value* ; *fromCurrency* ; *toCurrency* ) : Real",
			"Params": [
				[
					"value",
					"Real",
					"->",
					"Value to convert"
				],
				[
					"fromCurrency",
					"Text",
					"->",
					"Code of the currency in which the value is expressed"
				],
				[
					"toCurrency",
					"Text",
					"->",
					"Code of the currency into which the value must be converted"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Converted value"
				]
			],
			"Summary": "The **Euro converter** command converts any value from and to the different currencies belonging to “Euroland” and the Euro currency itself."
		},
		"EXECUTE FORMULA": {
			"Syntax": "**EXECUTE FORMULA** ( *statement* )",
			"Params": [
				[
					"statement",
					"Text",
					"->",
					"Code to be executed"
				]
			],
			"Summary": "**EXECUTE FORMULA** executes *statement* as a line of code."
		},
		"EXECUTE METHOD IN SUBFORM": {
			"Syntax": "**EXECUTE METHOD IN SUBFORM** ( *subformObject* ; *formula* {; *return* {; *param*} {; *param2* ; ... ; *paramN*}} )",
			"Params": [
				[
					"subformObject",
					"Text",
					"->",
					"Name of subform object"
				],
				[
					"formula",
					"Object, Text",
					"->",
					"Formula object or Name of project method"
				],
				[
					"return",
					"*, Variable",
					"->",
					"* if formula does not return a value"
				],
				[
					"<-",
					"Value returned by formula"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) passed to formula"
				]
			],
			"Summary": "The EXECUTE METHOD IN SUBFORM command can be used to execute the code designated by *formula* in the context of the *subformObject* subform object."
		},
		"EXECUTE METHOD": {
			"Syntax": "**EXECUTE METHOD** ( *methodName* {; *result* {; *param*}}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"methodName",
					"Text",
					"->",
					"Name of project method to be executed"
				],
				[
					"result",
					"Variable, *",
					"<-",
					"Variable receiving the method result or * for a method not returning a result"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) of the method"
				]
			],
			"Summary": "The EXECUTE METHOD command executes the *methodName* project method while passing any parameters in *param1."
		},
		"EXECUTE ON CLIENT": {
			"Syntax": "**EXECUTE ON CLIENT** ( *clientName* ; *methodName* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"clientName",
					"Text",
					"->",
					"4D Client’s registered name"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of the method to execute"
				],
				[
					"param",
					"->",
					"Method’s parameter(s)"
				]
			],
			"Summary": "The **EXECUTE ON CLIENT** command forces the execution of the *methodName* method, with the parameters *param1."
		},
		"Execute on server": {
			"Syntax": "**Execute on server** ( *procedure* ; *stack* {; *name* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"procedure",
					"Text",
					"->",
					"Procedure to be executed within the process"
				],
				[
					"stack",
					"Integer",
					"->",
					"Stack size in bytes"
				],
				[
					"name",
					"Text",
					"->",
					"Name of the process created"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) to the procedure"
				],
				[
					"*",
					"Operator",
					"->",
					"Unique process"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Process number for newly created process or already executing process"
				]
			],
			"Summary": "The **Execute on server** command starts a new process on the Server machine (if it is called in Client/Server) or on the same machine (if it is called in single-user) and returns the process number for that process."
		},
		"Exp": {
			"Syntax": "**Exp** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number to evaluate"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Natural log base by the power of number"
				]
			],
			"Summary": "Exp raises the natural log base (e = 2.71828...) by the power of *number*."
		},
		"EXPAND BLOB": {
			"Syntax": "**EXPAND BLOB** ( *blob* )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB to expand"
				]
			],
			"Summary": "The **EXPAND BLOB** command expands the BLOB *blob* that was previously compressed using the COMPRESS BLOB command*."
		},
		"EXPORT DATA": {
			"Syntax": "**EXPORT DATA** ( *fileName* {; *project* {; *}} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"Full path name of the export file"
				],
				[
					"project",
					"Text, Blob",
					"->",
					"Contents of the export project"
				],
				[
					"<-",
					"New contents of the export project (if the * parameter has been passed)"
				],
				[
					"*",
					"Operator",
					"->",
					"Displays the export dialog box and updates the project"
				]
			],
			"Summary": "The **EXPORT DATA** command exports data in the *fileName* file."
		},
		"EXPORT DIF": {
			"Syntax": "**EXPORT DIF** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to export data,or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"DIF document to receive the data"
				]
			],
			"Summary": "The EXPORT DIF command writes data from the records of the current selection of *aTable* in the current process."
		},
		"Export structure file": {
			"Syntax": "**Export structure file** ( *folderPath* {; *options*} ) : Object",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"Path of the destination folder for project files"
				],
				[
					"options",
					"Object",
					"->",
					"Export options"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Validation status and messages (if any)"
				]
			],
			"Summary": "The **Export structure file** command breaks down the current 4D database structure into a set of text-based files or native picture files and stores them in the specified *folderPath*."
		},
		"EXPORT STRUCTURE": {
			"Syntax": "**EXPORT STRUCTURE** ( *exportedStructure* {; *format*} )",
			"Params": [
				[
					"exportedStructure",
					"Text",
					"<-",
					"Export of the 4D database structure definition (by default in XML format)"
				],
				[
					"format",
					"Text",
					"->",
					"Export format: xml format (default) or html format"
				]
			],
			"Summary": "The **EXPORT STRUCTURE** command exports the structure definition of the current 4D database in *exportedStructure*."
		},
		"EXPORT SYLK": {
			"Syntax": "**EXPORT SYLK** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to export data, or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"SYLK document to receive the data"
				]
			],
			"Summary": "The EXPORT SYLK command writes data from the records of the current selection of *aTable* in the current process."
		},
		"EXPORT TEXT": {
			"Syntax": "**EXPORT TEXT** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to export data, or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"Text document to receive the data"
				]
			],
			"Summary": "The EXPORT TEXT command writes data from the records of the current selection of *aTable* in the current process."
		},
		"False": {
			"Syntax": "**False**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"False"
				]
			],
			"Summary": "False returns the Boolean value False."
		},
		"Field name": {
			"Syntax": "**Field name** ( *fieldPtr* ) : Text<br/>**Field name** ( *tableNum* ; *fieldNum* ) : Text",
			"Params": [
				[
					"fieldPtr &#124; tableNum",
					"Pointer, Integer",
					"->",
					"Field pointer or Table number"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"Field number if a table number is passed as first parameter"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of the field"
				]
			],
			"Summary": "The Field name command returns the name of the field whose pointer you pass in *fieldPtr* or whose table and field number you pass in *tableNum* and *fieldNum*."
		},
		"Field": {
			"Syntax": "**Field** ( *tableNum* ; *fieldNum* ) -> fieldPtr  <br/>\n**Field** ( *fieldPtr* ) -> fieldNum",
			"Params": [
				[
					"tableNum",
					"Integer",
					"->",
					"Table number"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"Field number"
				],
				[
					"fieldPtr",
					"Pointer",
					"<-",
					"Field pointer"
				],
				[
					"Field ( fieldPtr ) -> fieldNum"
				],
				[
					"Parameter",
					"Type",
					"Description"
				],
				[
					"fieldPtr",
					"Pointer",
					"->",
					"Field pointer"
				],
				[
					"fieldNum",
					"Integer",
					"<-",
					"Field number"
				]
			],
			"Summary": "returns the field number of the field"
		},
		"FILTER EVENT": {
			"Syntax": "**FILTER EVENT**",
			"Params": [],
			"Summary": "You call the **FILTER EVENT** command from within an event-handling project method installed using the ON EVENT CALL command."
		},
		"FILTER KEYSTROKE": {
			"Syntax": "**FILTER KEYSTROKE** ( *filteredChar* )",
			"Params": [
				[
					"filteredChar",
					"Text",
					"->",
					"Filtered keystroke character or Empty string to cancel the keystroke"
				]
			],
			"Summary": "**FILTER KEYSTROKE** enables you to replace the character entered by the user into a field or an enterable area with the first character of the string *filteredChar* you pass."
		},
		"Find in array": {
			"Syntax": "**Find in array** ( *array* ; *value* {; *start*} ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array to search"
				],
				[
					"value",
					"Expression",
					"->",
					"Value of same type to search in the array"
				],
				[
					"start",
					"Integer",
					"->",
					"Element at which to start searching"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of the first element in array that matches value"
				]
			],
			"Summary": "The Find in array command returns the number of the first element in *array* that matches *value*."
		},
		"Find in field": {
			"Syntax": "**Find in field** ( *targetField* ; *value* ) : Integer",
			"Params": [
				[
					"targetField",
					"Field",
					"->",
					"Field on which to execute the search"
				],
				[
					"value",
					"Field, Variable",
					"->",
					"Value to search"
				],
				[
					"<-",
					"Value found"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of the record found or -1 if no record was found"
				]
			],
			"Summary": "The **Find in field** command returns the number of the first record whose *targetField* field is equal to *value*."
		},
		"Find in list": {
			"Syntax": "**Find in list** ( {* ;} *list* ; *value* ; *scope* {; *itemsArray* {; *}} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) Name of list type object (if * passed)"
				],
				[
					"value",
					"Text",
					"->",
					"Value to be searched for"
				],
				[
					"scope",
					"Integer",
					"->",
					"0=Main list, 1=Sublist"
				],
				[
					"itemsArray",
					"Array integer",
					"<-",
					"- If 2nd * omitted: array of positions of items found - If 2nd * passed: array of reference numbers of items found"
				],
				[
					"*",
					"Operator",
					"->",
					"- If omitted: use position of items - If passed: use reference number of items"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"- If 2nd * omitted: position of item found - If 2nd * passed: reference number of item found"
				]
			],
			"Summary": "The **Find in list** command returns the position or reference of the first item of the *list* that is equivalent to the string passed in *value*."
		},
		"Find in sorted array": {
			"Syntax": "**Find in sorted array** ( *array* ; *value* ; > or < {; *posFirst* {; *posLast*}} ) : Boolean",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array to search"
				],
				[
					"value",
					"Expression",
					"->",
					"Value (same type as array) to search for in the array"
				],
				[
					"> or <",
					"Operator",
					"->",
					"> if array is sorted in ascending order, < if it is sorted in descending order"
				],
				[
					"posFirst",
					"Integer",
					"<-",
					"Position of its first occurrence if the value is found; otherwise position where the value should be inserted"
				],
				[
					"posLast",
					"Integer",
					"<-",
					"Position of its last occurrence if the value is found; otherwise same as posFirst"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if at least one element in array matches the value, False otherwise"
				]
			],
			"Summary": "The **Find in sorted array** command returns **true** if at least one element in the sorted *array* matches the *value*, and optionally returns position(s) of matched element(s)."
		},
		"Find window": {
			"Syntax": "**Find window** ( *left* ; *top* {; *windowPart*} ) : Integer",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"Global left coordinate"
				],
				[
					"top",
					"Integer",
					"->",
					"Global top coordinate"
				],
				[
					"windowPart",
					"Integer",
					"<-",
					"3 if window is \"touched\", 0 otherwise"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Window reference number"
				]
			],
			"Summary": "The **Find window** command returns (if any) the reference number of the first window “touched” by the point whose coordinates passed in *left* and *top*."
		},
		"FIRST RECORD": {
			"Syntax": "**FIRST RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to move to the first selected record, or Default table, if omitted"
				]
			],
			"Summary": "**FIRST RECORD** makes the first record of the current selection of *aTable* the current record, and loads the record from disk."
		},
		"FLUSH CACHE": {
			"Syntax": "**FLUSH CACHE** {( size )}<br/>**FLUSH CACHE** {( * )}",
			"Params": [
				[
					"size &#124; *",
					"Real, Operator",
					"->",
					"* to completely free cache memory, or number of bytes to free in cache"
				]
			],
			"Summary": "The FLUSH CACHE command immediately saves the data buffers to disk."
		},
		"Focus object": {
			"Syntax": "**Focus object**  : Pointer",
			"Params": [
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to the object having the focus"
				]
			],
			"Summary": "This command is kept only for compatibility reasons."
		},
		"FOLDER LIST": {
			"Syntax": "**FOLDER LIST** ( *pathname* ; *directories* )",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"Pathname to volume, directory or folder"
				],
				[
					"directories",
					"Text array",
					"<-",
					"Names of the directories present at this location"
				]
			],
			"Summary": "The **FOLDER LIST** command populates the Text or String array *directories* with the names of the folders located at the pathname you pass in *pathname*."
		},
		"Font file": {
			"Syntax": "**Font file** ( *fontFamily* {; *fontStyle*} ) : any",
			"Params": [
				[
					"fontFamily",
					"Text",
					"->",
					"Name of font family"
				],
				[
					"fontStyle",
					"Integer",
					"->",
					"Font style: 0=normal (default), 1=bold, 2=italic"
				],
				[
					"Function result",
					"Null, Object",
					"<-",
					"Font file object"
				]
			],
			"Summary": "The **Font file** command returns an object describing the font file in your OS corresponding to the *fontFamily* and, optionally, *fontStyle* you passed in parameter."
		},
		"FONT LIST": {
			"Syntax": "**FONT LIST** ( *fonts* {; *listType* } )<br/>**FONT LIST** ( *fonts* {; *} )",
			"Params": [
				[
					"fonts",
					"Text array",
					"<-",
					"Array of font names"
				],
				[
					"listType &#124; *",
					"Integer, Operator",
					"->",
					"Font type list to return or * to return font names under macOS"
				]
			],
			"Summary": "The **FONT LIST** command populates the *fonts* text array with the names of scalable fonts available on your system."
		},
		"FONT STYLE LIST": {
			"Syntax": "**FONT STYLE LIST** ( *fontFamily* ; *fontStyleList* ; *fontNameList* )",
			"Params": [
				[
					"fontFamily",
					"Text",
					"->",
					"Name of font family"
				],
				[
					"fontStyleList",
					"Text array",
					"<-",
					"List of font styles supported by the font family"
				],
				[
					"fontNameList",
					"Text array",
					"<-",
					"List of complete font names supported by the font family"
				]
			],
			"Summary": "The **FONT STYLE LIST** command returns the list of font styles and the list of complete font names supported by the font family defined in the *fontFamily* parameter."
		},
		"FORM Convert to dynamic": {
			"Syntax": "**FORM Convert to dynamic** ( {*aTable* ;} *formName* ) : Object",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Form table"
				],
				[
					"formName",
					"Text",
					"->",
					"Name of a \"classic\" project or table form"
				],
				[
					"Function result",
					"Object",
					"<-",
					"formName converted to dynamic form"
				]
			],
			"Summary": "The **FORM Convert to dynamic** command converts the *formName* (classic form) to a dynamic form and returns it in an object."
		},
		"FORM FIRST PAGE": {
			"Syntax": "**FORM FIRST PAGE**",
			"Params": [],
			"Summary": "FORM FIRST PAGE changes the currently displayed form page to the first form page."
		},
		"FORM Get color scheme": {
			"Syntax": "**FORM Get color scheme**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Color scheme of current form: \"light\" or \"dark\""
				]
			],
			"Summary": "The **FORM Get color scheme** command returns the name of the actual color scheme of the currently displayed form."
		},
		"FORM Get current page": {
			"Syntax": "**FORM Get current page** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Returns number of current subform page"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of currently displayed form page"
				]
			],
			"Summary": "The **FORM Get current page** command returns the number of the currently displayed form page or of the current form loaded by the FORM LOAD command."
		},
		"FORM GET ENTRY ORDER": {
			"Syntax": "**FORM GET ENTRY ORDER** ( *objectNames* {; *pageNumber* } )<br/>**FORM GET ENTRY ORDER** ( *objectNames* {; *} )",
			"Params": [
				[
					"objectNames",
					"Text array",
					"<-",
					"Object names sorted by entry order"
				],
				[
					"pageNumber &#124; *",
					"Integer, Operator",
					"->",
					"Number of the page for which to get the defined entry order (current page if omitted), or* to get the actual entry order of the current page"
				]
			],
			"Summary": "The **FORM GET ENTRY ORDER** command returns in *objectNames* the sorted names of objects that define the form entry order."
		},
		"FORM GET HORIZONTAL RESIZING": {
			"Syntax": "**FORM GET HORIZONTAL RESIZING** ( *resize* {; *minWidth* {; *maxWidth*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"<-",
					"True: Form can be resized horizontally<br/>False: Form cannot be resized horizontally"
				],
				[
					"minWidth",
					"Integer",
					"<-",
					"Smallest form width allowed (pixels)"
				],
				[
					"maxWidth",
					"Integer",
					"<-",
					"Largest form width allowed (pixels)"
				]
			],
			"Summary": "The FORM GET HORIZONTAL RESIZING command returns the horizontal resizing properties of the current form in the *resize*, *minWidth* and *maxWidth* variables."
		},
		"FORM GET NAMES": {
			"Syntax": "**FORM GET NAMES** ( {*aTable* ;} *arrNames* {; *filter* {; *marker*}}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table reference"
				],
				[
					"arrNames",
					"Text array",
					"<-",
					"Array of form names"
				],
				[
					"filter",
					"Text",
					"->",
					"Name filter"
				],
				[
					"marker",
					"Real",
					"->",
					"Marker for minimum version to return"
				],
				[
					"<-",
					"New value"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **FORM GET NAMES** command fills the *arrNames* array with the names of forms in the application."
		},
		"FORM GET OBJECTS": {
			"Syntax": "**FORM GET OBJECTS** ( *objectsArray* {; *variablesArray* {; *pagesArray*}} {; *formPageOption*} )<br/>**FORM GET OBJECTS** ( *objectsArray* {; *variablesArray* {; *pagesArray*}} {; *} )",
			"Params": [
				[
					"objectsArray",
					"Text array",
					"<-",
					"Name of form objects"
				],
				[
					"variablesArray",
					"Pointer array",
					"<-",
					"Pointers to variables or fields associated with objects"
				],
				[
					"pagesArray",
					"Array integer",
					"<-",
					"Page number of each object"
				],
				[
					"formPageOption &#124; *",
					"Integer, Operator",
					"->",
					"1=Form current page, 2=Form all pages, 4=Form inherited<br/>If * passed (obsolete) = current page with inherited objects"
				]
			],
			"Summary": "The FORM GET OBJECTS command returns the list of all objects present in the current form in the form of (an) array(s)."
		},
		"FORM GET PROPERTIES": {
			"Syntax": "**FORM GET PROPERTIES** ( {*aTable* ;} *formName* ; *width* ; *height* {; *numPages* {; *fixedWidth* {; *fixedHeight* {; *title*}}}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table of the form or Default table, if omitted"
				],
				[
					"formName",
					"Text",
					"->",
					"Name of the form"
				],
				[
					"width",
					"Integer",
					"<-",
					"Width of the form (in pixels)"
				],
				[
					"height",
					"Integer",
					"<-",
					"Height of the form (in pixels)"
				],
				[
					"numPages",
					"Integer",
					"<-",
					"Number of pages in the form"
				],
				[
					"fixedWidth",
					"Boolean",
					"<-",
					"True = Fixed width, False = Variable width"
				],
				[
					"fixedHeight",
					"Boolean",
					"<-",
					"True = Fixed height, False = Variable height"
				],
				[
					"title",
					"Text",
					"<-",
					"Title of the form’s window"
				]
			],
			"Summary": "The FORM GET PROPERTIES command returns the properties of the form *formName*."
		},
		"FORM GET VERTICAL RESIZING": {
			"Syntax": "**FORM GET VERTICAL RESIZING** ( *resize* {; *minHeight* {; *maxHeight*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"<-",
					"True: Form can be resized vertically<br/>False: Form cannot be resized vertically"
				],
				[
					"minHeight",
					"Integer",
					"<-",
					"Smallest form height allowed (pixels)"
				],
				[
					"maxHeight",
					"Integer",
					"<-",
					"Largest form height allowed (pixels)"
				]
			],
			"Summary": "The FORM GET VERTICAL RESIZING command returns the vertical resizing properties of the current form in the *resize*, *minHeight* and *maxHeight* variables."
		},
		"FORM GOTO PAGE": {
			"Syntax": "**FORM GOTO PAGE** ( *pageNumber* {; *} )",
			"Params": [
				[
					"pageNumber",
					"Integer",
					"->",
					"Form page to display"
				],
				[
					"*",
					"Operator",
					"->",
					"Change page of current subform"
				]
			],
			"Summary": "**FORM GOTO PAGE** changes the currently displayed form page to the form page specified by *pageNumber*."
		},
		"FORM LAST PAGE": {
			"Syntax": "**FORM LAST PAGE**",
			"Params": [],
			"Summary": "FORM LAST PAGE changes the currently displayed form page to the last form page."
		},
		"FORM NEXT PAGE": {
			"Syntax": "**FORM NEXT PAGE**",
			"Params": [],
			"Summary": "FORM NEXT PAGE changes the currently displayed form page to the next form page."
		},
		"FORM PREVIOUS PAGE": {
			"Syntax": "**FORM PREVIOUS PAGE**",
			"Params": [],
			"Summary": "FORM PREVIOUS PAGE changes the currently displayed form page to the previous form page."
		},
		"FORM SCREENSHOT": {
			"Syntax": "**FORM SCREENSHOT** ( {{*aTable* ;} *formName* ;} *formPict* {; *pageNum*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Form table"
				],
				[
					"formName",
					"Text",
					"->",
					"Name of form"
				],
				[
					"formPict",
					"Picture",
					"<-",
					"Picture of form being executed if first parameter(s) omitted, or <br/>Picture of form in Form editor if a form name is passed"
				],
				[
					"pageNum",
					"Integer",
					"->",
					"Form page number"
				]
			],
			"Summary": "The FORM SCREENSHOT command returns a form as a picture."
		},
		"FORM SET ENTRY ORDER": {
			"Syntax": "**FORM SET ENTRY ORDER** ( *objectNames* {; *pageNumber*} )",
			"Params": [
				[
					"objectNames",
					"Text array",
					"->",
					"Array of object names in their expected entry order"
				],
				[
					"pageNumber",
					"Integer",
					"->",
					"Number of the page to set the entry order (current page if omitted)"
				]
			],
			"Summary": "The **FORM SET ENTRY ORDER** command allows to set dynamically the entry order of the current form for the current process based upon the *objectNames* array."
		},
		"FORM SET HORIZONTAL RESIZING": {
			"Syntax": "**FORM SET HORIZONTAL RESIZING** ( *resize* {; *minWidth* {; *maxWidth*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"->",
					"True: The form can be resized horizontally False: The form cannot be resized horizontally"
				],
				[
					"minWidth",
					"Integer",
					"->",
					"Smallest form width allowed (pixels)"
				],
				[
					"maxWidth",
					"Integer",
					"->",
					"Largest form width allowed (pixels)"
				]
			],
			"Summary": "The FORM SET HORIZONTAL RESIZING command allows you to change the horizontal resizing properties of the current form through programming."
		},
		"FORM SET INPUT": {
			"Syntax": "**FORM SET INPUT** ( {*aTable* ;} *form* {; *userForm* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to set the input form, or Default table, if omitted"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of table form, or a POSIX path (string) to a .json file describing the form, oran object describing the form"
				],
				[
					"userForm",
					"Text",
					"->",
					"Name of user form to use"
				],
				[
					"*",
					"Operator",
					"->",
					"Automatic window size"
				]
			],
			"Summary": "The **FORM SET INPUT** command sets the current input form for *aTable* to *form*, or *userForm*."
		},
		"FORM SET OUTPUT": {
			"Syntax": "**FORM SET OUTPUT** ( {*aTable* ;} *form* {; *userForm*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to set the output form, or Default table, if omitted"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of table form, or a POSIX path (string) to a .json file describing the form, oran object describing the form"
				],
				[
					"userForm",
					"Text",
					"->",
					"Name of user form to use"
				]
			],
			"Summary": "The **FORM SET OUTPUT**  command sets the current output form for *table* to *form*, or *userForm*."
		},
		"FORM SET SIZE": {
			"Syntax": "**FORM SET SIZE** ( {*object* ;} *horizontal* ; *vertical* {; *} )",
			"Params": [
				[
					"object",
					"Text",
					"->",
					"Object name indicating form limits"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"If * passed: horizontal margin (pixels)If * omitted: width (pixels)"
				],
				[
					"vertical",
					"Integer",
					"->",
					"If * passed: vertical margin (pixels)If * omitted: height (pixels)"
				],
				[
					"*",
					"Operator",
					"->",
					"• If passed, use horizontal and vertical as form margins• If omitted, use horizontal and vertical as width and height of the form<br/>This parameter cannot be passed if the object parameter is passed."
				]
			],
			"Summary": "The **FORM SET SIZE** command allows you to change the size of the current form by programming."
		},
		"FORM SET VERTICAL RESIZING": {
			"Syntax": "**FORM SET VERTICAL RESIZING** ( *resize* {; *minHeight* {; *maxHeight*}} )",
			"Params": [
				[
					"resize",
					"Boolean",
					"->",
					"True: The form can be resized verticallyFalse: The form cannot be resized vertically"
				],
				[
					"minHeight",
					"Integer",
					"->",
					"Smallest form height allowed (pixels)"
				],
				[
					"maxHeight",
					"Integer",
					"->",
					"Largest form height allowed (pixels)"
				]
			],
			"Summary": "The **FORM SET VERTICAL RESIZING** command allows you to change the vertical resizing properties of the current form through programming."
		},
		"FORM UNLOAD": {
			"Syntax": "**FORM UNLOAD**",
			"Params": [],
			"Summary": "The **FORM UNLOAD** command releases from memory the current form designated using the FORM LOAD command."
		},
		"Frontmost process": {
			"Syntax": "**Frontmost process** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Process number for first non-floating window"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of the process whose windows are in the front"
				]
			],
			"Summary": "**Frontmost process** returns the number of the process whose window (or windows) are in the front."
		},
		"Frontmost window": {
			"Syntax": "**Frontmost window** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, take floating windows into account If omitted, ignore floating windows"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Window reference number"
				]
			],
			"Summary": "The Frontmost window command returns the window reference number of the frontmost window."
		},
		"GENERATE CERTIFICATE REQUEST": {
			"Syntax": "**GENERATE CERTIFICATE REQUEST** ( *privKey* ; *certifRequest* ; *codeArray* ; *nameArray* )",
			"Params": [
				[
					"privKey",
					"Blob",
					"->",
					"BLOB containing the private key"
				],
				[
					"certifRequest",
					"Blob",
					"<-",
					"BLOB receiving the certificate request"
				],
				[
					"codeArray",
					"Array integer",
					"->",
					"Information code list"
				],
				[
					"nameArray",
					"Text array",
					"->",
					"Name list"
				]
			],
			"Summary": "The **GENERATE CERTIFICATE REQUEST** command generates a certificate request at the PKCS format which can be directly used by certificate authorities such as Verisign(R) ."
		},
		"Generate digest": {
			"Syntax": "**Generate digest** ( *param* ; *algorithm* {; *} ) : Text",
			"Params": [
				[
					"param",
					"Blob, Text",
					"->",
					"Blob or text for which to get digest key"
				],
				[
					"algorithm",
					"Integer",
					"->",
					"Algorithm used to return key: 0 = MD5 Digest, 1 = SHA1 Digest, 2 = 4D digest, 3 = SHA-256 digest, 4 = SHA-512 digest"
				],
				[
					"*",
					"Operator",
					"->",
					"Encode digest in Base64URL"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Value of digest key"
				]
			],
			"Summary": "The **Generate digest** command returns the digest key of a BLOB or text after application of an encryption algorithm."
		},
		"GENERATE ENCRYPTION KEYPAIR": {
			"Syntax": "**GENERATE ENCRYPTION KEYPAIR** ( *privKey* ; *pubKey* {; *length*} )",
			"Params": [
				[
					"privKey",
					"Blob",
					"<-",
					"BLOB to contain the private key"
				],
				[
					"pubKey",
					"Blob",
					"<-",
					"BLOB to contain the public key"
				],
				[
					"length",
					"Integer",
					"->",
					"Key length (bits) [512...2048] Default value = 512"
				]
			],
			"Summary": "The **GENERATE ENCRYPTION KEYPAIR** command generates a new pair of RSA keys."
		},
		"Generate password hash": {
			"Syntax": "**Generate password hash** ( *password* {; *options*} ) : Text",
			"Params": [
				[
					"password",
					"Text",
					"->",
					"The user's password. Only the first 72 characters are used."
				],
				[
					"options",
					"Object",
					"->",
					"An object containing options."
				],
				[
					"Function result",
					"Text",
					"<-",
					"Returns the hashed password."
				]
			],
			"Summary": "The **Generate password hash** function returns a secure *password* hash generated by a cryptographic hash algorithm."
		},
		"Generate UUID": {
			"Syntax": "**Generate UUID** : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"New UUID as non-canonical text (32 characters)"
				]
			],
			"Summary": "The Generate UUID returns a new 32-character UUID identifier in non-canonical form."
		},
		"Get 4D file": {
			"Syntax": "**Get 4D file** ( *file* {; *} ) : Text",
			"Params": [
				[
					"file",
					"Integer",
					"->",
					"File type"
				],
				[
					"*",
					"Operator",
					"->",
					"Return file path of host database"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Pathname to 4D file"
				]
			],
			"Summary": "The **Get 4D file** command returns the pathname to the 4D environment file specified by the *file* parameter."
		},
		"Get 4D folder": {
			"Syntax": "**Get 4D folder** {( *folder* {; *options*} {; *})} : Text",
			"Params": [
				[
					"folder",
					"Integer",
					"->",
					"Folder type (if omitted = active 4D folder)"
				],
				[
					"options",
					"Object",
					"->",
					"4D Client database folder path configuration"
				],
				[
					"*",
					"Operator",
					"->",
					"Return folder of host database"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Pathname to 4D Folder"
				]
			],
			"Summary": "The **Get 4D folder** command returns the pathname to the active 4D folder of the current application, or to the 4D environment folder specified by the *folder* and *options* parameters, if passed."
		},
		"Get adjusted blobs cache priority": {
			"Syntax": "**Get adjusted blobs cache priority** ( *aTable* ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which the \"blobs\" priority value has to be retrieved"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Current priority value for \"blobs\" fields"
				]
			],
			"Summary": "The **Get adjusted blobs cache priority** command returns the current adjusted cache priority value applied in cache by the cache manager for the *aTable* \"blobs\" data."
		},
		"Get adjusted index cache priority": {
			"Syntax": "**Get adjusted index cache priority** ( *aField* ) : Integer",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field for which the priority of the index(es) has to be retrieved"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Current priority value for index(es)"
				]
			],
			"Summary": "The **Get adjusted index cache priority** command returns the current adjusted cache priority value applied by the cache manager for the *aField* index(es)."
		},
		"Get adjusted table cache priority": {
			"Syntax": "**Get adjusted table cache priority** ( *aTable* ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which the scalar priority value has to be retrieved"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Current priority value for scalar fields"
				]
			],
			"Summary": "The **Get adjusted table cache priority** command returns the adjusted cache priority value applied in cache by the cache manager for the *aTable* scalar data."
		},
		"GET ALLOWED METHODS": {
			"Syntax": "**GET ALLOWED METHODS** ( *methodsArray* )",
			"Params": [
				[
					"methodsArray",
					"Text array",
					"<-",
					"Array of method names"
				]
			],
			"Summary": "The **GET ALLOWED METHODS** command returns, in *methodsArray*, the names of methods that can be used to write formulas."
		},
		"Get Application color scheme": {
			"Syntax": "**Get Application color scheme** {( * )} : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Returns color scheme of host database"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Current application color scheme"
				]
			],
			"Summary": "The **Get Application color scheme** command returns the name of the actual color scheme in use at the application level."
		},
		"Get assert enabled": {
			"Syntax": "**Get assert enabled** : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True = assertions are enabled<br/>False = assertions are disabled"
				]
			],
			"Summary": "The **Get assert enabled** command returns True or False according to whether or not assertions are enabled in the current process."
		},
		"GET AUTOMATIC RELATIONS": {
			"Syntax": "**GET AUTOMATIC RELATIONS** ( *one* ; *many* )",
			"Params": [
				[
					"one",
					"Boolean",
					"<-",
					"Status of all Many-to-One relations"
				],
				[
					"many",
					"Boolean",
					"<-",
					"Status of all One-to-Many relations"
				]
			],
			"Summary": "The **GET AUTOMATIC RELATIONS** command lets you know if the automatic/manual status of all manual many-to-one and one-to-many relations of the database have been modified in the current process."
		},
		"Get cache size": {
			"Syntax": "**Get cache size**  : Real",
			"Params": [
				[
					"Function result",
					"Real",
					"<-",
					"Size of database cache in bytes"
				]
			],
			"Summary": "The **Get cache size** command returns the current database cache size in bytes."
		},
		"Get current printer": {
			"Syntax": "**Get current printer**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Name of the current printer"
				]
			],
			"Summary": "The **Get current printer** command returns the name of the current printer defined in the 4D application."
		},
		"Get database localization": {
			"Syntax": "**Get database localization** {( {*languageType*}{;}{*} )} : Text",
			"Params": [
				[
					"languageType",
					"Integer",
					"->",
					"Type of language"
				],
				[
					"*",
					"Operator",
					"->",
					"Return information about host database"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Current language of the database"
				]
			],
			"Summary": "The Get database localization command returns the database default language or the language specified by the *languageType*, expressed in the standard defined by the RFC 3066\\."
		},
		"Get database parameter": {
			"Syntax": "**Get database parameter** ( {*aTable* ;} *selector* {; *stringValue*} ) : Real",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to get the parameter, or Default table if this parameter is omitted"
				],
				[
					"selector",
					"Integer",
					"->",
					"Code of the database’s parameter"
				],
				[
					"stringValue",
					"Text",
					"<-",
					"String value of the parameter"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Current value of the parameter"
				]
			],
			"Summary": "The **Get database parameter** command allows you to get the current value of a 4D database parameter."
		},
		"Get default user": {
			"Syntax": "**Get default user**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Unique user ID number"
				]
			],
			"Summary": "The Get default user command returns the unique user ID of the user set as “Default user” in the database Settings dialog box"
		},
		"GET DOCUMENT ICON": {
			"Syntax": "**GET DOCUMENT ICON** ( *docPath* ; *icon* {; *size*} )",
			"Params": [
				[
					"docPath",
					"Text",
					"->",
					"Name or path of document to get icon, or Empty string for standard Open File dialog box"
				],
				[
					"icon",
					"Picture, Picture",
					"<-",
					"Document icon"
				],
				[
					"size",
					"Integer",
					"->",
					"Size of the returned picture (in pixels)"
				]
			],
			"Summary": "The GET DOCUMENT ICON command returns, in the 4D picture variable or field *icon*, the icon of the document whose name or complete pathname is passed in *docPath*."
		},
		"Get document position": {
			"Syntax": "**Get document position** ( *docRef* ) : Real",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Document reference number"
				],
				[
					"Function result",
					"Real",
					"<-",
					"File position (expressed in bytes) from the beginning of the file"
				]
			],
			"Summary": "This command operates only on a document that is currently open whose document reference number you pass in *docRef*."
		},
		"GET DOCUMENT PROPERTIES": {
			"Syntax": "**GET DOCUMENT PROPERTIES** ( *document* ; *locked* ; *invisible* ; created on ; created at ; modified on ; modified at )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document name"
				],
				[
					"locked",
					"Boolean",
					"<-",
					"Locked (True) or unlocked (False)"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"Invisible (True) or visible (False)"
				],
				[
					"created on",
					"Date",
					"<-",
					"Creation date"
				],
				[
					"created at",
					"Time",
					"<-",
					"Creation time"
				],
				[
					"modified on",
					"Date",
					"<-",
					"Last modification date"
				],
				[
					"modified at",
					"Time",
					"<-",
					"Last modification time"
				]
			],
			"Summary": "The **GET DOCUMENT PROPERTIES** command returns information about the document whose name or pathname you pass in *document*."
		},
		"Get document size": {
			"Syntax": "**Get document size** ( *document* {; *} ) : Real",
			"Params": [
				[
					"document",
					"Text, Time",
					"->",
					"Document reference number or Document name"
				],
				[
					"*",
					"Operator",
					"->",
					"On Mac OS only: - if omitted, size of data fork - if specified, size of resource fork"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Size (expressed in bytes) of the document"
				]
			],
			"Summary": "The Get document size command returns the size, expressed in bytes, of a document."
		},
		"Get edited text": {
			"Syntax": "**Get edited text**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Text being entered"
				]
			],
			"Summary": "The **Get edited text** command is mainly to be used with the On After Edit form event to retrieve the text as it is being entered."
		},
		"Get external data path": {
			"Syntax": "**Get external data path** ( *aField* ) : Text",
			"Params": [
				[
					"aField",
					"Text, Blob, Picture",
					"->",
					"Field whose storage location you want to get"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Full pathname of external storage file"
				]
			],
			"Summary": "The **Get external data path** command returns the full pathname of the external storage file for the data of the field passed in the *aField* parameter, for the current record."
		},
		"GET FIELD ENTRY PROPERTIES": {
			"Syntax": "**GET FIELD ENTRY PROPERTIES** ( *fieldPtr* ; *list* ; *mandatory* ; *nonEnterable* ; *nonModifiable* )<br/>**GET FIELD ENTRY PROPERTIES** ( *tableNum* ; *fieldNum* ; *list* ; *mandatory* ; *nonEnterable* ; *nonModifiable* )",
			"Params": [
				[
					"fieldPtr&#124;tableNum",
					"Pointer, Integer",
					"->",
					"Field pointer or table number"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"Field number if the table number is passed as first parameter"
				],
				[
					"list",
					"Text",
					"<-",
					"Associated choice list name or empty string"
				],
				[
					"mandatory",
					"Boolean",
					"<-",
					"True = Mandatory, False = Optional"
				],
				[
					"nonEnterable",
					"Boolean",
					"<-",
					"True = Non-enterable, False = Enterable"
				],
				[
					"nonModifiable",
					"Boolean",
					"<-",
					"True = Non-modifiable, False = Modifiable"
				]
			],
			"Summary": "The GET FIELD ENTRY PROPERTIES command returns the data entry properties for the field specified by *tableNum* and *fieldNum* or by *fieldPtr*."
		},
		"GET FIELD PROPERTIES": {
			"Syntax": "**GET FIELD PROPERTIES** ( *fieldPtr* ; *fieldType* {; *fieldLength* {; *indexed* {; *unique* {; *invisible*}}}} )<br/>**GET FIELD PROPERTIES** ( *tableNum* ; *fieldNum* ; *fieldType* {; *fieldLength* {; *indexed* {; *unique* {; *invisible*}}}} )",
			"Params": [
				[
					"fieldPtr &#124; tableNum",
					"Pointer, Integer",
					"->",
					"Table number or Field pointer"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"Field number if Table number is passed"
				],
				[
					"fieldType",
					"Integer",
					"<-",
					"Type of field"
				],
				[
					"fieldLength",
					"Integer",
					"<-",
					"Length of field, if Alphanumeric"
				],
				[
					"indexed",
					"Boolean",
					"<-",
					"True = Indexed, False = Non indexed"
				],
				[
					"unique",
					"Boolean",
					"<-",
					"True = Unique, False = Non unique"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"True = Invisible, False = Visible"
				]
			],
			"Summary": "The **GET FIELD PROPERTIES** command returns information about the field specified by *fieldPtr* or by *tableNum* and *fieldNum*."
		},
		"GET FIELD RELATION": {
			"Syntax": "**GET FIELD RELATION** ( *manyField* ; *one* ; *many* {; *} )",
			"Params": [
				[
					"manyField",
					"Field",
					"->",
					"Starting field of a relation"
				],
				[
					"one",
					"Integer",
					"<-",
					"Status of the Many-to-One relation"
				],
				[
					"many",
					"Integer",
					"<-",
					"Status of the One-to-Many relation"
				],
				[
					"*",
					"Operator",
					"->",
					"• If passed: one and many return the current status of the relation (values 2 or 3 only) • If omitted (default): one and many can return the value 1 if the relation has not been modified through programming"
				]
			],
			"Summary": "The **GET FIELD RELATION** command lets you find out the automatic/manual status of the relation starting from *manyField* for the current process."
		},
		"GET FIELD TITLES": {
			"Syntax": "**GET FIELD TITLES** ( *aTable* ; *fieldTitles* ; *fieldNums* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which you want to find out the field names"
				],
				[
					"fieldTitles",
					"Text array",
					"<-",
					"Current field names"
				],
				[
					"fieldNums",
					"Array integer",
					"<-",
					"Field numbers"
				]
			],
			"Summary": "The **GET FIELD TITLES** command fills the *fieldTitles* and *fieldNums* arrays with the names and numbers of database fields for the desired *aTable*."
		},
		"Get file from pasteboard": {
			"Syntax": "**Get file from pasteboard** ( *xIndex* ) : Text",
			"Params": [
				[
					"xIndex",
					"Integer",
					"->",
					"Xth file included in drag action"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Pathname of file extracted from pasteboard"
				]
			],
			"Summary": "The Get file from pasteboard command returns the absolute pathname of a file included in a drag and drop operation."
		},
		"Get group access": {
			"Syntax": "**Get group access** : Collection",
			"Params": [
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of group name(s) to which the user belongs"
				]
			],
			"Summary": "The **Get group access** command returns the memberships of the 4D user account for the current session."
		},
		"GET GROUP LIST": {
			"Syntax": "**GET GROUP LIST** ( *groupNames* ; *groupNumbers* )",
			"Params": [
				[
					"groupNames",
					"Text array",
					"<-",
					"Names of the groups as they appear in the Password editor window"
				],
				[
					"groupNumbers",
					"Array integer",
					"<-",
					"Corresponding unique group ID numbers"
				]
			],
			"Summary": "GET GROUP LIST populates the arrays *groupNames* and *groupNumbers* with the names and unique ID numbers of the groups as they appear in the Password editor window."
		},
		"GET GROUP PROPERTIES": {
			"Syntax": "**GET GROUP PROPERTIES** ( *groupID* ; *name* ; *owner* {; *members*} )",
			"Params": [
				[
					"groupID",
					"Integer",
					"->",
					"Unique group ID number"
				],
				[
					"name",
					"Text",
					"<-",
					"Name of the group"
				],
				[
					"owner",
					"Integer",
					"<-",
					"User ID number of group owner (Binary databases only)"
				],
				[
					"members",
					"Array integer",
					"<-",
					"Group members"
				]
			],
			"Summary": "GET GROUP PROPERTIES returns the properties of the group whose unique group ID number you pass in *groupID*."
		},
		"GET HIGHLIGHT": {
			"Syntax": "**GET HIGHLIGHT** ( {* ;} *object* ; *startSel* ; *endSel* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"Field, Variable, any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"<-",
					"Current text selection starting position"
				],
				[
					"endSel",
					"Integer",
					"<-",
					"Current text selection ending position"
				]
			],
			"Summary": "The GET HIGHLIGHT command is used to determine what text is currently highlighted in *object*."
		},
		"GET HIGHLIGHTED RECORDS": {
			"Syntax": "**GET HIGHLIGHTED RECORDS** ( {*aTable* ;} *setName* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table where the highlighted records will be read If omitted, table of the current form"
				],
				[
					"setName",
					"Text",
					"->",
					"Set where the highlighted records will be stored"
				]
			],
			"Summary": "The **GET HIGHLIGHTED RECORDS** command stores in the set designated by the *setName* parameter the highlighted records (i.e., the records highlighted by the user in the list form) in the *aTable* passed as parameter."
		},
		"Get indexed string": {
			"Syntax": "**Get indexed string** ( *resID* ; *strID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number or 'id' attribute of the 'group' element (XLIFF)"
				],
				[
					"strID",
					"Integer",
					"->",
					"String number or 'id' attribute of the 'trans-unit' element (XLIFF)"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number If omitted: all the XLIFF files or open resource files"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Value of the indexed string"
				]
			],
			"Summary": "one of the strings stored in the string list (“STR#”) resource whose ID is passed in *resID*."
		},
		"Get list item font": {
			"Syntax": "**Get list item font** ( {* ;} *list* ; *itemRef* ) : Text<br/>**Get list item font** ( * ; *list* ; * ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number or 0 for the last item added to the list or * for the current item of the list"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Font name"
				]
			],
			"Summary": "The **Get list item font** command returns the current character font name of the item specified by the *itemRef* parameter of the list whose reference number or object name is passed in *list*."
		},
		"GET LIST ITEM ICON": {
			"Syntax": "**GET LIST ITEM ICON** ( {* ;} *list* ; *itemRef* ; *icon* )<br/>**GET LIST ITEM ICON** ( * ; *list* ; * ; *icon*",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Operator, Integer",
					"->",
					"Item reference number or 0 for the last item added to the list or * for the current item of the list"
				],
				[
					"icon",
					"Picture",
					"<-",
					"Icon associated with item"
				]
			],
			"Summary": "The **GET LIST ITEM ICON** command returns, in *icon*, the icon associated with the item whose reference number is passed in *itemRef* in the list whose reference number or object name is passed in *list*."
		},
		"GET LIST ITEM PARAMETER ARRAYS": {
			"Syntax": "**GET LIST ITEM PARAMETER ARRAYS** ( {* ;} *list* ; *itemRef* ; *arrSelection* {; *arrValues*} )<br/>**GET LIST ITEM PARAMETER ARRAYS** ( * ; *list* ; * ; *arrSelection* {; *arrValues*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string)If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) orName of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number or 0 for the last item appended to the list or * for the current list item"
				],
				[
					"arrSelection",
					"Text array",
					"<-",
					"Array of parameter names"
				],
				[
					"arrValues",
					"Text array",
					"<-",
					"Array of parameter values"
				]
			],
			"Summary": "The **GET LIST ITEM PARAMETER ARRAYS** command lets you retrieve all the parameters in a single call (as well as, optionally, their values) that are associated with the *itemRef* item in the hierarchical list whose reference or object name is passed in the *list* parameter."
		},
		"GET LIST ITEM PARAMETER": {
			"Syntax": "**GET LIST ITEM PARAMETER** ( {* ;} *list* ; *itemRef* ; *selector* ; *value* )<br/>**GET LIST ITEM PARAMETER** ( * ; *list* ; * ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number or 0 for the last item appended to the list or * for the current list item"
				],
				[
					"selector",
					"Text",
					"->",
					"Parameter constant"
				],
				[
					"value",
					"Text, Boolean, Real",
					"<-",
					"Current value of parameter"
				]
			],
			"Summary": "The **GET LIST ITEM PARAMETER** command is used to find out the current *value* of the *selector* parameter for the *itemRef* item of the hierarchical list whose reference or object name is passed in the *list* parameter."
		},
		"GET LIST ITEM PROPERTIES": {
			"Syntax": "**GET LIST ITEM PROPERTIES** ( {* ;} *list* ; *itemRef* ; *enterable* {; *styles* {; *icon* {; *color*}}} )<br/>**GET LIST ITEM PROPERTIES** ( * ; *list* ; * ; *enterable* {; *styles* {; *icon* {; *color*}}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Operator, Integer",
					"->",
					"Item reference number, or 0 for last list item added, or * for the current list item"
				],
				[
					"enterable",
					"Boolean",
					"<-",
					"TRUE = Enterable, FALSE = Non-enterable"
				],
				[
					"styles",
					"Integer",
					"<-",
					"Font style for the item"
				],
				[
					"icon",
					"Text, Integer",
					"<-",
					"Picture name or number"
				],
				[
					"color",
					"Integer",
					"<-",
					"RGB color value"
				]
			],
			"Summary": "The **GET LIST ITEM PROPERTIES** command returns the properties of the item designated by the *itemRef* parameterwithin the list whose list reference number or object name is passed in *list*."
		},
		"GET LIST ITEM": {
			"Syntax": "**GET LIST ITEM** ( {* ;} *list* ; *itemPos* ; *itemRef* ; *itemText* {; *sublist* ; *expanded*} )<br/>**GET LIST ITEM** ( {* ;} *list* ; * ; *itemRef* ; *itemText* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemPos &#124; *",
					"Operator, Integer",
					"->",
					"Position of item in expanded/collapsed list(s) or * for the current item in the list"
				],
				[
					"itemRef",
					"Integer",
					"<-",
					"Item reference number"
				],
				[
					"itemText",
					"Text",
					"<-",
					"Text of the list item"
				],
				[
					"sublist",
					"Integer",
					"<-",
					"Sublist list reference number (if any)"
				],
				[
					"expanded",
					"Boolean",
					"<-",
					"If a sublist is attached: TRUE = sublist is currently expanded FALSE = sublist is currently collapsed"
				]
			],
			"Summary": "The **GET LIST ITEM** command returns information about the item specified by *itemPos* of the list whose reference number or object name is passed in *list*."
		},
		"GET LIST PROPERTIES": {
			"Syntax": "**GET LIST PROPERTIES** ( *list* ; *appearance* {; *icon* {; *lineHeight* {; *doubleClick* {; *multiSelections* {; *editable*}}}}} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"appearance",
					"Integer",
					"<-",
					"Graphical style of the list 1 = Hierarchical list a la Macintosh 2 = Hierarchical list a la Windows"
				],
				[
					"icon",
					"Integer",
					"<-",
					"*** Deprecated, always 0 ***"
				],
				[
					"lineHeight",
					"Integer",
					"<-",
					"Minimal line height expressed in pixels"
				],
				[
					"doubleClick",
					"Integer",
					"<-",
					"Expand/Collapse sublist on double-click? 0 = Yes, 1= No"
				],
				[
					"multiSelections",
					"Integer",
					"<-",
					"Multiple selections: 0 = No, 1 = Yes"
				],
				[
					"editable",
					"Integer",
					"<-",
					"List editable by user: 0 = No, 1 = Yes"
				]
			],
			"Summary": "The **GET LIST PROPERTIES** command returns information about the list whose reference number you pass in *list*."
		},
		"GET MACRO PARAMETER": {
			"Syntax": "**GET MACRO PARAMETER** ( *selector* ; *textParam* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Selection to use"
				],
				[
					"textParam",
					"Text",
					"<-",
					"Returned text"
				]
			],
			"Summary": "The **GET MACRO PARAMETER** command returns, in the *paramText* parameter, all or part of the text of the method from which it was called."
		},
		"Get menu bar reference": {
			"Syntax": "**Get menu bar reference** {( *process* )} : Text",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Reference number of process"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Menu bar ID"
				]
			],
			"Summary": "The **Get menu bar reference** command returns the ID of the current menu bar or the menu bar of a specific process."
		},
		"GET MENU ITEM ICON": {
			"Syntax": "**GET MENU ITEM ICON** ( *menu* ; *menuItem* ; *iconRef* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"iconRef",
					"Text, Integer",
					"<-",
					"Name or number of picture associated with menu item"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "The GET MENU ITEM ICON command returns, in the *iconRef* variable, the reference of any icon that is associated with the menu item designated by the *menu* and *menuItem* parameters."
		},
		"Get menu item key": {
			"Syntax": "**Get menu item key** ( *menu* ; *menuItem* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for the last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Character code of standard shortcut key associated with the menu item"
				]
			],
			"Summary": "The **Get menu item key** command returns the code of the **Ctrl** (Windows) or **Command** (Macintosh) shortcut for the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem*."
		},
		"Get menu item mark": {
			"Syntax": "**Get menu item mark** ( *menu* ; *menuItem* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Current menu item mark"
				]
			],
			"Summary": "The **Get menu item mark** command returns the check mark of the menu item whose number or reference is passed in *menu* and whose item number is passed in *menuItem*."
		},
		"Get menu item method": {
			"Syntax": "**Get menu item method** ( *menu* ; *menuItem* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Method name"
				]
			],
			"Summary": "The Get menu item method command returns the name of the 4D project method associated with the menu item designated by the *menu* and *menuItem* parameters."
		},
		"Get menu item modifiers": {
			"Syntax": "**Get menu item modifiers** ( *menu* ; *menuItem* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Modification key(s) associated with menu item"
				]
			],
			"Summary": "The **Get menu item modifiers** command returns any additional modifier(s) associated with the standard shortcut of the menu item designated by the *menu* and *menuItem* parameters."
		},
		"Get menu item parameter": {
			"Syntax": "**Get menu item parameter** ( *menu* ; *menuItem* ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Custom parameter of the menu item"
				]
			],
			"Summary": "The **Get menu item parameter** command returns the custom character string associated with the menu item designated by the *menu* and *menuItem* parameters."
		},
		"GET MENU ITEM PROPERTY": {
			"Syntax": "**GET MENU ITEM PROPERTY** ( *menu* ; *menuItem* ; *property* ; *value* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"property",
					"Text",
					"->",
					"Property type"
				],
				[
					"value",
					"any",
					"<-",
					"Property value"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "The **GET MENU ITEM PROPERTY** command returns, in the *value* parameter, the current value of the property of the menu item designated by the *menu* and *menuItem* parameters."
		},
		"Get menu item style": {
			"Syntax": "**Get menu item style** ( *menu* ; *menuItem* {; *process*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Current menu item style"
				]
			],
			"Summary": "The **Get menu item style** command returns the font style of the menu item whose number or reference is passed in *menu* and whose item number is passed in *menuItem*."
		},
		"Get menu item": {
			"Syntax": "**Get menu item** ( *menu* ; *menuItem* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for last item added"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Text of the menu item"
				]
			],
			"Summary": "The **Get menu item** command returns the text of the menu item whose menu and item numbers are passed in *menu* and *menuItem*."
		},
		"GET MENU ITEMS": {
			"Syntax": "**GET MENU ITEMS** ( *menu* ; *menuTitlesArray* ; *menuRefsArray* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuTitlesArray",
					"Text array",
					"<-",
					"Array of menu titles"
				],
				[
					"menuRefsArray",
					"Text array",
					"<-",
					"Array of menu references"
				]
			],
			"Summary": "The **GET MENU ITEMS** command returns, in the *menuTitlesArray* and *menuRefsArray* arrays, the titles and IDs of all the items of the menu or menu bar designated by the *menu* parameter."
		},
		"Get menu title": {
			"Syntax": "**Get menu title** ( *menu* {; *process*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Title of the menu"
				]
			],
			"Summary": "The **Get menu title** command returns the title of the menu whose number or reference is passed in *menu."
		},
		"GET MISSING TABLE NAMES": {
			"Syntax": "**GET MISSING TABLE NAMES** ( *missingTables* )",
			"Params": [
				[
					"missingTables",
					"Text array",
					"<-",
					"Names of missing tables in the database"
				]
			],
			"Summary": "The **GET MISSING TABLE NAMES** command returns the names of all the missing tables of the current database in the *missingTables* array."
		},
		"GET PASTEBOARD DATA TYPE": {
			"Syntax": "**GET PASTEBOARD DATA TYPE** ( *4Dsignatures* ; *nativeTypes* {; *formatNames*} )",
			"Params": [
				[
					"4Dsignatures",
					"Text array",
					"<-",
					"4D signatures of data types"
				],
				[
					"nativeTypes",
					"Text array",
					"<-",
					"Native data types"
				],
				[
					"formatNames",
					"Text array",
					"<-",
					"Format names or descriptions"
				]
			],
			"Summary": "The **GET PASTEBOARD DATA TYPE** command gets the list of data types present in the pasteboard."
		},
		"GET PASTEBOARD DATA": {
			"Syntax": "**GET PASTEBOARD DATA** ( *dataType* ; *data* )",
			"Params": [
				[
					"dataType",
					"Text",
					"->",
					"Type of data to be extracted from pasteboard"
				],
				[
					"data",
					"Blob",
					"<-",
					"Requested data extracted from the pasteboard"
				]
			],
			"Summary": "The **GET PASTEBOARD DATA** command returns, in the BLOB field or in the *data* variable, the data present in the pasteboard and whose type you pass in *dataType*."
		},
		"Get picture file name": {
			"Syntax": "**Get picture file name** ( *picture* ) : Text",
			"Params": [
				[
					"picture",
					"Picture, Picture",
					"->",
					"Picture for which to get default name"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Default name of picture file"
				]
			],
			"Summary": "The **Get picture file name** command returns the current default name of the picture passed as parameter."
		},
		"GET PICTURE FORMATS": {
			"Syntax": "**GET PICTURE FORMATS** ( *picture* ; *codecIDs* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture field or variable to analyze"
				],
				[
					"codecIDs",
					"Text array",
					"<-",
					"Picture codec IDs"
				]
			],
			"Summary": "The **GET PICTURE FORMATS** command returns an array of all the codec IDs (picture formats) contained in the *picture* passed as parameter."
		},
		"GET PICTURE FROM LIBRARY": {
			"Syntax": "**GET PICTURE FROM LIBRARY** ( *picRef * ; *picture* )<br/>**GET PICTURE FROM LIBRARY** ( *picName* ; *picture* )",
			"Params": [
				[
					"picRef &#124; picName",
					"Integer, Text",
					"->",
					"Reference number of Picture Library graphic or Name of Picture Library graphic"
				],
				[
					"picture",
					"Picture",
					"<-",
					"Picture from the Picture Library"
				]
			],
			"Summary": "The **GET PICTURE FROM LIBRARY** command returns in the *picture* parameter the Picture Library graphic whose reference number is passed in *picRef* or whose name is passed in *picName*."
		},
		"GET PICTURE FROM PASTEBOARD": {
			"Syntax": "**GET PICTURE FROM PASTEBOARD** ( *picture* )",
			"Params": [
				[
					"picture",
					"Picture",
					"<-",
					"Picture extracted from pasteboard"
				]
			],
			"Summary": "GET PICTURE FROM PASTEBOARD returns the picture present in the pasteboard in the *picture* field or variable."
		},
		"GET PICTURE KEYWORDS": {
			"Syntax": "**GET PICTURE KEYWORDS** ( *picture* ; *arrKeywords* {; *} )",
			"Params": [
				[
					"picture",
					"Picture, Picture",
					"->",
					"Picture for which to get associated keywords"
				],
				[
					"arrKeywords",
					"Text array",
					"<-",
					"Array containing extracted keywords"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = use distinct values"
				]
			],
			"Summary": "The **GET PICTURE KEYWORDS** command returns, in the *arrKeywords* array, the list of keywords associated with the picture passed as parameter."
		},
		"GET PICTURE METADATA": {
			"Syntax": "**GET PICTURE METADATA** ( *picture* ; *metaName* ; *metaContents* {; *metaName2* ; *metaContents2* ; ... ; *metaNameN* ; *metaContentsN*} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture whose metadata you want to get"
				],
				[
					"metaName",
					"Text",
					"->",
					"Name or path of block to get"
				],
				[
					"metaContents",
					"Variable",
					"<-",
					"Metadata contents"
				]
			],
			"Summary": "The **GET PICTURE METADATA** command can be used to read the contents of the metadata (or meta-tags) found in *picture* (4D picture field or variable)."
		},
		"GET PICTURE RESOURCE": {
			"Syntax": "**GET PICTURE RESOURCE** ( *resID* ; *resData* {; *resFile*} )",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number"
				],
				[
					"resData",
					"Field, Variable",
					"->",
					"Picture field or variable to receive the picture"
				],
				[
					"<-",
					"Contents of the PICT resource"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				]
			],
			"Summary": "The **GET PICTURE RESOURCE** command returns in the picture field or variable *resData* the picture stored in the picture (“PICT”) resource whose ID is passed in *resID*."
		},
		"Get plugin access": {
			"Syntax": "**Get plugin access** ( *plugIn* ) : Text",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"Plug-in number"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Group name associated with plug-in"
				]
			],
			"Summary": "The Get plugin access command returns the name of the user group authorized to use the plug-in whose number was passed in the *plugIn* parameter."
		},
		"Get pointer": {
			"Syntax": "**Get pointer** ( *varName* ) : Pointer",
			"Params": [
				[
					"varName",
					"Text",
					"->",
					"Name of a process or interprocess variable"
				],
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to process or interprocess variable"
				]
			],
			"Summary": "The **Get pointer** command returns a pointer to the process or interprocess variable whose name you pass in *varName*."
		},
		"Get print marker": {
			"Syntax": "**Get print marker** ( *markNum* ) : Integer",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"Marker number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Position of the marker"
				]
			],
			"Summary": "The **Get print marker** command enables you to get the current position of a marker during printing."
		},
		"GET PRINT OPTION": {
			"Syntax": "**GET PRINT OPTION** ( *option* ; *value1* {; *value2*} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Option number or PDF option code"
				],
				[
					"value1",
					"Integer, Text",
					"<-",
					"Value 1 of the option"
				],
				[
					"value2",
					"Integer, Text",
					"<-",
					"Value 2 of the option"
				]
			],
			"Summary": "The **GET PRINT OPTION** command returns the current value(s) of a print option."
		},
		"Get print preview": {
			"Syntax": "**Get print preview**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True = Print preview, False = No print preview"
				]
			],
			"Summary": "The **Get print preview** command returns True if the SET PRINT PREVIEW command was called with the **True** value in the current process."
		},
		"GET PRINTABLE AREA": {
			"Syntax": "**GET PRINTABLE AREA** ( *height* {; *width*} )",
			"Params": [
				[
					"height",
					"Integer",
					"<-",
					"Height of printable area"
				],
				[
					"width",
					"Integer",
					"<-",
					"Width of printable area"
				]
			],
			"Summary": "The **GET PRINTABLE AREA** command returns the size, in pixels, of the *height* and *width* parameters of the printable area."
		},
		"GET PRINTABLE MARGIN": {
			"Syntax": "**GET PRINTABLE MARGIN** ( *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"left",
					"Integer",
					"<-",
					"Left margin"
				],
				[
					"top",
					"Integer",
					"<-",
					"Top margin"
				],
				[
					"right",
					"Integer",
					"<-",
					"Right margin"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"Bottom margin"
				]
			],
			"Summary": "The GET PRINTABLE MARGIN command returns the current values of the different margins defined using the Print form, PRINT SELECTION and PRINT RECORD commands."
		},
		"Get printed height": {
			"Syntax": "**Get printed height**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Position of the marker"
				]
			],
			"Summary": "The **Get printed height** command returns the overall height (in pixels) of the section printed using the Print form command."
		},
		"GET PROCESS VARIABLE": {
			"Syntax": "**GET PROCESS VARIABLE** ( *process* ; *srcVar* ; *dstVar* {; *srcVar2* ; *dstVar2* ; ... ; *srcVarN* ; *dstVarN*} )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Source process number"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"Source variable"
				],
				[
					"dstVar",
					"Variable",
					"<-",
					"Destination variable"
				]
			],
			"Summary": "The **GET PROCESS VARIABLE** command reads the *srcVar* process variables (*srvVar2*, etc.) from the source process whose number is passed in *process*, and returns their current values in the *dstVar* variables ( *dstVar2*, etc.) of the current process."
		},
		"GET QUERY DESTINATION": {
			"Syntax": "**GET QUERY DESTINATION** ( *destinationType* ; *destinationObject* ; *destinationPtr* )",
			"Params": [
				[
					"destinationType",
					"Integer",
					"<-",
					"0=current selection, 1=set, 2=named selection, 3=variable"
				],
				[
					"destinationObject",
					"Text",
					"<-",
					"Name of the set or Name of the named selection or Empty string"
				],
				[
					"destinationPtr",
					"Pointer",
					"<-",
					"Pointer to local variable if destinationType=3"
				]
			],
			"Summary": "The **GET QUERY DESTINATION** command returns the current destination of query results for the process underway."
		},
		"Get query limit": {
			"Syntax": "**Get query limit** : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Limit number of records,0 = unlimited number"
				]
			],
			"Summary": "The **Get query limit** command returns the limit for the number of records that a query may find in the current process."
		},
		"GET REGISTERED CLIENTS": {
			"Syntax": "**GET REGISTERED CLIENTS** ( *clientList* ; *methods* )",
			"Params": [
				[
					"clientList",
					"Text array",
					"<-",
					"List of the saved 4D Clients"
				],
				[
					"methods",
					"Array integer",
					"<-",
					"List of the methods to be executed"
				]
			],
			"Summary": "The **GET REGISTERED CLIENTS** command fills two arrays"
		},
		"GET RELATION PROPERTIES": {
			"Syntax": "**GET RELATION PROPERTIES** ( *fieldPtr* ; *oneTable* ; *oneField* {; *choiceField* {; *autoOne* {; *autoMany*}}} )<br/>**GET RELATION PROPERTIES** ( *tableNum* ; *fieldNum* ; *oneTable* ; *oneField* {; *choiceField* {; *autoOne* {; *autoMany*}}} )",
			"Params": [
				[
					"fieldPtr&#124;tableNum",
					"Pointer, Integer",
					"->",
					"Field pointer or table number"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"Field number if the table number is passed as first parameter"
				],
				[
					"oneTable",
					"Integer",
					"<-",
					"One table number or 0 if no relation is defined from the field"
				],
				[
					"oneField",
					"Integer",
					"<-",
					"One field number or 0 if no relation is defined from the field"
				],
				[
					"choiceField",
					"Integer",
					"<-",
					"Choice field number or 0 if no choice field"
				],
				[
					"autoOne",
					"Boolean",
					"<-",
					"True = Auto relate one, False = Manual relate one"
				],
				[
					"autoMany",
					"Boolean",
					"<-",
					"True = Auto one to many, False = Manual one to many"
				]
			],
			"Summary": "The GET RELATION PROPERTIES command returns the properties of the relation (if any) which starts from the source field defined by *tableNum* and *fieldNum* or by *fieldPtr*."
		},
		"Get resource name": {
			"Syntax": "**Get resource name** ( *resType* ; *resID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4-character resource type"
				],
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of the resource"
				]
			],
			"Summary": "The **Get resource name** command returns the name of the resource whose type is passed in *resType* and whose ID number is passed in *resID*."
		},
		"Get resource properties": {
			"Syntax": "**Get resource properties** ( *resType* ; *resID* {; *resFile*} ) : Integer",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4-character resource type"
				],
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Resource attributes"
				]
			],
			"Summary": "The **Get resource properties** command returns the attributes of the resource whose type is passed in *resType* and whose ID number is passed in *resID*."
		},
		"GET RESOURCE": {
			"Syntax": "**GET RESOURCE** ( *resType* ; *resID* ; *resData* {; *resFile*} )",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4-character resource type"
				],
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number"
				],
				[
					"resData",
					"Blob",
					"->",
					"BLOB field or variable to receive the data"
				],
				[
					"<-",
					"Contents of the resource"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				]
			],
			"Summary": "The **GET RESOURCE** command returns in the BLOB field or variable *resData* the contents of the resource whose type and ID is passed in *resType* and *resID*."
		},
		"Get selected menu item parameter": {
			"Syntax": "**Get selected menu item parameter**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Custom parameter of the menu item"
				]
			],
			"Summary": "The **Get selected menu item parameter** command returns the custom character string associated with the selected menu item."
		},
		"GET SERIAL PORT MAPPING": {
			"Syntax": "**GET SERIAL PORT MAPPING** ( *numArray* ; *nameArray* )",
			"Params": [
				[
					"numArray",
					"Array integer",
					"<-",
					"Array of port numbers"
				],
				[
					"nameArray",
					"Text array",
					"<-",
					"Array of port names"
				]
			],
			"Summary": "The **GET SERIAL PORT MAPPING** command returns two arrays, *numArray* and *nameArray*, containing the serial port numbers and the serial port names of the current machine."
		},
		"Get string resource": {
			"Syntax": "**Get string resource** ( *resID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Contents of the STR  resource"
				]
			],
			"Summary": "The **Get string resource** command returns the string stored in the string (“STR ”) resource whose ID is passed in *resID*."
		},
		"GET STYLE SHEET INFO": {
			"Syntax": "**GET STYLE SHEET INFO** ( *styleSheetName* ; *font* ; *size* ; *styles* )",
			"Params": [
				[
					"styleSheetName",
					"Text",
					"->",
					"Name of style sheet"
				],
				[
					"font",
					"Text",
					"<-",
					"Character font"
				],
				[
					"size",
					"Integer",
					"<-",
					"Font size"
				],
				[
					"styles",
					"Integer",
					"<-",
					"Style value"
				]
			],
			"Summary": "The **GET STYLE SHEET INFO** command returns the current configuration of the style sheet designated in the *styleSheetName* parameter."
		},
		"Get subrecord key": {
			"Syntax": "**Get subrecord key** ( *idField* ) : Integer",
			"Params": [
				[
					"idField",
					"Field",
					"->",
					"\"Subtable Relation\" or \"Longint\" type field of a former subtable relation"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Internal key of relation"
				]
			],
			"Summary": "The Get subrecord key command facilitates the migration of 4D code using converted subtables to standard code for working with tables."
		},
		"GET SYSTEM FORMAT": {
			"Syntax": "**GET SYSTEM FORMAT** ( *format* ; *value* )",
			"Params": [
				[
					"format",
					"Integer",
					"->",
					"System format to be retrieved"
				],
				[
					"value",
					"Text",
					"<-",
					"Value of format defined in the system"
				]
			],
			"Summary": "The **GET SYSTEM FORMAT** command returns the current value of several regional parameters defined in the operating system."
		},
		"GET TABLE PROPERTIES": {
			"Syntax": "**GET TABLE PROPERTIES** ( *tablePtr* ; *invisible* {; *trigSaveNew* {; *trigSaveRec* {; *trigDelRec* {; *trigLoadRec*}}}} )<br/>**GET TABLE PROPERTIES** ( *tableNum* ; *invisible* {; *trigSaveNew* {; *trigSaveRec* {; *trigDelRec* {; *trigLoadRec*}}}} )",
			"Params": [
				[
					"tablePtr&#124;tableNum",
					"Pointer, Integer",
					"->",
					"Table pointer or Table number"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"True = Invisible, False = Visible"
				],
				[
					"trigSaveNew",
					"Boolean",
					"<-",
					"True = Trigger “On saving new record” activated; otherwise, False"
				],
				[
					"trigSaveRec",
					"Boolean",
					"<-",
					"True = Trigger “On saving an existing record” activated; otherwise, False"
				],
				[
					"trigDelRec",
					"Boolean",
					"<-",
					"True = Trigger “On deleting a record” activated; otherwise, False"
				],
				[
					"trigLoadRec",
					"Boolean",
					"<-",
					"*** Do not use (obsolete) ***"
				]
			],
			"Summary": "The GET TABLE PROPERTIES command returns the properties for the table passed in *tablePtr* or *tableNum*."
		},
		"GET TABLE TITLES": {
			"Syntax": "**GET TABLE TITLES** ( *tableTitles* ; *tableNums* )",
			"Params": [
				[
					"tableTitles",
					"Text array",
					"<-",
					"Current table names"
				],
				[
					"tableNums",
					"Array integer",
					"<-",
					"Table numbers"
				]
			],
			"Summary": "The **GET TABLE TITLES** command fills the *tableTitles* and *tableNums* arrays with the names and numbers of database tables defined in the Structure window or using the SET TABLE TITLES command."
		},
		"Get text from pasteboard": {
			"Syntax": "**Get text from pasteboard**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Returns the text (if any) present in the pasteboard"
				]
			],
			"Summary": "**Get text from pasteboard** returns the text present in the pasteboard."
		},
		"GET TEXT KEYWORDS": {
			"Syntax": "**GET TEXT KEYWORDS** ( *text* ; *arrKeywords* {; *} )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Original text"
				],
				[
					"arrKeywords",
					"Text array",
					"<-",
					"Array containing keywords"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = unique words"
				]
			],
			"Summary": "The **GET TEXT KEYWORDS** command splits all the *text* into individual words and creates an item in the *arrKeywords* text array for each word."
		},
		"Get text resource": {
			"Syntax": "**Get text resource** ( *resID* {; *resFile*} ) : Text",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Contents of the TEXT resource"
				]
			],
			"Summary": "The **Get text resource** command returns the text stored in the text (“TEXT”) resource whose ID is passed in *resID*."
		},
		"GET USER LIST": {
			"Syntax": "**GET USER LIST** ( *userNames* ; *userNumbers* )",
			"Params": [
				[
					"userNames",
					"Text array",
					"<-",
					"User names as they appear in the Password editor window"
				],
				[
					"userNumbers",
					"Array integer",
					"<-",
					"Corresponding unique user ID numbers"
				]
			],
			"Summary": "GET USER LIST populates the arrays *userNames* and *userNumbers* with the names and unique ID numbers of the users as they appear in the Passwords window."
		},
		"GET USER PROPERTIES": {
			"Syntax": "**GET USER PROPERTIES** ( *userID* ; *name* ; *startup* ; *password* ; *nbLogin* ; *lastLogin* {; *memberships* {; *groupOwner*}} )",
			"Params": [
				[
					"userID",
					"Integer",
					"->",
					"Unique user ID number"
				],
				[
					"name",
					"Text",
					"<-",
					"Name of the user"
				],
				[
					"startup",
					"Text",
					"<-",
					"Startup method name"
				],
				[
					"password",
					"Text",
					"<-",
					"Always an empty string"
				],
				[
					"nbLogin",
					"Integer",
					"<-",
					"Number of logins to the database (Binary databases only)"
				],
				[
					"lastLogin",
					"Date",
					"<-",
					"Date of last login to the database (Binary databases only)"
				],
				[
					"memberships",
					"Array integer",
					"<-",
					"ID numbers of groups to which the user belongs"
				],
				[
					"groupOwner",
					"Integer",
					"<-",
					"ID number of user group owner (Binary databases only)"
				]
			],
			"Summary": "**GET USER PROPERTIES** returns the information about the user whose unique user ID number you pass in *userID*."
		},
		"GET WINDOW RECT": {
			"Syntax": "**GET WINDOW RECT** ( *left* ; *top* ; *right* ; *bottom* {; *window*} )",
			"Params": [
				[
					"left",
					"Integer",
					"<-",
					"Left coordinate of window's contents area"
				],
				[
					"top",
					"Integer",
					"<-",
					"Top coordinate of window's contents area"
				],
				[
					"right",
					"Integer",
					"<-",
					"Right coordinate of window's contents area"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"Bottom coordinate of window's contents area"
				],
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted or MDI window if -1 (Windows)"
				]
			],
			"Summary": "The **GET WINDOW RECT** command returns the coordinates of the window whose reference number is passed in *window*."
		},
		"Get window title": {
			"Syntax": "**Get window title** {( *window* )} : Text",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Window title"
				]
			],
			"Summary": "The **Get window title** command returns the title of the window whose reference number is passed in *window*."
		},
		"GOTO OBJECT": {
			"Syntax": "**GOTO OBJECT** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified = object is an object name (string) If omitted = object is a field or a variable"
				],
				[
					"object",
					"Field, Variable",
					"->",
					"Object name (if * specified) or Field or Variable (if * omitted) to go to"
				]
			],
			"Summary": "The **GOTO OBJECT** command is used to select the data entry object *object* as the active area of the form."
		},
		"GOTO RECORD": {
			"Syntax": "**GOTO RECORD** ( {*aTable* ;} *record* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table in which to go to the record, or Default table, if omitted"
				],
				[
					"record",
					"Integer",
					"->",
					"Number returned by Record number"
				]
			],
			"Summary": "**GOTO RECORD** selects the specified record of *aTable* as the current record."
		},
		"GOTO SELECTED RECORD": {
			"Syntax": "**GOTO SELECTED RECORD** ( {*aTable* ;} *record* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table in which to go to the selected record, or Default table, if omitted"
				],
				[
					"record",
					"Integer",
					"->",
					"Position of record in the selection"
				]
			],
			"Summary": "**GOTO SELECTED RECORD** moves to the specified record in the current selection of *aTable* and makes that record the current record."
		},
		"GOTO XY": {
			"Syntax": "**GOTO XY** ( *x* ; *y* )",
			"Params": [
				[
					"x",
					"Integer",
					"->",
					"x (horizontal) position of cursor"
				],
				[
					"y",
					"Integer",
					"->",
					"y (vertical) position of cursor"
				]
			],
			"Summary": "The **GOTO XY** command is used in conjunction with the MESSAGE command when you display messages in a window opened using Open window."
		},
		"GRAPH SETTINGS": {
			"Syntax": "**GRAPH SETTINGS** ( *graphPicture* ; *xmin* ; *xmax* ; *ymin* ; *ymax* ; *xprop* ; *xgrid* ; *ygrid* ; *title* {; *title2* ; ... ; *titleN*} )",
			"Params": [
				[
					"graphPicture",
					"Picture",
					"->",
					"Picture variable"
				],
				[
					"xmin",
					"Integer, Date, Time",
					"->",
					"Minimum x-axis value for proportional graph (line or scatter plot only)"
				],
				[
					"xmax",
					"Integer, Date, Time",
					"->",
					"Maximum x-axis value for proportional graph (line or scatter plot only)"
				],
				[
					"ymin",
					"Integer",
					"->",
					"Minimum y-axis value"
				],
				[
					"ymax",
					"Integer",
					"->",
					"Maximum y-axis value"
				],
				[
					"xprop",
					"Boolean",
					"->",
					"TRUE for proportional x-axis; FALSE for normal x-axis (line or scatter plot only)"
				],
				[
					"xgrid",
					"Boolean",
					"->",
					"TRUE for x-axis grid; FALSE for no x-axis grid (only if xprop is TRUE)"
				],
				[
					"ygrid",
					"Boolean",
					"->",
					"TRUE for y-axis grid; FALSE for no y-axis grid"
				],
				[
					"title",
					"Text",
					"->",
					"Title(s) for graph legend(s)"
				]
			],
			"Summary": "GRAPH SETTINGS changes the graph settings for graph displayed in a form."
		},
		"GRAPH": {
			"Syntax": "**GRAPH** ( *graphPicture* ; *graphNumber* ; *xLabels* {; *yElements*} {; *yElements2* ; ... ; *yElementsN*} )<br/>**GRAPH** ( *graphPicture* ; *graphSettings* ; *xLabels* {; *yElements*} {; *yElements2* ; ... ; *yElementsN*} )",
			"Params": [
				[
					"graphPicture",
					"Picture",
					"->",
					"Picture variable"
				],
				[
					"graphNumber &#124; graphSettings",
					"Integer, Object",
					"->",
					"Integer: Graph type number, Object: Graph settings"
				],
				[
					"xLabels",
					"Array",
					"->",
					"Labels for the x-axis"
				],
				[
					"yElements",
					"Array",
					"->",
					"Data to graph (up to eight allowed)"
				]
			],
			"Summary": "**GRAPH** draws a graph for a picture variable on the basis of values coming from arrays."
		},
		"HIDE MENU BAR": {
			"Syntax": "**HIDE MENU BAR**",
			"Params": [],
			"Summary": "The HIDE MENU BAR command makes the menu bar invisible."
		},
		"HIDE PROCESS": {
			"Syntax": "**HIDE PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number or process to be hidden"
				]
			],
			"Summary": "**HIDE PROCESS** hides all windows that belong to *process*."
		},
		"HIDE TOOL BAR": {
			"Syntax": "**HIDE TOOL BAR**",
			"Params": [],
			"Summary": "The **HIDE TOOL BAR** command handles the display of custom toolbars created by the Open form window command for the current process."
		},
		"HIDE WINDOW": {
			"Syntax": "**HIDE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number or Current process frontmost window, if omitted"
				]
			],
			"Summary": "The **HIDE WINDOW** command hides the window whose number was passed in *window* or, if this parameter is omitted, the current process frontmost window."
		},
		"HIGHLIGHT RECORDS": {
			"Syntax": "**HIGHLIGHT RECORDS** ( {*aTable* }{;}{ *setName* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table where records will be highlighted If omitted, table of current form"
				],
				[
					"setName",
					"Text",
					"->",
					"Set of records to highlight or Userset if omitted"
				],
				[
					"*",
					"Operator",
					"->",
					"Disable the automatic scroll of the list"
				]
			],
			"Summary": "The **HIGHLIGHT RECORDS** command highlights records in a list form."
		},
		"HIGHLIGHT TEXT": {
			"Syntax": "**HIGHLIGHT TEXT** ( {* ;} *object* ; *startSel* ; *endSel* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"Field, Variable, any",
					"->",
					"Object name (if * is specified) or Enterable field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"New text selection starting position"
				],
				[
					"endSel",
					"Integer",
					"->",
					"New text selection ending position"
				]
			],
			"Summary": "The HIGHLIGHT TEXT command highlights a section of the text in *object*."
		},
		"HTTP AUTHENTICATE": {
			"Syntax": "**HTTP AUTHENTICATE** ( *name* ; *password* {; *authMethod*} {; *} )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"User name"
				],
				[
					"password",
					"Text",
					"->",
					"User password"
				],
				[
					"authMethod",
					"Integer",
					"->",
					"Authentication method: 0 or omitted=not specified, 1=BASIC, 2=DIGEST"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: authentication by proxy"
				]
			],
			"Summary": "The **HTTP AUTHENTICATE** command enables HTTP requests to servers requiring authentication of the client application."
		},
		"HTTP Get certificates folder": {
			"Syntax": "**HTTP Get certificates folder**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Complete pathname of active certificates folder"
				]
			],
			"Summary": "The **HTTP Get certificates folder** command returns the complete pathname of the active client certificates folder."
		},
		"HTTP GET OPTION": {
			"Syntax": "**HTTP GET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Code of option to get"
				],
				[
					"value",
					"Integer",
					"<-",
					"Current value of option"
				]
			],
			"Summary": "The **HTTP GET OPTION** command returns the current value of the HTTP options (options used by client for next request triggered by the HTTP Get or HTTP Request commands)."
		},
		"HTTP Get": {
			"Syntax": "**HTTP Get** ( *url* ; *response* {; *headerNames* ; *headerValues*}{; *} ) : Integer",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"URL to which to send the request"
				],
				[
					"response",
					"Text, Blob, Picture, Object",
					"<-",
					"Result of request"
				],
				[
					"headerNames",
					"Text array",
					"->",
					"Header names of the request"
				],
				[
					"<-",
					"Returned header names"
				],
				[
					"headerValues",
					"Text array",
					"->",
					"Header values of the request"
				],
				[
					"<-",
					"Returned header values"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed, connection is maintained (keep-alive)If omitted, connection is closed automatically"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"HTTP status code"
				]
			],
			"Summary": "The **HTTP Get** command sends an HTTP GET request directly to a specific URL and processes the HTTP server response."
		},
		"HTTP Request": {
			"Syntax": "**HTTP Request** ( *httpMethod* ; *url* ; *contents* ; *response* {; *headerNames* ; *headerValues*}{; *} ) : Integer",
			"Params": [
				[
					"httpMethod",
					"Text",
					"->",
					"HTTP method for request"
				],
				[
					"url",
					"Text",
					"->",
					"URL to which to send the request"
				],
				[
					"contents",
					"Text, Blob, Picture, Object",
					"->",
					"Contents of request body"
				],
				[
					"response",
					"Text, Blob, Picture, Object",
					"<-",
					"Result of request"
				],
				[
					"headerNames",
					"Text array",
					"->",
					"Header names of the request"
				],
				[
					"<-",
					"Returned header names"
				],
				[
					"headerValues",
					"Text array",
					"->",
					"Header values of the request"
				],
				[
					"<-",
					"Returned header values"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed, connection is maintained (keep-alive)If omitted, connection is closed automatically"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"HTTP status code"
				]
			],
			"Summary": "The **HTTP Request** command enables all types of HTTP requests to be sent to a specific URL and processes the HTTP server response."
		},
		"HTTP SET CERTIFICATES FOLDER": {
			"Syntax": "**HTTP SET CERTIFICATES FOLDER** ( *certificatesFolder* )",
			"Params": [
				[
					"certificatesFolder",
					"Text",
					"->",
					"Pathname and name of client certificates folder"
				]
			],
			"Summary": "The **HTTP SET CERTIFICATES FOLDER** command modifies the active client certificates folder for all processes of the current session."
		},
		"HTTP SET OPTION": {
			"Syntax": "**HTTP SET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Code of option to set"
				],
				[
					"value",
					"Integer",
					"->",
					"Value of option"
				]
			],
			"Summary": "The **HTTP SET OPTION** command sets different options that are used during the next HTTP request triggered by the HTTP Get or HTTP Request commands."
		},
		"IDLE": {
			"Syntax": "**IDLE**",
			"Params": [],
			"Summary": "The IDLE command is designed only for use with the compiler."
		},
		"IMPORT DATA": {
			"Syntax": "**IMPORT DATA** ( *fileName* {; *project* {; *}} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"Access path and name of the import file"
				],
				[
					"project",
					"Text, Blob",
					"->",
					"Contents of the import project"
				],
				[
					"<-",
					"New contents of the import project (if the * parameter has been passed)"
				],
				[
					"*",
					"Operator",
					"->",
					"Displays the import dialog box and updates the project"
				]
			],
			"Summary": "The **IMPORT DATA** command imports the data located in the *fileName* file."
		},
		"IMPORT DIF": {
			"Syntax": "**IMPORT DIF** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table into which to import data, or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"DIF document from which to import data"
				]
			],
			"Summary": "The **IMPORT DIF** command reads data from *document*, a Windows or Macintosh DIF document, into the table *aTable* by creating new records for that table."
		},
		"IMPORT STRUCTURE": {
			"Syntax": "**IMPORT STRUCTURE** ( *xmlStructure* )",
			"Params": [
				[
					"xmlStructure",
					"Text",
					"->",
					"XML definition of 4D database structure"
				]
			],
			"Summary": "The **IMPORT STRUCTURE** command imports, into the current database, the XML definition of the 4D database structure passed in the *xmlStructure* parameter."
		},
		"IMPORT SYLK": {
			"Syntax": "**IMPORT SYLK** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table into which to import data, or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"SYLK document from which to import data"
				]
			],
			"Summary": "The **IMPORT SYLK** command reads data from *document*, a Windows or Macintosh SYLK document, into the table *aTable* by creating new records for that table."
		},
		"IMPORT TEXT": {
			"Syntax": "**IMPORT TEXT** ( {*aTable* ;} *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table into which to import data, or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"Text document from which to import data"
				]
			],
			"Summary": "The **IMPORT TEXT** command reads data from *document*, a Windows or Macintosh text document, into the table *aTable* by creating new records for that table."
		},
		"In break": {
			"Syntax": "**In break**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns True if the execution cycle is in break"
				]
			],
			"Summary": "**In break** returns True for the In break execution cycle."
		},
		"In footer": {
			"Syntax": "**In footer**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns True if the execution cycle is in footer"
				]
			],
			"Summary": "**In footer** returns True for the In footer execution cycle."
		},
		"In header": {
			"Syntax": "**In header**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns True if the execution cycle is in header"
				]
			],
			"Summary": "**In header** returns True for the In header execution cycle."
		},
		"In transaction": {
			"Syntax": "**In transaction**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns TRUE if current process is in transaction"
				]
			],
			"Summary": "The `In transaction` command returns **TRUE** if the current process is in a transaction, otherwise it returns **FALSE**."
		},
		"INSERT IN ARRAY": {
			"Syntax": "**INSERT IN ARRAY** ( *array* ; *where* {; *howMany*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Name of the array"
				],
				[
					"where",
					"Integer",
					"->",
					"Where to insert the elements"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Number of elements to be inserted, or 1 element if omitted"
				]
			],
			"Summary": "The INSERT IN ARRAY command inserts one or more elements into the array *array*."
		},
		"INSERT IN BLOB": {
			"Syntax": "**INSERT IN BLOB** ( *blob* ; *offset* ; *len* {; *filler*} )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB into which bytes will be inserted"
				],
				[
					"offset",
					"Integer",
					"->",
					"Starting position where bytes will be inserted"
				],
				[
					"len",
					"Integer",
					"->",
					"Number of bytes to be inserted"
				],
				[
					"filler",
					"Integer",
					"->",
					"Default byte value (0x00..0xFF) 0x00 if omitted"
				]
			],
			"Summary": "The INSERT IN BLOB command inserts the number of bytes specified by *len* into the BLOB *blob* at the position specified by *offset*."
		},
		"INSERT IN LIST": {
			"Syntax": "**INSERT IN LIST** ( {* ;} *list* ; *beforeItemRef* ; *itemText* ; *itemRef* {; *sublist* ; *expanded*} )<br/>**INSERT IN LIST** ( * ; *list* ; * ; *itemText* ; *itemRef* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"beforeItemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number or 0 for the last item added to the list or * for the currently selected list item"
				],
				[
					"itemText",
					"Text",
					"->",
					"Text for the new list item"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"Unique reference number for the new list item"
				],
				[
					"sublist",
					"Integer",
					"->",
					"Optional sublist to attach to the new list item"
				],
				[
					"expanded",
					"Boolean",
					"->",
					"Indicates if the sublist will be expanded or collapsed"
				]
			],
			"Summary": "The INSERT IN LIST command inserts the item designated by the *itemRef* parameter in the list whose reference number or object name you pass in *list*."
		},
		"INSERT MENU ITEM": {
			"Syntax": "**INSERT MENU ITEM** ( *menu* ; *afterItem* ; *itemText* {; *subMenu* {; *process*}}{; *} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Menu number or Menu reference"
				],
				[
					"afterItem",
					"Integer",
					"->",
					"Menu item number"
				],
				[
					"itemText",
					"Text",
					"->",
					"Text for the menu item to be inserted"
				],
				[
					"subMenu",
					"Text",
					"->",
					"Reference of submenu associated with item"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: consider metacharacters as standard characters"
				]
			],
			"Summary": "The **INSERT MENU ITEM** command inserts new menu items into the menu whose number or reference is passed in *menu* after the existing menu item whose number is passed in *afterItem*."
		},
		"Insert string": {
			"Syntax": "**Insert string** ( *source* ; *what* ; *where* ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"String in which to insert the other string"
				],
				[
					"what",
					"Text",
					"->",
					"String to insert"
				],
				[
					"where",
					"Integer",
					"->",
					"Where to insert"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Resulting string"
				]
			],
			"Summary": "**Insert string** inserts a string into *source* and returns the resulting string."
		},
		"Int": {
			"Syntax": "**Int** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number whose integer portion is returned"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Integer portion of number"
				]
			],
			"Summary": "Int returns the integer portion of *number*."
		},
		"INTEGER TO BLOB": {
			"Syntax": "**INTEGER TO BLOB** ( *integer* ; *blob* ; *byteOrder* {; offset} )<br/>**INTEGER TO BLOB** ( *integer* ; *blob* ; *byteOrder* {; *} )",
			"Params": [
				[
					"integer",
					"Integer",
					"->",
					"Integer value to write into the BLOB"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB to receive the Integer value"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset expressed in bytes within the BLOB<br/>New offset after writing if not *"
				],
				[
					"*",
					"Operator",
					"->",
					"* to append the value"
				]
			],
			"Summary": "The INTEGER TO BLOB command writes the 2-byte Integer value *integer* into the BLOB *blob*."
		},
		"INTEGRATE MIRROR LOG FILE": {
			"Syntax": "**INTEGRATE MIRROR LOG FILE** ( *pathName* ; *operationNum* {; *mode* {; *errObject*}} )",
			"Params": [
				[
					"pathName",
					"Text",
					"->",
					"Name or pathname of the log file to be integrated"
				],
				[
					"operationNum",
					"Real",
					"->",
					"Number of last operation integrated or -2 to integrate the whole file"
				],
				[
					"<-",
					"New number of last operation integrated"
				],
				[
					"mode",
					"Integer",
					"->",
					"0=strict mode (default mode), 1=auto repair mode"
				],
				[
					"errObject",
					"Object",
					"<-",
					"Missed operation(s)"
				]
			],
			"Summary": "**Preliminary note:** This command only works with 4D Server."
		},
		"INTERSECTION": {
			"Syntax": "**INTERSECTION** ( *set1* ; *set2* ; *resultSet* )",
			"Params": [
				[
					"set1",
					"Text",
					"->",
					"First set"
				],
				[
					"set2",
					"Text",
					"->",
					"Second set"
				],
				[
					"resultSet",
					"Text",
					"->",
					"Resulting set"
				]
			],
			"Summary": "**INTERSECTION** compares *set1* and *set2* and selects only the records that are in both."
		},
		"INVOKE ACTION": {
			"Syntax": "**INVOKE ACTION** ( *action* {; *target*} )",
			"Params": [
				[
					"action",
					"Text",
					"->",
					"Standard action name or pattern including parameter if required"
				],
				[
					"target",
					"Integer",
					"->",
					"Defines where to execute the action: current form (default) or main form"
				]
			],
			"Summary": "The **INVOKE ACTION** command triggers the standard action defined by the *action* parameter, optionally in the *target* context."
		},
		"Is a list": {
			"Syntax": "**Is a list** ( *list* ) : Boolean",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"ListRef value to be tested"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"TRUE if list is a hierarchical list FALSE if list is not a hierarchical list"
				]
			],
			"Summary": "The Is a list command returns TRUE if the value you pass in *list* is a valid reference to a hierarchical list."
		},
		"Is a variable": {
			"Syntax": "**Is a variable** ( *aPointer* ) : Boolean",
			"Params": [
				[
					"aPointer",
					"Pointer",
					"->",
					"Pointer to be tested"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"TRUE = Pointer points to a variable FALSE = Pointer does not point to a variable"
				]
			],
			"Summary": "The Is a variable command returns True if the pointer you pass in *aPointer* references a defined variable."
		},
		"Is compiled mode": {
			"Syntax": "**Is compiled mode** {( * )} : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Returns information about host database"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Compiled (True), Interpreted (False)"
				]
			],
			"Summary": "Is compiled mode tests whether you are running in compiled mode (True) or interpreted mode (False)."
		},
		"Is data file locked": {
			"Syntax": "**Is data file locked**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True = file/segment locked False = file/segment not locked"
				]
			],
			"Summary": "The Is data file locked command returns True if the data file of the open database or at least one of its segments is locked — i."
		},
		"Is editing text": {
			"Syntax": "**Is editing text**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if text is being entered, False otherwise"
				]
			],
			"Summary": "The **Is editing text** command returns **True** if the user is entering values in an input form object, and **False** in all other cases."
		},
		"Is field number valid": {
			"Syntax": "**Is field number valid** ( *tablePtr* ; *fieldNum* ) : Boolean<br/>**Is field number valid** ( *tableNum* ; *fieldNum* ) : Boolean",
			"Params": [
				[
					"tableNum &#124; tablePtr",
					"Integer, Pointer",
					"->",
					"Table number or Pointer to table"
				],
				[
					"fieldNum",
					"Integer",
					"->",
					"Field number"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = field exists in the table False = field does not exist in the table"
				]
			],
			"Summary": "The Is field number valid command returns True if the field whose number is passed in the *fieldNum* parameter exists in the table whose number or pointer is passed in the *tableNum* or *tablePtr* parameter."
		},
		"Is field value Null": {
			"Syntax": "**Is field value Null** ( *aField* ) : Boolean",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field to be evaluated"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = field is NULL, False = field is not NULL"
				]
			],
			"Summary": "The Is field value Null command returns **True** if the field designated by the *aField* parameter contains the NULL value, and **False** otherwise."
		},
		"Is in print preview": {
			"Syntax": "**Is in print preview**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True = Print preview,False = No print preview"
				]
			],
			"Summary": "The **Is in print preview** command returns True if the **Preview on Screen** option is checked in the printing dialog box and False otherwise."
		},
		"Is in set": {
			"Syntax": "**Is in set** ( *set* ) : Boolean",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"Name of the set to test"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Current record of set's table is in set (True) or Current record of set's table is not in set (False)"
				]
			],
			"Summary": "Is in set tests whether or not the current record for the table is in *set*."
		},
		"Is license available": {
			"Syntax": "**Is license available** {( *license* )} : Boolean",
			"Params": [
				[
					"license",
					"Integer",
					"->",
					"Plug-in for which license validity testing is desired"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if plug-in is available, otherwise False"
				]
			],
			"Summary": "The Is license available command lets you find out the availability of a plug-in."
		},
		"Is macOS": {
			"Syntax": "**Is macOS** : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if operating system = macOS, else False"
				]
			],
			"Summary": "The **Is macOS** command returns True if the current operating system is macOS."
		},
		"Is new record": {
			"Syntax": "**Is new record** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table of the record to examine or Default table if this parameter is omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the record is being created, False otherwise"
				]
			],
			"Summary": "The **Is new record** command returns True when *aTable*’s current record is being created and has not yet been saved in the current process."
		},
		"Is nil pointer": {
			"Syntax": "**Is nil pointer** ( *aPointer* ) : Boolean",
			"Params": [
				[
					"aPointer",
					"Pointer",
					"->",
					"Pointer to be tested"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"TRUE = Nil pointer (->[]) FALSE = Valid pointer to an existing object"
				]
			],
			"Summary": "The **Is nil pointer** command returns True if the pointer you pass in *aPointer* is Nil (*\\->\\[\\]*)."
		},
		"Is picture file": {
			"Syntax": "**Is picture file** ( *filePath* {; *} ) : Boolean",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"File pathname"
				],
				[
					"*",
					"Operator",
					"->",
					"Validate data"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = filePath designates a picture file; otherwise, False"
				]
			],
			"Summary": "The Is picture file command tests the file designated by the *filePath* parameter and returns True if it is a valid picture file."
		},
		"Is record loaded": {
			"Syntax": "**Is record loaded** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table of the record to examine or Default table if this parameter is omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the record is loaded Otherwise False"
				]
			],
			"Summary": "The Is record loaded command returns True if *aTable*’s current record is loaded in the current process."
		},
		"Is table number valid": {
			"Syntax": "**Is table number valid** ( *tableNum* ) : Boolean",
			"Params": [
				[
					"tableNum",
					"Integer",
					"->",
					"Table number"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = table exists in database, False = table does not exist in database"
				]
			],
			"Summary": "The Is table number valid command returns True if the table whose number is passed in the *tableNum* parameter exists in the database and False otherwise."
		},
		"Is user deleted": {
			"Syntax": "**Is user deleted** ( *userNumber* ) : Boolean",
			"Params": [
				[
					"userNumber",
					"Integer",
					"->",
					"User ID number"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"TRUE = User account is deleted or does not exist FALSE = User account is active"
				]
			],
			"Summary": "The Is user deleted command tests the user account whose unique user ID number you pass in *userID*."
		},
		"Is waiting mouse up": {
			"Syntax": "**Is waiting mouse up**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the object is waiting for a mouse up event, False otherwise"
				]
			],
			"Summary": "The **Is waiting mouse up** command returns **True** if the current object has been clicked and the mouse button has not been released, while the parent window has the focus."
		},
		"Is window maximized": {
			"Syntax": "**Is window maximized** ( *window* ) : Boolean",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the window is maximized, False otherwise"
				]
			],
			"Summary": "The **Is window maximized** command returns **True** if the window whose reference number is passed in *window* is currently maximized, and **False** otherwise."
		},
		"Is window reduced": {
			"Syntax": "**Is window reduced** ( *window* ) : Boolean",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the window is reduced in the taskbar or the in dock, False otherwise"
				]
			],
			"Summary": "The **Is window reduced** command returns **True** if the window whose reference number is passed in *window* is currently reduced in the taskbar (Windows) or in the dock (macOS), and **False** otherwise."
		},
		"Is Windows": {
			"Syntax": "**Is Windows** : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if operating system = Windows, else False"
				]
			],
			"Summary": "The **Is Windows** command returns True if the current operating system is Windows."
		},
		"JSON PARSE ARRAY": {
			"Syntax": "**JSON PARSE ARRAY** ( *jsonString* ; *array* )",
			"Params": [
				[
					"jsonText",
					"Text",
					"->",
					"JSON string to parse"
				],
				[
					"array",
					"Array",
					"<-",
					"Array containing result from parsing of JSON string"
				]
			],
			"Summary": "The **JSON PARSE ARRAY** command parses the contents of a JSON-formatted string and puts the data extracted into the *array* parameter."
		},
		"JSON Parse": {
			"Syntax": "**JSON Parse** ( *jsonString* {; *type*}{; *} ) : any",
			"Params": [
				[
					"jsonText",
					"Text",
					"->",
					"JSON string to parse"
				],
				[
					"type",
					"Integer",
					"->",
					"Type in which to convert the values"
				],
				[
					"*",
					"Operator",
					"->",
					"Adds line position and offset of each property if returned value is an object"
				],
				[
					"Function result",
					"any",
					"<-",
					"Values extracted from JSON string"
				]
			],
			"Summary": "The **JSON Parse** command parses the contents of a JSON-formatted string and extracts values that you can store in a 4D field or variable."
		},
		"JSON Resolve pointers": {
			"Syntax": "**JSON Resolve pointers** ( *object* {; *options*} ) : Object",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Object containing JSON pointers to resolve"
				],
				[
					"<-",
					"Object with JSON pointers resolved (only if result is an object)"
				],
				[
					"options",
					"Object",
					"->",
					"Options for pointer resolution"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object containing the result of the processing"
				]
			],
			"Summary": "The **JSON Resolve pointers** command resolves all the JSON pointers found in the *object*, with regards to *options* settings (if any)."
		},
		"JSON Stringify array": {
			"Syntax": "**JSON Stringify array** ( *array* {; *} ) : Text",
			"Params": [
				[
					"array",
					"Text array, Real array, Boolean array, Pointer array, Object array",
					"->",
					"Array whose contents must be serialized"
				],
				[
					"*",
					"Operator",
					"->",
					"Pretty formatting"
				],
				[
					"Function result",
					"Text",
					"<-",
					"String containing the serialized JSON array"
				]
			],
			"Summary": "The **JSON Stringify array** command converts the 4D array *array* into a serialized JSON array."
		},
		"JSON Stringify": {
			"Syntax": "**JSON Stringify** ( *value* {; *} ) : Text",
			"Params": [
				[
					"value",
					"Object, any",
					"->",
					"Data to convert into JSON string"
				],
				[
					"*",
					"Operator",
					"->",
					"Pretty printing"
				],
				[
					"Function result",
					"Text",
					"<-",
					"String containing serialized JSON text"
				]
			],
			"Summary": "The **JSON Stringify** command converts the *value* parameter into a JSON string."
		},
		"JSON TO SELECTION": {
			"Syntax": "**JSON TO SELECTION** ( *aTable* ; *jsonArray* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"4D table into which elements are copied"
				],
				[
					"jsonArray",
					"Text",
					"->",
					"Array of objects in JSON"
				]
			],
			"Summary": "The **JSON TO SELECTION** command copies the contents of an array of JSON objects *jsonArray* to the selection of records of *aTable*."
		},
		"JSON Validate": {
			"Syntax": "**JSON Validate** ( *vJson* ; *vSchema* ) : Object",
			"Params": [
				[
					"vJson",
					"Object",
					"->",
					"JSON object to validate"
				],
				[
					"vSchema",
					"Object",
					"->",
					"JSON schema used to validate JSON objects"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Validation status and errors (if any)"
				]
			],
			"Summary": "The **JSON Validate** command checks the compliance of the *vJson* JSON contents with the rules defined in the *vSchema* JSON schema."
		},
		"Keystroke": {
			"Syntax": "**Keystroke**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Character entered by user"
				]
			],
			"Summary": "**Keystroke** returns the character entered by the user into a field or an enterable area."
		},
		"KILL WORKER": {
			"Syntax": "**KILL WORKER** {( *process* )}",
			"Params": [
				[
					"process",
					"Text, Integer",
					"->",
					"Number or name of process to kill (kills current process if omitted)"
				]
			],
			"Summary": "The **KILL WORKER** command posts a message to the worker process whose name or number you passed in *process*, asking it to ignore any pending messages and to terminate its execution as soon as the current task ends."
		},
		"Last field number": {
			"Syntax": "**Last field number** ( *tableNum* ) : Integer<br/>**Last field number** ( *tablePtr* ) : Integer",
			"Params": [
				[
					"tableNum &#124; tablePtr",
					"Integer, Pointer",
					"->",
					"Table number or Pointer to table"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Highest field number in table"
				]
			],
			"Summary": "The **Last field number** command returns the highest field number among the fields in the table whose number or pointer you pass in *tableNum* or *tablePtr*."
		},
		"Last query path": {
			"Syntax": "**Last query path** ( *descFormat* ) : Text",
			"Params": [
				[
					"descFormat",
					"Integer",
					"->",
					"Description format (Text or XML)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Description of last executed query path"
				]
			],
			"Summary": "The **Last query path** command returns the detailed internal description of the actual path of the last query carried out on the data."
		},
		"Last query plan": {
			"Syntax": "**Last query plan** ( *descFormat* ) : Text",
			"Params": [
				[
					"descFormat",
					"Integer",
					"->",
					"Description format (Text or XML)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Description of last executed query plan"
				]
			],
			"Summary": "The **Last query plan** command returns the detailed internal description of the query plan for the last query carried out on the data."
		},
		"LAST RECORD": {
			"Syntax": "**LAST RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to move to the last selected record, or Default table, if omitted"
				]
			],
			"Summary": "**LAST RECORD** makes the last record of the current selection of *aTable* the current record and loads the record from disk."
		},
		"Last table number": {
			"Syntax": "**Last table number**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Highest table number in the database"
				]
			],
			"Summary": "**Last table number** returns the highest table number among the tables in the database."
		},
		"Last update log path": {
			"Syntax": "**Last update log path** : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Pathname of most recent update log"
				]
			],
			"Summary": "The **Last update log path** command returns the complete pathname of the most recent update log file found on the machine where it is called."
		},
		"LAUNCH EXTERNAL PROCESS": {
			"Syntax": "**LAUNCH EXTERNAL PROCESS** ( *fileName* {; *inputStream* {; *outputStream* {; *errorStream*}}}{; *pid*} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"File path and arguments of file to launch"
				],
				[
					"inputStream",
					"Text, Blob",
					"->",
					"Input stream (stdin)"
				],
				[
					"outputStream",
					"Text, Blob",
					"<-",
					"Output stream (stdout)"
				],
				[
					"errorStream",
					"Text, Blob",
					"<-",
					"Error stream (stderr)"
				],
				[
					"pid",
					"Integer",
					"<-",
					"Unique identifier for external process"
				]
			],
			"Summary": "Starting with 4D v19 R4, we recommend the use of the `4D.SystemWorker class` to run and control external processes."
		},
		"LDAP LOGIN": {
			"Syntax": "**LDAP LOGIN** ( *url* ; *login* ; *password* {; *digest*} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"URL of LDAP server to connect to"
				],
				[
					"login",
					"Text",
					"->",
					"Login entry"
				],
				[
					"password",
					"Text",
					"->",
					"Password of login entry"
				],
				[
					"digest",
					"Integer",
					"->",
					"0 = send password in digest MD5 (default), 1 = send password without encryption"
				]
			],
			"Summary": "The **LDAP LOGIN** command opens a read-only connection to the LDAP server specified in the *url* parameter with the *login* and *password* identifiers provided."
		},
		"LDAP LOGOUT": {
			"Syntax": "**LDAP LOGOUT**",
			"Params": [],
			"Summary": "The **LDAP LOGOUT** command closes the connection with an LDAP server in the current process (if applicable)."
		},
		"LDAP SEARCH ALL": {
			"Syntax": "**LDAP SEARCH ALL** ( *dnRootEntry* ; *arrResult* ; *filter* {; *scope* {; *attributes* {; *attributesAsArray*}}} )",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"Distinguished Name of root entry where search is to start"
				],
				[
					"arrResult",
					"Object array",
					"<-",
					"Result of the search"
				],
				[
					"filter",
					"Text",
					"->",
					"LDAP search filter"
				],
				[
					"scope",
					"Text",
					"->",
					"Scope of the search: \"base\" (default), \"one\", or \"sub\""
				],
				[
					"attributes",
					"Text array",
					"->",
					"Attribute(s) to fetch"
				],
				[
					"attributesAsArray",
					"Boolean array",
					"->",
					"True = force attributes to be returned as array; false = force attributes to be returned as a simple variable"
				]
			],
			"Summary": "The **LDAP SEARCH ALL** command searches in the target LDAP server for all occurrences matching the criteria defined."
		},
		"LDAP Search": {
			"Syntax": "**LDAP Search** ( *dnRootEntry* ; *filter* {; *scope* {; *attributes* {; *attributesAsArray*}}} ) : Object",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"Distinguished Name of root entry where search is to start"
				],
				[
					"filter",
					"Text",
					"->",
					"LDAP search filter"
				],
				[
					"scope",
					"Text",
					"->",
					"Scope of search: \"base\" (default), \"one\", or \"sub\""
				],
				[
					"attributes",
					"Text array",
					"->",
					"Attribute(s) to fetch"
				],
				[
					"attributesAsArray",
					"Boolean array",
					"->",
					"True = force attributes to be returned as array; False = force attributes to be returned as a simple variable"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Key/value attributes"
				]
			],
			"Summary": "The **LDAP Search** command searches in the target LDAP server for the first occurrence matching the criteria defined."
		},
		"Length": {
			"Syntax": "**Length** ( *string* ) : Integer",
			"Params": [
				[
					"string",
					"Text",
					"->",
					"String for which to return length"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Length of string"
				]
			],
			"Summary": "**Length** is used to find the length of *aString*."
		},
		"Level": {
			"Syntax": "**Level**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Current break or header level"
				]
			],
			"Summary": "Level is used to determine the current header or break level."
		},
		"License usage": {
			"Syntax": "**License usage** : Collection",
			"Params": [
				[
					"Function result",
					"Collection",
					"<-",
					"A collection of objects with information on the retained licenses."
				]
			],
			"Summary": "The **License usage** command returns a collection of objects containing information on the retained licenses."
		},
		"List item parent": {
			"Syntax": "**List item parent** ( {* ;} *list* ; *itemRef* ) : Integer<br/>**List item parent** ( * ; *list* ; * ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number  (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Operator, Integer",
					"->",
					"Item reference number or 0 for the last item added to the list or * for the current item in the list"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Item reference number of parent item or 0 if none"
				]
			],
			"Summary": "The **List item parent** command returns the item reference number of a parent item."
		},
		"List item position": {
			"Syntax": "**List item position** ( {* ;} *list* ; *itemRef* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"Item reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Item position in expanded/collapsed lists"
				]
			],
			"Summary": "The **List item position** command returns the position of the item whose item reference number is passed in *itemRef*, within the list whose list reference number or object name is passed in *list*."
		},
		"LIST OF CHOICE LISTS": {
			"Syntax": "**LIST OF CHOICE LISTS** ( *numsArray* ; *namesArray* )",
			"Params": [
				[
					"numsArray",
					"Array integer",
					"<-",
					"Numbers of choice lists"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"Names of choice lists"
				]
			],
			"Summary": "The LIST OF CHOICE LISTS command returns, in the synchronized *numsArr* and *namesArr* arrays, the numbers and names of the choice lists defined by the list editor in Design mode."
		},
		"LIST OF STYLE SHEETS": {
			"Syntax": "**LIST OF STYLE SHEETS** ( *arrStyleSheets* )",
			"Params": [
				[
					"arrStyleSheets",
					"Text array",
					"<-",
					"Names of style sheets defined in the application"
				]
			],
			"Summary": "The **LIST OF STYLE SHEETS** command returns the list of application style sheets in the *arrStyleSheets* array."
		},
		"LIST TO ARRAY": {
			"Syntax": "**LIST TO ARRAY** ( *list* ; *array* {; *itemRefs*} )",
			"Params": [
				[
					"list",
					"Text, Integer",
					"->",
					"Name or Reference of list from which to copy the first level items"
				],
				[
					"array",
					"Array",
					"<-",
					"Array to which to copy the list items"
				],
				[
					"itemRefs",
					"Array",
					"<-",
					"List item reference numbers"
				]
			],
			"Summary": "The LIST TO ARRAY command creates or overrides the array *array* with the first level items of the list or choice list designated by *list*."
		},
		"LIST TO BLOB": {
			"Syntax": "**LIST TO BLOB** ( *list* ; *blob* {; *} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"Hierarchical list to store in the BLOB"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB to receive the Hierarchical list"
				],
				[
					"*",
					"Operator",
					"->",
					"* to append the value"
				]
			],
			"Summary": "The LIST TO BLOB command stores the hierarchical list *list* in the BLOB *blob*."
		},
		"LISTBOX COLLAPSE": {
			"Syntax": "**LISTBOX COLLAPSE** ( {* ;} *object* {; *recursive* {; *selector* {; *line* {; *column*}}}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"recursive",
					"Boolean",
					"->",
					"True = collapse sublevels<br/>False = do not collapse sublevels"
				],
				[
					"selector",
					"Integer",
					"->",
					"Part of list box to collapse"
				],
				[
					"line",
					"Integer",
					"->",
					"Number of break row to collapse or <br/>Number of list box level to collapse"
				],
				[
					"column",
					"Integer",
					"->",
					"Number of break column to collapse"
				]
			],
			"Summary": "The LISTBOX COLLAPSE command is used to collapse the break rows of the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX DELETE COLUMN": {
			"Syntax": "**LISTBOX DELETE COLUMN** ( {* ;} *object* ; *colPosition* {; *number*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"Column number to remove"
				],
				[
					"number",
					"Integer",
					"->",
					"Number of columns to be removed"
				]
			],
			"Summary": "The **LISTBOX DELETE COLUMN** command removes one or more columns (visible or invisible) in the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX DELETE ROWS": {
			"Syntax": "**LISTBOX DELETE ROWS** ( {* ;} *object* ; *rowPosition* {; *numRows*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"rowPosition",
					"Integer",
					"->",
					"Position of the row to delete"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Number of rows to delete"
				]
			],
			"Summary": "The **LISTBOX DELETE ROWS** command deletes one or several row(s) starting at *rowPosition* row (visible or not) from the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX DUPLICATE COLUMN": {
			"Syntax": "**LISTBOX DUPLICATE COLUMN** ( {* ;} *object* ; *colPosition* ; *colName* ; *colVariable* ; *headerName* ; *headerVar* {; *footerName* ; *footerVar*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted) of the column to be duplicated"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"Location of new duplicated column"
				],
				[
					"colName",
					"Text",
					"->",
					"Name of new column"
				],
				[
					"colVariable",
					"Array, Field, Variable, Pointer",
					"->",
					"Name of the column array variable or field or variable"
				],
				[
					"headerName",
					"Text",
					"->",
					"Column header object name"
				],
				[
					"headerVar",
					"Integer, Pointer",
					"->",
					"Column header variable"
				],
				[
					"footerName",
					"Text",
					"->",
					"Column footer object name"
				],
				[
					"footerVar",
					"Variable, Pointer",
					"->",
					"Column footer variable"
				]
			],
			"Summary": "The **LISTBOX DUPLICATE COLUMN** command duplicates the column designated by the *object* and *\\** parameters by programming in the context of the form being executed (Application mode)."
		},
		"LISTBOX EXPAND": {
			"Syntax": "**LISTBOX EXPAND** ( {* ;} *object* {; *recursive* {; *selector* {; *line* {; *column*}}}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"recursive",
					"Boolean",
					"->",
					"True = expand sublevels<br/>False = do not expand sublevels"
				],
				[
					"selector",
					"Integer",
					"->",
					"Part of list box to expand"
				],
				[
					"line",
					"Integer",
					"->",
					"Number of break row to expand or <br/>Number of list box level to expand"
				],
				[
					"column",
					"Integer",
					"->",
					"Number of break column to expand"
				]
			],
			"Summary": "The LISTBOX EXPAND command is used to expand the break rows of the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get array": {
			"Syntax": "**LISTBOX Get array** ( {* ;} *object* ; *arrType* ) : Pointer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"arrType",
					"Integer",
					"->",
					"Type of array"
				],
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to array associated with property"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX GET ARRAYS": {
			"Syntax": "**LISTBOX GET ARRAYS** ( {* ;} *object* ; *arrColNames* ; *arrHeaderNames* ; *arrColVars* ; *arrHeaderVars* ; *arrColsVisible* ; *arrStyles* {; *arrFooterNames* ; *arrFooterVars*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"arrColNames",
					"Text array",
					"<-",
					"Column object names"
				],
				[
					"arrHeaderNames",
					"Text array",
					"<-",
					"Header object names"
				],
				[
					"arrColVars",
					"Pointer array",
					"<-",
					"Pointers to column variables or Pointers to column fields or Nil"
				],
				[
					"arrHeaderVars",
					"Pointer array",
					"<-",
					"Pointers to header variables"
				],
				[
					"arrColsVisible",
					"Boolean array",
					"<-",
					"Visibility of each column"
				],
				[
					"arrStyles",
					"Pointer array",
					"<-",
					"Pointers to arrays, or style, color and row control variables, or Nil"
				],
				[
					"arrFooterNames",
					"Text array",
					"<-",
					"Column footer object names"
				],
				[
					"arrFooterVars",
					"Pointer array",
					"<-",
					"Pointers to column footer variables"
				]
			],
			"Summary": "The **LISTBOX GET ARRAYS** command returns a set of synchronized arrays providing information on each column (visible or invisible) in the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX Get auto row height": {
			"Syntax": "**LISTBOX Get auto row height** ( {* ;} *object* ; *selector* {; *unit*} )  : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string). If omitted, object is a variable."
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Height value to get: lk row min height or lk row max height"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 = pixels, 1 = lines"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Selected row height value"
				]
			],
			"Summary": "The **LISTBOX Get auto row height** command returns the current minimum or maximum row height value set for the list box object designated using the *object* and *\\** parameters."
		},
		"LISTBOX GET CELL COORDINATES": {
			"Syntax": "**LISTBOX GET CELL COORDINATES** ( {* ;} *object* ; *column* ; *row* ; *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified = object is the name of the object (string) If omitted = object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or variable (if * is omitted)"
				],
				[
					"column",
					"Integer",
					"->",
					"Column number"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"left",
					"Integer",
					"<-",
					"Left coordinate of the object"
				],
				[
					"top",
					"Integer",
					"<-",
					"Top coordinate of the object"
				],
				[
					"right",
					"Integer",
					"<-",
					"Right coordinate of the object"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"Bottom coordinate of the object"
				]
			],
			"Summary": "The **LISTBOX GET CELL COORDINATES** command returns in variables or fields the *left*, *top*, *right* and *bottom* coordinates (in points) of the cell designated by the *column* and *row* parameters, in the list box defined by *\\** and *object*."
		},
		"LISTBOX GET CELL POSITION": {
			"Syntax": "**LISTBOX GET CELL POSITION** ( {* ;} *object* {; *X* ; *Y* }; *column* ; *row* {; *colVar*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"X",
					"Real",
					"->",
					"Horizontal coordinate of mouse"
				],
				[
					"Y",
					"Real",
					"->",
					"Vertical coordinate of mouse"
				],
				[
					"column",
					"Integer",
					"<-",
					"Column number"
				],
				[
					"row",
					"Integer",
					"<-",
					"Row number"
				],
				[
					"colVar",
					"Pointer",
					"<-",
					"Pointer to column variable"
				]
			],
			"Summary": "The **LISTBOX GET CELL POSITION** command returns the numbers of the *column* and the *row* that correspond to the location in the listbox (designated by *\\** and *object*) of the last mouse click, last selection made via the keyboard, or the horizontal and vertical coordinates of the mouse."
		},
		"LISTBOX Get column formula": {
			"Syntax": "**LISTBOX Get column formula** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Formula associated with column"
				]
			],
			"Summary": "The **LISTBOX Get column formula** command returns the formula associated with the list box column designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get column width": {
			"Syntax": "**LISTBOX Get column width** ( {* ;} *object* {; *minWidth* {; *maxWidth*}} )  : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"minWidth",
					"Integer",
					"<-",
					"Minimum column width (in pixels)"
				],
				[
					"maxWidth",
					"Integer",
					"<-",
					"Maximum column width (in pixels)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Column width (in pixels)"
				]
			],
			"Summary": "The **LISTBOX Get column width** command returns the width (in pixels) of the column set in the *object* and *\\** parameters."
		},
		"LISTBOX Get footer calculation": {
			"Syntax": "**LISTBOX Get footer calculation** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Type of calculation"
				]
			],
			"Summary": "The **LISTBOX Get footer calculation** command returns the type of calculation associated with the footer area of the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get footers height": {
			"Syntax": "**LISTBOX Get footers height** ( {* ;} *object* {; *unit*} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 or omitted = pixels, 1 = lines"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Row height"
				]
			],
			"Summary": "The **LISTBOX Get footers height** command returns the height of the footer row in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX GET GRID COLORS": {
			"Syntax": "**LISTBOX GET GRID COLORS** ( {* ;} *object* ; *hColor* ; *vColor* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"hColor",
					"Text, Integer",
					"<-",
					"Value of RGB color for horizontal lines"
				],
				[
					"vColor",
					"Text, Integer",
					"<-",
					"Value of RGB color for vertical lines"
				]
			],
			"Summary": "The **LISTBOX GET GRID COLORS** command returns the color of the horizontal and vertical lines making up the grid of the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX GET GRID": {
			"Syntax": "**LISTBOX GET GRID** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"horizontal",
					"Boolean",
					"<-",
					"True = shown, False = hidden"
				],
				[
					"vertical",
					"Boolean",
					"<-",
					"True = shown, False = hidden"
				]
			],
			"Summary": "The **LISTBOX GET GRID** command returns the shown/hidden status of the horizontal and/or vertical lines making up the grid of the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get headers height": {
			"Syntax": "**LISTBOX Get headers height** ( {* ;} *object* {; *unit*} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 or omitted = pixels, 1 = lines"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Row height"
				]
			],
			"Summary": "The **LISTBOX Get headers height** command returns the height of the header row in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX GET HIERARCHY": {
			"Syntax": "**LISTBOX GET HIERARCHY** ( {* ;} *object* ; *hierarchical* {; *hierarchy*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"hierarchical",
					"Boolean",
					"<-",
					"True = hierarchical list box<br/>False = non-hierarchical list box"
				],
				[
					"hierarchy",
					"Pointer array",
					"<-",
					"Array of pointers"
				]
			],
			"Summary": "The LISTBOX GET HIERARCHY command lets you find out the hierarchical properties of the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get locked columns": {
			"Syntax": "**LISTBOX Get locked columns** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of locked columns"
				]
			],
			"Summary": "The **LISTBOX Get locked columns** command returns the number of locked columns in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get number of columns": {
			"Syntax": "**LISTBOX Get number of columns** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of columns"
				]
			],
			"Summary": "The **LISTBOX Get number of columns** command returns the total number of columns (visible or invisible) present in the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX Get number of rows": {
			"Syntax": "**LISTBOX Get number of rows** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of rows"
				]
			],
			"Summary": "The **LISTBOX Get number of rows** command returns the number of rows in the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX GET OBJECTS": {
			"Syntax": "**LISTBOX GET OBJECTS** ( {* ;} *object* ; *arrObjectNames* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"arrObjectNames",
					"Text array",
					"<-",
					"Names of sub-objects comprising list box (headers, columns, footers)"
				]
			],
			"Summary": "The **LISTBOX GET OBJECTS** command returns an array containing the names of each object making up the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX GET PRINT INFORMATION": {
			"Syntax": "**LISTBOX GET PRINT INFORMATION** ( {* ;} *object* ; *selector* ; *info* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Information to get"
				],
				[
					"info",
					"Integer",
					"<-",
					"Current value"
				]
			],
			"Summary": "The **LISTBOX GET PRINT INFORMATION** command returns the current information relative to the printing of the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX Get row color as number": {
			"Syntax": "**LISTBOX Get row color as number** ( {* ;} *object* ; *row* {; *colorType*} )  : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"colorType",
					"Integer",
					"->",
					"List box font color (default) or list box background color"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Color value"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX Get row color": {
			"Syntax": "**LISTBOX Get row color** ( {* ;} *object* ; *row* {; *colorType*} )  : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"colorType",
					"Integer",
					"->",
					"List box font color (default) or list box background color"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Color value"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX Get row font style": {
			"Syntax": "**LISTBOX Get row font style** ( {* ;} *object* ; *row* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Style value"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX Get row height": {
			"Syntax": "**LISTBOX Get row height** ( {* ;} *object* ; *row* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"List box row whose height you want to get"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Row height"
				]
			],
			"Summary": "The **LISTBOX Get row height** command returns the current height of the specified *row* in the list box object designated using the *object* and *\\** parameters."
		},
		"LISTBOX Get rows height": {
			"Syntax": "**LISTBOX Get rows height** ( {* ;} *object* {; *unit*} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 or omitted = pixels, 1 = lines"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Row height"
				]
			],
			"Summary": "The **LISTBOX Get rows height** command returns the current row height for the list box object set using the *object* and *\\** parameters."
		},
		"LISTBOX Get static columns": {
			"Syntax": "**LISTBOX Get static columns** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of static columns"
				]
			],
			"Summary": "The **LISTBOX Get static columns** command returns the number of static columns in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX GET TABLE SOURCE": {
			"Syntax": "**LISTBOX GET TABLE SOURCE** ( {* ;} *object* ; *tableNum* {; *name* {; *highlightName*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"tableNum",
					"Integer",
					"<-",
					"Table number of selection"
				],
				[
					"name",
					"Text",
					"<-",
					"Name of named selection or \"\" for the current selection"
				],
				[
					"highlightName",
					"Text",
					"<-",
					"Name of highlight set"
				]
			],
			"Summary": "The LISTBOX GET TABLE SOURCE command can be used to find out the current source of the data displayed in the list box that is designated by the *\\** and *object* parameters."
		},
		"LISTBOX INSERT COLUMN FORMULA": {
			"Syntax": "**LISTBOX INSERT COLUMN FORMULA** ( {* ;} *object* ; *colPosition* ; *colName* ; *formula* ; *dataType* ; *headerName* ; *headerVar* {; *footerName* ; *footerVar*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name  (if * is specified) or Variable (if * is omitted)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"Location of column to insert"
				],
				[
					"colName",
					"Text",
					"->",
					"Name of the column object"
				],
				[
					"formula",
					"Text",
					"->",
					"4D formula associated with column"
				],
				[
					"dataType",
					"Integer",
					"->",
					"Type of formula result"
				],
				[
					"headerName",
					"Text",
					"->",
					"Name of the column header object"
				],
				[
					"headerVar",
					"Integer, Pointer",
					"->",
					"Column header variable"
				],
				[
					"footerName",
					"Text",
					"->",
					"Column footer object name"
				],
				[
					"footerVar",
					"Variable, Pointer",
					"->",
					"Column footer variable"
				]
			],
			"Summary": "The **LISTBOX INSERT COLUMN FORMULA** command inserts a column into the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX INSERT COLUMN": {
			"Syntax": "**LISTBOX INSERT COLUMN** ( {* ;} *object* ; *colPosition* ; *colName* ; *colVariable* ; *headerName* ; *headerVar* {; *footerName* ; *footerVar*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is set) or Variable (if * is omitted)"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"Location of column to insert"
				],
				[
					"colName",
					"Text",
					"->",
					"Name of the column object"
				],
				[
					"colVariable",
					"Array, Field, Variable, Pointer",
					"->",
					"Column array name or field or variable"
				],
				[
					"headerName",
					"Text",
					"->",
					"Name of the column header object"
				],
				[
					"headerVar",
					"Integer, Pointer",
					"->",
					"Column header variable"
				],
				[
					"footerName",
					"Text",
					"->",
					"Column footer object name"
				],
				[
					"footerVar",
					"Variable, Pointer",
					"->",
					"Column footer variable"
				]
			],
			"Summary": "The **LISTBOX INSERT COLUMN** command inserts a column in the list box set by the *object* and *\\** parameters."
		},
		"LISTBOX INSERT ROWS": {
			"Syntax": "**LISTBOX INSERT ROWS** ( {* ;} *object* ; *rowPosition* {; *numRows*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"rowPosition",
					"Integer",
					"->",
					"Position of the row to insert"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Number of rows to insert"
				]
			],
			"Summary": "The **LISTBOX INSERT ROWS** command inserts one or several new row(s) in the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX MOVE COLUMN": {
			"Syntax": "**LISTBOX MOVE COLUMN** ( {* ;} *object* ; *colPosition* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted) of the column to be moved"
				],
				[
					"colPosition",
					"Integer",
					"->",
					"New location of column"
				]
			],
			"Summary": "The **LISTBOX MOVE COLUMN** command moves the column designated by the *object* and *\\** parameters by programming in the context of the form being executed (Application mode)."
		},
		"LISTBOX MOVED COLUMN NUMBER": {
			"Syntax": "**LISTBOX MOVED COLUMN NUMBER** ( {* ;} *object* ; *oldPosition* ; *newPosition* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"oldPosition",
					"Integer",
					"<-",
					"Previous position of the moved column"
				],
				[
					"newPosition",
					"Integer",
					"<-",
					"New position of the moved column"
				]
			],
			"Summary": "The **LISTBOX MOVED COLUMN NUMBER** command returns two numbers in *oldPosition* and *newPosition* indicating respectively the previous position and the new position of the column moved in the list box, specified by the *object* and *\\** parameters."
		},
		"LISTBOX MOVED ROW NUMBER": {
			"Syntax": "**LISTBOX MOVED ROW NUMBER** ( {* ;} *object* ; *oldPosition* ; *newPosition* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"oldPosition",
					"Integer",
					"<-",
					"Previous position of the moved row"
				],
				[
					"newPosition",
					"Integer",
					"<-",
					"New position of the moved row"
				]
			],
			"Summary": "The **LISTBOX MOVED ROW NUMBER** command returns two numbers in *oldPosition* and *newPosition* indicating respectively the previous position and the new position of the row moved in the list box, specified by the *object* and *\\** parameters."
		},
		"LISTBOX SELECT BREAK": {
			"Syntax": "**LISTBOX SELECT BREAK** ( {* ;} *object* ; *row* ; *column* {; *action*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"Number of break row"
				],
				[
					"column",
					"Integer",
					"->",
					"Number of break column"
				],
				[
					"action",
					"Integer",
					"->",
					"Selection action"
				]
			],
			"Summary": "The **LISTBOX SELECT BREAK** command can be used to select break rows in the list box object designated by the *object* and *\\** parameters."
		},
		"LISTBOX SELECT ROW": {
			"Syntax": "**LISTBOX SELECT ROW** ( {* ;} *object* ; *rowPosition* {; *action*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"rowPosition",
					"Integer",
					"->",
					"Number of the row to select"
				],
				[
					"action",
					"Integer",
					"->",
					"Selection action"
				]
			],
			"Summary": "The LISTBOX SELECT ROW command selects the row whose number is passed in *position* in the list box set in the *object* and *\\** parameters."
		},
		"LISTBOX SELECT ROWS": {
			"Syntax": "**LISTBOX SELECT ROWS** ( {* ;} *object* ; *selection* {; *action*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"selection",
					"Object, Collection",
					"->",
					"Object or collection describing the rows to select"
				],
				[
					"action",
					"Integer",
					"->",
					"lk replace selection (default if omitted), lk add to selection, lk remove from selection"
				]
			],
			"Summary": "The **LISTBOX SELECT ROWS** command selects the rows of an entity selection or collection list box that correspond to the entities or objects in the *selection* parameter."
		},
		"LISTBOX SET ARRAY": {
			"Syntax": "**LISTBOX SET ARRAY** ( {* ;} *object* ; *arrType* ; *arrPtr* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"arrType",
					"Integer",
					"->",
					"Type of array"
				],
				[
					"arrPtr",
					"Pointer",
					"->",
					"Array to associate with property"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX SET AUTO ROW HEIGHT": {
			"Syntax": "**LISTBOX SET AUTO ROW HEIGHT** ( {* ;} *object* ; *selector* ; *value* ; *unit* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string). If omitted, object is a variable."
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Height value to set: lk row min height or lk row max height"
				],
				[
					"value",
					"Integer",
					"->",
					"Minimum or maximum row height value"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 = pixels, 1 = lines"
				]
			],
			"Summary": "The **LISTBOX SET AUTO ROW HEIGHT** command allows you to set the minimum or maximum row height *value* in the list box object designated using the *object* and *\\** parameters."
		},
		"LISTBOX SET COLUMN FORMULA": {
			"Syntax": "**LISTBOX SET COLUMN FORMULA** ( {* ;} *object* ; *formula* ; *dataType* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or  Variable (if * is omitted)"
				],
				[
					"formula",
					"Text",
					"->",
					"4D formula associated with column"
				],
				[
					"dataType",
					"Integer",
					"->",
					"Type of formula result"
				]
			],
			"Summary": "The **LISTBOX SET COLUMN FORMULA** command modifies the *formula* associated with the column of the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX SET COLUMN WIDTH": {
			"Syntax": "**LISTBOX SET COLUMN WIDTH** ( {* ;} *object* ; *width* {; *minWidth* {; *maxWidth*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"width",
					"Integer",
					"->",
					"Column width (in pixels)"
				],
				[
					"minWidth",
					"Integer",
					"->",
					"Minimum column width (in pixels)"
				],
				[
					"maxWidth",
					"Integer",
					"->",
					"Maximum column width (in pixels)"
				]
			],
			"Summary": "The **LISTBOX SET COLUMN WIDTH** command allows you to modify through programming the width of one or all column(s) of the object (list box, column or header) set using the *object* and *\\** parameters."
		},
		"LISTBOX SET FOOTER CALCULATION": {
			"Syntax": "**LISTBOX SET FOOTER CALCULATION** ( {* ;} *object* ; *calculation* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"calculation",
					"Integer",
					"->",
					"Calculation for footer area"
				]
			],
			"Summary": "The **LISTBOX SET FOOTER CALCULATION** command sets the automatic calculation associated with the footer of the list box designated by the *object* and *\\** parameters"
		},
		"LISTBOX SET FOOTERS HEIGHT": {
			"Syntax": "**LISTBOX SET FOOTERS HEIGHT** ( {* ;} *object* ; *height* {; *unit*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"height",
					"Integer",
					"->",
					"Row height"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 or omitted = pixels, 1 = lines"
				]
			],
			"Summary": "The **LISTBOX SET FOOTERS HEIGHT** command modifies by programming the height of the footer row in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX SET GRID COLOR": {
			"Syntax": "**LISTBOX SET GRID COLOR** ( {* ;} *object* ; *color* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"color",
					"Text, Integer",
					"->",
					"RGB color value"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"Use color for horizontal grid lines"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"Use color for vertical grid lines"
				]
			],
			"Summary": "The **LISTBOX SET GRID COLOR** command allows you to modify the color of the grid in the list box object set using the *object* and *\\** parameters."
		},
		"LISTBOX SET GRID": {
			"Syntax": "**LISTBOX SET GRID** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"True = show, False = hide"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"True = show, False = hide"
				]
			],
			"Summary": "The **LISTBOX SET GRID** command allows you to display or hide the horizontal and/or vertical grid lines that make up the grid in the list box object set using the *object* and *\\** parameters."
		},
		"LISTBOX SET HEADERS HEIGHT": {
			"Syntax": "**LISTBOX SET HEADERS HEIGHT** ( {* ;} *object* ; *height* {; *unit*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"height",
					"Integer",
					"->",
					"Row height"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value: 0 or omitted = pixels, 1 = lines"
				]
			],
			"Summary": "The **LISTBOX SET HEADERS HEIGHT** command modifies by programming the height of the header row in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX SET HIERARCHY": {
			"Syntax": "**LISTBOX SET HIERARCHY** ( {* ;} *object* ; *hierarchical* {; *hierarchy*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"hierarchical",
					"Boolean",
					"->",
					"True = hierarchical list box<br/>False = non-hierarchical list box"
				],
				[
					"hierarchy",
					"Pointer array",
					"->",
					"Array of pointers"
				]
			],
			"Summary": "The **LISTBOX SET HIERARCHY** command lets you configure the list box object designated by the *object* and *\\** parameters in hierarchical or non-hierarchical mode."
		},
		"LISTBOX SET LOCKED COLUMNS": {
			"Syntax": "**LISTBOX SET LOCKED COLUMNS** ( {* ;} *object* ; *numColumns* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"Number of columns to lock"
				]
			],
			"Summary": "The **LISTBOX SET LOCKED COLUMNS** command locks *numColumns* columns (starting from the first on the left) in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX SET ROW COLOR": {
			"Syntax": "**LISTBOX SET ROW COLOR** ( {* ;} *object* ; *row* ; *color* {; *colorType*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"color",
					"Text, Integer",
					"->",
					"RGB color value"
				],
				[
					"colorType",
					"Integer",
					"->",
					"Listbox font color (default) or listbox background color"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX SET ROW FONT STYLE": {
			"Syntax": "**LISTBOX SET ROW FONT STYLE** ( {* ;} *object* ; *row* ; *style* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"style",
					"Integer",
					"->",
					"Font style"
				]
			],
			"Summary": "**Note:** This command only works with array type list boxes."
		},
		"LISTBOX SET ROW HEIGHT": {
			"Syntax": "**LISTBOX SET ROW HEIGHT** ( {* ;} *object* ; *row* ; *height* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"row",
					"Integer",
					"->",
					"List box row whose height you want to set"
				],
				[
					"height",
					"Integer",
					"->",
					"Height of list box row"
				]
			],
			"Summary": "The **LISTBOX SET ROW HEIGHT** command allows you to modify the height of the specified *row* in the list box object designated using the *object* and *\\** parameters."
		},
		"LISTBOX SET ROWS HEIGHT": {
			"Syntax": "**LISTBOX SET ROWS HEIGHT** ( {* ;} *object* ; *height* {; *unit*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"height",
					"Integer",
					"->",
					"Row height (in pixels)"
				],
				[
					"unit",
					"Integer",
					"->",
					"Unit of height value:0 or omitted = pixels, 1 = lines"
				]
			],
			"Summary": "The **LISTBOX SET ROWS HEIGHT** command allows you to modify by programming the row height in the list box object set using the *object* and *\\** parameters."
		},
		"LISTBOX SET STATIC COLUMNS": {
			"Syntax": "**LISTBOX SET STATIC COLUMNS** ( {* ;} *object* ; *numColumn* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"numColumn",
					"Integer",
					"->",
					"Number of columns to make static"
				]
			],
			"Summary": "The **LISTBOX SET STATIC COLUMNS** command sets *numColumns* columns as static (starting from the first on the left) in the list box designated by the *object* and *\\** parameters."
		},
		"LISTBOX SET TABLE SOURCE": {
			"Syntax": "**LISTBOX SET TABLE SOURCE** ( {* ;} *object* ; *tableNum* {; *highlightName*} )<br/>**LISTBOX SET TABLE SOURCE** ( {* ;} *object* ; *selName* {; *highlightName*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"tableNum &#124; selName",
					"Integer, Text",
					"->",
					"Number of table whose current selection is to be used or Named selection to be used"
				],
				[
					"highlightName",
					"Text",
					"->",
					"Name of highlight set"
				]
			],
			"Summary": "The **LISTBOX SET TABLE SOURCE** command can be used to modify the source of the data displayed in the listbox that is designated by the *\\** and *object* parameters."
		},
		"LISTBOX SORT COLUMNS": {
			"Syntax": "**LISTBOX SORT COLUMNS** ( {* ;} *object* ; *colNum* ; *order* {; *colNum2* ; *order2* ; ... ; *colNumN* ; *orderN*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number(s) to sort"
				],
				[
					"order",
					"*",
					"->",
					"\">\" to sort in ascending order or \"<\" to sort in descending order"
				]
			],
			"Summary": "The LISTBOX SORT COLUMNS command applies a standard sort to the rows of the list box defined by the *object* and *\\** parameters on the basis of one or more column value(s)."
		},
		"Load 4D View document": {
			"Syntax": "**Load 4D View document** ( *4DViewDocument* ) : Object",
			"Params": [
				[
					"4DViewDocument",
					"Blob",
					"->",
					"4D View document"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object representation of the 4D View document"
				]
			],
			"Summary": "The **Load 4D View document** command allows you to convert a 4D View document into a 4D object."
		},
		"Load list": {
			"Syntax": "**Load list** ( *listName* ) : Integer",
			"Params": [
				[
					"listName",
					"Text",
					"->",
					"Name of a list created in the Design environment List Editor"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"List reference number of newly created list"
				]
			],
			"Summary": "**Load list** creates a new hierarchical list whose contents are copied from the list and whose name you pass in *listName*."
		},
		"LOAD RECORD": {
			"Syntax": "**LOAD RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to load record, or Default table, if omitted"
				]
			],
			"Summary": "**LOAD RECORD** loads the current record of *aTable*."
		},
		"LOAD SET": {
			"Syntax": "**LOAD SET** ( {*aTable* ;} *set* ; *document* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to which the set belongs, or Default table, if omitted"
				],
				[
					"set",
					"Text",
					"->",
					"Name of the set to be created in memory"
				],
				[
					"document",
					"Text",
					"->",
					"Document holding the set"
				]
			],
			"Summary": "**LOAD SET** loads a set from *document* that was saved with the SAVE SET command."
		},
		"LOAD VARIABLES": {
			"Syntax": "**LOAD VARIABLES** ( *document* ; *variable* {; *variable2* ; ... ; *variableN*} )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document containing 4D variables"
				],
				[
					"variable",
					"Variable",
					"<-",
					"Variable(s) to receive the value(s)"
				]
			],
			"Summary": "The **LOAD VARIABLES**  command loads one or more variables from the document specified by *document*."
		},
		"Localized document path": {
			"Syntax": "**Localized document path** ( *relativePath* ) : Text",
			"Params": [
				[
					"relativePath",
					"Text",
					"->",
					"Relative pathname of document for which we want to obtain localized version"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Absolute pathname of localized document"
				]
			],
			"Summary": "The **Localized document path** command returns the complete (absolute) pathname of a document designated by *relativePath* and located in a xxx."
		},
		"Localized string": {
			"Syntax": "**Localized string** ( *resName* ) : Text",
			"Params": [
				[
					"resName",
					"Text",
					"->",
					"Name of resname attribute"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Value of string designated by resName in current language"
				]
			],
			"Summary": "The **Localized string** command returns the value of the string designated by the *resName* attribute for the current language."
		},
		"LOCKED BY": {
			"Syntax": "**LOCKED BY** ( {*aTable* ;} *process* ; *4Duser* ; *sessionUser* ; *processName* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to check for record locked, or Default table, if omitted"
				],
				[
					"process",
					"Integer",
					"<-",
					"Process reference number"
				],
				[
					"4Duser",
					"Text",
					"<-",
					"4D user name"
				],
				[
					"sessionUser",
					"Text",
					"<-",
					"Name of user that opened work-session"
				],
				[
					"processName",
					"Text",
					"<-",
					"Process name"
				]
			],
			"Summary": "LOCKED BY returns information about the user and process that have locked a record."
		},
		"Locked records info": {
			"Syntax": "**Locked records info** ( *aTable* ) : Object",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table where you want to get locked records"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Description of locked records (if any)"
				]
			],
			"Summary": "The **Locked records info** command returns an object containing different information about the currently locked record(s) in *aTable*."
		},
		"Locked": {
			"Syntax": "**Locked** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to check for locked current record, or Default table, if omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Record is locked (TRUE), or Record is unlocked (FALSE)"
				]
			],
			"Summary": "**Locked** tests whether or not the current record of *aTable* is locked."
		},
		"LOG EVENT": {
			"Syntax": "**LOG EVENT** ( {*outputType* ;} *message* {; *importance*} )",
			"Params": [
				[
					"outputType",
					"Integer",
					"->",
					"Message output type"
				],
				[
					"message",
					"Text",
					"->",
					"Contents of the message"
				],
				[
					"importance",
					"Integer",
					"->",
					"Message’s importance level"
				]
			],
			"Summary": "The **LOG EVENT** command sets up a customized system for recording internal events that occur during the use of your application."
		},
		"LOG FILE TO JSON": {
			"Syntax": "**LOG FILE TO JSON** ( *destFolderPath* {; *maxSize* {; *logPath* {; *fieldAtt*}}} )",
			"Params": [
				[
					"destFolderPath",
					"Text",
					"->",
					"Path of the saved file destination folder"
				],
				[
					"maxSize",
					"Integer",
					"->",
					"Maximum size of JSON file to create (bytes)"
				],
				[
					"logPath",
					"Text",
					"->",
					"Pathname of log file to export; use current log file if omitted"
				],
				[
					"fieldAtt",
					"Integer",
					"->",
					"Field description attribute: 1 = use number (default), 2 = use name"
				]
			],
			"Summary": "The **LOG FILE TO JSON** command saves the current log file, or any specified log file, in JSON format."
		},
		"Log file": {
			"Syntax": "**Log file** : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Long name of the database log file"
				]
			],
			"Summary": "The Log file command returns the long name (i.e. the complete pathname of the file, including its name) of the current log file of the open database."
		},
		"Log": {
			"Syntax": "**Log** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number for which to return the log"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Log of number"
				]
			],
			"Summary": "Log returns the natural (Napierian) log of *number*."
		},
		"LONGINT ARRAY FROM SELECTION": {
			"Syntax": "**LONGINT ARRAY FROM SELECTION** ( *aTable* ; *recordArray* {; *selection*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table of the current selection"
				],
				[
					"recordArray",
					"Array integer",
					"<-",
					"Array of record numbers"
				],
				[
					"selection",
					"Text",
					"->",
					"Name of the named selection or the current selection if this parameter is omitted"
				]
			],
			"Summary": "The LONGINT ARRAY FROM SELECTION command fills the *recordArray* array with the (absolute) record numbers that are in *selection*."
		},
		"LONGINT TO BLOB": {
			"Syntax": "**LONGINT TO BLOB** ( *longint* ; *blob* ; *byteOrder* {; offset } )<br/>**LONGINT TO BLOB** ( *longint* ; *blob* ; *byteOrder* {; *} )",
			"Params": [
				[
					"longInt",
					"Integer",
					"->",
					"Long Integer value to write into the BLOB"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB to receive the Long Integer value"
				],
				[
					"byteOrder",
					"Integer",
					"->",
					"0 Native byte ordering 1 Macintosh byte ordering 2 PC byte ordering"
				],
				[
					"offset &#124; *",
					"Variable, Operator",
					"<->",
					"Offset within the BLOB (expressed in bytes) or * to append the value"
				],
				[
					"",
					"",
					"",
					"New offset after writing if not *"
				]
			],
			"Summary": "The LONGINT TO BLOB command writes the 4-byte Long Integer value *integer* into the BLOB *blob*."
		},
		"Lowercase": {
			"Syntax": "**Lowercase** ( *aString* {; *} ) : Text",
			"Params": [
				[
					"aText",
					"Text",
					"->",
					"String to convert to lowercase"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: keep accents"
				],
				[
					"Function result",
					"Text",
					"<-",
					"String in lowercase"
				]
			],
			"Summary": "**Lowercase** takes *aString* and returns the string with all alphabetic characters in lowercase."
		},
		"Macintosh command down": {
			"Syntax": "**Macintosh command down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Macintosh Command key (Ctrl key on Windows)"
				]
			],
			"Summary": "**Macintosh command down** returns TRUE if the Macintosh command key is pressed."
		},
		"Macintosh control down": {
			"Syntax": "**Macintosh control down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Macintosh Control key"
				]
			],
			"Summary": "**Macintosh control down** returns TRUE if the Macintosh Control key is pressed."
		},
		"Macintosh option down": {
			"Syntax": "**Macintosh option down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Macintosh Option key (Alt key on Windows)"
				]
			],
			"Summary": "**Macintosh option down** returns TRUE if the Macintosh Option key is pressed."
		},
		"Match regex": {
			"Syntax": "**Match regex** ( *pattern* ; *aString* ; *start* {; pos_found ; length_found}{; *} ) -> Function result <br/>\n**Match regex** ( *pattern* ; *aString* ) -> Function result",
			"Params": [
				[
					"pattern",
					"Text",
					"->",
					"Regular expression"
				],
				[
					"aString",
					"Text",
					"->",
					"String in which search will be done"
				],
				[
					"start",
					"Integer",
					"->",
					"Position in aString where search will start"
				],
				[
					"pos_found",
					"Array integer, Integer",
					"<-",
					"Position of occurrence"
				],
				[
					"length_found",
					"Array integer, Integer",
					"<-",
					"Length of occurrence"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: only searches at position indicated"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = search has found an occurrence; Otherwise, False."
				],
				[
					"Match regex ( pattern ; aString ) -> Function result"
				],
				[
					"Parameter",
					"Type",
					"Description"
				],
				[
					"pattern",
					"Text",
					"->",
					"Regular expression (complete equality)"
				],
				[
					"aString",
					"Text",
					"->",
					"String in which search will be done"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = search has found an occurrence; Otherwise, False."
				]
			],
			"Summary": "The **Match regex** command checks the conformity of a character string with respect to a set of synthesized rules by means of a meta-language called “regular expression” or “rational expression."
		},
		"Max": {
			"Syntax": "**Max** ( *series* {; *attributePath*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the maximum value"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Path of attribute for which to return the maximum value"
				],
				[
					"Function result",
					"Date, Number",
					"<-",
					"Maximum value in series"
				]
			],
			"Summary": "**Max** returns the maximum value in *series*."
		},
		"MAXIMIZE WINDOW": {
			"Syntax": "**MAXIMIZE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number or if omitted, all current process frontmost windows (Windows) or current process frontmost window (macOS)"
				]
			],
			"Summary": "The MAXIMIZE WINDOW command triggers the expansion of the window whose reference number was passed in *window*."
		},
		"MEMORY STATISTICS": {
			"Syntax": "**MEMORY STATISTICS** ( *infoType* ; *arrNames* ; *arrValues* ; *arrCount* )",
			"Params": [
				[
					"infoType",
					"Integer",
					"->",
					"Type of requested info (always 1)"
				],
				[
					"arrNames",
					"Text array",
					"<-",
					"Information titles"
				],
				[
					"arrValues",
					"Real array",
					"<-",
					"Information values"
				],
				[
					"arrCount",
					"Real array",
					"<-",
					"Number of objects concerned (if available)"
				]
			],
			"Summary": "The **MEMORY STATISTICS** command recovers information related to the use of the data cache by 4D."
		},
		"Menu bar height": {
			"Syntax": "**Menu bar height**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Height (expressed in pixels) of menu bar (returns zero if menu bar is hidden)"
				]
			],
			"Summary": "Menu bar height returns the height of the menu bar, expressed in pixels."
		},
		"Menu bar screen": {
			"Syntax": "**Menu bar screen**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of screen where menu bar is located"
				]
			],
			"Summary": "Menu bar screen returns the number of the screen where the menu bar is located."
		},
		"Menu selected": {
			"Syntax": "**Menu selected** {( *subMenu* )} : Integer",
			"Params": [
				[
					"subMenu",
					"Text",
					"<-",
					"Reference of menu containing item selected"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Menu command selected Menu number in high word Menu item number in low word"
				]
			],
			"Summary": "**Menu selected** is used only when forms are displayed."
		},
		"MESSAGE": {
			"Syntax": "**MESSAGE** ( *message* )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Message to display"
				]
			],
			"Summary": "The **MESSAGE** command is usually used to inform the user of some activity."
		},
		"MESSAGES OFF": {
			"Syntax": "**MESSAGES OFF**",
			"Params": [],
			"Summary": "The MESSAGES OFF and MESSAGES ON commands turn on and off the progress meters displayed by 4D while executing time-consuming operations."
		},
		"MESSAGES ON": {
			"Syntax": "**MESSAGES ON**",
			"Params": [],
			"Summary": "See the description of the MESSAGES OFF command."
		},
		"Method called on error": {
			"Syntax": "**Method called on error** {( *scope* )} : Text",
			"Params": [
				[
					"scope",
					"Integer",
					"->",
					"Scope of the error method"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of method called on error"
				]
			],
			"Summary": "The **Method called on error** command returns the name of the method installed by the ON ERR CALL command for the current process or the defined *scope*."
		},
		"Method called on event": {
			"Syntax": "**Method called on event**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Name of method called on event"
				]
			],
			"Summary": "The **Method called on event** command returns the name of the method installed by the ON EVENT CALL command."
		},
		"METHOD Get attribute": {
			"Syntax": "**METHOD Get attribute** ( *path* ; *attribType* {; *} ) : Boolean",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Path of project method"
				],
				[
					"attribType",
					"Integer",
					"->",
					"Type of attribute to get"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = attribute selected; otherwise False"
				]
			],
			"Summary": "The **METHOD Get attribute** command returns the value of the *attribType* attribute for the project method designated by the *path* parameter."
		},
		"METHOD GET ATTRIBUTES": {
			"Syntax": "**METHOD GET ATTRIBUTES** ( *path* ; *attributes* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Method path(s)"
				],
				[
					"attributes",
					"Object, Object array",
					"<-",
					"Attribute(s) for selected method(s)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET ATTRIBUTES** command returns, in *attributes*, the current value of all attributes for the method(s) specified in the *path* parameter."
		},
		"METHOD GET CODE": {
			"Syntax": "**METHOD GET CODE** ( *path* ; *code* {; *option*} {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Text or Text array containing one or more method path(s)"
				],
				[
					"code",
					"Text, Text array",
					"<-",
					"Code of designated method(s)"
				],
				[
					"option",
					"Integer",
					"->",
					"0 or omitted = simple export (without tokens), 1 = export with tokens"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET CODE** command returns, in the *code* parameter, the contents of the method(s) designated by the *path* parameter."
		},
		"METHOD GET COMMENTS": {
			"Syntax": "**METHOD GET COMMENTS** ( *path* ; *comments* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Text or Text array containing one or more method path(s)"
				],
				[
					"comments",
					"Text, Text array",
					"<-",
					"Documentation of designated method(s)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET COMMENTS** command returns, in the *comments* parameter, the documentation of the method(s) designated by the *path* parameter."
		},
		"METHOD GET FOLDERS": {
			"Syntax": "**METHOD GET FOLDERS** ( *arrNames* {; *filter*}{; *} )",
			"Params": [
				[
					"arrNames",
					"Text array",
					"<-",
					"Array of Home page folder names"
				],
				[
					"filter",
					"Text",
					"->",
					"Name filter"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET FOLDERS** command returns, in the *arrNames* array, the names of folders created on the Home page of the 4D Explorer"
		},
		"METHOD GET MODIFICATION DATE": {
			"Syntax": "**METHOD GET MODIFICATION DATE** ( *path* ; *modDate* ; *modTime* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Text or Text array containing one or more method path(s)"
				],
				[
					"modDate",
					"Date, Date array",
					"<-",
					"Method modification date(s)"
				],
				[
					"modTime",
					"Time, Array integer",
					"<-",
					"Method modification time(s)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET MODIFICATION DATE** command returns, in the *modDate* and *modTime* parameters, the dates and times of the last modification of the method(s) designated by the *path* parameter."
		},
		"METHOD GET NAMES": {
			"Syntax": "**METHOD GET NAMES** ( *arrNames* {; *filter*}{; *} )",
			"Params": [
				[
					"arrNames",
					"Text array",
					"<-",
					"Array of project method names"
				],
				[
					"filter",
					"Text",
					"->",
					"Name filter"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET NAMES** command fills the *arrNames* array with the names of project methods created in the application."
		},
		"METHOD Get path": {
			"Syntax": "**METHOD Get path** ( *methodType* {; *aTable*}{; *objectName*{; *formObjectName*}}{; *} ) : Text",
			"Params": [
				[
					"methodType",
					"Integer",
					"->",
					"Design object type selector"
				],
				[
					"aTable",
					"Table",
					"->",
					"Table reference"
				],
				[
					"objectName",
					"Text",
					"->",
					"Name of form or method"
				],
				[
					"formObjectName",
					"Text",
					"<-",
					"Name of form object"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Full path of object"
				]
			],
			"Summary": "The **METHOD Get path** command returns the full internal pathname of a method."
		},
		"METHOD GET PATHS FORM": {
			"Syntax": "**METHOD GET PATHS FORM** ( {*aTable* ;} *arrPaths* {; *filter*}{; *stamp*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table reference"
				],
				[
					"arrPaths",
					"Text array",
					"<-",
					"Array of method paths and names"
				],
				[
					"filter",
					"Text",
					"->",
					"Name filter"
				],
				[
					"stamp",
					"Real",
					"->",
					"Minimum value of stamp"
				],
				[
					"<-",
					"New current value"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET PATHS FORM** command fills the *arrPaths* array with the internal pathnames and names of the methods for all form objects as well as form methods."
		},
		"METHOD GET PATHS": {
			"Syntax": "**METHOD GET PATHS** ( {*folderName* ;} *methodType* ; *arrPaths* {; *stamp*}{; *} )",
			"Params": [
				[
					"folderName",
					"Text",
					"->",
					"Name of Home page folder"
				],
				[
					"methodType",
					"Integer",
					"->",
					"Selector of method type to get"
				],
				[
					"arrPaths",
					"Text array",
					"<-",
					"Array of method paths and names"
				],
				[
					"stamp",
					"Real",
					"->",
					"Minimum value of stamp"
				],
				[
					"<-",
					"New current value"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD GET PATHS** command fills the *arrPaths* array with the internal pathnames and names of methods in the application that are of the type specified by the *methodType* parameter."
		},
		"METHOD OPEN PATH": {
			"Syntax": "**METHOD OPEN PATH** ( *path* {; *line*}{; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Path of method to open"
				],
				[
					"line",
					"Number",
					"->",
					"Line number"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD OPEN PATH** command opens, in the 4D Method editor, the method whose internal pathname is passed in the *path* parameter."
		},
		"METHOD RESOLVE PATH": {
			"Syntax": "**METHOD RESOLVE PATH** ( *path* ; *methodType* ; *ptrTable* ; *objectName* ; *formObjectName* {; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Path to resolve"
				],
				[
					"methodType",
					"Integer",
					"<-",
					"Object type selector"
				],
				[
					"ptrTable",
					"Pointer",
					"<-",
					"Table reference"
				],
				[
					"objectName",
					"Text",
					"<-",
					"Name of form or database method"
				],
				[
					"formObjectName",
					"Text",
					"<-",
					"Name of form object"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD RESOLVE PATH** command parses the internal path name passed in the *path* parameter and returns its different components in the *methodType*, *ptrTable*, *objectName*, and *formObjectName* parameters."
		},
		"METHOD SET ACCESS MODE": {
			"Syntax": "**METHOD SET ACCESS MODE** ( *mode* )",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"Access mode for locked objects"
				]
			],
			"Summary": "The **METHOD SET ACCESS MODE** command sets the behavior for 4D when you attempt to write access an object already loaded for modification by another user or process."
		},
		"METHOD SET ATTRIBUTE": {
			"Syntax": "**METHOD SET ATTRIBUTE** ( *path* ; *attribType* ; *attribValue* {; *attribType2* ; *attribValue2* ; ... ; *attribTypeN* ; *attribValueN*}{; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Path of project method"
				],
				[
					"attribType",
					"Integer",
					"->",
					"Type of attribute"
				],
				[
					"attribValue",
					"Boolean, Text",
					"->",
					"True = select attribute, False = deselect attributeor Folder name"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD SET ATTRIBUTE** command sets the value(s) of the *attribType* attribute(s) for the project method designated by the *path* parameter."
		},
		"METHOD SET ATTRIBUTES": {
			"Syntax": "**METHOD SET ATTRIBUTES** ( *path* ; *attributes* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Method path(s)"
				],
				[
					"attributes",
					"Object, Object array",
					"->",
					"Attribute(s) to set for selected method(s)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD SET ATTRIBUTES** command allows you to set the *attributes* values for the method(s) specified in the *path* parameter."
		},
		"METHOD SET CODE": {
			"Syntax": "**METHOD SET CODE** ( *path* ; *code* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Text or Text array containing one or more method path(s)"
				],
				[
					"code",
					"Text, Text array",
					"->",
					"Code of designated method(s)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD SET CODE** command modifies the code of the method(s) designated by the *path* parameter with the contents passed in the *code* parameter."
		},
		"METHOD SET COMMENTS": {
			"Syntax": "**METHOD SET COMMENTS** ( *path* ; *comments* {; *} )",
			"Params": [
				[
					"path",
					"Text, Text array",
					"->",
					"Text or Text array containing one or more method path(s)"
				],
				[
					"comments",
					"Text, Text array",
					"->",
					"Documentation of designated method(s)"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = command applies to host database when executed from a component (parameter ignored outside of this context)"
				]
			],
			"Summary": "The **METHOD SET COMMENTS** command replaces the documentation of the method(s) designated by the *path* parameter by those specified in the *comments* parameter."
		},
		"Milliseconds": {
			"Syntax": "**Milliseconds**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of milliseconds elasped since the machine was started"
				]
			],
			"Summary": "Milliseconds returns the number of milliseconds (1000th of a second) elapsed since the machine was started."
		},
		"Min": {
			"Syntax": "**Min** ( *series* {; *attributePath*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the minimum value"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Path of attribute for which to return the minimum value"
				],
				[
					"Function result",
					"Date, Number",
					"<-",
					"Minimum value in series"
				]
			],
			"Summary": "**Min** returns the minimum value in *series*."
		},
		"MINIMIZE WINDOW": {
			"Syntax": "**MINIMIZE WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number or if omitted, all the current process frontmost windows (Windows) or current process frontmost window (macOS)"
				]
			],
			"Summary": "The MINIMIZE WINDOW command sets the size of the window whose number is passed as *window* to the size it was before being maximized."
		},
		"MOBILE APP REFRESH SESSIONS": {
			"Syntax": "**MOBILE APP REFRESH SESSIONS**",
			"Params": [],
			"Summary": "The **MOBILE APP REFRESH SESSIONS** command checks all mobile application session files located in the MobileApps folder of the server, and updates existing session contents in memory for any edited files."
		},
		"Mod": {
			"Syntax": "**Mod** ( *number1* ; *number2* ) : Real",
			"Params": [
				[
					"number1",
					"Integer",
					"->",
					"Number to divide"
				],
				[
					"number2",
					"Integer",
					"->",
					"Number to divide by"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Returns the remainder"
				]
			],
			"Summary": "The **Mod** command returns the remainder of the Integer division of *number1* by *number2*."
		},
		"Modified record": {
			"Syntax": "**Modified record** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to test if current record has been modified, or Default table, if omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Record has been modified (True), or Record has not been modified (False)"
				]
			],
			"Summary": "**Modified record** returns True if the current record of *aTable* has been modified but not saved; otherwise it returns False."
		},
		"Modified": {
			"Syntax": "**Modified** ( *aField* ) : Boolean",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field to test"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the field has been assigned a new value, otherwise False"
				]
			],
			"Summary": "**Modified** returns True if *field* has been programmatically assigned a value or has been edited during data entry."
		},
		"MODIFY RECORD": {
			"Syntax": "**MODIFY RECORD** ( {*aTable*}{;}{*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to use for data entry, or Default table, if omitted"
				],
				[
					"*",
					"Operator",
					"->",
					"Hide scroll bars"
				]
			],
			"Summary": "The **MODIFY RECORD** command modifies the current record for the table *aTable* or for the default table if you omit the *aTable* parameter."
		},
		"MODIFY SELECTION": {
			"Syntax": "**MODIFY SELECTION** ( {*aTable*}{; *selectMode*}{; *enterList*}{; *}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to display and modify, or Default table, if omitted"
				],
				[
					"selectMode",
					"Integer",
					"->",
					"Selection mode"
				],
				[
					"enterList",
					"Boolean",
					"->",
					"Authorize Enter in list option"
				],
				[
					"*",
					"Operator",
					"->",
					"Use output form for one record selection and hide scroll bars in the input form"
				],
				[
					"*",
					"Operator",
					"->",
					"Show scroll bars in the input form (overrides second option of first optional *)"
				]
			],
			"Summary": "**MODIFY SELECTION** does almost the same thing as DISPLAY SELECTION."
		},
		"Monitored activity": {
			"Syntax": "**Monitored activity**  : Collection",
			"Params": [
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of monitored activities"
				]
			],
			"Summary": "The **Monitored activity** command returns a collection of objects describing operations recorded according to the specifications set by the START MONITORING ACTIVITY command."
		},
		"Month of": {
			"Syntax": "**Month of** ( *aDate* ) : Integer",
			"Params": [
				[
					"aDate",
					"Date",
					"->",
					"Date for which to return the month"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number indicating the month of date"
				]
			],
			"Summary": "The **Month of** command returns the month of *aDate*."
		},
		"MOUSE POSITION": {
			"Syntax": "**MOUSE POSITION** ( *mouseX* ; *mouseY* ; *mouseButton* {; *} )",
			"Params": [
				[
					"mouseX",
					"Real",
					"<-",
					"Horizontal coordinate of mouse"
				],
				[
					"mouseY",
					"Real",
					"<-",
					"Vertical coordinate of mouse"
				],
				[
					"mouseButton",
					"Integer",
					"<-",
					"Mouse button state: 0 = Button up 1 = Button down 2 = Right button down 3 = Both buttons down"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified, global coordinate system is usedIf omitted, local coordinate system is used"
				]
			],
			"Summary": "The MOUSE POSITION command returns the current state of the mouse."
		},
		"MOVE DOCUMENT": {
			"Syntax": "**MOVE DOCUMENT** ( *srcPathname* ; *dstPathname* )",
			"Params": [
				[
					"srcPathname",
					"Text",
					"->",
					"Full pathname to existing document"
				],
				[
					"dstPathname",
					"Text",
					"->",
					"Destination pathname"
				]
			],
			"Summary": "The **MOVE DOCUMENT** command moves or renames a document."
		},
		"MULTI SORT ARRAY": {
			"Syntax": "**MULTI SORT ARRAY** ( *array* {; *sort*}{; *array2* ; *sort2* ; ... ; *arrayN* ; *sortN*} ) <br/>\n**MULTI SORT ARRAY** ( *ptrArrayName* ; *sortArrayName* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array(s) to be sorted"
				],
				[
					"sort",
					"*",
					"->",
					"\">\" to sort by increasing order or  \"<\" to sort by decreasing order If omitted  no sort"
				],
				[
					"ptrArrayName",
					"Pointer array",
					"->",
					"Array of array pointers"
				],
				[
					"sortArrayName",
					"Array integer",
					"->",
					"Sort order array (1 = sort by increasing order, -1 = sort by decreasing order, 0 = synchronization with previous sorts)"
				]
			],
			"Summary": "The MULTI SORT ARRAY command enables you to carry out a multi-level sort on a set of arrays."
		},
		"New data key": {
			"Syntax": "**New data key** ( *passPhrase* ) : Object",
			"Params": [
				[
					"passPhrase",
					"Text",
					"->",
					"Passphrase to use to generate the AES data encryption key"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object containing the key (encodedKey property)"
				]
			],
			"Summary": "The **New data key** command generates a binary data encryption key from the text passed in the *passPhrase* parameter."
		},
		"New list": {
			"Syntax": "**New list**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"List reference number"
				]
			],
			"Summary": "**New list** creates a new, empty hierarchical list in memory and returns its unique list reference number."
		},
		"New object": {
			"Syntax": "**New object** {( *property* ; *value* {; *property2* ; *value2* ; ... ; *propertyN* ; *valueN*} )} : Object",
			"Params": [
				[
					"property",
					"Text",
					"->",
					"Name of property to create"
				],
				[
					"value",
					"any",
					"->",
					"Value of property"
				],
				[
					"Function result",
					"Object",
					"<-",
					"New language object"
				]
			],
			"Summary": "The **New object** command creates a new empty or prefilled object and returns its reference."
		},
		"New process": {
			"Syntax": "**New process** ( *method* ; *stack* {; *name* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"method",
					"Text",
					"->",
					"Method to be executed within the process"
				],
				[
					"stack",
					"Integer",
					"->",
					"Stack size in bytes"
				],
				[
					"name",
					"Text",
					"->",
					"Name of the process created"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) to the method"
				],
				[
					"*",
					"Operator",
					"->",
					"Unique process"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Process number for newly created process or already executing process"
				]
			],
			"Summary": "The **New process** command starts a new process (on the same machine) and returns the process number for that process."
		},
		"New shared object": {
			"Syntax": "**New shared object** {( *property* ; *value* {; *property2* ; *value2* ; ... ; *propertyN* ; *valueN*} )} : Object",
			"Params": [
				[
					"property",
					"Text",
					"->",
					"Name of property to create"
				],
				[
					"value",
					"Text, Date, Boolean, Pointer, Number, Object",
					"->",
					"Value of property"
				],
				[
					"Function result",
					"Object",
					"<-",
					"New shared object"
				]
			],
			"Summary": "The **New shared object** command creates a new empty or prefilled shared object and returns its reference."
		},
		"NEXT RECORD": {
			"Syntax": "**NEXT RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to move to the next selected record, or Default table, if omitted"
				]
			],
			"Summary": "**NEXT RECORD** moves the current record pointer to the next record in the current selection of *aTable* for the current process."
		},
		"Next window": {
			"Syntax": "**Next window** ( *window* ) : Integer",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Window reference number"
				]
			],
			"Summary": "The Next window command returns the window reference number of the window “behind” the window you pass in *window* (based on the front-to-back order of the windows)."
		},
		"NO DEFAULT TABLE": {
			"Syntax": "**NO DEFAULT TABLE**",
			"Params": [],
			"Summary": "The **NO DEFAULT TABLE** command is used to cancel the effect of the DEFAULT TABLE command."
		},
		"Not": {
			"Syntax": "**Not** ( *boolean* ) : Boolean",
			"Params": [
				[
					"boolean",
					"Boolean",
					"->",
					"Boolean value to negate"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Opposite of Boolean"
				]
			],
			"Summary": "The Not function returns the negation of *boolean*, changing True to False or False to True."
		},
		"NOTIFY RESOURCES FOLDER MODIFICATION": {
			"Syntax": "**NOTIFY RESOURCES FOLDER MODIFICATION**",
			"Params": [],
			"Summary": "The NOTIFY RESOURCES FOLDER MODIFICATION command \"forces\" 4D Server to send a notification to all the connected 4D machines indicating that the Resources folder of the database has been modified so that they can synchronize their local Resources folder."
		},
		"Null": {
			"Syntax": "**Null**  : Null",
			"Params": [
				[
					"Function result",
					"Null",
					"<-",
					"Null value"
				]
			],
			"Summary": "**Null** returns the Null type value **null**."
		},
		"Num": {
			"Syntax": "**Num** ( *expression* {; *separator*} ) : Real",
			"Params": [
				[
					"expression",
					"Text, Boolean, Integer",
					"->",
					"String for which to return the numeric form, or Boolean to return 0 or 1, or Numeric expression"
				],
				[
					"separator",
					"Text",
					"->",
					"Decimal separator"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Numeric form of the expression parameter"
				]
			],
			"Summary": "The Num command returns the numeric form of the String, Boolean or numeric expression you pass in *expression*."
		},
		"OB Class": {
			"Syntax": "**OB Class** ( *object* ) : any",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Object whose class is to be returned"
				],
				[
					"Function result",
					"Null, Object",
					"<-",
					"Class of object"
				]
			],
			"Summary": "The **OB Class** command returns the class of the *object* passed in parameter."
		},
		"OB Copy": {
			"Syntax": "**OB Copy** ( *object* {; resolvePtrs } )  : Object<br/>**OB Copy** ( *object* {; *option* {; *groupWith*}} )  : Object",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"resolvePtrs",
					"Boolean",
					"->",
					"True = resolve pointers, False or omitted = do not resolve pointers"
				],
				[
					"option",
					"Integer",
					"->",
					"ck shared: return a shared object, ck resolve pointers: resolve pointers before copying"
				],
				[
					"groupWith",
					"Collection, Object",
					"->",
					"Shared collection or object to be grouped with the resulting object"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Deep copy of object"
				]
			],
			"Summary": "The **OB Copy** command returns an object containing a complete (deep) copy of the properties, sub-objects and values for the *object*."
		},
		"OB Entries": {
			"Syntax": "**OB Entries** ( *object* ) : Collection",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Object to return contents"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of objects with key / value properties"
				]
			],
			"Summary": "The **OB Entries** command returns a collection of objects containing the contents of the *object* as key / value property pairs."
		},
		"OB GET ARRAY": {
			"Syntax": "**OB GET ARRAY** ( *object* ; *property* ; *array* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Name of property to read"
				],
				[
					"array",
					"Text array, Real array, Boolean array, Object array, Pointer array, Array integer",
					"<-",
					"Value array of property"
				]
			],
			"Summary": "The **OB GET ARRAY** command retrieves, in *array*, the array of values stored in the *property* of the language object designated by the *object* parameter."
		},
		"OB GET PROPERTY NAMES": {
			"Syntax": "**OB GET PROPERTY NAMES** ( *object* ; *arrProperties* {; *arrTypes*} )",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Structured object"
				],
				[
					"arrProperties",
					"Text array",
					"<-",
					"Property names"
				],
				[
					"arrTypes",
					"Array integer",
					"<-",
					"Property types"
				]
			],
			"Summary": "The **OB GET PROPERTY NAMES** command returns, in *arrProperties*, the names of the properties contained in the language object designated by the *object* parameter."
		},
		"OB Get type": {
			"Syntax": "**OB Get type** ( *object* ; *property* ) : Integer",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Property name"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Property value type"
				]
			],
			"Summary": "The **OB Get type** command returns the type of value associated with the *property* of the language *object*."
		},
		"OB Get": {
			"Syntax": "**OB Get** ( *object* ; *property* {; *type*} ) : any",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Name of property to read"
				],
				[
					"type",
					"Integer",
					"->",
					"Type to which to convert the value"
				],
				[
					"Function result",
					"any",
					"<-",
					"Current value of property"
				]
			],
			"Summary": "The **OB Get** command returns the current value of the *property* of the *object*, optionally converted into the *type* specified."
		},
		"OB Instance of": {
			"Syntax": "**OB Instance of** ( *object* ; *class* ) : Boolean",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Object whose class is to be tested"
				],
				[
					"class",
					"Object",
					"->",
					"Class to test belongship"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if object belongs to the specified class or a child class, and false otherwise"
				]
			],
			"Summary": "The **OB Instance of** command returns true if *object* belongs to *class* or to one of its child classes, and false otherwise."
		},
		"OB Is defined": {
			"Syntax": "**OB Is defined** ( *object* {; *property*} ) : Boolean",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"If passed = property to check, if omitted = check object"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"If property omitted: True if object is defined, otherwise False.<br/>If property passed: True if property is defined, otherwise False"
				]
			],
			"Summary": "The **OB Is defined** command returns True if *object* or *property* is defined, and False otherwise."
		},
		"OB Is empty": {
			"Syntax": "**OB Is empty** ( *object* ) : Boolean",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if object is empty or undefined, otherwise False"
				]
			],
			"Summary": "The **OB Is empty** command returns True if *object* is undefined or empty, and False if *object* is defined (initialized) and contains at least one property."
		},
		"OB Is shared": {
			"Syntax": "**OB Is shared** ( *toCheck* ) : Boolean",
			"Params": [
				[
					"toCheck",
					"Object, Collection",
					"->",
					"Object or collection or to check"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the object or collection is shareable, False if it is alterable"
				]
			],
			"Summary": "The **OB Is shared** command returns **True** if the *toCheck* object or collection is shared, and **False** otherwise (see *Shared objects and shared collections*)."
		},
		"OB Keys": {
			"Syntax": "**OB Keys** ( *object* ) : Collection",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Object to return property names"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of property names (strings)"
				]
			],
			"Summary": "The **OB Keys** command returns a collection of strings containing all of the enumerable property names of the *object*."
		},
		"OB REMOVE": {
			"Syntax": "**OB REMOVE** ( *object* ; *property* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Name of property to remove"
				]
			],
			"Summary": "The **OB REMOVE** command removes the *property* of the language object designated by the *object* parameter."
		},
		"OB SET ARRAY": {
			"Syntax": "**OB SET ARRAY** ( *object* ; *property* ; *array* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Name of property to set"
				],
				[
					"array",
					"Array, Variable",
					"->",
					"Array to store in property"
				]
			],
			"Summary": "The **OB SET ARRAY** command defines the *array* to be associated with the *property* in the language object designated by the *object* parameter."
		},
		"OB SET NULL": {
			"Syntax": "**OB SET NULL** ( *object* ; *property* )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Name of property where null value is to be applied"
				]
			],
			"Summary": "The **OB SET NULL** command stores the **null** value in the language object designated by the *object* parameter."
		},
		"OB SET": {
			"Syntax": "**OB SET** ( *object* ; *property* ; *value* {; *property2* ; *value2* ; ... ; *propertyN* ; *valueN*} )",
			"Params": [
				[
					"object",
					"Object, Object",
					"->",
					"Structured object"
				],
				[
					"property",
					"Text",
					"->",
					"Name of property to set"
				],
				[
					"value",
					"Expression",
					"->",
					"New value of property"
				]
			],
			"Summary": "The **OB SET** command creates or modifies one or more *property*/*value* pairs in the language object designated by the *object* parameter."
		},
		"OB Values": {
			"Syntax": "**OB Values** ( *object* ) : Collection",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"Object to return property values"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of property values (variant)"
				]
			],
			"Summary": "The **OB Values** command returns a collection of variants containing all of the enumerable property values of the *object*."
		},
		"OBJECT DUPLICATE": {
			"Syntax": "**OBJECT DUPLICATE** ( {* ;} *object* {; *newName* {; *newVar* {; *boundTo* {; *moveH* {; *moveV* {; *resizeH* {; *resizeV*}}}}}}} {; *} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"newName",
					"Text",
					"->",
					"Name of new object"
				],
				[
					"newVar",
					"Pointer",
					"->",
					"Pointer to variable of new object"
				],
				[
					"boundTo",
					"Text",
					"->",
					"Name of previous enterable object (or radio button)"
				],
				[
					"moveH",
					"Integer",
					"->",
					"Horizontal shift of new object (>0 = to the right, <0 = to the left)"
				],
				[
					"moveV",
					"Integer",
					"->",
					"Vertical shift of new object (>0 = downwards, <0 = upwards)"
				],
				[
					"resizeH",
					"Integer",
					"->",
					"Value of the horizontal resize of the object"
				],
				[
					"resizeV",
					"Integer",
					"->",
					"Value of the vertical resize of the object"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified= absolute coordinates<br/>If omitted= relative coordinates"
				]
			],
			"Summary": "The **OBJECT DUPLICATE** command is used to create a copy of the object designated by the *object* parameter in the context of the form being executed (Application mode)."
		},
		"OBJECT Get action": {
			"Syntax": "**OBJECT Get action** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Associated standard action name and (if any) parameter string"
				]
			],
			"Summary": "The **OBJECT Get action** command returns the name and (if any) parameter of the standard action associated with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get auto spellcheck": {
			"Syntax": "**OBJECT Get auto spellcheck** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable or field"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = automatic spell-checking, False = no automatic spell-checking"
				]
			],
			"Summary": "The **OBJECT Get auto spellcheck** command returns the status of the Auto spellcheck option for the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT GET BEST SIZE": {
			"Syntax": "**OBJECT GET BEST SIZE** ( {* ;} *object* ; *bestWidth* ; *bestHeight* {; *maxWidth*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified = object is an object name (String) If omitted = object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Field or variable (if * is omitted)"
				],
				[
					"bestWidth",
					"Integer",
					"<-",
					"Optimum object width"
				],
				[
					"bestHeight",
					"Integer",
					"<-",
					"Optimum object height"
				],
				[
					"maxWidth",
					"Integer",
					"->",
					"Maximum object width"
				]
			],
			"Summary": "The **OBJECT GET BEST SIZE** command returns the *bestWidth* and *bestHeight* parameters, the “optimal” width and height of the form object designated by the *\\** and *object* parameters."
		},
		"OBJECT Get border style": {
			"Syntax": "**OBJECT Get border style** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Border line style"
				]
			],
			"Summary": "The **OBJECT Get border style** command returns the border line style of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get context menu": {
			"Syntax": "**OBJECT Get context menu** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = context menu enabled, False = context menu disabled"
				]
			],
			"Summary": "The **OBJECT Get context menu** command returns the current state of the \"Context Menu\" option for the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT GET COORDINATES": {
			"Syntax": "**OBJECT GET COORDINATES** ( {* ;} *object* ; *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified = object is the name of the object (string) If omitted = object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Field or variable (if * is omitted)"
				],
				[
					"left",
					"Integer",
					"<-",
					"Left coordinate of the object"
				],
				[
					"top",
					"Integer",
					"<-",
					"Top coordinate of the object"
				],
				[
					"right",
					"Integer",
					"<-",
					"Right coordinate of the object"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"Bottom coordinate of the object"
				]
			],
			"Summary": "The OBJECT GET COORDINATES command returns the coordinates *left*, *top*, *right* and *bottom* (in points) in variables or fields of the object(s) of the current form defined by the parameters *\\** and *object*."
		},
		"OBJECT Get corner radius": {
			"Syntax": "**OBJECT Get corner radius** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Radius of rounded corners (in pixels)"
				]
			],
			"Summary": "The **OBJECT Get corner radius** command returns the current value of the corner radius for the object designated by the *object* parameter."
		},
		"OBJECT Get data source": {
			"Syntax": "**OBJECT Get data source** ( {* ;} *object* ) : Pointer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to current data source of object"
				]
			],
			"Summary": "The **OBJECT Get data source** command returns the current data source of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT GET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT GET DRAG AND DROP OPTIONS** ( {* ;} *object* ; *draggable* ; *automaticDrag* ; *droppable* ; *automaticDrop* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"draggable",
					"Boolean",
					"<-",
					"Draggable = True; otherwise, False"
				],
				[
					"automaticDrag",
					"Boolean",
					"<-",
					"Automatic Drag = True; otherwise, False"
				],
				[
					"droppable",
					"Boolean",
					"<-",
					"Droppable = True; otherwise, False"
				],
				[
					"automaticDrop",
					"Boolean",
					"<-",
					"Automatic Drop = True; otherwise, False"
				]
			],
			"Summary": "The **OBJECT GET DRAG AND DROP OPTIONS** command returns the drag and drop options for the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT Get enabled": {
			"Syntax": "**OBJECT Get enabled** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = object(s) enabled; Otherwise, false"
				]
			],
			"Summary": "The OBJECT Get enabled command returns True if the object or group of objects designated by *object* is enabled in the form and False if it is not enabled."
		},
		"OBJECT Get enterable": {
			"Syntax": "**OBJECT Get enterable** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = object(s) enterable; Otherwise, false"
				]
			],
			"Summary": "The OBJECT Get enterable command returns True if the object or group of objects designated by *object* has the **enterable** attribute; otherwise, it returns False."
		},
		"OBJECT GET EVENTS": {
			"Syntax": "**OBJECT GET EVENTS** ( {* ;} *object* ; *arrEvents* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name or \"\" to designate the form (if * is specified) orField or variable (if * is omitted)"
				],
				[
					"arrEvents",
					"Array integer",
					"<-",
					"Array of enabled events"
				]
			],
			"Summary": "The **OBJECT GET EVENTS** command gets the current configuration of the form events for the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get filter": {
			"Syntax": "**OBJECT Get filter** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of filter"
				]
			],
			"Summary": "The OBJECT Get filter command returns the name of any filter associated with the object or group of objects designated by *object*."
		},
		"OBJECT Get focus rectangle invisible": {
			"Syntax": "**OBJECT Get focus rectangle invisible** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable or field"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = focus rectangle hidden, False = focus rectangle shown"
				]
			],
			"Summary": "The **OBJECT Get focus rectangle invisible** command returns the status of the visibility option for the focus rectangle of the object(s) designated by the *object* and *\\** parameters for the current process ."
		},
		"OBJECT Get font size": {
			"Syntax": "**OBJECT Get font size** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Size of font in points"
				]
			],
			"Summary": "The OBJECT Get font size command returns the size (in points) of the character font used by the form object(s) designated by *object*."
		},
		"OBJECT Get font style": {
			"Syntax": "**OBJECT Get font style** ( * ; *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Font style"
				]
			],
			"Summary": "The OBJECT Get font style command returns the current style of the character font used by the form object(s) designated by *object*."
		},
		"OBJECT Get font": {
			"Syntax": "**OBJECT Get font** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of font"
				]
			],
			"Summary": "The OBJECT Get font command returns the name of the character font used by the form object(s) designated by *object*."
		},
		"OBJECT Get format": {
			"Syntax": "**OBJECT Get format** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a field or a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Object display format"
				]
			],
			"Summary": "The **OBJECT Get format** command returns the current display format applied to the object specified in the *object* parameter."
		},
		"OBJECT Get help tip": {
			"Syntax": "**OBJECT Get help tip** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Help message of object"
				]
			],
			"Summary": "The **OBJECT Get help tip** command returns the help message associated with the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT Get horizontal alignment": {
			"Syntax": "**OBJECT Get horizontal alignment** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an Object name (String) If omitted, object is a field or a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * specified), or Field or variable (if * omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Alignment code"
				]
			],
			"Summary": "The **OBJECT Get horizontal alignment** command returns a code indicating the type of horizontal alignment applied to the object designated by the *object* and *\\** parameters."
		},
		"OBJECT Get indicator type": {
			"Syntax": "**OBJECT Get indicator type** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Indicator type"
				]
			],
			"Summary": "The **OBJECT Get indicator type** command returns the current indicator type assigned to the thermometer(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get keyboard layout": {
			"Syntax": "**OBJECT Get keyboard layout** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable or field"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Language code of layout, \"\" = no layout"
				]
			],
			"Summary": "The **OBJECT Get keyboard layout** command returns the current keyboard layout associated with the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT Get list name": {
			"Syntax": "**OBJECT Get list name** ( {* ;} *object* {; *listType*} ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"listType",
					"Integer",
					"->",
					"Type of list: Choice list, Required list or Excluded list"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of list (specified in Design mode)"
				]
			],
			"Summary": "The OBJECT Get list name command returns the name of the choice list associated with the object or group of objects designated by *object*."
		},
		"OBJECT Get list reference": {
			"Syntax": "**OBJECT Get list reference** ( {* ;} *object* {; *listType*} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"listType",
					"Integer",
					"->",
					"Type of list: Choice list, Required list or Excluded list"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"List reference number"
				]
			],
			"Summary": "The **OBJECT Get list reference** command returns the reference number (ListRef) of the hierarchical list associated with the object or group of objects designated by *object* and *\\**."
		},
		"OBJECT GET MAXIMUM VALUE": {
			"Syntax": "**OBJECT GET MAXIMUM VALUE** ( {* ;} *object* ; *maxValue* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"maxValue",
					"Date, Time, Number",
					"<-",
					"Current maximum value for object"
				]
			],
			"Summary": "The **OBJECT GET MAXIMUM VALUE** command returns, in the *maxValue* variable, the current maximum value of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT GET MINIMUM VALUE": {
			"Syntax": "**OBJECT GET MINIMUM VALUE** ( {* ;} *object* ; *minValue* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"minValue",
					"Date, Time, Number",
					"<-",
					"Current minimum value for object"
				]
			],
			"Summary": "The **OBJECT GET MINIMUM VALUE** command returns, in the *minValue* variable, the current minimum value of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get multiline": {
			"Syntax": "**OBJECT Get multiline** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Multiline status of object"
				]
			],
			"Summary": "The **OBJECT Get multiline** command returns the current state of the \"Multiline\" option for the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get name": {
			"Syntax": "**OBJECT Get name** {( *selector* )} : Text",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Object category"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of object"
				]
			],
			"Summary": "The **OBJECT Get name** command returns the name of a form object."
		},
		"OBJECT Get placeholder": {
			"Syntax": "**OBJECT Get placeholder** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Placeholder text associated with object"
				]
			],
			"Summary": "The **OBJECT Get placeholder** command returns the placeholder text associated with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get pointer": {
			"Syntax": "**OBJECT Get pointer** {( *selector* {; *objectName* {; *subformName*}})} : Pointer",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Object category"
				],
				[
					"objectName",
					"Text",
					"->",
					"Object name"
				],
				[
					"subformName",
					"Text",
					"->",
					"Subform object name"
				],
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to object variable"
				]
			],
			"Summary": "The **OBJECT Get pointer** command returns a pointer to the variable of a form object."
		},
		"OBJECT GET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT GET PRINT VARIABLE FRAME** ( {* ;} *object* ; *variableFrame* {; *fixedSubform*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"variableFrame",
					"Boolean",
					"<-",
					"True = Variable frame printing, False = Fixed frame printing"
				],
				[
					"fixedSubform",
					"Integer",
					"<-",
					"Option for printing subforms in fixed size"
				]
			],
			"Summary": "The **OBJECT GET PRINT VARIABLE FRAME** command gets the current configuration of the variable frame print options for the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT GET RESIZING OPTIONS": {
			"Syntax": "**OBJECT GET RESIZING OPTIONS** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"horizontal",
					"Integer",
					"<-",
					"Horizontal resizing option"
				],
				[
					"vertical",
					"Integer",
					"<-",
					"Vertical resizing option"
				]
			],
			"Summary": "The **OBJECT GET RESIZING OPTIONS** command returns the current resizing options for the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT GET RGB COLORS": {
			"Syntax": "**OBJECT GET RGB COLORS** ( {* ;} *object* ; *foregroundColor* {; *backgroundColor* {; *altBackgrndColor*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"foregroundColor",
					"Text, Integer",
					"<-",
					"RGB color value for foreground"
				],
				[
					"backgroundColor",
					"Text, Integer",
					"<-",
					"RGB color value for background"
				],
				[
					"altBackgrndColor",
					"Text, Integer",
					"<-",
					"RGB color value for alternating background"
				]
			],
			"Summary": "The OBJECT GET RGB COLORS command returns the foreground and background colors of the object or group of objects designated by *object*."
		},
		"OBJECT GET SCROLL POSITION": {
			"Syntax": "**OBJECT GET SCROLL POSITION** ( {* ;} *object* ; *vPosition* {; *hPosition*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field or table (if * is omitted)"
				],
				[
					"vPosition",
					"Integer",
					"<-",
					"Number of first line displayed or Vertical scrolling in pixels (pictures)"
				],
				[
					"hPosition",
					"Integer",
					"<-",
					"Number of first column displayed or<br/>Horizonal scrolling in pixels (pictures)"
				]
			],
			"Summary": "The OBJECT GET SCROLL POSITION returns, in the *vPosition* and *hPosition* parameters, information related to the position of the scroll bars of the form object designated by the *\\** and *object* parameters."
		},
		"OBJECT GET SCROLLBAR": {
			"Syntax": "**OBJECT GET SCROLLBAR** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"<-",
					"Visibility of horizontal scrollbar"
				],
				[
					"vertical",
					"Boolean, Integer",
					"<-",
					"Visibility of vertical scrollbar"
				]
			],
			"Summary": "The OBJECT GET SCROLLBAR command is used to find out the displayed/hidden status of the horizontal and vertical scrollbars of the object or group of objects designated by *object*."
		},
		"OBJECT GET SHORTCUT": {
			"Syntax": "**OBJECT GET SHORTCUT** ( {* ;} *object* ; *key* ; *modifiers* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"key",
					"Text",
					"<-",
					"Key associated with object"
				],
				[
					"modifiers",
					"Integer",
					"<-",
					"Modifier key mask or combination of masks"
				]
			],
			"Summary": "The **OBJECT GET SHORTCUT** command returns the keyboard shortcut associated with the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT Get style sheet": {
			"Syntax": "**OBJECT Get style sheet** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of style sheet"
				]
			],
			"Summary": "The **OBJECT Get style sheet** command returns the name of the style sheet associated with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT GET SUBFORM CONTAINER SIZE": {
			"Syntax": "**OBJECT GET SUBFORM CONTAINER SIZE** ( *width* ; *height* )",
			"Params": [
				[
					"width",
					"Integer",
					"<-",
					"Width of subform object"
				],
				[
					"height",
					"Integer",
					"<-",
					"Height of subform object"
				]
			],
			"Summary": "The **OBJECT GET SUBFORM CONTAINER SIZE** command returns the *width* and *height* (in pixels) of a \"current\" subform object, displayed in the parent form."
		},
		"OBJECT Get subform container value": {
			"Syntax": "**OBJECT Get subform container value**  : any",
			"Params": [
				[
					"Function result",
					"any",
					"<-",
					"Current value of the subform container data source"
				]
			],
			"Summary": "The **OBJECT Get subform container value** command returns the current value of the data source bound with the subform container displayed in the parent form."
		},
		"OBJECT GET SUBFORM": {
			"Syntax": "**OBJECT GET SUBFORM** ( {* ;} *object* ; *tablePtr* ; *detailSubform* {; *listSubform*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"tablePtr",
					"Table",
					"<-",
					"Pointer to table of form"
				],
				[
					"detailSubform",
					"Text",
					"<-",
					"Name of detail form of subform"
				],
				[
					"listSubform",
					"Text",
					"<-",
					"Name of list form of subform (table form)"
				]
			],
			"Summary": "The **OBJECT GET SUBFORM** command gets the name(s) of the form(s) associated with the subform object designated by the *object* and *\\** parameters."
		},
		"OBJECT Get text orientation": {
			"Syntax": "**OBJECT Get text orientation** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Angle of text rotation"
				]
			],
			"Summary": "The **OBJECT Get text orientation** command returns the current orientation value applied to the text of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get three states checkbox": {
			"Syntax": "**OBJECT Get three states checkbox** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = three-states checkbox, False = standard checkbox"
				]
			],
			"Summary": "The **OBJECT Get three states checkbox** command returns the current state of the \"Three-States\" property for the checkbox(es) designated by the *object* and *\\** parameters."
		},
		"OBJECT Get title": {
			"Syntax": "**OBJECT Get title** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Title of button"
				]
			],
			"Summary": "The OBJECT Get title command returns the title (label) of the form object(s) designated by *object*."
		},
		"OBJECT Get type": {
			"Syntax": "**OBJECT Get type** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Type of object"
				]
			],
			"Summary": "The **OBJECT Get type** command returns the type of the object designated by the *object* and *\\** parameters in the current form."
		},
		"OBJECT Get value": {
			"Syntax": "**OBJECT Get value** ( *objectName* ) : any",
			"Params": [
				[
					"objectName",
					"Text",
					"->",
					"Object name"
				],
				[
					"Function result",
					"any",
					"<-",
					"Current value of the form object's data source"
				]
			],
			"Summary": "The **OBJECT Get value** command returns the current value of the data source for the form object(s) designated by the *objectName* parameter."
		},
		"OBJECT Get vertical alignment": {
			"Syntax": "**OBJECT Get vertical alignment** ( {* ;} *object* ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Type of alignment"
				]
			],
			"Summary": "The **OBJECT Get vertical alignment** command returns a value indicating the type of vertical alignment applied to the object designated by the *object* and *\\** parameters."
		},
		"OBJECT Get visible": {
			"Syntax": "**OBJECT Get visible** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = object(s) visible; Otherwise, False"
				]
			],
			"Summary": "The OBJECT Get visible command returns True if the object or group of objects designated by *object* has the visible attribute and False otherwise."
		},
		"OBJECT Is styled text": {
			"Syntax": "**OBJECT Is styled text** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if object is a multi-style text, False otherwise"
				]
			],
			"Summary": "The **OBJECT Is styled text** command returns **True** when the \"Multi-style\" option is checked for the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT MOVE": {
			"Syntax": "**OBJECT MOVE** ( {* ;} *object* ; *moveH* ; *moveV* {; *resizeH* {; *resizeV* {; *}}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified= object is an object name (string) If omitted = object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Field or variable (if * is omitted)"
				],
				[
					"moveH",
					"Integer",
					"->",
					"Value of the horizontal move of the object (>0 = to the right, <0 = to the left)"
				],
				[
					"moveV",
					"Integer",
					"->",
					"Value of the vertical move of the object (>0 = to the bottom, <0 = to the top)"
				],
				[
					"resizeH",
					"Integer",
					"->",
					"Value of the horizontal resize of the object"
				],
				[
					"resizeV",
					"Integer",
					"->",
					"Value of the vertical resize of the object"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified = absolute coordinates If omitted = relative coordinates"
				]
			],
			"Summary": "The OBJECT MOVE command allows you to move the object(s) in the current form, defined by the *\\** and *object* parameters *moveH* pixels horizontally and *moveV* pixels vertically."
		},
		"OBJECT SET ACTION": {
			"Syntax": "**OBJECT SET ACTION** ( {* ;} *object* ; *action* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"action",
					"Text",
					"->",
					"Name of action to associate (including parameters if necessary)"
				]
			],
			"Summary": "The **OBJECT SET ACTION** command modifies the standard action associated with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET AUTO SPELLCHECK": {
			"Syntax": "**OBJECT SET AUTO SPELLCHECK** ( {* ;} *object* ; *autoSpellcheck* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable or field"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable or field (if * is omitted)"
				],
				[
					"autoSpellcheck",
					"Boolean",
					"->",
					"True = automatic spell-checking,False= no automatic spell-checking"
				]
			],
			"Summary": "The **OBJECT SET AUTO SPELLCHECK** command sets or dynamically modifies the status of the **Auto spellcheck** option for the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET BORDER STYLE": {
			"Syntax": "**OBJECT SET BORDER STYLE** ( {* ;} *object* ; *borderStyle* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"borderStyle",
					"Integer",
					"->",
					"Border line style"
				]
			],
			"Summary": "The **OBJECT SET BORDER STYLE** command modifies the border line style of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET CONTEXT MENU": {
			"Syntax": "**OBJECT SET CONTEXT MENU** ( {* ;} *object* ; *contextMenu* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"contextMenu",
					"Boolean",
					"->",
					"True = enable context menu, False = disable context menu"
				]
			],
			"Summary": "The **OBJECT SET CONTEXT MENU** command enables or disables, for the current process, the association of a context menu by default with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET COORDINATES": {
			"Syntax": "**OBJECT SET COORDINATES** ( {* ;} *object* ; *left* ; *top* {; *right* ; *bottom*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"Integer",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"left",
					"Integer",
					"->",
					"Left coordinate of object in pixels"
				],
				[
					"top",
					"Integer",
					"->",
					"Top coordinate of object in pixels"
				],
				[
					"right",
					"Integer",
					"->",
					"Right coordinate of object in pixels"
				],
				[
					"bottom",
					"Integer",
					"->",
					"Bottom coordinate of object in pixels"
				]
			],
			"Summary": "The **OBJECT SET COORDINATES** command modifies the location and, optionally, the size of the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET CORNER RADIUS": {
			"Syntax": "**OBJECT SET CORNER RADIUS** ( {* ;} *object* ; *radius* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Field or variable (if * is omitted)"
				],
				[
					"radius",
					"Integer",
					"->",
					"New radius of rounded corners (in pixels)"
				]
			],
			"Summary": "The **OBJECT SET CORNER RADIUS** command modifies the *radius* of corners for the object(s) you passed in the *object* parameter."
		},
		"OBJECT SET DATA SOURCE": {
			"Syntax": "**OBJECT SET DATA SOURCE** ( {* ;} *object* ; *dataSource* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"dataSource",
					"Pointer",
					"->",
					"Pointer to new data source for object"
				]
			],
			"Summary": "The **OBJECT SET DATA SOURCE** command modifies the data source of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT SET DRAG AND DROP OPTIONS** ( {* ;} *object* ; *draggable* ; *automaticDrag* ; *droppable* ; *automaticDrop* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"draggable",
					"Boolean",
					"->",
					"Draggable = True; otherwise, False"
				],
				[
					"automaticDrag",
					"Boolean",
					"->",
					"Automatic Drag = True; otherwise, False"
				],
				[
					"droppable",
					"Boolean",
					"->",
					"Droppable = True; otherwise, False"
				],
				[
					"automaticDrop",
					"Boolean",
					"->",
					"Automatic Drop = True; otherwise, False"
				]
			],
			"Summary": "The **OBJECT SET DRAG AND DROP OPTIONS** command sets or dynamically modifies the drag and drop options for the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET ENABLED": {
			"Syntax": "**OBJECT SET ENABLED** ( {* ;} *object* ; *active* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"active",
					"Boolean",
					"->",
					"True = object(s) enabled; otherwise, False"
				]
			],
			"Summary": "The **OBJECT SET ENABLED** command can be used to enable or disable the object or group of objects specified by *object* in the current form."
		},
		"OBJECT SET ENTERABLE": {
			"Syntax": "**OBJECT SET ENTERABLE** ( {* ;} *object* ; *enterable* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Table or Field or Variable (if * is omitted)"
				],
				[
					"enterable",
					"Boolean, Integer",
					"->",
					"Boolean: True=enterable, False=non-enterableLongint: 0=not enterable, 1=enterable, 2=not enterable not focusable"
				]
			],
			"Summary": "The **OBJECT SET ENTERABLE** command makes the form objects specified by *object* either enterable or non-enterable and can set the *focusable* attribute."
		},
		"OBJECT SET EVENTS": {
			"Syntax": "**OBJECT SET EVENTS** ( {* ;} *object* ; *arrEvents* ; *mode* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name or \"\" to designate the form (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"arrEvents",
					"Array integer",
					"->",
					"Array of events to set"
				],
				[
					"mode",
					"Integer",
					"->",
					"Activation mode for events defined in arrEvents"
				]
			],
			"Summary": "The **OBJECT SET EVENTS** command modifies, for the current process, the configuration of the form events of the form or object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET FILTER": {
			"Syntax": "**OBJECT SET FILTER** ( {* ;} *object* ; *entryFilter* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"entryFilter",
					"Text",
					"->",
					"New data entry filter for the enterable area"
				]
			],
			"Summary": "**OBJECT SET FILTER** sets the entry filter for the objects specified by *object* to the filter you pass in *entryFilter*."
		},
		"OBJECT SET FOCUS RECTANGLE INVISIBLE": {
			"Syntax": "**OBJECT SET FOCUS RECTANGLE INVISIBLE** ( {* ;} *object* ; *invisible* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"invisible",
					"Boolean",
					"->",
					"True = focus rectangle hidden,False = focus rectangle shown"
				]
			],
			"Summary": "The **OBJECT SET FOCUS RECTANGLE INVISIBLE** command sets or dynamically modifies the visibility option for the focus rectangle of the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET FONT SIZE": {
			"Syntax": "**OBJECT SET FONT SIZE** ( {* ;} *object* ; *size* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"size",
					"Integer",
					"->",
					"Font size in points"
				]
			],
			"Summary": "**OBJECT SET FONT SIZE** sets the form objects specified by *object* to be displayed using the font size you pass in *size*."
		},
		"OBJECT SET FONT STYLE": {
			"Syntax": "**OBJECT SET FONT STYLE** ( {* ;} *object* ; *styles* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"styles",
					"Integer",
					"->",
					"Font style"
				]
			],
			"Summary": "**OBJECT SET FONT STYLE** sets the form objects specified by *object* to be displayed using the font style you pass in *styles*."
		},
		"OBJECT SET FONT": {
			"Syntax": "**OBJECT SET FONT** ( {* ;} *object* ; *font* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"font",
					"Text",
					"->",
					"Font name"
				]
			],
			"Summary": "OBJECT SET FONT displays the *object* using the font specified in the *font* parameter."
		},
		"OBJECT SET FORMAT": {
			"Syntax": "**OBJECT SET FORMAT** ( {* ;} *object* ; *displayFormat* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"displayFormat",
					"Text",
					"->",
					"New display format for the object"
				]
			],
			"Summary": "**OBJECT SET FORMAT** sets the display format for the objects specified by *object* to the format you pass in *displayFormat*."
		},
		"OBJECT SET HELP TIP": {
			"Syntax": "**OBJECT SET HELP TIP** ( {* ;} *object* ; *helpTip* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"helpTip",
					"Text",
					"->",
					"Contents of help message"
				]
			],
			"Summary": "The **OBJECT SET HELP TIP** command sets or dynamically modifies the help tip associated with the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET HORIZONTAL ALIGNMENT": {
			"Syntax": "**OBJECT SET HORIZONTAL ALIGNMENT** ( {* ;} *object* ; *alignment* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an Object name (String) If omitted, object is a field or a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * specified), or Field or variable (if * omitted)"
				],
				[
					"alignment",
					"Integer",
					"->",
					"Alignment code"
				]
			],
			"Summary": "The **OBJECT SET HORIZONTAL ALIGNMENT** command allows you to set the type of horizontal alignment applied to the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET INDICATOR TYPE": {
			"Syntax": "**OBJECT SET INDICATOR TYPE** ( {* ;} *object* ; *indicator* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"indicator",
					"Integer",
					"->",
					"Indicator type"
				]
			],
			"Summary": "The **OBJECT SET INDICATOR TYPE** command modifies the type of progress indicator for the thermometer(s) designated by the *object* and *\\** parameters in the current process."
		},
		"OBJECT SET KEYBOARD LAYOUT": {
			"Syntax": "**OBJECT SET KEYBOARD LAYOUT** ( {* ;} *object* ; *languageCode* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable or field"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable or field (if * is omitted)"
				],
				[
					"languageCode",
					"Text",
					"->",
					"RFC3066 ISO639 and ISO3166 language code,\"\" = no change"
				]
			],
			"Summary": "The **OBJECT SET KEYBOARD LAYOUT** command sets or dynamically modifies the keyboard layout associated with the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET LIST BY NAME": {
			"Syntax": "**OBJECT SET LIST BY NAME** ( {* ;} *object* {; *listType*}; *list* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an Object Name (String) If omitted, object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"listType",
					"Integer",
					"->",
					"Type of list: Choice list, Required list or Excluded list"
				],
				[
					"list",
					"Text",
					"->",
					"Name of the list to use as Choice list or \"\" to disassociate the list"
				]
			],
			"Summary": "The OBJECT SET LIST BY NAME command sets, replaces or disassociates the *list* associated with the object or group of objects specified by *object*."
		},
		"OBJECT SET LIST BY REFERENCE": {
			"Syntax": "**OBJECT SET LIST BY REFERENCE** ( {* ;} *object* {; *listType*}; *list* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"listType",
					"Integer",
					"->",
					"Type of list: Choice list, Required list or Excluded list"
				],
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				]
			],
			"Summary": "The **OBJECT SET LIST BY REFERENCE** command defines or replaces the list associated with the object(s) designated by the *object* and *\\** parameters, with the hierarchical list referenced in the *list* parameter."
		},
		"OBJECT SET MAXIMUM VALUE": {
			"Syntax": "**OBJECT SET MAXIMUM VALUE** ( {* ;} *object* ; *maxValue* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"maxValue",
					"Date, Time, Number",
					"->",
					"Maximum value for object"
				]
			],
			"Summary": "The **OBJECT SET MAXIMUM VALUE** command modifies the maximum value of the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET MINIMUM VALUE": {
			"Syntax": "**OBJECT SET MINIMUM VALUE** ( {* ;} *object* ; *minValue* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"minValue",
					"Date, Time, Number",
					"->",
					"Minimum value for object"
				]
			],
			"Summary": "The **OBJECT SET MINIMUM VALUE** command modifies the minimum value of the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET MULTILINE": {
			"Syntax": "**OBJECT SET MULTILINE** ( {* ;} *object* ; *multiline* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"multiline",
					"Integer",
					"->",
					"Status of multiline property"
				]
			],
			"Summary": "The **OBJECT SET MULTILINE** command modifies the \"Multiline\" property of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET PLACEHOLDER": {
			"Syntax": "**OBJECT SET PLACEHOLDER** ( {* ;} *object* ; *placeholderText* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"placeholderText",
					"Text",
					"->",
					"Placeholder text associated with object"
				]
			],
			"Summary": "The **OBJECT SET PLACEHOLDER** command associates placeholder text with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT SET PRINT VARIABLE FRAME** ( {* ;} *object* ; *variableFrame* {; *fixedSubform*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"variableFrame",
					"Boolean",
					"->",
					"True = Variable frame printing, False = Fixed frame printing"
				],
				[
					"fixedSubform",
					"Integer",
					"->",
					"Options for printing subforms in fixed size"
				]
			],
			"Summary": "The **OBJECT SET PRINT VARIABLE FRAME** command modifies the Print Variable Frame property of the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET RESIZING OPTIONS": {
			"Syntax": "**OBJECT SET RESIZING OPTIONS** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"Horizontal resizing option"
				],
				[
					"vertical",
					"Integer",
					"->",
					"Vertical resizing option"
				]
			],
			"Summary": "The **OBJECT SET RESIZING OPTIONS** command sets or dynamically modifies the resizing options for the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET RGB COLORS": {
			"Syntax": "**OBJECT SET RGB COLORS** ( {* ;} *object* ; *foregroundColor* {; *backgroundColor* {; *altBackgrndColor*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or <br/>Variable or field (if * is omitted)"
				],
				[
					"foregroundColor",
					"Text, Integer",
					"->",
					"RGB color value for foreground"
				],
				[
					"backgroundColor",
					"Text, Integer",
					"->",
					"RGB color value for background"
				],
				[
					"altBackgrndColor",
					"Text, Integer",
					"->",
					"RGB color value for alternating background"
				]
			],
			"Summary": "The **OBJECT SET RGB COLORS** command changes the foreground and background colors of the objects specified by the *object* parameter and the optional *\\** parameter."
		},
		"OBJECT SET SCROLL POSITION": {
			"Syntax": "**OBJECT SET SCROLL POSITION** ( * ; *object* {; *vPosition* {; *hPosition*}}{; *} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a table, a field or a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Table or field or variable (if * is omitted)"
				],
				[
					"vPosition",
					"Integer",
					"->",
					"Line number to display or Vertical scrolling in pixels (pictures)"
				],
				[
					"hPosition",
					"Integer",
					"->",
					"Column number to display (list box) or<br/>Horizontal scrolling in pixels (pictures)"
				],
				[
					"*",
					"Operator",
					"->",
					"Display of line (and column if the hPosition parameter is passed) in first position after scroll"
				]
			],
			"Summary": "The **OBJECT SET SCROLL POSITION** command allows scrolling the contents of several types of objects: the lines of a subform, of a list form (displayed using the MODIFY SELECTION or DISPLAY SELECTION commands), or of a hierarchical list, the rows and columns of a list box or even the pixels of a picture."
		},
		"OBJECT SET SCROLLBAR": {
			"Syntax": "**OBJECT SET SCROLLBAR** ( {* ;} *object* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"->",
					"Visibility of horizontal scrollbar"
				],
				[
					"vertical",
					"Boolean, Integer",
					"->",
					"Visibility of vertical scrollbar"
				]
			],
			"Summary": "The OBJECT SET SCROLLBAR command allows you to display or hide the horizontal and/or vertical scrollbars in the object set using the *object* and *\\** parameters."
		},
		"OBJECT SET SHORTCUT": {
			"Syntax": "**OBJECT SET SHORTCUT** ( {* ;} *object* ; *key* {; *modifiers*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable or field"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable or field (if * is omitted)"
				],
				[
					"key",
					"Text",
					"->",
					"Key to associate with object"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"Modifier key mask or combination of masks"
				]
			],
			"Summary": "The **OBJECT SET SHORTCUT** command sets or dynamically modifies the keyboard shortcut associated with the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET STYLE SHEET": {
			"Syntax": "**OBJECT SET STYLE SHEET** ( {* ;} *object* ; *styleSheetName* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"Name of style sheet"
				]
			],
			"Summary": "The **OBJECT SET STYLE SHEET** command modifies, for the current process, the style sheet associated with the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET SUBFORM CONTAINER VALUE": {
			"Syntax": "**OBJECT SET SUBFORM CONTAINER VALUE** ( *value* )",
			"Params": [
				[
					"value",
					"any",
					"->",
					"New value for the data source"
				]
			],
			"Summary": "The **OBJECT SET SUBFORM CONTAINER VALUE** command sets the current value of the data source bound with the subform container displayed in the parent form."
		},
		"OBJECT SET SUBFORM": {
			"Syntax": "**OBJECT SET SUBFORM** ( {* ;} *object* {; *aTable*}; *detailSubform* {; *listSubform*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"aTable",
					"Table",
					"->",
					"Table of form (if table form)"
				],
				[
					"detailSubform",
					"Text, Object",
					"->",
					"Name (text) of the detail form, or a POSIX path (text) to a .json file describing the detail form, or an object describing the detail form of the subform"
				],
				[
					"listSubform",
					"Text, Object",
					"->",
					"Name (text) of the list form, ora POSIX path (text) to a .json file describing the list form, or an object describing the list form of the subform (table form)"
				]
			],
			"Summary": "The **OBJECT SET SUBFORM** command dynamically modifies the detail form as well as, optionally, the screen list form associated with the subform object designated by the *\\**, *object* parameters."
		},
		"OBJECT SET TEXT ORIENTATION": {
			"Syntax": "**OBJECT SET TEXT ORIENTATION** ( {* ;} *object* ; *orientation* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"orientation",
					"Integer",
					"->",
					"Value of object orientation"
				]
			],
			"Summary": "The **OBJECT SET TEXT ORIENTATION** command modifies the orientation of the object(s) designated by the *object* and *\\** parameters for the current process."
		},
		"OBJECT SET THREE STATES CHECKBOX": {
			"Syntax": "**OBJECT SET THREE STATES CHECKBOX** ( {* ;} *object* ; *threeStates* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"threeStates",
					"Boolean",
					"->",
					"True = three-states checkbox, False = standard checkbox"
				]
			],
			"Summary": "The **OBJECT SET THREE STATES CHECKBOX** command modifies, for the current process, the \"Three-States\" property of the checkbox(es) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET TITLE": {
			"Syntax": "**OBJECT SET TITLE** ( {* ;} *object* ; *title* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an Object Name (String) If omitted, object is a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Variable (if * is omitted)"
				],
				[
					"title",
					"Text",
					"->",
					"New title for the object"
				]
			],
			"Summary": "The OBJECT SET TITLE command changes the title of the object(s) specified by *object* to the value you pass in *title*."
		},
		"OBJECT SET VALUE": {
			"Syntax": "**OBJECT SET VALUE** ( *objectName* ; *value* )",
			"Params": [
				[
					"objectName",
					"Text",
					"->",
					"Object name"
				],
				[
					"value",
					"any",
					"->",
					"New value for the form object's data source"
				]
			],
			"Summary": "**OBJECT SET VALUE** sets the *value* of the current data source for the form object(s) designated by the *objectName* parameter."
		},
		"OBJECT SET VERTICAL ALIGNMENT": {
			"Syntax": "**OBJECT SET VERTICAL ALIGNMENT** ( {* ;} *object* ; *alignment* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"alignment",
					"Integer",
					"->",
					"Alignment code"
				]
			],
			"Summary": "The **OBJECT SET VERTICAL ALIGNMENT** command modifies the type of vertical alignment applied to the object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET VISIBLE": {
			"Syntax": "**OBJECT SET VISIBLE** ( {* ;} *object* ; *visible* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, Object is an Object Name (String) If omitted, Object parameter is a Field or a Variable"
				],
				[
					"object",
					"any",
					"->",
					"Object Name (if * is specified), or Field or Variable (if * is omitted)"
				],
				[
					"visible",
					"Boolean",
					"->",
					"True for visible, False for invisible"
				]
			],
			"Summary": "The **OBJECT SET VISIBLE** command shows or hides the objects specified by *object*."
		},
		"Object to path": {
			"Syntax": "**Object to path** ( *pathObject* ) : Text",
			"Params": [
				[
					"pathObject",
					"Object",
					"->",
					"Object describing a path contents"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Pathname"
				]
			],
			"Summary": "The **Object to path** command returns a pathname (string) based upon path information you passed in the *pathObject* parameter."
		},
		"OLD RELATED MANY": {
			"Syntax": "**OLD RELATED MANY** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"One field"
				]
			],
			"Summary": "**OLD RELATED MANY** operates the same way RELATE MANY does, except that **OLD RELATED MANY** uses the old value in the one field to establish the relation."
		},
		"OLD RELATED ONE": {
			"Syntax": "**OLD RELATED ONE** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Many field"
				]
			],
			"Summary": "**OLD RELATED ONE** operates the same way as RELATE ONE does, except that **OLD RELATED ONE** uses the old value of *aField* to establish the relation."
		},
		"Old": {
			"Syntax": "**Old** ( *aField* ) : any",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field for which to return old value"
				],
				[
					"Function result",
					"any",
					"<-",
					"Original field value"
				]
			],
			"Summary": "The **Old** command returns the value held in *aField* before the field was programmatically assigned a value or modified in data entry."
		},
		"On Backup Shutdown database method": {
			"Syntax": "On Backup Shutdown ($status)",
			"Params": [
				[
					"$status",
					"Integer",
					"<-",
					"0 = backup executed correctly; other value = error, interrupted by user or code returned by On Backup Startup"
				]
			],
			"Summary": "The On Backup Shutdown database method is called every time a database backup ends."
		},
		"On Backup Startup database method": {
			"Syntax": "**On Backup Startup database method**  -> $0",
			"Params": [
				[
					"$0",
					"Integer",
					"<-",
					"0 = backup can be launched; value other than 0 = backup not authorized"
				]
			],
			"Summary": "The **On Backup Startup database method** is called every time a database backup is about to start (manual backup, scheduled automatic backup, or using the BACKUP command)."
		},
		"On Drop database method": {
			"Syntax": "**On Drop database method**",
			"Params": [],
			"Summary": "The **On Drop database method** is available in local or remote 4D applications."
		},
		"ON ERR CALL": {
			"Syntax": "**ON ERR CALL** ( *errorMethod* {; *scope*} )",
			"Params": [
				[
					"errorMethod",
					"Text",
					"->",
					"Error method to be invoked, or Empty string to stop trapping errors"
				],
				[
					"scope",
					"Integer",
					"->",
					"Scope for the error method"
				]
			],
			"Summary": "The **ON ERR CALL** command installs the project method, whose name you pass in *errorMethod*, as the method for catching (trapping) errors for the defined execution context in the current project."
		},
		"ON EVENT CALL": {
			"Syntax": "**ON EVENT CALL** ( *eventMethod* {; *processName*} )",
			"Params": [
				[
					"eventMethod",
					"Text",
					"->",
					"Event method to be invoked, or Empty string to stop intercepting events"
				],
				[
					"processName",
					"Text",
					"->",
					"Process name"
				]
			],
			"Summary": "The **ON EVENT CALL** command installs the method, whose name you pass in *eventMethod*, as the method for catching (trapping) events."
		},
		"On Exit database method": {
			"Syntax": "**On Exit database method**",
			"Params": [],
			"Summary": "The **On Exit database method** is called once when you quit a database."
		},
		"On Host Database Event database method": {
			"Syntax": "On Host Database Event (*$event* : Integer)",
			"Params": [
				[
					"$event",
					"Integer",
					"<-",
					"Event code"
				]
			],
			"Summary": "The **On Host Database Event database method** allows 4D components to execute code when the host database is opened and closed."
		},
		"On Mobile App Action database method": {
			"Syntax": "**mobileInfo** -> On Mobile App Action database method -> $0",
			"Params": [
				[
					"mobileInfo",
					"Object",
					"->",
					"Information passed by the mobile application"
				],
				[
					"$0",
					"Object",
					"<-",
					"Action status & data synchro"
				]
			],
			"Summary": "**Documentation moved**"
		},
		"On Mobile App Authentication database method": {
			"Syntax": "**On Mobile App Authentication database method** ( *mobileInfo* ; *status* )",
			"Params": [
				[
					"mobileInfo",
					"Object",
					"->",
					"Information passed by the mobile application"
				],
				[
					"status",
					"Object",
					"<-",
					"Authentication status"
				]
			],
			"Summary": "**Documentation moved**\n\nThe documentation for this database method has been updated and moved to [developer."
		},
		"On REST Authentication database method": {
			"Syntax": "$1, $2, $3, $4 -> On REST Authentication database method -> $0",
			"Params": [
				[
					"$1",
					"Text",
					"<-",
					"User name"
				],
				[
					"$2",
					"Text",
					"<-",
					"Password"
				],
				[
					"$3",
					"Boolean",
					"<-",
					"True = Digest mode, False = Basic mode"
				],
				[
					"$4",
					"Text",
					"<-",
					"Ip address of the caller"
				],
				[
					"$0",
					"Boolean",
					"<-",
					"True = session opening accepted, False = session opening rejected"
				]
			],
			"Summary": "The **On REST Authentication database method** is deprecated in projects as of 4D 20 R6."
		},
		"On Server Close Connection database method": {
			"Syntax": "On Server Close Connection ($user : Integer ; $id : Integer ; $toIgnore : Integer)",
			"Params": [
				[
					"$user",
					"Integer",
					"<-",
					"User ID number used internally by 4D Server to identify users"
				],
				[
					"$id",
					"Integer",
					"<-",
					"Connection ID number used internally by 4D Server to identify a connection"
				],
				[
					"$toIgnore",
					"Integer",
					"<-",
					"Obsolete: Always returns 0 but must be declared"
				]
			],
			"Summary": "The **On Server Close Connection database method** is called once on the Server machine each time a 4D Client process ends."
		},
		"On Server Open Connection database method": {
			"Syntax": "On Server Open Connection($user : Integer ; $id : Integer ; $toIgnore : Integer) -> $status : Boolean",
			"Params": [
				[
					"$user",
					"Integer",
					"<-",
					"User ID number used internally by 4D Server to identify users"
				],
				[
					"$id",
					"Integer",
					"<-",
					"Connection ID number used internally by 4D Server to identify a connection"
				],
				[
					"$toIgnore",
					"Integer",
					"<-",
					"Obsolete: Always returns 0 (but must be declared)"
				],
				[
					"$status",
					"Integer",
					"<-",
					"0 or omitted = connection accepted; other value = connection refused"
				]
			],
			"Summary": "The **On Server Open Connection database method** is called once on the Server machine each time a connection process is started by a 4D remote workstation."
		},
		"On Server Shutdown database method": {
			"Syntax": "**On Server Shutdown database method**",
			"Params": [],
			"Summary": "The On Server Shutdown database method is called once on the server machine when the current database is closed on 4D Server."
		},
		"On Server Startup database method": {
			"Syntax": "**On Server Startup database method**",
			"Params": [],
			"Summary": "The **On Server Startup database method** is called once on the server machine when you open a database with 4D Server."
		},
		"On SQL Authentication database method": {
			"Syntax": "On SQL Authentication($user : Text ; $pw : Text ; $ip : Text) -> $result : Boolean",
			"Params": [
				[
					"$user",
					"Text",
					"<-",
					"User name"
				],
				[
					"$pw",
					"Text",
					"<-",
					"Password"
				],
				[
					"$ip",
					"Text",
					"<-",
					"(Optional) IP address of client at origin of the request"
				],
				[
					"$result",
					"Boolean",
					"<-",
					"True = request accepted, False = request refused"
				]
			],
			"Summary": "The **On SQL Authentication database method** can be used to filter requests sent to the integrated SQL server of 4D."
		},
		"On Startup database method": {
			"Syntax": "**On Startup database method**",
			"Params": [],
			"Summary": "The On Startup database method is called once when you open a database."
		},
		"On System Event database method": {
			"Syntax": "On System Event($event : Integer)",
			"Params": [
				[
					"$event",
					"Integer",
					"<-",
					"Event code"
				]
			],
			"Summary": "The **On System Event database method** is called each time a system event occurs."
		},
		"On Web Authentication database method": {
			"Syntax": "On Web Authentication($url : Text ; $http : Text ; $ipBrowser : Text ; $ipServer : Text ; $user : Text ; $pw : Text) -> $result : Boolean",
			"Params": [
				[
					"$url",
					"Text",
					"<-",
					"URL"
				],
				[
					"$http",
					"Text",
					"<-",
					"HTTP header + HTTP body"
				],
				[
					"$ipBrowser",
					"Text",
					"<-",
					"IP address of browser"
				],
				[
					"$ipServer",
					"Text",
					"<-",
					"IP address of the server"
				],
				[
					"$user",
					"Text",
					"<-",
					"User name"
				],
				[
					"$pw",
					"Text",
					"<-",
					"Password"
				],
				[
					"$result",
					"Boolean",
					"<-",
					"True = request accepted, False = request refused"
				]
			],
			"Summary": "The **On Web Authentication database method** is in charge of managing Web server engine access."
		},
		"On Web Connection database method": {
			"Syntax": "On Web Connection($url : Text ; $http : Text ; $ipBrowser : Text ; $ipServer : Text ; $user : Text ; $pw : Text) -> $result : Boolean",
			"Params": [
				[
					"$url",
					"Text",
					"<-",
					"URL"
				],
				[
					"$http",
					"Text",
					"<-",
					"HTTP header + HTTP body"
				],
				[
					"$ipBrowser",
					"Text",
					"<-",
					"IP address of browser"
				],
				[
					"$ipServer",
					"Text",
					"<-",
					"IP address of the server"
				],
				[
					"$user",
					"Text",
					"<-",
					"User name"
				],
				[
					"$pw",
					"Text",
					"<-",
					"Password"
				]
			],
			"Summary": "The **On Web Connection database method** can be called in the following cases:\n\n* the web server receives a request beginning with the *4DCGI* URL."
		},
		"On Web Legacy Close Session database method": {
			"Syntax": "**On Web Legacy Close Session database method**",
			"Params": [],
			"Summary": "This database method can only be used with **legacy web sessions**, available in databases converted from versions prior to 4D v18 R6\\."
		},
		"ONE RECORD SELECT": {
			"Syntax": "**ONE RECORD SELECT** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table in which to reduce the selection to the current record, or Default table, if omitted"
				]
			],
			"Summary": "**ONE RECORD SELECT** reduces the current selection of *aTable* to the current record."
		},
		"OPEN ADMINISTRATION WINDOW": {
			"Syntax": "**OPEN ADMINISTRATION WINDOW**",
			"Params": [],
			"Summary": "The **OPEN ADMINISTRATION WINDOW** command displays the server administration window on the machine that executes it."
		},
		"OPEN COLOR PICKER": {
			"Syntax": "**OPEN COLOR PICKER** {( *textOrBackground* )}",
			"Params": [
				[
					"textOrBackground",
					"Integer",
					"->",
					"0 or omitted = text color, 1 = text background color"
				]
			],
			"Summary": "The **OPEN COLOR PICKER** command displays the system color picker dialog box."
		},
		"OPEN DATA FILE": {
			"Syntax": "**OPEN DATA FILE** ( *accessPath* )",
			"Params": [
				[
					"accessPath",
					"Text",
					"->",
					"Name or complete access path of the data file to open"
				]
			],
			"Summary": "The **OPEN DATA FILE** command allows changing the data file opened by the 4D application on-the-fly."
		},
		"OPEN DATABASE": {
			"Syntax": "**OPEN DATABASE** ( *filePath* )",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"File name (.4db, .4dc, .4dbase, .4dproject, .4dz, or .4dlink) or complete access path of database to open"
				]
			],
			"Summary": "The **OPEN DATABASE** command closes the current 4D database and opens on-the-fly the database defined by *filePath*."
		},
		"Open document": {
			"Syntax": "**Open document** ( *document* {; *fileType*}{; *mode*} ) : Time",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document name or Full document pathname or Empty string for standard file dialog box"
				],
				[
					"fileType",
					"Text",
					"->",
					"List of types of documents to be screened, or \"*\" to not screen the documents"
				],
				[
					"mode",
					"Integer",
					"->",
					"Document’s opening mode"
				],
				[
					"Function result",
					"Time",
					"<-",
					"Document reference number"
				]
			],
			"Summary": "The **Open document** command opens the document whose name or pathname you pass in *document*."
		},
		"OPEN FONT PICKER": {
			"Syntax": "**OPEN FONT PICKER**",
			"Params": [],
			"Summary": "The **OPEN FONT PICKER** command displays the system font picker dialog box."
		},
		"Open form window": {
			"Syntax": "**Open form window** ( {*aTable* ;} *formName* {; *type* {; *hPos* {; *vPos* {; *}}}} ) : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table of the form or Default table, if omitted"
				],
				[
					"formName",
					"Text, Object",
					"->",
					"Name (string) of table or project form, or a POSIX path (string) to a .json file describing the form, oran object describing the form"
				],
				[
					"type",
					"Integer",
					"->",
					"Window type"
				],
				[
					"hPos",
					"Integer",
					"->",
					"Horizontal position of the window"
				],
				[
					"vPos",
					"Integer",
					"->",
					"Vertical position of the window"
				],
				[
					"*",
					"Operator",
					"->",
					"Save current position and size of the window"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Window reference number"
				]
			],
			"Summary": "The Open form window command opens a new window using the size and resizing properties of the form *formName*."
		},
		"OPEN PRINTING JOB": {
			"Syntax": "**OPEN PRINTING JOB**",
			"Params": [],
			"Summary": "The **OPEN PRINTING JOB** command opens a print job and stacks all the subsequent printing orders there until the CLOSE PRINTING JOB command is called."
		},
		"Open resource file": {
			"Syntax": "**Open resource file** ( *resFilename* {; *fileType*} ) : Time",
			"Params": [
				[
					"resFilename",
					"Text",
					"->",
					"Short or long name of resource file, or Empty string for standard Open File dialog box"
				],
				[
					"fileType",
					"Text",
					"->",
					"Mac OS file type (4-character string), or Windows file extension (1- to 3-character string), or All files, if omitted"
				],
				[
					"Function result",
					"Time",
					"<-",
					"Resource file reference number"
				]
			],
			"Summary": "The **Open resource file** command opens the resource file whose name or pathname you pass in *resFileName*."
		},
		"OPEN RUNTIME EXPLORER": {
			"Syntax": "**OPEN RUNTIME EXPLORER**",
			"Params": [],
			"Summary": "The OPEN RUNTIME EXPLORER command displays the Runtime Explorer in a floating window."
		},
		"OPEN SECURITY CENTER": {
			"Syntax": "**OPEN SECURITY CENTER**",
			"Params": [],
			"Summary": "The OPEN SECURITY CENTER command displays the Maintenance and Security Center (MSC) window."
		},
		"OPEN SETTINGS WINDOW": {
			"Syntax": "**OPEN SETTINGS WINDOW** ( *selector* {; *access* {; *settingsType*}} )",
			"Params": [
				[
					"selector",
					"Text",
					"->",
					"Key designating a theme or a page or a group of parameters in the Preferences or Settings dialog box"
				],
				[
					"access",
					"Boolean",
					"->",
					"True=Lock the other pages of the dialog box<br/>False or omitted=Leave the other pages of the dialog box active"
				],
				[
					"settingsType",
					"Integer",
					"->",
					"0 or omitted = Structure settings, 1 = User settings, 2 = User settings for data"
				]
			],
			"Summary": "The **OPEN SETTINGS WINDOW** command opens the Preferences dialog box of 4D or the Database Settings of the current 4D application and displays the parameters or the page corresponding to the key passed in *selector*."
		},
		"OPEN URL": {
			"Syntax": "**OPEN URL** ( *path* {; *appName*}{; *} )",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Path of document or URL to open"
				],
				[
					"appName",
					"Text",
					"->",
					"Name of application to use"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified = URL is not translated, If omitted = URL is translated"
				]
			],
			"Summary": "The **OPEN URL** command opens the file or URL passed in the *path* parameter with the application indicated in *appName* (if any)."
		},
		"Open window": {
			"Syntax": "**Open window** ( *left* ; *top* ; *right* ; *bottom* {; *type* {; *title* {; *controlMenuBox*}}} ) : Integer",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"Global left coordinate of window contents area"
				],
				[
					"top",
					"Integer",
					"->",
					"Global top coordinate of window contents area"
				],
				[
					"right",
					"Integer",
					"->",
					"Global right coordinate of window contents area, or -1 for using form default size"
				],
				[
					"bottom",
					"Integer",
					"->",
					"Global bottom coordinate of window contents area, or -1 for using form default size"
				],
				[
					"type",
					"Integer",
					"->",
					"Window type"
				],
				[
					"title",
					"Text",
					"->",
					"Title of window or \"\" for using default form title"
				],
				[
					"controlMenuBox",
					"Text",
					"->",
					"Method to call when the Control-menu box is double-clicked or the Close box is clicked"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Window reference number"
				]
			],
			"Summary": "**Open window** opens a new window with the dimensions given by the first four parameters"
		},
		"ORDER BY ATTRIBUTE": {
			"Syntax": "**ORDER BY ATTRIBUTE** ( {*aTable* ;} *objectField* ; *attributePath* ; > or < {; *objectField2* ; *attributePath2* ; > or <2 ; ... ; *objectFieldN* ; *attributePathN* ; > or <N} {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to order selected records, or Default table, if omitted"
				],
				[
					"objectField",
					"Object",
					"->",
					"Object field containing the sorting attribute"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Name or path of attribute on which to set the order for each level"
				],
				[
					"> or <",
					"Operator",
					"->",
					"Ordering direction for each level: > to order in ascending order, or < to order in descending order"
				],
				[
					"*",
					"Operator",
					"->",
					"Continue order flag"
				]
			],
			"Summary": "The **ORDER BY ATTRIBUTE** command sorts (reorders) the records of the current selection of *aTable* for the current process based on the contents of the *objectField*'s *attributePath*."
		},
		"ORDER BY FORMULA": {
			"Syntax": "**ORDER BY FORMULA** ( *aTable* ; *formula* {; > or <}{; *formula2* ; > or <2 ; ... ; *formulaN* ; > or <N} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to order selected records"
				],
				[
					"formula",
					"Expression",
					"->",
					"Expression on which to set the order for each level (can be of type Alphanumeric, Real, Integer, Long Integer, Date, Time or Boolean)"
				],
				[
					"> or <",
					"Operator",
					"->",
					"Ordering direction for each level: > to order in ascending order, or < to order in descending order"
				]
			],
			"Summary": "**ORDER BY FORMULA** sorts (reorders) the records of the current selection of *aTable* for the current process."
		},
		"ORDER BY": {
			"Syntax": "**ORDER BY** ( {*aTable* ;}{ *aField* }{; > or < }{; *aField2* ; > or <2 ; ... ; *aFieldN* ; > or <N}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to order selected records, or Default table, if omitted"
				],
				[
					"aField",
					"Field",
					"->",
					"Field on which to set the order for each level"
				],
				[
					"> or <",
					"Operator",
					"->",
					"Ordering direction for each level: > to order in ascending order, or < to order in descending order"
				],
				[
					"*",
					"Operator",
					"->",
					"Continue order flag"
				]
			],
			"Summary": "**ORDER BY** sorts (reorders) the records of the current selection of *aTable* for the current process."
		},
		"Outside call": {
			"Syntax": "**Outside call**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the execution cycle is an outside call"
				]
			],
			"Summary": "**Outside call** returns True for the After execution cycle."
		},
		"PAGE BREAK": {
			"Syntax": "**PAGE BREAK** {( * )}<br/>**PAGE BREAK** {( > )}",
			"Params": [
				[
					"* &#124; >",
					"->",
					"* Cancel printing job started with Print form, or > Force one printing job"
				]
			],
			"Summary": "**PAGE BREAK** triggers the printing of the data that has been sent to the printer and ejects the page."
		},
		"Parse formula": {
			"Syntax": "**Parse formula** ( *formula* {; *options*}{; *errorMessage*} ) : Text",
			"Params": [
				[
					"formula",
					"Text",
					"->",
					"Plain text formula"
				],
				[
					"options",
					"Integer",
					"->",
					"Instructions for input / output"
				],
				[
					"errorMessage",
					"Text",
					"<-",
					"Error message (empty string if no error)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Transformed formula (plain text)"
				]
			],
			"Summary": "The **Parse formula** function analyzes the 4D *formula*, checks its syntax, and returns its normalized form."
		},
		"Pasteboard data size": {
			"Syntax": "**Pasteboard data size** ( *dataType* ) : Integer",
			"Params": [
				[
					"dataType",
					"Text",
					"->",
					"Data type"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Size (in bytes) of data located in the pasteboard or error code"
				]
			],
			"Summary": "The **Pasteboard data size** command checks whether there is any data of the type you passed in *dataType* present in the pasteboard."
		},
		"Path to object": {
			"Syntax": "**Path to object** ( *path* {; *pathType*} ) : Object",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Pathname"
				],
				[
					"pathType",
					"Integer",
					"->",
					"Type of path syntax: System (default) or Posix"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object describing the path contents"
				]
			],
			"Summary": "The **Path to object** command returns an object containing the specific properties of the *path* you passed in parameter."
		},
		"PAUSE INDEXES": {
			"Syntax": "**PAUSE INDEXES** ( *aTable* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to pause indexes"
				]
			],
			"Summary": "The **PAUSE INDEXES** command temporarily disables all the indexes of *aTable*, except for the index of the primary key."
		},
		"PAUSE PROCESS": {
			"Syntax": "**PAUSE PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "**PAUSE PROCESS** suspends the execution of *process* until it is reactivated by the RESUME PROCESS command."
		},
		"PHP Execute": {
			"deprecated": true,
			"Syntax": "**PHP Execute** ( *scriptPath* {; *functionName* {; *phpResult* {; *param*} {; *param2* ; ... ; *paramN*}}} ) : Boolean",
			"Params": [
				[
					"scriptPath",
					"Text",
					"->",
					"Pathname to PHP script or<br/>\"\" to execute a PHP function"
				],
				[
					"functionName",
					"Text",
					"->",
					"PHP function to be executed"
				],
				[
					"phpResult",
					"*, Variable, Field",
					"<-",
					"Result of PHP function execution or * to not receive any result"
				],
				[
					"param",
					"Text, Boolean, Real, Integer, Date, Time",
					"->",
					"Parameter(s) of PHP function"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = execution correct<br/>False = execution error"
				]
			],
			"Summary": "The **PHP Execute** command can be used to execute a PHP script or function."
		},
		"PHP GET FULL RESPONSE": {
			"deprecated": true,
			"Syntax": "**PHP GET FULL RESPONSE** ( *stdOut* {; *errLabels* ; *errValues*} {; *httpHeaderFields* {; *httpHeaderValues*}} )",
			"Params": [
				[
					"stdOut",
					"Text, Blob",
					"<-",
					"Contents of stdOut buffer"
				],
				[
					"errLabels",
					"Text array",
					"<-",
					"Labels of errors"
				],
				[
					"errValues",
					"Text array",
					"<-",
					"Values of errors"
				],
				[
					"httpHeaderFields",
					"Text array",
					"<-",
					"Names of HTTP headers"
				],
				[
					"httpHeaderValues",
					"Text array",
					"<-",
					"Values of HTTP headers"
				]
			],
			"Summary": "The PHP GET FULL RESPONSE command lets you obtain additional information about the response returned by the PHP interpreter."
		},
		"PHP GET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP GET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Option to get"
				],
				[
					"value",
					"Boolean",
					"<-",
					"Current value of option"
				]
			],
			"Summary": "The PHP GET OPTION command can be used to find out the current value of an option relating to the execution of PHP scripts."
		},
		"PHP SET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP SET OPTION** ( *option* ; *value* {; *} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Option to be set"
				],
				[
					"value",
					"Boolean",
					"->",
					"New value of option"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: modification only applied to next call"
				]
			],
			"Summary": "The **PHP SET OPTION** command is used to set specific options before calling the PHP Execute command."
		},
		"PICTURE CODEC LIST": {
			"Syntax": "**PICTURE CODEC LIST** ( *codecArray* {; *namesArray*}{; *} )",
			"Params": [
				[
					"codecArray",
					"Text array",
					"<-",
					"IDs of available picture Codecs"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"Names of picture Codecs"
				],
				[
					"*",
					"Operator",
					"->",
					"Return list of reading (decoding) Codecs"
				]
			],
			"Summary": "The **PICTURE CODEC LIST** command fills the *codecArray* array with the list of picture Codec IDs that are available on the machine where it is executed."
		},
		"PICTURE LIBRARY LIST": {
			"Syntax": "**PICTURE LIBRARY LIST** ( *picRefs* ; *picNames* )",
			"Params": [
				[
					"picRefs",
					"Array integer",
					"<-",
					"Reference numbers of the Picture Library graphics"
				],
				[
					"picNames",
					"Text array",
					"<-",
					"Names of the Picture Library graphics"
				]
			],
			"Summary": "The **PICTURE LIBRARY LIST** command returns the reference numbers and names of the pictures currently stored in the Picture Library of the database."
		},
		"PICTURE PROPERTIES": {
			"Syntax": "**PICTURE PROPERTIES** ( *picture* ; *width* ; *height* {; *hOffset* {; *vOffset* {; *mode*}}} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture for which to get information"
				],
				[
					"width",
					"Real",
					"<-",
					"Width of the picture expressed in pixels"
				],
				[
					"height",
					"Real",
					"<-",
					"Height of the picture expressed in pixels"
				],
				[
					"hOffset",
					"Integer",
					"<-",
					"Horizontal offset when displayed on background"
				],
				[
					"vOffset",
					"Integer",
					"<-",
					"Vertical offset when displayed on background"
				],
				[
					"mode",
					"Integer",
					"<-",
					"Transfer mode when displayed on background"
				]
			],
			"Summary": "The PICTURE PROPERTIES command returns information about the picture you pass in *picture*."
		},
		"Picture size": {
			"Syntax": "**Picture size** ( *picture* ) : Integer",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture for which to return the size in bytes"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Size in bytes of the picture"
				]
			],
			"Summary": "Picture size returns the size of *picture* in bytes."
		},
		"PICTURE TO BLOB": {
			"Syntax": "**PICTURE TO BLOB** ( *picture* ; *pictureBlob* ; *codec* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture field or variable"
				],
				[
					"pictureBlob",
					"Blob",
					"<-",
					"BLOB to receive the converted picture"
				],
				[
					"codec",
					"Text",
					"->",
					"Picture Codec ID"
				]
			],
			"Summary": "The **PICTURE TO BLOB** command converts a picture stored in a 4D variable or field to another format and places the resulting picture in a BLOB."
		},
		"PLAY": {
			"Syntax": "**PLAY** ( *objectName* {; *async*} )",
			"Params": [
				[
					"objectName",
					"Text",
					"->",
					"Name or path of sound file or system soundEmpty string for stopping asynchronous play"
				],
				[
					"async",
					"Integer",
					"->",
					"(Windows) If specified, asynchronous execution; If omitted, synchronous execution"
				]
			],
			"Summary": "The **PLAY** command plays sound or multimedia files."
		},
		"PLUGIN LIST": {
			"Syntax": "**PLUGIN LIST** ( *numbersArray* ; *namesArray* )",
			"Params": [
				[
					"numbersArray",
					"Array integer",
					"<-",
					"Numbers of plug-ins"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"Names of plug-ins"
				]
			],
			"Summary": "The PLUGIN LIST command fills in the *numbersArray* and *namesArray* arrays with the numbers and names of the plug-ins loaded and usable by the 4D application."
		},
		"POP RECORD": {
			"Syntax": "**POP RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to pop record, or Default table, if omitted"
				]
			],
			"Summary": "**POP RECORD** pops a record belonging to *aTable* from the table’s record stack, and makes the record the current record."
		},
		"Pop up menu": {
			"Syntax": "**Pop up menu** ( *contents* {; *default* {; *xCoord* ; *yCoord*}} )  : Integer",
			"Params": [
				[
					"contents",
					"Text",
					"->",
					"Menu text definition"
				],
				[
					"default",
					"Integer",
					"->",
					"Number of menu item selected by default"
				],
				[
					"xCoord",
					"Integer",
					"->",
					"X coordinate of upper left corner"
				],
				[
					"yCoord",
					"Integer",
					"->",
					"Y coordinate of upper left corner"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Selected menu item number"
				]
			],
			"Summary": "The **Pop up menu** command displays a pop-up menu at the current location of the mouse."
		},
		"Position": {
			"Syntax": "**Position** ( *find* ; *aString* {; *start* {; *lengthFound*}}{; *} ) -> Function result <br/>\n**Position** ( *find* ; *aString* ; *start* ; *lengthFound* ; *options* ) -> Function result",
			"Params": [
				[
					"find",
					"Text",
					"->",
					"String to find"
				],
				[
					"aText",
					"Text",
					"->",
					"String in which to search"
				],
				[
					"start",
					"Integer",
					"->",
					"Position in string where search will start"
				],
				[
					"lengthFound",
					"Integer",
					"<-",
					"Length of string found"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: evaluation based on character codes"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Position of first occurrence"
				],
				[
					"Position ( find ; aString ; start ; lengthFound ; options ) -> Function result"
				],
				[
					"Parameter",
					"Type",
					"Description"
				],
				[
					"find",
					"Text",
					"->",
					"String to find"
				],
				[
					"aText",
					"Text",
					"->",
					"String in which to search"
				],
				[
					"start",
					"Integer",
					"->",
					"Position in string where search will start"
				],
				[
					"lengthFound",
					"Integer",
					"->",
					"Length of string found"
				],
				[
					"options",
					"Integer",
					"->",
					"Search condition(s)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Position of first occurrence"
				]
			],
			"Summary": "**Position** returns the position of the first occurrence of *find* in *aString*."
		},
		"POST CLICK": {
			"Syntax": "**POST CLICK** ( *mouseX* ; *mouseY* {; *process*} {; *} )",
			"Params": [
				[
					"mouseX",
					"Integer",
					"->",
					"Horizontal coordinate"
				],
				[
					"mouseY",
					"Integer",
					"->",
					"Vertical coordinate"
				],
				[
					"process",
					"Integer",
					"->",
					"Destination process reference number, or Application event queue, if omitted, or 0"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified, global coordinate system is used If omitted, local coordinate system is used"
				]
			],
			"Summary": "The POST CLICK command simulates a mouse click."
		},
		"POST EVENT": {
			"Syntax": "**POST EVENT** ( *what* ; *message* ; *when* ; *mouseX* ; *mouseY* ; *modifiers* {; *process*} )",
			"Params": [
				[
					"what",
					"Integer",
					"->",
					"Type of event"
				],
				[
					"message",
					"Integer",
					"->",
					"Event message"
				],
				[
					"when",
					"Integer",
					"->",
					"Event time expressed in ticks"
				],
				[
					"mouseX",
					"Integer",
					"->",
					"Horizontal coordinate of mouse"
				],
				[
					"mouseY",
					"Integer",
					"->",
					"Vertical coordinate of mouse"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"Modifier keys state"
				],
				[
					"process",
					"Integer",
					"->",
					"Destination process reference number, or Application event queue, if omitted, or 0"
				]
			],
			"Summary": "The **POST EVENT** command simulates a keyboard or mouse event."
		},
		"POST KEY": {
			"Syntax": "**POST KEY** ( *code* {; *modifiers* {; *process*}} )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Character code or function key code"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"State of modifier keys"
				],
				[
					"process",
					"Integer",
					"->",
					"Destination process reference number, or Application event queue, if omitted, or 0"
				]
			],
			"Summary": "The **POST KEY** command simulates a keystroke."
		},
		"POST OUTSIDE CALL": {
			"Syntax": "**POST OUTSIDE CALL** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "This command was named **CALL PROCESS** in previous 4D releases."
		},
		"PREVIOUS RECORD": {
			"Syntax": "**PREVIOUS RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to move to the previous selected record, or Default table, if omitted"
				]
			],
			"Summary": "**PREVIOUS RECORD** moves the current record pointer to the previous record in the current selection of *aTable* for the current process."
		},
		"PRINT LABEL": {
			"Syntax": "**PRINT LABEL** ( *aTable* {; *document* {; * }} )<br/>**PRINT LABEL** ( *aTable* {; *document* {; >}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to print, or Default table, if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"Name of disk label document"
				],
				[
					"* &#124; >",
					"Operator",
					"->",
					"* to suppress the printing dialog box, or > to not reinitialize print settings"
				]
			],
			"Summary": "**PRINT LABEL** enables you to print labels with the data from the selection of *aTable*."
		},
		"Print object": {
			"Syntax": "**Print object** ( {* ;} *object* {; *posX* {; *posY* {; *width* {; *height*}}}} ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable (if * is omitted)"
				],
				[
					"posX",
					"Integer",
					"->",
					"Horizontal location of object"
				],
				[
					"posY",
					"Integer",
					"->",
					"Vertical location of object"
				],
				[
					"width",
					"Integer",
					"->",
					"Width of object (pixels)"
				],
				[
					"height",
					"Integer",
					"->",
					"Height of object (pixels)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = object entirely printed; otherwise False"
				]
			],
			"Summary": "The **Print object** command lets you print the form object(s) designated by the *object* and *\\** parameters, at the location set by the *posX* and *posY* parameters."
		},
		"PRINT OPTION VALUES": {
			"Syntax": "**PRINT OPTION VALUES** ( *option* ; *namesArray* {; *info1Array* {; *info2Array*}} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Option number"
				],
				[
					"namesArray",
					"Text array",
					"<-",
					"Names of values"
				],
				[
					"info1Array",
					"Array integer",
					"<-",
					"Values (1) of the option"
				],
				[
					"info2Array",
					"Array integer",
					"<-",
					"Values (2) of the option"
				]
			],
			"Summary": "The **PRINT OPTION VALUES** command returns in *namesArray* a list of names available for the print *option* defined."
		},
		"PRINT RECORD": {
			"Syntax": "**PRINT RECORD** ( *aTable* {; *} )<br/>**PRINT RECORD** ( *aTable* {; >} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to print the current record or Default table if omitted"
				],
				[
					"* &#124; >",
					"Operator",
					"->",
					"* to suppress the printing dialog box, or > to not reinitialize print settings"
				]
			],
			"Summary": "**PRINT RECORD** prints the current record of *aTable*, without modifying the current selection."
		},
		"PRINT SELECTION": {
			"Syntax": "**PRINT SELECTION** ( *aTable* {; *} )<br/>**PRINT SELECTION** ( *aTable* {; >} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to print the selection, or Default table, if omitted"
				],
				[
					"* &#124; >",
					"Operator",
					"->",
					"* to suppress the printing dialog box, or > to not reinitialize print settings"
				]
			],
			"Summary": "**PRINT SELECTION** prints the current selection of *aTable*."
		},
		"Print settings to BLOB": {
			"Syntax": "**Print settings to BLOB** ( *printSettings* ) : Integer",
			"Params": [
				[
					"printSettings",
					"Blob",
					"<-",
					"Current print settings"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Status code: 1=Operation successful, 0=No current printer"
				]
			],
			"Summary": "The **Print settings to BLOB** command saves the current 4D print settings in the *printSettings* BLOB."
		},
		"PRINT SETTINGS": {
			"Syntax": "**PRINT SETTINGS** {( *dialType* )}",
			"Params": [
				[
					"dialType",
					"Integer",
					"->",
					"Dialog box to be displayed"
				]
			],
			"Summary": "**PRINT SETTINGS** displays a printing dialog box."
		},
		"PRINTERS LIST": {
			"Syntax": "**PRINTERS LIST** ( *namesArray* {; *altNamesArray* {; *modelsArray*}} )",
			"Params": [
				[
					"namesArray",
					"Text array",
					"<-",
					"Printer names"
				],
				[
					"altNamesArray",
					"Text array",
					"<-",
					"Windows: Printer locations, macOS: Custom printer names"
				],
				[
					"modelsArray",
					"Text array",
					"<-",
					"Printer models"
				]
			],
			"Summary": "The **PRINTERS LIST** command fills in the array(s) passed as parameter(s) with the names as well as, optionally, the locations or custom names and models of the available printers for the machine."
		},
		"Printing page": {
			"Syntax": "**Printing page**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Page number of page currently being printed"
				]
			],
			"Summary": "The **Printing page** command returns the printing page number."
		},
		"PROCESS 4D TAGS": {
			"Syntax": "**PROCESS 4D TAGS** ( *inputTemplate* ; *outputResult* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"inputTemplate",
					"Text",
					"->",
					"Data containing tags to process"
				],
				[
					"outputResult",
					"Text",
					"<-",
					"Result from template execution"
				],
				[
					"param",
					"Expression",
					"->",
					"Parameter(s) passed to template being executed"
				]
			],
			"Summary": "The **PROCESS 4D TAGS** command causes the processing of 4D transformation tags contained in the *inputTemplate* parameter while (optionally) inserting value(s) using the *param* parameters and returns the result in *outputResult*."
		},
		"Process aborted": {
			"Syntax": "**Process aborted**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True = the process is about to be aborted, False = the process is not about to be aborted"
				]
			],
			"Summary": "The **Process aborted** command returns **True** if the process in which it is called is about to be interrupted unexpectedly, which means that the execution of the command was unable to reach its “normal” completion."
		},
		"Process state": {
			"Syntax": "**Process state** ( *process* ) : Integer",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"State of the process"
				]
			],
			"Summary": "The **Process state** command returns the state of the process whose number you pass in *process*."
		},
		"PUSH RECORD": {
			"Syntax": "**PUSH RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to push record, or Default table, if omitted"
				]
			],
			"Summary": "**PUSH RECORD** pushes the current record of *aTable* (and its subrecords, if any) onto the table’s record stack."
		},
		"QR BLOB TO REPORT": {
			"Syntax": "**QR BLOB TO REPORT** ( *area* ; *blob* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB that houses the report"
				]
			],
			"Summary": "The QR BLOB TO REPORT command places the report contained in *blob* in the Quick Report area passed in *area*."
		},
		"QR Count columns": {
			"Syntax": "**QR Count columns** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of columns in area"
				]
			],
			"Summary": "The QR Count columns command returns the number of columns present in the Quick Report *area*."
		},
		"QR DELETE COLUMN": {
			"Syntax": "**QR DELETE COLUMN** ( *area* ; *colNumber* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"Column number"
				]
			],
			"Summary": "The QR DELETE COLUMN command deletes the column in *area* whose number was passed in *colNumber*."
		},
		"QR DELETE OFFSCREEN AREA": {
			"Syntax": "**QR DELETE OFFSCREEN AREA** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area to delete"
				]
			],
			"Summary": "The QR DELETE OFFSCREEN AREA command deletes in memory the Quick Report offscreen *area* whose reference was passed as parameter."
		},
		"QR EXECUTE COMMAND": {
			"Syntax": "**QR EXECUTE COMMAND** ( *area* ; *command* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"command",
					"Integer",
					"->",
					"Menu command to be executed"
				]
			],
			"Summary": "The **QR EXECUTE COMMAND** command executes the toolbar button command whose reference was passed in *command*."
		},
		"QR Find column": {
			"Syntax": "**QR Find column** ( *area* ; *expression* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"expression",
					"Text, Pointer",
					"->",
					"Column object"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of the column"
				]
			],
			"Summary": "The QR Find column command returns the number of the first column whose contents match the *expression* passed in parameter."
		},
		"QR Get area property": {
			"Syntax": "**QR Get area property** ( *area* ; *property* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"property",
					"Integer",
					"->",
					"Interface element designated"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"1 = displayed, 0 = hidden"
				]
			],
			"Summary": "The **QR Get area property** command returns 0 if the interface element passed in *property* is not displayed; otherwise, it returns 1."
		},
		"QR GET BORDERS": {
			"Syntax": "**QR GET BORDERS** ( *area* ; *column* ; *row* ; *border* ; *line* {; *color*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"column",
					"Integer",
					"->",
					"Column number"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"border",
					"Integer",
					"->",
					"Border value"
				],
				[
					"line",
					"Integer",
					"<-",
					"Line thickness"
				],
				[
					"color",
					"Integer",
					"<-",
					"Border color"
				]
			],
			"Summary": "The **QR GET BORDERS** command allows you to retrieve the border style for a border of a given cell."
		},
		"QR Get command status": {
			"Syntax": "**QR Get command status** ( *area* ; *command* {; *value*} ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"command",
					"Integer",
					"->",
					"Command number"
				],
				[
					"value",
					"Integer, Text",
					"<-",
					"Value for the selected sub-item"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Command status"
				]
			],
			"Summary": "The **QR Get command status** command returns 0 if the *command* is disabled or 1 if it is enabled."
		},
		"QR GET DESTINATION": {
			"Syntax": "**QR GET DESTINATION** ( *area* ; *type* {; *specifics*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"type",
					"Integer",
					"<-",
					"Type of the report"
				],
				[
					"specifics",
					"Text, Variable",
					"<-",
					"Specifics linked to the output type"
				]
			],
			"Summary": "The **QR GET DESTINATION** command retrieves the output *type* of the report for the area whose reference was passed in *area*."
		},
		"QR Get document property": {
			"Syntax": "**QR Get document property** ( *area* ; *property* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"property",
					"Integer",
					"->",
					"1 = Print Dialog, 2 = Document unit"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Value for the property"
				]
			],
			"Summary": "The **QR Get document property** command retrieves the display status for the print dialog box or the unit used for the document that are present in *area*."
		},
		"QR Get drop column": {
			"Syntax": "**QR Get drop column** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Drop value"
				]
			],
			"Summary": "The QR Get drop column command returns a value depending on where the drop was performed"
		},
		"QR GET HEADER AND FOOTER": {
			"Syntax": "**QR GET HEADER AND FOOTER** ( *area* ; *selector* ; *leftTitle* ; *centerTitle* ; *rightTitle* ; *height* {; *picture* {; *pictAlignment*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"selector",
					"Integer",
					"->",
					"1 = Header, 2 = Footer"
				],
				[
					"leftTitle",
					"Text",
					"<-",
					"Text displayed on the left side"
				],
				[
					"centerTitle",
					"Text",
					"<-",
					"Text displayed in the middle"
				],
				[
					"rightTitle",
					"Text",
					"<-",
					"Text displayed on the right side"
				],
				[
					"height",
					"Integer",
					"<-",
					"Header or footer height"
				],
				[
					"picture",
					"Picture",
					"<-",
					"Picture to display"
				],
				[
					"pictAlignment",
					"Integer",
					"<-",
					"Alignment attribute for the picture"
				]
			],
			"Summary": "The QR GET HEADER AND FOOTER command retrieves the contents and size of the header or footer."
		},
		"QR Get HTML template": {
			"Syntax": "**QR Get HTML template** ( *area* ) : Text",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"Function result",
					"Text",
					"<-",
					"HTML code used as template"
				]
			],
			"Summary": "The QR Get HTML template command returns the HTML template currently used for the Quick Report *area*."
		},
		"QR GET INFO COLUMN": {
			"Syntax": "**QR GET INFO COLUMN** ( *area* ; *colNum* ; *title* ; *object* ; *hide* ; *size* ; *repeatedValue* ; *displayFormat* {; *resultVar*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number"
				],
				[
					"title",
					"Text",
					"<-",
					"Column title"
				],
				[
					"object",
					"Text",
					"<-",
					"Object assigned for that column"
				],
				[
					"hide",
					"Integer",
					"<-",
					"0 = displayed, 1 = hidden"
				],
				[
					"size",
					"Integer",
					"<-",
					"Column size"
				],
				[
					"repeatedValue",
					"Integer",
					"<-",
					"0 = not repeated, 1 = repeated"
				],
				[
					"displayFormat",
					"Text",
					"<-",
					"Display format for the data"
				],
				[
					"resultVar",
					"Text",
					"<-",
					"Name of the formula variable"
				]
			],
			"Summary": "### List mode \n\nThe **QR GET INFO COLUMN** command retrieves the parameters of an existing column."
		},
		"QR Get info row": {
			"Syntax": "**QR Get info row** ( *area* ; *row* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area created"
				],
				[
					"row",
					"Integer",
					"->",
					"Row designator"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"0 = displayed, 1 = hidden"
				]
			],
			"Summary": "The **QR Get info row** command retrieves the display status of the row whose reference was passed in *row*."
		},
		"QR Get report kind": {
			"Syntax": "**QR Get report kind** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Type of the report"
				]
			],
			"Summary": "The **QR Get report kind** command retrieves the report type for the area whose reference was passed in *area*."
		},
		"QR Get report table": {
			"Syntax": "**QR Get report table** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Table number"
				]
			],
			"Summary": "The QR Get report table command returns the current table number for the report area whose reference was passed in *area*."
		},
		"QR GET SELECTION": {
			"Syntax": "**QR GET SELECTION** ( *area* ; *left* ; *top* {; *right* {; *bottom*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"left",
					"Integer",
					"<-",
					"Left boundary"
				],
				[
					"top",
					"Integer",
					"<-",
					"Top boundary"
				],
				[
					"right",
					"Integer",
					"<-",
					"Right boundary"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"Bottom boundary"
				]
			],
			"Summary": "The QR GET SELECTION command returns the coordinates of the cell that is selected."
		},
		"QR GET SORTS": {
			"Syntax": "**QR GET SORTS** ( *area* ; *aColumns* ; *aOrders* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"aColumns",
					"Real array",
					"<-",
					"Sorted columns"
				],
				[
					"aOrders",
					"Real array",
					"<-",
					"Sort orders"
				]
			],
			"Summary": "The QR GET SORTS command populates two arrays"
		},
		"QR Get text property": {
			"Syntax": "**QR Get text property** ( *area* ; *colNum* ; *rowNum* ; *property* ) : any",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number"
				],
				[
					"rowNum",
					"Integer",
					"->",
					"Row number"
				],
				[
					"property",
					"Integer",
					"->",
					"Property number"
				],
				[
					"Function result",
					"Integer, Text",
					"<-",
					"Value for the selected property"
				]
			],
			"Summary": "The **QR Get text property** command returns the property value of the text attributes for the cell determined by *colNum* and *RowNum*."
		},
		"QR GET TOTALS DATA": {
			"Syntax": "**QR GET TOTALS DATA** ( *area* ; *colNum* ; *breakNum* ; *operator* ; *text* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number"
				],
				[
					"breakNum",
					"Integer",
					"->",
					"Break number"
				],
				[
					"operator",
					"Integer",
					"<-",
					"Operator value for the cell"
				],
				[
					"text",
					"Text",
					"<-",
					"Contents of the cell"
				]
			],
			"Summary": "### List Mode \n\nThe **QR GET TOTALS DATA** command retrieves the details of a specific break."
		},
		"QR GET TOTALS SPACING": {
			"Syntax": "**QR GET TOTALS SPACING** ( *area* ; *subtotal* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"Subtotal number"
				],
				[
					"value",
					"Integer",
					"<-",
					"0=no space, 32000=inserts a page break, >0=spacing added below the break level, <0=proportional increase"
				]
			],
			"Summary": "The QR GET TOTALS SPACING command retrieves a space below a subtotal row."
		},
		"QR INSERT COLUMN": {
			"Syntax": "**QR INSERT COLUMN** ( *area* ; *colNumber* ; *object* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"Column number"
				],
				[
					"object",
					"Field, Variable, Pointer",
					"->",
					"Object to be inserted in the column"
				]
			],
			"Summary": "The QR INSERT COLUMN command inserts or creates a column at the specified position."
		},
		"QR MOVE COLUMN": {
			"Syntax": "**QR MOVE COLUMN** ( *area* ; *column* ; *newPos* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"column",
					"Integer",
					"->",
					"Column number"
				],
				[
					"newPos",
					"Integer",
					"->",
					"New position for column"
				]
			],
			"Summary": "The **QR MOVE COLUMN** command moves the column currently found at the *column* position to the *newPos* position."
		},
		"QR NEW AREA": {
			"Syntax": "**QR NEW AREA** ( *ptr* )",
			"Params": [
				[
					"ptr",
					"Pointer",
					"->",
					"Pointer to a variable"
				]
			],
			"Summary": "The **QR NEW AREA** command creates a new Quick Report area and stores its reference number in the longint variable referenced by the *ptr* pointer."
		},
		"QR New offscreen area": {
			"Syntax": "**QR New offscreen area**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Reference of the area created"
				]
			],
			"Summary": "The QR New offscreen area command creates a new Quick Report offscreen area and returns its reference."
		},
		"QR ON COMMAND": {
			"Syntax": "**QR ON COMMAND** ( *area* ; *methodName* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of the replacement method"
				]
			],
			"Summary": "The **QR ON COMMAND** command executes the 4D method passed in *methodName* when a Quick Report command is invoked by the user, by the selection of a menu command or by a click on a button."
		},
		"QR REPORT TO BLOB": {
			"Syntax": "**QR REPORT TO BLOB** ( *area* ; *blob* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"blob",
					"Blob",
					"<-",
					"BLOB to house the Quick Report"
				]
			],
			"Summary": "The QR REPORT TO BLOB command places the report whose reference was passed in *area* in a BLOB (variable or field)."
		},
		"QR REPORT": {
			"Syntax": "**QR REPORT** ( {*aTable* ;} *document* {; *methodName*}{; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to use for the report, or Default table if omitted"
				],
				[
					"document",
					"Text",
					"->",
					"Quick Report document to load"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of method to call"
				],
				[
					"*",
					"Operator",
					"->",
					"Deletion of printing dialog boxes"
				]
			],
			"Summary": "**QR REPORT** prints a report for *aTable*, created with the Quick Report editor."
		},
		"QR RUN": {
			"Syntax": "**QR RUN** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area to execute"
				]
			],
			"Summary": "The **QR RUN** command executes the report *area* whose reference was passed as parameter with the Quick Report current settings, including the output type."
		},
		"QR SET AREA PROPERTY": {
			"Syntax": "**QR SET AREA PROPERTY** ( *area* ; *property* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"property",
					"Integer",
					"->",
					"Interface element designated"
				],
				[
					"value",
					"Integer",
					"->",
					"1 = displayed, 0 = hidden"
				]
			],
			"Summary": "The **QR SET AREA PROPERTY** command shows or hides the interface element whose reference is passed in *property*."
		},
		"QR SET BORDERS": {
			"Syntax": "**QR SET BORDERS** ( *area* ; *column* ; *row* ; *border* ; *line* {; *color*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"column",
					"Integer",
					"->",
					"Column number"
				],
				[
					"row",
					"Integer",
					"->",
					"Row number"
				],
				[
					"border",
					"Integer",
					"->",
					"Border composite value"
				],
				[
					"line",
					"Integer",
					"->",
					"Line thickness"
				],
				[
					"color",
					"Integer",
					"->",
					"Border color"
				]
			],
			"Summary": "The **QR SET BORDERS** command sets the border style for a given cell."
		},
		"QR SET DESTINATION": {
			"Syntax": "**QR SET DESTINATION** ( *area* ; *type* {; *specifics*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"type",
					"Integer",
					"->",
					"Type of the report"
				],
				[
					"specifics",
					"Text, Variable",
					"->",
					"Specifics linked to the output type"
				]
			],
			"Summary": "The **QR SET DESTINATION** command sets the output *type* of the report for the area whose reference was passed in *area*."
		},
		"QR SET DOCUMENT PROPERTY": {
			"Syntax": "**QR SET DOCUMENT PROPERTY** ( *area* ; *property* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"property",
					"Integer",
					"->",
					"1 = Printing dialog, 2 = Document unit"
				],
				[
					"value",
					"Integer",
					"->",
					"Value for the property"
				]
			],
			"Summary": "The QR SET DOCUMENT PROPERTY command displays the printing dialog or sets the unit used for the document."
		},
		"QR SET HEADER AND FOOTER": {
			"Syntax": "**QR SET HEADER AND FOOTER** ( *area* ; *selector* ; *leftTitle* ; *centerTitle* ; *rightTitle* ; *height* {; *picture* {; *pictAlignment*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"selector",
					"Integer",
					"->",
					"1 = Header, 2 = Footer"
				],
				[
					"leftTitle",
					"Text",
					"->",
					"Text displayed on the left side"
				],
				[
					"centerTitle",
					"Text",
					"->",
					"Text displayed in the middle"
				],
				[
					"rightTitle",
					"Text",
					"->",
					"Text displayed on the right side"
				],
				[
					"height",
					"Integer",
					"->",
					"Header or footer height"
				],
				[
					"picture",
					"Picture",
					"->",
					"Picture to display"
				],
				[
					"pictAlignment",
					"Integer",
					"->",
					"Alignment attribute for the picture"
				]
			],
			"Summary": "The QR SET HEADER AND FOOTER command sets the contents and size of the header or footer."
		},
		"QR SET HTML TEMPLATE": {
			"Syntax": "**QR SET HTML TEMPLATE** ( *area* ; *template* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"template",
					"Text",
					"->",
					"HTML template"
				]
			],
			"Summary": "The **QR SET HTML TEMPLATE** command sets the HTML template currently used for the Quick Report *area*."
		},
		"QR SET INFO COLUMN": {
			"Syntax": "**QR SET INFO COLUMN** ( *area* ; *colNum* ; *title* ; *object* ; *hide* ; *size* ; *repeatedValue* ; *displayFormat* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number"
				],
				[
					"title",
					"Text",
					"->",
					"Title of the column"
				],
				[
					"object",
					"Field, Variable",
					"->",
					"Object assigned for that column"
				],
				[
					"hide",
					"Integer",
					"->",
					"0 = displayed, 1 = hidden"
				],
				[
					"size",
					"Integer",
					"->",
					"Column size"
				],
				[
					"repeatedValue",
					"Integer",
					"->",
					"0 = not repeated, 1 = repeated"
				],
				[
					"displayFormat",
					"Text",
					"->",
					"Format for the data"
				]
			],
			"Summary": "### List mode \n\nThe **QR SET INFO COLUMN** command sets the parameters of an existing column."
		},
		"QR SET INFO ROW": {
			"Syntax": "**QR SET INFO ROW** ( *area* ; *row* ; *hide* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area created"
				],
				[
					"row",
					"Integer",
					"->",
					"Row designator"
				],
				[
					"hide",
					"Integer",
					"->",
					"0 = displayed, 1 = hidden"
				]
			],
			"Summary": "The **QR SET INFO ROW** command shows/hides the row whose reference was passed in *row*."
		},
		"QR SET REPORT KIND": {
			"Syntax": "**QR SET REPORT KIND** ( *area* ; *type* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"type",
					"Integer",
					"->",
					"Type of the report"
				]
			],
			"Summary": "The **QR SET REPORT KIND** command sets the report *type* for the area whose reference was passed in *area*."
		},
		"QR SET REPORT TABLE": {
			"Syntax": "**QR SET REPORT TABLE** ( *area* ; *aTable* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"aTable",
					"Integer",
					"->",
					"Table number"
				]
			],
			"Summary": "The QR SET REPORT TABLE command sets the current table for the report area whose reference was passed in *area* to the table whose number was passed in *aTable*."
		},
		"QR SET SELECTION": {
			"Syntax": "**QR SET SELECTION** ( *area* ; *left* ; *top* {; *right* {; *bottom*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"left",
					"Integer",
					"->",
					"Left boundary"
				],
				[
					"top",
					"Integer",
					"->",
					"Top boundary"
				],
				[
					"right",
					"Integer",
					"->",
					"Right boundary"
				],
				[
					"bottom",
					"Integer",
					"->",
					"Bottom boundary"
				]
			],
			"Summary": "The QR SET SELECTION command highlights a cell, a row, a column or the entire *area* as you would with a mouse click."
		},
		"QR SET SORTS": {
			"Syntax": "**QR SET SORTS** ( *area* ; *aColumns* {; *aOrders*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"aColumns",
					"Real array",
					"->",
					"Columns"
				],
				[
					"aOrders",
					"Real array",
					"->",
					"Sort orders"
				]
			],
			"Summary": "The QR SET SORTS command sets the sort orders for the columns in the report whose reference is passed in *area*."
		},
		"QR SET TEXT PROPERTY": {
			"Syntax": "**QR SET TEXT PROPERTY** ( *area* ; *colNum* ; *rowNum* ; *property* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number"
				],
				[
					"rowNum",
					"Integer",
					"->",
					"Row number"
				],
				[
					"property",
					"Integer",
					"->",
					"Property number"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"Value for the selected property"
				]
			],
			"Summary": "The **QR SET TEXT PROPERTY** command sets the text attributes for the cell determined by *colNum* and *rowNum*."
		},
		"QR SET TOTALS DATA": {
			"Syntax": "**QR SET TOTALS DATA** ( *area* ; *colNum* ; *breakNum* ; *operator* )<br/>**QR SET TOTALS DATA** ( *area* ; *colNum* ; *breakNum* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"colNum",
					"Integer",
					"->",
					"Column number"
				],
				[
					"breakNum",
					"Integer",
					"->",
					"Break number"
				],
				[
					"operator &#124; value",
					"Integer, Text",
					"->",
					"Operator value for the cell or Cell content"
				]
			],
			"Summary": "**Note:** This command cannot create a subtotal."
		},
		"QR SET TOTALS SPACING": {
			"Syntax": "**QR SET TOTALS SPACING** ( *area* ; *subtotal* ; *value* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Reference of the area"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"Subtotal number"
				],
				[
					"value",
					"Integer",
					"->",
					"0=no space, 32000=inserts a page break, >0=spacing added below the break level, <0=proportional increase"
				]
			],
			"Summary": "The QR SET TOTALS SPACING command sets a space below a subtotal row."
		},
		"QUERY BY ATTRIBUTE": {
			"Syntax": "**QUERY BY ATTRIBUTE** ( {*aTable*}{;}{*conjOp* ;} *objectField* ; *attributePath* ; *queryOp* ; *value* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records, or Default table if omitted"
				],
				[
					"conjOp",
					"*",
					"->",
					"Conjunction operator to use to join multiple queries (if any)"
				],
				[
					"objectField",
					"Field",
					"->",
					"Object field to query attributes"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Name or path of attribute"
				],
				[
					"queryOp",
					"Text, *",
					"->",
					"Query operator (comparator)"
				],
				[
					"value",
					"Text, Number, Date, Time",
					"->",
					"Value to compare"
				],
				[
					"*",
					"Operator",
					"->",
					"Continue query flag"
				]
			],
			"Summary": "**QUERY BY ATTRIBUTE** looks for records matching the query string defined using the *objectField*, *attributePath*, *queryOp* and *value* parameters, and returns a selection of records for *aTable*."
		},
		"QUERY BY EXAMPLE": {
			"Syntax": "**QUERY BY EXAMPLE** ( {*aTable*}{;}{*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records, or Default table, if omitted"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed, the scrolling bar will not be displayed"
				]
			],
			"Summary": "**QUERY BY EXAMPLE** performs the same action as the Query by Example menu command in the Design environment."
		},
		"QUERY BY FORMULA": {
			"Syntax": "**QUERY BY FORMULA** ( *aTable* {; *queryFormula*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records"
				],
				[
					"queryFormula",
					"Boolean",
					"->",
					"Query formula"
				]
			],
			"Summary": "**QUERY BY FORMULA** looks for records in *aTable*."
		},
		"QUERY BY SQL": {
			"Syntax": "**QUERY BY SQL** ( {*aTable* ;} *sqlFormula* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table in which to return a selection of records or Default table if this parameter is omitted"
				],
				[
					"sqlFormula",
					"Text",
					"->",
					"Valid SQL search formula representing the WHERE clause of the SELECT query"
				]
			],
			"Summary": "The QUERY BY SQL command can be used to take advantage of the SQL kernel integrated into 4D."
		},
		"QUERY SELECTION BY ATTRIBUTE": {
			"Syntax": "**QUERY SELECTION BY ATTRIBUTE** ( {*aTable*}{;}{*conjOp* ;} *objectField* ; *attributePath* ; *queryOp* ; *value* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records, or Default table if omitted"
				],
				[
					"conjOp",
					"*",
					"->",
					"Conjunction operator to use to join multiple queries (if any)"
				],
				[
					"objectField",
					"Field",
					"->",
					"Object field to query attributes"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Name or path of attribute"
				],
				[
					"queryOp",
					"*, Text",
					"->",
					"Query operator (comparator)"
				],
				[
					"value",
					"Text, Number, Date, Time",
					"->",
					"Value to compare"
				],
				[
					"*",
					"Operator",
					"->",
					"Continue query flag"
				]
			],
			"Summary": "**QUERY SELECTION BY ATTRIBUTE** works and performs the same actions as QUERY BY ATTRIBUTE."
		},
		"QUERY SELECTION BY FORMULA": {
			"Syntax": "**QUERY SELECTION BY FORMULA** ( *aTable* {; *queryFormula*} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records"
				],
				[
					"queryFormula",
					"Boolean",
					"->",
					"Query formula"
				]
			],
			"Summary": "**QUERY SELECTION BY FORMULA** looks for records in *aTable*."
		},
		"QUERY SELECTION WITH ARRAY": {
			"Syntax": "**QUERY SELECTION WITH ARRAY** ( *targetField* ; *array* )",
			"Params": [
				[
					"targetField",
					"Field",
					"->",
					"Field used to compare the values"
				],
				[
					"array",
					"Array",
					"->",
					"Array of searched values"
				]
			],
			"Summary": "The **QUERY SELECTION WITH ARRAY** command searches the table of the field passed as first parameter for the records where the value of *targetField* is equal to at least one of the values of the elements in the *array*."
		},
		"QUERY SELECTION": {
			"Syntax": "**QUERY SELECTION** ( {*aTable* }{;}{ *queryArgument* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records, or Default table, if omitted"
				],
				[
					"queryArgument",
					"Expression",
					"->",
					"Query argument"
				],
				[
					"*",
					"Operator",
					"->",
					"Continue query flag"
				]
			],
			"Summary": "**QUERY SELECTION** looks for records in *aTable*."
		},
		"QUERY WITH ARRAY": {
			"Syntax": "**QUERY WITH ARRAY** ( *targetField* ; *array* )",
			"Params": [
				[
					"targetField",
					"Field",
					"->",
					"Field used to compare the values"
				],
				[
					"array",
					"Array",
					"->",
					"Array of the searched values"
				]
			],
			"Summary": "The QUERY WITH ARRAY command searches all the records for which the value of *targetField* is equal, at least, to one of the values of the elements in *array*."
		},
		"QUERY": {
			"Syntax": "**QUERY** ( {*aTable* }{;}{ *queryArgument* {; *}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return a selection of records, or Default table, if omitted"
				],
				[
					"queryArgument",
					"Expression",
					"->",
					"Query argument"
				],
				[
					"*",
					"Operator",
					"->",
					"Continue query flag"
				]
			],
			"Summary": "**QUERY** looks for records matching the criteria specified in *queryArgument* and returns a selection of records for *aTable*."
		},
		"QUIT 4D": {
			"Syntax": "**QUIT 4D** {( *time* )}",
			"Params": [
				[
					"time",
					"Integer",
					"->",
					"Time (sec) before quitting the server"
				]
			],
			"Summary": "The QUIT 4D command exits the current 4D application and returns to the Desktop."
		},
		"Random": {
			"Syntax": "**Random**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Random number"
				]
			],
			"Summary": "Random returns a random integer value between 0 and 32,767 (inclusive)."
		},
		"Read only state": {
			"Syntax": "**Read only state** {( *aTable* )} : Boolean",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to test read-only state, or Default table, if omitted"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Access to table is read-only (TRUE), or Access to table is read-write (FALSE)"
				]
			],
			"Summary": "This function tests whether or not the state of *aTable* is read-only for the process in which it is called."
		},
		"READ ONLY": {
			"Syntax": "**READ ONLY** {( *aTable* )}<br/>**READ ONLY** {( * )}",
			"Params": [
				[
					"aTable &#124; *",
					"Table, Operator",
					"->",
					"Table for which to set read-only state, or * for all the tables, or Default table, if omitted"
				]
			],
			"Summary": "READ ONLY changes the state of *aTable* to read-only for the process in which it is called."
		},
		"READ PICTURE FILE": {
			"Syntax": "**READ PICTURE FILE** ( *fileName* ; *picture* {; *} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"Name or full pathname of the file to read, or empty string"
				],
				[
					"picture",
					"Picture",
					"<-",
					"Field or variable receiving picture"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = accept any type of file"
				]
			],
			"Summary": "The **READ PICTURE FILE** command opens the picture saved in the *fileName* disk file and loads it in the *picture* 4D field or variable."
		},
		"READ WRITE": {
			"Syntax": "**READ WRITE** {( *aTable* )}<br/>**READ WRITE** {( * )}",
			"Params": [
				[
					"aTable &#124; *",
					"Table, Operator",
					"->",
					"Table for which to set read-write state, or * for all the tables, or Default table, if omitted"
				]
			],
			"Summary": "READ WRITE changes the state of *aTable* to read/write for the process in which it is called."
		},
		"REAL TO BLOB": {
			"Syntax": "**REAL TO BLOB** ( *real* ; *blob* ; *realFormat* {; offset } )<br/>**REAL TO BLOB** ( *real* ; *blob* ; *realFormat* {; *} )",
			"Params": [
				[
					"real",
					"Real",
					"->",
					"Real value to write into the BLOB"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB to receive the Real value"
				],
				[
					"realFormat",
					"Integer",
					"->",
					"0 Native real format 1 Extended real format 2  Macintosh Double real format 3  Windows Double real format"
				],
				[
					"offset &#124; *",
					"Variable, Operator",
					"<->",
					"Offset within the BLOB (expressed in bytes) or * to append the value"
				],
				[
					"",
					"",
					"",
					"New offset after writing if not *"
				]
			],
			"Summary": "The REAL TO BLOB command writes the Real value *real* into the BLOB *blob*."
		},
		"RECEIVE BUFFER": {
			"Syntax": "**RECEIVE BUFFER** ( *receiveVar* )",
			"Params": [
				[
					"receiveVar",
					"Text",
					"<-",
					"Variable to receive data"
				]
			],
			"Summary": "RECEIVE BUFFER reads the serial port that was previously opened with SET CHANNEL."
		},
		"RECEIVE PACKET": {
			"Syntax": "**RECEIVE PACKET** ( {*docRef* ;} *receiveVar* ; *stopChar* )<br/>**RECEIVE PACKET** ( {*docRef* ;} *receiveVar* ; *numBytes* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Document reference number, or Current channel (serial port or document)"
				],
				[
					"receiveVar",
					"Text, Blob",
					"<-",
					"Variable to receive data"
				],
				[
					"stopChar &#124; numBytes",
					"Text, Integer",
					"->",
					"Character(s) at which to stop receiving, or Number of bytes to receive"
				]
			],
			"Summary": "**RECEIVE PACKET** reads characters from a serial port or from a document."
		},
		"RECEIVE RECORD": {
			"Syntax": "**RECEIVE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table into which to receive the record, or Default table, if omitted"
				]
			],
			"Summary": "RECEIVE RECORD receives a record into *table* from the serial port or document opened by the SET CHANNEL command."
		},
		"RECEIVE VARIABLE": {
			"Syntax": "**RECEIVE VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"<-",
					"Variable in which to receive"
				]
			],
			"Summary": "**RECEIVE VARIABLE** receives *variable*, which was previously sent by SEND VARIABLE from the document or serial port previously opened by SET CHANNEL."
		},
		"Record number": {
			"Syntax": "**Record number** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return the number of the current record, or Default table, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Current record number"
				]
			],
			"Summary": "**Record number** returns the physical record number for the current record of *aTable*."
		},
		"Records in selection": {
			"Syntax": "**Records in selection** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return number of selected records, or Default table, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Records in selection of table"
				]
			],
			"Summary": "**Records in selection** returns the number of records in the current selection of *aTable*."
		},
		"Records in set": {
			"Syntax": "**Records in set** ( *set* ) : Integer",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"Name of the set to test"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of records in set"
				]
			],
			"Summary": "Records in set returns the number of records in *set*."
		},
		"Records in table": {
			"Syntax": "**Records in table** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return the number of records, or Default table, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Total number of records in the table"
				]
			],
			"Summary": "**Records in table** returns the total number of records in aTable."
		},
		"REDRAW WINDOW": {
			"Syntax": "**REDRAW WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				]
			],
			"Summary": "The REDRAW WINDOW command provokes a graphical update of the window whose reference number you pass in *window*."
		},
		"REDRAW": {
			"Syntax": "**REDRAW** ( *object* )",
			"Params": [
				[
					"object",
					"any",
					"->",
					"Table for which to redraw the subform, or Field for which to redraw the area, or Variable for which to redraw the area, or List box to be updated"
				]
			],
			"Summary": "When you use a method to change the value of a field displayed in a subform, you must execute REDRAW to ensure that the form is updated."
		},
		"REDUCE RESTORE WINDOW": {
			"Syntax": "**REDUCE RESTORE WINDOW** ( *window* )",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number"
				]
			],
			"Summary": "The **REDUCE RESTORE WINDOW** command reduces/expands the window whose reference number was passed in *window* to/from the taskbar on Windows or the dock on macOS."
		},
		"REDUCE SELECTION": {
			"Syntax": "**REDUCE SELECTION** ( {*aTable* ;} *number* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to reduce the selection, or Default table, if omitted"
				],
				[
					"number",
					"Integer",
					"->",
					"Number of records to keep selected"
				]
			],
			"Summary": "**REDUCE SELECTION** creates a new selection of records for *aTable*."
		},
		"Refresh license": {
			"Syntax": "**Refresh license** : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Status object"
				]
			],
			"Summary": "The **Refresh license** command updates the current 4D Server license."
		},
		"REGENERATE MISSING TABLE": {
			"Syntax": "**REGENERATE MISSING TABLE** ( *tableName* )",
			"Params": [
				[
					"tableName",
					"Text",
					"->",
					"Name of missing table to be regenerated"
				]
			],
			"Summary": "The **REGENERATE MISSING TABLE** command rebuilds the missing table whose name is passed in the *tableName* parameter."
		},
		"REGISTER CLIENT": {
			"Syntax": "**REGISTER CLIENT** ( *clientName* {; *period*}{; *} )",
			"Params": [
				[
					"clientName",
					"Text",
					"->",
					"Name of the 4D client session"
				],
				[
					"period",
					"Integer",
					"->",
					"***Ignored since version 11.3***"
				],
				[
					"*",
					"Operator",
					"->",
					"Local process"
				]
			],
			"Summary": "The **REGISTER CLIENT** command “registers” a 4D client station with the name specified in *clientName* on 4D Server, so as to allow other clients or eventually 4D Server (by using stored methods) to execute methods on it by using the EXECUTE ON CLIENT command."
		},
		"Register data key": {
			"Syntax": "**Register data key** ( *curPassPhrase* ) : Boolean<br/>**Register data key** ( *curDataKey* ) : Boolean",
			"Params": [
				[
					"curPassPhrase &#124; curDataKey",
					"Text, Object",
					"->",
					"Current passphrase (text) or current data encryption key (object)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the encryption key has been successfully added to the 4D keychain, False if it was already in the 4D keychain"
				]
			],
			"Summary": "The **Register data key** command adds the data encryption key passed in parameter to the 4D keychain."
		},
		"REJECT NEW REMOTE CONNECTIONS": {
			"Syntax": "**REJECT NEW REMOTE CONNECTIONS** ( *rejectStatus* )",
			"Params": [
				[
					"rejectStatus",
					"Boolean",
					"->",
					"True if new connections are rejected, else false"
				]
			],
			"Summary": "The **REJECT NEW REMOTE CONNECTIONS** command specifies whether or not the application server accepts new remote user connections."
		},
		"REJECT": {
			"Syntax": "**REJECT** {( *aField* )}",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field to reject"
				]
			],
			"Summary": "**REJECT** has two forms."
		},
		"RELATE MANY SELECTION": {
			"Syntax": "**RELATE MANY SELECTION** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Many table field (from which the relation starts)"
				]
			],
			"Summary": "The RELATE MANY SELECTION command generates a selection of records in the Many table, based on a selection of records in the One table, and loads the first record of the Many table as the current record."
		},
		"RELATE MANY": {
			"Syntax": "**RELATE MANY** ( *oneTable* )<br/>**RELATE MANY** ( *Field* )",
			"Params": [
				[
					"oneTable &#124; Field",
					"Table, Field",
					"->",
					"Table to establish all one-to-many relations, or One Field"
				]
			],
			"Summary": "RELATE MANY has two forms."
		},
		"RELATE ONE SELECTION": {
			"Syntax": "**RELATE ONE SELECTION** ( *manyTable* ; *oneTable* )",
			"Params": [
				[
					"manyTable",
					"Table",
					"->",
					"Many table name (from which the relation starts)"
				],
				[
					"oneTable",
					"Table",
					"->",
					"One table name (to which the relation refers)"
				]
			],
			"Summary": "The **RELATE ONE SELECTION** command creates a new selection of records for the table *oneTable*, based on the selection of records in the table *manyTable* and loads the first record of the new selection as the current record."
		},
		"RELATE ONE": {
			"Syntax": "**RELATE ONE** ( *manyTable* {; *choiceField*} )<br/>**RELATE ONE** ( *field* {; *choiceField*} )",
			"Params": [
				[
					"manyTable &#124; Field",
					"Table, Field",
					"->",
					"Table for which to establish all automatic relations, or Field with manual relation to one table"
				],
				[
					"choiceField",
					"Field",
					"->",
					"Choice field from the one table"
				]
			],
			"Summary": "**RELATE ONE** has two forms."
		},
		"RELEASE MENU": {
			"Syntax": "**RELEASE MENU** ( *menu* )",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"Menu reference"
				]
			],
			"Summary": "The **RELEASE MENU** command removes the menu whose ID is passed in *menu* from memory."
		},
		"RELOAD EXTERNAL DATA": {
			"Syntax": "**RELOAD EXTERNAL DATA** ( *aField* )",
			"Params": [
				[
					"aField",
					"Text, Blob, Picture, Object",
					"->",
					"Field for which to set the storage location"
				]
			],
			"Summary": "The **RELOAD EXTERNAL DATA** command reloads the contents in memory of an external storage file associated with a BLOB, Picture, or Text type field."
		},
		"RELOAD PROJECT": {
			"Syntax": "**RELOAD PROJECT**",
			"Params": [],
			"Summary": "The **RELOAD PROJECT** command reloads the source file definitions (methods, forms, etc.) from the disk for the running project in the current 4D environment."
		},
		"REMOVE FROM SET": {
			"Syntax": "**REMOVE FROM SET** ( {*aTable* ;} *set* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Current record's table, or Default table, if omitted"
				],
				[
					"set",
					"Text",
					"->",
					"Name of the set from which to remove the current record"
				]
			],
			"Summary": "REMOVE FROM SET removes the current record of *aTable* from *set*."
		},
		"REMOVE PICTURE FROM LIBRARY": {
			"Syntax": "**REMOVE PICTURE FROM LIBRARY** ( *picRef* )<br/>**REMOVE PICTURE FROM LIBRARY** ( *picName* )",
			"Params": [
				[
					"picRef &#124; picName",
					"Integer, Text",
					"->",
					"Reference number of Picture Library graphic or Name of Picture Library graphic"
				]
			],
			"Summary": "The REMOVE PICTURE FROM LIBRARY command removes from the Picture Library the picture whose reference number is passed in *picRef* or whose name is passed in *picName*."
		},
		"Replace string": {
			"Syntax": "**Replace string** ( *source* ; *oldString* ; *newString* {; *howMany*}{; *} ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"Original string"
				],
				[
					"oldText",
					"Text",
					"->",
					"Characters to replace"
				],
				[
					"newText",
					"Text",
					"->",
					"Replacement string (if empty string, occurrences are deleted)"
				],
				[
					"howMany",
					"Integer",
					"->",
					"How many times to replace If omitted, all occurrences are replaced"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: evaluation based on character codes"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Resulting string"
				]
			],
			"Summary": "Replace string replaces *howMany* occurrences of *oldString* in *source* with *newString*."
		},
		"Request": {
			"Syntax": "**Request** ( *message* {; *defaultResponse* {; *OKButtonTitle* {; *CancelButtonTitle*}}} )  : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Message to display in the request dialog box"
				],
				[
					"defaultResponse",
					"Text",
					"->",
					"Default data for the enterable text area"
				],
				[
					"OKButtonTitle",
					"Text",
					"->",
					"OK button title"
				],
				[
					"CancelButtonTitle",
					"Text",
					"->",
					"Cancel button title"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Value entered by user"
				]
			],
			"Summary": "The **Request** command displays a request dialog box composed of a message, a text input area, an **OK** button, and a **Cancel** Button."
		},
		"RESIZE FORM WINDOW": {
			"Syntax": "**RESIZE FORM WINDOW** ( *width* ; *height* )",
			"Params": [
				[
					"width",
					"Integer",
					"->",
					"Pixels to add to or remove from the current form window width"
				],
				[
					"height",
					"Integer",
					"->",
					"Pixels to add to or remove from the current form window height"
				]
			],
			"Summary": "The **RESIZE FORM WINDOW** command lets you change the size of the current form window."
		},
		"RESOLVE ALIAS": {
			"Syntax": "**RESOLVE ALIAS** ( *aliasPath* ; *targetPath* )",
			"Params": [
				[
					"aliasPath",
					"Text",
					"->",
					"Name or access path of the alias/shortcut"
				],
				[
					"targetPath",
					"Text",
					"<-",
					"Name or access path of the alias/shortcut target"
				]
			],
			"Summary": "The RESOLVE ALIAS command returns the full path to the target file or folder of the alias (named shortcut under Windows)."
		},
		"RESOLVE POINTER": {
			"Syntax": "**RESOLVE POINTER** ( *aPointer* ; *varName* ; *tableNum* ; *fieldNum* )",
			"Params": [
				[
					"aPointer",
					"Pointer",
					"->",
					"Pointer for which to retrieve the referenced object"
				],
				[
					"varName",
					"Text",
					"<-",
					"Name of referenced variable or empty string"
				],
				[
					"tableNum",
					"Integer",
					"<-",
					"Number of referenced table or array element or 0 or -1"
				],
				[
					"fieldNum",
					"Integer",
					"<-",
					"Number of referenced field or 0"
				]
			],
			"Summary": "The RESOLVE POINTER command retrieves the information of the object referenced by the pointer expression *aPointer* and returns it into the parameters *varName*, *tableNum,* and *fieldNum*."
		},
		"RESOURCE LIST": {
			"Syntax": "**RESOURCE LIST** ( *resType* ; *resIDs* ; *resNames* {; *resFile*} )",
			"Params": [
				[
					"resType",
					"Text",
					"->",
					"4-character resource type"
				],
				[
					"resIDs",
					"Array integer",
					"<-",
					"Resource ID numbers for resources of this type"
				],
				[
					"resNames",
					"Text array",
					"<-",
					"Resource names for resources of this type"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				]
			],
			"Summary": "The **RESOURCE LIST** command populates the arrays *resIDs* and *resNames* with the resource IDs and names of the resources whose type is passed in *resType*."
		},
		"RESOURCE TYPE LIST": {
			"Syntax": "**RESOURCE TYPE LIST** ( *resTypes* {; *resFile*} )",
			"Params": [
				[
					"resTypes",
					"Text array",
					"<-",
					"List of available resource types"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number, or all open resource files, if omitted"
				]
			],
			"Summary": "The RESOURCE TYPE LIST command populates the array *resTypes* with the resource types of the resources present in the resource files currently open."
		},
		"RESTART 4D": {
			"Syntax": "**RESTART 4D** {( *time* {; *message*} )}",
			"Params": [
				[
					"time",
					"Integer",
					"->",
					"Time delay (seconds) before 4D restarts"
				],
				[
					"message",
					"Text",
					"->",
					"Text to display on client machines"
				]
			],
			"Summary": "The **RESTART 4D** command restarts the current 4D application."
		},
		"RESTORE INFO": {
			"Syntax": "**RESTORE INFO** ( *selector* ; *info1* ; *info2* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Type of information to get"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"Value 1 of the selector"
				],
				[
					"info2",
					"Text, Time",
					"<-",
					"Value 2 of the selector"
				]
			],
			"Summary": "The RESTORE INFO command gets information related to the last automatic database restore."
		},
		"RESTORE": {
			"Syntax": "**RESTORE** {( *archivePath* {; *destFolderPath*} )}",
			"Params": [
				[
					"archivePath",
					"Text",
					"->",
					"Pathname of archive to restore"
				],
				[
					"destFolderPath",
					"Text",
					"->",
					"Pathname of destination folder"
				]
			],
			"Summary": "The RESTORE command can be used to restore the file(s) included in a 4D archive."
		},
		"RESUME INDEXES": {
			"Syntax": "**RESUME INDEXES** ( *aTable* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to resume indexes"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = asynchronous indexing"
				]
			],
			"Summary": "The **RESUME INDEXES** command reactivates all the indexes of *aTable* when they have been paused previously using the PAUSE INDEXES command."
		},
		"RESUME PROCESS": {
			"Syntax": "**RESUME PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "**RESUME PROCESS** resumes a *process* whose execution has been paused or delayed."
		},
		"RESUME TRANSACTION": {
			"Syntax": "**RESUME TRANSACTION**",
			"Params": [],
			"Summary": "The **RESUME TRANSACTION** command resumes the transaction that was paused using SUSPEND TRANSACTION at the corresponding level in the current process."
		},
		"Right click": {
			"Syntax": "**Right click**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if a right click was detected, otherwise False"
				]
			],
			"Summary": "The Right click command returns True if the right button of the mouse has been clicked."
		},
		"Round": {
			"Syntax": "**Round** ( *round* ; *places* ) : Real",
			"Params": [
				[
					"round",
					"Real",
					"->",
					"Number to be rounded"
				],
				[
					"places",
					"Integer",
					"->",
					"Number of decimal places used for rounding"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Number rounded to the number of decimal places specified by Places"
				]
			],
			"Summary": "**Round** returns *number* rounded to the number of decimal places specified by *places*."
		},
		"SAVE LIST": {
			"Syntax": "**SAVE LIST** ( *list* ; *listName* )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"listName",
					"Text",
					"->",
					"Name of the list as it will appear in the Design environment List Editor"
				]
			],
			"Summary": "The SAVE LIST command saves the list whose reference number you pass in *list*, within the Design environment List Editor, under the name you pass in *listName*."
		},
		"SAVE RECORD": {
			"Syntax": "**SAVE RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to save the current record, or Default table, if omitted"
				]
			],
			"Summary": "**SAVE RECORD** saves the current record of *aTable* in the current process."
		},
		"SAVE RELATED ONE": {
			"Syntax": "**SAVE RELATED ONE** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Many field"
				]
			],
			"Summary": "**SAVE RELATED ONE** saves the record related to *aField*."
		},
		"SAVE SET": {
			"Syntax": "**SAVE SET** ( *set* ; *document* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"Name of the set to save"
				],
				[
					"document",
					"Text",
					"->",
					"Name of the disk file to which to save the set"
				]
			],
			"Summary": "**SAVE SET** saves *set* to *document*, a document on disk."
		},
		"SAVE VARIABLES": {
			"Syntax": "**SAVE VARIABLES** ( *document* ; *variable* {; *variable2* ; ... ; *variableN*} )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document in which to save the variables"
				],
				[
					"variable",
					"Variable",
					"->",
					"Variables to save"
				]
			],
			"Summary": "The **SAVE VARIABLES** command saves one or more variables in the document whose name you pass in *document*."
		},
		"SAX ADD PROCESSING INSTRUCTION": {
			"Syntax": "**SAX ADD PROCESSING INSTRUCTION** ( *document* ; *statement* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"statement",
					"Text",
					"->",
					"Statement to insert in the document"
				]
			],
			"Summary": "In the XML document referenced by *document*, the SAX ADD PROCESSING INSTRUCTION command adds an XML processing *statement*."
		},
		"SAX ADD XML CDATA": {
			"Syntax": "**SAX ADD XML CDATA** ( *document* ; *data* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"data",
					"Blob, Text",
					"->",
					"Text or BLOB to insert in the document between CData tags"
				]
			],
			"Summary": "In the XML document referenced by *document*, the SAX ADD XML CDATA command adds *data* of the text or BLOB type."
		},
		"SAX ADD XML COMMENT": {
			"Syntax": "**SAX ADD XML COMMENT** ( *document* ; *comment* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"comment",
					"Text",
					"->",
					"Comment to be added"
				]
			],
			"Summary": "The SAX ADD XML COMMENT command adds a *comment* in the XML document referenced by *document*."
		},
		"SAX ADD XML DOCTYPE": {
			"Syntax": "**SAX ADD XML DOCTYPE** ( *document* ; *docType* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"docType",
					"Text",
					"->",
					"DocType to be added"
				]
			],
			"Summary": "The SAX ADD XML DOCTYPE command adds a DocType statement set by the *docType* parameter in the XML document referenced by *document*."
		},
		"SAX ADD XML ELEMENT VALUE": {
			"Syntax": "**SAX ADD XML ELEMENT VALUE** ( *document* ; *data* {; *} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"data",
					"Text, Variable",
					"->",
					"Text or variable to insert in the document"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: encoding of special characters If omitted: no encoding"
				]
			],
			"Summary": "In the XML document referenced by *document*, the **SAX ADD XML ELEMENT VALUE** command adds *data* directly without converting them."
		},
		"SAX CLOSE XML ELEMENT": {
			"Syntax": "**SAX CLOSE XML ELEMENT** ( *document* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				]
			],
			"Summary": "The SAX CLOSE XML ELEMENT command writes the statements necessary for closing the last element opened using the SAX OPEN XML ELEMENT command in the XML document referenced by *document*"
		},
		"SAX GET XML CDATA": {
			"Syntax": "**SAX GET XML CDATA** ( *document* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"value",
					"Text, Blob",
					"<-",
					"Element value"
				]
			],
			"Summary": "The **SAX GET XML CDATA** command gets the CDATA *value* of an XML element that exists in the XML document referenced in the *document* parameter."
		},
		"SAX GET XML COMMENT": {
			"Syntax": "**SAX GET XML COMMENT** ( *document* ; *comment* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"comment",
					"Text",
					"<-",
					"XML comment"
				]
			],
			"Summary": "The **SAX GET XML COMMENT** command returns a *comment* if an XML Comment SAX event is generated in the XML document referenced in the *document* parameter."
		},
		"SAX GET XML DOCUMENT VALUES": {
			"Syntax": "**SAX GET XML DOCUMENT VALUES** ( *document* ; *encoding* ; *version* ; *standalone* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"encoding",
					"Text",
					"<-",
					"XML document character set"
				],
				[
					"version",
					"Text",
					"<-",
					"XML version"
				],
				[
					"standalone",
					"Boolean",
					"<-",
					"True = document is standalone, otherwise False"
				]
			],
			"Summary": "The **SAX GET XML DOCUMENT VALUES** command gets basic information from the XML header of the XML document referenced in the *document* parameter."
		},
		"SAX GET XML ELEMENT VALUE": {
			"Syntax": "**SAX GET XML ELEMENT VALUE** ( *document* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"value",
					"Text, Blob",
					"<-",
					"Element value"
				]
			],
			"Summary": "The **SAX GET XML ELEMENT VALUE** command allows you to get the *value* of an XML element that exists in the XML document referenced in the *document* parameter."
		},
		"SAX GET XML ELEMENT": {
			"Syntax": "**SAX GET XML ELEMENT** ( *document* ; *name* ; *prefix* ; *attrNames* ; *attrValues* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"name",
					"Text",
					"<-",
					"Element name"
				],
				[
					"prefix",
					"Text",
					"<-",
					"Namespace"
				],
				[
					"attrNames",
					"Text array",
					"<-",
					"Attribute names"
				],
				[
					"attrValues",
					"Text array",
					"<-",
					"Attribute values"
				]
			],
			"Summary": "The **SAX GET XML ELEMENT** command returns various information about the element *name* that is present in the XML document reference in the *document* parameter."
		},
		"SAX GET XML ENTITY": {
			"Syntax": "**SAX GET XML ENTITY** ( *document* ; *name* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"name",
					"Text",
					"<-",
					"Entity name"
				],
				[
					"value",
					"Text",
					"<-",
					"Entity value"
				]
			],
			"Summary": "The **SAX GET XML ENTITY** command allows you to get the *name* and *value* of an XML entity that exists in the XML document referenced in the *document* parameter."
		},
		"SAX Get XML node": {
			"Syntax": "**SAX Get XML node** ( *document* ) : Integer",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Event returned by function"
				]
			],
			"Summary": "The **SAX Get XML node** command returns a long integer that indicates the type of SAX event returned while the XML document referenced in *document* is parsed."
		},
		"SAX GET XML PROCESSING INSTRUCTION": {
			"Syntax": "**SAX GET XML PROCESSING INSTRUCTION** ( *document* ; *name* ; *value* )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"name",
					"Text",
					"<-",
					"Instruction name"
				],
				[
					"value",
					"Text",
					"<-",
					"Instruction value"
				]
			],
			"Summary": "The **SAX GET XML PROCESSING INSTRUCTION** command returns the *name* and *value* of the XML instruction processed in the XML document referenced in the *document* parameter."
		},
		"SAX OPEN XML ELEMENT ARRAYS": {
			"Syntax": "**SAX OPEN XML ELEMENT ARRAYS** ( *document* ; *tag* {; *attribNamesArray* ; *attribValuesArray*} {; *attribNamesArray2* ; *attribValuesArray2* ; ... ; *attribNamesArrayN* ; *attribValuesArrayN*} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"tag",
					"Text",
					"->",
					"Name of element to open"
				],
				[
					"attribNamesArray",
					"Text array",
					"->",
					"Array of attribute names"
				],
				[
					"attribValuesArray",
					"Text array, Array integer, Date array, Real array, Picture array, Boolean array",
					"->",
					"Array of attribute values"
				]
			],
			"Summary": "The **SAX OPEN XML ELEMENT ARRAYS** command is used to add a new element in the XML document whose reference is passed in *document* as well as, optionally, attributes and their values in the form of arrays."
		},
		"SAX OPEN XML ELEMENT": {
			"Syntax": "**SAX OPEN XML ELEMENT** ( *document* ; *tag* {; *attribName* ; *attribValue*} {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"tag",
					"Text",
					"->",
					"Name of element to open"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute name"
				],
				[
					"attribValue",
					"Text",
					"->",
					"Attribute value"
				]
			],
			"Summary": "The **SAX OPEN XML ELEMENT** command adds a new element in the XML document referenced by *document* as well as, optionally, attributes and their values."
		},
		"SAX SET XML DECLARATION": {
			"Syntax": "**SAX SET XML DECLARATION** ( *document* ; *encoding* {; *standalone*} )",
			"Params": [
				[
					"document",
					"Time",
					"->",
					"Reference of open document"
				],
				[
					"encoding",
					"Text",
					"->",
					"XML document character set"
				],
				[
					"standalone",
					"Boolean",
					"->",
					"True = the document is standalone False (default) = document is not standalone"
				]
			],
			"Summary": "The **SAX SET XML DECLARATION** command initializes the XML document referenced in *document* using the specified *encoding*."
		},
		"SCAN INDEX": {
			"Syntax": "**SCAN INDEX** ( *aField* ; *number* {; > or <} )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Indexed field on which to scan index"
				],
				[
					"number",
					"Integer",
					"->",
					"Number of records to return"
				],
				[
					"> or <",
					"Operator",
					"->",
					"> from beginning of index < from end of index"
				]
			],
			"Summary": "**SCAN INDEX** returns a selection of *number* records from the table containing the *aField* field."
		},
		"SCREEN COORDINATES": {
			"Syntax": "**SCREEN COORDINATES** ( *left* ; *top* ; *right* ; *bottom* {; *screenID* {; *screenArea*}} )",
			"Params": [
				[
					"left",
					"Integer",
					"<-",
					"Global left coordinate of screen area"
				],
				[
					"top",
					"Integer",
					"<-",
					"Global top coordinate of screen area"
				],
				[
					"right",
					"Integer",
					"<-",
					"Global right coordinate of screen area"
				],
				[
					"bottom",
					"Integer",
					"<-",
					"Global bottom coordinate of screen area"
				],
				[
					"screenID",
					"Integer",
					"->",
					"Screen number, or main screen if omitted"
				],
				[
					"screenArea",
					"Integer",
					"->",
					"Entire screen (default) or working area"
				]
			],
			"Summary": "The SCREEN COORDINATES command returns in *left*, *top*, *right,* and *bottom* the global coordinates of the screen specified by *screenID*."
		},
		"SCREEN DEPTH": {
			"Syntax": "**SCREEN DEPTH** ( *depth* ; *color* {; *screen*} )",
			"Params": [
				[
					"depth",
					"Integer",
					"<-",
					"Depth of the screen (number of colors = 2 ^ depth)"
				],
				[
					"color",
					"Integer",
					"<-",
					"1 = Color screen, 0 = Black and white or Gray scale"
				],
				[
					"screen",
					"Integer",
					"->",
					"Screen number, or main screen if omitted"
				]
			],
			"Summary": "The SCREEN DEPTH command returns in *depth* and *color* information about the monitor."
		},
		"Screen height": {
			"Syntax": "**Screen height** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Windows: height of application window, or height of screen if * is specified Macintosh: height of main screen"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Height expressed in pixels"
				]
			],
			"Summary": "On Windows, Screen height returns the height of 4D application window (MDI window)."
		},
		"Screen width": {
			"Syntax": "**Screen width** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Windows: width of application window, or width of screen if * is specified Macintosh: width of main screen"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Width expressed in pixels"
				]
			],
			"Summary": "On Windows, Screen width returns the width of 4D application window (MDI window)."
		},
		"Select document": {
			"Syntax": "**Select document** ( *directory* ; *fileTypes* ; *title* ; *options* {; *selected*} ) : Text",
			"Params": [
				[
					"directory",
					"Text, Integer",
					"->",
					"• Directory access path to display by default in the document selection dialog box, or• Empty string to display default user folder (“My documents” under Windows, “Documents” under Mac OS), or• Number of the memorized access path"
				],
				[
					"fileTypes",
					"Text",
					"->",
					"List of types of documents to filter, or \"*\" to not filter documents"
				],
				[
					"title",
					"Text",
					"->",
					"Title of the selection dialog box"
				],
				[
					"options",
					"Integer",
					"->",
					"Selection option(s)"
				],
				[
					"selected",
					"Text array",
					"<-",
					"Array containing the list of access paths + names of selected files"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of selected file (first file of the list in case of multiple selection)"
				]
			],
			"Summary": "The **Select document** command displays a standard open document dialog box which allows the user to set one or more files and returns the name and/or full access path of the selected file(s)."
		},
		"Select folder": {
			"Syntax": "**Select folder** ( {*message* }{;}{ *defaultPath* {; *options*}} ) : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Title of the window"
				],
				[
					"defaultPath",
					"Text, Integer",
					"->",
					"• Default pathname or • Empty string to display the default user folder (“My documents” under Windows, “Documents” under Mac OS), or • Number of memorized pathname"
				],
				[
					"options",
					"Integer",
					"->",
					"Selection option(s)under Mac OS"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Access path to the selected folder"
				]
			],
			"Summary": "The **Select folder** command displays a dialog box that allows you to manually select a folder and then retrieve the complete access path to that folder."
		},
		"SELECT LIST ITEMS BY POSITION": {
			"Syntax": "**SELECT LIST ITEMS BY POSITION** ( {* ;} *list* ; *itemPos* {; *positionsArray*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemPos",
					"Integer",
					"->",
					"Position of item in expanded/collapsed list(s)"
				],
				[
					"positionsArray",
					"Array integer",
					"->",
					"Array of the positions in the expanded/collapsed list(s)"
				]
			],
			"Summary": "The **SELECT LIST ITEMS BY POSITION** command selects the item(s) whose position is passed in *itemPos* and, optionally, in *positionsArray* within the list whose reference number or object name is passed in *list*."
		},
		"SELECT LIST ITEMS BY REFERENCE": {
			"Syntax": "**SELECT LIST ITEMS BY REFERENCE** ( *list* ; *itemRef* {; *refArray*} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"itemRef",
					"Integer",
					"->",
					"Item reference number or 0 for the last item added to the list"
				],
				[
					"refArray",
					"Array integer",
					"->",
					"Array of item reference numbers"
				]
			],
			"Summary": "The **SELECT LIST ITEMS BY REFERENCE** command selects the item(s) whose item reference number is passed in *itemRef* and, optionally, in *refArray*, within the list whose reference number is passed in *list*."
		},
		"Select RGB color": {
			"Syntax": "**Select RGB color** {( *defaultColor* {; *message*} )} : Integer",
			"Params": [
				[
					"defaultColor",
					"Integer",
					"->",
					"Preselected RGB color"
				],
				[
					"message",
					"Text",
					"->",
					"Title of selection window"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"RGB color"
				]
			],
			"Summary": "The Select RGB color command displays the system color selection window and returns the RGB value of the color selected by the user."
		},
		"Selected list items": {
			"Syntax": "**Selected list items** ( {* ;} *list* {; *itemsArray* {; *}} )  : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemsArray",
					"Array integer",
					"<-",
					"If 2nd * omitted: Array contains the positions of selected items in the list(s) If 2nd * passed: Array contains the selected item references"
				],
				[
					"*",
					"Operator",
					"->",
					"If omitted: Item position(s) If passed: Item reference(s)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"If 2nd * omitted: Position of current selected list item in expanded/collapsed list(s) If 2nd * passed: Reference of the selected item"
				]
			],
			"Summary": "The **Selected list items** command returns the position or reference of the selected item in the list whose reference number or object name you pass in *list*."
		},
		"Selected record number": {
			"Syntax": "**Selected record number** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return the selected record number or Default table, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Selected record number of current record"
				]
			],
			"Summary": "**Selected record number** returns the position of the current record within the current selection of *aTable*."
		},
		"SELECTION RANGE TO ARRAY": {
			"Syntax": "**SELECTION RANGE TO ARRAY** ( *start* ; *end* ; *aField* ; *array*} {; aField2 ; *array2* ; ... ; aFieldN ; *arrayN*} )<br/>**SELECTION RANGE TO ARRAY** ( *start* ; *end* ; *aTable* ; *array* {; aTable2 ; *array2* ; ... ; aTableN ; *arrayN*} )",
			"Params": [
				[
					"start",
					"Integer",
					"->",
					"Selected record number where data retrieval starts"
				],
				[
					"end",
					"Integer",
					"->",
					"Selected record number where data retrieval ends"
				],
				[
					"aField &#124; aTable",
					"Field, Table",
					"->",
					"Field to use for retrieving data or Table to use for retrieving record numbers"
				],
				[
					"array",
					"Array",
					"<-",
					"Array to receive field data or record numbers"
				]
			],
			"Summary": "**SELECTION RANGE TO ARRAY** creates one or more arrays and copies data from the fields or record numbers from the current selection into the arrays."
		},
		"SELECTION TO ARRAY": {
			"Syntax": "**SELECTION TO ARRAY** {( *aField* ; *array* {; *aField2* ; *array2* ; ... ; *aFieldN* ; *arrayN*}{; *})<br/>**SELECTION TO ARRAY** {( *aTable* ; *array* {; *aField* ; *array* {; *aField2* ; *array2* ; ... ; *aFieldN* ; *arrayN*}}{; *})}",
			"Params": [
				[
					"aField &#124; aTable",
					"Field, Table",
					"->",
					"Field to use for retrieving data or Table to use for retrieving record numbers"
				],
				[
					"array",
					"Array",
					"<-",
					"Array to receive field data or record numbers"
				],
				[
					"aField",
					"Field",
					"->",
					"Field to retrieve in array"
				],
				[
					"array",
					"Array",
					"<-",
					"Array to receive field data"
				],
				[
					"*",
					"Operator",
					"->",
					"Await execution"
				]
			],
			"Summary": "The **SELECTION TO ARRAY** command creates one or more arrays and copies data in the fields or record numbers from the current selection into the arrays."
		},
		"Selection to JSON": {
			"Syntax": "**Selection to JSON** ( *aTable* {; *aField*}{; *aField2* ; ... ; *aFieldN*}{; *template*})  : Text",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table to serialize"
				],
				[
					"aField",
					"Field",
					"->",
					"Field(s) whose contents must be serialized"
				],
				[
					"template",
					"Object",
					"->",
					"Object for selection of labels and fields"
				],
				[
					"Function result",
					"Text",
					"<-",
					"String containing serialized JSON array"
				]
			],
			"Summary": "The **Selection to JSON** command returns a string containing a JSON array with as many elements as there are records in the current selection of *aTable*."
		},
		"Self": {
			"Syntax": "**Self**  : Pointer",
			"Params": [
				[
					"Function result",
					"Pointer",
					"<-",
					"Pointer to form object (if any) whose method is currently being executed. Otherwise Nil (->[]) if outside of context"
				]
			],
			"Summary": "This command is kept only for compatibility reasons."
		},
		"Semaphore": {
			"Syntax": "**Semaphore** ( *semaphore* {; *tickCount*} ) : Boolean",
			"Params": [
				[
					"semaphore",
					"Text",
					"->",
					"Semaphore to test and set"
				],
				[
					"tickCount",
					"Integer",
					"->",
					"Maximum waiting time"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Semaphore has been successfully set (FALSE) or Semaphore was already set (TRUE)"
				]
			],
			"Summary": "A semaphore is a flag shared among workstations or among processes on the same workstation."
		},
		"SEND MESSAGE TO REMOTE USER": {
			"Syntax": "**SEND MESSAGE TO REMOTE USER** ( *message* {; *userSession*} )",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Text sent to user"
				],
				[
					"userSession",
					"Text",
					"->",
					"User's session ID"
				]
			],
			"Summary": "The **SEND MESSAGE TO REMOTE USER** command sends a message to all remote users or to a specific remote user."
		},
		"SEND PACKET": {
			"Syntax": "**SEND PACKET** ( {*docRef* ;} *packet* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Document reference number, or Current channel (serial port or document)"
				],
				[
					"packet",
					"Text, Blob",
					"->",
					"String or BLOB to be sent"
				]
			],
			"Summary": "**SEND PACKET** sends a packet to a serial port or to a document."
		},
		"SEND RECORD": {
			"Syntax": "**SEND RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to send the current record, or Default table, if omitted"
				]
			],
			"Summary": "**SEND RECORD** sends the current record of *aTable* to the serial port or document opened by the SET CHANNEL command."
		},
		"SEND VARIABLE": {
			"Syntax": "**SEND VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable to send"
				]
			],
			"Summary": "SEND VARIABLE sends *variable* to the document or serial port previously opened by SET CHANNEL."
		},
		"Sequence number": {
			"Syntax": "**Sequence number** {( *aTable* )} : Integer",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to return the sequence number, or Default table, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Sequence number"
				]
			],
			"Summary": "**Sequence number** returns the next sequence number for *aTable*."
		},
		"SET ABOUT": {
			"Syntax": "**SET ABOUT** ( *itemText* ; *method* )",
			"Params": [
				[
					"itemText",
					"Text",
					"->",
					"New About menu item text"
				],
				[
					"method",
					"Text",
					"->",
					"Name of method to execute when menu item is chosen"
				]
			],
			"Summary": "The **SET ABOUT** command changes the **About 4D** menu command in the **Help** menu (Windows) or in the **Application** menu (macOS) menu to *itemText*."
		},
		"SET APPLICATION COLOR SCHEME": {
			"Syntax": "**SET APPLICATION COLOR SCHEME** ( *colorScheme* )",
			"Params": [
				[
					"colorScheme",
					"Text",
					"->",
					"\"light\", \"dark\", or \"inherited\""
				]
			],
			"Summary": "The **SET APPLICATION COLOR SCHEME** command defines the color scheme to use at the application level for the current session."
		},
		"SET ASSERT ENABLED": {
			"Syntax": "**SET ASSERT ENABLED** ( *assertions* {; *} )",
			"Params": [
				[
					"assertions",
					"Boolean",
					"->",
					"True = enable assertions<br/>False = disable assertions"
				],
				[
					"*",
					"Operator",
					"->",
					"If omitted = command applies to all the processes (existing or created subsequently)<br/>If passed= command applies to current process only"
				]
			],
			"Summary": "The **SET ASSERT ENABLED** command can be used to disable or re-enable any assertions inserted into the 4D code of the application."
		},
		"SET AUTOMATIC RELATIONS": {
			"Syntax": "**SET AUTOMATIC RELATIONS** ( *one* {; *many*} )",
			"Params": [
				[
					"one",
					"Boolean",
					"->",
					"Status of all Many-to-One relations"
				],
				[
					"many",
					"Boolean",
					"->",
					"Status of all One-to-Many relations"
				]
			],
			"Summary": "**SET AUTOMATIC RELATIONS** temporarily changes all the manual relations into automatic relations for the entire database in the current process."
		},
		"SET BLOB SIZE": {
			"Syntax": "**SET BLOB SIZE** ( *blob* ; *size* {; *filler*} )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB field or variable"
				],
				[
					"size",
					"Integer",
					"->",
					"New size of the BLOB"
				],
				[
					"filler",
					"Integer",
					"->",
					"ASCII code of filler character"
				]
			],
			"Summary": "SET BLOB SIZE resizes the BLOB *blob* according to the value passed in *size*."
		},
		"SET BLOBS CACHE PRIORITY": {
			"Syntax": "**SET BLOBS CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table whose \"blobs\" data priority value has to be set for the session"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for BLOBs in the table"
				]
			],
			"Summary": "This command is reserved for specific needs."
		},
		"SET CACHE SIZE": {
			"Syntax": "**SET CACHE SIZE** ( *size* {; *minFreeSize*} )",
			"Params": [
				[
					"size",
					"Real",
					"->",
					"Size of database cache in bytes"
				],
				[
					"minFreeSize",
					"Real",
					"->",
					"Minimum number of bytes to release when cache is full"
				]
			],
			"Summary": "The **SET CACHE SIZE** command sets the database cache size dynamically and, optionally, sets the mininum byte size at which to start to free memory."
		},
		"SET CHANNEL": {
			"Syntax": "**SET CHANNEL** ( *port* ; *settings* ) <br/>\n**SET CHANNEL** ( *operation* ; *document* )",
			"Params": [
				[
					"port",
					"Integer",
					"->",
					"Serial port number"
				],
				[
					"settings",
					"Integer",
					"->",
					"Serial port settings"
				],
				[
					"operation",
					"Integer",
					"->",
					"Document operation to perform"
				],
				[
					"document",
					"Text",
					"->",
					"Document name"
				]
			],
			"Summary": "The **SET CHANNEL** command opens a serial port or a document."
		},
		"SET CURRENT PRINTER": {
			"Syntax": "**SET CURRENT PRINTER** ( *printerName* )",
			"Params": [
				[
					"printerName",
					"Text",
					"->",
					"Name of printer to be used"
				]
			],
			"Summary": "The **SET CURRENT PRINTER** command designates the printer to be used for printing with the current 4D application."
		},
		"SET CURSOR": {
			"Syntax": "**SET CURSOR** {( *cursor* )}",
			"Params": [
				[
					"cursor",
					"Integer",
					"->",
					"Cursor resource number"
				]
			],
			"Summary": "The SET CURSOR command changes the mouse cursor to the system cursor whose ID number you pass in *cursor*."
		},
		"SET DATABASE LOCALIZATION": {
			"Syntax": "**SET DATABASE LOCALIZATION** ( *languageCode* {; *} )",
			"Params": [
				[
					"languageCode",
					"Text",
					"->",
					"Language selector"
				],
				[
					"*",
					"Operator",
					"->",
					"Scope of command"
				]
			],
			"Summary": "The SET DATABASE LOCALIZATION command is used to modify the current language of the database for the current session."
		},
		"SET DATABASE PARAMETER": {
			"Syntax": "**SET DATABASE PARAMETER** ( {*aTable* ;} *selector* ; *value* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to set the parameter or, Default table if this parameter is omitted"
				],
				[
					"selector",
					"Integer",
					"->",
					"Code of the database parameter to modify"
				],
				[
					"value",
					"Real, Text",
					"->",
					"Value of the parameter"
				]
			],
			"Summary": "The **SET DATABASE PARAMETER** command allows you to modify various internal parameters of the 4D database."
		},
		"SET DEFAULT CENTURY": {
			"Syntax": "**SET DEFAULT CENTURY** ( *century* {; *pivotYear*} )",
			"Params": [
				[
					"century",
					"Integer",
					"->",
					"Default century (minus one) for entry of date with two-digit year"
				],
				[
					"pivotYear",
					"Integer",
					"->",
					"Pivot year for entry of date with two-digit year"
				]
			],
			"Summary": "The SET DEFAULT CENTURY command specifies the default century and the pivot year used by 4D when you enter a date with only two digits for the year."
		},
		"SET DOCUMENT POSITION": {
			"Syntax": "**SET DOCUMENT POSITION** ( *docRef* ; *offset* {; *anchor*} )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Document reference number"
				],
				[
					"offset",
					"Real",
					"->",
					"File position (expressed in bytes)"
				],
				[
					"anchor",
					"Integer",
					"->",
					"1 = In relation to the beginning of the file 2 = In relation to the end of the file 3 = In relation to current position"
				]
			],
			"Summary": "This command operates only on a document currently open whose document reference number you pass in *docRef*."
		},
		"SET DOCUMENT PROPERTIES": {
			"Syntax": "**SET DOCUMENT PROPERTIES** ( *document* ; *locked* ; *invisible* ; created on ; created at ; modified on ; modified at )",
			"Params": [
				[
					"document",
					"Text",
					"->",
					"Document name or Full document pathname"
				],
				[
					"locked",
					"Boolean",
					"->",
					"Locked (True) or Unlocked (False)"
				],
				[
					"invisible",
					"Boolean",
					"->",
					"Invisible (True) or Visible (False)"
				],
				[
					"created on",
					"Date",
					"->",
					"Creation date"
				],
				[
					"created at",
					"Time",
					"->",
					"Creation time"
				],
				[
					"modified on",
					"Date",
					"->",
					"Last modification date"
				],
				[
					"modified at",
					"Time",
					"->",
					"Last modification time"
				]
			],
			"Summary": "The **SET DOCUMENT PROPERTIES** command changes the information about the document whose name or pathname you pass in *document*."
		},
		"SET DOCUMENT SIZE": {
			"Syntax": "**SET DOCUMENT SIZE** ( *docRef* ; *size* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Document reference number"
				],
				[
					"size",
					"Real",
					"->",
					"New size expressed in bytes"
				]
			],
			"Summary": "The **SET DOCUMENT SIZE** command sets the size of a document to the number of bytes you pass in *size*."
		},
		"SET DRAG ICON": {
			"Syntax": "**SET DRAG ICON** ( *icon* {; *horOffset* {; *vertOffset*}} )",
			"Params": [
				[
					"icon",
					"Picture",
					"->",
					"Icon to use during drag"
				],
				[
					"horOffset",
					"Integer",
					"->",
					"Horizontal offset from left edge of picture with respect to cursor position (>0 = to the left, <0 = to the right)"
				],
				[
					"vertOffset",
					"Integer",
					"->",
					"Vertical offset from top edge of picture with respect to cursor position (>0 = upwards, <0 = downwards)"
				]
			],
			"Summary": "The **SET DRAG ICON** command associates the icon picture with the cursor during drag and drop operations that are managed by programming."
		},
		"SET ENVIRONMENT VARIABLE": {
			"Syntax": "**SET ENVIRONMENT VARIABLE** ( *varName* ; *varValue* )",
			"Params": [
				[
					"varName",
					"Text",
					"->",
					"Variable name to set"
				],
				[
					"varValue",
					"Text",
					"->",
					"Value of the variable or  \"\" to reset default value"
				]
			],
			"Summary": "The **SET ENVIRONMENT VARIABLE** command allows you to set the value of an environment variable under macOS and Windows."
		},
		"SET EXTERNAL DATA PATH": {
			"Syntax": "**SET EXTERNAL DATA PATH** ( *aField* ; *path* )",
			"Params": [
				[
					"aField",
					"Text, Blob, Picture",
					"->",
					"Field for which to set the storage location"
				],
				[
					"path",
					"Text, Integer",
					"->",
					"Pathname and file name of external storage or0 = use structure definition 1 = use default folder"
				]
			],
			"Summary": "The **SET EXTERNAL DATA PATH** command sets or modifies, for the current record, the external storage location for the *aField* field passed as parameter."
		},
		"SET FIELD RELATION": {
			"Syntax": "**SET FIELD RELATION** ( *manyTable* ; *one* ; *many* )<br/>**SET FIELD RELATION** ( *field* ; *one* ; *many* )",
			"Params": [
				[
					"manyTable &#124; Field",
					"Table, Field",
					"->",
					"Starting table of relations or Starting field of a relation"
				],
				[
					"one",
					"Integer",
					"->",
					"Status of the Many-to-One relation starting from the field or the Many-to-One relations of the table"
				],
				[
					"many",
					"Integer",
					"->",
					"Status of the One-to-Many relation starting from the field or the One-to-Many relations of the table"
				]
			],
			"Summary": "The **SET FIELD RELATION** command sets the automatic/manual status of each relation of the database separately for the current process, regardless of its initial status as specified in the Relation properties window in the Design environment."
		},
		"SET FIELD TITLES": {
			"Syntax": "**SET FIELD TITLES** ( *aTable* ; *fieldTitles* ; *fieldNumbers* {; *} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to set the field titles"
				],
				[
					"fieldTitles",
					"Text array",
					"->",
					"Field names as they must appear in dialog boxes"
				],
				[
					"fieldNumbers",
					"Array integer",
					"->",
					"Actual field numbers"
				],
				[
					"*",
					"Operator",
					"->",
					"Use the custom names in the formula editor"
				]
			],
			"Summary": "**SET FIELD TITLES** lets you mask, rename, and reorder the fields of the table passed in *aTable* when they appear in standard 4D dialog boxes, such as the Query editor, within the Application environment (i.e. when the startup mode is **Application**, or after you select **Test application** in the **Run** menu)."
		},
		"SET FIELD VALUE NULL": {
			"Syntax": "**SET FIELD VALUE NULL** ( *aField* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field where NULL value is to be attributed"
				]
			],
			"Summary": "The SET FIELD VALUE NULL command assigns the NULL value to the field designated by the *aField* parameter."
		},
		"SET FILE TO PASTEBOARD": {
			"Syntax": "**SET FILE TO PASTEBOARD** ( *file* {; *} )",
			"Params": [
				[
					"file",
					"Text",
					"->",
					"File name or complete pathname of file"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = add; If omitted = replace"
				]
			],
			"Summary": "The SET FILE TO PASTEBOARD command adds the complete pathname of the file passed in the *file* parameter."
		},
		"SET GROUP ACCESS": {
			"Syntax": "**SET GROUP ACCESS** {( *groups* )}",
			"Params": [
				[
					"groups",
					"Collection",
					"->",
					"Name of group(s) to which the 4D user account must belong during the session"
				]
			],
			"Summary": "The **SET GROUP ACCESS** command modifies the memberships of the 4D user account for the current session."
		},
		"Set group properties": {
			"Syntax": "**Set group properties** ( *groupID* ; *name* ; *owner* {; *members*} )  : Integer",
			"Params": [
				[
					"groupID",
					"Integer",
					"->",
					"Unique ID number of group, -1 for adding a group"
				],
				[
					"<-",
					"Unique ID number of added group (if any)"
				],
				[
					"name",
					"Text",
					"->",
					"New group name"
				],
				[
					"owner",
					"Integer",
					"->",
					"User ID number of new group owner (Binary databases only)"
				],
				[
					"members",
					"Array integer",
					"->",
					"New group members"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Unique ID number of new group"
				]
			],
			"Summary": "Set group properties enables you to change and update the properties of an existing group whose unique group ID number you pass in *groupID*, or to add a new group."
		},
		"SET HELP MENU": {
			"Syntax": "**SET HELP MENU** ( *menuCol* )",
			"Params": [
				[
					"menuCol",
					"Collection",
					"->",
					"Collection of menu objects"
				]
			],
			"Summary": "The **SET HELP MENU** command allows you to replace the default 4D **Help** menu with the *menuCol* collection of menu items in the application mode."
		},
		"SET INDEX CACHE PRIORITY": {
			"Syntax": "**SET INDEX CACHE PRIORITY** ( *aField* ; *priority* )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field whose index(es) priority value has to be set for the session"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for the field index(es)"
				]
			],
			"Summary": "This command is reserved for specific needs."
		},
		"SET INDEX": {
			"Syntax": "**SET INDEX** ( *aField* ; *index* {; *} )",
			"Params": [
				[
					"aField",
					"Field",
					"->",
					"Field for which to create or delete the index"
				],
				[
					"index",
					"Boolean, Integer",
					"->",
					"True=Create index, False=Delete index, orCreate an index of the type: -1=Keywords, 0=by default, 1=B-Tree standard, 3=B-Tree cluster"
				],
				[
					"*",
					"Operator",
					"->",
					"Asynchronous indexing if * is passed"
				]
			],
			"Summary": "**SET INDEX**, although a legacy command, is still fully supported and can remain in your application -- there is no need to rewrite existing code."
		},
		"SET LIST ITEM FONT": {
			"Syntax": "**SET LIST ITEM FONT** ( {* ;} *list* ; *itemRef* ; *font* )<br/>**SET LIST ITEM FONT** ( * ; *list* ; * ; *font* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number or 0 for the last item added to the list or * for the current item of the list"
				],
				[
					"font",
					"Text, Integer",
					"->",
					"Font name or number"
				]
			],
			"Summary": "The **SET LIST ITEM FONT** command modifies the character font of the item specified by the *itemRef* parameter of the list whose reference number or object name is passed in *list*."
		},
		"SET LIST ITEM ICON": {
			"Syntax": "**SET LIST ITEM ICON** ( {* ;} *list* ; *itemRef* ; *icon* )<br/>**SET LIST ITEM ICON** ( * ; *list* ; * ; *icon* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Integer, Operator",
					"->",
					"Item reference number or 0 for the last item added to the list or * for the current item of the list"
				],
				[
					"icon",
					"Picture",
					"->",
					"Icon to be associated with item"
				]
			],
			"Summary": "The **SET LIST ITEM ICON** command modifies the icon associated with the item specified by the *itemRef* parameter of the list whose reference number or object name is passed in *list*."
		},
		"SET LIST ITEM PARAMETER": {
			"Syntax": "**SET LIST ITEM PARAMETER** ( {* ;} *list* ; *itemRef* ; *selector* ; *value* )<br/>**SET LIST ITEM PARAMETER** ( * ; *list* ; * ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Operator, Integer",
					"->",
					"Item reference number or 0 for the last item appended to the list or * for the current list item"
				],
				[
					"selector",
					"Text",
					"->",
					"Parameter constant"
				],
				[
					"value",
					"Text, Boolean, Real",
					"->",
					"Value of the parameter"
				]
			],
			"Summary": "The **SET LIST ITEM PARAMETER** command modifies the *selector* parameter for the *itemRef* item of the hierarchical list whose reference or object name is passed in the *list* parameter."
		},
		"SET LIST ITEM PROPERTIES": {
			"Syntax": "**SET LIST ITEM PROPERTIES** ( {* ;} *list* ; *itemRef* ; *enterable* ; *styles* {; *icon* {; *color*}} )<br/>**SET LIST ITEM PROPERTIES** ( * ; *list* ; * ; *enterable* ; *styles* {; *icon* {; *color*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted) or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Operator, Integer",
					"->",
					"Item reference number, or 0 for last item appended to the list, or * for the current list item"
				],
				[
					"enterable",
					"Boolean",
					"->",
					"TRUE = Enterable, FALSE = Non-enterable"
				],
				[
					"styles",
					"Integer",
					"->",
					"Font style for the item"
				],
				[
					"icon",
					"Text, Integer",
					"->",
					"Picture name or number (\"\" or 0 for no icon)"
				],
				[
					"color",
					"Integer",
					"->",
					"RGB color value or -1 = reset to original color"
				]
			],
			"Summary": "The **SET LIST ITEM PROPERTIES** command modifies the item designated by the *itemRef* parameter within the list whose reference number or object name is passed in *list*."
		},
		"SET LIST ITEM": {
			"Syntax": "**SET LIST ITEM** ( {* ;} *list* ; *itemRef* ; *newItemText* ; *newItemRef* {; *sublist* ; *expanded*} )<br/>**SET LIST ITEM** ( * ; *list* ; * ; *newItemText* ; *newItemRef* {; *sublist* ; *expanded*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, list is an object name (string) If omitted, list is a list reference number"
				],
				[
					"list",
					"Integer, Text",
					"->",
					"List reference number (if * omitted), or Name of list type object (if * passed)"
				],
				[
					"itemRef &#124; *",
					"Operator, Integer",
					"->",
					"Item reference number, or 0 for last item appended to the list, or * for the current item in the list"
				],
				[
					"newItemText",
					"Text",
					"->",
					"New item text"
				],
				[
					"newItemRef",
					"Integer",
					"->",
					"New item reference number"
				],
				[
					"sublist",
					"Integer",
					"->",
					"New sublist attached to item, or 0 for no sublist (detaching current one, if any), or -1 for no change"
				],
				[
					"expanded",
					"Boolean",
					"->",
					"Indicates if the optional sublist will be expanded or collapsed"
				]
			],
			"Summary": "The **SET LIST ITEM** command modifies the item designated by the *itemRef* parameter within the list whose reference number or object name is passed in *list*."
		},
		"SET LIST PROPERTIES": {
			"Syntax": "**SET LIST PROPERTIES** ( *list* ; *appearance* {; *icon* {; *lineHeight* {; *doubleClick* {; *multiSelections* {; *editable*}}}}} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"appearance",
					"Integer",
					"->",
					"*** Deprecated, must always be 0 ***"
				],
				[
					"icon",
					"Integer",
					"->",
					"*** Deprecated, must always be 0 ***"
				],
				[
					"lineHeight",
					"Integer",
					"->",
					"Minimal line height expressed in pixels"
				],
				[
					"doubleClick",
					"Integer",
					"->",
					"Expand/Collapse sublist on double-click 0 = Yes, 1= No"
				],
				[
					"multiSelections",
					"Integer",
					"->",
					"Multiple selections: 0 = No (default), 1 = Yes"
				],
				[
					"editable",
					"Integer",
					"->",
					"0 = List is not editable by user, 1 = List is editable by user (default)"
				]
			],
			"Summary": "The **SET LIST PROPERTIES** command sets the line height and selection properties of the hierarchical list whose list reference you pass in *list*."
		},
		"SET MACRO PARAMETER": {
			"Syntax": "**SET MACRO PARAMETER** ( *selector* ; *textParam* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Selection to use"
				],
				[
					"textParam",
					"Text",
					"->",
					"Text sent"
				]
			],
			"Summary": "The **SET MACRO PARAMETER** command inserts the *paramText* text into the method from which it has been called."
		},
		"SET MENU BAR": {
			"Syntax": "**SET MENU BAR** ( *menuBar* {; *process*}{; *} )",
			"Params": [
				[
					"menuBar",
					"Integer, Text, Text",
					"->",
					"Number or name of the menu bar or Menu reference"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"*",
					"Operator",
					"->",
					"Save menu bar state"
				]
			],
			"Summary": "**SET MENU BAR** replaces the current menu bar with the one specified by *menuBar* for the current process only."
		},
		"SET MENU ITEM ICON": {
			"Syntax": "**SET MENU ITEM ICON** ( *menu* ; *menuItem* ; *iconRef* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"iconRef",
					"Text, Integer",
					"->",
					"Name or number of picture to be associated with menu item"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "The **SET MENU ITEM ICON** command modifies the icon associated with the menu item designated by the *menu* and *menuItem* parameters."
		},
		"SET MENU ITEM MARK": {
			"Syntax": "**SET MENU ITEM MARK** ( *menu* ; *menuItem* ; *mark* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Item number or -1 for last item added"
				],
				[
					"mark",
					"Text",
					"->",
					"New menu item mark"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				]
			],
			"Summary": "The **SET MENU ITEM MARK** command changes the check mark of the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem* to the first character of the string passed in *mark*."
		},
		"SET MENU ITEM METHOD": {
			"Syntax": "**SET MENU ITEM METHOD** ( *menu* ; *menuItem* ; *methodName* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"methodName",
					"Text",
					"->",
					"Method name"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "The **SET MENU ITEM METHOD** command modifies the 4D project method associated with the menu item designated by the *menu* and *menuItem* parameters."
		},
		"SET MENU ITEM PARAMETER": {
			"Syntax": "**SET MENU ITEM PARAMETER** ( *menu* ; *menuItem* ; *param* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or Menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"param",
					"Text",
					"->",
					"String to associate as parameter"
				]
			],
			"Summary": "The **SET MENU ITEM PARAMETER** command associates a custom character string with a menu item designated by the *menu* and *menuItem* parameters."
		},
		"SET MENU ITEM PROPERTY": {
			"Syntax": "**SET MENU ITEM PROPERTY** ( *menu* ; *menuItem* ; *property* ; *value* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu reference or menu number"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Number of menu item or -1 for the last item added to the menu"
				],
				[
					"property",
					"Text",
					"->",
					"Property type"
				],
				[
					"value",
					"Text, Number, Boolean",
					"->",
					"Property value"
				],
				[
					"process",
					"Integer",
					"->",
					"Process number"
				]
			],
			"Summary": "The **SET MENU ITEM PROPERTY** command sets the *value* of the *property* for the menu item designated by the *menu* and *menuItem* parameters."
		},
		"SET MENU ITEM SHORTCUT": {
			"Syntax": "**SET MENU ITEM SHORTCUT** ( *menu* ; *menuItem* ; *itemKey* ; *modifiers* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for last item added"
				],
				[
					"itemKey",
					"Text, Integer",
					"->",
					"Letter of keyboard shortcut or Character code of keyboard shortcut (former syntax)"
				],
				[
					"modifiers",
					"Integer",
					"->",
					"Modifier(s) to associate with shortcut  (ignored if Character code is passed in itemKey)"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				]
			],
			"Summary": "The **SET MENU ITEM SHORTCUT** command assigns a new shortcut to a menu item."
		},
		"SET MENU ITEM STYLE": {
			"Syntax": "**SET MENU ITEM STYLE** ( *menu* ; *menuItem* ; *itemStyle* {; *process*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for last item added"
				],
				[
					"itemStyle",
					"Integer",
					"->",
					"New menu item style"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				]
			],
			"Summary": "The **SET MENU ITEM STYLE** command changes the font style of the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem* according to the font style passed in *itemStyle*."
		},
		"SET MENU ITEM": {
			"Syntax": "**SET MENU ITEM** ( *menu* ; *menuItem* ; *itemText* {; *process*}{; *} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Menu number or Menu reference"
				],
				[
					"menuItem",
					"Integer",
					"->",
					"Menu item number or -1 for the last item added"
				],
				[
					"itemText",
					"Text",
					"->",
					"New text for the menu item"
				],
				[
					"process",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: consider metacharacters as standard characters"
				]
			],
			"Summary": "The SET MENU ITEM command changes the text of the menu item whose menu number or reference is passed in *menu* and whose item number is passed in *menuItem*, to the text passed in *itemText*."
		},
		"SET PICTURE FILE NAME": {
			"Syntax": "**SET PICTURE FILE NAME** ( *picture* ; *fileName* )",
			"Params": [
				[
					"picture",
					"Picture, Picture",
					"->",
					"Picture for which to set the default name"
				],
				[
					"fileName",
					"Text",
					"->",
					"Default picture name"
				]
			],
			"Summary": "The **SET PICTURE FILE NAME** command sets or changes the default file name for the picture passed as parameter."
		},
		"SET PICTURE METADATA": {
			"Syntax": "**SET PICTURE METADATA** ( *picture* ; *metaName* ; *metaContents* {; *metaName2* ; *metaContents2* ; ... ; *metaNameN* ; *metaContentsN*} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture whose metadata you want to set"
				],
				[
					"metaName",
					"Text",
					"->",
					"Name or path of block to set"
				],
				[
					"metaContents",
					"Variable",
					"->",
					"Metadata contents"
				]
			],
			"Summary": "The SET PICTURE METADATA command lets you set or modify the contents of the metadata (or meta-tags) found in the *picture* (4D picture field or variable), when they are modifiable."
		},
		"SET PICTURE TO LIBRARY": {
			"Syntax": "**SET PICTURE TO LIBRARY** ( *picture* ; *picRef* ; *picName* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"New picture"
				],
				[
					"picRef",
					"Integer",
					"->",
					"Reference number of Picture Library graphic"
				],
				[
					"picName",
					"Text",
					"->",
					"New name of the picture"
				]
			],
			"Summary": "The **SET PICTURE TO LIBRARY** command creates a new picture or replaces a picture in the Picture Library."
		},
		"SET PICTURE TO PASTEBOARD": {
			"Syntax": "**SET PICTURE TO PASTEBOARD** ( *picture* )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Picture to be placed in pasteboard"
				]
			],
			"Summary": "SET PICTURE TO PASTEBOARD clears the pasteboard and puts a copy of the picture passed in *picture* into it."
		},
		"SET PLUGIN ACCESS": {
			"Syntax": "**SET PLUGIN ACCESS** ( *plugIn* ; *group* )",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"Plug-in number"
				],
				[
					"group",
					"Text",
					"->",
					"Group name to associate with plug-in"
				]
			],
			"Summary": "The SET PLUGIN ACCESS command sets, by programming, the user group allowed to use each “serialized” plug-in that is installed in the database."
		},
		"SET PRINT MARKER": {
			"Syntax": "**SET PRINT MARKER** ( *markNum* ; *position* {; *} )",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"Marker number"
				],
				[
					"position",
					"Integer",
					"->",
					"New position for the marker"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = move subsequent markers If omitted = do not move subsequent markers"
				]
			],
			"Summary": "The **SET PRINT MARKER** command enables the definition of the marker position during printing."
		},
		"SET PRINT OPTION": {
			"Syntax": "**SET PRINT OPTION** ( *option* ; *value1* {; *value2*} )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Option number"
				],
				[
					"value1",
					"Integer, Text",
					"->",
					"Value 1 of the option"
				],
				[
					"value2",
					"Integer, Text",
					"->",
					"Value 2 of the option"
				]
			],
			"Summary": "The **SET PRINT OPTION** command is used to modify, by programming, the value of a print option."
		},
		"SET PRINT PREVIEW": {
			"Syntax": "**SET PRINT PREVIEW** ( *preview* )",
			"Params": [
				[
					"preview",
					"Boolean",
					"->",
					"Preview on screen (TRUE), or No preview (FALSE)"
				]
			],
			"Summary": "**SET PRINT PREVIEW** allows you to programmatically check or uncheck the Preview on Screen option of the Print dialog box."
		},
		"SET PRINTABLE MARGIN": {
			"Syntax": "**SET PRINTABLE MARGIN** ( *left* ; *top* ; *right* ; *bottom* )",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"Left margin"
				],
				[
					"top",
					"Integer",
					"->",
					"Top margin"
				],
				[
					"right",
					"Integer",
					"->",
					"Right margin"
				],
				[
					"bottom",
					"Integer",
					"->",
					"Bottom margin"
				]
			],
			"Summary": "The **SET PRINTABLE MARGIN** command sets the values of various printing margins by using the Print form, PRINT SELECTION and PRINT RECORD commands."
		},
		"SET PROCESS VARIABLE": {
			"Syntax": "**SET PROCESS VARIABLE** ( *process* ; *dstVar* ; *expr* {; *dstVar2* ; *expr2* ; ... ; *dstVarN* ; *exprN*} )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Destination process number"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"Destination variable"
				],
				[
					"expr",
					"Variable",
					"->",
					"Source expression (or source variable)"
				]
			],
			"Summary": "The **SET PROCESS VARIABLE** command writes the *dstVar* process variables (*dstVar2*, etc.) of the destination process whose number is passed in *process* using the values passed in *expr1* (*expr2*, etc.)."
		},
		"SET QUERY AND LOCK": {
			"Syntax": "**SET QUERY AND LOCK** ( *lock* )",
			"Params": [
				[
					"lock",
					"Boolean",
					"->",
					"True = Lock the records found by queries False = Do not lock records"
				]
			],
			"Summary": "The **SET QUERY AND LOCK** command can be used to request the automatic locking of records found by all queries that follow the calling of this command in the current transaction."
		},
		"SET QUERY DESTINATION": {
			"Syntax": "**SET QUERY DESTINATION** ( *destinationType* {; *destinationObject* {; *destinationPtr*}} )",
			"Params": [
				[
					"destinationType",
					"Integer",
					"->",
					"0 = current selection, 1 = set, 2 = named selection, 3 = variable"
				],
				[
					"destinationObject",
					"Text, Variable",
					"->",
					"Name of the set, or Name of the named selection, or Variable"
				],
				[
					"destinationPtr",
					"Pointer",
					"->",
					"Pointer to local variable if destinationType=3"
				]
			],
			"Summary": "**SET QUERY DESTINATION** enables you to tell 4D where to put the result of any subsequent query for the current process."
		},
		"SET QUERY LIMIT": {
			"Syntax": "**SET QUERY LIMIT** ( *limit* )",
			"Params": [
				[
					"limit",
					"Integer",
					"->",
					"Number of records, or 0 for no limit"
				]
			],
			"Summary": "**SET QUERY LIMIT** allows you to tell 4D to stop any subsequent query for the current process as soon as at least the number of records you pass in *limit* has been found."
		},
		"SET REAL COMPARISON LEVEL": {
			"Syntax": "**SET REAL COMPARISON LEVEL** ( *epsilon* )",
			"Params": [
				[
					"epsilon",
					"Real",
					"->",
					"Epsilon value for real equality comparisons"
				]
			],
			"Summary": "The **SET REAL COMPARISON LEVEL** command sets the epsilon value used by 4D to compare real values and expressions for equality."
		},
		"SET RECENT FONTS": {
			"Syntax": "**SET RECENT FONTS** ( *fontsArray* )",
			"Params": [
				[
					"fontsArray",
					"Text array",
					"->",
					"Array of font names"
				]
			],
			"Summary": "The **SET RECENT FONTS** command modifies the list of fonts displayed in the context menu of the \"recent fonts\"."
		},
		"SET TABLE CACHE PRIORITY": {
			"Syntax": "**SET TABLE CACHE PRIORITY** ( *aTable* ; *priority* )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table whose scalar data priority value has to be set for the session"
				],
				[
					"priority",
					"Integer",
					"->",
					"Cache priority value for scalar values in the table"
				]
			],
			"Summary": "This command is reserved for specific needs."
		},
		"SET TABLE TITLES": {
			"Syntax": "**SET TABLE TITLES** {( *tableTitles* ; *tableNumbers* {; *})}",
			"Params": [
				[
					"tableTitles",
					"Text array",
					"->",
					"Table names as they must appear in dialog boxes"
				],
				[
					"tableNumbers",
					"Array integer",
					"->",
					"Actual table numbers"
				],
				[
					"*",
					"Operator",
					"->",
					"Use the custom names in the formula editor"
				]
			],
			"Summary": "**SET TABLE TITLES** lets you mask, rename, and reorder the tables of your database that appear in standard 4D dialog boxes within the Application environment (i.e. when the startup mode is **Application**, or after you select **Test application** in the **Run** menu)."
		},
		"SET TEXT TO PASTEBOARD": {
			"Syntax": "**SET TEXT TO PASTEBOARD** ( *text* )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Text to be put into the pasteboard"
				]
			],
			"Summary": "**SET TEXT TO PASTEBOARD** clears the pasteboard and then puts a copy of the text you passed in *text* into the pasteboard."
		},
		"SET TIMEOUT": {
			"Syntax": "**SET TIMEOUT** ( *seconds* )",
			"Params": [
				[
					"seconds",
					"Integer",
					"->",
					"Seconds until the timeout"
				]
			],
			"Summary": "**SET TIMEOUT** specifies how much time a serial port command has to complete."
		},
		"SET TIMER": {
			"Syntax": "**SET TIMER** ( *tickCount* )",
			"Params": [
				[
					"tickCount",
					"Integer",
					"->",
					"Tickcount or -1=Trigger as soon as possible"
				]
			],
			"Summary": "The **SET TIMER** command activates the On Timer form event and sets, for the current form and process, the number of ticks elapsed between each On Timer form event."
		},
		"SET UPDATE FOLDER": {
			"Syntax": "**SET UPDATE FOLDER** ( *folderPath* {; *silentErrors*} )",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"Pathname of folder (package under macOS) containing updated application"
				],
				[
					"silentErrors",
					"Boolean",
					"->",
					"False (default) = report errors visibly, <br/>True = do not report them"
				]
			],
			"Summary": "The **SET UPDATE FOLDER** command specifies the folder containing the update of the current merged 4D application."
		},
		"SET USER ALIAS": {
			"Syntax": "**SET USER ALIAS** ( *alias* )",
			"Params": [
				[
					"alias",
					"Text",
					"->",
					"Alternate user name for 4D user account or \"\" to reset"
				]
			],
			"Summary": "The **SET USER ALIAS** command defines an alternate, custom name to use in place of the current 4D user account name for the current session."
		},
		"Set user properties": {
			"Syntax": "**Set user properties** ( *userID* ; *name* ; *startup* ; *password* ; *nbLogin* ; *lastLogin* {; *memberships* {; *groupOwner*}} ) : Integer",
			"Params": [
				[
					"userID",
					"Integer",
					"->",
					"Unique ID number of user account, -1 for adding a user"
				],
				[
					"<-",
					"Unique ID number of added user account (if any)"
				],
				[
					"name",
					"Text",
					"->",
					"New user name"
				],
				[
					"startup",
					"Text",
					"->",
					"Name of new user startup method"
				],
				[
					"password",
					"Text",
					"->",
					"New (unencrypted) password, or * to leave the password unchanged"
				],
				[
					"nbLogin",
					"Integer",
					"->",
					"New number of logins to the database (Binary databases only)"
				],
				[
					"lastLogin",
					"Date",
					"->",
					"New date of last login to the database (Binary databases only)"
				],
				[
					"memberships",
					"Array integer",
					"->",
					"ID numbers of groups to which the user belongs"
				],
				[
					"groupOwner",
					"Integer",
					"->",
					"Reference number of user group owner (Binary databases only)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Unique ID number of new user"
				]
			],
			"Summary": "Set user properties lets you change and update the properties of an existing user account whose unique user ID number you pass in *userID*, or add a new user."
		},
		"SET WINDOW RECT": {
			"Syntax": "**SET WINDOW RECT** ( *left* ; *top* ; *right* ; *bottom* {; *window*}{; *} )",
			"Params": [
				[
					"left",
					"Integer",
					"->",
					"Global left coordinate of window's contents area"
				],
				[
					"top",
					"Integer",
					"->",
					"Global top coordinate of window's contents area"
				],
				[
					"right",
					"Integer",
					"->",
					"Global right coordinate of window's contents area"
				],
				[
					"bottom",
					"Integer",
					"->",
					"Global bottom coordinate of window's contents area"
				],
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				],
				[
					"*",
					"Operator",
					"->",
					"If omitted (default) = change window to foreground<br/>If passed = do not change the level of the window"
				]
			],
			"Summary": "The SET WINDOW RECT command changes the global coordinates of the window whose reference number is passed in *window*."
		},
		"SET WINDOW TITLE": {
			"Syntax": "**SET WINDOW TITLE** ( *title* {; *window*} )",
			"Params": [
				[
					"title",
					"Text",
					"->",
					"Window title"
				],
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				]
			],
			"Summary": "The **SET WINDOW TITLE** command changes the title of the window whose reference number is passed in *window* to the text passed in *title* (max. length 80 characters)."
		},
		"Shift down": {
			"Syntax": "**Shift down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Shift key"
				]
			],
			"Summary": "Shift down returns TRUE if the Shift key is pressed."
		},
		"SHOW MENU BAR": {
			"Syntax": "**SHOW MENU BAR**",
			"Params": [],
			"Summary": "The SHOW MENU BAR command makes the menu bar visible."
		},
		"SHOW ON DISK": {
			"Syntax": "**SHOW ON DISK** ( *pathname* {; *} )",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"Pathname of item to show"
				],
				[
					"*",
					"Operator",
					"->",
					"If the item is a folder, show its contents"
				]
			],
			"Summary": "The SHOW ON DISK command displays the file or folder whose pathname was passed in the *pathname* parameter in a standard window of the operating system."
		},
		"SHOW PROCESS": {
			"Syntax": "**SHOW PROCESS** ( *process* )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Process number of process to be shown"
				]
			],
			"Summary": "**SHOW PROCESS** displays all the windows belonging to *process*."
		},
		"SHOW TOOL BAR": {
			"Syntax": "**SHOW TOOL BAR**",
			"Params": [],
			"Summary": "The **SHOW TOOL BAR** command handles the display of custom toolbars created by the Open form window command for the current process."
		},
		"SHOW WINDOW": {
			"Syntax": "**SHOW WINDOW** {( *window* )}",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number or Current process frontmost window, if omitted"
				]
			],
			"Summary": "The **SHOW WINDOW** command displays the window whose number was passed in *window*."
		},
		"Sin": {
			"Syntax": "**Sin** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number, in radians, whose sine is returned"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Sine of number"
				]
			],
			"Summary": "**Sin** returns the sine of *number*, where *number* is expressed in radians."
		},
		"Size of array": {
			"Syntax": "**Size of array** ( *array* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array whose size is returned"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Returns the number of elements in array"
				]
			],
			"Summary": "The Size of array command returns the number of elements in *array*."
		},
		"SOAP DECLARATION": {
			"Syntax": "**SOAP DECLARATION** ( *variable* ; *type* ; input_output {; *alias*} )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable referring to an incoming or outgoing SOAP argument"
				],
				[
					"type",
					"Integer",
					"->",
					"4D type to which the argument points"
				],
				[
					"input_output",
					"Integer",
					"->",
					"1 = SOAP Input, 2 = SOAP Output"
				],
				[
					"alias",
					"Text",
					"->",
					"Name published for this argument during SOAP exchanges"
				]
			],
			"Summary": "The SOAP DECLARATION command explicitly declares the type of parameters used in a 4D method published as a Web Service."
		},
		"SOAP Get info": {
			"Syntax": "**SOAP Get info** ( *infoNum* ) : Text",
			"Params": [
				[
					"infoNum",
					"Integer",
					"->",
					"Number of type of SOAP info to get"
				],
				[
					"Function result",
					"Text",
					"<-",
					"SOAP Information"
				]
			],
			"Summary": "The **SOAP Get info** command retrieves, in the form of a character string, the different types of information concerning a SOAP request."
		},
		"SOAP REJECT NEW REQUESTS": {
			"Syntax": "**SOAP REJECT NEW REQUESTS** ( *rejectStatus* )",
			"Params": [
				[
					"rejectStatus",
					"Boolean",
					"->",
					"True if new requests are rejected, else false"
				]
			],
			"Summary": "The **SOAP REJECT NEW REQUESTS** command specifies whether or not the Web Services server accepts new SOAP requests."
		},
		"SOAP Request": {
			"Syntax": "**SOAP Request**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the request is SOAP; otherwise, False"
				]
			],
			"Summary": "The **SOAP Request** command returns **True** if the code being executed is part of a SOAP request."
		},
		"SOAP SEND FAULT": {
			"Syntax": "**SOAP SEND FAULT** ( *faultType* ; *description* )",
			"Params": [
				[
					"faultType",
					"Integer",
					"->",
					"1 = Client fault, 2 = Server fault"
				],
				[
					"description",
					"Text",
					"->",
					"Description of error to be sent to SOAP client"
				]
			],
			"Summary": "The **SOAP SEND FAULT** command returns an error to a SOAP client indicating the origin of the fault: client or server."
		},
		"SORT ARRAY": {
			"Syntax": "**SORT ARRAY** ( *array* {; *array2* ; ... ; *arrayN*}{; > or <} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Arrays to sort"
				],
				[
					"> or <",
					"Operator",
					"->",
					"\">\" to sort in Ascending order, or \"<\" to sort in Descending order, or Ascending order if omitted"
				]
			],
			"Summary": "The SORT ARRAY command sorts one or more arrays into ascending or descending order."
		},
		"SORT LIST": {
			"Syntax": "**SORT LIST** ( *list* {; > or <} )",
			"Params": [
				[
					"list",
					"Integer",
					"->",
					"List reference number"
				],
				[
					"> or <",
					"Operator",
					"->",
					"Sorting order: > to sort in ascending order, or < to sort in descending order"
				]
			],
			"Summary": "The **SORT LIST** command sorts the list whose reference number is passed in *list*."
		},
		"SPELL ADD TO USER DICTIONARY": {
			"Syntax": "**SPELL ADD TO USER DICTIONARY** ( *words* )",
			"Params": [
				[
					"words",
					"Text, Text array",
					"->",
					"Word or list of words to add to user dictionary"
				]
			],
			"Summary": "The **SPELL ADD TO USER DICTIONARY** command adds one or more words to the current user dictionary."
		},
		"SPELL CHECK TEXT": {
			"Syntax": "**SPELL CHECK TEXT** ( *text* ; *errPos* ; *errLength* ; *checkPos* ; *arrSuggest* )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Text to check"
				],
				[
					"errPos",
					"Integer",
					"<-",
					"Position of first character of unknown word"
				],
				[
					"errLength",
					"Integer",
					"<-",
					"Length of unknown word"
				],
				[
					"checkPos",
					"Integer",
					"->",
					"Start position for check"
				],
				[
					"arrSuggest",
					"Text array",
					"<-",
					"List of suggestions"
				]
			],
			"Summary": "The **SPELL CHECK TEXT** command checks the contents of the *text* parameter beginning from the *checkPos* character and returns the position of the first unknown word it finds (if any)."
		},
		"SPELL CHECKING": {
			"Syntax": "**SPELL CHECKING**",
			"Params": [],
			"Summary": "The **SPELL CHECKING** command triggers the spell check of the field or variable having the focus in the currently displayed form."
		},
		"SPELL Get current dictionary": {
			"Syntax": "**SPELL Get current dictionary**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"ID of dictionary used for spell check"
				]
			],
			"Summary": "The **SPELL Get current dictionary** command returns the ID number of the dictionary being used."
		},
		"SPELL GET DICTIONARY LIST": {
			"Syntax": "**SPELL GET DICTIONARY LIST** ( *langID* ; *langFiles* ; *langNames* )",
			"Params": [
				[
					"langID",
					"Array integer",
					"<-",
					"Unique ID of languages"
				],
				[
					"langFiles",
					"Text array",
					"<-",
					"Names of language files installed"
				],
				[
					"langNames",
					"Text array",
					"<-",
					"Local names of languages"
				]
			],
			"Summary": "The **SPELL GET DICTIONARY LIST** command returns, in the *langID*, *langFiles* and *langNames* arrays, the IDs, file names and language names corresponding to the Hunspell dictionary files installed on the machine."
		},
		"SPELL SET CURRENT DICTIONARY": {
			"Syntax": "**SPELL SET CURRENT DICTIONARY** ( *dictionary* )",
			"Params": [
				[
					"dictionary",
					"Integer, Text",
					"->",
					"ID, Name, or Language code of dictionary to use for spell-check"
				]
			],
			"Summary": "The **SPELL SET CURRENT DICTIONARY** command causes the replacement of the current dictionary with the one specified by the *dictionary* parameter."
		},
		"Split string": {
			"Syntax": "**Split string** ( *stringToSplit* ; *separator* {; *options*} ) : Collection",
			"Params": [
				[
					"stringToSplit",
					"Text",
					"->",
					"String value"
				],
				[
					"separator",
					"Text",
					"->",
					"String at which stringToSplit splits. If empty string (\"\"), each character of stringToSplit is a substring"
				],
				[
					"options",
					"Integer",
					"->",
					"Option(s) regarding empty strings and spaces"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of substrings"
				]
			],
			"Summary": "The **Split string** command returns a collection of strings, created by splitting *stringToSplit* into substrings at the boundaries specified by the *separator* parameter."
		},
		"SQL CANCEL LOAD": {
			"Syntax": "**SQL CANCEL LOAD**",
			"Params": [],
			"Summary": "The **SQL CANCEL LOAD** command ends the current SELECT request and initializes the parameters."
		},
		"SQL End selection": {
			"Syntax": "**SQL End selection**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"Result set boundaries reached"
				]
			],
			"Summary": "The SQL End selection command is used to determine if the boundaries of the result set have been reached."
		},
		"SQL EXECUTE SCRIPT": {
			"Syntax": "**SQL EXECUTE SCRIPT** ( *scriptPath* ; *errorAction* {; *attribName* ; *attribValue*} {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"scriptPath",
					"Text",
					"->",
					"Complete pathname of file containing SQL script to execute"
				],
				[
					"errorAction",
					"Integer",
					"->",
					"Action to carry out in case of error during script execution"
				],
				[
					"attribName",
					"Text",
					"->",
					"Name of attribute to use"
				],
				[
					"attribValue",
					"Text",
					"->",
					"Value of attribute"
				]
			],
			"Summary": "The **SQL EXECUTE SCRIPT** command is used to execute a series of SQL statements placed in the script file designated by *scriptPath*."
		},
		"SQL EXECUTE": {
			"Syntax": "**SQL EXECUTE** ( *sqlStatement* {; *boundObj*}{; *boundObj2* ; ... ; *boundObjN*} )",
			"Params": [
				[
					"sqlStatement",
					"Text",
					"->",
					"SQL command to execute"
				],
				[
					"boundObj",
					"Variable, Field",
					"<-",
					"Receives result (if necessary)"
				]
			],
			"Summary": "The SQL EXECUTE command executes an SQL command and binds the result to 4D objects (arrays, variables or fields)."
		},
		"SQL EXPORT DATABASE": {
			"Syntax": "**SQL EXPORT DATABASE** ( *folderPath* {; *numFiles* {; *fileLimitSize* {; *fieldLimitSize*}}} )",
			"Params": [
				[
					"folderPath",
					"Text",
					"->",
					"Pathname of export folder or \"\" to display folder selection dialog box"
				],
				[
					"numFiles",
					"Integer",
					"->",
					"Maximum number of files per folder"
				],
				[
					"fileLimitSize",
					"Integer",
					"->",
					"Size limit value of export files (in KB)"
				],
				[
					"fieldLimitSize",
					"Integer",
					"->",
					"Size limit (in bytes) below which the contents of a Text, BLOB or Picture field is embedded into the main file"
				]
			],
			"Summary": "The SQL EXPORT DATABASE command exports in SQL format all the records of all the tables in the database."
		},
		"SQL EXPORT SELECTION": {
			"Syntax": "**SQL EXPORT SELECTION** ( *aTable* ; *folderPath* {; *numFiles* {; *fileLimitSize* {; *fieldLimitSize*}}} )",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table from which to export selection"
				],
				[
					"folderPath",
					"Text",
					"->",
					"Pathname of export folder or \"\" to display folder selection dialog box"
				],
				[
					"numFiles",
					"Integer",
					"->",
					"Maximum number of files per folder"
				],
				[
					"fileLimitSize",
					"Integer",
					"->",
					"Maximum size of Export.sql file (in KB)"
				],
				[
					"fieldLimitSize",
					"Integer",
					"->",
					"Size limit (in bytes) below which the contents of a Text, BLOB or Picture field are embedded into the main file"
				]
			],
			"Summary": "The **SQL EXPORT SELECTION** command exports in SQL format the records of the current selection of the 4D table designated by the *aTable* parameter."
		},
		"SQL Get current data source": {
			"Syntax": "**SQL Get current data source**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Name of current data source being used"
				]
			],
			"Summary": "The SQL Get current data source command returns the name of the current data source of the application."
		},
		"SQL GET DATA SOURCE LIST": {
			"Syntax": "**SQL GET DATA SOURCE LIST** ( *sourceType* ; *sourceNamesArr* ; *driversArr* )",
			"Params": [
				[
					"sourceType",
					"Integer",
					"->",
					"Source type: user or system"
				],
				[
					"sourceNamesArr",
					"Text array",
					"<-",
					"Array of data source names"
				],
				[
					"driversArr",
					"Text array",
					"<-",
					"Array of drivers for sources"
				]
			],
			"Summary": "The **SQL GET DATA SOURCE LIST** command returns, in the *sourceNamesArr* and *driversArr* arrays, the names and drivers of the *sourceType* type data sources defined in the ODBC manager of the operating system."
		},
		"SQL GET LAST ERROR": {
			"Syntax": "**SQL GET LAST ERROR** ( *errCode* ; *errText* ; *errODBC* ; *errSQLServer* )",
			"Params": [
				[
					"errCode",
					"Integer",
					"<-",
					"Error code"
				],
				[
					"errText",
					"Text",
					"<-",
					"Error text"
				],
				[
					"errODBC",
					"Text",
					"<-",
					"ODBC error code"
				],
				[
					"errSQLServer",
					"Integer",
					"<-",
					"SQL server native error code"
				]
			],
			"Summary": "The SQL GET LAST ERROR command returns information related to the last error encountered during the execution of an ODBC command."
		},
		"SQL GET OPTION": {
			"Syntax": "**SQL GET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Option number"
				],
				[
					"value",
					"Integer, Text",
					"<-",
					"Option value"
				]
			],
			"Summary": "The **SQL GET OPTION** command returns the current *value* of the option passed in *option*."
		},
		"SQL LOAD RECORD": {
			"Syntax": "**SQL LOAD RECORD** {( *numRecords* )}",
			"Params": [
				[
					"numRecords",
					"Integer",
					"->",
					"Number of records to load"
				]
			],
			"Summary": "The SQL LOAD RECORD command retrieves one or more record(s) in 4D coming from the data source open in the current connection."
		},
		"SQL LOGIN": {
			"Syntax": "**SQL LOGIN** {( *dataEntry* ; *userName* ; *password* ; * )}",
			"Params": [
				[
					"dataEntry",
					"Text",
					"->",
					"Publication name of 4D database or IP address of remote database or Name of the data source entry in the ODBC Manager or \"\" to display the selection dialog box"
				],
				[
					"userName",
					"Text",
					"->",
					"Name of the user registered in the data source"
				],
				[
					"password",
					"Text",
					"->",
					"Password of the user registered in the data source"
				],
				[
					"*",
					"Operator",
					"->",
					"Applied to Begin SQL/End SQL If omitted: do not apply (local database); if passed: apply"
				]
			],
			"Summary": "The **SQL LOGIN** command allows you to connect to an SQL data source specified in the *dataEntry* parameter."
		},
		"SQL LOGOUT": {
			"Syntax": "**SQL LOGOUT**",
			"Params": [],
			"Summary": "The SQL LOGOUT command closes the connection with an ODBC source that is open in the current process (if applicable)."
		},
		"SQL SET OPTION": {
			"Syntax": "**SQL SET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Number of option to set"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"New value of option"
				]
			],
			"Summary": "The **SQL SET OPTION** command modifies the *value* of the option passed in *option*."
		},
		"SQL SET PARAMETER": {
			"Syntax": "**SQL SET PARAMETER** ( *object* ; *paramType* )",
			"Params": [
				[
					"object",
					"Object",
					"->",
					"4D object to be used (variable, array or field)"
				],
				[
					"paramType",
					"Integer",
					"->",
					"Type of parameter"
				]
			],
			"Summary": "The SQL SET PARAMETER command allows the use of a 4D variable, array or field value in SQL requests."
		},
		"Square root": {
			"Syntax": "**Square root** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number whose square root is calculated"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Square root of the number"
				]
			],
			"Summary": "Square root returns the square root of *number*."
		},
		"ST COMPUTE EXPRESSIONS": {
			"Syntax": "**ST COMPUTE EXPRESSIONS** ( {* ;} *object* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				]
			],
			"Summary": "The **ST COMPUTE EXPRESSIONS** command updates the dynamic 4D expressions found in the multi-style or 4D Write Pro field or variable designated by the *object* parameter."
		},
		"ST FREEZE EXPRESSIONS": {
			"Syntax": "**ST FREEZE EXPRESSIONS** ( {* ;} *object* {; *startSel* {; *endSel*}}{; *} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or<br/>Field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = update expressions before freezing them"
				]
			],
			"Summary": "The **ST FREEZE EXPRESSIONS** command \"freezes\" the contents of expressions found in the multi-style text or 4D Write Pro field or variable designated by the *object* parameter."
		},
		"ST GET ATTRIBUTES": {
			"Syntax": "**ST GET ATTRIBUTES** ( {* ;} *object* ; *startSel* ; *endSel* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of text selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of text selection"
				],
				[
					"attribName",
					"Integer",
					"->",
					"Attribute to get"
				],
				[
					"attribValue",
					"Variable",
					"<-",
					"Current value of attribute"
				]
			],
			"Summary": "The ST GET ATTRIBUTES command is used to recover the current value of a style attribute in a selection of text of the form object(s) designated by *object*."
		},
		"ST Get content type": {
			"Syntax": "**ST Get content type** ( {* ;} *object* {; *startSel* {; *endSel* {; *startBlock* {; *endBlock*}}}} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				],
				[
					"startBlock",
					"Integer",
					"<-",
					"Start position of first type of selection"
				],
				[
					"endBlock",
					"Integer",
					"<-",
					"End position of first type of selection"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Type of content"
				]
			],
			"Summary": "The **ST Get content type** command returns the type of content found in the styled text field or variable designated by the *object* parameter."
		},
		"ST Get expression": {
			"Syntax": "**ST Get expression** ( {* ;} *object* {; *startSel* {; *endSel*}} )  : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Expression label"
				]
			],
			"Summary": "The **ST Get expression** command returns the first expression found in the current selection of the styled text field or variable designated by the *object* parameter."
		},
		"ST GET OPTIONS": {
			"Syntax": "**ST GET OPTIONS** ( {* ;} *object* ; *option* ; *value* {; *option2* ; *value2* ; ... ; *optionN* ; *valueN*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"option",
					"Integer",
					"->",
					"Option to get"
				],
				[
					"value",
					"Integer",
					"<-",
					"Current value of option"
				]
			],
			"Summary": "The **ST GET OPTIONS** command gets the current value of one or more operating options for the styled text field or variable designated by the *object* parameter."
		},
		"ST Get plain text": {
			"Syntax": "**ST Get plain text** ( {* ;} *object* {; *refMode*} ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"refMode",
					"Integer",
					"->",
					"Mode for handling references found in the text"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Text without tags"
				]
			],
			"Summary": "The ST Get plain text command removes any style tags from the text variable or field designated by the *\\** and *object* parameters and returns the plain text."
		},
		"ST Get text": {
			"Syntax": "**ST Get text** ( {* ;} *object* {; *startSel* {; *endSel*}} )  : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Text field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Text including style tags"
				]
			],
			"Summary": "The ST Get text command returns the styled text found in the text field or variable designated by the *object* parameter."
		},
		"ST GET URL": {
			"Syntax": "**ST GET URL** ( {* ;} *object* ; *urlText* ; *urlAddress* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"urlText",
					"Text",
					"<-",
					"Visible text of URL"
				],
				[
					"urlAddress",
					"Text",
					"<-",
					"URL address"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				]
			],
			"Summary": "The **ST GET URL** command returns the text label and address of the first URL detected in the styled text field or variable designated by the *object* parameter."
		},
		"ST INSERT EXPRESSION": {
			"Syntax": "**ST INSERT EXPRESSION** ( {* ;} *object* ; *expression* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"Object",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"expression",
					"Text",
					"->",
					"Expression and (optional) format to insert"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				]
			],
			"Summary": "The **ST INSERT EXPRESSION** command inserts a reference to the *expression* in the styled text field or variable designated by the *object* parameter."
		},
		"ST INSERT URL": {
			"Syntax": "**ST INSERT URL** ( {* ;} *object* ; *urlText* ; *urlAddress* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"urlText",
					"Text",
					"->",
					"Visible text of URL"
				],
				[
					"urlAddress",
					"Text",
					"->",
					"URL address"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				]
			],
			"Summary": "The **ST INSERT URL** command inserts a URL link in the styled text field or variable designated by the *object* parameter."
		},
		"ST SET ATTRIBUTES": {
			"Syntax": "**ST SET ATTRIBUTES** ( {* ;} *object* ; *startSel* ; *endSel* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Text field or variable (if * is omitted)"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of new text selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of new text selection"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute to set"
				],
				[
					"attribValue",
					"Text, Integer",
					"->",
					"New value of attribute"
				]
			],
			"Summary": "The ST SET ATTRIBUTES command can be used to modify one or more style attributes in the form object(s) designated by *object*."
		},
		"ST SET OPTIONS": {
			"Syntax": "**ST SET OPTIONS** ( {* ;} *object* ; *option* ; *value* {; *option2* ; *value2* ; ... ; *optionN* ; *valueN*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Field or variable (if * is omitted)"
				],
				[
					"option",
					"Integer",
					"->",
					"Option to set"
				],
				[
					"value",
					"Integer",
					"->",
					"New value of option"
				]
			],
			"Summary": "The **ST SET OPTIONS** command modifies one or more operating options for the styled text field or variable designated by the *object* parameter."
		},
		"ST SET PLAIN TEXT": {
			"Syntax": "**ST SET PLAIN TEXT** ( {* ;} *object* ; *newText* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Variable or field (if * is omitted)"
				],
				[
					"newText",
					"Text",
					"->",
					"Text to insert"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				]
			],
			"Summary": "The ST SET PLAIN TEXT command inserts the text passed in the *newText* parameter into the styled text field or variable designated by the *object* parameter."
		},
		"ST SET TEXT": {
			"Syntax": "**ST SET TEXT** ( {* ;} *object* ; *newText* {; *startSel* {; *endSel*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) <br/>If omitted, object is a variable or a field"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or <br/>Text field or variable (if * is omitted)"
				],
				[
					"newText",
					"Text",
					"->",
					"Text to insert"
				],
				[
					"startSel",
					"Integer",
					"->",
					"Start of selection"
				],
				[
					"endSel",
					"Integer",
					"->",
					"End of selection"
				]
			],
			"Summary": "The ST SET TEXT command inserts the text passed in the *newText* parameter into the styled text field or variable designated by the *object* parameter."
		},
		"START MONITORING ACTIVITY": {
			"Syntax": "**START MONITORING ACTIVITY** ( *duration* {; *source*} )",
			"Params": [
				[
					"duration",
					"Real",
					"->",
					"Length of time (in seconds) before logging begins"
				],
				[
					"source",
					"Integer",
					"->",
					"Origin of an operation"
				]
			],
			"Summary": "The **START MONITORING ACTIVITY** command records operations exceeding a specified *duration* in memory."
		},
		"START SQL SERVER": {
			"Syntax": "**START SQL SERVER**",
			"Params": [],
			"Summary": "The START SQL SERVER command launches the integrated SQL server in the 4D application where it has been executed."
		},
		"START TRANSACTION": {
			"Syntax": "**START TRANSACTION**",
			"Params": [],
			"Summary": "START TRANSACTION starts a transaction in the current process."
		},
		"Std deviation": {
			"Syntax": "**Std deviation** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the standard deviation"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Standard deviation of series"
				]
			],
			"Summary": "**Std deviation** returns the standard deviation of *series*."
		},
		"STOP MONITORING ACTIVITY": {
			"Syntax": "**STOP MONITORING ACTIVITY**",
			"Params": [],
			"Summary": "The **STOP MONITORING ACTIVITY** command stops tracking activity started with the START MONITORING ACTIVITY command."
		},
		"STOP SQL SERVER": {
			"Syntax": "**STOP SQL SERVER**",
			"Params": [],
			"Summary": "The STOP SQL SERVER command stops the integrated SQL server in the 4D application where it has been executed."
		},
		"Storage": {
			"Syntax": "**Storage**  : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"Catalog of shared objects and shared collections registered in Storage"
				]
			],
			"Summary": "The **Storage** method returns the catalog of shared objects or shared collections that you have registered in the *Storage* object on the current machine or component."
		},
		"STRING LIST TO ARRAY": {
			"Syntax": "**STRING LIST TO ARRAY** ( *resID* ; *strings* {; *resFile*} )",
			"Params": [
				[
					"resID",
					"Integer",
					"->",
					"Resource ID number or 'id' attribute of the 'group' element (XLIFF)"
				],
				[
					"strings",
					"Text array",
					"<-",
					"Strings from the STR# resource or Strings from the 'group' element (XLIFF)"
				],
				[
					"resFile",
					"Time",
					"->",
					"Resource file reference number If omitted: all the XLIFF files or open resources files"
				]
			],
			"Summary": "The **STRING LIST TO ARRAY** command populates the array *strings*"
		},
		"String": {
			"Syntax": "**String** ( *expression* {; *format* {; *addTime*}} ) : Text",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"Expression for which to return the string form (can be Real, Integer, Long Integer, Date, Time, String, Text, Boolean, Undefined, or Null)"
				],
				[
					"format",
					"Integer, Text",
					"->",
					"Display format"
				],
				[
					"addTime",
					"Time",
					"->",
					"Time to add on if expression is a date"
				],
				[
					"Function result",
					"Text",
					"<-",
					"String form of the expression"
				]
			],
			"Summary": "The String command returns the string form of the numeric, Date, Time, string or Boolean expression you pass in *expression*."
		},
		"Structure file": {
			"Syntax": "**Structure file** {( * )} : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"Returns structure file of host database"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Long name of the database structure file"
				]
			],
			"Summary": "The **Structure file** command returns the pathname of the structure file for the database with which you are currently working."
		},
		"Substring": {
			"Syntax": "**Substring** ( *source* ; *firstChar* {; *numChars*} ) : Text",
			"Params": [
				[
					"source",
					"Text",
					"->",
					"String from which to get substring"
				],
				[
					"firstChar",
					"Integer",
					"->",
					"Position of first character"
				],
				[
					"numChars",
					"Integer",
					"->",
					"Number of characters to get"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Substring of source"
				]
			],
			"Summary": "The **Substring** command returns the portion of *source* defined by *firstChar* and *numChars*."
		},
		"Subtotal": {
			"Syntax": "**Subtotal** ( *data* {; *pageBreak*} ) : Real",
			"Params": [
				[
					"data",
					"Field",
					"->",
					"Numeric field or variable to return subtotal"
				],
				[
					"pageBreak",
					"Integer",
					"->",
					"Break level for which to cause a page break"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Subtotal of data"
				]
			],
			"Summary": "**Subtotal** returns the subtotal for *data* for the current or last break level."
		},
		"Sum squares": {
			"Syntax": "**Sum squares** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the sum of squares"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Sum of squares of series"
				]
			],
			"Summary": "**Sum squares** returns the sum of the squares of *series*."
		},
		"Sum": {
			"Syntax": "**Sum** ( *series* {; *attributePath*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the sum"
				],
				[
					"attributePath",
					"Text",
					"->",
					"Path of attribute for which to return the sum"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Sum for series"
				]
			],
			"Summary": "The **Sum** command returns the sum (total of all values) for *series*."
		},
		"SUSPEND TRANSACTION": {
			"Syntax": "**SUSPEND TRANSACTION**",
			"Params": [],
			"Summary": "The **SUSPEND TRANSACTION** command pauses the current transaction in the current process."
		},
		"SVG EXPORT TO PICTURE": {
			"Syntax": "**SVG EXPORT TO PICTURE** ( *elementRef* ; *pictVar* {; *exportType*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Root XML element reference"
				],
				[
					"pictVar",
					"Picture",
					"->",
					"Picture variable to receive XML tree (SVG picture)"
				],
				[
					"exportType",
					"Integer",
					"->",
					"0 = Do not store data source, 1 = Copy data source (default), 2 = Own data source"
				]
			],
			"Summary": "The **SVG EXPORT TO PICTURE** command saves an SVG format picture contained in an XML tree in the picture field or variable indicated by the *pictVar* parameter."
		},
		"SVG Find element ID by coordinates": {
			"Syntax": "**SVG Find element ID by coordinates** ( {* ;} *pictureObject* ; *x* ; *y* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, pictureObject is an object name (string) If omitted, pictureObject is a field or variable"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"Object name (if * specified) or Field or Variable (if * omitted)"
				],
				[
					"x",
					"Integer",
					"->",
					"X coordinate in pixels"
				],
				[
					"y",
					"Integer",
					"->",
					"Y coordinate in pixels"
				],
				[
					"Function result",
					"Text",
					"<-",
					"ID of element found at the location X, Y"
				]
			],
			"Summary": "The **SVG Find element ID by coordinates** command returns the ID (\"id\" or \"xml:id\" attribute) of the XML element found at the location set by the coordinates (x,y) in the SVG picture designated by the *pictureObject* parameter."
		},
		"SVG Find element IDs by rect": {
			"Syntax": "**SVG Find element IDs by rect** ( {* ;} *pictureObject* ; *x* ; *y* ; *width* ; *height* ; *arrIDs* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, pictureObject is an object name (string) <br/>If omitted, pictureObject is a variable"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"Object name (if * specified) or <br/>Field or variable (if * omitted)"
				],
				[
					"x",
					"Integer",
					"->",
					"Horizontal coordinate of top left corner of selection rectangle"
				],
				[
					"y",
					"Integer",
					"->",
					"Vertical coordinate of top left corner of selection rectangle"
				],
				[
					"width",
					"Integer",
					"->",
					"Width of selection rectangle"
				],
				[
					"height",
					"Integer",
					"->",
					"Height of selection rectangle"
				],
				[
					"arrIDs",
					"Text array",
					"<-",
					"IDs of elements whose bounding rectangle intersects with the selection rectangle"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = at least one element is found"
				]
			],
			"Summary": "The **SVG Find element IDs by rect** command fills the Text or Alpha *arrIDs* array with the IDs (\"id\" or \"xml:id\" attribute) of the XML elements whose bounding rectangle intersects with the selection rectangle at the location specified by the *x* and *y* parameters."
		},
		"SVG GET ATTRIBUTE": {
			"Syntax": "**SVG GET ATTRIBUTE** ( {* ;} *pictureObject* ; element_ID ; *attribName* ; *attribValue* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, pictureObject is an object name (string) <br/>If omitted, pictureObject is a variable"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"Object name (if * specified) or <br/>Variable or field (if * omitted)"
				],
				[
					"element_ID",
					"Text",
					"->",
					"ID of element whose attribute value you want to get"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute whose value you want to get"
				],
				[
					"attribValue",
					"Text, Integer",
					"<-",
					"Current value of attribute"
				]
			],
			"Summary": "The SVG GET ATTRIBUTE command is used to get the current value of the *attribName* attribute in an object or an SVG picture."
		},
		"SVG SET ATTRIBUTE": {
			"Syntax": "**SVG SET ATTRIBUTE** ( {* ;} *pictureObject* ; element_ID ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} {; *})",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, pictureObject is an object name (string) <br/>If omitted, pictureObject is a variable"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"Object name (if * specified) or <br/>Variable or field (if * omitted)"
				],
				[
					"element_ID",
					"Text",
					"->",
					"ID of element where one or more attributes are set"
				],
				[
					"attribName",
					"Text",
					"->",
					"Attribute to be specified"
				],
				[
					"attribValue",
					"Text, Integer",
					"->",
					"New value of attribute"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = modify SVG image itself"
				]
			],
			"Summary": "The **SVG SET ATTRIBUTE** command is used to modify the value of an existing attribute in the SVG rendering tree of a displayed image or in the internal DOM tree of an image."
		},
		"SVG SHOW ELEMENT": {
			"Syntax": "**SVG SHOW ELEMENT** ( {* ;} *pictureObject* ; *id* {; *margin*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, pictureObject is an object name (string) <br/>If omitted, pictureObject is a variable"
				],
				[
					"pictureObject",
					"Picture",
					"->",
					"Object name (if * specified) or <br/>Variable or field (if * omitted)"
				],
				[
					"id",
					"Text",
					"->",
					"ID attribute of element to display"
				],
				[
					"margin",
					"Integer",
					"->",
					"Margin of visibility (in pixels by default)"
				]
			],
			"Summary": "The SVG SHOW ELEMENT command moves the *pictureObject* SVG document in order to show the element whose \"id\" attribute is specified by the *id* parameter."
		},
		"System folder": {
			"Syntax": "**System folder** {( *type* )} : Text",
			"Params": [
				[
					"type",
					"Integer",
					"->",
					"Type of system folder"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Pathname to a system folder"
				]
			],
			"Summary": "The **System folder** command returns the pathname to a particular folder of the operating system or to the active Windows or macOS System folder itself."
		},
		"System info": {
			"Syntax": "**System info**  : Object",
			"Params": [
				[
					"Function result",
					"Object",
					"<-",
					"System information"
				]
			],
			"Summary": "The **System info** command returns an object containg information about the operating system and the characteristics of the system hardware and software from the machine it's executed on."
		},
		"Table fragmentation": {
			"Syntax": "**Table fragmentation** ( *aTable* ) : Real",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to get the fragmentation rate"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Percentage of fragmentation"
				]
			],
			"Summary": "The Table fragmentation command returns the percentage of logical fragmentation for the records of the table designated by the *aTable* parameter."
		},
		"Table name": {
			"Syntax": "**Table name** ( *tableNum* ) : Text<br/>**Table name** ( *tablePtr* ) : Text",
			"Params": [
				[
					"tableNum &#124; tablePtr",
					"Integer, Pointer",
					"->",
					"Table number or Table pointer"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Name of the table"
				]
			],
			"Summary": "The Table name command returns the name of the table whose number or pointer you pass in *tableNum* or *tablePtr*."
		},
		"Table": {
			"Syntax": "**Table** ( *tableNum* ) : Pointer<br/>**Table** ( *tablePtr* ) : Integer<br/>**Table** ( *fieldPtr* ) : Integer",
			"Params": [
				[
					"tableNum",
					"Integer",
					"->",
					"Table number"
				],
				[
					"tablePtr",
					"Pointer",
					"->",
					"Table pointer"
				],
				[
					"fieldPtr",
					"Pointer",
					"->",
					"Field pointer"
				],
				[
					"Function result",
					"any",
					"<-",
					"Table pointer, if a Table number is passed<br/>Table number if a Table pointer or a Field pointer is passed"
				]
			],
			"Summary": "The Table command has three forms:\n\n* If you pass a table number in *tableNum*, Table returns a pointer to the table."
		},
		"Tan": {
			"Syntax": "**Tan** ( *number* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number, in radians, whose tangent is returned"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Tangent of number"
				]
			],
			"Summary": "**Tan** returns the tangent of *number*, where *number* is expressed in radians."
		},
		"Temporary folder": {
			"Syntax": "**Temporary folder**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Pathname to temporary folder"
				]
			],
			"Summary": "The Temporary folder command returns the pathname to the current temporary folder set by your system."
		},
		"Test path name": {
			"Syntax": "**Test path name** ( *pathname* ) : Integer",
			"Params": [
				[
					"pathname",
					"Text",
					"->",
					"Pathname to directory, folder or document"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"1, pathname refers to an existing document 0, pathname refers to an existing directory or folder <0, invalid pathname, OS file manager error code"
				]
			],
			"Summary": "The **Test path name** function checks if a document or folder whose name or pathname you pass in *pathname* is present on the disk."
		},
		"Test semaphore": {
			"Syntax": "**Test semaphore** ( *semaphore* ) : Boolean",
			"Params": [
				[
					"semaphore",
					"Text",
					"->",
					"Name of the semaphore to test"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = the semaphore exists, False = the semaphore doesn’t exist"
				]
			],
			"Summary": "The **Test semaphore** command tests for the existence of a semaphore."
		},
		"TEXT TO ARRAY": {
			"Syntax": "**TEXT TO ARRAY** ( *varText* ; *arrText* ; *width* ; *fontName* ; *fontSize* {; *fontStyle* {; *}} )",
			"Params": [
				[
					"varText",
					"Text",
					"->",
					"Original text to be divided"
				],
				[
					"arrText",
					"Text array",
					"<-",
					"Array containing the text divided into words or lines"
				],
				[
					"width",
					"Integer",
					"->",
					"Maximum width of string (in pixels)"
				],
				[
					"fontName",
					"Text",
					"->",
					"Name of font"
				],
				[
					"fontSize",
					"Integer",
					"->",
					"Size of font"
				],
				[
					"fontStyle",
					"Integer",
					"->",
					"Style of font"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed = interpret text as multistyle"
				]
			],
			"Summary": "The **TEXT TO ARRAY** command transforms a text variable into a text array."
		},
		"TEXT TO BLOB": {
			"Syntax": "**TEXT TO BLOB** ( *text* ; *blob* {; *textFormat* {; offset}} )<br/>**TEXT TO BLOB** ( *text* ; *blob* {; *textFormat* {; *}} )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Text to write into the BLOB"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB to receive the text"
				],
				[
					"textFormat",
					"Integer",
					"->",
					"Format and character set of text"
				],
				[
					"offset &#124; *",
					"Variable, Operator",
					"<->",
					"Offset within the BLOB (expressed in bytes) or * to append the value"
				],
				[
					"",
					"",
					"",
					"New offset after writing if not *"
				]
			],
			"Summary": "The TEXT TO BLOB command writes the Text value *text* into the BLOB *blob*."
		},
		"TEXT TO DOCUMENT": {
			"Syntax": "**TEXT TO DOCUMENT** ( *fileName* ; *text* {; *charSet* {; *breakMode*}} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"Document name or Pathname to document"
				],
				[
					"text",
					"Text",
					"->",
					"Text to store in the document"
				],
				[
					"charSet",
					"Text, Integer",
					"->",
					"Name or Number of character set"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Processing mode for line breaks"
				]
			],
			"Summary": "The **TEXT TO DOCUMENT** command lets you write the *text* directly to a disk file."
		},
		"throw": {
			"Syntax": "**throw** ( *errorCode* {; *description*} ) <br/>\n*throw* {( *errorObj* )}",
			"Params": [
				[
					"errorCode",
					"Integer",
					"->",
					"A long integer representing the error code."
				],
				[
					"description",
					"Text",
					"->",
					"A text providing a description of the error."
				],
				[
					"throw {( errorObj )}"
				],
				[
					"Parameter",
					"Type",
					"Description"
				],
				[
					"errorObj",
					"Object",
					"->",
					"An object containing properties to build the error"
				]
			],
			"Summary": "The **throw** command creates an error that will be thrown either immediately or when the calling method returns to its caller (deferred mode)."
		},
		"Tickcount": {
			"Syntax": "**Tickcount**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of ticks (60th of a second) elapsed since the machine was started"
				]
			],
			"Summary": "Tickcount returns the number of ticks (60th of a second) elapsed since the machine was started."
		},
		"Time string": {
			"Syntax": "**Time string** ( *seconds* ) : Text",
			"Params": [
				[
					"seconds",
					"Integer, Time",
					"->",
					"Seconds from midnight"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Time as a string in 24-hour format"
				]
			],
			"Summary": "The **Time string** command returns the string form of the time expression you pass in *seconds*."
		},
		"Time": {
			"Syntax": "**Time** ( *timeValue* ) : Time",
			"Params": [
				[
					"timeValue",
					"Text, Integer",
					"->",
					"Value to return as a time"
				],
				[
					"Function result",
					"Time",
					"<-",
					"Time specified by timeValue"
				]
			],
			"Summary": "The Time command returns a time expression equivalent to the time specified in the *timeValue* parameter."
		},
		"Timestamp": {
			"Syntax": "**Timestamp** : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Current time returned using ISO format with milliseconds"
				]
			],
			"Summary": "**Timestamp** returns the current UTC time in ISO format with milliseconds, i."
		},
		"Tool bar height": {
			"Syntax": "**Tool bar height**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Height (expressed in pixels) of tool bar or 0 if tool bar is hidden"
				]
			],
			"Summary": "The Tool bar height command returns the height of the current visible tool bar, expressed in pixels."
		},
		"TRACE": {
			"Syntax": "**TRACE**",
			"Params": [],
			"Summary": "You use **TRACE** to trace methods during the development of a database."
		},
		"Transaction level": {
			"Syntax": "**Transaction level**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Current transaction level (0 if no transaction has been started)"
				]
			],
			"Summary": "The Transaction level command returns the current transaction level for the process."
		},
		"TRANSFORM PICTURE": {
			"Syntax": "**TRANSFORM PICTURE** ( *picture* ; *operator* {; *param1* {; *param2* {; *param3* {; *param4*}}}} )",
			"Params": [
				[
					"picture",
					"Picture",
					"->",
					"Source picture to be transformed"
				],
				[
					"<-",
					"Resulting picture after transformation"
				],
				[
					"operator",
					"Integer",
					"->",
					"Type of transformation to be done"
				],
				[
					"param1",
					"Real",
					"->",
					"Transformation parameter"
				],
				[
					"param2",
					"Real",
					"->",
					"Transformation parameter"
				],
				[
					"param3",
					"Real",
					"->",
					"Transformation parameter"
				],
				[
					"param4",
					"Real",
					"->",
					"Transformation parameter"
				]
			],
			"Summary": "The TRANSFORM PICTURE command applies a transformation of the *operator* type to the picture passed in the *picture* parameter."
		},
		"Trigger event": {
			"Syntax": "**Trigger event**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"0 Outside any trigger execution cycle 1 Saving a new record 2 Saving an existing record 3 Deleting a record"
				]
			],
			"Summary": "Called from within a trigger, the **Trigger event** command returns a numeric value that denotes the type of the database event, in other words, the reason why the trigger has been invoked."
		},
		"Trigger level": {
			"Syntax": "**Trigger level**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Level of trigger execution (0 if outside any trigger execution cycle)"
				]
			],
			"Summary": "The Trigger level command returns the execution level of the trigger."
		},
		"TRIGGER PROPERTIES": {
			"Syntax": "**TRIGGER PROPERTIES** ( *triggerLevel* ; *dbEvent* ; *tableNum* ; *recordNum* )",
			"Params": [
				[
					"triggerLevel",
					"Integer",
					"->",
					"Trigger execution cycle level"
				],
				[
					"dbEvent",
					"Integer",
					"<-",
					"Database event"
				],
				[
					"tableNum",
					"Integer",
					"<-",
					"Involved table number"
				],
				[
					"recordNum",
					"Integer",
					"<-",
					"Involved record number"
				]
			],
			"Summary": "The **TRIGGER PROPERTIES** command returns information about the trigger execution level you pass in *triggerLevel*."
		},
		"True": {
			"Syntax": "**True**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True"
				]
			],
			"Summary": "True returns the Boolean value True."
		},
		"Trunc": {
			"Syntax": "**Trunc** ( *number* ; *places* ) : Real",
			"Params": [
				[
					"number",
					"Real",
					"->",
					"Number to be truncated"
				],
				[
					"places",
					"Integer",
					"->",
					"Number of decimal places used for truncating"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Number with its decimal part truncated to the number of decimal places specified by Places"
				]
			],
			"Summary": "**Trunc** returns *number* with its decimal part truncated to the number of decimal places specified by *places*."
		},
		"TRUNCATE TABLE": {
			"Syntax": "**TRUNCATE TABLE** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table where all records will be deleted or Default table if this parameter is omitted"
				]
			],
			"Summary": "The **TRUNCATE TABLE** command quickly deletes all the records of *aTable*."
		},
		"Type": {
			"Syntax": "**Type** ( *fieldVar* ) : Integer",
			"Params": [
				[
					"fieldVar",
					"Field, Variable",
					"->",
					"field or variable to be tested"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Data type number"
				]
			],
			"Summary": "The Type command returns a numeric value that indicates the type of field or variable you have passed in the *fieldVar* parameter."
		},
		"Undefined": {
			"Syntax": "**Undefined** ( *expression* ) : Boolean",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"Expression whose resulting value to be evaluated"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = undefined, False = not undefined"
				]
			],
			"Summary": "Undefined returns True if the result of the evaluation of *expression* is not a defined value, and False otherwise."
		},
		"UNION": {
			"Syntax": "**UNION** ( *set1* ; *set2* ; *resultSet* )",
			"Params": [
				[
					"set1",
					"Text",
					"->",
					"First set"
				],
				[
					"set2",
					"Text",
					"->",
					"Second set"
				],
				[
					"resultSet",
					"Text",
					"->",
					"Resulting set"
				]
			],
			"Summary": "**UNION** creates a set that contains all records from *set1* and *set2*."
		},
		"UNLOAD RECORD": {
			"Syntax": "**UNLOAD RECORD** {( *aTable* )}",
			"Params": [
				[
					"aTable",
					"Table",
					"->",
					"Table for which to unload record, or Default table, if omitted"
				]
			],
			"Summary": "**UNLOAD RECORD** unloads the current record of *table*."
		},
		"UNREGISTER CLIENT": {
			"Syntax": "**UNREGISTER CLIENT**",
			"Params": [],
			"Summary": "The **UNREGISTER CLIENT** command “unregisters” a 4D client station."
		},
		"Uppercase": {
			"Syntax": "**Uppercase** ( *aString* {; *} ) : Text",
			"Params": [
				[
					"aText",
					"Text",
					"->",
					"String to convert to uppercase"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: keep accents"
				],
				[
					"Function result",
					"Text",
					"<-",
					"String in uppercase"
				]
			],
			"Summary": "Uppercase takes *aString* and returns the string with all alphabetic characters in uppercase."
		},
		"USE CHARACTER SET": {
			"Syntax": "**USE CHARACTER SET** ( *map* {; *mapInOut*} )",
			"Params": [
				[
					"map",
					"Text, *",
					"->",
					"Name of character set  to use, or * to reset to default character set"
				],
				[
					"mapInOut",
					"Integer",
					"->",
					"0 = Output map 1 = Input map, If omitted, output map"
				]
			],
			"Summary": "**USE CHARACTER SET** modifies the character set used by 4D during data transfer between the database and a document or a serial port for the current process."
		},
		"USE NAMED SELECTION": {
			"Syntax": "**USE NAMED SELECTION** ( *name* )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of named selection to be used"
				]
			],
			"Summary": "**USE NAMED SELECTION** uses the named selection *name* as the current selection for the table to which it belongs."
		},
		"USE SET": {
			"Syntax": "**USE SET** ( *set* )",
			"Params": [
				[
					"set",
					"Text",
					"->",
					"Name of the set to use"
				]
			],
			"Summary": "**USE SET** makes the records in *set* the current selection for the table to which the set belongs."
		},
		"User in group": {
			"Syntax": "**User in group** ( *user* ; *group* ) : Boolean",
			"Params": [
				[
					"user",
					"Text",
					"->",
					"User account name"
				],
				[
					"group",
					"Text",
					"->",
					"Group name"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"TRUE = user is in group FALSE = user is not in group"
				]
			],
			"Summary": "User in group returns TRUE if *user* is in *group*."
		},
		"USERS TO BLOB": {
			"Syntax": "**USERS TO BLOB** ( *users* )",
			"Params": [
				[
					"users",
					"Blob",
					"->",
					"BLOB that must contain users"
				],
				[
					"<-",
					"User accounts (encrypted)"
				]
			],
			"Summary": "**Compatibility Note:* This command only works in binary databases."
		},
		"Validate password": {
			"Syntax": "**Validate password** ( *userID* ; *password* {; *digest*} ) : Boolean",
			"Params": [
				[
					"userID",
					"Integer, Text",
					"->",
					"Unique user ID or User name"
				],
				[
					"password",
					"Text",
					"->",
					"Unencrypted password"
				],
				[
					"digest",
					"Boolean",
					"->",
					"Digest password = True, <br/>Plain-text password (default) = False"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True = valid password False = invalid password"
				]
			],
			"Summary": "Validate password returns True if the string passed in *password* is the password for the user account whose ID number or name is passed in *userID*."
		},
		"VALIDATE TRANSACTION": {
			"Syntax": "**VALIDATE TRANSACTION**",
			"Params": [],
			"Summary": "**VALIDATE TRANSACTION** accepts the transaction that was started with START TRANSACTION of the corresponding level in the current process."
		},
		"Value type": {
			"Syntax": "**Value type** ( *expression* ) : Integer",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"Expression whose resulting value to be tested"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Data type number"
				]
			],
			"Summary": "The Value type command returns the type of the value resulting from the evaluation of the *expression* you passed as parameter."
		},
		"VARIABLE TO BLOB": {
			"Syntax": "**VARIABLE TO BLOB** ( *variable* ; *blob* {; offset } )<br/>**VARIABLE TO BLOB** ( *variable* ; *blob* {; *} )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable to store in the BLOB"
				],
				[
					"blob",
					"Blob",
					"->",
					"BLOB to receive the variable"
				],
				[
					"offset &#124; *",
					"Variable, Operator",
					"<->",
					"Offset within the BLOB (expressed in bytes) or * to append the value"
				],
				[
					"",
					"",
					"",
					"New offset after writing if not *"
				]
			],
			"Summary": "The VARIABLE TO BLOB command stores the variable *variable* in the BLOB *blob*."
		},
		"VARIABLE TO VARIABLE": {
			"Syntax": "**VARIABLE TO VARIABLE** ( *process* ; *dstVar* ; *srcVar* {; *dstVar2* ; *srcVar2* ; ... ; *dstVarN* ; *srcVarN*} )",
			"Params": [
				[
					"process",
					"Integer",
					"->",
					"Destination process number"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"Destination variable"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"Source variable"
				]
			],
			"Summary": "The **VARIABLE TO VARIABLE** command writes the *dstVar* process variables (*dstVar2*, etc.) of the destination process whose number is passed in *process* using the values of the variables *srcVar1* *srcVar2*, etc."
		},
		"Variance": {
			"Syntax": "**Variance** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Data for which to return the variance"
				],
				[
					"Function result",
					"Real",
					"<-",
					"Variance of series"
				]
			],
			"Summary": "**Variance** returns the variance for *series*."
		},
		"VERIFY CURRENT DATA FILE": {
			"Syntax": "**VERIFY CURRENT DATA FILE** {( *objects* ; *options* ; *method* {; *tablesArray* {; *fieldsArray*}} )}",
			"Params": [
				[
					"objects",
					"Integer",
					"->",
					"Objects to check"
				],
				[
					"options",
					"Integer",
					"->",
					"Checking options"
				],
				[
					"method",
					"Text",
					"->",
					"Name of 4D callback method"
				],
				[
					"tablesArray",
					"Array integer",
					"->",
					"Numbers of tables to be checked"
				],
				[
					"fieldsArray",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"Numbers of indexes to be checked"
				]
			],
			"Summary": "The VERIFY CURRENT DATA FILE command carries out a structural check of the objects found in the data file currently opened by 4D."
		},
		"VERIFY DATA FILE": {
			"Syntax": "**VERIFY DATA FILE** ( *structurePath* ; *dataPath* ; *objects* ; *options* ; *method* {; *tablesArray* {; *fieldsArray*}} )",
			"Params": [
				[
					"structurePath",
					"Text",
					"->",
					"Pathname of 4D structure file to be checked"
				],
				[
					"dataPath",
					"Text",
					"->",
					"Pathname of 4D data file to be checked"
				],
				[
					"objects",
					"Integer",
					"->",
					"Objects to be checked"
				],
				[
					"options",
					"Integer",
					"->",
					"Checking options"
				],
				[
					"method",
					"Text",
					"->",
					"Name of 4D callback method"
				],
				[
					"tablesArray",
					"Array integer",
					"->",
					"Numbers of tables to be checked"
				],
				[
					"fieldsArray",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"Numbers of indexes to be checked"
				]
			],
			"Summary": "The VERIFY DATA FILE command carries out a structural check of the objects contained in the 4D data file designated by *structurePath* and *dataPath*."
		},
		"Verify password hash": {
			"Syntax": "**Verify password hash** ( *password* ; *hash* ) : Boolean",
			"Params": [
				[
					"password",
					"Text",
					"->",
					"The user's password.  Only the first 72 characters are used."
				],
				[
					"hash",
					"Text",
					"->",
					"A password hash."
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"Returns TRUE if the password and hash match, otherwise returns FALSE."
				]
			],
			"Summary": "The **Verify password hash** function verifies that the given *hash* matches the given *password*."
		},
		"Version type": {
			"Syntax": "**Version type**  : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Information about the version type (bitfield)"
				]
			],
			"Summary": "The Version type command returns a numeric value that denotes the type of 4D or 4D Server version that you are running."
		},
		"VOLUME ATTRIBUTES": {
			"Syntax": "**VOLUME ATTRIBUTES** ( *volume* ; *size* ; *used* ; *free* )",
			"Params": [
				[
					"volume",
					"Text",
					"->",
					"Volume name"
				],
				[
					"size",
					"Real",
					"<-",
					"Volume size expressed in bytes"
				],
				[
					"used",
					"Real",
					"<-",
					"Used space expressed in bytes"
				],
				[
					"free",
					"Real",
					"<-",
					"Free space expressed in bytes"
				]
			],
			"Summary": "The VOLUME ATTRIBUTES command returns, expressed in bytes, the size, the used space and the free space for the volume whose name you pass in *volume*."
		},
		"VOLUME LIST": {
			"Syntax": "**VOLUME LIST** ( *volumes* )",
			"Params": [
				[
					"volumes",
					"Text array",
					"<-",
					"Names of the volumes currently mounted"
				]
			],
			"Summary": "The VOLUME LIST command populates the text array *volumes* with the names of the volumes currently defined (Windows) or mounted (Macintosh) on your machine."
		},
		"WA Back URL available": {
			"Syntax": "**WA Back URL available** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if there is a previous URL in the sequence of URLs opened;otherwise, False"
				]
			],
			"Summary": "The WA Back URL available command finds out whether there is a previous URL available in the sequence of URLs opened in the Web area designated by the *\\** and *object* parameters."
		},
		"WA Create URL history menu": {
			"Syntax": "**WA Create URL history menu** ( {* ;} *object* {; *direction*} ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"direction",
					"Integer",
					"->",
					"0 or omitted=List of previous URLs, 1=List of next URLs"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Menu reference"
				]
			],
			"Summary": "The **WA Create URL history menu** command creates and fills a menu that can be used directly for navigation among the URLs visited during the session in the Web area designated by the *\\** and *object* parameters."
		},
		"WA Evaluate JavaScript": {
			"Syntax": "**WA Evaluate JavaScript** ( {* ;} *object* ; *jsCode* {; *type*} )  : any",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"jsCode",
					"Text",
					"->",
					"JavaScript code"
				],
				[
					"type",
					"Integer",
					"->",
					"Type into which to convert result"
				],
				[
					"Function result",
					"Date, Object, Pointer, Real, Text, Time",
					"<-",
					"Result of evaluation"
				]
			],
			"Summary": "The WA Evaluate JavaScript command executes, in the Web area designated by the *\\** and *object* parameters, the JavaScript code passed in *jsCode* and returns the result."
		},
		"WA EXECUTE JAVASCRIPT FUNCTION": {
			"Syntax": "**WA EXECUTE JAVASCRIPT FUNCTION** ( {* ;} *object* ; *jsFunction* ; *result* {; *param*}{; *param2* ; ... ; *paramN*} )<br/>**WA EXECUTE JAVASCRIPT FUNCTION** ( {* ;} *object* ; *jsFunction* ; * {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"jsFunction",
					"Text",
					"->",
					"Name of JavaScript function to execute"
				],
				[
					"result&#124;*",
					"Variable",
					"->",
					"* for a function with no result or"
				],
				[
					"<-",
					"Function result (if expected)"
				],
				[
					"param",
					"Text, Number, Date, Object, Collection",
					"->",
					"Parameter(s) to pass to function"
				]
			],
			"Summary": "The WA EXECUTE JAVASCRIPT FUNCTION command executes, in the Web area designated by the *\\** and *object* parameters, the JavaScript function *jsFunction* and optionally returns its result in the *result* parameter."
		},
		"WA Forward URL available": {
			"Syntax": "**WA Forward URL available** ( {* ;} *object* ) : Boolean",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if there is a following URL in the sequence of URLs opened;otherwise, False"
				]
			],
			"Summary": "The WA Forward URL available command finds out whether there is a following URL available in the sequence of URLs opened in the Web area designated by the *\\** and *object* parameters."
		},
		"WA Get current URL": {
			"Syntax": "**WA Get current URL** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"URL currently loaded in the Web area"
				]
			],
			"Summary": "The WA Get current URL command returns the URL address of the page displayed in the Web area designated by the *\\** and *object* parameters."
		},
		"WA GET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA GET EXTERNAL LINKS FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"filtersArr",
					"Text array",
					"<-",
					"Filters array"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"<-",
					"Allow-deny array"
				]
			],
			"Summary": "The **WA GET EXTERNAL LINKS FILTERS** command returns, in the *filtersArr* and *allowDenyArr* arrays, the external link filters of the Web area designated by the *\\** and *object* parameters."
		},
		"WA Get last filtered URL": {
			"Syntax": "**WA Get last filtered URL** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Last filtered URL"
				]
			],
			"Summary": "The **WA Get last filtered URL** command returns the last URL that was filtered in the Web area designated by the *\\** and *object* parameters."
		},
		"WA GET LAST URL ERROR": {
			"Syntax": "**WA GET LAST URL ERROR** ( {* ;} *object* ; *url* ; *description* ; *errorCode* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"url",
					"Text",
					"<-",
					"URL at origin of error"
				],
				[
					"description",
					"Text",
					"<-",
					"Description of error (macOS)"
				],
				[
					"errorCode",
					"Integer",
					"<-",
					"Error code"
				]
			],
			"Summary": "The WA GET LAST URL ERROR command recovers several items of information about the last error that occurred in the Web area designated by the *\\** and *object* parameters."
		},
		"WA Get page content": {
			"Syntax": "**WA Get page content** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"HTML source code"
				]
			],
			"Summary": "The WA Get page content command returns the HTML code of the current page or the page being displayed in the Web area designated by the *\\** and *object* parameters."
		},
		"WA Get page title": {
			"Syntax": "**WA Get page title** ( {* ;} *object* ) : Text",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Title of current page"
				]
			],
			"Summary": "The WA Get page title command returns the title of the current page or the page being displayed in the Web area designated by the *\\** and *object* parameters."
		},
		"WA GET PREFERENCE": {
			"Syntax": "**WA GET PREFERENCE** ( {* ;} *object* ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Preference to get"
				],
				[
					"value",
					"Variable",
					"<-",
					"Current value of the preference"
				]
			],
			"Summary": "The WA GET PREFERENCE command gets the current value of the preference in the Web area designated by the *\\** and *object* parameters."
		},
		"WA GET URL FILTERS": {
			"Syntax": "**WA GET URL FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"filtersArr",
					"Text array",
					"<-",
					"Filters array"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"<-",
					"Allow-deny array"
				]
			],
			"Summary": "The **WA GET URL FILTERS** command returns, in the *filtersArr* and *allowDenyArr* arrays, the filters that are active in the Web area designated by the *\\** and *object* parameters."
		},
		"WA GET URL HISTORY": {
			"Syntax": "**WA GET URL HISTORY** ( {* ;} *object* ; *urlsArr* {; *direction* {; *titlesArr*}} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"urlsArr",
					"Text array",
					"<-",
					"Array of URLs visited"
				],
				[
					"direction",
					"Integer",
					"->",
					"0 or omitted=List of previous URLs, 1=List of next URLs"
				],
				[
					"titlesArr",
					"Text array",
					"<-",
					"Array of window titles"
				]
			],
			"Summary": "The WA GET URL HISTORY command returns one or two arrays containing the URLs visited during the session in the Web area designated by the *\\** and *object* parameters."
		},
		"WA OPEN BACK URL": {
			"Syntax": "**WA OPEN BACK URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The **WA OPEN BACK URL** command loads the previous URL in the sequence of URLs opened into the Web area designated by the *\\** and *object* parameters."
		},
		"WA OPEN FORWARD URL": {
			"Syntax": "**WA OPEN FORWARD URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The **WA OPEN FORWARD URL** command loads the next URL in the sequence of URLs opened into the Web area designated by the *\\** and *object* parameters."
		},
		"WA OPEN URL": {
			"Syntax": "**WA OPEN URL** ( {* ;} *object* ; *url* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"url",
					"Text",
					"->",
					"URL to load in Web area"
				]
			],
			"Summary": "The **WA OPEN URL** command loads the URL passed in the *url* parameter into the Web area designated by the *\\** and *object* parameters."
		},
		"WA OPEN WEB INSPECTOR": {
			"Syntax": "**WA OPEN WEB INSPECTOR** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The **WA OPEN WEB INSPECTOR** command opens a web inspector for the web area designated by the *\\** and *object* parameters."
		},
		"WA REFRESH CURRENT URL": {
			"Syntax": "**WA REFRESH CURRENT URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The WA REFRESH CURRENT URL command reloads the current URL displayed in the Web area designated by the *\\** and *object* parameters."
		},
		"WA Run offscreen area": {
			"Syntax": "**WA Run offscreen area** ( *parameters* ) : any",
			"Params": [
				[
					"parameters",
					"Object",
					"->",
					"Object containing the web area's attributes"
				],
				[
					"Function result",
					"any",
					"<-",
					".result property of the onEvent object, or Null if does not return a value"
				]
			],
			"Summary": "The **WA Run offscreen area** command creates a web area in memory which can be used to automatically load and parse web pages."
		},
		"WA SET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA SET EXTERNAL LINKS FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"filtersArr",
					"Text array",
					"->",
					"Filters array"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"->",
					"Allow-deny array"
				]
			],
			"Summary": "The **WA SET EXTERNAL LINKS FILTERS** command sets up one or more external link filters for the Web area designated by the *\\** and *object* parameters."
		},
		"WA SET PAGE CONTENT": {
			"Syntax": "**WA SET PAGE CONTENT** ( {* ;} *object* ; *content* ; *baseURL* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"content",
					"Text",
					"->",
					"HTML source code"
				],
				[
					"baseURL",
					"Text",
					"->",
					"URL for relative references (macOS)"
				]
			],
			"Summary": "This historical command is no longer really useful."
		},
		"WA SET PREFERENCE": {
			"Syntax": "**WA SET PREFERENCE** ( {* ;} *object* ; *selector* ; *value* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Preference to be modified"
				],
				[
					"value",
					"Boolean",
					"->",
					"Value of the preference (True = allowed,  False = not allowed)"
				]
			],
			"Summary": "The WA SET PREFERENCE command sets different preferences for the Web area designated by the *\\** and *object* parameters."
		},
		"WA SET URL FILTERS": {
			"Syntax": "**WA SET URL FILTERS** ( {* ;} *object* ; *filtersArr* ; *allowDenyArr* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				],
				[
					"filtersArr",
					"Text array",
					"->",
					"Filters array"
				],
				[
					"allowDenyArr",
					"Boolean array",
					"->",
					"Allow-deny array"
				]
			],
			"Summary": "The WA SET URL FILTERS command sets up one or more filters for the Web area designated by the *\\** and *object* parameters."
		},
		"WA STOP LOADING URL": {
			"Syntax": "**WA STOP LOADING URL** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The WA STOP LOADING URL command stops loading the resources of the current URL of the Web area designated by the *\\** and *object* parameters."
		},
		"WA ZOOM IN": {
			"Syntax": "**WA ZOOM IN** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The WA ZOOM IN command increases the size of the contents displayed in the Web area designated by the *\\** and *object* parameters."
		},
		"WA ZOOM OUT": {
			"Syntax": "**WA ZOOM OUT** ( {* ;} *object* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, object is an object name (string) If omitted, object is a variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if * is specified) or Variable (if * is omitted)"
				]
			],
			"Summary": "The WA ZOOM OUT command reduces the size of the contents displayed in the Web area designated by the *\\** and *object* parameters."
		},
		"WEB Get body part count": {
			"Syntax": "**WEB Get body part count** : Integer",
			"Params": [
				[
					"Function result",
					"Integer",
					"<-",
					"Number of parts in the body"
				]
			],
			"Summary": "The **WEB Get body part count** command returns the number of parts making up the body received."
		},
		"WEB GET BODY PART": {
			"Syntax": "**WEB GET BODY PART** ( *part* ; *contents* ; *name* ; *mimeType* ; *fileName* )",
			"Params": [
				[
					"part",
					"Integer",
					"->",
					"Part number"
				],
				[
					"contents",
					"Blob, Text",
					"<-",
					"Contents of part"
				],
				[
					"name",
					"Text",
					"<-",
					"Name of \"input\" variable"
				],
				[
					"mimeType",
					"Text",
					"<-",
					"Mime type of submitted file"
				],
				[
					"fileName",
					"Text",
					"<-",
					"Name of submitted file"
				]
			],
			"Summary": "The **WEB GET BODY PART** command, when called in the context of a Web process, parses the \"body\" part of a multi-part request."
		},
		"WEB Get current session ID": {
			"Syntax": "**WEB Get current session ID**  : Text",
			"Params": [
				[
					"Function result",
					"Text",
					"<-",
					"Session UUID"
				]
			],
			"Summary": "The **WEB Get current session ID** command returns the ID of the session open for the Web request."
		},
		"WEB GET HTTP BODY": {
			"Syntax": "**WEB GET HTTP BODY** ( *body* )",
			"Params": [
				[
					"body",
					"Blob, Text",
					"<-",
					"Body of the HTTP request"
				]
			],
			"Summary": "The **WEB GET HTTP BODY** command returns the body of the HTTP request being processed."
		},
		"WEB GET HTTP HEADER": {
			"Syntax": "**WEB GET HTTP HEADER** ( *header* )<br/>**WEB GET HTTP HEADER** ( *fieldArray* ; *valueArray* )",
			"Params": [
				[
					"header&#124;fieldArray",
					"Text, Text array",
					"<-",
					"Request HTTP header or HTTP header fields"
				],
				[
					"valueArray",
					"Text array",
					"<-",
					"HTTP header fields content"
				]
			],
			"Summary": "The **WEB GET HTTP HEADER** command returns either a string or two arrays, containing the HTTP header used for the currently processed request."
		},
		"WEB GET OPTION": {
			"Syntax": "**WEB GET OPTION** ( *selector* ; *value* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Code of option to modify"
				],
				[
					"value",
					"Integer, Text, Collection",
					"<-",
					"Value of option"
				]
			],
			"Summary": "The **WEB GET OPTION** command gets the current value of an option for the 4D Web server operation."
		},
		"WEB Get server info": {
			"Syntax": "**WEB Get server info** {( *withCache* )} : Object",
			"Params": [
				[
					"withCache",
					"Boolean",
					"->",
					"True to return the Web cache description. Otherwise (default), the cache description is not returned."
				],
				[
					"Function result",
					"Object",
					"<-",
					"Information on the running Web server and SOAP server"
				]
			],
			"Summary": "The **WEB Get server info** command returns an object containing detailed runtine information on the 4D Web server current session."
		},
		"WEB GET STATISTICS": {
			"Syntax": "**WEB GET STATISTICS** ( *pages* ; *hits* ; *usage* )",
			"Params": [
				[
					"pages",
					"Text array",
					"<-",
					"Names of the most consulted pages"
				],
				[
					"hits",
					"Array integer",
					"<-",
					"Number of hits for each page"
				],
				[
					"usage",
					"Integer",
					"<-",
					"Percentage of the cache used"
				]
			],
			"Summary": "The **WEB GET STATISTICS** command lets you get information about the most consulted pages loaded in the Web server’s cache."
		},
		"WEB GET VARIABLES": {
			"Syntax": "**WEB GET VARIABLES** ( *nameArray* ; *valueArray* )",
			"Params": [
				[
					"nameArray",
					"Text array",
					"<-",
					"Web form variable names"
				],
				[
					"valueArray",
					"Text array",
					"<-",
					"Web form variable values"
				]
			],
			"Summary": "The **WEB GET VARIABLES** command fills the text arrays *nameArray* and *valueArray* with the variable names and values contained in the Web form “submitted” (i.e. sent to the Web server)."
		},
		"WEB Is secured connection": {
			"Syntax": "**WEB Is secured connection**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True = the web connection is secured. False = the web connection is not secured."
				]
			],
			"Summary": "The **WEB Is secured connection** command returns a Boolean indicating if the 4D Web server connection was done in secured mode through TLS/SSL (the request starts with “https:” instead of “http:”)."
		},
		"WEB Is server running": {
			"Syntax": "**WEB Is server running** : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"True if the Web Server is running, otherwise False"
				]
			],
			"Summary": "The new **WEB Is server running** command returns **True** if the 4D built-in Web server is running, and **False** if the Web server is off."
		},
		"WEB LEGACY CLOSE SESSION": {
			"Syntax": "**WEB LEGACY CLOSE SESSION** ( *sessionID* )",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"Session UUID"
				]
			],
			"Summary": "This command can only be used with **legacy web sessions**, available in databases converted from versions prior to 4D v18 R6\\."
		},
		"WEB LEGACY GET SESSION EXPIRATION": {
			"Syntax": "**WEB LEGACY GET SESSION EXPIRATION** ( *sessionID* ; *expDate* ; *expTime* )",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"Session UUID"
				],
				[
					"expDate",
					"Date",
					"<-",
					"Date of cookie expiration"
				],
				[
					"expTime",
					"Time",
					"<-",
					"Time of cookie expiration"
				]
			],
			"Summary": "This command can only be used with **legacy web sessions**, available in databases converted from versions prior to 4D v18 R6\\."
		},
		"WEB SEND BLOB": {
			"Syntax": "**WEB SEND BLOB** ( *blob* ; *type* )",
			"Params": [
				[
					"blob",
					"Blob",
					"->",
					"BLOB to send to the browser"
				],
				[
					"type",
					"Text",
					"->",
					"Data type of the BLOB"
				]
			],
			"Summary": "The **WEB SEND BLOB** command allows you to send *blob* to the browser."
		},
		"WEB SEND FILE": {
			"Syntax": "**WEB SEND FILE** ( *htmlFile* )",
			"Params": [
				[
					"htmlFile",
					"Text",
					"->",
					"HTML Pathname to HTML file or empty string for terminating SEND HTML FILE"
				]
			],
			"Summary": "The **WEB SEND FILE** command sends, to the Web browser, the HTML page or the Web file stored in the document whose pathname you pass in *htmlFile*."
		},
		"WEB SEND HTTP REDIRECT": {
			"Syntax": "**WEB SEND HTTP REDIRECT** ( *url* {; *} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"New URL"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified = URL is not translated, If omitted = URL is translated"
				]
			],
			"Summary": "The **WEB SEND HTTP REDIRECT** command allows you to transform a URL into another one."
		},
		"WEB SEND RAW DATA": {
			"Syntax": "**WEB SEND RAW DATA** ( *data* {; *} )",
			"Params": [
				[
					"data",
					"Blob",
					"->",
					"HTTP data to send"
				],
				[
					"*",
					"Operator",
					"->",
					"Send chunked"
				]
			],
			"Summary": "The **WEB SEND RAW DATA** command lets the 4D Web server send “raw” HTTP data, which can be chunked."
		},
		"WEB SEND TEXT": {
			"Syntax": "**WEB SEND TEXT** ( *htmlText* {; *type*} )",
			"Params": [
				[
					"htmlText",
					"Text",
					"->",
					"HTML text field or variable to be sent to the Web browser"
				],
				[
					"type",
					"Text",
					"->",
					"MIME type"
				]
			],
			"Summary": "The **WEB SEND TEXT** command directly sends HTML formatted text data."
		},
		"WEB SERVICE AUTHENTICATE": {
			"Syntax": "**WEB SERVICE AUTHENTICATE** ( *name* ; *password* {; *authMethod*} {; *} )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"User name"
				],
				[
					"password",
					"Text",
					"->",
					"User password"
				],
				[
					"authMethod",
					"Integer",
					"->",
					"Authentication method 0 or omitted = not specified, 1 = BASIC, 2 = DIGEST"
				],
				[
					"*",
					"Operator",
					"->",
					"If passed: authentication by proxy"
				]
			],
			"Summary": "The **WEB SERVICE AUTHENTICATE** command enables the use of Web Services requiring authentication of the client application (simple authentication)."
		},
		"WEB SERVICE CALL": {
			"Syntax": "**WEB SERVICE CALL** ( *accessURL* ; *soapAction* ; *methodName* ; *nameSpace* {; *complexType* {; *}} )",
			"Params": [
				[
					"accessURL",
					"Text",
					"->",
					"Access URL to Web Service"
				],
				[
					"soapAction",
					"Text",
					"->",
					"Contents of SOAPAction field"
				],
				[
					"methodName",
					"Text",
					"->",
					"Name of the method"
				],
				[
					"nameSpace",
					"Text",
					"->",
					"Namespace"
				],
				[
					"complexType",
					"Integer",
					"->",
					"Configuration of complex types (simple types if omitted)"
				],
				[
					"*",
					"Operator",
					"->",
					"Do not close connection"
				]
			],
			"Summary": "The **WEB SERVICE CALL** command calls a Web Service by sending an HTTP request."
		},
		"WEB SERVICE Get info": {
			"Syntax": "**WEB SERVICE Get info** ( *infoType* ) : Text",
			"Params": [
				[
					"infoType",
					"Integer",
					"->",
					"Information to be retrieved"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Information about the last SOAP error"
				]
			],
			"Summary": "The **WEB SERVICE Get info** command returns information about any error generated during the execution of the last SOAP request sent to a remote Web Service."
		},
		"WEB SERVICE GET RESULT": {
			"Syntax": "**WEB SERVICE GET RESULT** ( *returnValue* {; *returnName* {; *}} )",
			"Params": [
				[
					"returnValue",
					"Variable",
					"<-",
					"Value returned by the Web Service"
				],
				[
					"returnName",
					"Text",
					"->",
					"Name of the parameter to be retrieved"
				],
				[
					"*",
					"Operator",
					"->",
					"Free up memory"
				]
			],
			"Summary": "The **WEB SERVICE GET RESULT** command retrieves a value sent back by the Web Service as a result of the processing performed."
		},
		"WEB SERVICE SET OPTION": {
			"Syntax": "**WEB SERVICE SET OPTION** ( *option* ; *value* )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Code of the option to set"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"Value of the option"
				]
			],
			"Summary": "This command is designed for advanced Web Services users."
		},
		"WEB SERVICE SET PARAMETER": {
			"Syntax": "**WEB SERVICE SET PARAMETER** ( *name* ; *value* {; *soapType*} )",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Name of parameter to include in SOAP request"
				],
				[
					"value",
					"Variable",
					"->",
					"4D variable containing the value of the parameter"
				],
				[
					"soapType",
					"Text",
					"->",
					"SOAP type of the parameter"
				]
			],
			"Summary": "The **WEB SERVICE SET PARAMETER** command enables the definition of a parameter used for a client SOAP request."
		},
		"WEB SET HOME PAGE": {
			"Syntax": "**WEB SET HOME PAGE** ( *homePage* )",
			"Params": [
				[
					"homePage",
					"Text",
					"->",
					"Page name or HTML access path to the page or \"\" to not send the custom home page"
				]
			],
			"Summary": "The **WEB SET HOME PAGE** command allows you to modify the custom home page for the current Web process."
		},
		"WEB SET HTTP HEADER": {
			"Syntax": "**WEB SET HTTP HEADER** ( *header* )<br/>**WEB SET HTTP HEADER** ( *fieldArray* ; *valueArray* )",
			"Params": [
				[
					"header&#124;fieldArray",
					"Text, Text array",
					"->",
					"Field or variable containing the request HTTP header or HTTP header fields"
				],
				[
					"valueArray",
					"Text array",
					"->",
					"HTTP header field content"
				]
			],
			"Summary": "The **WEB SET HTTP HEADER** command allows you to set the fields in the HTTP header of the reply sent to the Web browser by 4D."
		},
		"WEB SET OPTION": {
			"Syntax": "**WEB SET OPTION** ( *selector* ; *value* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Option code"
				],
				[
					"value",
					"Integer, Text, Collection",
					"->",
					"Option value"
				]
			],
			"Summary": "The **WEB SET OPTION** command modifies the current value of various options concerning the functioning of the 4D Web server."
		},
		"WEB SET ROOT FOLDER": {
			"Syntax": "**WEB SET ROOT FOLDER** ( *rootFolder* )",
			"Params": [
				[
					"rootFolder",
					"Text",
					"->",
					"Pathname of Web server root folder"
				]
			],
			"Summary": "The **WEB SET ROOT FOLDER** command is used to modify the default root folder where 4D looks for the HTML files requested of the Web server."
		},
		"WEB START SERVER": {
			"Syntax": "**WEB START SERVER**",
			"Params": [],
			"Summary": "The **WEB START SERVER** command starts the Web server of the 4D application on which it has been executed (4D or 4D Server)."
		},
		"WEB STOP SERVER": {
			"Syntax": "**WEB STOP SERVER**",
			"Params": [],
			"Summary": "The **WEB STOP SERVER** command stops the Web server of the 4D application on which it has been executed (4D ou 4D Server)."
		},
		"WEB Validate digest": {
			"Syntax": "**WEB Validate digest** ( *userName* ; *password* ) : Boolean",
			"Params": [
				[
					"userName",
					"Text",
					"->",
					"User name"
				],
				[
					"password",
					"Text",
					"->",
					"User password"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True=Authentication OK, False=Authentication failed"
				]
			],
			"Summary": "The **WEB Validate digest** command checks the validity of the identifying information (name and password) provided by a user connecting to the Web server."
		},
		"Window kind": {
			"Syntax": "**Window kind** {( *window* )} : Integer",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number, or Frontmost window of current process, if omitted"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Type of window"
				]
			],
			"Summary": "The **Window kind** command returns the 4D type of the window whose reference number is passed in *window*."
		},
		"WINDOW LIST": {
			"Syntax": "**WINDOW LIST** ( *windows* {; *} )",
			"Params": [
				[
					"windows",
					"Array",
					"<-",
					"Array of window reference numbers"
				],
				[
					"*",
					"Operator",
					"->",
					"If specified, take floating windows into account If omitted, ignore floating windows"
				]
			],
			"Summary": "The WINDOW LIST command populates the array *windows* with the window reference numbers of the windows currently open in all running processes (kernel or user processes)."
		},
		"Window process": {
			"Syntax": "**Window process** {( *window* )} : Integer",
			"Params": [
				[
					"window",
					"Integer",
					"->",
					"Window reference number"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Process reference number"
				]
			],
			"Summary": "The Window process command returns the process number that runs the window whose reference number is passed in *window*."
		},
		"Windows Alt down": {
			"Syntax": "**Windows Alt down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Windows Alt key (Option key on Macintosh)"
				]
			],
			"Summary": "**Windows Alt down** returns TRUE if the Windows Alt key is pressed."
		},
		"Windows Ctrl down": {
			"Syntax": "**Windows Ctrl down**  : Boolean",
			"Params": [
				[
					"Function result",
					"Boolean",
					"<-",
					"State of the Windows Ctrl key (Command key on Macintosh)"
				]
			],
			"Summary": "**Windows Ctrl down** returns TRUE if the Windows Ctrl key is pressed."
		},
		"WRITE PICTURE FILE": {
			"Syntax": "**WRITE PICTURE FILE** ( *fileName* ; *picture* {; *codec*} )",
			"Params": [
				[
					"fileName",
					"Text",
					"->",
					"Name or full pathname of the file to write, or empty string"
				],
				[
					"picture",
					"Picture",
					"->",
					"Picture field or variable to write"
				],
				[
					"codec",
					"Text",
					"->",
					"Picture Codec ID"
				]
			],
			"Summary": "The **WRITE PICTURE FILE** command saves the picture passed in the *picture* parameter in the defined *codec* to disk."
		},
		"XML DECODE": {
			"Syntax": "**XML DECODE** ( *xmlValue* ; *4Dvar* )",
			"Params": [
				[
					"xmlValue",
					"Text",
					"->",
					"Text type value coming from an XML structure"
				],
				[
					"4Dvar",
					"Field, Variable",
					"<-",
					"4D variable or field receiving the converted XML value"
				]
			],
			"Summary": "The XML DECODE command converts a value stored as an XML string into a 4D typed value."
		},
		"XML GET ERROR": {
			"Syntax": "**XML GET ERROR** ( *elementRef* ; *errorText* {; *row* {; *column*}} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"XML element reference"
				],
				[
					"errorText",
					"Variable",
					"<-",
					"Text of the error"
				],
				[
					"row",
					"Variable",
					"<-",
					"Row number"
				],
				[
					"column",
					"Variable",
					"<-",
					"Column number"
				]
			],
			"Summary": "The XML GET ERROR command returns, in the *errorText* parameter, a description of the error encountered when processing the XML element designated by the *elementRef* parameter."
		},
		"XML GET OPTIONS": {
			"Syntax": "**XML GET OPTIONS** ( *elementRef* ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )<br/>**XML GET OPTIONS** ( *document  ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )",
			"Params": [
				[
					"elementRef &#124; document",
					"Text",
					"->",
					"XML root element reference or<br/>Reference of open document"
				],
				[
					"selector",
					"Integer",
					"->",
					"Option to get"
				],
				[
					"value",
					"Integer",
					"<-",
					"Current value of option"
				]
			],
			"Summary": "The **XML GET OPTIONS** command is used to get the current value of one or more XML parameters for the current session and the current user."
		},
		"XML SET OPTIONS": {
			"Syntax": "**XML SET OPTIONS** ( *elementRef*  ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )<br/>**XML SET OPTIONS** ( *document*  ; *selector* ; *value* {; *selector2* ; *value2* ; ... ; *selectorN* ; *valueN*} )",
			"Params": [
				[
					"elementRef &#124; document",
					"Text",
					"->",
					"XML root element reference or<br/>Reference of open document"
				],
				[
					"selector",
					"Integer",
					"->",
					"Option to set"
				],
				[
					"value",
					"Integer",
					"->",
					"Value of option"
				]
			],
			"Summary": "The **XML SET OPTIONS** command is used to modify the value of one or more XML options for the structure passed in the first parameter."
		},
		"Year of": {
			"Syntax": "**Year of** ( *date* ) : Integer",
			"Params": [
				[
					"date",
					"Date",
					"->",
					"Date for which to return the year"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number indicating the year of date"
				]
			],
			"Summary": "The Year of command returns the year of *aDate*."
		},
		"cs": {
			"Syntax": "**cs** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"User class store for the project or component"
				]
			],
			"Summary": "returns the user class store for the current project or component"
		},
		"4D": {
			"Syntax": "**4D** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"4D class store"
				]
			],
			"Summary": "returns the class store for available built-in 4D classes"
		},
		"WP Add picture": {
			"Syntax": "**WP Add picture** ( *wpDoc* {; *picture*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *picturePath*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *pictureFileObj*} ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"picture",
					"Picture",
					"->",
					"4D picture"
				],
				[
					"picturePath",
					"Text",
					"->",
					"Picture path"
				],
				[
					"pictureFileObj",
					"4D.File",
					"->",
					"4D.File object representing a picture file"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object referencing the picture"
				]
			],
			"Summary": "anchors the picture passed as parameter at a fixed location within the specified *wpDoc* and returns its reference."
		},
		"WP DELETE SECTION": {
			"Syntax": "**WP DELETE SECTION** ( *section* )<br/> **WP DELETE SECTION** ( *wpDoc* ; *indexNumber* {; *count*} )",
			"Params": [
				[
					"section",
					"Object",
					"->",
					"4D Write Pro section"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"indexNumber",
					"Integer",
					"->",
					"Index of the section to be deleted"
				],
				[
					"count",
					"Integer",
					"->",
					"Number of sections to be deleted"
				]
			],
			"Summary": "deletes the passed *section* object, or deletes one or more sections starting at  *indexNumber* and depending on the *count* passed"
		},
		"WP DELETE SUBSECTION": {
			"Syntax": "**WP DELETE SUBSECTION** ( *wpSection* ; *subSectionType* )<br/>**WP DELETE SUBSECTION** ( *subSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Subsection type (wk first page, wk left page, or wk right page)"
				],
				[
					"subSection",
					"Object",
					"->",
					"4D Write Pro subsection"
				]
			],
			"Summary": "removes the *subSectionType* subsection elements from the *wpSection* 4D Write Pro section, or it directly removes the passed *subSection*"
		},
		"WP EXPORT DOCUMENT": {
			"Syntax": "**WP EXPORT DOCUMENT** ( *wpDoc* ; *filePath* {; *format* {; *option*}} )<br/>**WP EXPORT DOCUMENT** ( *wpDoc* ; *fileObj* {; *format* {; *option*}} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro variable"
				],
				[
					"filePath",
					"Text",
					"->",
					"Path of exported file"
				],
				[
					"fileObj",
					"4D.File",
					"->",
					"File object to export"
				],
				[
					"format",
					"Integer",
					"->",
					"Document output format (e.g., .docx, .pdf, etc.)"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"Export options, which can vary depending on the format chosen."
				]
			],
			"Summary": "exports the *wpDoc* 4D Write Pro object to a document on disk according to the *filePath* or *fileObj* parameter as well as any optional parameters."
		},
		"WP EXPORT VARIABLE": {
			"Syntax": "**WP EXPORT VARIABLE** ( *wpDoc* ; *destination* ; *format* {; *option*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro variable"
				],
				[
					"destination",
					"Text, Blob",
					"->",
					"Variable to receive exported contents"
				],
				[
					"format",
					"Integer",
					"->",
					"Variable output format"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"Export options"
				]
			],
			"Summary": "The **WP EXPORT VARIABLE** command exports the *wpDoc* 4D Write Pro object to the 4D *destination* variable in the specified *format*."
		},
		"WP Get attributes": {
			"Syntax": "**WP Get attributes** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP Get attributes** ( *targetObj* ; *attribColl* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"attribName",
					"Text",
					"->",
					"Name of attribute to get"
				],
				[
					"attribValue",
					"Text, Number, Array, Collection, Picture, Date",
					"<-",
					"Current value of attribute for the target"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"Collection of attribute names to get"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Attribute names and values"
				]
			],
			"Summary": "returns the value of any attribute in a 4D Write Pro range, header, body, footer, table, or document."
		},
		"WP Import document": {
			"Syntax": "**WP Import document** ( *filePath* {; *option*} ) : Object<br/>**WP Import document** ( *fileObj* {; *option*} ) : Object",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"Path to: a 4D Write document (.4w7 or .4wt) or a 4D Write Pro document (.4wp) or a .docx document (.docx)"
				],
				[
					"fileObj",
					"4D.File",
					"->",
					"File object to import"
				],
				[
					"option",
					"Integer, Object",
					"->",
					"(Integer) Import option for HTML expressions, (object) Import options for .docx document"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro object"
				]
			],
			"Summary": "converts an existing 4D Write Pro / 4D Write document (.4wp, .4w7 or .4wt) or MS Word document (.docx) to a new 4D Write Pro object."
		},
		"WP Insert break": {
			"Syntax": "**WP Insert break** ( *targetObj* ; *breakType* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"breakType",
					"Integer",
					"->",
					"Type of break to insert"
				],
				[
					"mode",
					"Integer",
					"->",
					"Insertion mode"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Range update mode"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Text range of the break character"
				]
			],
			"Summary": "inserts a new break of the *breakType* type in the *targetObj* according to the specified insertion *mode* and *rangeUpdate* parameters, and  returns the text range of the break character"
		},
		"WP Insert document body": {
			"Syntax": "**WP Insert document body** ( *targetObj* ; *wpDoc* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"mode",
					"Integer",
					"->",
					"Insertion mode"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Range update mode"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Text range object referencing the inserted document body"
				]
			],
			"Summary": "inserts the body of the *wpDoc* document into the specified *targetObj* according to the passed insertion *mode* and *rangeUpdate* parameters, and it returns the range of the inserted document body."
		},
		"WP Insert formula": {
			"Syntax": "**WP Insert formula** ( *targetObj* ; *formula* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"formula",
					"Object",
					"->",
					"Formula object OR Object with formula and name properties"
				],
				[
					"mode",
					"Number",
					"->",
					"Insertion mode"
				],
				[
					"rangeUpdate",
					"Number",
					"->",
					"Includes or excludes the inserted content within the range"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Text range object reprsenting the result of the formula"
				]
			],
			"Summary": "inserts a *formula* in *targetObj* according to the specified insertion *mode* and returns the resulting text range."
		},
		"WP Insert picture": {
			"Syntax": "**WP Insert picture** ( *targetObj* ; *picture* ; *mode* {; *rangeUpdate*} ): Object<br/>**WP Insert picture** ( *targetObj* ; *pictureFileObj*; *mode* {; *rangeUpdate*}): Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"picture",
					"Picture",
					"->",
					"Picture field or variable, or path to picture file on disk"
				],
				[
					"pictureFileObj",
					"4D.File",
					"->",
					"A File object representing a picture file."
				],
				[
					"mode",
					"Integer",
					"->",
					"Insertion mode"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Range update mode"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Object referencing the picture"
				]
			],
			"Summary": "inserts a *picture* or a *pictureFileObj* in the specified *targetObj* according to the passed insertion *mode* and *rangeUpdate* parameters, and returns a reference to the picture element."
		},
		"WP RESET ATTRIBUTES": {
			"Syntax": "**WP RESET ATTRIBUTES** ( *targetObj* ; *attribName* {; *attribName2* ; ... ; *attribNameN*} )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribName* }{; *attribName2* ; ... ; *attribNameN*} )<br/>**WP RESET ATTRIBUTES** ( *targetObj* ; *attribColl* )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribColl*})",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"sectionOrSubsection",
					"Object",
					"->",
					"Section or subsection of a 4D Write Pro document"
				],
				[
					"attribName",
					"Text",
					"->",
					"Name of attribute(s) to remove"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"Collection of attributes to remove"
				]
			],
			"Summary": "allows you to reset the value of one or more attributes in the range, element, or document passed as parameter."
		},
		"WP SET ATTRIBUTES": {
			"Syntax": "**WP SET ATTRIBUTES** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP SET ATTRIBUTES** ( *targetObj* ; *attribObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"attribName",
					"Text",
					"->",
					"Name of attribute to set"
				],
				[
					"attribValue",
					"Text, Number, Object, Collection, Picture, Date",
					"->",
					"New attribute value"
				],
				[
					"attribObj",
					"Object",
					"->",
					"Object containing attribute names and their corresponding values to set"
				]
			],
			"Summary": "allows you to set the value of any attribute in a range, element, document."
		},
		"WP Table append row": {
			"Syntax": "**WP Table append row** ( *tableRef* ; *value* {; *value2* ; ... ; *valueN*} )  : Object<br/>**WP Table append row** ( *tableRef* ; *valueColl* ) : Object",
			"Params": [
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"value",
					"Text, Number, Time, Date, Picture, Object",
					"->",
					"Value(s) to set in the row"
				],
				[
					"valueColl",
					"Collection",
					"->",
					"Collection of values to set in the row"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Row range object"
				]
			],
			"Summary": "appends one row to the *tableRef* table, fills it with *value*(s) or a *valueColl* collection, and returns the corresponding row range object."
		},
		"WP Bookmark range": {
			"Syntax": "**WP Bookmark range** ( *wpDoc* ; *bkName* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"bkName",
					"Text",
					"->",
					"Name of bookmark whose range you want to get"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range of bookmark"
				]
			],
			"Summary": "The **WP Bookmark range** command returns a text range object (rangeObj) containing the range for the bookmark with the specified *bkName* in *wpDoc*."
		},
		"WP COMPUTE FORMULAS": {
			"Syntax": "**WP COMPUTE FORMULAS** ( *targetObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				]
			],
			"Summary": "The **WP COMPUTE FORMULAS** command evaluates the formulas in *targetObj*."
		},
		"WP DELETE BOOKMARK": {
			"Syntax": "**WP DELETE BOOKMARK** ( *wpDoc* ; *bkName* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"bkName",
					"Text",
					"->",
					"Name of bookmark to delete"
				]
			],
			"Summary": "The **WP DELETE BOOKMARK** command removes the bookmark named *bkName* from *wpDoc*."
		},
		"WP DELETE FOOTER": {
			"Syntax": "**WP DELETE FOOTER** ( *wpSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section or subsection"
				]
			],
			"Summary": "The **WP DELETE FOOTER** command deletes the footer element associated to the section or subsection defined by the *wpSection* parameter."
		},
		"WP DELETE HEADER": {
			"Syntax": "**WP DELETE HEADER** ( *wpSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section or subsection"
				]
			],
			"Summary": "The **WP DELETE HEADER** command deletes the header element associated to the section or subsection defined by the *wpSection* parameter."
		},
		"WP DELETE PICTURE": {
			"Syntax": "**WP DELETE PICTURE** ( *imgObj* )",
			"Params": [
				[
					"imgObj",
					"Object",
					"->",
					"Image object (inline or anchored)"
				]
			],
			"Summary": "The **WP DELETE PICTURE** command deletes the image defined by the *imgObj* parameter."
		},
		"WP DELETE STYLE SHEET": {
			"Syntax": "**WP DELETE STYLE SHEET** ( *styleSheetObj* ) | (*wpDoc* ; *styleSheetName* )",
			"Params": [
				[
					"styleSheetObj",
					"Object",
					"->",
					"Style sheet object"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"Name of style sheet"
				]
			],
			"Summary": "The **WP DELETE STYLE SHEET** command removes the designated paragraph or character style sheet from the current document."
		},
		"WP DELETE TEXT BOX": {
			"Syntax": "**WP DELETE TEXT BOX** ( *textBox* )",
			"Params": [
				[
					"textBox",
					"Object",
					"->",
					"Text box"
				]
			],
			"Summary": "The **WP DELETE TEXT BOX** command deletes the text box defined by the *textBox* parameter."
		},
		"WP Find all": {
			"Syntax": "**WP Find all** ( *targetObj* ; *searchValue* ; *searchCondition* {; *replaceValue*} )  : Collection",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"searchValue",
					"Text",
					"->",
					"Search value"
				],
				[
					"searchCondition",
					"Integer",
					"->",
					"Search rule(s)"
				],
				[
					"replaceValue",
					"Text",
					"->",
					"Replacement string"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of range objects"
				]
			],
			"Summary": "The **WP Find all** command searches the *targetObj* for the *searchValue* based on the *searchCondition*."
		},
		"WP Find next": {
			"Syntax": "**WP Find next** ( *targetObj* ; *searchAfter* ; *searchValue* ; *searchCondition* {; *replaceValue*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"searchAfter",
					"Object",
					"->",
					"Range after which to begin searching"
				],
				[
					"searchValue",
					"Text",
					"->",
					"Search value"
				],
				[
					"searchCondition",
					"Integer",
					"->",
					"Search rule(s)"
				],
				[
					"replaceValue",
					"Text",
					"->",
					"Replacement string"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range of the found/replaced value"
				]
			],
			"Summary": "The **WP Find next** command searches the *targetObj*, after the *searchAfter* range, for the *searchValue* based on the *searchCondition*."
		},
		"WP Find previous": {
			"Syntax": "**WP Find previous** ( *targetObj* ; *searchBefore* ; *searchValue* ; *searchCondition* {; *replaceValue*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"searchBefore",
					"Object",
					"->",
					"Range before which to begin searching"
				],
				[
					"searchValue",
					"Text",
					"->",
					"Search value"
				],
				[
					"searchCondition",
					"Integer",
					"->",
					"Search rule(s)"
				],
				[
					"replaceValue",
					"Text",
					"->",
					"Replacement string"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range of the found/replaced value"
				]
			],
			"Summary": "The **WP Find previous** command searches the *targetObj*, prior to the *searchBefore* range, for the *searchValue* based on the *searchCondition*."
		},
		"WP FREEZE FORMULAS": {
			"Syntax": "**WP FREEZE FORMULAS** ( *targetObj* {; *recompute*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"recompute",
					"Integer",
					"->",
					"Option to control recomputing"
				]
			],
			"Summary": "The **WP FREEZE FORMULAS** command \"freezes\" the contents of the formulas in *targetObj*."
		},
		"WP Get body": {
			"Syntax": "**WP Get body** ( *wpDoc* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro body"
				]
			],
			"Summary": "The **WP Get body** command returns the body element of the *wpDoc* 4D Write Pro document."
		},
		"WP GET BOOKMARKS": {
			"Syntax": "**WP GET BOOKMARKS** ( *wpDoc* ; *arrBKNames* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"arrBKNames",
					"Text array",
					"&#x1F858;",
					"Array of bookmark names"
				]
			],
			"Summary": "The **WP GET BOOKMARKS** command returns an array containing the names of all bookmarks defined in *wpDoc*."
		},
		"WP Get breaks": {
			"Syntax": "**WP Get breaks** ( *targetObj* {; *breakType*} ) : Collection",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"breakType",
					"Integer",
					"->",
					"Type of breaks to return"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of ranges"
				]
			],
			"Summary": "The **WP Get breaks** command returns the collection of all breaks inserted in *targetObj*."
		},
		"WP Get data context": {
			"Syntax": "**WP Get data context** ( *wpDoc* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Data context object"
				]
			],
			"Summary": "The **WP Get data context** command returns the data context of the wpDoc document."
		},
		"WP Get element by ID": {
			"Syntax": "**WP Get element by ID** ( *wpDoc* ; *ID* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"ID",
					"Text",
					"->",
					"Identifier of the element to retrieve"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro element"
				]
			],
			"Summary": "The **WP Get element by ID** command returns an object containing the element of *wpDoc* passed in the *ID* parameter."
		},
		"WP Get elements": {
			"Syntax": "**WP Get elements** ( *targetObj* {; *elementType*} ) : Collection",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"elementType",
					"Integer",
					"->",
					"Desired type of element to retrieve"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection containing element references"
				]
			],
			"Summary": "The **WP Get elements** command returns a collection of objects containing paragraphs, images, tables and/or rows."
		},
		"WP Get footer": {
			"Syntax": "**WP Get footer** ( *targetObj* ) | (*wpDoc* ; *sectionIndex* {; *sectionSubType*} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro range or section/sub-section element"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"sectionIndex",
					"Integer",
					"->",
					"Section index"
				],
				[
					"sectionSubType",
					"Integer",
					"->",
					"Type of subsection (wk first page, wk left page, or wk right page)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro footer"
				]
			],
			"Summary": "The **WP Get footer** command returns the footer associated to the *targetObj* range or to the specified *sectionIndex* of the *wpDoc* document."
		},
		"WP Get formulas": {
			"Syntax": "**WP Get formulas** ( *targetObj* ) : Collection",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of formulas"
				]
			],
			"Summary": "The **WP Get formulas** command returns a collection of all formulas defined in *targetObj*."
		},
		"WP Get frame": {
			"Syntax": "**WP Get frame** ( {* ;} *wpArea* {; *textBoxID*} ) : Integer",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, wpArea is a form object name (string). If omitted, wpArea is an object field or variable."
				],
				[
					"wpArea",
					"Text",
					"->",
					"Form object name (if * is specified) or 4D Write Pro object variable or field (if * is omitted)"
				],
				[
					"textBoxID",
					"Text",
					"&#x1F858;",
					"ID of the text box (only filled if a text box has the focus)"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Frame where the cursor is currently set"
				]
			],
			"Summary": "The **WP Get frame** command returns the frame where the cursor is currently set within the 4D Write Pro *wpArea* area."
		},
		"WP Get header": {
			"Syntax": "**WP Get header** ( *targetObj* ) | (*wpDoc* ; *sectionIndex* {; *subSectionType*} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro range or section/sub-section element"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"sectionIndex",
					"Integer",
					"->",
					"Section index"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Sub-section type (wk first page, wk left page, or wk right page)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro header"
				]
			],
			"Summary": "The **WP Get header** command returns the header associated to the *targetObj* or to the specified *sectionIndex* of the *wpDoc* document."
		},
		"WP Get links": {
			"Syntax": "**WP Get links** ( *targetObj* ) : Collection",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of links"
				]
			],
			"Summary": "The **WP Get links** command returns the collection of all links defined in *targetObj*."
		},
		"WP Get page count": {
			"Syntax": "**WP Get page count** ( *targetObj* ) : Integer",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"4D Write Pro document or section"
				],
				[
					"Function result",
					"Integer",
					"<-",
					"Number of pages in document"
				]
			],
			"Summary": "The **WP Get page count** command returns the total number of pages defined in the *targetObj* you passed in parameter."
		},
		"WP Get position": {
			"Syntax": "**WP Get position** ( *targetObj* {; *layout*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"layout",
					"Integer",
					"->",
					"4D Write Pro document layout used for evaluation: 0 (default)=4D Write Pro layout, 1=HTML WYSIWYG"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Position information"
				]
			],
			"Summary": "The **WP Get position** command returns an object describing the current position of *targetObj*."
		},
		"WP Get section": {
			"Syntax": "**WP Get section** ( *targetObj* ) | (*wpDoc* ; *sectionIndex* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"sectionIndex",
					"Integer",
					"->",
					"Section index"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro section"
				]
			],
			"Summary": "The **WP Get section** command returns the first section intersected by the *targetObj* range or element, or to the specified *sectionIndex* of the *wpDoc* document."
		},
		"WP Get sections": {
			"Syntax": "**WP Get sections** ( *targetObj* ) : Collection",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of all sections found in targetObj"
				]
			],
			"Summary": "The **WP Get sections** command returns a collection of all sections defined in the *targetObj* parameter."
		},
		"WP Get style sheet": {
			"Syntax": "**WP Get style sheet** ( *wpDoc* ; *styleSheetName* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"Style sheet name"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Style sheet object"
				]
			],
			"Summary": "The **WP Get style sheet** command returns the style sheet object designated by the *styleSheetName*."
		},
		"WP Get style sheets": {
			"Syntax": "**WP Get style sheets** ( *wpDoc* ; *type* ) : Collection",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"type",
					"Integer",
					"->",
					"Type of style sheet"
				],
				[
					"Function result",
					"Collection",
					"<-",
					"Collection of style sheet objects"
				]
			],
			"Summary": "The **WP Get style sheets** command returns a collection of all the style sheet objects of the defined *type* in *wpDoc*."
		},
		"WP Get subsection": {
			"Syntax": "**WP Get subsection** ( *targetObj* ) | (*wpSection* ; *subSectionType* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Subsection type (wk first page, wk left page, or wk right page)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Subsection"
				]
			],
			"Summary": "The **WP Get subsection** command returns first subsection intersected by the *targetObj* range or element, or to the specified *subSectionType* subsection of the *wpSection* section."
		},
		"WP Get text": {
			"Syntax": "**WP Get text** ( *targetObj* {; *expressions*} ) : Text",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"expressions",
					"Number",
					"->",
					"Instructions for expression evaluation"
				],
				[
					"Function result",
					"Text",
					"<-",
					"Text of targetObj"
				]
			],
			"Summary": "The **WP Get text** command retrieves text contents from a 4D Write Pro document within the specified *targetObj*."
		},
		"WP Get view properties": {
			"Syntax": "**WP Get view properties** ( * ; *wpArea* ) : Object",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, wpArea is a form object name (string). If omitted, wpArea is an object field or variable (document)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Form object name (if * is specified) or 4D Write Pro object variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Current view properties"
				]
			],
			"Summary": "The **WP Get view properties** command returns the current view properties for the 4D Write Pro area designated by *wpArea*."
		},
		"WP IMPORT STYLE SHEETS": {
			"Syntax": "**WP IMPORT STYLE SHEETS** ( *targetDoc* ; *sourceDoc* )",
			"Params": [
				[
					"targetDoc",
					"Object",
					"->",
					"4D Write Pro document to receive style sheets"
				],
				[
					"sourceDoc",
					"Object",
					"->",
					"4D Write Pro document to get style sheets from"
				]
			],
			"Summary": "The **WP IMPORT STYLE SHEETS** command imports all of the style sheets from the *sourceDoc* into the *targetDoc*."
		},
		"WP Insert table": {
			"Syntax": "**WP Insert table** ( *targetObj* ; *mode* {; *rangeUpdate* {; *nbCols* {; *nbRows*}}} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"mode",
					"Integer",
					"->",
					"Insertion mode"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Range update mode"
				],
				[
					"nbCols",
					"Integer",
					"->",
					"Number of columns to set in the table"
				],
				[
					"nbRows",
					"Integer",
					"->",
					"Number of rows to set in the table"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Table object"
				]
			],
			"Summary": "The **WP Insert table** command inserts a new table in the *targetObj* according to the specified insertion *mode* and returns the corresponding new table object."
		},
		"WP Is font style supported": {
			"Syntax": "**WP Is font style supported** ( *targetObj* ; *wpFontStyle* ) : Boolean",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"wpFontStyle",
					"Integer",
					"->",
					"Font style constant"
				],
				[
					"Function result",
					"Boolean",
					"<-",
					"True if any part of targetObj supports wpFontStyle; False otherwise"
				]
			],
			"Summary": "The **WP Is font style supported** command returns True if the *wpFontStyle* style is supported by any part of the text in *rangeObj*."
		},
		"WP NEW BOOKMARK": {
			"Syntax": "**WP NEW BOOKMARK** ( *targetObj* ; *bkName* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"bkName",
					"Text",
					"->",
					"Name of bookmark to create"
				]
			],
			"Summary": "The **WP NEW BOOKMARK** command creates a new bookmark named *bkName* based upon the 4D Write Pro *targetObj* in the parent document."
		},
		"WP New footer": {
			"Syntax": "**WP New footer** ( *wpSection* ) : Object",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section or subsection"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro footer"
				]
			],
			"Summary": "The **WP New footer** command creates and returns the footer associated to the section or subsection defined by the *wpSection* parameter."
		},
		"WP New header": {
			"Syntax": "**WP New header** ( *wpSection* ) : Object",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section or subsection"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro header"
				]
			],
			"Summary": "The **WP New header** command creates and returns the header associated to the section or subsection defined by the *wpSection* parameter."
		},
		"WP New style sheet": {
			"Syntax": "**WP New style sheet** ( *wpDoc* ; *styleSheetType* ; *styleSheetName* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"styleSheetType",
					"Integer",
					"->",
					"Type of style sheet"
				],
				[
					"styleSheetName",
					"Text",
					"->",
					"Name of style sheet"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Style sheet object"
				]
			],
			"Summary": "The **WP New style sheet** command creates a new (empty) style sheet object for the designated *wpDoc*."
		},
		"WP New subsection": {
			"Syntax": "**WP New subsection** ( *wpSection* ; *subSectionType* ) : Object",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"4D Write Pro section"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Subsection type (wk first page, wk left page, or wk right page)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"New subsection"
				]
			],
			"Summary": "The **WP New subsection** command creates and returns a new subsection of the *subSectionType* type in the *wpSection* 4D Write Pro section."
		},
		"WP New text box": {
			"Syntax": "**WP New text box** ( *wpDoc* ; *pageNum* ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"pageNum",
					"Number",
					"->",
					"Page number where to anchor the text box"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Text box object"
				]
			],
			"Summary": "The **WP New text box** command creates and returns a new text box object in the page *pageNum* of *wpDoc*."
		},
		"WP New": {
			"Syntax": "**WP New** {( *source* {; *option*} )} : Object",
			"Params": [
				[
					"source",
					"Text, Blob, Object",
					"->",
					"String: HTML source,<br/>BLOB: 4D Write Pro document (.4wp) or legacy 4D Write Blob document (.4w7/.4wt)<br/>Object: range or element or 4D Write Pro document"
				],
				[
					"option",
					"Integer",
					"->",
					"Import option for HTML expressions"
				],
				[
					"Function result",
					"Object",
					"<-",
					"4D Write Pro object"
				]
			],
			"Summary": "creates and returns a 4D Write Pro object."
		},
		"WP Paragraph range": {
			"Syntax": "**WP Paragraph range** ( *targetObj* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range addressing only paragraphs"
				]
			],
			"Summary": "The **WP Paragraph range** command returns a specific range object that addresses only the paragraphs that intersect with the *targetObj* you passed as parameter."
		},
		"WP Picture range": {
			"Syntax": "**WP Picture range** ( *targetObj* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range object containing pictures only"
				]
			],
			"Summary": "The **WP Picture range** command returns a specific range object that addresses only the pictures contained in the *targetObj* you passed as parameter."
		},
		"WP PRINT": {
			"Syntax": "**WP PRINT** ( *wpDoc* {; *printOptions*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"printOptions",
					"Integer",
					"->",
					"Printing options for the 4D Write Pro document"
				]
			],
			"Summary": "The **WP PRINT** command launches a print job for the 4D Write Pro document specified in *wpDoc*, or adds the document to the current print job if it is called between OPEN PRINTING JOB and CLOSE PRINTING JOB."
		},
		"WP SELECT": {
			"Syntax": "**WP SELECT** ( {{* ;} *wpArea*;} {*targetObj*} {; *startRange* ; *endRange*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, wpArea is a form object name (string). If omitted, wpArea is an object field or variable (document)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Form object name (if * is specified) or 4D Write Pro object variable or field (if * is omitted)"
				],
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"startRange",
					"Integer",
					"->",
					"Starting offset of text range"
				],
				[
					"endRange",
					"Integer",
					"->",
					"Ending offset of text range"
				]
			],
			"Summary": "The **WP SELECT** command creates a new selection in the 4D Write Pro *wpArea* area, based upon the *targetObj* or a new range defined by *startRange* and *endRange*."
		},
		"WP Selection range": {
			"Syntax": "**WP Selection range** ( {* ;} *wpArea* ) : Object",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, wpArea is a form object name (string). If omitted, wpArea is an object field or variable."
				],
				[
					"wpArea",
					"Text",
					"->",
					"Form object name (if * is specified) or 4D Write Pro object variable or field (if * is omitted)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range or Picture object"
				]
			],
			"Summary": "The **WP Selection range** command returns a new range object or a picture object based upon the currently selected content in the *wpArea* 4D Write Pro area."
		},
		"WP SET DATA CONTEXT": {
			"Syntax": "**WP SET DATA CONTEXT** ( *wpDoc* ; *contextData* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				],
				[
					"contextData",
					"Object",
					"->",
					"Data to put in the context"
				]
			],
			"Summary": "The **WP SET DATA CONTEXT** command sets the *contextData* object as data context of the *wpDoc* 4D Write Pro document."
		},
		"WP SET FRAME": {
			"Syntax": "**WP SET FRAME** ( {* ;} *wpArea* ; *frameSelector* {; *textBoxID*} )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, wpArea is a form object name (string). If omitted, wpArea is an object field or variable."
				],
				[
					"wpArea",
					"Text",
					"->",
					"Form object name (if * is specified) or 4D Write Pro object variable or field (if * is omitted)"
				],
				[
					"frameSelector",
					"Integer",
					"->",
					"Frame where the cursor should be set"
				],
				[
					"textBoxID",
					"Text",
					"->",
					"Id of the text box where the cursor should be set"
				]
			],
			"Summary": "The **WP SET FRAME** command sets the cursor into the frame designated by *frameSelector* and optionally, *textBoxID*, in the 4D Write Pro *wpArea* area."
		},
		"WP SET LINK": {
			"Syntax": "**WP SET LINK** ( *targetObj* ; *linkObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"linkObj",
					"Object",
					"->",
					"Hyperlink value"
				]
			],
			"Summary": "The **WP SET LINK** applies a hyperlink reference to the *targetObj*."
		},
		"WP SET TEXT": {
			"Syntax": "**WP SET TEXT** ( *targetObj* ; *newText* ; *textPosition* {; *rangeUpdate*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"newText",
					"Text",
					"->",
					"Text to insert"
				],
				[
					"textPosition",
					"Number",
					"->",
					"Insertion position (replace, before, after)"
				],
				[
					"rangeUpdate",
					"Number",
					"->",
					"Includes or excludes the inserted content within the range"
				]
			],
			"Summary": "The **WP SET TEXT** command inserts the text passed in the *newText* parameter as plain text in the *targetObj* at the position designated by the *textPosition* parameter."
		},
		"WP SET VIEW PROPERTIES": {
			"Syntax": "**WP SET VIEW PROPERTIES** ( {* ;} *wpArea* ; *wpViewProps* )",
			"Params": [
				[
					"*",
					"Operator",
					"->",
					"If specified, wpArea is a form object name (string). If omitted, wpArea is an object field or variable (document)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Form object name (if * is specified) or 4D Write Pro object variable or field (if * is omitted)"
				],
				[
					"wpViewProps",
					"Object",
					"->",
					"View properties to modify"
				]
			],
			"Summary": "The **WP SET VIEW PROPERTIES** command allows you to dynamically set one or more view properties of the 4D Write Pro *wpArea* area."
		},
		"WP TABLE DELETE COLUMNS": {
			"Syntax": "**WP TABLE DELETE COLUMNS** ( *targetObj* ) | ( *tableRef* ; *colNumber* {; *numColumns*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"Column number"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"Number of columns to delete (default value = 1)"
				]
			],
			"Summary": "The **WP TABLE DELETE COLUMNS** command removes one or several column(s) from a 4D Write table."
		},
		"WP TABLE DELETE ROWS": {
			"Syntax": "**WP TABLE DELETE ROWS** ( *targetObj* ) | ( *tableRef* ; *rowNumber* {; *numRows*} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"rowNumber",
					"Integer",
					"->",
					"Row index number"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Number of rows to delete (default value = 1)"
				]
			],
			"Summary": "The **WP TABLE DELETE ROWS** command removes one or several row(s) from a 4D Write Pro table."
		},
		"WP Table get cells": {
			"Syntax": "**WP Table get cells** ( *targetObj* ) | ( *tableRef* ; *startCol* ; *startRow* {; *numCols*{; *numRows*}} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"startCol",
					"Integer",
					"->",
					"Position of first cell column"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Position of first column row"
				],
				[
					"numCols",
					"Integer",
					"->",
					"Number of columns to get"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Number of rows to get"
				],
				[
					"Function result",
					"Object",
					"<-",
					"New range containing cells"
				]
			],
			"Summary": "The **WP Table get cells** command returns a new cell range object containing the selection of cells in the *targetObj* or *tableRef* (defined by *startCol*, *startRow*, *numCols*, and *numRows*)."
		},
		"WP Table get columns": {
			"Syntax": "**WP Table get columns** ( *targetObj* ) | ( *tableRef* ; *startCol* {; *numCols*} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"startCol",
					"Integer",
					"->",
					"Position of first column"
				],
				[
					"numCols",
					"Integer",
					"->",
					"Number of columns to get"
				],
				[
					"Function result",
					"Object",
					"<-",
					"New table range containing selected columns"
				]
			],
			"Summary": "The **WP Table get columns** command returns a new cell range object containing the selection of columns from *targetObj* or *tableRef* (defined by *startCol* and *numCols*)."
		},
		"WP Table get rows": {
			"Syntax": "**WP Table get rows** ( *targetObj* ) | ( *tableRef* ; startRow | wk header rows {; *numRows*} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"startRow &#124; wk header rows",
					"Integer, Text",
					"->",
					"Position of first row OR wk header rows"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Number of rows to get"
				],
				[
					"Function result",
					"Object",
					"<-",
					"New row range containing selected rows"
				]
			],
			"Summary": "The **WP Table get rows** command returns a new row range object containing a selection of rows from *targetObj* or *tableRef*."
		},
		"WP Table insert columns": {
			"Syntax": "**WP Table insert columns** ( targetObj | {*tableRef* ; *colNumber*} {; *numColumns*} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"colNumber",
					"Integer",
					"->",
					"Column number"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"Number of columns to insert (default value = 1)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range of table columns"
				]
			],
			"Summary": "The **WP Table insert columns** command inserts one or several column(s) into a 4D Write Pro table."
		},
		"WP Table insert rows": {
			"Syntax": "**WP Table insert rows** ( targetObj | {*tableRef* ; *rowNumber*} {; *numRows*} )  : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"rowNumber",
					"Integer",
					"->",
					"Row index number"
				],
				[
					"numRows",
					"Integer",
					"->",
					"Number of rows to insert (default value = 1)"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range of table rows"
				]
			],
			"Summary": "The **WP Table insert rows** command inserts one or several row(s) into a 4D Write Pro table."
		},
		"WP TABLE MERGE CELLS": {
			"Syntax": "**WP TABLE MERGE CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"Position of first cell column"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Position of first column row"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"Number of columns to merge"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"Number of rows to merge"
				]
			],
			"Summary": "The **WP TABLE MERGE CELLS** command merges the selection of cells in the *targetObj* or *tableRef* (defined by *startColumn*, *startRow*, *columnCount*, and *rowCount*)."
		},
		"WP Table range": {
			"Syntax": "**WP Table range** ( *targetObj* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range object containing tables only"
				]
			],
			"Summary": "**WP Table range** was named **WP Create table range** in previous versions of 4D Write Pro."
		},
		"WP TABLE SPLIT CELLS": {
			"Syntax": "**WP TABLE SPLIT CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Table reference"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"Position of first cell column"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Position of first column row"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"Number of columns to split"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"Number of rows to split"
				]
			],
			"Summary": "The **WP TABLE SPLIT CELLS** command splits the intersecting selection of cells in the *targetObj* or *tableRef* (defined by *startColumn*, *startRow*, *columnCount*, and *rowCount*)."
		},
		"WP Text range": {
			"Syntax": "**WP Text range** ( *targetObj* ; *startRange* ; *endRange* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Range or element or 4D Write Pro document"
				],
				[
					"startRange",
					"Integer",
					"->",
					"Starting offset of range in the area"
				],
				[
					"endRange",
					"Integer",
					"->",
					"Ending offset of range in the area"
				],
				[
					"Function result",
					"Object",
					"<-",
					"Range object"
				]
			],
			"Summary": "The **WP Text range** command returns a new range object containing the selection between *startRange* and *endRange* in the *targetObj*."
		},
		"WP USE PAGE SETUP": {
			"Syntax": "**WP USE PAGE SETUP** ( *wpDoc* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"4D Write Pro document"
				]
			],
			"Summary": "The **WP USE PAGE SETUP** command modifies the current printer page settings based on the 4D Write Pro document attributes for page size and orientation."
		}
	},
	"WebFormItem": {
		"hide()": {
			"Syntax": "**.hide**()",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "hides the component"
		},
		"show()": {
			"Syntax": "**.show**()",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "makes the component visible"
		},
		"addCSSClass()": {
			"Syntax": "**.addCSSClass**(*className* : string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"Name of the CSS class to add to the component"
				]
			],
			"Summary": "adds the class specified in *className* to the component"
		},
		"removeCSSClass()": {
			"Syntax": "**.removeCSSClass**(*className*: string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"Name of the CSS class to remove from the component"
				]
			],
			"Summary": "removes the class specified in *className* from the component"
		}
	},
	"WebServer": {
		"accessKeyDefined": {
			"Syntax": "**.accessKeyDefined** : Boolean",
			"Summary": "true if an access key is defined in the settings of the web server"
		},
		"certificateFolder": {
			"Syntax": "**.certificateFolder** : Text",
			"Summary": "folder where the certificate files are located"
		},
		"characterSet": {
			"Syntax": "**.characterSet** : Number<br/>**.characterSet** : Text",
			"Summary": "character set that the 4D Web Server should use to communicate with browsers connecting to the application"
		},
		"cipherSuite": {
			"Syntax": "**.cipherSuite** : Text",
			"Summary": "cipher list used for the secure protocol"
		},
		"CORSEnabled": {
			"Syntax": "**.CORSEnabled** : Boolean",
			"Summary": "CORS (*Cross-origin resource sharing*) service status for the web server"
		},
		"CORSSettings": {
			"Syntax": "**.CORSSettings** : Collection",
			"Summary": "list of allowed hosts and methods for the CORS service"
		},
		"debugLog": {
			"Syntax": "**.debugLog** : Integer",
			"Summary": "status of the HTTP request log file"
		},
		"defaultHomepage": {
			"Syntax": "**.defaultHomepage** : Text",
			"Summary": "name of the default home page"
		},
		"HSTSEnabled": {
			"Syntax": "**.HSTSEnabled** : Boolean",
			"Summary": "HTTP Strict Transport Security (HSTS) status"
		},
		"HSTSMaxAge": {
			"Syntax": "**.HSTSMaxAge** : Integer",
			"Summary": "maximum length of time (in seconds) that HSTS is active for each new client connection"
		},
		"HTTPCompressionLevel": {
			"Syntax": "**.HTTPCompressionLevel** : Integer",
			"Summary": "compression level for all compressed HTTP exchanges for the 4D HTTP server (client requests or server replies)"
		},
		"HTTPCompressionThreshold": {
			"Syntax": "**.HTTPCompressionThreshold** : Integer",
			"Summary": "size threshold (bytes) for requests below which exchanges should not be compressed"
		},
		"HTTPEnabled": {
			"Syntax": "**.HTTPEnabled** : Boolean",
			"Summary": "HTTP protocol state"
		},
		"HTTPPort": {
			"Syntax": "**.HTTPPort** : Integer",
			"Summary": "listening IP port number for HTTP"
		},
		"HTTPTrace": {
			"Syntax": "**.HTTPTrace** : Boolean",
			"Summary": "activation of `HTTP TRACE`"
		},
		"HTTPSEnabled": {
			"Syntax": "**.HTTPSEnabled** : Boolean",
			"Summary": "HTTPS protocol state"
		},
		"HTTPSPort": {
			"Syntax": "**.HTTPSPort** : Integer",
			"Summary": "listening IP port number for HTTPS"
		},
		"inactiveProcessTimeout": {
			"Syntax": "**.inactiveProcessTimeout** : Integer",
			"Summary": "life duration (in minutes) of the inactive legacy session processes"
		},
		"inactiveSessionTimeout": {
			"Syntax": "**.inactiveSessionTimeout** : Integer",
			"Summary": "life duration (in minutes) of inactive legacy sessions (duration set in cookie)"
		},
		"IPAddressToListen": {
			"Syntax": "**.IPAddressToListen** : Text",
			"Summary": "IP address on which the 4D Web Server will receive HTTP requests"
		},
		"isRunning": {
			"Syntax": "**.isRunning** : Boolean",
			"Summary": "web server running state"
		},
		"keepSession": {
			"Syntax": "**.keepSession** : Boolean",
			"Summary": "`True` if legacy sessions are enabled in the web server, `False` otherwise"
		},
		"logRecording": {
			"Syntax": "**.logRecording** : Integer",
			"Summary": "log requests (logweb.txt) recording value"
		},
		"maxConcurrentProcesses": {
			"Syntax": "**.maxConcurrentProcesses** : Integer",
			"Summary": "maximum number of concurrent web processes supported by the web server"
		},
		"maxRequestSize": {
			"Syntax": "**.maxRequestSize** : Integer",
			"Summary": "maximum size (in bytes) of incoming HTTP requests (POST) that the web server is allowed to process"
		},
		"maxSessions": {
			"Syntax": "**.maxSessions** : Integer",
			"Summary": "maximum number of simultaneous legacy sessions"
		},
		"minTLSVersion": {
			"Syntax": "**.minTLSVersion** : Integer",
			"Summary": "minimum TLS version accepted for connections"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "name of the web server application"
		},
		"openSSLVersion": {
			"Syntax": "**.openSSLVersion** : Text",
			"Summary": "version of the OpenSSL library used"
		},
		"perfectForwardSecrecy": {
			"Syntax": "**.perfectForwardSecrecy** : Boolean",
			"Summary": "PFS availability on the server"
		},
		"rootFolder": {
			"Syntax": "**.rootFolder** : Text",
			"Summary": "path of web server root folder"
		},
		"scalableSession": {
			"Syntax": "**.scalableSession** : Boolean",
			"Summary": "`True` if scalable sessions are used in the web server, and `False` otherwise"
		},
		"sessionCookieDomain": {
			"Syntax": "**.sessionCookieDomain** : Text",
			"Summary": "\"domain\" field of the session cookie"
		},
		"sessionCookieName": {
			"Syntax": "**.sessionCookieName** : Text",
			"Summary": "name of the cookie used for storing the session ID"
		},
		"sessionCookiePath": {
			"Syntax": "**.sessionCookiePath** : Text",
			"Summary": "\"path\" field of the session cookie"
		},
		"sessionCookieSameSite": {
			"Syntax": "**.sessionCookieSameSite** : Text",
			"Summary": "\"SameSite\" session cookie value"
		},
		"sessionIPAddressValidation": {
			"Syntax": "**.sessionIPAddressValidation** : Boolean",
			"Summary": "IP address validation for session cookies"
		},
		"start()": {
			"Syntax": "**.start**() : Object<br/>**.start**( *settings* : Object ) : Object",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Web server settings to set at startup",
					""
				],
				[
					"Result",
					"Object",
					"<-",
					"Status of the web server startup"
				]
			],
			"Summary": "starts the web server on which it is applied"
		},
		"stop()": {
			"Syntax": "**.stop()**",
			"Params": [
				[
					"",
					"",
					"",
					"Does not require any parameters"
				]
			],
			"Summary": "stops the web server on which it is applied"
		}
	},
	"WebSocket": {
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "the type of the response body content"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "the accessor that gets the `connectionHandler` object used to initiate the connection"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "the unique identifier of the connection"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text, Blob, Object",
					"->",
					"Message to be sent"
				]
			],
			"Summary": "sends *message* to the WebSocket server in the defined data type (Text, Blob, or Object)"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "the current connection status (can be \"Connecting\", \"Closing\", \"Closed\", or \"Connected\")"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer { ; *reason* : Text } } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Status code explaining why the connection is being closed"
				],
				[
					"reason",
					"Text",
					"->",
					"The reason why the connection is closing"
				]
			],
			"Summary": "closes the WebSocket connection, along with optional *code* and *reason* parameters"
		},
		"url": {
			"Syntax": "**.url** : Text",
			"Summary": "the URL to which the WebSocket has connected"
		}
	},
	"WebSocketConnection": {
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "the accessor that gets the `connectionHandler` object used to initiate the connection"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "the unique identifier of the connection"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text / Blob / Object",
					"->",
					"The message to send"
				]
			],
			"Summary": "sends a *message* to the client"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "the connection status (can be \"Closing\", \"Closed\" or  \"Connected\")"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer ; *message* : Text } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Error code sent to the client (must be > 3000, otherwise the message is not sent)"
				],
				[
					"message",
					"Text",
					"->",
					"Error message sent to the client"
				]
			],
			"Summary": "forces the connection to close"
		},
		"wss": {
			"Syntax": "**.wss** : 4D.WebSocketServer",
			"Summary": "the `WebSocketServer` parent object of the connection"
		}
	},
	"WebSocketServer": {
		"connections": {
			"Syntax": "**.connections** : Collection",
			"Summary": "all current connections handled by the WebSocket server"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "the type of the data received or sent"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "the accessor that gets the `WSSHandler` object used to initiate the WebSocket server"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "the pattern of the path to access the WebSocket server"
		},
		"terminate()": {
			"Syntax": "**.terminate**()<br/>**.terminate**( *timeout* : Integer )",
			"Params": [
				[
					"timeout",
					"Integer",
					"->",
					"Waiting time in seconds before terminating the WebSocket server"
				]
			],
			"Summary": "closes the WebSocket server"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "True if the WebSocket server is closed"
		}
	},
	"ZipArchive": {
		"root": {
			"Syntax": "**.root** : 4D.ZipFolder",
			"Summary": "a virtual folder providing access to the contents of the ZIP archive"
		}
	},
	"ZipFile": {
		"_inheritedFrom_": "Document"
	},
	"ZipFolder": {
		"_inheritedFrom_": "Directory"
	}
}