{
	"4D": {
		"Blob": {
			"new()": {
				"Syntax": "**4D.Blob.new()** : 4D.Blob<br/>**4D.Blob.new**( *blobScal* : Blob ) : 4D.Blob<br/>**4D.Blob.new**( *blobObj* : 4D.Blob ) : 4D.Blob",
				"Params": [
					[
						"blob",
						"Blob o 4D.Blob",
						"->",
						"Blob a copiar"
					],
					[
						"Resultado",
						"4D.Blob",
						"<-",
						"Nuevo 4D.Blob"
					]
				],
				"Summary": "crea un nuevo objeto `4D.Blob` opcionalmente encapsulando una copia de los datos de otro blob (blob escalar o `4D.Blob`)"
			}
		},
		"CryptoKey": {
			"new()": {
				"Syntax": "**4D.CryptoKey.new**( *settings* : Object ) : 4D.CryptoKey",
				"Params": [
					[
						"settings",
						"Object",
						"->",
						"Parámetros para generar o cargar un par de llaves"
					],
					[
						"Resultado",
						"4D.CryptoKey",
						"<-",
						"Objeto que encapsula un par de llaves de cifrado"
					]
				],
				"Summary": "crea un nuevo objeto `4D.CryptoKey` que encapsula un par de llaves de cifrado"
			}
		},
		"File": {
			"new()": {
				"Syntax": "**4D.File.new** ( *path* : Text { ; *pathType* : Integer } ) : 4D.File<br/>**4D.File.new** ( *fileConstant* : Integer ) : 4D.File"
			}
		},
		"Folder": {
			"new()": {
				"Syntax": "**4D.Folder.new** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**4D.Folder.new** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
				"Summary": "crea y devuelve un nuevo objeto del tipo `4D.Folder`"
			}
		},
		"HTTPAgent": {
			"new()": {
				"Syntax": "**4D.HTTPAgent.new**( { *options* : Object } ) : 4D.HTTPAgent",
				"Params": [
					[
						"options",
						"Object",
						"->",
						"opciones por defecto para el HTTPAgent"
					],
					[
						"Resultado",
						"4D.HTTPAgent",
						"<-",
						"Nuevo objeto HTTPAgent"
					]
				],
				"Summary": "crea un objeto HTTPAgent compartible con las *opciones* definidas, y devuelve un objeto `4D.HTTPAgent`"
			}
		},
		"HTTPRequest": {
			"new()": {
				"Syntax": "**4D.HTTPRequest.new**( *url* : Text { ; *options* : Object } ) : 4D.HTTPRequest",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"URL a la que enviar la solicitud"
					],
					[
						"options",
						"Object",
						"->",
						"Propiedades de configuración de la petición"
					],
					[
						"Resultado",
						"4D.HTTPRequest",
						"<-",
						"Nuevo objeto HTTPRequest"
					]
				],
				"Summary": "crea y envía una solicitud HTTP al servidor HTTP definido en *url* con las opciones definidas, y devuelve un objeto `4D.HTTPRequest`"
			}
		},
		"IMAPTransporter": {
			"new()": {
				"Syntax": "**4D.IMAPTransporter.new**( *server* : Object ) : 4D.IMAPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Información del servidor de correo"
					],
					[
						"Resultado",
						"4D.IMAPTransporter",
						"<-",
						"Objeto transportador IMAP"
					]
				],
				"Summary": "crea y devuelve un nuevo objeto de tipo `4D.IMAPTransporter`"
			}
		},
		"MailAttachment": {
			"new()": {
				"Syntax": "**4D.MailAttachment.new**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**4D.MailAttachment.new**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
				"Params": [
					[
						"file",
						"4D.File",
						"->",
						"Archivo adjunto"
					],
					[
						"zIPFile",
						"4D.ZipFile",
						"->",
						"Archivo zip adjunto"
					],
					[
						"blob",
						"4D.Blob",
						"->",
						"BLOB que contiene el adjunto"
					],
					[
						"path",
						"Text",
						"->",
						"Ruta del archivo adjunto"
					],
					[
						"name",
						"Text",
						"->",
						"Nombre + extensión utilizados por el cliente de correo para designar el archivo adjunto"
					],
					[
						"cid",
						"Text",
						"->",
						"ID del archivo adjunto (sólo en mensajes HTML), o \" \" si no se requiere cid"
					],
					[
						"type",
						"Text",
						"->",
						"Valor del encabezado content-type"
					],
					[
						"disposition",
						"Text",
						"->",
						"Valor del encabezado content-disposition: \"inline\" o \"attachment\"."
					],
					[
						"Resultado",
						"4D.MailAttachment",
						"<-",
						"Objeto adjunto"
					]
				],
				"Summary": "crea y devuelve un nuevo objeto de tipo `4D.MailAttachment`"
			}
		},
		"POP3Transporter": {
			"new()": {
				"Syntax": "**4D.POP3Transporter.new**( *server* : Object ) : 4D.POP3Transporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Información del servidor de correo"
					],
					[
						"Resultado",
						"4D.POP3Transporter",
						"<-",
						"Objeto POP3 transporter"
					]
				],
				"Summary": "crea y devuelve un nuevo objeto de tipo `4D.POP3Transporter`"
			}
		},
		"SMTPTransporter": {
			"new()": {
				"Syntax": "**4D.SMTPTransporter.new**( *server* : Object ) : 4D.SMTPTransporter",
				"Params": [
					[
						"server",
						"Object",
						"->",
						"Información del servidor de correo"
					],
					[
						"Resultado",
						"4D.SMTPTransporter",
						"<-",
						"Objeto SMTP Transporter"
					]
				],
				"Summary": "crea y devuelve un nuevo objeto del tipo `4D.SMTPTransporter`"
			}
		},
		"SystemWorker": {
			"new()": {
				"Syntax": "**4D.SystemWorker.new** ( *commandLine* : Text { ; options : Object } ) : 4D.SystemWorker",
				"Params": [
					[
						"commandLine",
						"Text",
						"->",
						"Línea de comando a ejecutar"
					],
					[
						"options",
						"Object",
						"->",
						"Parámetros worker"
					],
					[
						"resultado",
						"4D.SystemWorker",
						"<-",
						"Nuevo System worker asíncrono o null si el proceso no se ha iniciado"
					]
				],
				"Summary": "crea y devuelve un objeto `4D.SystemWorker` que ejecutará el *commandLine* que pasó como parámetro para lanzar un proceso externo"
			}
		},
		"TCPConnection": {
			"new()": {
				"Syntax": "**4D.TCPConnection.new**( *serverAddress* : Text ; *serverPort* : Number ; *options* : Object  ) : 4D.TCPConnection",
				"params": [
					[
						"serverAddress",
						"Text",
						"->",
						"Nombre de dominio o dirección IP del servidor"
					],
					[
						"serverPort",
						"Integer",
						"->",
						"Número de puerto del servidor"
					],
					[
						"options",
						"Object",
						"->",
						"Configuración opciones para la conexión"
					],
					[
						"Resultado",
						"4D.TCPConnection",
						"<-",
						"Nuevo objeto TCPConnection"
					]
				],
				"Summary": "creates a new TCP connection to the specified *serverAddress* and *serverPort*, using the defined *options*, and returns a `4D.TCPConnection` object"
			}
		},
		"TCPListener": {
			"new()": {
				"Syntax": "**4D.TCPListener.new**( *port* : Number ; *options* : Object  ) : 4D.TCPListener",
				"params": [
					[
						"port",
						"Number",
						"->",
						"Puerto TCP de escucha"
					],
					[
						"options",
						"Object",
						"->",
						"Configuración de opciones para el listener"
					],
					[
						"Resultado",
						"4D.TCPListener",
						"<-",
						"Nuevo objeto TCPListener"
					]
				],
				"Summary": "crea un nuevo servidor TCP escuchando el *puerto* especificado usando las *options* definidas, y devuelve un objeto `4D.TCPListener`"
			}
		},
		"UDPSocket": {
			"new()": {
				"Syntax": "**4D.UDPSocket.new**() : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *options* : Object ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ) : 4D.UDPSocket<br/>**4D.UDPSocket.new**( *port* : Integer ; *options* : Object ) : 4D.UDPSocket",
				"params": [
					[
						"port",
						"Integer",
						"->",
						"Local port used for UDP socket (0 or omitted = find any unused port to use)"
					],
					[
						"options",
						"Object",
						"->",
						"Configuration options for the socket"
					],
					[
						"Resultado",
						"UDPSocket",
						"<-",
						"Nuevo objeto UDPSocket"
					]
				],
				"Summary": "creates a new UDP socket using the defined *options* (if any) on the specified *port* (if any) or on a random unused port, and returns a `4D.UDPSocket` object"
			}
		},
		"Vector": {
			"new()": {
				"Syntax": "**4D.Vector.new** ( *parameter* : Collection ) : 4D.Vector",
				"Params": [
					[
						"parámetros",
						"Colección de reales",
						"->",
						"Colección de números reales que representan un vector"
					],
					[
						"Resultado",
						"4D.Vector",
						"<-",
						"Nuevo objeto vector"
					]
				],
				"Summary": "creates and returns a new object of the `4D.Vector` type"
			}
		},
		"WebSocket": {
			"new()": {
				"Syntax": "**4D.WebSocket.new**( *url* : Text { ; *connectionHandler* : Object } ) : 4D.WebSocket",
				"Params": [
					[
						"url",
						"Text",
						"->",
						"URL a la que conectarse"
					],
					[
						"connectionHandler",
						"Object",
						"->",
						"Objeto que declara las retrollamadas WebSocket"
					],
					[
						"Resultado",
						"4D.WebSocket",
						"<-",
						"Nuevo objeto WebSocket"
					]
				],
				"Summary": "crea y devuelve un nuevo objeto `4D.WebSocket` conectado al servidor WebSocket en la dirección especificada en *url*"
			}
		},
		"WebSocketServer": {
			"new()": {
				"Syntax": "**4D.WebSocketServer.new**( *WSSHandler* : Object { ; *options* : Object } ) : 4D.WebSocketServer",
				"Params": [
					[
						"WSSHandler",
						"Object",
						"->",
						"Objeto de la clase usuario que declara las retrollamadas del servidor WebSocket"
					],
					[
						"options",
						"Object",
						"->",
						"Parámetros de configuración de WebSocket"
					],
					[
						"Resultado",
						"4D.WebSocketServer",
						"<-",
						"Nuevo objeto WebSocketServer"
					]
				],
				"Summary": "crea e inicia un servidor WebSocket que utilizará las retrollamadas *WSSHandler* y (opcionalmente) *options* especificados, y devuelve un objeto `4D.WebSocketServer`"
			}
		}
	},
	"Blob": {
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "devuelve el tamaño de un `4D.Blob`, expresado en bytes."
		},
		"slice()": {
			"Syntax": "**.slice()** : 4D.Blob<br/>**.slice**( *start* : Real ) : 4D.Blob<br/>**.slice**( *start* : Real; *end* : Real ) : 4D.Blob",
			"Params": [
				[
					"start",
					"Real",
					"->",
					"índice del primer byte a incluir en el nuevo `4D.Blob`."
				],
				[
					"end",
					"Real",
					"->",
					"índice del primer byte que no se incluirá en el nuevo `4D.Blob`"
				],
				[
					"Resultado",
					"4D.Blob",
					"<-",
					"Nuevo `4D.Blob`"
				]
			],
			"Summary": "crea y devuelve un `4D.Blob` que hace referencia a los datos de un subconjunto del blob en el que se llama. El blob original no se altera."
		}
	},
	"Class": {
		"isSessionSingleton": {
			"Syntax": "**.isSessionSingleton** : Boolean",
			"Summary": "devuelve `true` si la clase usuario ha sido definida como una clase singleton de sesión"
		},
		"isShared": {
			"Syntax": "**.isShared** : Boolean",
			"Summary": "devuelve `true` si la clase de usuario ha sido definida como clase compartida"
		},
		"isSingleton": {
			"Syntax": "**.isSingleton** : Boolean",
			"Summary": "devuelve `true` si la clase usuario ha sido definida como una clase singleton"
		},
		"me": {
			"Syntax": "**.me** : 4D.Object",
			"Summary": "devuelve la instancia única de la clase singleton `cs.className`"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "contiene el nombre del objeto `4D.Class`"
		},
		"new()": {
			"Syntax": "**.new**( { *...param* : any } ) : 4D.Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la función constructor"
				],
				[
					"Resultado",
					"4D.Object",
					"<-",
					"Nuevo objeto de la clase"
				]
			],
			"Summary": "crea y devuelve un objeto `cs.className` que es una nueva instancia de la clase sobre la que se llama"
		},
		"superclass": {
			"Syntax": "**.superclass** : 4D.Class",
			"Summary": "devuelve la clase padre de la clase"
		}
	},
	"Collection": {
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : any",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Índice del elemento a devolver"
				],
				[
					"Resultado",
					"any",
					"<-",
					"El elemento en ese índice"
				]
			],
			"Summary": "devuelve el elemento en la posición *index*, permitiendo enteros positivos y negativos"
		},
		"average()": {
			"Syntax": "**.average**( {*propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"Real, Undefined",
					"<-",
					"donde:"
				]
			],
			"Summary": "devuelve la media aritmética (promedio) de los valores definidos en la instancia de la colección"
		},
		"clear()": {
			"Syntax": "**.clear()** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección original sin elementos eliminados"
				]
			],
			"Summary": "elimina todos los elementos de la instancia de la colección y devuelve una colección vacía"
		},
		"combine()": {
			"Syntax": "**.combine**( *col2* : Collection {; *index* : Integer } ) : Collection",
			"Params": [
				[
					"col2",
					"Collection",
					"->",
					"Colección a combinar"
				],
				[
					"index",
					"Integer",
					"->",
					"Posición a la que se deben combinar los elementos de inserción en la colección (por defecto=length+1)"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección original sin elementos eliminados"
				]
			],
			"Summary": "inserta elementos *col2* al final o en la posición *index* especificada en la instancia de la colección y devuelve la colección modificada"
		},
		"concat()": {
			"Syntax": "**.concat**( *value* : any { *;...valueN* } ) : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Object, Collection, Date, Time, Boolean, Picture",
					"->",
					"Valores a concatenar. Si *value* es una colección, todos sus elementos se añaden al final de la colección original."
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección original con valores rellenados"
				]
			],
			"Summary": "devuelve una nueva colección que contiene los elementos de la colección original con todos los elementos del parámetro *value* añadidos al final"
		},
		"copy()": {
			"Syntax": "**.copy**() : Collection<br/>**.copy**( *option* : Integer ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithCol* : Collection ) : Collection<br/>**.copy**( *option* : Integer ; *groupWithObj* : Object ) : Collection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck resolve pointers`: resolver punteros antes de copiar,<br/>`ck shared`: devolver una colección compartida"
				],
				[
					"groupWithCol",
					"Collection",
					"->",
					"Colección compartida que se agrupa con la colección resultante"
				],
				[
					"groupWithObj",
					"Object",
					"->",
					"Objeto compartido que se agrupa con la colección resultante"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección original ordenada"
				]
			],
			"Summary": "devuelve una copia profunda de la instancia de la colección"
		},
		"count()": {
			"Syntax": "**.count**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Primer elemento de la colección"
				]
			],
			"Summary": "devuelve el número de elementos no nulos en la colección"
		},
		"countValues()": {
			"Syntax": "**.countValues**( *value* : any {; *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"value",
					"Text, Number, Boolean, Date, Object, Collection",
					"->",
					"Valor a contar"
				],
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor a contar"
				]
			],
			"Summary": "devuelve el número de veces que se encuentra el valor en la colección"
		},
		"distinct()": {
			"Syntax": "**.distinct**( {*options* : Integer} ) : Collection<br/>**.distinct**( *propertyPath* : Text {; *options* : Integer } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta del atributo cuyos valores distintos desea obtener"
				],
				[
					"options",
					"Integer",
					"->",
					"`ck diacritical`, `ck count values`"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Lanzamiento"
				]
			],
			"Summary": "devuelve una colección que contiene sólo valores distintos (diferentes) de la colección original"
		},
		"equal()": {
			"Syntax": "**.equal**( *collection2* : Collection {; *option* : Integer } ) : Boolean",
			"Params": [
				[
					"collection2",
					"Collection",
					"->",
					"Colección a comparar"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck diacritical`: evaluación diacrítica (\"A\" # \"a\" por ejemplo)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Descripción"
				]
			],
			"Summary": "compara recursivamente el contenido de la colección y *collection2* (comparación profunda/deep comparison)"
		},
		"every()": {
			"Syntax": "**.every**( { *startFrom* : Integer ; } *formula* : 4D.Function { ;*...param* : any } ) : Boolean<br/>**.every**( { *startFrom* : Integer ; } *methodName* : Text { ;*...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la prueba en"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la *formula* o *methodName*"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Lanzamiento"
				]
			],
			"Summary": "devuelve **true** si todos los elementos de la colección han superado con éxito una prueba implementada en el objeto *formula* o el método *methodName*"
		},
		"extract()": {
			"Syntax": "**.extract**( *propertyPath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *propertyPath* : Text ;  *targetPath* : Text  { ;...*propertyPathOrTargetPathN* : Text } ) : Collection",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto cuyos valores deben ser extraídos a la nueva colección"
				],
				[
					"targetpath",
					"Text",
					"->",
					"Ruta de la propiedad de destino o nombre de la propiedad"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: incluye la propiedad null en la colección devuelta (se ignora por defecto). Parámetro ignorado si se pasa *targetPath*."
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nueva colección que contiene los valores extraídos"
				]
			],
			"Summary": "crea y devuelve una nueva colección que contiene valores *propertyPath* extraídos de la colección original de objetos"
		},
		"fill()": {
			"Syntax": "**.fill**( *value* : any ) : Collection<br/>**.fill**( *value* : any ;  *startFrom*  : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"value",
					"number, Text, Collection, Object, Date, Boolean",
					"->",
					"Valor a asignar"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice de inicio (incluido)"
				],
				[
					"end",
					"Integer",
					"->",
					"Índice final (no incluido)"
				],
				[
					"Resultado",
					"collection",
					"<-",
					"Colección original con valores rellenados"
				]
			],
			"Summary": "llena la colección con el value especificado, opcionalmente desde el índice startFrom hasta el índice end, y devuelve la colección resultante"
		},
		"filter()": {
			"Syntax": "**.filter**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.filter**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la *formula* o *methodName*"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nueva colección que contiene elementos filtrados (copia superficial)"
				]
			],
			"Summary": "devuelve una nueva colección que contiene todos los elementos de la colección original para los que el resultado de *formula* o *methodName* es **true**"
		},
		"find()": {
			"Syntax": "**.find**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : any<br/>**.find**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : any",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la búsqueda en"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la *formula* o *methodName*"
				],
				[
					"Resultado",
					"any",
					"<-",
					"La función `.multiSort()` permite realizar una ordenación sincronizada multinivel sobre un conjunto de colecciones."
				]
			],
			"Summary": "devuelve el primer valor de la colección para el que el resultado de *formula* o de *methodName*, aplicado a cada elemento, devuelve **true**"
		},
		"multiSort()": {
			"Summary": "permite realizar una ordenación sincronizada multinivel sobre un conjunto de colecciones",
			"Syntax": "**.multiSort**() : Collection<br/>**.multiSort**( *colsToSort* : Collection ) : Collection<br/>**.multiSort**( *formula* : 4D.Function ; *colsToSort* : Collection ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"colsToSort",
					"Collection",
					"->",
					"Colección de colecciones y/u objetos con propiedades {`collection`:*colToSort*;`order`:`ck ascending` o `ck descending`}"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"La nueva colección"
				]
			]
		},
		"findIndex()": {
			"Syntax": "**.findIndex**( { *startFrom* : Integer ; }  *formula* : 4D.Function { ; *...param* : any } ) : Integer<br/>**.findIndex**( { *startFrom* : Integer ; }  *methodName* : Text { ; *...param* : any } ) : Integer",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la búsqueda en"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la *formula* o *methodName*"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Índice del primer valor encontrado, o -1 si no se encuentra"
				]
			],
			"Summary": "devuelve el índice, en la colección, del primer valor para el que *formula* o *methodName*, aplicados sobre cada elemento, devuelven **true**"
		},
		"first()": {
			"Syntax": "**.first**() : any",
			"Params": [
				[
					"Resultado",
					"any",
					"<-",
					"Primer elemento de la colección"
				]
			],
			"Summary": "devuelve el primer elemento de la colección"
		},
		"flat()": {
			"Syntax": "**.flat**( { *depth* : Integer } ) : Collection",
			"Params": [
				[
					"depth",
					"Integer",
					"->",
					"A qué profundidad debe aplanarse una estructura de colección anidada. Por defecto=1"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección aplanada"
				]
			],
			"Summary": "crea una nueva colección con todos los elementos de la subcolección concatenados recursivamente hasta la *depth* especificada"
		},
		"flatMap()": {
			"Syntax": "**.flatMap**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.flatMap**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la *formula* o *methodName*"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Comentario"
				]
			],
			"Summary": "crea una nueva colección basada en el resultado de la llamada a la función *formula* 4D o al método *methodName* sobre cada elemento de la colección original y aplanada por una profundidad de 1"
		},
		"includes()": {
			"Syntax": "**.includes**( *toSearch* : expression { ; *startFrom* : Integer } ) : Boolean",
			"Params": [
				[
					"toSearch",
					"expresión",
					"->",
					"Expresión a buscar en la colección"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la búsqueda en"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si *toSearch* se encuentra en la colección"
				]
			],
			"Summary": "devuelve True si la expresión *toSearch* se encuentra entre los elementos de la colección, en caso contrario False"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**(  *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"expresión",
					"->",
					"Expresión a buscar en la colección"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la búsqueda en"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Descripción"
				]
			],
			"Summary": "busca la expresión *toSearch* entre los elementos de la colección y devuelve el índice de la primera ocurrencia encontrada, o -1 si no se encontró"
		},
		"indices()": {
			"Syntax": "**.indices**(  *queryString* : Text { ; *...value* : any } ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Criterio de búsqueda"
				],
				[
					"value",
					"any",
					"->",
					"Valor(es) a comparar cuando se utiliza(n) marcador(es) de posición"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Índice(s) de elementos que coinciden con queryString en la colección"
				]
			],
			"Summary": "devuelve índices, en la colección original, de elementos de la colección de objetos que coinciden con las condiciones de búsqueda *queryString*"
		},
		"insert()": {
			"Syntax": "**.insert**( *index* : Integer ; *element* : any ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Dónde insertar el elemento"
				],
				[
					"element",
					"any",
					"->",
					"Elemento a insertar en la colección"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección original que contiene los elementos insertados"
				]
			],
			"Summary": "inserta *element* en la posición *index* especificada en la instancia de la colección y devuelve la colección modificada"
		},
		"join()": {
			"Syntax": "**.join**( *delimiter* : Text { ; *option* : Integer } ) : Text",
			"Params": [
				[
					"delimiter",
					"Text",
					"->",
					"Separador a utilizar entre elementos"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck ignore null or empty`: ignorar las cadenas nulas y vacías en el resultado"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena que contiene todos los elementos de la colección, separados por un delimitador"
				]
			],
			"Summary": "convierte todos los elementos de la colección en cadenas y las concatena utilizando la cadena delimiter especificada como separador"
		},
		"last()": {
			"Syntax": "**.last**() : any",
			"Params": [
				[
					"Resultado",
					"any",
					"<-",
					"Último elemento de la colección"
				]
			],
			"Summary": "devuelve el último elemento de la colección"
		},
		"lastIndexOf()": {
			"Syntax": "**.lastIndexOf**( *toSearch* : expression { ; *startFrom* : Integer } ) : Integer",
			"Params": [
				[
					"toSearch",
					"expresión",
					"->",
					"El elemento que se va a buscar dentro de la colección"
				],
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la búsqueda en"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Índice de la última ocurrencia de toSearch en la colección, -1 si no se encuentra"
				]
			],
			"Summary": "busca la expresión *toSearch* entre los elementos de la colección y devuelve el índice de la última ocurrencia"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "devuelve el número de elementos en la colección"
		},
		"map()": {
			"Syntax": "**.map**( *formula* : 4D.Function { ; *...param* : any } ) : Collection<br/>**.map**( *methodName* : Text { ; *...param* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar a la *formula* o *methodName*"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"`.pop()`, utilizado junto con `.push()`, puede utilizarse para implementar una funcionalidad primera entrada última salida de tratamiento de datos apilados:"
				]
			],
			"Summary": "crea una nueva colección basada en el resultado de la llamada a la función *formula* 4D o al método *methodName* sobre cada elemento de la colección original"
		},
		"max()": {
			"Syntax": "**.max**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto que se utilizará para la evaluación"
				],
				[
					"Resultado",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"Valor máximo en la colección"
				]
			],
			"Summary": "devuelve el elemento con el valor más alto de la colección"
		},
		"min()": {
			"Syntax": "**.min**( { *propertyPath* : Text } ) : any",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto que se utilizará para la evaluación"
				],
				[
					"Resultado",
					"Boolean, Text, Number, Collection, Object, Date",
					"<-",
					"Valor mínimo en la colección"
				]
			],
			"Summary": "devuelve el elemento con el valor más pequeño de la colección"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( ) : Collection<br/>**.orderBy**( *pathStrings* : Text ) : Collection<br/>**.orderBy**( *pathObjects* : Collection ) : Collection<br/>**.orderBy**( *ascOrDesc* : Integer ) : Collection",
			"Params": [
				[
					"pathStrings",
					"Text",
					"->",
					"Ruta(s) de propiedad(es) a utilizar para ordenar la colección"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"Colección de objetos criterio"
				],
				[
					"ascOrDesc",
					"Integer",
					"->",
					"Ejemplo 1"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Copia ordenada de la colección (copia superficial)"
				]
			],
			"Summary": "devuelve una nueva colección que contiene todos los elementos de la colección en el orden especificado"
		},
		"orderByMethod()": {
			"Syntax": "**.orderByMethod**( *formula* : 4D.Function { ; ...*extraParam* : expression } ) : Collection<br/>**.orderByMethod**( *methodName* : Text { ; ...*extraParam* : expression } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"extraParam",
					"any",
					"->",
					"Parámetro(s) a pasar"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Copia ordenada de la colección (copia superficial)"
				]
			],
			"Summary": "devuelve una nueva colección que contiene todos los elementos de la colección en el orden definido mediante la función *formula* 4D o el método *methodName*"
		},
		"pop()": {
			"Syntax": "**.pop()** : any",
			"Params": [
				[
					"Resultado",
					"any",
					"<-",
					"Último elemento de la colección"
				]
			],
			"Summary": "elimina el último elemento de la colección y lo devuelve como resultado de la función"
		},
		"push()": {
			"Syntax": "**.push**( *element* : any { ;...*elementN* } ) : Collection",
			"Params": [
				[
					"element",
					"any",
					"->",
					"Elemento(s) a añadir a la colección"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección que contiene los elementos añadidos"
				]
			],
			"Summary": "añade uno o más *elemento*(s) al final de la instancia de la colección y devuelve la colección editada"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text ) : Collection<br/>**.query**( *queryString* : Text ; *...value* : any ) : Collection<br/>**.query**( *queryString* : Text ; *querySettings* : Object ) : Collection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Criterio de búsqueda"
				],
				[
					"value",
					"any",
					"->",
					"Valor(es) a comparar cuando se utiliza(n) marcador(es) de posición"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Opciones de búsqueda: parámetros, atributos"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Descripción"
				]
			],
			"Summary": "devuelve todos los elementos de una colección de objetos que coinciden con las condiciones de búsqueda"
		},
		"reduce()": {
			"Syntax": "**.reduce**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduce**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"Colección que contiene los elementos añadidos"
				],
				[
					"param",
					"expresión",
					"->",
					"Parámetro(s) a pasar"
				],
				[
					"Resultado",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"donde:"
				]
			],
			"Summary": "aplica la retrollamada *formula* o *methodName* a un acumulador y cada elemento de la colección (de izquierda a derecha) para reducirlo a un único valor"
		},
		"reduceRight()": {
			"Syntax": "**.reduceRight**( *formula* : 4D.Function { ; *initValue* : any { ; *...param* : expression }} ) : any<br/>**.reduceRight**( *methodName* : Text { ; *initValue* : any { ; *...param* : expression }} ) : any",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"initValue",
					"Text, Number, Object, Collection, Date, Boolean",
					"->",
					"Colección que contiene los elementos añadidos"
				],
				[
					"param",
					"expresión",
					"->",
					"Parámetro(s) a pasar"
				],
				[
					"Resultado",
					"Text, Number, Object, Collection, Date, Boolean",
					"<-",
					"donde:"
				]
			],
			"Summary": "aplica la retrollamada *formula* o *methodName* contra un acumulador y cada elemento de la colección (de derecha a izquierda) para reducirlo a un único valor"
		},
		"remove()": {
			"Syntax": "**.remove**( *index* : Integer { ; *howMany* : Integer } ) : Collection",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Elemento en el que se inicia la eliminación"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Número de elementos a eliminar, o 1 elemento si se omite"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección modificada sin elemento(s) eliminado(s)"
				]
			],
			"Summary": "elimina uno o más elementos a partir de la posición *index* especificada en la colección y devuelve la colección editada"
		},
		"resize()": {
			"Syntax": "**.resize**( *size* : Integer { ; *defaultValue* : any } ) : Collection",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Nuevo tamaño de la colección"
				],
				[
					"defaultValue",
					"Number, Text, Object, Collection, Date, Boolean",
					"->",
					"Valor por defecto para llenar nuevos elementos"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"o *methodName*, el nombre de un método proyecto (texto)."
				]
			],
			"Summary": "ajusta la longitud de la colección al nuevo tamaño especificado y devuelve la colección redimensionada"
		},
		"reverse()": {
			"Syntax": "**.reverse( )** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"(obligatorio si se ha utilizado un método) *$1.result* (booleano): **true** si la evaluación del valor del elemento tiene éxito, **false** en caso contrario."
				]
			],
			"Summary": "devuelve una copia profunda de la colección con todos sus elementos en orden inverso"
		},
		"shift()": {
			"Syntax": "**.shift()** : any",
			"Params": [
				[
					"Resultado",
					"any",
					"<-",
					"Primer elemento de la colección"
				]
			],
			"Summary": "elimina el primer elemento de la colección y lo devuelve como resultado de la función"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : Collection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice de inicio (incluido)"
				],
				[
					"end",
					"Integer",
					"->",
					"Índice final (no incluido)"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Resultado"
				]
			],
			"Summary": "devuelve una parte de una colección en una nueva colección"
		},
		"some()": {
			"Syntax": "**.some**( { *startFrom* : Integer ; } *formula* : 4D.Function { ; *...param* : any } ) : Boolean<br/>**.some**( { *startFrom* : Integer ; } *methodName* : Text { ; *...param* : any } ) : Boolean",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la prueba en"
				],
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si al menos un elemento ha superado la prueba con éxito"
				]
			],
			"Summary": "devuelve true si al menos un elemento de la colección ha pasado con éxito una prueba implementada en el código *formula* o *methodName* suministrado"
		},
		"sort()": {
			"Syntax": "**.sort**() : Collection<br/>**.sort**( *formula* : 4D.Function { ; *...extraParam* : any } ) : Collection<br/>**.sort**( *methodName* : Text { ; *...extraParam* : any } ) : Collection",
			"Params": [
				[
					"formula",
					"4D.Function",
					"->",
					"Objeto fórmula"
				],
				[
					"methodName",
					"Text",
					"->",
					"Nombre de un método"
				],
				[
					"extraParam",
					"any",
					"->",
					"Parámetros del método"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"La nueva colección"
				]
			],
			"Summary": "ordena los elementos de la colección original y además devuelve la colección ordenada"
		},
		"sum()": {
			"Syntax": "**.sum**( { *propertyPath* : Text } ) : Real",
			"Params": [
				[
					"propertyPath",
					"Text",
					"->",
					"Ruta de la propiedad del objeto que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"`.pop()`, utilizado junto con `.push()`, puede utilizarse para implementar una funcionalidad primera entrada última salida de tratamiento de datos apilados:"
				]
			],
			"Summary": "devuelve la suma de todos los valores de la instancia de la colección"
		},
		"unshift()": {
			"Syntax": "**.unshift**( *value* : any { ;...*valueN* : any } ) : Collection",
			"Params": [
				[
					"value",
					"Text, Number, Object, Collection, Date",
					"->",
					"Valor(es) a insertar al principio de la colección"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Colección que contiene los elementos añadidos"
				],
				[
					"",
					"",
					"",
					""
				]
			],
			"Summary": "inserta el *valor*(es) dado al principio de la colección"
		}
	},
	"CryptoKey": {
		"curve": {
			"Syntax": "**.curve** : Text",
			"Summary": "nombre de la curva normalizada de la llave"
		},
		"decrypt()": {
			"Syntax": "**.decrypt**( *message* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Cadena mensaje que se descodificará utilizando `options.encodingEncrypted` y se descifrará."
				],
				[
					"options",
					"Object",
					"->",
					"Opciones de decodificación"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado"
				]
			],
			"Summary": "descifra el parámetro *message* utilizando la llave **privada**"
		},
		"encrypt()": {
			"Syntax": "**.encrypt**( *message* : Text ; *options* : Object ) : Text",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Cadena mensaje a codificar utilizando `options.encodingDecrypted` y encriptada."
				],
				[
					"options",
					"Object",
					"->",
					"Opciones de codificación"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Mensaje encriptado y codificado utilizando la opción `options.encodingEncrypted`"
				]
			],
			"Summary": "cifra el parámetro *message* utilizando la llave **pública**"
		},
		"getPrivateKey()": {
			"Syntax": "**.getPrivateKey()** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Llave privada en formato PEM"
				]
			],
			"Summary": "devuelve la llave privada del objeto `CryptoKey`"
		},
		"getPublicKey()": {
			"Syntax": "**.getPublicKey**() : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Llave pública en formato PEM"
				]
			],
			"Summary": "devuelve la llave pública del objeto `CryptoKey`"
		},
		"pem": {
			"Syntax": "**.pem** : Text",
			"Summary": "PEM definition of an encryption key to load. If the key is a private key, the RSA or ECDSA public key will be deduced from it."
		},
		"sign()": {
			"Syntax": ".**sign** (*message* : Text ; *options* : Object) : Text<br/>.**sign** (*message* : Blob ; *options* : Object) : Text",
			"Params": [
				[
					"message",
					"Texto O Blob",
					"->",
					"Mensaje a firmar"
				],
				[
					"options",
					"Object",
					"->",
					"Opciones de firma"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Firma en representación Base64 o Base64URL, según la opción \"encoding"
				]
			],
			"Summary": "firma la representación utf8 de una cadena *message* o Blob"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "el tamaño de la llave en bits"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "nombre del tipo de llave - \"RSA\", \"ECDSA\", \"PEM\""
		},
		"verify()": {
			"Syntax": "**.verify**( *message* : Text ; *signature* : Text ; *options* : Object) : Object<br/>*.verify**( *message* : Blob ; *signature* : Text ; *options* : Object) : Object",
			"Params": [
				[
					"message",
					"Texto O Blob",
					"->",
					"Mensaje utilizado para producir la firma"
				],
				[
					"signature",
					"Text",
					"->",
					"Firma a verificar, en representación Base64 o Base64URL, según el valor de `options.encoding`"
				],
				[
					"options",
					"Object",
					"->",
					"Opciones de firma"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la verificación"
				]
			],
			"Summary": "verifica la firma base64 contra la representación utf8 del *message*"
		}
	},
	"DataClass": {
		"all()": {
			"Syntax": "**.all** ( { *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Opciones de construcción: context"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Referencias sobre todas las entidades relacionadas con la clase de datos"
				]
			],
			"Summary": "consulta el datastore para encontrar todas las entidades relacionadas con la dataclass y las devuelve como una selección de entidades"
		},
		"clearRemoteCache()": {
			"Syntax": "**.clearRemoteCache()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "vacía la caché ORDA de una dataclass"
		},
		"fromCollection()": {
			"Syntax": "**.fromCollection**( *objectCol* : Collection { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"objectCol",
					"Collection",
					"->",
					"Colección de objetos a mapear con entidades"
				],
				[
					"settings",
					"Object",
					"->",
					"Opciones de construcción: context"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Selección de entidades llenadas de la colección"
				]
			],
			"Summary": "actualiza o crea entidades en la clase de datos según la colección de objetos *objectCol*, y devuelve la selección de entidades correspondiente"
		},
		"get()": {
			"Syntax": "**.get**( *primaryKey* : Integer { ; *settings* : Object } ) : 4D.Entity<br/>**.get**( *primaryKey* : Text { ; *settings* : Object } ) : 4D.Entity",
			"Params": [
				[
					"primaryKey",
					"Integer OR Text",
					"->",
					"Valor de la llave primaria de la entidad a recuperar"
				],
				[
					"settings",
					"Object",
					"->",
					"Opciones de construcción: context"
				],
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Entidad que coincide con la llave primaria designada"
				]
			],
			"Summary": "consulta la clase de datos para recuperar la entidad que coincide con el parámetro *primaryKey*"
		},
		"getCount()": {
			"Syntax": "**.getCount()** : Integer",
			"Params": [
				[
					"resultado",
					"Integer",
					"<-",
					"Número de entidades en la dataclass"
				]
			],
			"Summary": "devuelve el número de entidades de una clase de datos"
		},
		"getDataStore()": {
			"Syntax": "**.getDataStore()** : cs.DataStore",
			"Params": [
				[
					"Resultado",
					"cs.DataStore",
					"<-",
					"Datastore de la dataclass"
				]
			],
			"Summary": "devuelve el datastore para la clase de datos especificada"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre la clase de datos"
				]
			],
			"Summary": "devuelve un objeto que suministra información sobre la clase de datos"
		},
		"getRemoteCache()": {
			"Syntax": "**.getRemoteCache**() : Object",
			"Params": [
				[
					"resultado",
					"Object",
					"<-",
					"Objeto que describe el contenido de la caché ORDA para la clase de datos."
				]
			],
			"Summary": "devuelve un objeto que contiene el contenido de la caché ORDA para una clase de datos"
		},
		"new()": {
			"Syntax": "**.new()** : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Nueva entidad que coincide con la clase de datos"
				]
			],
			"Summary": "crea en memoria y devuelve una nueva entidad en blanco relacionada con la Dataclass"
		},
		"newSelection()": {
			"Syntax": "**.newSelection**( { *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered`: crea una entity selection ordenada,<br/>`dk non ordered`: crea una entity selection no ordenada (por defecto si se omite)"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva selección de entidades en blanco relacionadas con la clase de datos"
				]
			],
			"Summary": "crea una nueva selección de entidades en blanco, no compartible, relacionada con la clase de datos, en memoria"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Criterios de búsqueda como cadena"
				],
				[
					"formula",
					"Object",
					"->",
					"Criterios de búsqueda como objeto fórmula"
				],
				[
					"value",
					"any",
					"->",
					"Valor(es) a utilizar para los marcadores de posición indexados"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Opciones de búsqueda: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva selección de entidades formada por las entidades de la clase de datos que cumplen los criterios de búsqueda especificados en *queryString* o *formula*"
				]
			],
			"Summary": "busca las entidades que cumplan con los criterios de búsqueda especificados en *queryString* o *formula* y (opcionalmente) *value*(s)"
		},
		"setRemoteCacheSettings()": {
			"Syntax": "**.setRemoteCacheSettings**(*settings* : Object)",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Objeto que define el tiempo de espera y el tamaño máximo de la caché ORDA para el dataclass."
				]
			],
			"Summary": "define el tiempo de espera y el tamaño máximo de la caché ORDA para una dataclass."
		}
	},
	"DataStore": {
		"cancelTransaction()": {
			"Syntax": "**.cancelTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "cancela la transacción"
		},
		"clearAllRemoteContexts()": {
			"Syntax": "**.clearAllRemoteContexts()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "borra todos los atributos de todos los contextos activos en el datastore"
		},
		"encryptionStatus()": {
			"Syntax": "**.encryptionStatus()**: Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre el cifrado del almacén de datos actual y de cada tabla"
				]
			],
			"Summary": "devuelve un objeto que suministra el estado de cifrado del archivo de datos actual"
		},
		"flushAndLock()": {
			"Syntax": "**.flushAndLock()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "vacía la caché del datastore local e impide que otros procesos realicen operaciones de escritura en la base de datos"
		},
		"getAllRemoteContexts()": {
			"Syntax": "**.getAllRemoteContexts()** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos contextos de optimización"
				]
			],
			"Summary": "devuelve una colección de objetos que contienen información sobre todos los contextos de optimización activos en el datastore"
		},
		"getGlobalStamp()": {
			"Syntax": "**.getGlobalStamp**() : Real",
			"Params": [
				[
					"Resultado",
					"Real",
					"<-",
					"Valor actual del marcador de modificación global"
				]
			],
			"Summary": "returns the current value of the global modification stamp of the datastore"
		},
		"getInfo()": {
			"Syntax": "**.getInfo()**: Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Propiedades del almacén de datos"
				]
			],
			"Summary": "devuelve un objeto que proporciona información sobre el datastore"
		},
		"getRemoteContextInfo()": {
			"Syntax": "**.getRemoteContextInfo**(*contextName* : Text) : Object",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"Nombre del contexto"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Descripción del contexto"
				]
			],
			"Summary": "devuelve un objeto que contiene información sobre el contexto de optimización *contextName* en el datastore"
		},
		"getRequestLog()": {
			"Syntax": "**.getRequestLog()** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos, donde cada objeto describe una solicitud"
				]
			],
			"Summary": "devuelve las peticiones ORDA registradas en memoria del lado del cliente"
		},
		"isAdminProtected()": {
			"Syntax": "**.isAdminProtected()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el acceso al Explorador de Datos está desactivado, False si está activado (por defecto)"
				]
			],
			"Summary": "devuelve `True` si se ha desactivado el acceso al Data Explorer para la sesión de trabajo"
		},
		"locked()": {
			"Syntax": "**.locked()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si bloqueado"
				]
			],
			"Summary": "devuelve True si el datastore local está bloqueado actualmente"
		},
		"makeSelectionsAlterable()": {
			"Syntax": "**.makeSelectionsAlterable()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "define todas las selecciones de entidades como alterables por defecto en los datastores de la aplicación actual"
		},
		"provideDataKey()": {
			"Syntax": "**.provideDataKey**( *curPassPhrase* : Text ) : Object <br/>**.provideDataKey**( *curDataKey* : Object ) : Object",
			"Params": [
				[
					"curPassPhrase",
					"Text",
					"->",
					"Frase de cifrado actual"
				],
				[
					"curDataKey",
					"Object",
					"->",
					"Llave de encriptación de datos actual"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Resultado de la coincidencia de la llave de encriptación"
				]
			],
			"Summary": "permite suministrar una llave de cifrado de datos para el archivo de datos actual del datastore y detecta si la llave coincide con los datos cifrados"
		},
		"setAdminProtection()": {
			"Syntax": "**.setAdminProtection**( *status* : Boolean )",
			"Params": [
				[
					"status",
					"Boolean",
					"->",
					"True para desactivar el acceso Data Explorer a los datos del puerto `webAdmin`, False (por defecto) para otorgar el acceso"
				]
			],
			"Summary": "permite deshabilitar cualquier acceso a datos en el puerto web admin, incluso para el Explorador de datos en sesiones `WebAdmin`"
		},
		"setGlobalStamp()": {
			"Syntax": "**.setGlobalStamp**( *newStamp* : Real)",
			"Params": [
				[
					"newStamp",
					"Real",
					"->",
					"Nuevo valor del marcador de modificación global"
				]
			],
			"Summary": "define *newStamp* como nuevo valor para del marcador de modificación global actual del datastore"
		},
		"setRemoteContextInfo()": {
			"Syntax": "**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer}})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassName* : Text; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributes* : Text {; *contextType* : Text { ; *pageLength* : Integer }})<br/>**.setRemoteContextInfo**( *contextName* : Text ; *dataClassObject* : 4D.DataClass ; *attributesColl* : Collection {; *contextType* : Text { ; *pageLength* : Integer }} )",
			"Params": [
				[
					"contextName",
					"Text",
					"->",
					"Nombre del contexto"
				],
				[
					"dataClassName",
					"Text",
					"->",
					"Nombre de la dataclass"
				],
				[
					"dataClassObject",
					"4D.DataClass",
					"->",
					"dataclass object (e.g datastore. Employee)"
				],
				[
					"attributes",
					"Text",
					"->",
					"Lista de atributos separados por comas"
				],
				[
					"attributesColl",
					"Collection",
					"->",
					"Colección de nombres de atributos (text)"
				],
				[
					"contextType",
					"Text",
					"->",
					"Si se suministra, el valor debe ser \"main\" o \"currentItem\""
				],
				[
					"pageLength",
					"Integer",
					"->",
					"Longitud de la página de la selección de entidades asociada al contexto (por defecto es 80)"
				]
			],
			"Summary": "vincula los atributos de la dataclass especificada al contexto de optimización *contextName*"
		},
		"startRequestLog()": {
			"Syntax": "**.startRequestLog**()<br/>**.startRequestLog**( *file* : 4D.File )<br/>**.startRequestLog**( *file* : 4D.File ; *options* : Integer )<br/>**.startRequestLog**( *reqNum* : Integer )",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"Objeto File"
				],
				[
					"options",
					"Integer",
					"->",
					"Opción de registro de respuesta (servidor únicamente)"
				],
				[
					"reqNum",
					"Integer",
					"->",
					"Número de peticiones a mantener en memoria (cliente únicamente)"
				]
			],
			"Summary": "inicia el registro de peticiones ORDA del lado del cliente o del lado del servidor"
		},
		"startTransaction()": {
			"Syntax": "**.startTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "inicia una transacción en el proceso actual en la base de datos que coincide con el datastore al que se aplica"
		},
		"stopRequestLog()": {
			"Syntax": "**.stopRequestLog()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "detiene cualquier registro de las peticiones ORDA en la máquina en la que se llama (cliente o servidor)"
		},
		"unlock()": {
			"Syntax": "**.unlock()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "elimina el bloqueo actual de las operaciones de escritura en el datastore, si se ha definido en el mismo proceso"
		},
		"validateTransaction()": {
			"Syntax": "**.validateTransaction()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "acepta la transacción"
		}
	},
	"Directory": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "la fecha de creación de la carpeta"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "la hora de creación de la carpeta"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "true si la carpeta existe en disco"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "devuelve la extensión del nombre de la carpeta (si la hay)"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "devuelve el nombre completo de la carpeta, incluyendo su extensión (si la hay)"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "true si la carpeta está configurada como \"oculta\" a nivel de sistema"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "siempre **false** para un objeto `Folder`"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "siempre **false** para una carpeta"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "siempre **true** para una carpeta"
		},
		"isPackage": {
			"Syntax": "**.isPackage** : Boolean",
			"Summary": "true si la carpeta es un paquete en macOS (y existe en el disco)"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "la fecha de la última modificación de la carpeta"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "la hora de la última modificación de la carpeta"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "el nombre de la carpeta, sin extensión (si la hay)"
		},
		"original": {
			"Syntax": "**.original** : 4D.Folder",
			"Summary": "el mismo objeto de la carpeta"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "el objeto carpeta padre de la carpeta"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "la ruta POSIX de la carpeta"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "la ruta del archivo expresada con la sintaxis de la plataforma actual"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Carpeta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nombre para la copia"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"`fk overwrite` para sustituir los elementos existentes"
				],
				[
					"Resultado",
					"4D.Folder",
					"<-",
					"Carpeta o archivo copiado"
				]
			],
			"Summary": "copia el objeto `Folder` en la *destinationFolder* especificada"
		},
		"file()": {
			"Syntax": "**.file**( *path* : Text ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Ruta POSIX relativa"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Objeto `File` (null si la ruta es inválida)"
				]
			],
			"Summary": "un objeto `File` dentro del objeto `Folder` y devuelve su referencia"
		},
		"files()": {
			"Syntax": "**.files**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"Opciones de la lista de archivos"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos de archivo hijo"
				]
			],
			"Summary": "una colección de objetos `File` contenidos en la carpeta"
		},
		"folder()": {
			"Syntax": "**.folder**( *path* : Text ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Ruta POSIX relativa"
				],
				[
					"Resultado",
					"4D.Folder",
					"<-",
					"Objeto carpeta creado (null si *path* es inválido)"
				]
			],
			"Summary": "crea un objeto `Folder` dentro del objeto `Folder` padre y devuelve su referencia"
		},
		"folders()": {
			"Syntax": "**.folders**( { *options* : Integer } ) : Collection",
			"Params": [
				[
					"options",
					"Integer",
					"->",
					"Opciones de la lista de carpetas"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos de carpeta hijo"
				]
			],
			"Summary": "devuelve una colección de objetos `Folder` contenidos en la carpeta padre"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Longitud del lado de la imagen devuelta (píxeles)"
				],
				[
					"Resultado",
					"Picture",
					"<-",
					"Icono"
				]
			],
			"Summary": "devuelve el icono de la carpeta"
		}
	},
	"Document": {
		"creationDate": {
			"Syntax": "**.creationDate** : Date",
			"Summary": "la fecha de creación del archivo"
		},
		"creationTime": {
			"Syntax": "**.creationTime** : Time",
			"Summary": "la hora de creación del archivo"
		},
		"exists": {
			"Syntax": "**.exists** : Boolean",
			"Summary": "true si el archivo existe en el disco"
		},
		"extension": {
			"Syntax": "**.extension** : Text",
			"Summary": "la extensión del nombre del archivo (si lo hay)"
		},
		"fullName": {
			"Syntax": "**.fullName** : Text",
			"Summary": "el nombre completo del archivo, incluyendo su extensión (si la hay)"
		},
		"hidden": {
			"Syntax": "**.hidden** : Boolean",
			"Summary": "true si el archivo está configurado como \"oculto\" a nivel de sistema"
		},
		"isAlias": {
			"Syntax": "**.isAlias** : Boolean",
			"Summary": "true si el archivo es un alias, un acceso directo o un enlace simbólico"
		},
		"isFile": {
			"Syntax": "**.isFile** : Boolean",
			"Summary": "siempre true para un archivo"
		},
		"isFolder": {
			"Syntax": "**.isFolder** : Boolean",
			"Summary": "siempre false para un archivo"
		},
		"isWritable": {
			"Syntax": "**.isWritable** : Boolean",
			"Summary": "true si el archivo existe en el disco y es modificable"
		},
		"modificationDate": {
			"Syntax": "**.modificationDate** : Date",
			"Summary": "la fecha de la última modificación del archivo"
		},
		"modificationTime": {
			"Syntax": "**.modificationTime** : Time",
			"Summary": "la hora de la última modificación del archivo"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "el nombre del archivo, sin extensión (si la hay)"
		},
		"original": {
			"Syntax": "**.original** : 4D.File<br/>**.original** : 4D.Folder",
			"Summary": "el elemento de destino para un alias, un acceso directo o un archivo de enlace simbólico"
		},
		"parent": {
			"Syntax": "**.parent** : 4D.Folder",
			"Summary": "el objeto carpeta padre del archivo"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "la ruta POSIX del archivo"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "la ruta del archivo expresada con la sintaxis de la plataforma actual"
		},
		"size": {
			"Syntax": "**.size** : Real",
			"Summary": "el tamaño del archivo expresado en bytes"
		},
		"copyTo()": {
			"Syntax": "**.copyTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } { ; *overwrite* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Carpeta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nombre para la copia"
				],
				[
					"overwrite",
					"Integer",
					"->",
					"`fk overwrite` para sustituir los elementos existentes"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Archivo copiado"
				]
			],
			"Summary": "copia el objeto `File` en la *destinationFolder* especificada"
		},
		"getContent()": {
			"Syntax": "**.getContent( )** : 4D.Blob",
			"Params": [
				[
					"Resultado",
					"4D.Blob",
					"<-",
					"Contenido del archivo"
				]
			],
			"Summary": "devuelve un objeto `4D.Blob` que contiene todo el contenido de un archivo"
		},
		"getIcon()": {
			"Syntax": "**.getIcon**( { *size* : Integer } ) : Picture",
			"Params": [
				[
					"size",
					"Integer",
					"->",
					"Longitud del lado de la imagen devuelta (píxeles)"
				],
				[
					"Resultado",
					"Picture",
					"<-",
					"Icono"
				]
			],
			"Summary": "el icono del archivo"
		},
		"getText()": {
			"Syntax": "**.getText**( { *charSetName* : Text { ; *breakMode* : Integer } } ) : Text<br/>**.getText**( { *charSetNum* : Integer { ; *breakMode* : Integer } } ) : Text",
			"Params": [
				[
					"charSetName",
					"Text",
					"->",
					"Nombre del juego de caracteres"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"Número del conjunto de caracteres"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Modo de tratamiento de los saltos de línea"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto del documento"
				]
			],
			"Summary": "devuelve el contenido del archivo como texto"
		}
	},
	"Email": {
		"attachments": {
			"Syntax": "**.attachments** : Collection",
			"Summary": "colección de objetos `4D.MailAttachment`"
		},
		"bcc": {
			"Syntax": "**.bcc** : Text<br/>**.bcc** : Object<br/>**.bcc** : Collection",
			"Summary": "las direcciones de los destinatarios en Blind Carbon Copy (BCC) del email"
		},
		"bodyStructure": {
			"Syntax": "**.bodyStructure** : Object",
			"Summary": "objeto *EmailBodyPart*, es decir, la estructura MIME completa del cuerpo del mensaje (opcional)"
		},
		"bodyValues": {
			"Syntax": "**.bodyValues** : Object",
			"Summary": "objeto *EmailBodyValue*, que contiene un objeto por cada \\<partID\\> de `bodyStructure` (opcional)"
		},
		"cc": {
			"Syntax": "**.cc** : Text<br/>**.cc** : Object<br/>**.cc** : Collection",
			"Summary": "la dirección(es) email adicional de los destinatarios en Carbon Copy (CC) del email"
		},
		"comments": {
			"Syntax": "**.comments** : Text",
			"Summary": "encabezado de comentarios adicionales"
		},
		"from": {
			"Syntax": "**.from** : Text<br/>**.from** : Object<br/>**.from** : Collection",
			"Summary": "la dirección(es) de origen del email"
		},
		"headers": {
			"Syntax": "**.headers** : Collection",
			"Summary": "de objetos `EmailHeader`, en el orden en que aparecen en el mensaje"
		},
		"htmlBody": {
			"Syntax": "**.htmlBody** : Text",
			"Summary": "representación HTML del mensaje de correo electrónico (el conjunto de caracteres por defecto es UTF-8) (opcional, sólo SMTP)"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "id único del servidor IMAP"
		},
		"inReplyTo": {
			"Syntax": "**.inReplyTo** : Text",
			"Summary": "identificador(es) del mensaje(s) original(es) al que el mensaje actual es una respuesta"
		},
		"keywords": {
			"Syntax": "**.keywords** : Object",
			"Summary": "conjunto de palabras clave como objeto, donde cada nombre de propiedad es una palabra clave y cada valor es verdadero"
		},
		"messageId": {
			"Syntax": "**.messageId** : Text",
			"Summary": "encabezado de identificador de mensaje (\"message-id\")"
		},
		"receivedAt": {
			"Syntax": "**.receivedAt** : Text",
			"Summary": "fecha de llegada del correo electrónico al servidor IMAP en formato ISO 8601 UTC (por ejemplo: 2020-09-13T16:11:53Z)"
		},
		"references": {
			"Syntax": "**.references** : Collection",
			"Summary": "Colección de todos los identificadores de mensajes de la cadena de respuestas anterior"
		},
		"replyTo": {
			"Syntax": "**.replyTo** : Text<br/>**.replyTo** : Object<br/>**.replyTo** : Collection",
			"Summary": "dirección(es) para las respuestas"
		},
		"sendAt": {
			"Syntax": "**.sendAt** : Text",
			"Summary": "marca de tiempo del correo en formato ISO 8601 UTC"
		},
		"sender": {
			"Syntax": "**.sender** : Text<br/>**.sender** : Object<br/>**.sender** : Collection",
			"Summary": "la dirección(es) fuente del email"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "tamaño (expresado en bytes) del objeto Email devuelto por el servidor IMAP"
		},
		"subject": {
			"Syntax": "**.subject** : Text",
			"Summary": "descripción del tema"
		},
		"textBody": {
			"Syntax": "**.textBody** : Text",
			"Summary": "Representación en texto plano del mensaje de correo electrónico (el conjunto de caracteres por defecto es UTF-8) (opcional, sólo SMTP)"
		},
		"to": {
			"Syntax": "**.to** : Text<br/>**.to** : Object<br/>**.to** : Collection",
			"Summary": "las direcciones de correo electrónico de los destinatarios principales del correo electrónico"
		}
	},
	"Entity": {
		"clone()": {
			"Syntax": "**.clone()** : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Nueva entidad que hace referencia al registro"
				]
			],
			"Summary": "crea en la memoria una nueva entidad que hace referencia al mismo registro que la entidad original"
		},
		"diff()": {
			"Syntax": "**.diff**( *entityToCompare* : 4D.Entity { ; *attributesToCompare* : Collection } ) : Collection",
			"Params": [
				[
					"entityToCompare",
					"4D.Entity",
					"->",
					"Entidad a comparar con la entidad original"
				],
				[
					"attributesToCompare",
					"Collection",
					"->",
					"Nombre de los atributos a comparar"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Diferencias entre las entidades"
				]
			],
			"Summary": "compara el contenido de dos entidades y devuelve sus diferencias"
		},
		"drop()": {
			"Syntax": "**.drop**( {*mode* : Integer} ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk force drop if stamp changed`: activa el soltar incluso si el sello ha cambiado"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Resultado de la operación soltar"
				]
			],
			"Summary": "elimina los datos contenidos en la entidad desde el almacén de datos"
		},
		"first()": {
			"Syntax": "**.first()**: 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Referencia a la primera entidad de una selección de entidades (Null si no se encuentra)"
				]
			],
			"Summary": "devuelve una referencia a la entidad en primera posición de la selección de entidades a la que pertenece la entidad"
		},
		"fromObject()": {
			"Syntax": "**.fromObject**( *filler* : Object )",
			"Params": [
				[
					"filler",
					"Object",
					"->",
					"Objeto a partir del cual se llena la entidad"
				]
			],
			"Summary": "llena una entidad con el contenido de *filler*"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass()** : 4D.DataClass",
			"Params": [
				[
					"Resultado",
					"4D.DataClass",
					"<-",
					"Objeto DataClass al que pertenece la entidad"
				]
			],
			"Summary": "devuelve la dataclass de la entidad"
		},
		"getKey()": {
			"Syntax": "**.getKey**( { *mode* : Integer } ) : any",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk key as string`: la llave primaria se devuelve como una cadena, sin importar el tipo de llave primaria"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor de la llave primaria de la entidad (Integer or Text)"
				]
			],
			"Summary": "devuelve el valor de la llave primaria"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes()** : Text",
			"Params": [
				[
					"resultado",
					"Text",
					"<-",
					"Atributos de contexto vinculados a la entidad, separados por una coma"
				]
			],
			"Summary": "devuelve información sobre el contexto de optimización utilizado por la entidad"
		},
		"getSelection()": {
			"Syntax": "**.getSelection()**: 4D.EntitySelection",
			"Params": [
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Entity selection a la que pertenece la entidad (nula si no se encuentra)"
				]
			],
			"Summary": "devuelve la selección de entidades a la que pertenece la entidad"
		},
		"getStamp()": {
			"Syntax": "**.getStamp()** : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Sello de la entidad (0 si la entidad acaba de ser creada)"
				]
			],
			"Summary": "devuelve el valor actual del sello de la entidad"
		},
		"indexOf()": {
			"Syntax": "**.indexOf**( { *entitySelection* : 4D.EntitySelection } ) : Integer",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"La posición de la entidad se da en función de esta selección de entidades"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posición de la entidad en una selección de entidades"
				]
			],
			"Summary": "devuelve la posición de la entidad en una entity selection"
		},
		"isNew()": {
			"Syntax": "**.isNew()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la entidad acaba de ser creada y aún no se ha guardado. En caso contrario, False."
				]
			],
			"Summary": "devuelve True si la entidad a la que se aplica acaba de ser creada y aún no ha sido guardada en el datastore"
		},
		"last()": {
			"Syntax": "**.last()** : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Referencia a la última entidad de una selección de entidades (Null si no se encuentra)"
				]
			],
			"Summary": "devuelve una referencia a la entidad en la última posición de la selección de entidades a la que pertenece la entidad"
		},
		"lock()": {
			"Syntax": "**.lock**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk reload if stamp changed`: recargar antes de bloquear si el marcador ha cambiado"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Resultado de la operación de bloqueo"
				]
			],
			"Summary": "pone un bloqueo pesimista en el registro referenciado por la entidad"
		},
		"next()": {
			"Syntax": "**.next()** : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Referencia a la siguiente entidad en la selección de entidades (Null si no se encuentra)"
				]
			],
			"Summary": "devuelve una referencia a la siguiente entidad en la selección de entidades a la que pertenece la entidad"
		},
		"previous()": {
			"Syntax": "**.previous()**  : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Referencia a la entidad anterior en la selección de entidades (Null si no se encuentra)"
				]
			],
			"Summary": "devuelve una referencia a la entidad anterior en la selección de entidades a la que pertenece la entidad"
		},
		"reload()": {
			"Syntax": "**.reload()** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto estado"
				]
			],
			"Summary": "recarga el contenido de la entidad en memoria"
		},
		"save()": {
			"Syntax": "**.save**( { *mode* : Integer } ) : Object",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk auto merge`: activa el modo \"automatic merge\""
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Resultado de la operación guardar"
				]
			],
			"Summary": "guarda los cambios realizados en la entidad"
		},
		"toObject()": {
			"Syntax": "**.toObject**() : Object<br/>**.toObject**( *filterString* : Text { ; *options* : Integer}  ) : Object<br/>**.toObject**( *filterCol* : Collection { ; *options* : Integer } ) : Object",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"Atributo(s) a extraer (cadena separada por comas)"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"Colección de atributos a extraer"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: adds the \\_\\_KEY property;<br/>`dk with stamp`: adds the \\_STAMP property"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto creado a partir de la entidad"
				]
			],
			"Summary": "devuelve un objeto que ha sido construido a partir de la entidad"
		},
		"touched()": {
			"Syntax": "**.touched()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si se ha modificado al menos un atributo de la entidad y aún no se ha guardado, si no, False"
				]
			],
			"Summary": "devuelve True si al menos un atributo de la entidad ha sido modificado desde que la entidad fue cargada en memoria o guardada"
		},
		"touchedAttributes()": {
			"Syntax": "**.touchedAttributes()** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Nombres de atributos tocados, o colección vacía"
				]
			],
			"Summary": "devuelve los nombres de los atributos que han sido modificados desde que la entidad fue cargada en memoria"
		},
		"unlock()": {
			"Syntax": "**.unlock()** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto estado"
				]
			],
			"Summary": "elimina el bloqueo pesimista del registro que coincide con la entidad"
		}
	},
	"EntitySelection": {
		"add()": {
			"Syntax": "**.add**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.add**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entidad que debe añadirse a la entity selection"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Selección de entidades que se añade a la selección de entidades original"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Entity selection incluyendo la *entity* o *entitySelection* añadida"
				]
			],
			"Summary": "añade la *entity* o *entitySelection* especificada a la selección de entidades original y devuelve la selección de entidades modificada"
		},
		"and()": {
			"Syntax": "**.and**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.and**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entidad a intersectar"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection a intersectar"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Entity selection resultante de la intersección con el operador lógico AND"
				]
			],
			"Summary": "combina la entity selection con un parámetro *entity* o *entitySelection* utilizando el operador lógico AND"
		},
		"at()": {
			"Syntax": "**.at**( *index* : Integer ) : 4D.Entity",
			"Params": [
				[
					"index",
					"Integer",
					"->",
					"Índice de la entidad a devolver"
				],
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"La entidad en ese índice"
				]
			],
			"Summary": "devuelve la entidad en la posición *index*, permitiendo enteros positivos y negativos"
		},
		"average()": {
			"Syntax": "**.average**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo a utilizar para el cálculo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Media aritmética (promedio) de los valores de las entidades para el atributo (No se define para una entity selection vacía)"
				]
			],
			"Summary": "devuelve la media aritmética (promedio) de todos los valores no nulos de *attributePath* en la entity selection"
		},
		"clean()": {
			"Syntax": "**.clean**() : 4D.EntitySelection",
			"Params": [
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva selección de entidades sin entidades eliminadas"
				]
			],
			"Summary": "devuelve una nueva selección de entidades basada en la selección de entidades original pero sin las entidades eliminadas, si las hubiera"
		},
		"contains()": {
			"Syntax": "**.contains**( *entity* : 4D.Entity ) : Boolean",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entidad a evaluar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la entidad pertenece a la entity selection, de lo contrario False"
				]
			],
			"Summary": "devuelve true si la referencia de entidad pertenece a la entity selection"
		},
		"count()": {
			"Syntax": "**.count**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Número de valores de *attributePath* no null en la entity selection"
				]
			],
			"Summary": "devuelve el número de entidades en la entity selection con un valor no null en *attributePath*"
		},
		"copy()": {
			"Syntax": "**.copy**( { *option* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"`ck shared`: devuelve una entity selection compartible"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Copia de la entity selection"
				]
			],
			"Summary": "devuelve una copia de la entity selection original"
		},
		"distinct()": {
			"Syntax": "**.distinct**( *attributePath* : Text { ; *options* : Integer } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo cuyos valores distintos desea obtener"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk diacritical`, `dk count values`"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección con sólo valores distintos"
				]
			],
			"Summary": "devuelve una colección que contiene sólo valores distintos (diferentes) del *attributePath* en la entity selection"
		},
		"distinctPaths()": {
			"Syntax": "**.distinctPaths**( *attribute* : Text ) : Collection",
			"Params": [
				[
					"atributo",
					"Text",
					"->",
					"Nombre del atributo del objeto cuyas rutas desea obtener"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nueva colección con rutas distintas"
				]
			],
			"Summary": "devuelve una colección de rutas distintas encontradas en el objeto indexado *attribute* para la entity selection"
		},
		"drop()": {
			"Syntax": "**.drop**( { *mode* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"mode",
					"Integer",
					"->",
					"`dk stop dropping on first error`: detiene la ejecución del método en la primera entidad no suprimible"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Entity selection vacía si se ejecuta con éxito, si no entity selection que contengan las entidades no eliminables"
				]
			],
			"Summary": "elimina las entidades pertenecientes a la selección de entidades de la tabla relacionada con su dataclass en el datastore"
		},
		"extract()": {
			"Syntax": "**.extract**( *attributePath* : Text { ; *option* : Integer } ) : Collection<br/>**.extract**( *attributePath* { ; *targetPath* } { ; *...attributePathN* : Text ; *targetPathN* : Text } ) : Collection",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo cuyos valores deben ser extraídos en la nueva colección"
				],
				[
					"targetPath",
					"Text",
					"->",
					"Ruta o nombre del atributo objetivo"
				],
				[
					"option",
					"Integer",
					"->",
					"`ck keep null`: incluye los atributos null en la colección devuelta (ignorados por defecto)"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección que contiene los valores extraídos"
				]
			],
			"Summary": "retorna una colección que contiene los valores de *attributePath* extraídos de la entity selection"
		},
		"first()": {
			"Syntax": "**.first**() : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Referencia a la primera entidad de la entity selection (Null si la selección está vacía)"
				]
			],
			"Summary": "devuelve una referencia a la entidad en la primera posición de la entity selection"
		},
		"getDataClass()": {
			"Syntax": "**.getDataClass**() : 4D.DataClass",
			"Params": [
				[
					"Resultado",
					"4D.DataClass",
					"<-",
					"DataClass a la que pertenece la entity selection"
				]
			],
			"Summary": "devuelve la dataclass de la entity selection"
		},
		"getRemoteContextAttributes()": {
			"Syntax": "**.getRemoteContextAttributes**() : Text",
			"Params": [
				[
					"resultado",
					"Text",
					"<-",
					"Atributos de contexto vinculados a la entity selection, separados por una coma"
				]
			],
			"Summary": "devuelve información sobre el contexto de optimización utilizado por la entity selection"
		},
		"isAlterable()": {
			"Syntax": "**.isAlterable**() : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la entity selection es modificable, de lo contrario False"
				]
			],
			"Summary": "devuelve True si la entity selection es modificable"
		},
		"isOrdered()": {
			"Syntax": "**.isOrdered**() : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la entity selection es ordenada, de lo contrario False"
				]
			],
			"Summary": "devuelve True si la entity selection está ordenada"
		},
		"last()": {
			"Syntax": "**.last**() : 4D.Entity",
			"Params": [
				[
					"Resultado",
					"4D.Entity",
					"<-",
					"Referencia a la última entidad de la entity selection (Null si la entity selection está vacía)"
				]
			],
			"Summary": "devuelve una referencia a la entidad en última posición de la entity selection"
		},
		"length": {
			"Syntax": "**.length** : Integer",
			"Summary": "devuelve el número de entidades en la entity selection"
		},
		"max()": {
			"Syntax": "**.max**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor más alto del atributo"
				]
			],
			"Summary": "devuelve el valor más alto (o máximo) entre todos los valores de *attributePath* en la entity selection"
		},
		"min()": {
			"Syntax": "**.min**( *attributePath* : Text ) : any",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor más bajo del atributo"
				]
			],
			"Summary": "devuelve el valor más bajo (o mínimo) entre todos los valores de attributePath en la entity selection"
		},
		"minus()": {
			"Syntax": "**.minus**( *entity* : 4D.Entity { ; *keepOrder* : Integer } ) : 4D.EntitySelection<br/>**.minus**( *entitySelection* : 4D.EntitySelection { ; *keepOrder* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entidad a sustraer"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection a sustraer"
				],
				[
					"keepOrder",
					"Integer",
					"->",
					"`dk keep ordered` (integer) para mantener el orden inicial en la selección de entidades resultante"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva entity selection o una nueva referencia en la entity selection existente"
				]
			],
			"Summary": "excluye la entity selection a la que se aplica la *entity* o las entidades de *entitySelection* y devuelve la entity selection resultante"
		},
		"or()": {
			"Syntax": "**.or**( *entity* : 4D.Entity ) : 4D.EntitySelection<br/>**.or**( *entitySelection* : 4D.EntitySelection ) : 4D.EntitySelection",
			"Params": [
				[
					"entity",
					"4D.Entity",
					"->",
					"Entidad a intersectar"
				],
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Entity selection a intersectar"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva entity selection o una nueva referencia a la entity selection de origen"
				]
			],
			"Summary": "combina la entity selection con el parámetro *entity* o *entitySelection* utilizando el operador lógico OR (no exclusivo)"
		},
		"orderBy()": {
			"Syntax": "**.orderBy**( *pathString* : Text ) : 4D.EntitySelection<br/>**.orderBy**( *pathObjects* : Collection ) : 4D.EntitySelection",
			"Params": [
				[
					"pathString",
					"Text",
					"->",
					"Ruta(s) de atributos e instrucciones de clasificación para la entity selection"
				],
				[
					"pathObjects",
					"Collection",
					"->",
					"Colección de objetos criterio"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva entity selection en el orden especificado"
				]
			],
			"Summary": "devuelve una nueva selección ordenada de entidades que contiene todas las entidades de la entity selection en el orden especificado por los criterios *pathString* o *pathObjects*"
		},
		"orderByFormula()": {
			"Syntax": "**.orderByFormula**( *formulaString* : Text { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection<br/>**.orderByFormula**( *formulaObj* : Object { ; *sortOrder* : Integer } { ; *settings* : Object} ) : 4D.EntitySelection",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"Cadena formula"
				],
				[
					"formulaObj",
					"Object",
					"->",
					"Objeto fórmula"
				],
				[
					"sortOrder",
					"Integer",
					"->",
					"`dk ascending` (por defecto) o `dk descending`"
				],
				[
					"settings",
					"Object",
					"->",
					"Parámetros de la fórmula"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva entity selection ordenada"
				]
			],
			"Summary": "devuelve una nueva entity selection ordenada"
		},
		"query()": {
			"Syntax": "**.query**( *queryString* : Text { ; *...value* : any } { ; *querySettings* : Object } ) : 4D.EntitySelection <br/>**.query**( *formula* : Object { ; *querySettings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"queryString",
					"Text",
					"->",
					"Criterios de búsqueda como cadena"
				],
				[
					"formula",
					"Object",
					"->",
					"Criterios de búsqueda como objeto fórmula"
				],
				[
					"value",
					"any",
					"->",
					"Valor(es) a utilizar para los marcadores de posición indexados"
				],
				[
					"querySettings",
					"Object",
					"->",
					"Opciones de búsqueda: parameters, attributes, args, allowFormulas, context, queryPath, queryPlan"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva entity selection formada por las entidades de la entity selection que cumplen los criterios de búsqueda especificados en *queryString* o *formula*"
				]
			],
			"Summary": "busca las entidades que cumplan con los criterios de búsqueda especificados en *queryString* o *formula* y (opcionalmente) *value*(s) entre todas las entidades de la entity selection"
		},
		"queryPath": {
			"Syntax": "**.queryPath** : Text",
			"Summary": "contiene una descripción detallada de la búsqueda tal y como fue realizada por 4D"
		},
		"queryPlan": {
			"Syntax": "**.queryPlan** : Text",
			"Summary": "contiene una descripción detallada de la búsqueda justo antes de su ejecución (es decir, la búsqueda planeada)"
		},
		"refresh()": {
			"Syntax": "**.refresh**()",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "invalida inmediatamente los datos de la entidad seleccionada en la caché local de ORDA"
		},
		"selected()": {
			"Syntax": "**.selected**( *selectedEntities* : 4D.EntitySelection ) : Object",
			"Params": [
				[
					"selectedEntities",
					"4D.EntitySelection",
					"->",
					"Selección de entidades con entidades para las cuales conocer el rango en la selección de entidades"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango(s) de entidades seleccionadas en la selección de entidades"
				]
			],
			"Summary": "devuelve un objeto que describe la(s) posición(es) de *selectedEntities* en la entity selection de origen"
		},
		"slice()": {
			"Syntax": "**.slice**( *startFrom* : Integer { ; *end* : Integer } ) : 4D.EntitySelection",
			"Params": [
				[
					"startFrom",
					"Integer",
					"->",
					"Índice para iniciar la operación (incluído)"
				],
				[
					"end",
					"Integer",
					"->",
					"Índice final (no incluido)"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Nueva entity selection que contiene la entidades extraídas (shallow copy)"
				]
			],
			"Summary": "devuelve una parte de una entity selection en una nueva entity selection"
		},
		"sum()": {
			"Syntax": "**.sum**( *attributePath* : Text ) : Real",
			"Params": [
				[
					"attributePath",
					"Text",
					"->",
					"Ruta del atributo que se utilizará para el cálculo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Suma de los valores de la entity selection"
				]
			],
			"Summary": "devuelve la suma de todos los valores de *attributePath* en la entity selection"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**( { *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer } } ) : Collection<br/>**.toCollection**( *filterString* : Text {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection<br/>**.toCollection**( *filterCol* : Collection {; *options* : Integer { ; *begin* : Integer { ; *howMany* : Integer }}} ) : Collection",
			"Params": [
				[
					"filterString",
					"Text",
					"->",
					"Cadena con la(s) ruta(s) de atributos de la entidad a extraer"
				],
				[
					"filterCol",
					"Collection",
					"->",
					"Colección de rutas de atributos de entidad a extraer"
				],
				[
					"options",
					"Integer",
					"->",
					"`dk with primary key`: añade la llave primaria<br/>`dk with stamp`: añade el marcador"
				],
				[
					"begin",
					"Integer",
					"->",
					"Designa el índice inicial"
				],
				[
					"howMany",
					"Integer",
					"->",
					"Número de entidades a extraer"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos que contienen atributos y valores de la selección de entidades"
				]
			],
			"Summary": "crea y devuelve una colección donde cada elemento es un objeto que contiene un conjunto de propiedades y valores"
		}
	},
	"File": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el archivo se ha creado con éxito, false en caso contrario"
				]
			],
			"Summary": "crea un archivo en el disco según las propiedades del objeto `File`"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Carpeta de destino para el alias o el acceso directo"
				],
				[
					"aliasName",
					"Text",
					"->",
					"Nombre del alias o del atajo"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"Tipo de enlace del alias"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Referencia del archivo del alias o de atajo"
				]
			],
			"Summary": "crea un alias (macOS) o un acceso directo (Windows)"
		},
		"delete()": {
			"Syntax": "**.delete**()",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "borra el archivo"
		},
		"getAppInfo()": {
			"Syntax": "**.getAppInfo**() : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Información del archivo de la aplicación"
				]
			],
			"Summary": "devuelve el contenido de la información de un archivo de aplicación como un objeto"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Carpeta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nombre completo del archivo trasladado"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Archivo movido"
				]
			],
			"Summary": "mueve o renombra el objeto `File` en la carpeta especificada *destinationFolder*"
		},
		"open()": {
			"Syntax": "**.open**( { *mode* : Text } ) : 4D.FileHandle<br/>**.open**( { *options* : Object } ) : 4D.FileHandle",
			"Params": [
				[
					"mode",
					"Text",
					"->",
					"Modo de apertura: \"read\", \"write\", \"append\""
				],
				[
					"options",
					"Object",
					"->",
					"Opciones de apertura"
				],
				[
					"Resultado",
					"4D.FileHandle",
					"<-",
					"Nuevo objeto File handle"
				]
			],
			"Summary": "crea y devuelve un nuevo objeto 4D.FileHandle en el archivo, en el modo especificado o con las opciones especificadas"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.File",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"Nuevo nombre completo del archivo"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Archivo renombrado"
				]
			],
			"Summary": "renombra el archivo con el nombre que se ha pasado en *newName* y devuelve el objeto `File` renombrado"
		},
		"setAppInfo()": {
			"Syntax": "**.setAppInfo**( *info* : Object )",
			"Params": [
				[
					"info",
					"Object",
					"->",
					"Propiedades para escribir en la información de un archivo de aplicación"
				]
			],
			"Summary": "escribe las propiedades *info* como contenido informativo de un archivo de aplicación"
		},
		"setContent()": {
			"Syntax": "**.setContent** ( *content* : Blob )",
			"Params": [
				[
					"content",
					"BLOB",
					"->",
					"Nuevos contenidos del archivo"
				]
			],
			"Summary": "reescribe todo el contenido del archivo utilizando los datos almacenados en el BLOB *content*"
		},
		"setText()": {
			"Syntax": "**.setText** ( *text* : Text {; *charSetName* : Text { ; *breakMode* : Integer } } )<br/>**.setText** ( *text* : Text {; *charSetNum* : Integer { ; *breakMode* : Integer } } )",
			"Params": [
				[
					"text",
					"Text",
					"->",
					"Texto a almacenar en el archivo"
				],
				[
					"charSetName",
					"Text",
					"->",
					"Nombre del juego de caracteres"
				],
				[
					"charSetNum",
					"Integer",
					"->",
					"Número del conjunto de caracteres"
				],
				[
					"breakMode",
					"Integer",
					"->",
					"Modo de tratamiento de los saltos de línea"
				]
			],
			"Summary": "escribe *text* como el nuevo contenido del archivo"
		},
		"_inheritedFrom_": "Document"
	},
	"FileHandle": {
		"breakModeRead": {
			"Syntax": "**.breakModeRead** : Text",
			"Summary": "el modo de procesamiento de los saltos de línea utilizado al leer el archivo"
		},
		"breakModeWrite": {
			"Syntax": "**.breakModeWrite** : Text",
			"Summary": "el modo de procesamiento de los saltos de línea utilizado al escribir en el archivo"
		},
		"charset": {
			"Syntax": "**.charset** : Text",
			"Summary": "el conjunto de caracteres utilizado al leer o escribir en el archivo"
		},
		"eof": {
			"Syntax": "**.eof** : Boolean",
			"Summary": "True si el `offset` ha llegado al final del archivo, y False en caso contrario"
		},
		"file": {
			"Syntax": "**.file** : 4D.File",
			"Summary": "el objeto 4D.File sobre el que se ha creado el manejador"
		},
		"getSize()": {
			"Syntax": "**.getSize()** : Real",
			"Params": [
				[
					"Resultado",
					"Real",
					"<-",
					"Tamaño del documento en bytes"
				]
			],
			"Summary": "devuelve el tamaño actual del documento, expresado en bytes"
		},
		"mode": {
			"Syntax": "**.mode** : Text",
			"Summary": "el modo en que se creó el manejador de fichero: \"read\", \"write\", o \"append\""
		},
		"offset": {
			"Syntax": "**.offset** : Real",
			"Summary": "el desplazamiento actual del flujo de datos (posición dentro del documento)"
		},
		"readBlob()": {
			"Syntax": "**.readBlob**( *bytes* : Real ) : 4D.Blob",
			"Params": [
				[
					"bytes",
					"Real",
					"->",
					"Número de bytes a leer"
				],
				[
					"Resultado",
					"4D.Blob",
					"<-",
					"Bytes leídos del archivo"
				]
			],
			"Summary": "devuelve un blob de un tamaño de *bytes* del archivo, empezando por la posición actual"
		},
		"readLine()": {
			"Syntax": "**.readLine()** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Línea de texto"
				]
			],
			"Summary": "devuelve una línea de texto desde la posición actual hasta que se encuentra un delimitador de fin de línea o se alcanza el final del documento"
		},
		"readText()": {
			"Syntax": "**.readText**( { *stopChar* : Text } ) : Text",
			"Params": [
				[
					"stopChar",
					"Text",
					"->",
					"Caracter(es) en los que dejar de leer"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto del archivo"
				]
			],
			"Summary": "devuelve el texto del archivo, comenzando desde la posición actual hasta que se encuentre la primera cadena *stopChar* (si se ha pasado) o se llegue al final del archivo"
		},
		"setSize()": {
			"Syntax": "**.setSize**( *size* : Real )",
			"Params": [
				[
					"size",
					"Real",
					"->",
					"Nuevo tamaño del documento en bytes"
				]
			],
			"Summary": "define un nuevo tamaño de *size* en bytes para el documento"
		},
		"writeBlob()": {
			"Syntax": "**.writeBlob**( *blob* : 4D.Blob )",
			"Params": [
				[
					"blob",
					"4D.Blob",
					"->",
					"Blob a escribir en el archivo"
				]
			],
			"Summary": "escribe *blob* en el archivo, comenzando desde la posición actual"
		},
		"writeLine()": {
			"Syntax": "**.writeLine**( *lineOfText* : Text )",
			"Params": [
				[
					"lineOfText",
					"Text",
					"->",
					"Texto a escribir"
				]
			],
			"Summary": "escribe contenido *lineOfText* en la posición actual e inserta un delimitador de fin de línea"
		},
		"writeText()": {
			"Syntax": "**.writeText**( *textToWrite* : Text )",
			"Params": [
				[
					"textToWrite",
					"Text",
					"->",
					"Texto a escribir"
				]
			],
			"Summary": "escribe el contenido de *textToWrite* en la posición actual y no inserta un delimitador de fin de línea"
		}
	},
	"Folder": {
		"create()": {
			"Syntax": "**.create()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la carpeta se ha creado con éxito, false en caso contrario"
				]
			],
			"Summary": "crea una carpeta en el disco según las propiedades del objeto `Folder`"
		},
		"createAlias()": {
			"Syntax": "**.createAlias**( *destinationFolder* : 4D.Folder ; *aliasName* : Text { ; *aliasType* : Integer } ) : 4D.File",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Carpeta de destino para el alias o el acceso directo"
				],
				[
					"aliasName",
					"Text",
					"->",
					"Nombre del alias o del atajo"
				],
				[
					"aliasType",
					"Integer",
					"->",
					"Tipo de enlace del alias"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Referencia de alias o de acceso directo"
				]
			],
			"Summary": "crea un alias (macOS) o un acceso directo (Windows)"
		},
		"delete()": {
			"Syntax": "**.delete**( { *option* : Integer } )",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Opción de eliminación de carpeta"
				]
			],
			"Summary": "borra la carpeta"
		},
		"moveTo()": {
			"Syntax": "**.moveTo**( *destinationFolder* : 4D.Folder { ; *newName* : Text } ) : 4D.Folder",
			"Params": [
				[
					"destinationFolder",
					"4D.Folder",
					"->",
					"Carpeta de destino"
				],
				[
					"newName",
					"Text",
					"->",
					"Nombre completo de la carpeta trasladada"
				],
				[
					"Resultado",
					"4D.Folder",
					"<-",
					"Carpeta movida"
				]
			],
			"Summary": "mueve o renombra el objeto `Folder` (carpeta de origen) a la *carpeta de destino* especificada"
		},
		"rename()": {
			"Syntax": "**.rename**( *newName* : Text ) : 4D.Folder",
			"Params": [
				[
					"newName",
					"Text",
					"->",
					"Nuevo nombre completo para la carpeta"
				],
				[
					"Resultado",
					"4D.Folder",
					"<-",
					"Carpeta renombrada"
				]
			],
			"Summary": "renombra la carpeta con el nombre introducido en *newName* y devuelve el objeto `Folder` renombrado"
		},
		"_inheritedFrom_": "Directory"
	},
	"Function": {
		"apply()": {
			"Syntax": "**.apply**() : any<br/>**.apply**( *thisObj* : Object { ; *formulaParams* : Collection } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"Objeto a devolver por el comando This en la fórmula"
				],
				[
					"formulaParams",
					"Collection",
					"->",
					"Colección de valores que se pasan como $1...$n cuando se ejecuta `formula`"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor obtenido de la ejecución de la fórmula"
				]
			],
			"Summary": "ejecuta el objeto `formula` al que se aplica y devuelve el valor resultante"
		},
		"call()": {
			"Syntax": "**.call**() : any<br/>**.call**( *thisObj* : Object { ; ...*params* : any } ) : any",
			"Params": [
				[
					"thisObj",
					"Object",
					"->",
					"Objeto a devolver por el comando This en la fórmula"
				],
				[
					"params",
					"any",
					"->",
					"Valor(es) que se pasa(n) como $1...$n cuando se ejecuta la fórmula"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor obtenido de la ejecución de la fórmula"
				]
			],
			"Summary": "ejecuta el objeto `formula` al que se aplica y devuelve el valor resultante"
		},
		"source": {
			"Syntax": "**.source** : Text",
			"Summary": "contiene la expresión fuente de `formula` como texto"
		}
	},
	"HTTPAgent": {
		"params": {
			"Syntax": "**options** : Object",
			"Summary": "las opciones utilizadas actualmente del HTTPAgent"
		},
		"requestsCount": {
			"Syntax": "**requestsCount** : Integer",
			"Summary": "el número de peticiones gestionadas actualmente por el HTTPAgent"
		},
		"freeSocketsCount": {
			"Syntax": "**freeSocketsCount** : Integer",
			"Summary": "el número de sockets libres de `maxSockets` asociados al HTTPAgent"
		}
	},
	"HTTPRequest": {
		"agent": {
			"Syntax": "**agent** : 4D.HTTPAgent",
			"Summary": "el objeto `agent` pasado en `options` o el objeto agente global si se omitió"
		},
		"dataType": {
			"Syntax": "**dataType** : Text",
			"Summary": "el `dataType` pasado en el objeto `options` al llamar a new(), \"auto\" si se omitió"
		},
		"encoding": {
			"Syntax": "**encoding** : Text",
			"Summary": "el `encoding` pasado en el objeto `options` al llamar a new(), \"UTF-8\" si se omitió"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "la colección de todos los errores si se ha generado al menos un error"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "los `headers` pasados en el objeto `options` al llamar a new()"
		},
		"method": {
			"Syntax": "**method** : Text",
			"Summary": "el `method` pasado en el objeto `options` al llamar a new()"
		},
		"protocol": {
			"Syntax": "**protocol** : Text",
			"Summary": "el `protocol` pasado en el objeto `options` al llamar a new()"
		},
		"response": {
			"Syntax": "**response** : Object",
			"Summary": "la respuesta a la solicitud si ha recibido al menos el código de estado, de lo contrario undefined"
		},
		"returnResponseBody": {
			"Syntax": "**returnResponseBody** : Boolean",
			"Summary": "el `returnResponseBody` pasado en el objeto `options` al llamar a new()"
		},
		"terminate()": {
			"Syntax": "**.terminate()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "interrumpe la solicitud HTTP"
		},
		"terminated": {
			"Syntax": "**terminated** : Boolean",
			"Summary": "True si la solicitud es terminada (después de la llamada a `onTerminate`), false de lo contrario"
		},
		"timeout": {
			"Syntax": "**timeout** : Real",
			"Summary": "el `timeout` pasado en el objeto `options` al llamar a new()"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "la URL de la solicitud HTTP"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : 4D.HTTPRequest",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Tiempo máximo de espera en segundos"
				],
				[
					"Resultado",
					"4D.HTTPRequest",
					"<-",
					"Objeto HTTPRequest"
				]
			],
			"Summary": "espera una respuesta del servidor o hasta que se alcance el `timeout` especificado"
		}
	},
	"IMAPTransporter": {
		"addFlags()": {
			"Syntax": "**.addFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.addFlags**( *msgIDs* : Longint  ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"Colección de cadenas: identificadores únicos de mensajes (texto)<br/>Texto: ID único de un mensaje<br/>Longint (IMAP all): todos los mensajes del buzón seleccionado"
				],
				[
					"keywords",
					"Object",
					"->",
					"Banderas de palabras claves a añadir"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación addFlags"
				]
			],
			"Summary": "agrega banderas a los `msgIDs` para las `keywords` especificadas"
		},
		"append()": {
			"Syntax": "**.append**( *mailObj* : Object ; *destinationBox* : Text ; *options* : Object ) : Object",
			"Params": [
				[
					"mailObj",
					"Object",
					"->",
					"Objeto Email"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Buzón para recibir el objeto Email"
				],
				[
					"options",
					"Object",
					"->",
					"Objeto que contiene información del charset"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación"
				]
			],
			"Summary": "añade un `mailObj` al `destinationBox`"
		},
		"checkConnectionDelay": {
			"Syntax": "**.checkConnectionDelay** : Integer",
			"Summary": "el tiempo máximo (en segundos) permitido antes de verificar la conexión con el servidor"
		},
		"copy()": {
			"Syntax": "**.copy**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.copy**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Colección de identificadores únicos de mensajes (cadenas)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: todos los mensajes en el buzón seleccionado"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Buzón para recibir mensajes copiados"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación de copia"
				]
			],
			"Summary": "copia los mensajes definidos por *msgsIDs* o *allMsgs* en la *destinationBox* en el servidor IMAP"
		},
		"createBox()": {
			"Syntax": "**.createBox**( *name* :  Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del nuevo buzón"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación de creación del buzón"
				]
			],
			"Summary": "crea un buzón con el nombre dado"
		},
		"delete()": {
			"Syntax": "**.delete**( *msgsIDs* : Collection ) : Object<br/>**.delete**( *allMsgs* : Integer ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Colección de identificadores únicos de mensajes (cadenas)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: todos los mensajes en el buzón seleccionado"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación de eliminación"
				]
			],
			"Summary": "define el marcador \"deleted\" para los mensajes definidos en `msgsIDs` o `allMsgs`"
		},
		"deleteBox()": {
			"Syntax": "**.deleteBox**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del buzón a eliminar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación de eliminación del buzón"
				]
			],
			"Summary": "elimina permanentemente el buzón de correo con el `name` dado del servidor IMAP"
		},
		"expunge()": {
			"Syntax": "**.expunge()** : Object",
			"Summary": "elimina todos los mensajes con el marcador \"deleted\" del servidor de correo IMAP."
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo**( { *name* : Text }) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del buzón"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"objeto boxInfo"
				]
			],
			"Summary": "devuelve un objeto `boxInfo` correspondiente al buzón de correo actual o el buzón de correo *name*"
		},
		"getBoxList()": {
			"Syntax": "**.getBoxList**( { *parameters* : Object } ) : Collection",
			"Params": [
				[
					"parameters",
					"Object",
					"->",
					"Objeto de parámetro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos mailbox"
				]
			],
			"Summary": "devuelve una colección de bandejas de entrada que describe todas las bandejas de entrada disponibles"
		},
		"getDelimiter()": {
			"Syntax": "**.getDelimiter()** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Caracter delimitador de jerarquía"
				]
			],
			"Summary": "devuelve el caracter utilizado para delimitar niveles de jerarquía en el nombre del buzón"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber*: Integer { ; *options* : Object } ) : Object<br/>**.getMail**( *msgID*: Text { ; *options* : Object } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número de secuencia del mensaje"
				],
				[
					"msgID",
					"Text",
					"->",
					"ID único del mensaje"
				],
				[
					"options",
					"Object",
					"->",
					"Instrucciones sobre la gestión de mensajes"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objet Email"
				]
			],
			"Summary": "devuelve el objeto `Email` correspondiente al *msgNumber* o *msgID* en el buzón designado por el `IMAP_transporter`"
		},
		"getMails()": {
			"Syntax": "**.getMails**( *ids* : Collection { ; *options* : Object } ) : Object<br/>**.getMails**( *startMsg* : Integer ; *endMsg* : Integer { ; *options* : Object } ) : Object",
			"Params": [
				[
					"ids",
					"Collection",
					"->",
					"Colección de identificadores de mensajes"
				],
				[
					"startMsg",
					"Integer",
					"->",
					"Número de secuencia del primer mensaje"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"Número de secuencia del último mensaje"
				],
				[
					"options",
					"Object",
					"->",
					"Instrucciones sobre la gestión de mensajes"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contiene<br/><ul><li>una colección de objetos Email y</li><li>una colección de IDs o de números para los mensajes que faltan, si los hay</li></ul>"
				]
			],
			"Summary": "devuelve un objeto que contiene una colección de objetos `Email`"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer { ; *updateSeen* : Boolean } ) : Blob<br/>**.getMIMEAsBlob**( *msgID* : Text { ; *updateSeen* : Boolean } ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número de secuencia del mensaje"
				],
				[
					"msgID",
					"Text",
					"->",
					"ID único del mensaje"
				],
				[
					"updateSeen",
					"Boolean",
					"->",
					"Si True, el mensaje se marca como \"visto\" en el buzón. Si False, el mensaje se deja igual."
				],
				[
					"Resultado",
					"BLOB",
					"<-",
					"Blob de la cadena MIME devuelta por el servidor de correo"
				]
			],
			"Summary": "devuelve un BLOB con el contenido MIME del mensaje correspondiente al *msgNumber* o *msgID* en el buzón designado por el `IMAP_transporter`"
		},
		"move()": {
			"Syntax": "**.move**( *msgsIDs* : Collection ; *destinationBox* : Text ) : Object<br/>**.move**( *allMsgs* : Integer ; *destinationBox* : Text ) : Object",
			"Params": [
				[
					"msgsIDs",
					"Collection",
					"->",
					"Colección de identificadores únicos de mensajes (cadenas)"
				],
				[
					"allMsgs",
					"Integer",
					"->",
					"`IMAP all`: todos los mensajes en el buzón seleccionado"
				],
				[
					"destinationBox",
					"Text",
					"->",
					"Buzón para recibir los mensajes desplazados"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación de desplazamiento"
				]
			],
			"Summary": "mueve los mensajes definidos por *msgsIDs* o *allMsgs* a la *destinationBox* del servidor IMAP"
		},
		"numToID()": {
			"Syntax": "**.numToID**( *startMsg* : Integer ; *endMsg* : Integer ) : Collection",
			"Params": [
				[
					"startMsg",
					"Integer",
					"->",
					"Número de secuencia del primer mensaje"
				],
				[
					"endMsg",
					"Integer",
					"->",
					"Número de secuencia del último mensaje"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de identificadores de mensajes únicos"
				]
			],
			"Summary": "convierte los números de secuencia en IDs únicos IMAP para los mensajes en el rango secuencial designado por *startMsg* y *endMsg*"
		},
		"removeFlags()": {
			"Syntax": "**.removeFlags**( *msgIDs* : Collection ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Text ; *keywords* :  Object ) : Object<br/>**.removeFlags**( *msgIDs* : Longint ; *keywords* :  Object ) : Object",
			"Params": [
				[
					"msgIDs",
					"Collection",
					"->",
					"Colección de cadenas: identificadores únicos de mensajes (texto)<br/>Texto: ID único de un mensaje<br/>Longint (IMAP all): todos los mensajes del buzón seleccionado"
				],
				[
					"keywords",
					"Object",
					"->",
					"Banderas de palabras claves a eliminar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación removeFlags"
				]
			],
			"Summary": "elimina las banderas de los `msgIDs` para las `keywords` especificadas"
		},
		"renameBox()": {
			"Syntax": "**.renameBox**( *currentName* : Text ; *newName* : Text ) : Object",
			"Params": [
				[
					"currentName",
					"Text",
					"->",
					"Nombre del nuevo actual"
				],
				[
					"newName",
					"Text",
					"->",
					"Nuevo nombre del buzón"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación renombrar"
				]
			],
			"Summary": "cambia el nombre de un buzón en el servidor IMAP"
		},
		"searchMails()": {
			"Syntax": "**.searchMails**( *searchCriteria* : Text ) : Collection",
			"Params": [
				[
					"searchCriteria",
					"Text",
					"->",
					"Criterio de búsqueda"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de números de mensajes"
				]
			],
			"Summary": "busca los mensajes que coincidan con los criterios de búsqueda *searchCriteria* dados en el buzón actual"
		},
		"selectBox()": {
			"Syntax": "**.selectBox**( *name* : Text { ; *state* : Integer } ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del buzón"
				],
				[
					"state",
					"Integer",
					"->",
					"Estado de acceso al buzón"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"objeto boxInfo"
				]
			],
			"Summary": "selecciona el buzón *name* como buzón actual"
		},
		"subscribe()": {
			"Syntax": "**.subscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del buzón"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación subscribe"
				]
			],
			"Summary": "permite añadir el buzón especificado al conjunto de buzones \"suscritos\" del servidor IMAP"
		},
		"unsubscribe()": {
			"Syntax": "**.unsubscribe**( *name* : Text ) : Object",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del buzón"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la operación unsubscribe"
				]
			],
			"Summary": "elimina un buzón de un conjunto de buzones suscritos"
		},
		"_inheritedFrom_": "Transporter"
	},
	"IncomingMessage": {
		"getBlob()": {
			"Syntax": "**.getBlob**() : Blob",
			"Params": [
				[
					"Resultado",
					"Blob",
					"<-",
					"Cuerpo de la petición como Blob"
				]
			],
			"Summary": "devuelve el cuerpo de la petición como un Blob"
		},
		"getHeader()": {
			"Syntax": "**.getHeader**( *key* : Text ) : Text",
			"Params": [
				[
					"key",
					"Text",
					"->",
					"Propiedad de encabezado a obtener"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor de la propiedad del encabezado"
				]
			],
			"Summary": "devuelve el valor del encabezado *key*"
		},
		"getJSON()": {
			"Syntax": "**.getJSON**() : Variant",
			"Params": [
				[
					"Resultado",
					"Variant",
					"<-",
					"Resolución JSON del body de la petición"
				]
			],
			"Summary": "devuelve el cuerpo de la solicitud como una resolución JSON"
		},
		"getPicture()": {
			"Syntax": "**.getPicture**() : Picture",
			"Params": [
				[
					"Resultado",
					"Picture",
					"<-",
					"Cuerpo de la petición como imagen"
				]
			],
			"Summary": "devuelve el cuerpo de la petición como una imagen (en caso de que un cuerpo enviado como una imagen)"
		},
		"getText()": {
			"Syntax": "**.getText**() : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Cuerpo de la petición como texto"
				]
			],
			"Summary": "devuelve el cuerpo de la solicitud como un valor de texto"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "los encabezados actuales del mensaje entrante como pares llave/valor (cadenas)"
		},
		"url": {
			"Syntax": "**url** : Text",
			"Summary": "la URL de la petición sin la parte *IP:port* y como cadena"
		},
		"urlPath": {
			"Syntax": "**urlPath** : Collection",
			"Summary": "la URL de la solicitud sin la parte *IP:port* y como una colección de cadenas"
		},
		"urlQuery": {
			"Syntax": "**urlQuery** : Object",
			"Summary": "los parámetros de la petición cuando se han dado en la URL como pares llave/valor"
		},
		"verb": {
			"Syntax": "**verb** : Text",
			"Summary": "el verbo usado por la petición"
		}
	},
	"MailAttachment": {
		"cid": {
			"Syntax": "**.cid** : Text",
			"Summary": "el ID del archivo adjunto"
		},
		"disposition": {
			"Syntax": "**.disposition** : Text",
			"Summary": "el valor del encabezado `Content-Disposition`"
		},
		"getContent()": {
			"Syntax": "**.getContent()** : 4D.Blob",
			"Params": [
				[
					"Resultado",
					"4D.Blob",
					"<-",
					"Contenido del anexo"
				]
			],
			"Summary": "devuelve el contenido del objeto adjunto en un objeto `4D.Blob`"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "el nombre y la extensión del adjunto"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "la ruta POSIX del archivo adjunto, si existe"
		},
		"platformPath": {
			"Syntax": "**.platformPath** : Text",
			"Summary": "la ruta del archivo adjunto expresada con la sintaxis de la plataforma actual"
		},
		"size": {
			"Syntax": "**.size** : Integer",
			"Summary": "el valor del encabezado `size` del archivo adjunto"
		},
		"type": {
			"Syntax": "**.type** : Text",
			"Summary": "el `content-type` del archivo adjunto"
		}
	},
	"OutgoingMessage": {
		"body": {
			"Syntax": "**body** : any",
			"Summary": "el cuerpo del mensaje saliente"
		},
		"headers": {
			"Syntax": "**headers** : Object",
			"Summary": "los encabezados actuales del mensaje saliente en forma de pares clave/valor"
		},
		"setBody()": {
			"Syntax": "**.setBody**( *body* : any )",
			"Params": [
				[
					"body",
					"any",
					"->",
					"Cuerpo del mensaje saliente"
				]
			],
			"Summary": "define el mensaje saliente *body*"
		},
		"setHeader()": {
			"Syntax": "**.setHeader**( *key* : Text ; *value* : Text )",
			"Params": [
				[
					"key",
					"Text",
					"->",
					"Propiedad de encabezado a definir"
				],
				[
					"value",
					"Text",
					"->",
					"Valor de la propiedad del encabezado"
				]
			],
			"Summary": "define lla llave *key* del encabezado del mensaje saliente con el *valuer* suministrado"
		},
		"setStatus()": {
			"Syntax": "**.setStatus**( *status* : Integer )",
			"Params": [
				[
					"status",
					"Integer",
					"->",
					"Estado a definir"
				]
			],
			"Summary": "define la propiedad `status` con el *status*"
		},
		"status": {
			"Syntax": "**status** : Integer",
			"Summary": "el estado actual del mensaje saliente"
		}
	},
	"POP3Transporter": {
		"delete()": {
			"Syntax": "**.delete**( *msgNumber* : Integer )",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número del mensaje a eliminar"
				]
			],
			"Summary": "marca el correo electrónico *msgNumber* para su eliminación del servidor POP3"
		},
		"getBoxInfo()": {
			"Syntax": "**.getBoxInfo()** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"objeto boxInfo"
				]
			],
			"Summary": "devuelve un objeto `boxInfo` correspondiente al buzón designado por el objeto `POP3 transporter`"
		},
		"getMail()": {
			"Syntax": "**.getMail**( *msgNumber* : Integer { ; *headerOnly* : Boolean } ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número del mensaje en la lista"
				],
				[
					"headerOnly",
					"Boolean",
					"->",
					"True para descargar sólo los encabezados del correo electrónico (por defecto, False)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objet Email"
				]
			],
			"Summary": "devuelve el objeto `Email` correspondiente al *msgNumber* en el buzón designado por el objeto `POP3 transporter`"
		},
		"getMailInfo()": {
			"Syntax": "**.getMailInfo**( *msgNumber* : Integer ) : Object",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número del mensaje en la lista"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"objeto mailInfo"
				]
			],
			"Summary": "devuelve un objeto `mailInfo` correspondiente al *msgNumber* en el buzón designado por el `transportador POP3`"
		},
		"getMailInfoList()": {
			"Syntax": "**.getMailInfoList()** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos `mailInfo`"
				]
			],
			"Summary": "devuelve una colección de objetos `mailInfo` que describen todos los mensajes en el buzón designado por el `transportador POP3`"
		},
		"getMIMEAsBlob()": {
			"Syntax": "**.getMIMEAsBlob**( *msgNumber* : Integer ) : Blob",
			"Params": [
				[
					"msgNumber",
					"Integer",
					"->",
					"Número del mensaje en la lista"
				],
				[
					"Resultado",
					"Blob",
					"<-",
					"Blob de la cadena MIME devuelta por el servidor de correo"
				]
			],
			"Summary": "devuelve un BLOB con el contenido MIME del mensaje correspondiente al *msgNumber* en el buzón designado por el objeto `POP3_transporter`"
		},
		"undeleteAll()": {
			"Syntax": "**.undeleteAll()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "elimina todas las marcas de eliminación definidas en los correos electrónicos en el `transportador POP3`"
		},
		"_inheritedFrom_": "Transporter"
	},
	"Session": {
		"clearPrivileges()": {
			"Syntax": "**.clearPrivileges()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la ejecución se ha realizado correctamente"
				]
			],
			"Summary": "elimina todos los privilegios asociados a la sesión y devuelve **True** si la ejecución se ha realizado correctamente"
		},
		"createOTP()": {
			"Syntax": "**.createOTP** ( { *lifespan* : Integer } ) : Text",
			"Params": [
				[
					"lifespan",
					"Integer",
					"->",
					"Duración de la vida del token de sesión en segundos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"UUID de la sesión"
				]
			],
			"Summary": "crea un nuevo OTP (One Time Passcode) para la sesión y devuelve su token UUID"
		},
		"expirationDate": {
			"Syntax": "**.expirationDate** : Text",
			"Summary": "la fecha y hora de expiración de la cookie de sesión"
		},
		"getPrivileges()": {
			"Syntax": "**.getPrivileges**() : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de nombres de privilegios (cadenas)"
				]
			],
			"Summary": "devuelve una colección de todos los nombres de privilegios asociados a la sesión"
		},
		"hasPrivilege()": {
			"Syntax": "**.hasPrivilege**( *privilege* : Text ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"Nombre del privilegio a verificar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la sesión tiene *privilege*, False en caso contrario"
				]
			],
			"Summary": "devuelve True si *privilege* está asociado a la sesión, y False en caso contrario"
		},
		"id": {
			"Syntax": "**.id** : Text",
			"Summary": "el identificador único (UUID) de la sesión de usuario"
		},
		"idleTimeout": {
			"Syntax": "**.idleTimeout** : Integer",
			"Summary": "el tiempo de inactividad de la sesión (en minutos), después del cual la sesión es cerrada automáticamente por 4D"
		},
		"info": {
			"Syntax": "**.info** : Object",
			"Summary": "describe la sesión del cliente remoto o del procedimiento almacenado en el servidor, o la sesión autónoma"
		},
		"isGuest()": {
			"Syntax": "**.isGuest()** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la sesión es una sesión Guest, False en caso contrario"
				]
			],
			"Summary": "devuelve True si la sesión es una sesión Guest (es decir, no tiene privilegios)"
		},
		"restore()": {
			"Syntax": "**.restore** ( *token* : Text ) : Boolean",
			"Params": [
				[
					"token",
					"Text",
					"->",
					"UUID del token de sesión"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la sesión actual ha sido reemplazada con éxito por la sesión del token"
				]
			],
			"Summary": "sustituye la sesión actual del usuario web por su sesión original correspondiente al *token* UUID"
		},
		"setPrivileges()": {
			"Syntax": "**.setPrivileges**( *privilege* : Text ) : Boolean<br/>**.setPrivileges**( *privileges* : Collection )<br/>**.setPrivileges**( *settings* : Object ) : Boolean",
			"Params": [
				[
					"privilege",
					"Text",
					"->",
					"Nombre del privilegio"
				],
				[
					"privileges",
					"Collection",
					"->",
					"Colección de nombres de privilegios"
				],
				[
					"settings",
					"Object",
					"->",
					"Objeto con una propiedad \"privilegios\" (cadena o colección)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la ejecución se ha realizado correctamente"
				]
			],
			"Summary": "asocia a la sesión los privilegios y/o roles definidos en el parámetro y devuelve **True** si la ejecución se ha realizado correctamente"
		},
		"storage": {
			"Syntax": "**.storage** : Object",
			"Summary": "un objeto compartido que puede utilizarse para almacenar información disponible para todos los procesos de la sesión"
		},
		"userName": {
			"Syntax": "**.userName** : Text",
			"Summary": "el nombre de usuario asociado a la sesión"
		}
	},
	"Signal": {
		"description": {
			"Syntax": "**.description** : Text",
			"Summary": "contiene una descripción personalizada para el objeto `Signal`."
		},
		"signaled": {
			"Syntax": "**.signaled** : Boolean",
			"Summary": "contiene el estado actual del objeto `Signal`"
		},
		"trigger()": {
			"Syntax": "**.trigger( )**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "define la propiedad `signaled` del objeto signal como **true**"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } ) : Boolean",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Tiempo máximo de espera en segundos"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la propiedad `.signaled`"
				]
			],
			"Summary": "hace que el proceso actual espere hasta que la propiedad `.signaled` del objeto signal se convierta en **true** o que el *timeout* opcional expire"
		}
	},
	"SMTPTransporter": {
		"keepAlive": {
			"Syntax": "**.keepAlive** : Boolean",
			"Summary": "**True** si la conexión SMTP debe permanecer activa hasta que el objeto `transporter` sea destruido"
		},
		"send()": {
			"Syntax": "**.send**( *mail* : Object ) : Object",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Email a enviar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado SMTP"
				]
			],
			"Summary": "envía el *objeto mail* al servidor SMTP definido en el objeto `transporter` y devuelve un objeto estado"
		},
		"_inheritedFrom_": "Transporter"
	},
	"SystemWorker": {
		"closeInput()": {
			"Syntax": "**.closeInput**()",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "cierra el flujo de entrada (*stdin*) del proceso externo"
		},
		"commandLine": {
			"Syntax": "**.commandLine** : Text",
			"Summary": "contiene la línea de comandos pasada como parámetro a la función `new()`"
		},
		"currentDirectory": {
			"Syntax": "**.currentDirectory** : 4D.Folder",
			"Summary": "contiene el directorio de trabajo en el que se ejecuta el proceso externo"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "contiene el tipo de contenido del cuerpo de la respuesta"
		},
		"encoding": {
			"Syntax": "**.encoding** : Text",
			"Summary": "contiene la codificación del contenido del cuerpo de la respuesta"
		},
		"errors": {
			"Syntax": "**.errors** : Collection",
			"Summary": "contiene una colección de errores 4D en caso de error(es) de ejecución si los hubiera"
		},
		"exitCode": {
			"Syntax": "**.exitCode** : Integer",
			"Summary": "contiene el código de salida devuelto por el proceso externo"
		},
		"hideWindow": {
			"Syntax": "**.hideWindow** : Boolean",
			"Summary": "puede utilizarse para ocultar la ventana de la consola DOS o la ventana del ejecutable lanzado (**sólo Windows**)"
		},
		"pid": {
			"Syntax": "**.pid** : Integer",
			"Summary": "contiene el identificador único del proceso externo a nivel de sistema"
		},
		"postMessage()": {
			"Syntax": "**.postMessage**( *message* : Text)<br/>**.postMessage**( *messageBLOB* : Blob)",
			"Params": [
				[
					"message",
					"Text",
					"->",
					"Texto a escribir en el flujo de entrada (stdin) del proceso externo"
				],
				[
					"messageBLOB",
					"Blob",
					"->",
					"Bytes escritos en el flujo de entrada"
				]
			],
			"Summary": "permite escribir en el flujo de entrada (stdin) del proceso externo"
		},
		"response": {
			"Syntax": "**.response** : Text<br/>**.response** : Blob",
			"Summary": "contiene la concatenación de todos los datos devueltos una vez finalizada la petición"
		},
		"responseError": {
			"Syntax": "**.responseError** : Text",
			"Summary": "contiene la concatenación de todos los errores devueltos, una vez finalizada la petición"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "fuerza al `SystemWorker` a terminar su ejecución"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "contiene **true** si el proceso externo está terminado"
		},
		"timeout": {
			"Syntax": "**.timeout** : Integer",
			"Summary": "contiene la duración en segundos antes de que el proceso externo sea eliminado si sigue vivo"
		},
		"wait()": {
			"Syntax": "**.wait**( {*timeout* : Real} ) : 4D.SystemWorker",
			"Params": [
				[
					"timeout",
					"Real",
					"->",
					"Tiempo máximo de espera en segundos"
				],
				[
					"Resultado",
					"4D.SystemWorker",
					"<-",
					"Objeto SystemWorker"
				]
			],
			"Summary": "espera hasta el final de la ejecución de `SystemWorker` o se alcanza el *timeout* especificado"
		}
	},
	"TCPConnection": {
		"address": {
			"Syntax": "**address** : Text",
			"Summary": "la dirección IP o el nombre de dominio de la máquina remota"
		},
		"closed": {
			"Syntax": "**closed** : Boolean",
			"Summary": "si la conexión está cerrada"
		},
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "una colección de objetos de error asociados a la conexión"
		},
		"listener": {
			"Syntax": "**listener** : Object",
			"Summary": "el objeto `TCPListener` que creó la `TCPConnection`, si existe"
		},
		"noDelay": {
			"Syntax": "**noDelay** : Boolean",
			"Summary": "si el algoritmo de Nagle está desactivado (`true`) o activado (`false`)"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "el número de puerto de la máquina remota"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob )",
			"params": [
				[
					"data",
					"Blob",
					"->",
					"Datos a enviar"
				]
			],
			"Summary": "envía datos al servidor"
		},
		"shutdown()": {
			"Syntax": "**.shutdown**()",
			"params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "cierra el canal *write* de la conexión (cliente a servidor)"
		},
		"wait()": {
			"Syntax": "**.wait**( { *timeout* : Real } )",
			"params": [
				[
					"timeout",
					"Real",
					"->",
					"Tiempo máximo de espera en segundos"
				]
			],
			"Summary": "espera hasta que se cierre la conexión TCP o se alcance el `timeout` especificado"
		}
	},
	"TCPEvent": {
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "los datos asociados al evento"
		},
		"ip": {
			"Syntax": "**ip** : Text",
			"Summary": "la dirección IP de la máquina remota"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "el número de puerto de la máquina remota"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "el tipo del evento"
		}
	},
	"TCPListener": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "una colección de objetos de error asociados con la conexión"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "el número de puerto de la máquina"
		},
		"terminate()": {
			"Syntax": "**.terminate**()",
			"params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "cierra el oyente y libera el puerto"
		}
	},
	"Transporter": {
		"acceptUnsecureConnection": {
			"Syntax": "**.acceptUnsecureConnection** : Boolean",
			"Summary": "**True** si se autoriza a 4D establecer una conexión no cifrada"
		},
		"authenticationMode": {
			"Syntax": "**.authenticationMode** : Text",
			"Summary": "el modo de autenticación utilizado para abrir la sesión en el servidor de correo"
		},
		"bodyCharset": {
			"Syntax": "**.bodyCharset** : Text",
			"Summary": "el conjunto de caracteres y la codificación utilizados para la parte del cuerpo del correo electrónico"
		},
		"connectionTimeOut": {
			"Syntax": "**.connectionTimeOut** : Integer",
			"Summary": "el tiempo máximo de espera (en segundos) permitido para establecer una conexión con el servidor"
		},
		"headerCharset": {
			"Syntax": "**.headerCharset** : Text",
			"Summary": "el conjunto de caracteres y la codificación utilizados para el encabezado del correo electrónico"
		},
		"host": {
			"Syntax": "**.host** : Text",
			"Summary": "el nombre o la dirección IP del servidor local"
		},
		"logFile": {
			"Syntax": "**.logFile** : Text",
			"Summary": "la ruta del archivo de registro extendido definido (si existe) para la conexión de correo"
		},
		"port": {
			"Syntax": "**.port** : Integer",
			"Summary": "el número de puerto utilizado para las transacciones de correo"
		},
		"sendTimeOut": {
			"Syntax": "**.sendTimeOut** : Integer",
			"Summary": "el tiempo máximo de espera (en segundos) de una llamada a `.send( )` antes de que se produzca un timeout"
		},
		"user": {
			"Syntax": "**.user** : Text",
			"Summary": "el nombre de usuario utilizado para la autenticación en el servidor de correo"
		},
		"checkConnection()": {
			"Syntax": "**.checkConnection()** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de la conexión del objeto transportador"
				]
			],
			"Summary": "comprueba la conexión utilizando la información almacenada en el objeto transporter"
		}
	},
	"UDPEvent": {
		"data": {
			"Syntax": "**data** : Blob",
			"Summary": "the data associated with the event"
		},
		"ip": {
			"Syntax": "**ip**: Text",
			"Summary": "the IP address of the remote machine"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number of the remote machine"
		},
		"type": {
			"Syntax": "**type** : Text",
			"Summary": "the type of the event"
		}
	},
	"UDPSocket": {
		"errors": {
			"Syntax": "**errors** : Collection",
			"Summary": "a collection of error objects associated with the socket"
		},
		"port": {
			"Syntax": "**port** : Number",
			"Summary": "the port number to listen to"
		},
		"send()": {
			"Syntax": "**.send**( *data* : Blob ; *hostName* : Text ; *remotePort* : Integer )",
			"params": [
				[
					"data",
					"Blob",
					"->",
					"Datos a enviar"
				],
				[
					"hostName",
					"Text",
					"->",
					"Nombre o dirección IP del servidor"
				],
				[
					"remotePort",
					"Integer",
					"->",
					"Puerto remoto al que conectarse (0=cualquiera)"
				]
			],
			"Summary": "sends *data* to the remote *hostName* server on the specified *remotePort*"
		}
	},
	"Vector": {
		"cosineSimilarity()": {
			"Syntax": "**.cosineSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector con el que comparar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Distancia entre vectores"
				]
			],
			"Summary": "calculates the cosine similarity between the current 4D vector and the one you passed in the *vector* parameter"
		},
		"dotSimilarity()": {
			"Syntax": "**.dotSimilarity**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector con el que comparar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Distancia entre vectores"
				]
			],
			"Summary": "calculates the dot product of the current 4D vector and the one you passed in the *vector* parameter"
		},
		"euclideanDistance()": {
			"Syntax": "**.euclideanDistance**( *vector* : 4D.Vector ) : Real",
			"Params": [
				[
					"vector",
					"4D.Vector",
					"->",
					"Vector con el que comparar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Distancia entre vectores"
				]
			],
			"Summary": "calculates the Euclidean distance between the current 4D vector and the one you passed in the *vector* parameter"
		},
		"length": {
			"Syntax": "**length** : Integer",
			"Summary": "the number of vector components"
		},
		"toCollection()": {
			"Syntax": "**.toCollection**() : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Collection of real numbers representing the vector components"
				]
			],
			"Summary": "returns the vector components as a collection of reals"
		}
	},
	"WebForm": {
		"componentName": {
			"Syntax": "***.componentName*** : 4D.WebFormItem",
			"Summary": "objetos disponibles directamente como propiedades"
		},
		"disableState()": {
			"Syntax": "**.disableState**( *state* : string)",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Nombre del estado a desactivar en el formulario web"
				]
			],
			"Summary": "desactiva la renderización del *estado* en el formulario web actual"
		},
		"enableState()": {
			"Syntax": "**.enableState**( *state* : string )",
			"Params": [
				[
					"state",
					"string",
					"->",
					"Nombre del estado a activar en el formulario web"
				]
			],
			"Summary": "activa la renderización del *estado* en el formulario web actual"
		},
		"setError()": {
			"Syntax": "**.setError**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Mensaje de error a mostrar en el formulario web"
				]
			],
			"Summary": "envía *msg* como mensaje de error al formulario web"
		},
		"setMessage()": {
			"Syntax": "**.setMessage**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Mensaje de información a mostrar en el formulario web"
				]
			],
			"Summary": "envía *msg* como mensaje de información al formulario web"
		},
		"setWarning()": {
			"Syntax": "**.setWarning**( *msg* : string)",
			"Params": [
				[
					"msg",
					"string",
					"->",
					"Mensaje de advertencia para mostrar en el formulario web"
				]
			],
			"Summary": "envía *msg* como mensaje de advertencia al formulario web"
		}
	},
	"_command_": {
		"Web Form": {
			"Syntax": "**Web Form** : 4D.WebForm",
			"Params": [
				[
					"Resultado",
					"4D.WebForm",
					"<-",
					"Nuevo objeto proxy `WebForm`"
				]
			],
			"Summary": "devuelve un objeto proxy `4D.WebForm` que permite interactuar con el formulario web"
		},
		"Web Event": {
			"Syntax": "**Web Event** : Object",
			"Params": [
				[
					"Resultado",
					"object",
					"<-",
					"object"
				]
			],
			"Summary": "devuelve un objeto con información sobre un evento desencadenado vinculado a un componente de formulario web"
		},
		"Call chain": {
			"Syntax": "**Call chain** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Collection of objects describing the call chain within a process"
				]
			],
			"Summary": "The **Call chain** command returns a collection of objects describing each step of the method call chain within the current process."
		},
		"Command name": {
			"Syntax": "**Command name** ( *command* {; *info* {; *theme*}} ) : Text",
			"Params": [
				[
					"comando",
					"Integer",
					"->",
					"Número de comando"
				],
				[
					"info",
					"Integer",
					"<-",
					"Propiedad del comando a evaluar"
				],
				[
					"theme",
					"Text",
					"<-",
					"Tema del lenguaje del comando"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del comando"
				]
			],
			"Summary": "devuelve el nombre así como (opcionalmente) las propiedades del comando cuyo número de comando pasa en *command*."
		},
		"Compile project": {
			"Syntax": "**Compile project** {( {*projectFile*}{;}{*options*} )} : Object",
			"Params": [
				[
					"projectFile",
					"4D.File",
					"->",
					"Archivo .4DProject a compilar"
				],
				[
					"options",
					"Object",
					"->",
					"Objeto que especifica las opciones de compilación"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Object containing information on the compilation status"
				]
			],
			"Summary": "permite compilar el proyecto local actual o el proyecto especificado en el parámetro *projectFile*."
		},
		"Create deployment license": {
			"Syntax": "**Create deployment license** ( *mergedApp* ; *autoLicenseTarget* ) : Object<br/>**Create deployment license** ( *mergedApp* ; *buildLicense* {; *oemLicense*} ) : Object",
			"Params": [
				[
					"mergedApp",
					"4D.Folder",
					"->",
					"Carpeta que contiene la aplicación fusionada"
				],
				[
					"autoLicenseTarget",
					"Integer",
					"->",
					"Target license for automatic license embedding"
				],
				[
					"buildLicense",
					"4D.File",
					"->",
					"License required to generate the embedded license"
				],
				[
					"oemLicense",
					"4D.File",
					"->",
					"Licencia 4D OEM XML Key si se trata de una licencia servidor"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado"
				]
			],
			"Summary": "The **Create deployment license** command creates an embedded license file in the Licenses folder of the *mergedApp* built application."
		},
		"Create entity selection": {
			"Syntax": "**Create entity selection** ( *dsTable* : Table { ; *settings* : Object } ) : 4D.EntitySelection",
			"Params": [
				[
					"dsTable",
					"Tabla",
					"->",
					"Tabla de la base 4D cuya selección actual se utilizará para construir la selección de entidades"
				],
				[
					"settings",
					"Object",
					"->",
					"Opciones de construcción: context"
				],
				[
					"Resultado",
					"4D.EntitySelection",
					"<-",
					"Selección de entidades que coinciden con la clase de datos relacionada con la tabla dada"
				]
			],
			"Summary": "crea y devuelve una nueva entity selection modificable relativa a la dataclass correspondiente con la *dsTable* dada, de acuerdo con la selección actual de esta tabla"
		},
		"DIALOG": {
			"Syntax": "**DIALOG** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Tabla",
					"->",
					"Table owning the form or If omitted: default table or use of project form"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of table or project form, or a POSIX path (string) to a .json file describing the form, or an object describing the form"
				],
				[
					"formData",
					"Object",
					"->",
					"Datos a asociar al formulario"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Usar el mismo proceso"
				]
			],
			"Summary": "The **DIALOG** command presents the *form* to the user, along with *formData* parameter(s) (optional)."
		},
		"ds": {
			"Syntax": "**ds** { ( *localID* : Text ) } : cs.DataStore",
			"Params": [
				[
					"localID",
					"Text",
					"->",
					"ID local del almacén de datos remoto a devolver"
				],
				[
					"Resultado",
					"cs.DataStore",
					"<-",
					"Referencia al almacén de datos"
				]
			],
			"Summary": "devuelve una referencia al almacén de datos que coincide con la base de datos 4D actual o con la base de datos designada por *localID*"
		},
		"File": {
			"Syntax": "**File** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.File<br/>**File** ( *fileConstant* : Integer { ; \\* } ) : 4D.File",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Ruta del archivo"
				],
				[
					"fileConstant",
					"Integer",
					"->",
					"Constante del archivo 4D"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (por defecto) o `fk platform path`"
				],
				[
					"\\*",
					"operator",
					"->",
					"\\* para devolver el archivo de la base local"
				],
				[
					"Resultado",
					"4D.File",
					"<-",
					"Nuevo objeto de archivo"
				]
			],
			"Summary": "crea y devuelve un nuevo objeto del tipo `4D.File`"
		},
		"Folder": {
			"Syntax": "**Folder** ( *path* : Text { ; *pathType* : Integer }{ ; \\* } ) : 4D.Folder<br/>**Folder** ( *folderConstant* : Integer { ; \\* } ) : 4D.Folder",
			"Params": [
				[
					"path",
					"Text",
					"->",
					"Ruta de la carpeta"
				],
				[
					"folderConstant",
					"Integer",
					"->",
					"Constante de la carpeta 4D"
				],
				[
					"pathType",
					"Integer",
					"->",
					"`fk posix path` (por defecto) o `fk platform path`"
				],
				[
					"\\*",
					"operator",
					"->",
					"\\* para devolver la carpeta de la base local"
				],
				[
					"Resultado",
					"4D.Folder",
					"<-",
					"Nuevo objeto de carpeta"
				]
			],
			"Summary": "crea y devuelve un nuevo objeto del tipo `4D.Folder` tipo"
		},
		"FORM EDIT": {
			"Syntax": "**FORM EDIT** ( {*aTable* ;} *form* )<br/>**FORM EDIT** ( {*aTable* ;} *form* ; *object* )",
			"Params": [
				[
					"aTable",
					"Tabla",
					"->",
					"Table owning the form or If omitted: default table or use of project form"
				],
				[
					"form",
					"Text",
					"->",
					"Nombre del formulario"
				],
				[
					"object",
					"Text",
					"->",
					"Nombre del objeto del formulario o nombre del grupo"
				]
			],
			"Summary": "The **FORM EDIT** command opens the *form* associated to *aTable* in the 4D Form editor, with optionnally *object* selected."
		},
		"Form event code": {
			"Syntax": "**Form event code**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de evento formulário"
				]
			]
		},
		"FORM Event": {
			"Syntax": "**FORM Event** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto evento"
				]
			],
			"Summary": "**FORM Event** returns an object containing information about the form event that has just occurred."
		},
		"FORM LOAD": {
			"Syntax": "**FORM LOAD** ( {*aTable* ;} *form* {; *formData*}{; *} )",
			"Params": [
				[
					"aTable",
					"Tabla",
					"->",
					"Formulario tabla a cargar (si se omite, carga un formulario proyecto)"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Nombre (cadena) del formulario (proyecto o tabla), o una ruta POSIX (cadena) a un archivo .json que describa el formulario, o un objeto que describa el formulario a abrir"
				],
				[
					"formData",
					"Object",
					"->",
					"Datos a asociar al formulario"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base de datos del host cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "The **FORM LOAD** command is used to load the *form* in memory in the current process along with *formData* (optional) in order to print its data or parse its contents."
		},
		"Form": {
			"Syntax": "**Form**  : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Datos del formulario actual"
				]
			],
			"Summary": "The **Form** command returns the object associated with the current form (instantiated from the *formData* parameter or the user class assigned in the Form editor)."
		},
		"Formula from string": {
			"Syntax": "**Formula from string**( *formulaString* : Text ) : 4D.Function<br/>**Formula from string**( *formulaString* : Text ; *context* : Longint ) : 4D.Function",
			"Params": [
				[
					"formulaString",
					"Text",
					"->",
					"Fórmula texto a devolver como objeto"
				],
				[
					"context",
					"Number",
					"->",
					"`sk execute in current database` (por defecto) o `sk execute in host database`"
				],
				[
					"Resultado",
					"4D.Function",
					"<-",
					"Objeto nativo que encapsula la fórmula"
				]
			],
			"Summary": "crea un objeto `4D.Function` basado en *formulaString* y, opcionalmente, *context*"
		},
		"Formula": {
			"Syntax": "**Formula** ( *formulaExp* : Expression ) : 4D.Function",
			"Params": [
				[
					"formulaExp",
					"Expression",
					"->",
					"Fórmula a devolver como objeto"
				],
				[
					"Resultado",
					"4D.Function",
					"<-",
					"Función nativa que encapsula la fórmula"
				]
			],
			"Summary": "crea un objeto `4D Function` basado en la expresión *formulaExp*"
		},
		"HTTP Parse message": {
			"Syntax": "**HTTP Parse message** ( *data* : Text ) : Object<br/>**HTTP Parse message**( *data* : Blob ) : Object",
			"Params": [
				[
					"data",
					"Text, Blob",
					"->",
					"Datos a analizar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto, cada propiedad es parte de los datos de varias partes"
				]
			],
			"Summary": "analiza un texto o un blob multipart/form-data (message HTTP \"response\") y extrae el contenido a un objeto. Cada propiedad del objeto devuelto corresponde a una parte de los datos multiparte"
		},
		"IMAP New transporter": {
			"Syntax": "**IMAP New transporter**( *server* : Object ) : 4D.IMAPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Información del servidor de correo"
				],
				[
					"Resultado",
					"4D.IMAPTransporter",
					"<-",
					"Objeto IMAP transporter"
				]
			],
			"Summary": "configura una nueva conexión IMAP"
		},
		"Last errors": {
			"Syntax": "**Last errors** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos de error"
				]
			],
			"Summary": "The **Last errors** command returns the current stack of errors of the 4D application as a collection of error objects, or **null** if no error occurred."
		},
		"License info": {
			"Syntax": "**License info** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre la licencia activa"
				]
			],
			"Summary": "The **License info** command returns an object providing detailed information about the active license."
		},
		"LISTBOX Get property": {
			"Syntax": "**LISTBOX Get property** ( {* ;} *object* ; *property* ) : any",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"Si se especifica, object es un nombre de objeto (cadena). Si se omite, object es una variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if \\* is specified) or Variable (if \\* is omitted)"
				],
				[
					"property",
					"Integer",
					"->",
					"Propiedad cuyo valor desea obtener"
				],
				[
					"Resultado",
					"Integer, Text",
					"<-",
					"Valor actual"
				]
			],
			"Summary": "The **LISTBOX Get property** command returns the value of the *property* of the list box or column specified using the *object* and *\\** parameters."
		},
		"LISTBOX SET PROPERTY": {
			"Syntax": "**LISTBOX SET PROPERTY** ( {* ;} *object* ; *property* ; *value* )",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"Si se especifica, object es un nombre de objeto (cadena). Si se omite, object es una variable."
				],
				[
					"object",
					"any",
					"->",
					"Object name (if \\* is specified) or Variable (if \\* is omitted)"
				],
				[
					"property",
					"Integer",
					"->",
					"List box or column property"
				],
				[
					"value",
					"Integer, Text",
					"->",
					"Valor de la propiedad"
				]
			],
			"Summary": "The **LISTBOX SET PROPERTY** command sets the *value* for the *property* of the list box or list box column specified using the *object* and *\\** parameters."
		},
		"MAIL Convert from MIME": {
			"Syntax": "**MAIL Convert from MIME**( *mime* : Blob ) : Object<br/>**MAIL Convert from MIME**( *mime* : Text ) : Object",
			"Params": [
				[
					"mime",
					"Blob, Text",
					"->",
					"Email en MIME"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto Email"
				]
			],
			"Summary": "convierte un documento MIME en un objeto de correo electrónico válido"
		},
		"MAIL Convert to MIME": {
			"Syntax": "**MAIL Convert to MIME**( *mail* : Object { ; *options* : Object } ) : Text",
			"Params": [
				[
					"mail",
					"Object",
					"->",
					"Objeto Email"
				],
				[
					"options",
					"Object",
					"->",
					"Opciones de codificación y de charset del mail"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Objeto email convertido en MIME"
				]
			],
			"Summary": "convierte un objeto email en texto MIME"
		},
		"MAIL New attachment": {
			"Syntax": "**MAIL New attachment**( *file* : 4D.File { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *zipFile* : 4D.ZipFile { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *blob* : 4D.Blob { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment<br/>**MAIL New attachment**( *path* : Text { ; *name* : Text {; *cid* : Text{ ; *type* : Text { ; *disposition* :Text } } } } ) : 4D.MailAttachment",
			"Params": [
				[
					"file",
					"4D.File",
					"->",
					"Archivo adjunto"
				],
				[
					"zIPFile",
					"4D.ZipFile",
					"->",
					"Archivo zip adjunto"
				],
				[
					"blob",
					"4D.Blob",
					"->",
					"BLOB que contiene el adjunto"
				],
				[
					"path",
					"Text",
					"->",
					"Ruta del archivo adjunto"
				],
				[
					"name",
					"Text",
					"->",
					"Nombre + extensión utilizados por el cliente de correo para designar el archivo adjunto"
				],
				[
					"cid",
					"Text",
					"->",
					"ID del archivo adjunto (sólo en mensajes HTML), o \" \" si no se requiere cid"
				],
				[
					"type",
					"Text",
					"->",
					"Valor del encabezado content-type"
				],
				[
					"disposition",
					"Text",
					"->",
					"Valor del encabezado content-disposition: \"inline\" o \"attachment\"."
				],
				[
					"Resultado",
					"4D.MailAttachment",
					"<-",
					"Objeto adjunto"
				]
			],
			"Summary": "le permite crear un objeto adjunto que puede agregar a un objeto de Email"
		},
		"New collection": {
			"Syntax": "**New collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection, Picture, Pointer",
					"->",
					"Valor(es) de collection"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nueva colección"
				]
			],
			"Summary": "crea una nueva colección vacía o prellenada y devuelve su referencia."
		},
		"New log file": {
			"Syntax": "**New log file** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta completa del archivo de registro cerrado"
				]
			],
			"Summary": "The **New log file** command closes the current log file, renames it and creates a new one with the same name in the same location as the previous one"
		},
		"New shared collection": {
			"Syntax": "**New shared collection** {( *...value* : any )} : Collection",
			"Params": [
				[
					"value",
					"Number, Text, Date, Time, Boolean, Object, Collection",
					"->",
					"Valor(es) de la collection compartida"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"New shared collection"
				]
			],
			"Summary": "crea una nueva colección compartida vacía o precargada"
		},
		"New signal": {
			"Syntax": "**New signal** { ( *description* : Text ) } : 4D.Signal",
			"Params": [
				[
					"description",
					"Text",
					"->",
					"Descripción para la señal"
				],
				[
					"Resultado",
					"4D.Signal",
					"<-",
					"Objeto nativo que encapsula la señal"
				]
			],
			"Summary": "crea un objeto `4D.Signal`"
		},
		"Num": {
			"Syntax": "**Num** ( *expression* {; *separator*} ) : Real<br/>**Num** ( *expression* ; *base* ) : Real",
			"Params": [
				[
					"expresión",
					"Text, Boolean, Integer",
					"->",
					"String for which to return the numeric form, or Boolean to return 0 or 1, or Numeric expression"
				],
				[
					"separador",
					"Text",
					"->",
					"Separador decimal"
				],
				[
					"base",
					"Integer",
					"->",
					"Valor entre 2 y 36 que representa la base"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Forma numérica del parámetro de expresión"
				]
			],
			"Summary": "The **Num** command returns the numeric form of the String, Boolean or numeric expression you pass in *expression*."
		},
		"OBJECT Get data source formula": {
			"Syntax": "**OBJECT Get data source formula** ( {* ;} *object* ) : *formula*",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if \\* is specified) or<br/>Field or variable (if \\* is omitted)"
				],
				[
					"formula",
					"4D.Formula",
					"<-",
					"Formula associated with the form object (`Null` if no formula is associated)"
				]
			],
			"Summary": "returns the formula (if any) associated object(s) designated by the *object* and *\\** parameters."
		},
		"OBJECT SET DATA SOURCE FORMULA": {
			"Syntax": "**OBJECT SET DATA SOURCE FORMULA** ( {* ;} *object* ; *formula* )",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"If specified, object is an object name (string)<br/>If omitted, object is a field or variable"
				],
				[
					"object",
					"any",
					"->",
					"Object name (if \\* is specified) or<br/>Field or variable (if \\* is omitted)"
				],
				[
					"formula",
					"4D.Formula",
					"->",
					"Fórmula a asignar como fuente de datos"
				]
			],
			"Summary": "assigns a formula (expression) as the data source of the object(s) designated by the *object* and *\\** parameters"
		},
		"Open datastore": {
			"Syntax": "**Open datastore**( *connectionInfo* : Object ; *localID* : Text ) : 4D.DataStoreImplementation",
			"Params": [
				[
					"connectionInfo",
					"Object",
					"->",
					"Propiedades de conexión utilizadas para alcanzar el almacén de datos remoto"
				],
				[
					"localID",
					"Text",
					"->",
					"Id para asignar al almacén de datos abierto en la aplicación local (obligatorio)"
				],
				[
					"Resultado",
					"4D.DataStoreImplementation",
					"<-",
					"Objeto del almacén de datos"
				]
			],
			"Summary": "conecta la aplicación al datastore remoto identificado por el parámetro *connectionInfo*"
		},
		"POP3 New transporter": {
			"Syntax": "**POP3 New transporter**( *server* : Object ) : 4D.POP3Transporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Información del servidor de correo"
				],
				[
					"Resultado",
					"4D.POP3Transporter",
					"<-",
					"Objeto transporter POP3"
				]
			],
			"Summary": "configura una nueva conexión POP3"
		},
		"Print form": {
			"Syntax": "**Print form** ( {*aTable* ;} *form* {; *formData*} {; *areaStart*{; *areaEnd*}} ) : Integer",
			"Params": [
				[
					"aTable",
					"Tabla",
					"->",
					"Table owning the form, or Default table, if omitted"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Name (string) of the form, or a POSIX path (string) to a .json file describing the form, or an object describing the form to print"
				],
				[
					"formData",
					"Object",
					"->",
					"Datos a asociar al formulario"
				],
				[
					"areaStart",
					"Integer",
					"->",
					"Marcador de impresión, o Área inicial (si se especifica areaEnd)"
				],
				[
					"areaEnd",
					"Integer",
					"->",
					"Área final (si se especifica areaStart)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura de la sección impresa"
				]
			],
			"Summary": "The **Print form** command simply prints *form* with the current values of fields and variables of *aTable*."
		},
		"Process activity": {
			"Syntax": "**Process activity** () : Object<br/>**Process activity** ( *options* ) : Object<br/>**Process activity** ( *sessionID* ) : Object<br/>**Process activity** ( *sessionID* ; *options* ) : Object",
			"Params": [
				[
					"sessionID",
					"Text",
					"->",
					"ID de sesión"
				],
				[
					"options",
					"Integer",
					"->",
					"Opciones de retorno"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Instantánea de los procesos en ejecución y/o sesiones de usuario (sólo 4D Server)"
				]
			],
			"Summary": "The **Process activity** command returns a snapshot of running processes and/or (4D Server only) connected user sessions at a given time."
		},
		"Process info": {
			"Syntax": "**Process info** ( *processNumber* : Integer ) : Object",
			"Params": [
				[
					"processNumber",
					"Integer",
					"->",
					"Process number"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre el proceso"
				]
			],
			"Summary": "devuelve un objeto que da información detallada sobre el proceso cuyo número se pasa en *processNumber*"
		},
		"Process number": {
			"Syntax": "**Process number** ( *name* {; *} ) : Integer<br/>**Process number** ( *id* {; *} ) : Integer",
			"Params": [
				[
					"name",
					"Text",
					"->",
					"Nombre del proceso del que se desea obtener el número de proceso"
				],
				[
					"id",
					"Text",
					"->",
					"ID del proceso del que se desea obtener el número de proceso"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Devuelve el número de proceso del servidor"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Process number"
				]
			],
			"Summary": "The `Process number` command returns the number of the process whose *name* or *id* you pass in the first parameter"
		},
		"SELECT LOG FILE": {
			"Syntax": "**SELECT LOG FILE** ( *logFile* )<br/>**SELECT LOG FILE** ( * )",
			"Params": [
				[
					"logFile",
					"Text",
					"->",
					"Nombre del archivo de registro"
				],
				[
					"\\*",
					"Operador",
					"->",
					"Cerrar el archivo de registro actual"
				]
			],
			"Summary": "The **SELECT LOG FILE** command creates, or closes the log file according to the value you pass in parameter"
		},
		"Session info": {
			"Syntax": "**Session info** ( *sessionId* : Integer ) : Object",
			"Params": [
				[
					"sessionID",
					"Integer",
					"->",
					"ID de sesión"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre la sesión"
				]
			],
			"Summary": "devuelve un objeto que describe la sesión cuyo ID pasa en el parámetro *sessionID*."
		},
		"Session storage": {
			"Syntax": "**Session storage** ( *id* ) : Object",
			"Params": [
				[
					"id",
					"Text",
					"->",
					"Identificador único (UUID) de la sesión"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de almacenamiento de la sesión"
				]
			],
			"Summary": "The **Session storage** command returns the storage object of the session whose unique identifier you passed in the *id* parameter."
		},
		"Session": {
			"Syntax": "**Session** : 4D.Session",
			"Params": [
				[
					"Resultado",
					"4D.Session",
					"<-",
					"Objeto Session"
				]
			],
			"Summary": "devuelve el objeto `Session` correspondiente a la sesión usuario actual"
		},
		"SET ALLOWED METHODS": {
			"Syntax": "**SET ALLOWED METHODS** ( *methodsArray* )",
			"Params": [
				[
					"methodsArray",
					"Array de texto",
					"->",
					"Array de nombres de métodos"
				]
			],
			"Summary": "The **SET ALLOWED METHODS** command designates the project methods that can be entered via the application."
		},
		"SET WINDOW DOCUMENT ICON": {
			"Syntax": "**SET WINDOW DOCUMENT ICON** ( *winRef* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *image* )<br/>**SET WINDOW DOCUMENT ICON** ( *winRef* ; *file* )<br/>**SET WINDOW DOCUMENT ICON** (  *winRef* ; *image* ; *file* )",
			"Params": [
				[
					"winRef",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				],
				[
					"image",
					"Picture",
					"->",
					"Ícono personalizado"
				],
				[
					"file",
					"4D.File, 4D.Folder",
					"->",
					"Ruta del archivo o de la carpeta"
				]
			],
			"Summary": "permite definir un icono para las ventanas en aplicaciones multiventana utilizando una *image* y/o un *file* con la referencia de ventana *winRef*"
		},
		"SMTP New transporter": {
			"Syntax": "**SMTP New transporter**( *server* : Object ) : 4D.SMTPTransporter",
			"Params": [
				[
					"server",
					"Object",
					"->",
					"Información del servidor de correo"
				],
				[
					"Resultado",
					"4D.SMTPTransporter",
					"<-",
					"Objeto SMTP transporter"
				]
			],
			"Summary": "configura una nueva conexión SMTP"
		},
		"String": {
			"Syntax": "**String** ( *expression* {; *format* {; *addTime*}} ) : Text<br/>**String** ( *expression* ; *base* ) : Text",
			"Params": [
				[
					"expression",
					"Expression",
					"->",
					"Expresión a convertir en cadena (puede ser Real, Integer, Long Integer, Date, Time, Text, Boolean, Undefined, o Null)"
				],
				[
					"format",
					"Integer, Text",
					"->",
					"Formato de visualización"
				],
				[
					"addTime",
					"Time",
					"->",
					"Hora a combinar si *expression* es una fecha"
				],
				[
					"base",
					"Integer",
					"->",
					"Valor entre 2 y 36 que representa la base si *expression* es un número"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"expresión convertida en cadena alfanumérica"
				]
			],
			"Summary": "El comando **String** devuelve en forma de cadena alfanumérica la expresión numérica, fecha, hora, cadena o booleana que se pasa en *expression*."
		},
		"Super": {
			"Syntax": "**Super**( ...param : any )<br/>**Super** : Object",
			"Params": [
				[
					"param",
					"any",
					"->",
					"Parámetro(s) a pasar al constructor de la clase padre"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Padre del objeto"
				]
			],
			"Summary": "permite llamar a la `superclass`, es decir, la clase padre"
		},
		"This": {
			"Syntax": "**This** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Elemento u objeto actual"
				]
			],
			"Summary": "devuelve una referencia al objeto procesado actualmente."
		},
		"Trim end": {
			"Syntax": "**Trim end** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"Texto a recortar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto recortado"
				]
			],
			"Summary": "removes **whitespace** from the end of the *aString* parameter and returns a new string, without modifying the original one."
		},
		"Trim start": {
			"Syntax": "**Trim start** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"Texto a recortar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto recortado"
				]
			],
			"Summary": "removes **whitespace** from the beginning of the *aString* parameter and returns a new string, without modifying the original one."
		},
		"Trim": {
			"Syntax": "**Trim** ( *aString* ) : Text",
			"Params": [
				[
					"aString",
					"Text",
					"->",
					"Texto a recortar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto recortado"
				]
			],
			"Summary": "removes **whitespace** from both ends of the *aString* parameter and returns a new string, without modifying the original one."
		},
		"USE ENTITY SELECTION": {
			"Syntax": "**USE ENTITY SELECTION** ( *entitySelection* : 4D.EntitySelection )",
			"Params": [
				[
					"entitySelection",
					"4D.EntitySelection",
					"->",
					"Una entity selection"
				]
			],
			"Summary": "actualiza la selección actual de la tabla que coincide con el nivel de datos del parámetro *entitySelection*, de acuerdo al contenido de la selección de entidad"
		},
		"WA Get context": {
			"Syntax": "**WA Get context** ( {* ;} *object* ) -> *contextObj*",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"Si se especifica, *object* es un nombre de objeto (cadena). Si se omite, *object* es una variable."
				],
				[
					"object",
					"any",
					"->",
					"Nombre del objeto (si se especifica \\*) o Variable (si se omite \\*)."
				],
				[
					"contextObj",
					"Object",
					"<-",
					"Context object if previously defined, otherwise `null`."
				]
			],
			"Summary": "recupera el objeto de contexto definido para `$4d` en el área Web designada por los parámetros \\* y *object* utilizando `WA SET CONTEXT`."
		},
		"WA SET CONTEXT": {
			"Syntax": "**WA SET CONTEXT** ( {* ;} *object* ; *contextObj* )",
			"Params": [
				[
					"\\*",
					"Operador",
					"->",
					"Si se especifica, *object* es un nombre de objeto (cadena). Si se omite, *object* es una variable."
				],
				[
					"object",
					"any",
					"->",
					"Nombre del objeto (si se especifica \\*) o Variable (si se omite \\*)."
				],
				[
					"contextObj",
					"Object",
					"->",
					"Object containing the functions that can be called with `$4d`."
				]
			],
			"Summary": "define un objeto contextual *contextObj* para `$4d` en el área Web designado por los parámetros \\* y *object*. When this command is used, `$4d` can only access contents declared within the provided *contextObj*. When no context object is set, `$4d` has access to all 4D methods and can not access user classes."
		},
		"WEB Server list": {
			"Syntax": "**WEB Server list** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de los objetos Web Server disponibles"
				]
			],
			"Summary": "devuelve una colección de todos los objetos del servidor Web disponibles en la aplicación 4D"
		},
		"WEB Server": {
			"Syntax": "**WEB Server** : 4D.WebServer<br/>**WEB Server**( *option* : Integer ) : 4D.WebServer",
			"Params": [
				[
					"option",
					"Integer",
					"->",
					"Servidor web a obtener (por defecto si se omite = `Web server database`)"
				],
				[
					"Resultado",
					"4D.WebServer",
					"<-",
					"Objeto servidor web"
				]
			],
			"Summary": "devuelve el objeto del servidor web predeterminado, o el objeto del servidor web definido a través del parámetro *option*"
		},
		"ZIP Create archive": {
			"Syntax": "**ZIP Create archive** ( *fileToZip* : 4D.File ; *destinationFile* : 4D.File ) : Object<br/>**ZIP Create archive** ( *folderToZip* : 4D.Folder ; *destinationFile* : 4D.File { ; *options* : Integer }) : Object<br/>**ZIP Create archive** ( *zipStructure* : Object ; *destinationFile* : 4D.File ) : Object",
			"Params": [
				[
					"fileToZip",
					"4D.File",
					"->",
					"Objeto archivo o carpeta a comprimir"
				],
				[
					"folderToZip",
					"4D.Folder",
					"->",
					"Objeto archivo o carpeta a comprimir"
				],
				[
					"zipStructure",
					"Object",
					"->",
					"Objeto archivo o carpeta a comprimir"
				],
				[
					"destinationFile",
					"4D.File",
					"->",
					"Archivo de destino del archivo"
				],
				[
					"options",
					"Integer",
					"->",
					"Opción *folderToZip*: `ZIP Without enclosing folder`"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto estado"
				]
			],
			" Summary": "crea un objeto archivo ZIP comprimido y devuelve el estado de la operación"
		},
		"ZIP Read archive": {
			"Syntax": "**ZIP Read archive** ( *zipFile* : 4D.File { ; *password* : Text }) : 4D.ZipArchive",
			"Params": [
				[
					"zIPFile",
					"4D.File",
					"->",
					"Archivos Zip"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Contraseña del archivo ZIP, si la hay"
				],
				[
					"Resultado",
					"4D.ZipArchive",
					"<-",
					"Objeto archivo"
				]
			],
			"Summary": "recupera el contenido de *zipFile* y lo devuelve como un objeto `4D.ZipArchive`"
		},
		"ABORT PROCESS BY ID": {
			"Syntax": "**ABORT PROCESS BY ID** ( *IDunico* )",
			"Params": [
				[
					"IDunico",
					"Integer",
					"->",
					"ID de proceso único"
				]
			],
			"Summary": "El comando **ABORT PROCESS BY ID** detiene un proceso específico en el servidor 4D."
		},
		"ABORT": {
			"Syntax": "**ABORT**",
			"Params": [],
			"Summary": "El comando ABORT se utiliza en un método de proyecto de gestión de errores instalado por el comando ON ERR CALL."
		},
		"Abs": {
			"Syntax": "**Abs** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número del cual quiere obtener el valor absoluto"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor absoluto de número"
				]
			],
			"Summary": "Abs devuelve el valor absoluto (positivo y sin signo) de *número*."
		},
		"ACCEPT": {
			"Syntax": "**ACCEPT**",
			"Params": [],
			"Summary": "**ACCEPT** efectúa la misma acción que si un usuario hubiera presionado la tecla **Intro**."
		},
		"ACCUMULATE": {
			"Syntax": "**ACCUMULATE** ( *objeto* {; *objeto2* ; ... ; *objetoN*} )",
			"Params": [
				[
					"objeto",
					"Field, Variable",
					"->",
					"Campo o variable de tipo numérico a acumular"
				]
			],
			"Summary": "ACCUMULATE especifica los campos o variables a acumular en un informe realizado utilizando PRINT SELECTION."
		},
		"Action info": {
			"Syntax": "**Action info** ( *action* {; *objetivo*} ) : Object",
			"Params": [
				[
					"action",
					"Text",
					"->",
					"Nombre o patrón de acción estándar incluyendo el parámetro si es necesario"
				],
				[
					"objetivo",
					"Integer",
					"->",
					"Define el objetivo de la acción para obtener información: forma principal o forma actual"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contiene el estado de la acción como propiedades booleanas: isEnabled, isVisible, isChecked, isMixed, isUnknownState"
				]
			],
			"Summary": "El comando **Action info** devuelve diferente información, incluida la disponibilidad y el estado, sobre la *accion* definida en el *objetivo*, de acuerdo con el contexto de la aplicación actual."
		},
		"Activated": {
			"Syntax": "**Activated**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve TRUE si el ciclo de ejecución está en activación"
				]
			],
			"Summary": "El comando **Activated** (obsoleto) devuelve **True** en un método formulario cuando la ventana que contiene el formulario se convierte en la ventana del primer plano del proceso del primer plano."
		},
		"Active transaction": {
			"Syntax": "**Active transaction** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve False si se suspende la transacción actual"
				]
			],
			"Summary": "El comando **Active transaction** devuelve **True** si el proceso actual está en transacción y si esta transacción no se suspende."
		},
		"ACTIVITY SNAPSHOT": {
			"Syntax": "**ACTIVITY SNAPSHOT** ( arrActividades | arrUUID ; *arrInicio* ; *arrDuracion* ; *arrInfo* {; *arrDetails*}{; *} )",
			"Params": [
				[
					"arrActividades &#124; arrUUID",
					"Array objeto, Array texto",
					"<-",
					"Descripción completa de operaciones (array objeto) o<br/>UUIDs de las operaciones (array texto)"
				],
				[
					"arrInicio",
					"Text array",
					"<-",
					"Horas de inicio de las operaciones"
				],
				[
					"arrDuracion",
					"Integer array",
					"<-",
					"Duración de las operaciones en milisegundos"
				],
				[
					"arrInfo",
					"Text array",
					"<-",
					"Descripción"
				],
				[
					"arrDetails",
					"Object array",
					"<-",
					"Detalles del contexto y sub operaciones (si las hay)"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = Traer actividad del servidor"
				]
			],
			"Summary": "El comando **ACTIVITY SNAPSHOT** retorna un array o varios que describen las operaciones en progreso sobre los datos 4D."
		},
		"ADD RECORD": {
			"Syntax": "**ADD RECORD** ( {*tabla*}{;}{*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a utilizar para entrada de datos o Tabla por defecto, si se omite"
				],
				[
					"*",
					"Operator",
					"->",
					"Ocultar barras de desplazamiento"
				]
			],
			"Summary": "**Este comando se implementó en las primeras versiones de 4D y sigue siendo útil para la creación de prototipos o desarrollos básicos."
		},
		"Add to date": {
			"Syntax": "**Add to date** ( *fecha* ; *años* ; *meses* ; *días* ) : Date",
			"Params": [
				[
					"fecha",
					"Date",
					"->",
					"Fecha a la cual añadir días, meses y años"
				],
				[
					"años",
					"Integer",
					"->",
					"Número de años a añadir a la fecha"
				],
				[
					"meses",
					"Integer",
					"->",
					"Número de meses a añadir a la fecha"
				],
				[
					"días",
					"Integer",
					"->",
					"Número de días a añadir a la fecha"
				],
				[
					"Resultado",
					"Date",
					"<-",
					"Fecha resultante"
				]
			],
			"Summary": "El comando Add to date añade *años*, *meses,* y *días* a la fecha pasada en *fecha*, luego devuelve la fecha resultante."
		},
		"ADD TO SET": {
			"Syntax": "**ADD TO SET** ( {*tabla* ;} *conjunto* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro actual o Tabla por defecto si se omite"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto al cual añadir el registro actual"
				]
			],
			"Summary": "ADD TO SET añade el registro actual de *tabla* a *conjunto*."
		},
		"ADJUST BLOBS CACHE PRIORITY": {
			"Syntax": "**ADJUST BLOBS CACHE PRIORITY** ( *tabla* ; *prioridad* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla cuyo valor de prioridad de datos \"blobs\" tiene que ser ajustado"
				],
				[
					"prioridad",
					"Integer",
					"->",
					"Valor de prioridad de la caché para los BLOBs en la tabla"
				]
			],
			"Summary": "Este comando está reservado para necesidades específicas."
		},
		"ADJUST INDEX CACHE PRIORITY": {
			"Syntax": "**ADJUST INDEX CACHE PRIORITY** ( *campo* ; *prioridad* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo cuyo valor de prioridad de índice(s) debe ajustarse"
				],
				[
					"prioridad",
					"Integer",
					"->",
					"Valor de prioridad de la caché para los índices de campo"
				]
			],
			"Summary": "Este comando está reservado para necesidades específicas."
		},
		"ADJUST TABLE CACHE PRIORITY": {
			"Syntax": "**ADJUST TABLE CACHE PRIORITY** ( *tabla* ; *prioridad* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla cuyo valor de prioridad de datos escalar tiene que ser ajustado"
				],
				[
					"prioridad",
					"Integer",
					"->",
					"Valor de prioridad de la caché para la tabla"
				]
			],
			"Summary": "Este comando está reservado para necesidades específicas."
		},
		"After": {
			"Syntax": "**After**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve True si el ciclo de ejecución es un after"
				]
			],
			"Summary": "**After** devuelve True para el ciclo de ejecución After."
		},
		"ALERT": {
			"Syntax": "**ALERT** ( *mensaje* {; *titulobotonOK*} )",
			"Params": [
				[
					"mensaje",
					"Text",
					"->",
					"Mensaje a mostrar en la caja de diálogo de alerta"
				],
				[
					"titulobotonOK",
					"Text",
					"->",
					"Título del botón OK"
				]
			],
			"Summary": "El comando **ALERT** muestra una caja de diálogo de alerta compuesta de un icono, de un mensaje y de un botón OK."
		},
		"ALL RECORDS": {
			"Syntax": "**ALL RECORDS** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual seleccionar todos los registros o Tabla por defecto, si se omite"
				]
			],
			"Summary": "ALL RECORDS selecciona todos los registros de *tabla* para el proceso actual."
		},
		"APPEND DATA TO PASTEBOARD": {
			"Syntax": "**APPEND DATA TO PASTEBOARD** ( *tipoDatos* ; *datos* )",
			"Params": [
				[
					"tipoDatos",
					"Text",
					"->",
					"Tipo de datos (4 caracteres)"
				],
				[
					"datos",
					"Blob",
					"->",
					"Datos a añadir al portapapeles"
				]
			],
			"Summary": "El comando APPEND DATA TO PASTEBOARD añade en el portapapeles los datos del tipo especificado en *tipoDatos* en el BLOB *datos*."
		},
		"Append document": {
			"Syntax": "**Append document** ( *doc* {; *tipo*} ) : Time",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento o Ruta de acceso completa al documento o Cadena vacía para mostrar la caja de diálogo estándar de apertura de archivos"
				],
				[
					"tipo",
					"Text",
					"->",
					"Lista de tipos de documentos a filtrar o \"*\" para no filtrar los documentos"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referencia del documento"
				]
			],
			"Summary": "El comando Append document hace lo mismo que Open document: permite abrir un documento en disco."
		},
		"APPEND MENU ITEM": {
			"Syntax": "**APPEND MENU ITEM** ( *menu* ; *itemText* {; *subMenu* {; *proceso* {; *}}} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Número de menú o referencia de menú"
				],
				[
					"itemText",
					"Text",
					"->",
					"Texto para los nuevos elementos de menú"
				],
				[
					"subMenu",
					"Text",
					"->",
					"Referencia del submenú asociado al elemento"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: considerar metacaracteres como caracteres estándar"
				]
			],
			"Summary": "El comando **APPEND MENU ITEM** añade nueva líneas de menú al menú cuyo número o referencia se pasa en *menu*."
		},
		"APPEND TO ARRAY": {
			"Syntax": "**APPEND TO ARRAY** ( *array* ; *valor* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array al cual añadir un elemento"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor a añadir"
				]
			],
			"Summary": "El comando APPEND TO ARRAY añade un nuevo elemento al final del *array* y asigna *valor* al elemento."
		},
		"APPEND TO LIST": {
			"Syntax": "**APPEND TO LIST** ( *lista* ; *textoElem* ; *refElem* {; *sublista* ; *desplegada*} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de lista"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Texto del nuevo elemento de lista (max. 255 caracteres)"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referencia único del nuevo elemento"
				],
				[
					"sublista",
					"Integer",
					"->",
					"Sublista opcional para añadir al nuevo elemento"
				],
				[
					"desplegada",
					"Boolean",
					"->",
					"Indica si las sublistas opcionales serán desplegadas o contraídas"
				]
			],
			"Summary": "El comando APPEND TO LIST añade un nuevo elemento a la lista jerárquica cuyo número de referencia se pasa en *lista*."
		},
		"Application file": {
			"Syntax": "**Application file**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre largo del archivo 4D ejecutable o  de la aplicación 4D"
				]
			],
			"Summary": "El comando Application file devuelve el nombre largo del archivo ejecutable o de la aplicación 4D que está utilizando."
		},
		"Application info": {
			"Syntax": "**Application info** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre la actividad de la aplicación activa"
				]
			],
			"Summary": "El comando **Application info** devuelve un objeto que ofrece información detallada sobre la actividad de la aplicación activa y la configuración de la red."
		},
		"Application type": {
			"Syntax": "**Application type**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor numérico representando el tipo de la aplicación"
				]
			],
			"Summary": "El comando Application type devuelve un valor numérico que representa el tipo de entorno 4D que está utilizando."
		},
		"Application version": {
			"Syntax": "**Application version** {( *buildNum* {; *} )} : Text",
			"Params": [
				[
					"buildNum",
					"Integer",
					"<-",
					"Número de build"
				],
				[
					"*",
					"Operador",
					"->",
					"Si pasa número de versión largo, de lo contrario número de versión corto"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Número de versión en una cadena codificada"
				]
			],
			"Summary": "El comando Application version devuelve una cadena codificada que expresa el número de versión del entorno 4D que está utilizando."
		},
		"APPLY TO SELECTION": {
			"Syntax": "**APPLY TO SELECTION** ( *tabla* ; *sentencia* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual aplicar la fórmula o Tabla por defecto, si se omite"
				],
				[
					"sentencia",
					"Expression",
					"->",
					"Línea de código o método"
				]
			],
			"Summary": "**APPLY TO SELECTION** aplica *sentencia* a cada registro de la selección actual de *tabla*."
		},
		"Arctan": {
			"Syntax": "**Arctan** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Tangente para la cual calcular el ángulo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Ángulo en radianes"
				]
			],
			"Summary": "Arctan devuelve el ángulo, expresado en radianes, de la tangente *número*."
		},
		"ARRAY BLOB": {
			"Syntax": "**ARRAY BLOB** ( *nomArray* ; *tam* {; *tam2*} )",
			"Params": [
				[
					"nomArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tam",
					"Integer",
					"->",
					"Número de elementos del array o número de arrays si se especifica tam2"
				],
				[
					"tam2",
					"Integer",
					"->",
					"Número de los elementos de los array 2D"
				]
			],
			"Summary": "El comando **ARRAY BLOB** crea y/o cambia el tamaño de un array de elementos de tipo Blob en memoria ."
		},
		"ARRAY BOOLEAN": {
			"Syntax": "**ARRAY BOOLEAN** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array bidimensional"
				]
			],
			"Summary": "El comando ARRAY BOOLEAN crea y/o redimensiona un array de elementos *Booleanos* en memoria."
		},
		"ARRAY DATE": {
			"Syntax": "**ARRAY DATE** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array bidimensional"
				]
			],
			"Summary": "El comando ARRAY DATE crea y/o redimensiona un array de elementos de tipo Fecha en memoria."
		},
		"ARRAY INTEGER": {
			"Syntax": "**ARRAY INTEGER** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Nombre de los elementos en el array o Número de filas si se especifica el tamaño 2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array de dos dimensiones"
				]
			],
			"Summary": "El comando ARRAY INTEGER crea y/o redimensiona un array de elementos de tipo Entero-1) (2-byte integer)\") de 2 bytes en memoria."
		},
		"ARRAY LONGINT": {
			"Syntax": "**ARRAY LONGINT** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array de dos dimensiones"
				]
			],
			"Summary": "El comando ARRAY LONGINT crea y/o redimensiona un array de elementos de tipo Entero largo de 4 bytes en memoria."
		},
		"ARRAY OBJECT": {
			"Syntax": "**ARRAY OBJECT** ( *nomArray* ; *tam* {; *tam2*} )",
			"Params": [
				[
					"nomArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tam",
					"Integer",
					"->",
					"Número de elementos del array o número de arrays si se especifica tam2"
				],
				[
					"tam2",
					"Integer",
					"->",
					"Número de elementos del array 2D"
				]
			],
			"Summary": "El comando **ARRAY OBJECT** crea y/o redimensiona un array de elementos de tipo Objeto de lenguaje en memoria."
		},
		"ARRAY PICTURE": {
			"Syntax": "**ARRAY PICTURE** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array bidimensional"
				]
			],
			"Summary": "El comando ARRAY PICTURE crea y/o redimensiona un array de elementos de tipo Imagen en memoria."
		},
		"ARRAY POINTER": {
			"Syntax": "**ARRAY POINTER** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array bidimensional"
				]
			],
			"Summary": "El comando ARRAY POINTER crea o redimensiona un array de elementos de tipo Puntero, table, or field\") en memoria."
		},
		"ARRAY REAL": {
			"Syntax": "**ARRAY REAL** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array de dos dimensiones"
				]
			],
			"Summary": "El comando ARRAY REAL crea y/o redimensiona un array de elementos de tipo Real en memoria."
		},
		"ARRAY TEXT": {
			"Syntax": "**ARRAY TEXT** ( *nombreArray* ; *tamaño* {; *tamaño2*} )",
			"Params": [
				[
					"nombreArray",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tamaño2",
					"Integer",
					"->",
					"Número de columnas en un array bidimensional"
				]
			],
			"Summary": "El comando ARRAY TEXT crea y/o redimensiona un array de elementos de tipo Texto en memoria."
		},
		"ARRAY TIME": {
			"Syntax": "**ARRAY TIME** ( *nomArray* ; *tam* {; *tam2*} )",
			"Params": [
				[
					"nomArray",
					"Array",
					"->",
					"Nombre de array"
				],
				[
					"tam",
					"Integer",
					"->",
					"Número de elementos en el array o Número de filas si se especifica tamaño2"
				],
				[
					"tam2",
					"Integer",
					"->",
					"Número de columnas en un array de dos dimensiones"
				]
			],
			"Summary": "El comando **ARRAY TIME** crea o redimensiona una array de tipo tiempo en memoria."
		},
		"ARRAY TO COLLECTION": {
			"Syntax": "**ARRAY TO COLLECTION**  ( *coleccion* ; *array* {; *nombreProp*}{; *array2* ; *nombreProp2* ; ... ; *arrayN* ; *nombrePropN*} )",
			"Params": [
				[
					"coleccion",
					"Collection",
					"<-",
					"Colección a recibir los datos del array"
				],
				[
					"array",
					"Array",
					"->",
					"Array a copiar a la colección; si se pasó nombreProp, array a copiar a los valores de nombreProp en la colección."
				],
				[
					"nombreProp",
					"Text",
					"->",
					"Nombre de la propiedad del objeto cuyo valor llenar con elementos del array"
				]
			],
			"Summary": "El comando **ARRAY TO COLLECTION**  copia uno o más *array*(s) en los elementos o los valores de *nombreProp* de la *coleccion*."
		},
		"ARRAY TO LIST": {
			"Syntax": "**ARRAY TO LIST** ( *array* ; *lista* {; *refElementos*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array del cual copiar los elementos del array"
				],
				[
					"lista",
					"Text, Integer",
					"->",
					"Lista en la cual copiar los elementos del array"
				],
				[
					"refElementos",
					"Array",
					"->",
					"Array numérico de números de referencia de los elementos"
				]
			],
			"Summary": "El comando ARRAY TO LIST crea o reemplaza la lista jerárquica o la *lista* utilizando los elementos del *array* *."
		},
		"ARRAY TO SELECTION": {
			"Syntax": "**ARRAY TO SELECTION** {( *array* ; *campo* {; *array2* ; *campo2* ; ... ; *arrayN* ; *campoN*}{; *} )}",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a copiar en la selección"
				],
				[
					"campo",
					"Field",
					"<-",
					"Campo a recibir los valores del array"
				],
				[
					"*",
					"Operador",
					"->",
					"Esperar ejecución"
				]
			],
			"Summary": "El comando **ARRAY TO SELECTION** copia uno o más arrays en una selección de registros."
		},
		"ASSERT": {
			"Syntax": "**ASSERT** ( *expresionBool* {; *textoMensaje*} )",
			"Params": [
				[
					"expresionBool",
					"Boolean",
					"->",
					"Expresión booleana"
				],
				[
					"textoMensaje",
					"Text",
					"->",
					"Texto del mensaje de error"
				]
			],
			"Summary": "El comando **ASSERT**evalúa la aserción *expresionBool* pasada en parámetro y, si se vuelve falsa, interrumpe la ejecución del código y muestra un error."
		},
		"Asserted": {
			"Syntax": "**Asserted** ( *expresionBool* {; *textoMensaje*} ) : Boolean",
			"Params": [
				[
					"expresionBool",
					"Boolean",
					"->",
					"Expresión booleana"
				],
				[
					"textoMensaje",
					"Text",
					"->",
					"Texto del mensaje de error"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Resultado de la evaluación de expresionBool"
				]
			],
			"Summary": "El comando **Asserted** tiene un funcionamiento similar al del comando ASSERT, con la diferencia de que devuelve un valor que es el resultado de la evaluación del parámetro *expresionBool*."
		},
		"Average": {
			"Syntax": "**Average** ( *series* {; *rutaAtributo*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales se devuelve el promedio"
				],
				[
					"rutaAtributo",
					"Text",
					"->",
					"Ruta del atributo del cual calcular el promedio"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Media aritmética (promedio) de series"
				]
			],
			"Summary": "**Average** devuelve la media aritmética (promedio) de *series*."
		},
		"BACKUP INFO": {
			"Syntax": "**BACKUP INFO** ( *selector* ; *info1* ; *info2* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Tipo de información a obtener"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"Valor 1 del selector"
				],
				[
					"info2",
					"Time, Text",
					"<-",
					"Valor 2 del selector"
				]
			],
			"Summary": "El comando BACKUP INFO permite obtener información relacionada con el último backup efectuado en los datos de la base."
		},
		"BACKUP": {
			"Syntax": "**BACKUP**",
			"Params": [],
			"Summary": "El comando BACKUP inicia el backup de la base de datos utilizando los parámetros de copia de seguridad actuales."
		},
		"BASE64 DECODE": {
			"Syntax": "**BASE64 DECODE** ( *aDecodificar* {; *decodificado*}{; *} )",
			"Params": [
				[
					"aDecodificar",
					"Text, Blob",
					"->",
					"Valor codificado a decodificar"
				],
				[
					"<-",
					"Valor descodificado (si se omite el parámetro descodificado)"
				],
				[
					"decodificado",
					"Text, Blob",
					"<-",
					"Valor decodificado"
				],
				[
					"*",
					"Operador",
					"->",
					"Decodificar en formato Base64URL"
				]
			],
			"Summary": "El comando **BASE64 DECODE** decodifica el texto o valor de blob codificado en formato Base64 o Base64URL pasado en el parámetro *aDecodificar*."
		},
		"BASE64 ENCODE": {
			"Syntax": "**BASE64 ENCODE** ( *aCodificar* {; *codificado*}{; *} )",
			"Params": [
				[
					"aCodificar",
					"Blob, Text",
					"->",
					"Valor a codificar"
				],
				[
					"<-",
					"Valor codificado (si el parámetro codificado se omite)"
				],
				[
					"codificado",
					"Blob, Text",
					"<-",
					"Varlor codificado"
				],
				[
					"*",
					"Operador",
					"->",
					"Codificado en formato Base64URL"
				]
			],
			"Summary": "El comando **BASE64 ENCODE** encodes the text or blob value passed in the *toEncode* parameter in Base64 or Base64URL format."
		},
		"BEEP": {
			"Syntax": "**BEEP**",
			"Params": [],
			"Summary": "El comando BEEP hace que el PC o Macintosh generen un beep."
		},
		"Before selection": {
			"Syntax": "**Before selection** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual probar si el puntero se encuentra antes del primer registro seleccionado o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Sí (TRUE) o No (FALSE)"
				]
			],
			"Summary": "**Before selection** devuelve TRUE cuando el puntero del registro actual se encuentra antes del primer registro de la selección actual de *tabla*."
		},
		"Before": {
			"Syntax": "**Before**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve True si el ciclo de ejecución es un Before"
				]
			],
			"Summary": "**Before** devuelve True para el ciclo de ejecución Before."
		},
		"Begin SQL": {
			"Syntax": "**Begin SQL**",
			"Params": [],
			"Summary": "Begin SQL es una palabra clave que permite indicar en el editor de métodos el inicio de una secuencia de comandos SQL que debe ser interpretada por la fuente de datos actual del proceso (el motor SQL integrado de 4D o toda fuente especificada vía el comando SQL LOGIN)."
		},
		"BLOB PROPERTIES": {
			"Syntax": "**BLOB PROPERTIES** ( *BLOB* ; *comprimido* {; *descompTam* {; *tamañoActual*}} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB del cual obtener información"
				],
				[
					"comprimido",
					"Integer",
					"<-",
					"0 = BLOB no está comprimido 1 = BLOB comprimido modo compacto 2 = BLOB comprimido modo rápido"
				],
				[
					"descompTam",
					"Integer",
					"<-",
					"Tamaño del BLOB (en bytes) cuando no está comprimido"
				],
				[
					"tamañoActual",
					"Integer",
					"<-",
					"Tamaño actual del BLOB (en bytes)"
				]
			],
			"Summary": "El comando **BLOB PROPERTIES** devuelve información sobre el BLOB *blob*."
		},
		"BLOB size": {
			"Syntax": "**BLOB size** ( *BLOB* ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"Campo o variable de tipo BLOB"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamaño en bytes del BLOB"
				]
			],
			"Summary": "BLOB size devuelve el tamaño del *blob* expresado en bytes."
		},
		"BLOB TO DOCUMENT": {
			"Syntax": "**BLOB TO DOCUMENT** ( *documento* ; *BLOB* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nombre del documento"
				],
				[
					"Blob",
					"Blob",
					"->",
					"Nuevo contenido del documento"
				]
			],
			"Summary": "BLOB TO DOCUMENT escribe los datos de *documento* utilizando los datos almacenados en *blob*."
		},
		"BLOB to integer": {
			"Syntax": "**BLOB to integer** ( *BLOB* ; *byteOrden* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB del cual obtener el valor entero"
				],
				[
					"byteOrden",
					"Integer",
					"->",
					"0 Orden de bytes nativo 1 Orden de bytes Macintosh 2 Orden de bytes PC"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset en el BLOB (expresado en bytes)"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la lectura"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor entero (2 bytes)"
				]
			],
			"Summary": "El comando BLOB to integer devuelve un valor entero (2 bytes) leído del BLOB *blob*."
		},
		"BLOB to list": {
			"Syntax": "**BLOB to list** ( *BLOB* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contiene una lista jerárquica"
				],
				[
					"offset",
					"Integer",
					"<->",
					"Offset en el BLOB (expresado en bytes)"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la lectura"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Referencia de la lista creada recientemente"
				]
			],
			"Summary": "El comando BLOB to list crea una nueva lista jerárquica con los datos almacenados en el BLOB *blob* en el offset de bytes (a partir de cero) especificado por *offset* y devuelve un número de referencia de lista jerárquica para esa nueva lista."
		},
		"BLOB to longint": {
			"Syntax": "**BLOB to longint** ( *BLOB* ; *byteOrden* {; *offset*} ) : Integer",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB del cual obtener el valor entero largo"
				],
				[
					"byteOrden",
					"Integer",
					"->",
					"0 Orden de bytes nativo 1 Orden de bytes Macintosh 2 Orden de bytes PC"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset en el BLOB (expresado en bytes)"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la lectura"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor entero largo (4 bytes)"
				]
			],
			"Summary": "El comando BLOB to longint devuelve un valor de tipo Entero largo (4 bytes) leído del BLOB *blob*."
		},
		"BLOB TO PICTURE": {
			"Syntax": "**BLOB TO PICTURE** ( *blobImag* ; *imagen* {; *codec*} )",
			"Params": [
				[
					"blobImag",
					"Blob",
					"->",
					"BLOB contiene una imagen"
				],
				[
					"imagen",
					"Picture",
					"<-",
					"Campo o variable imagen 4D"
				],
				[
					"codec",
					"Text",
					"->",
					"Identificador de codec de imagen"
				]
			],
			"Summary": "El comando BLOB TO PICTURE inserta una imagen almacenada en un BLOB en un campo o variable imagen 4D, sin importar su formato original."
		},
		"BLOB to print settings": {
			"Syntax": "**BLOB to print settings** ( *confImpr* {; *params*} ) : Integer",
			"Params": [
				[
					"confImpr",
					"Blob",
					"->",
					"BLOB que contiene la configuración de impresión"
				],
				[
					"params",
					"Integer",
					"->",
					"0=Restaura valores guardados para el número de copias y rango de páginas, 1=Restablece los valores predeterminados"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de estado: 1=operación exitosa, 0=no hay impresora actual, -1=parámetros incorrectos, 2=impresora modificada"
				]
			],
			"Summary": "El comando **BLOB to print settings** reemplaza los parámetros de impresión actuales de 4D por los parámetros almacenados en el BLOB *confImpr*."
		},
		"BLOB to real": {
			"Syntax": "**BLOB to real** ( *BLOB* ; *formatoReal* {; *offset*} ) : Real",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB del cual obtener el valor de tipo Real"
				],
				[
					"formatoReal",
					"Integer",
					"->",
					"0 Formato real nativo 1 Formato real extendido 2  Formato real doble Macintosh 3  Formato real doble Windows"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset en el BLOB (expresado en bytes)"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la lectura"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor real"
				]
			],
			"Summary": "El comando BLOB to real devuelve un valor de tipo Real leído del BLOB *blob*."
		},
		"BLOB to text": {
			"Syntax": "**BLOB to text** ( *BLOB* ; *formatoTexto* {; *offset* {; *longitudTexto*}} )  : Text",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB del cual obtener el texto"
				],
				[
					"formatoTexto",
					"Integer",
					"->",
					"Formato y conjunto de caracteres de texto"
				],
				[
					"offset",
					"Variable",
					"<->",
					"Offset en el BLOB (expresado en bytes)"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la lectura"
				],
				[
					"longitudTexto",
					"Integer",
					"->",
					"Número de caracteres a leer"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor del texto"
				]
			],
			"Summary": "El comando BLOB to text devuelve un valor de tipo Texto leído del BLOB *blob*."
		},
		"BLOB TO USERS": {
			"Syntax": "**BLOB TO USERS** ( *usuarios* )",
			"Params": [
				[
					"usuarios",
					"Blob",
					"->",
					"BLOB (encriptado) contiene las cuentas de usuarios creadas y guardadas por el Administrador"
				]
			],
			"Summary": "El comando BLOB TO USERS remplaza las cuentas usuarios y los grupos presentes en el BLOB *usuarios* en la base actual."
		},
		"BLOB TO VARIABLE": {
			"Syntax": "**BLOB TO VARIABLE** ( *BLOB* ; *variable* {; *offset*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contiene variables 4D"
				],
				[
					"variable",
					"Variable",
					"<-",
					"Variable a escribir con el contenido del BLOB"
				],
				[
					"offset",
					"Integer",
					"<->",
					"Posición de la variable en el BLOB"
				],
				[
					"",
					"",
					"",
					"Posición de la variable siguiente en el  BLOB"
				]
			],
			"Summary": "El comando BLOB TO VARIABLE reescribe la variable *variable* con los datos almacenados en el BLOB *blob* en el offset de bytes (a partir de cero) especificado por *offset*."
		},
		"Bool": {
			"Syntax": "**Bool** ( *expresion* ) : Boolean",
			"Params": [
				[
					"expresion",
					"Expression",
					"->",
					"Expresión para la cual devolver la forma booleana"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Forma booleana de la expresión"
				]
			],
			"Summary": "El comando **Bool** devuelve la forma booleana de la expresión que se pasó en *expresion*."
		},
		"BOOLEAN ARRAY FROM SET": {
			"Syntax": "**BOOLEAN ARRAY FROM SET** ( *arrBool* {; *conjunto*} )",
			"Params": [
				[
					"arrBool",
					"Boolean array",
					"<-",
					"Array para indicar si un registro está en un conjunto o no"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto o UserSet si se omite este parámetro"
				]
			],
			"Summary": "El comando BOOLEAN ARRAY FROM SET llena un array de booleanos indicando si cada registro en la tabla está o no en *conjunto*."
		},
		"BREAK LEVEL": {
			"Syntax": "**BREAK LEVEL** ( *nivel* {; *saltoPag*} )",
			"Params": [
				[
					"nivel",
					"Integer",
					"->",
					"Número de niveles de ruptura"
				],
				[
					"saltoPag",
					"Integer",
					"->",
					"Nivel del salto de página"
				]
			],
			"Summary": "BREAK LEVEL especifica el número de niveles de ruptura en un informe realizado utilizando PRINT SELECTION."
		},
		"BRING TO FRONT": {
			"Syntax": "**BRING TO FRONT** ( *proceso* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número del proceso a pasar al primer plano"
				]
			],
			"Summary": "BRING TO FRONT pasa todas las ventanas que pertenecen a *process* al primer plano."
		},
		"BUILD APPLICATION": {
			"Syntax": "**BUILD APPLICATION** {( *confCreacionApp* )}",
			"Params": [
				[
					"confCreacionApp",
					"Text",
					"->",
					"Ruta de acceso completa del proyecto a utilizar"
				]
			],
			"Summary": "El comando BUILD APPLICATION lanza el proceso de generación de la aplicación teniendo en cuenta los parámetros definidos en el proyecto de aplicación actual o en el proyecto de aplicación designado por el parámetro *nomProyecto*."
		},
		"Cache info": {
			"Syntax": "**Cache info** {( *dbFilter* )} : Object",
			"Params": [
				[
					"dbFilter",
					"Object",
					"->",
					"Define la lista de atributos a devolver (filtrada por DB)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre la caché"
				]
			],
			"Summary": "El comando **Cache info** devuelve un objeto que contiene la información detallada sobre el contenido actual de la caché (memoria utilizada, tablas e índices cargados, etc.)"
		},
		"CALL FORM": {
			"Syntax": "**CALL FORM** ( *ventana* ; *metodo* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				],
				[
					"metodo",
					"Object, Text",
					"->",
					"Nombre del método proyecto a llamar"
				],
				[
					"param",
					"Expression",
					"->",
					"Parámetros pasados al método"
				]
			],
			"Summary": "El comando **CALL FORM** ejecuta el código designado en *formula* con el(los) *param*(s) opcional(es) en el contexto de un formulario que se muestra en una *ventana*, independientemente del proceso al que pertenece la ventana."
		},
		"CALL SUBFORM CONTAINER": {
			"Syntax": "**CALL SUBFORM CONTAINER** ( *evento* )",
			"Params": [
				[
					"evento",
					"Integer",
					"->",
					"Evento a enviar"
				]
			],
			"Summary": "El comando **CALL SUBFORM CONTAINER** permite a una instancia de subformulario enviar el *evento* al objeto subformulario que lo contiene."
		},
		"CALL WORKER": {
			"Syntax": "**CALL WORKER** ( *proceso* ; *metodo* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"proceso",
					"Text, Integer",
					"->",
					"Nombre o número del proceso worker"
				],
				[
					"metodo",
					"Object, Text",
					"->",
					"Nombre del método proyecto a llamar"
				],
				[
					"param",
					"Expression",
					"->",
					"Parámetros pasados al método"
				]
			],
			"Summary": "El comando **CALL WORKER** crea o llama al proceso worker cuyo nombre o ID se pasa en *proceso* y pide la ejecución del código designado por *formula* en su contexto con el parámetro opcional *param*."
		},
		"CANCEL TRANSACTION": {
			"Syntax": "**CANCEL TRANSACTION**",
			"Params": [],
			"Summary": "**CANCEL TRANSACTION** anula la transacción abierta por el comando START TRANSACTION  del nivel correspondiente en el proceso actual."
		},
		"CANCEL": {
			"Syntax": "**CANCEL**",
			"Params": [],
			"Summary": "En el contexto de entrada de datos, **CANCEL** efectúa la misma acción que si el usuario hubiera presionado la tecla de cancelación (**Esc**)."
		},
		"Caps lock down": {
			"Syntax": "**Caps lock down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Bloq Mayús"
				]
			],
			"Summary": "Caps lock down devuelve TRUE si la tecla Bloq Mayús está presionada."
		},
		"CHANGE CURRENT USER": {
			"Syntax": "**CHANGE CURRENT USER** {( *usuario* ; *contraseña* )}",
			"Params": [
				[
					"usuario",
					"Text, Integer",
					"->",
					"Nombre o número de referencia único"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Contraseña (no encriptada)"
				]
			],
			"Summary": "CHANGE CURRENT USER permite cambiar la identidad del usuario actual en la base, sin tener que salir."
		},
		"CHANGE LICENSES": {
			"Syntax": "**CHANGE LICENSES**",
			"Params": [],
			"Summary": "El comando CHANGE LICENSES muestra la caja de diálogo de gestión de licencias 4D."
		},
		"CHANGE PASSWORD": {
			"Syntax": "**CHANGE PASSWORD** ( *contraseña* )",
			"Params": [
				[
					"contraseña",
					"Text",
					"->",
					"Nueva contraseña"
				]
			],
			"Summary": "CHANGE PASSWORD cambia la contraseña del usuario actual."
		},
		"Change string": {
			"Syntax": "**Change string** ( *fuente* ; *nuevo* ; *posicion* ) : Text",
			"Params": [
				[
					"fuente",
					"Text",
					"->",
					"Cadena original"
				],
				[
					"nuevo",
					"Text",
					"->",
					"Nuevos caracteres"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Posición donde comenzar los cambios"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena resultante"
				]
			],
			"Summary": "Change string devuelve una cadena resultante de cambiar los caracteres, en la cadena *fuente*, a partir de *posicion* con los caracteres en *nuevo*."
		},
		"Char": {
			"Syntax": "**Char** ( *codigoCaracter* ) : Text",
			"Params": [
				[
					"codigoCaracter",
					"Integer",
					"->",
					"Código del caracter"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Caracter representado por codigoCaracter"
				]
			],
			"Summary": "El comando **Char** devuelve el carácter cuyo código es *codigoCaracter*."
		},
		"Character code": {
			"Syntax": "**Character code** ( *unCaracter* ) : Integer",
			"Params": [
				[
					"unCaracter",
					"Text",
					"->",
					"Caracter para el cual obtener el código"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código del caracter"
				]
			],
			"Summary": "El comando **Character code** devuelve el código Unicode UTF-16 (incluído entre 1 y 65535) de *unCaracter*."
		},
		"CHECK LOG FILE": {
			"Syntax": "**CHECK LOG FILE**",
			"Params": [],
			"Summary": "El comando **CHECK LOG FILE** muestra la caja de diálogo de visulización del archivo de historial actual de la base (accesible también vía la ventana del Centro de seguridad y mantenimiento)"
		},
		"Choose": {
			"Syntax": "**Choose** ( *criterio* ; *valor* {; *valor2* ; ... ; *valorN*} )  : any",
			"Params": [
				[
					"criterio",
					"Boolean, Integer",
					"->",
					"Valor a probar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valores posibles"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor de criterio"
				]
			],
			"Summary": "El comando **Choose** devuelve uno de los valores pasados en los parámetros *valor1*, *valor2*, etc."
		},
		"CLEAR LIST": {
			"Syntax": "**CLEAR LIST** ( *lista* {; *} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de la lista"
				],
				[
					"*",
					"Operator",
					"->",
					"Si se especifica, si hay sublistas las borra de la memoria, Si se omite, las sublistas no son borradas"
				]
			],
			"Summary": "El comando CLEAR LIST borra de la memoria la lista jerárquica cuyo número de referencia se pasa en *lista*."
		},
		"CLEAR NAMED SELECTION": {
			"Syntax": "**CLEAR NAMED SELECTION** ( *nombre* )",
			"Params": [
				[
					"nombre",
					"Text",
					"->",
					"Nombre de la selección temporal a borrar"
				]
			],
			"Summary": "CLEAR NAMED SELECTION borra *temp* de la memoria y libera la memoria utilizada por *temp*."
		},
		"CLEAR PASTEBOARD": {
			"Syntax": "**CLEAR PASTEBOARD**",
			"Params": [],
			"Summary": "El comando CLEAR PASTEBOARD borra el contenido del portapapeles."
		},
		"CLEAR SEMAPHORE": {
			"Syntax": "**CLEAR SEMAPHORE** ( *semaforo* )",
			"Params": [
				[
					"semaforo",
					"Text",
					"->",
					"Semáforo a borrar"
				]
			],
			"Summary": "CLEAR SEMAPHORE borra el *semaforo* previamente creado por la función Semaphore."
		},
		"CLEAR SET": {
			"Syntax": "**CLEAR SET** ( *conjunto* )",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto a borrar de la memoria"
				]
			],
			"Summary": "CLEAR SET borra *conjunto* de la memoria y libera la memoria utilizada por *conjunto*."
		},
		"CLEAR VARIABLE": {
			"Syntax": "**CLEAR VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable a borrar"
				]
			],
			"Summary": "CLEAR VARIABLE reinicia *variable* en el valor por defecto de su tipo (por ejemplo, cadena vacía para los tipos Alfa y Texto, *0* para las variables numéricas, ningún elemento para un array, etc.)."
		},
		"Clickcount": {
			"Syntax": "**Clickcount**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de clics consecutivos"
				]
			],
			"Summary": "El comando **Clickcount** devuelve, en el contexto de un evento clic, el número de veces que el usuario ha hecho clic de manera repetida con el mismo botón del ratón."
		},
		"CLOSE DOCUMENT": {
			"Syntax": "**CLOSE DOCUMENT** ( *docRef* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referencia del documento"
				]
			],
			"Summary": "CLOSE DOCUMENT cierra el documento especificado por *docRef*."
		},
		"CLOSE PRINTING JOB": {
			"Syntax": "**CLOSE PRINTING JOB**",
			"Params": [],
			"Summary": "El comando **CLOSE PRINTING JOB** permite cerrar el trabajo de impresión previamente abierto por el comando OPEN PRINTING JOB y enviar a la impresora actual el documento de impresión creado."
		},
		"CLOSE RESOURCE FILE": {
			"Syntax": "**CLOSE RESOURCE FILE** ( *resArchivo* )",
			"Params": [
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos"
				]
			],
			"Summary": "El comando **CLOSE RESOURCE FILE** cierra el archivo de recursos cuyo número de referencia se pasa en *resArchivo*."
		},
		"CLOSE WINDOW": {
			"Syntax": "**CLOSE WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia, o Ventana del primer plano del proceso, si este parámetro se omite"
				]
			],
			"Summary": "CLOSE WINDOW cierra la ventana activa abierta por el comando Open window u Open form window en el proceso actual."
		},
		"COLLECTION TO ARRAY": {
			"Syntax": "**COLLECTION TO ARRAY** ( *coleccion* ; *array* {; *nombreProp*}{; *array2* ; *nombreProp2* ; ... ; *arrayN* ; *nombrePropN*} )",
			"Params": [
				[
					"coleccion",
					"Collection",
					"->",
					"Colección a copiar en array(s)"
				],
				[
					"array",
					"Array",
					"<-",
					"Array para recibir los elementos de la colección; si se pasó nombreProp, array para recibir los valores de nombreProp en la colección"
				],
				[
					"nombreProp",
					"Text",
					"->",
					"Nombre de la propiedad del objeto cuyos valores copiar en array (\"\" para todos los elementos)"
				]
			],
			"Summary": "El comando **COLLECTION TO ARRAY** llena una o más *array*(s) con elementos o valores de *nombreProp* de la *coleccion* en *array*(s)."
		},
		"COMBINE PICTURES": {
			"Syntax": "**COMBINE PICTURES** ( *imagenResult* ; *imag1* ; *operador* ; *imag2* {; *despHor* ; *despVert*} )",
			"Params": [
				[
					"imagenResult",
					"Picture",
					"<-",
					"Imagen resultante de la combinación"
				],
				[
					"imag1",
					"Picture",
					"->",
					"Primera imagen a combinar"
				],
				[
					"operador",
					"Integer",
					"->",
					"Tipo de combinación a realizar"
				],
				[
					"imag2",
					"Picture",
					"->",
					"Segunda imagen a combinar"
				],
				[
					"despHor",
					"Integer",
					"->",
					"Desplazamiento horizontal para la superposición"
				],
				[
					"despVert",
					"Integer",
					"->",
					"Desplazamiento vertical para la superposición"
				]
			],
			"Summary": "El comando COMBINE PICTURES permite combinar las imágenes *imag1* e *imag2* en modo *operador* para producir una tercera, *imagenResult*."
		},
		"Compact data file": {
			"Syntax": "**Compact data file** ( *rutaEstructura* ; *rutaDatos* {; *carpetaArchivo* {; *opcion* {; *metodo*}}} ) : Text",
			"Params": [
				[
					"rutaEstructura",
					"Text",
					"->",
					"Ruta de acceso al archivo de estructura"
				],
				[
					"rutaDatos",
					"Text",
					"->",
					"Ruta de acceso al archivo de datos"
				],
				[
					"carpetaArchivo",
					"Text",
					"->",
					"Ruta de acceso a la carpeta donde se colocará el archivo de datos original"
				],
				[
					"opcion",
					"Integer",
					"->",
					"Opciones de compactación"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nombre del método 4D de retrollamada"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso completa de la carpeta que contiene el archivo de datos original"
				]
			],
			"Summary": "El comando **Compact data file** compacta el archivo de datos designado por el parámetro *rutaDatos* asociado al archivo de estructura *rutaEstructura*."
		},
		"Compare strings": {
			"Syntax": "**Compare strings** ( *cadenaA* ; *cadenaB* {; *opciones*} ) : Integer",
			"Params": [
				[
					"cadenaA",
					"Text",
					"->",
					"Cadena a comparar"
				],
				[
					"cadenaB",
					"Text",
					"->",
					"Cadena a comparar"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Regla(s) de comparación"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Resultado de la comparación de las cadenas"
				]
			],
			"Summary": "El comando **Compare strings** devuelve un valor negativo, cero o positivo dependiendo de si *cadenaA* se evalúa como inferior, igual o superior a *cadenaB*."
		},
		"COMPONENT LIST": {
			"Syntax": "**COMPONENT LIST** ( *arrayComponentes* )",
			"Params": [
				[
					"arrayComponentes",
					"Text array",
					"<-",
					"Nombres de los componentes"
				]
			],
			"Summary": "El comando COMPONENT LIST dimensiona y llena el array *arrayComponentes* con los nombres de los componentes cargados por la aplicación 4D para la base local actual."
		},
		"COMPRESS BLOB": {
			"Syntax": "**COMPRESS BLOB** ( *BLOB* {; *compresion*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a comprimir"
				],
				[
					"compresion",
					"Integer",
					"->",
					"Si no se omite: 1, compresión máxima posible 2, velocidad de compresión máxima"
				]
			],
			"Summary": "El comando **COMPRESS BLOB** comprime el BLOB *blob* utilizando el algoritmo de compresión interno de 4D."
		},
		"CONFIRM": {
			"Syntax": "**CONFIRM** ( *mensaje* {; *titulobotonOK* {; *titulobotoncancel*}} )",
			"Params": [
				[
					"mensaje",
					"Text",
					"->",
					"Mensaje a mostrar en la caja de diálogo de confirmación"
				],
				[
					"titulobotonOK",
					"Text",
					"->",
					"Título del botón Aceptar"
				],
				[
					"titulobotoncancel",
					"Text",
					"->",
					"Título del botón Cancelar"
				]
			],
			"Summary": "El comando CONFIRM muestra una caja de diálogo de confirmación compuesta de un icono, un mensaje, un botón OK, y un botón Cancelar."
		},
		"Contextual click": {
			"Syntax": "**Contextual click**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadero si se detecta un clic contextual, de lo contrario Falso"
				]
			],
			"Summary": "El comando Contextual click devuelve Verdadero si un se ha efectuado un clic contextua"
		},
		"CONVERT COORDINATES": {
			"Syntax": "**CONVERT COORDINATES** ( *coordX* ; *coordY* ; *de* ; *a* )",
			"Params": [
				[
					"coordX",
					"Integer",
					"->",
					"Coordenada horizontal de un punto (inicial)"
				],
				[
					"<-",
					"Coordenada horizontal de un punto (convertido)"
				],
				[
					"coordY",
					"Integer",
					"->",
					"Coordenada vertical de un punto(inicial)"
				],
				[
					"<-",
					"Coordenada vertical de un punto (convertido)"
				],
				[
					"de",
					"Integer",
					"->",
					"Sistema de coordenadas de origen"
				],
				[
					"a",
					"Integer",
					"->",
					"Sistema de coordenadas a convertir el punto"
				]
			],
			"Summary": "El comando **CONVERT COORDINATES**convierte las coordenadas (x,y) de un punto de un sistema de coordenadas a otro."
		},
		"CONVERT FROM TEXT": {
			"Syntax": "**CONVERT FROM TEXT** ( *texto4D* ; *juegoCaracteres* ; *blobConvertido* )",
			"Params": [
				[
					"texto4D",
					"Text",
					"->",
					"Texto expresado en el juego de caracteres actual de 4D"
				],
				[
					"juegoCaracteres",
					"Text, Integer",
					"->",
					"Nombre o número del juego de caracteres"
				],
				[
					"blobConvertido",
					"Blob",
					"<-",
					"BLOB que contiene el texto convertido"
				]
			],
			"Summary": "El comando CONVERT FROM TEXT permite convertir un texto expresado en el juego de caracteres actual de 4D en un texto expresado en otro juego de caracteres."
		},
		"Convert path POSIX to system": {
			"Syntax": "**Convert path POSIX to system** ( *rutaPosix* {; *} ) : Text",
			"Params": [
				[
					"rutaPosix",
					"Text",
					"->",
					"Ruta de acceso POSIX"
				],
				[
					"*",
					"Operador",
					"->",
					"Opción de codificación"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso expresada en sintaxis sistema"
				]
			],
			"Summary": "El comando Convert path POSIX to system convierte una ruta de acceso expresada con la sintaxis POSIX (Unix) en una ruta expresada con la sintaxis sistema."
		},
		"Convert path system to POSIX": {
			"Syntax": "**Convert path system to POSIX** ( *rutaSistema* {; *} ) : Text",
			"Params": [
				[
					"rutaSistema",
					"Text",
					"->",
					"Ruta de acceso relativa o absoluta expresada en sintaxis sistema"
				],
				[
					"*",
					"Operador",
					"->",
					"Opción de codificación"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Absolute pathname expressed in POSIX syntax"
				]
			],
			"Summary": "El comando Convert path system to POSIX convierte una ruta expresada con la sintaxis sistema en una ruta expresada con la sintaxis POSIX (Unix)."
		},
		"CONVERT PICTURE": {
			"Syntax": "**CONVERT PICTURE** ( *imagen* ; *codec* {; *compresion*} )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen a convertir"
				],
				[
					"<-",
					"Imagen convertida"
				],
				[
					"codec",
					"Text",
					"->",
					"Identificador de codec de imagen"
				],
				[
					"compresion",
					"Real",
					"->",
					"Calidad de compresión"
				]
			],
			"Summary": "El comando CONVERT PICTURE convierte *imagen* en un nuevo tipo."
		},
		"Convert to text": {
			"Syntax": "**Convert to text** ( *BLOB* ; *juegoCaracteres* ) : Text",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contiene un texto expresado en un juego de caracteres específico"
				],
				[
					"juegoCaracteres",
					"Text, Integer",
					"->",
					"Nombre o número de juego de caracteres de blob"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Contenido del BLOB expresado en el juego de caracteres 4D"
				]
			],
			"Summary": "El comando Convert to text convierte el texto contenido en el parámetro *blob* y lo devuelve en texto expresado en el juego de caracteres de 4D."
		},
		"COPY ARRAY": {
			"Syntax": "**COPY ARRAY** ( *fuente* ; *destino* )",
			"Params": [
				[
					"fuente",
					"Array",
					"->",
					"Array a copiar"
				],
				[
					"destino",
					"Array",
					"<-",
					"Array de destino"
				]
			],
			"Summary": "El comando COPY ARRAY crea o remplaza el array *destino* con el mismo contenido, tamaño y tipo del array *fuente*."
		},
		"COPY BLOB": {
			"Syntax": "**COPY BLOB** ( *srcBLOB* ; *dstBLOB* ; *srcOffset* ; *dstOffset* ; *numero* )",
			"Params": [
				[
					"srcBlob",
					"Blob",
					"->",
					"BLOB fuente"
				],
				[
					"dstBlob",
					"Blob",
					"->",
					"BLOB de destino"
				],
				[
					"srcOffset",
					"Integer",
					"->",
					"Posición de la fuente para la copia"
				],
				[
					"dstOffset",
					"Integer",
					"->",
					"Posición de destino para la copia"
				],
				[
					"numero",
					"Integer",
					"->",
					"Número de bytes a copiar"
				]
			],
			"Summary": "El comando COPY BLOB copia el número de bytes especificado por *nombre* del BLOB *srcBLOB* al BLOB *dstBLOB*."
		},
		"COPY DOCUMENT": {
			"Syntax": "**COPY DOCUMENT** ( *nomFuente* ; *nomDest* {; *nuevNombre*} {; *} )",
			"Params": [
				[
					"nomFuente",
					"Text",
					"->",
					"Nombre del documento a copiar"
				],
				[
					"nomDest",
					"Text",
					"->",
					"Nombre del documento copiado"
				],
				[
					"nuevNombre",
					"Text",
					"->",
					"Nuevo nombre del archivo o carpeta copiado"
				],
				[
					"*",
					"Operador",
					"->",
					"Reemplazar documento existente si lo hay"
				]
			],
			"Summary": "El comando **COPY DOCUMENT** copia el documento especificado por *nomFuente* en la ubicación especificada por *nomDest*."
		},
		"Copy list": {
			"Syntax": "**Copy list** ( *lista* ) : Integer",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de la lista a copiar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de la nueva lista"
				]
			],
			"Summary": "El comando Copy list duplica la lista cuyo número de referencia se pasa en el parámetro *lista* y devuelve el número de referencia de la nueva lista."
		},
		"COPY NAMED SELECTION": {
			"Syntax": "**COPY NAMED SELECTION** ( {*tabla* ;} *nombre* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual copiar selección, o Tabla por defecto, si se omite"
				],
				[
					"nombre",
					"Text",
					"->",
					"Nombre de la selección temporal a crear"
				]
			],
			"Summary": "COPY NAMED SELECTION copia la selección actual de *tabla* en una selección temporal *temp*."
		},
		"Copy parameters": {
			"Syntax": "**Copy parameters** {( *inicioDesde* )} : Collection",
			"Params": [
				[
					"inicioDesde",
					"Integer",
					"->",
					"Índice de inicio(incluido)"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Nueva colección que contiene los parámetros pasados realmente"
				]
			],
			"Summary": "El comando Copy parameters devuelve una nueva colección que contiene todos los parámetros realmente pasados a un método o una función."
		},
		"COPY SET": {
			"Syntax": "**COPY SET** ( *srcCon* ; *dstCon* )",
			"Params": [
				[
					"srcCon",
					"Text",
					"->",
					"Nombre del conjunto fuente"
				],
				[
					"dstCon",
					"Text",
					"->",
					"Nombre del conjunto de destino"
				]
			],
			"Summary": "El comando COPY SET copia el contenido del conjunto *srcCon* en el conjunto *dstCon*."
		},
		"Cos": {
			"Syntax": "**Cos** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número, en radianes, cuyo coseno se devuelve"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Coseno del número"
				]
			],
			"Summary": "Cos devuelve el coseno del *número*, donde *número* se expresa en radianes."
		},
		"Count in array": {
			"Syntax": "**Count in array** ( *array* ; *valor* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array donde efectuar el conteo"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor a contar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de ocurrencias encontradas"
				]
			],
			"Summary": "El comando Count in array devuelve el número de ocurrencias de *valor* en el *array*."
		},
		"Count list items": {
			"Syntax": "**Count list items** ( {* ;} *lista* {; *} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se omite (por defecto): Devuelve los elementos visibles (desplegados) de la lista Si se especifica: Devuelve todos los elementos de la lista"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de elementos visibles de la lista (desplegados) (si se omite el segundo *) o número total de elementos de la lista (si se presenta el segundo *)"
				]
			],
			"Summary": "El comando Count list items devuelve el número actual de elementos visibles o el número total de elementos en la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"Count menu items": {
			"Syntax": "**Count menu items** ( *menu* {; *proceso*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de líneas de menú en el menú"
				]
			],
			"Summary": "El comando Count menu items devuelve el número de los elementos del menú presentes en el menú cuyo número o referencia se pasa en *menu."
		},
		"Count menus": {
			"Syntax": "**Count menus** {( *proceso* )} : Integer",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia de proceso"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de menús de la barra de menús actual"
				]
			],
			"Summary": "El comando Count menus devuelve el número de menús presentes en la barra de menús."
		},
		"Count parameters": {
			"Syntax": "**Count parameters**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de parámetros efectivamente pasados"
				]
			],
			"Summary": "El comando Count parameters devuelve el número de parámetros pasados a un método de proyecto."
		},
		"Count screens": {
			"Syntax": "**Count screens**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de monitores"
				]
			],
			"Summary": "El comando Count screens devuelve el número de pantallas conectadas a su equipo."
		},
		"Count tasks": {
			"Syntax": "**Count tasks**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número total de procesos abiertos (incluyendo procesos kernel)"
				]
			],
			"Summary": "**Count tasks** devuelve el número de procesos vivos más alto en un equipo 4D remoto, 4D 4D Server (procedimientos almacenados) o en una versión monousuario de 4D."
		},
		"Count user processes": {
			"Syntax": "**Count user processes**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de procesos abiertos (a excepción de los procesos kernel)"
				]
			],
			"Summary": "Count user processes devuelve el número de los procesos abiertos directa o indirectamente por el usuario (procesos para los cuales el parámetro *origen* devuelto por el comando Count user processes es mayor o igual a 0)."
		},
		"Count users": {
			"Syntax": "**Count users**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de usuarios conectados al servidor"
				]
			],
			"Summary": "El comando **Count users** devuelve el número de usuarios conectados al servidor."
		},
		"CREATE ALIAS": {
			"Syntax": "**CREATE ALIAS** ( *rutaObjetivo* ; *rutaAlias* )",
			"Params": [
				[
					"rutaObjetivo",
					"Text",
					"->",
					"Nombre o ruta de acceso al objetivo del alias/atajo"
				],
				[
					"rutaAlias",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del alias/del atajo a crear"
				]
			],
			"Summary": "El comando CREATE ALIAS crea un alias (llamado “atajo” en Windows) del archivo o carpeta objetivo pasado en *rutaObjetivo*."
		},
		"CREATE DATA FILE": {
			"Syntax": "**CREATE DATA FILE** ( *rutaAcceso* )",
			"Params": [
				[
					"rutaAcceso",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del archivo de datos a abrir"
				]
			],
			"Summary": "El comando **CREATE DATA FILE** permite crear un nuevo archivo de datos en disco y reemplazar rápidamente el archivo de datos abierto por la aplicación 4D."
		},
		"Create document": {
			"Syntax": "**Create document** ( *doc* {; *tipo*} ) : Time",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento o Ruta de acceso completa del documento o Cadena vacía para mostrar caja de diálogo estándar de guardar archivos"
				],
				[
					"tipo",
					"Text",
					"->",
					"Lista de los tipos de documentos a filtrar o \"*\" para no filtrar los documentos"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referencia del documento"
				]
			],
			"Summary": "El comando Create document crea un nuevo documento y devuelve su número de referencia."
		},
		"CREATE EMPTY SET": {
			"Syntax": "**CREATE EMPTY SET** ( {*tabla* ;} *conjunto* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual crear un conjunto vacío o Tabla por defecto si se omite"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del nuevo conjunto vacío"
				]
			],
			"Summary": "CREATE EMPTY SET crea un conjunto vacío, *conjunto*, para *tabla*."
		},
		"CREATE FOLDER": {
			"Syntax": "**CREATE FOLDER** ( *rutaCarpeta* {; *Operador*} )",
			"Params": [
				[
					"rutaCarpeta",
					"Text",
					"->",
					"Ruta de acceso a la nueva carpeta a crear"
				],
				[
					"*",
					"*",
					"->",
					"Crear carpeta jerárquica"
				]
			],
			"Summary": "El comando **CREATE FOLDER** crea una carpeta en función de la ruta de acceso que se pasa en *rutaCarpeta*."
		},
		"CREATE INDEX": {
			"Syntax": "**CREATE INDEX** ( *tabla* ; *arrayCampos* ; *tipoIndice* ; *nombreIndice* {; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual crear un índice"
				],
				[
					"arrayCampos",
					"Pointer array",
					"->",
					"Puntero(s) a el/los campo(s) a indexar"
				],
				[
					"tipoIndice",
					"Integer",
					"->",
					"Tipo de índice a crear: -1 = Palabras claves, 0 = por defecto, 1 = B-Tree estándar, 3 = B-Tree cluster"
				],
				[
					"nombreIndice",
					"Text",
					"->",
					"Nombre del índice a crear"
				],
				[
					"*",
					"Operador",
					"->",
					"Si pasa = indexación asincrónica"
				]
			],
			"Summary": "índice estándar en uno o más campos (índice compuesto)"
		},
		"Create menu": {
			"Syntax": "**Create menu** {( *menu* )} : Text",
			"Params": [
				[
					"menu",
					"Text, Integer, Text",
					"->",
					"Referencia del menú o Número o nombre de barra de menús"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del menú"
				]
			],
			"Summary": "El comando **Create menu** permite crear un nuevo menú en memoria."
		},
		"CREATE RECORD": {
			"Syntax": "**CREATE RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual crear un nuevo registro, o Tabla por defecto, si se omite"
				]
			],
			"Summary": "**CREATE RECORD** crea un nuevo registro vacío para *tabla,* pero no muestra el nuevo registro."
		},
		"CREATE RELATED ONE": {
			"Syntax": "**CREATE RELATED ONE** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo Muchos"
				]
			],
			"Summary": "CREATE RELATED ONE tiene dos acciones."
		},
		"CREATE SELECTION FROM ARRAY": {
			"Syntax": "**CREATE SELECTION FROM ARRAY** ( *tabla* ; *regArray* {; *temp*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual crear la selección"
				],
				[
					"regArray",
					"Integer, Boolean array",
					"->",
					"Array de números de registros, o Array de booleanos (True = el registro está en la selección, False = el registro no está en la selección)"
				],
				[
					"temp",
					"Text",
					"->",
					"Nombre de la selección temporal a crear, o Aplicar el comando a la selección actual si el parámetro se omite"
				]
			],
			"Summary": "El comando **CREATE SELECTION FROM ARRAY** crea la selección temporal *temp*"
		},
		"CREATE SET FROM ARRAY": {
			"Syntax": "**CREATE SET FROM ARRAY** ( *tabla* ; *arrayReg* {; *nomConjunto*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del conjunto"
				],
				[
					"arrayReg",
					"Integer, Boolean array",
					"->",
					"Array de número de registros o Array de booleanos (True = el registro está en el conjunto, False = el registro no está en el conjunto)"
				],
				[
					"nomConjunto",
					"Text",
					"->",
					"Nombre del conjunto a crear o Aplicar el comando a Userset si se omite"
				]
			],
			"Summary": "El comando CREATE SET FROM ARRAY crea *nomCon*"
		},
		"CREATE SET": {
			"Syntax": "**CREATE SET** ( {*tabla* ;} *conjunto* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual crear un conjunto a partir de la selección actual o Tabla por defecto si se omite"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del nuevo conjunto"
				]
			],
			"Summary": "CREATE SET crea un nuevo conjunto, *conjunto*, para *tabla*, y coloca la selección actual en *conjunto*."
		},
		"CREATE THUMBNAIL": {
			"Syntax": "**CREATE THUMBNAIL** ( *fuente* ; *dest* {; *ancho* {; *altura* {; *modo* {; *profundidad*}}}} )",
			"Params": [
				[
					"fuente",
					"Picture",
					"->",
					"Campo o variable imagen 4D a convertir en miniatura"
				],
				[
					"dest",
					"Picture",
					"<-",
					"Miniatura resultante"
				],
				[
					"ancho",
					"Integer",
					"->",
					"Largo de la miniatura en píxeles, Valor por defecto = 48"
				],
				[
					"altura",
					"Integer",
					"->",
					"Alto de la miniatura en píxeles, Valor por defecto = 48"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo de creación de la miniatura Valor por defecto = Proporcional centrado (6)"
				],
				[
					"profundidad",
					"Integer",
					"->",
					"Colores de la miniatura en bits/píxeles Valor por defecto = Profundidad de pantalla actual (0)"
				]
			],
			"Summary": "El comando CREATE THUMBNAILdevuelve una miniatura a partir de una imagen fuente."
		},
		"Current client authentication": {
			"Syntax": "**Current client authentication** {( *dominio* ; *protocolo* )} : Text",
			"Params": [
				[
					"dominio",
					"Text",
					"<-",
					"Nombre del dominio"
				],
				[
					"protocolo",
					"Text",
					"<-",
					"\"Kerberos\", \"NTLM\", o cadena vacía"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de usuario de sesión devuelto por Windows"
				]
			],
			"Summary": "El comando **Current client authentication** pide al servidor Active Directory de Windows autenticar al cliente actual y si tiene éxito, devuelve el nombre de inicio de sesión de Windows para este cliente (identificador de sesión)."
		},
		"Current date": {
			"Syntax": "**Current date** {( * )} : Date",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devuelve la fecha actual del servidor"
				],
				[
					"Resultado",
					"Date",
					"<-",
					"Fecha actual"
				]
			],
			"Summary": "El comando Current date devuelve la fecha actual tal como está definida en el reloj del sistema."
		},
		"Current default table": {
			"Syntax": "**Current default table**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero hacia la tabla por defecto"
				]
			],
			"Summary": "Current default table devuelve un puntero hacia la tabla pasada a la última llamada de DEFAULT TABLE para el proceso actual."
		},
		"Current form name": {
			"Syntax": "**Current form name**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del formulario de proyecto actual o formulario tabla actual en el proceso"
				]
			],
			"Summary": "El comando **Current form name** devuelve el nombre del formulario actual definido para el proceso."
		},
		"Current form table": {
			"Syntax": "**Current form table**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero hacia la tabla del formulario de salida actual"
				]
			],
			"Summary": "El comando Current form table devuelve el puntero hacia la tabla del formulario en pantalla o impreso en el proceso actual."
		},
		"Current form window": {
			"Syntax": "**Current form window**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de la ventana del formulario actual"
				]
			],
			"Summary": "El comando Current form window devuelve la referencia de la ventana del formulario actual."
		},
		"Current machine": {
			"Syntax": "**Current machine**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del equipo en la red"
				]
			],
			"Summary": "El comando Current machine devuelve el nombre de su equipo, como está definido en el panel de control de red."
		},
		"Current method name": {
			"Syntax": "**Current method name**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del método de llamada"
				]
			],
			"Summary": "El comando Current method name devuelve el nombre del método en el cual se llama."
		},
		"Current method path": {
			"Syntax": "**Current method path**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta interna completa del método en ejecución"
				]
			],
			"Summary": "El comando **Current method path** devuelve la ruta de acceso interna del método base, trigger, método de proyecto, método formulario o método objeto en ejecución."
		},
		"Current process name": {
			"Syntax": "**Current process name**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del proceso actual"
				]
			],
			"Summary": "El comando **Current process name** devuelve el nombre del proceso en el que este comando se llama."
		},
		"Current process": {
			"Syntax": "**Current process**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de proceso"
				]
			],
			"Summary": "Current process devuelve el número de proceso a partir del cual se llama este comando."
		},
		"Current system user": {
			"Syntax": "**Current system user**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del dueño del equipo en la red"
				]
			],
			"Summary": "El comando **Current system user** devuelve el nombre del dueño de su equipo, tal como está definido en los parámetros de red del sistema operativo."
		},
		"Current time": {
			"Syntax": "**Current time** {( * )} : Time",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devuelve la hora actual del servidor"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Hora actual"
				]
			],
			"Summary": "El comando Current time devuelve la hora actual del reloj de sistema."
		},
		"Current user": {
			"Syntax": "**Current user** {( *usuario* )} : Text",
			"Params": [
				[
					"usuario",
					"Integer",
					"->",
					"Alias de usuario o cuenta de usuario 4D"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del usuario actual"
				]
			],
			"Summary": "Current user devuelve el alias o el nombre del usuario actual."
		},
		"CUT NAMED SELECTION": {
			"Syntax": "**CUT NAMED SELECTION** ( {*tabla* ;} *nombre* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual cortar selección, o Tabla por defecto, si se omite"
				],
				[
					"nombre",
					"Text",
					"->",
					"Nombre de la selección temporal a crear"
				]
			],
			"Summary": "CUT NAMED SELECTION crea una selección temporal *temp* y coloca allí la selección actual de *tabla*."
		},
		"Data file encryption status": {
			"Syntax": "**Data file encryption status** ( rutaEstruct , rutaDatos ) : Object",
			"Params": [
				[
					"rutaEstruct",
					"Text",
					"->",
					"Nombre de ruta del archivo de estructura 4D a verificar"
				],
				[
					"rutaDatos",
					"Text",
					"->",
					"Nombre de ruta del archivo de datos 4D a verificar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre el cifrado del archivo de datos y de cada tabla"
				]
			],
			"Summary": "El comando **Data file encryption status** devuelve un objeto que suministra el estado de cifrado para el archivo de datos designado por los parámetros *rutaEstruct* y *rutaDatos*."
		},
		"Data file": {
			"Syntax": "**Data file** {( *segmento* )} : Text",
			"Params": [
				[
					"segmento",
					"Integer",
					"->",
					"Obsoleto, no utilizar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre largo del archivo de datos de la base"
				]
			],
			"Summary": "El comando Data file devuelve el nombre largo del archivo de datos o del primer segmento de la base en la cual está trabajando actualmente."
		},
		"Database measures": {
			"Syntax": "**Database measures** {( *opciones* )} : Object",
			"Params": [
				[
					"opciones",
					"Object",
					"->",
					"Opciones de retorno"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contiene las medidas de la base"
				]
			],
			"Summary": "El comando **Database measures** le permite obtener información detallada acerca de los eventos del motor de base de datos 4D."
		},
		"Date": {
			"Syntax": "**Date** ( *expresion* ) : Date",
			"Params": [
				[
					"expresion",
					"Text, Date",
					"->",
					"Cadena que contiene la fecha a devolver"
				],
				[
					"Resultado",
					"Date",
					"<-",
					"Fecha"
				]
			],
			"Summary": "El comando Date evalúa *expresion* y devuelve una fecha."
		},
		"Day number": {
			"Syntax": "**Day number** ( *fecha* ) : Integer",
			"Params": [
				[
					"fecha",
					"Date",
					"->",
					"Fecha para la cual devolver el número del día"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número que representa el día de la semana que corresponde a la fecha"
				]
			],
			"Summary": "El comando Day number devuelve un número que representa el día de la semana que corresponde a la *f* *echa*."
		},
		"Day of": {
			"Syntax": "**Day of** ( *fecha* ) : Integer",
			"Params": [
				[
					"fecha",
					"Date",
					"->",
					"Fecha para la cual devolver el día"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Día del mes de la fecha"
				]
			],
			"Summary": "El comando Day of devuelve el día del mes de *fecha*."
		},
		"Deactivated": {
			"Syntax": "**Deactivated**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve TRUE si el ciclo de ejecución está en desactivación"
				]
			],
			"Summary": "El comando **Deactivated** devuelve True en un método formulario u objeto cuando la ventana del primer plano del proceso de primer plano, contiene el formulario, se traslada a la parte posterior."
		},
		"Dec": {
			"Syntax": "**Dec** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número cuya parte decimal se devuelve"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Parte decimal de número"
				]
			],
			"Summary": "Dec devuelve la parte decimal de *número*."
		},
		"DECRYPT BLOB": {
			"Syntax": "**DECRYPT BLOB** ( *aDescifrar* ; *enviarLlavePub* {; *recepLlavePriv*} )",
			"Params": [
				[
					"aDescifrar",
					"Blob",
					"<->",
					"Datos a descifrar"
				],
				[
					"",
					"",
					"",
					"Datos descifrados"
				],
				[
					"enviarLlavePub",
					"Blob",
					"->",
					"Llave pública del emisor"
				],
				[
					"recepLlavePriv",
					"Blob",
					"->",
					"Llave privada del receptor"
				]
			],
			"Summary": "El comando DECRYPT BLOB descifra el contenido del BLOB aDescrifrar utilizando la llave pública del emisor *enviarLlavePub* y opcionalmente la llave privada del receptor *recepLlavePriv*."
		},
		"Decrypt data BLOB": {
			"Syntax": "**Decrypt data BLOB** ( *blobADescifrar* ; objetoLlave | frasePasar ; *sal* ; *blobDescifrado* ) : Boolean",
			"Params": [
				[
					"blobADescifrar",
					"Blob",
					"->",
					"BLOB a descifrar"
				],
				[
					"objetoLlave &#124; frasePasar",
					"Objeto, Texto",
					"->",
					"Objeto JSON que contiene la llave de cifrado o la frase de paso para la generación directa de la llave de cifrado (texto)"
				],
				[
					"sal",
					"Integer",
					"->",
					"Sal adicional para el algoritmo"
				],
				[
					"blobDescifrado",
					"Blob",
					"<-",
					"BLOB descifrado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la desencriptación se ha realizado correctamente, False en caso contrario"
				]
			],
			"Summary": "El comando **Decrypt data BLOB** descifra el parámetro *blobADescifrar* con el mismo algoritmo que 4D utiliza para descifrar datos (AES-256) y devuelve el resultado en *blobDescifrado*."
		},
		"DEFAULT TABLE": {
			"Syntax": "**DEFAULT TABLE** ( *tabla* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a definir como tabla por defecto"
				]
			],
			"Summary": "**Tip:** aunque utilizar **DEFAULT TABLE** y omitir el nombre de la tabla pueden hacer el código más fácil de leer, muchos programadores consideran que la utilización de este comando en realidad trae más inconvenientes que ventajas."
		},
		"DELAY PROCESS": {
			"Syntax": "**DELAY PROCESS** ( *proceso* ; *duracion* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				],
				[
					"duracion",
					"Real",
					"->",
					"Duración expresada en tics"
				]
			],
			"Summary": "DELAY PROCESS permite retrasar un *proceso* por un número de tics (1 tic = 1/60 de segundo)."
		},
		"DELETE DOCUMENT": {
			"Syntax": "**DELETE DOCUMENT** ( *doc* )",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento o Ruta de acceso completa al documento"
				]
			],
			"Summary": "El comando **DELETE DOCUMENT** borra el documento cuyo nombre se pasa en *documento*."
		},
		"DELETE FOLDER": {
			"Syntax": "**DELETE FOLDER** ( *carpeta* {; *opcionEliminacion*} )",
			"Params": [
				[
					"carpeta",
					"Text",
					"->",
					"Nombre o ruta de acceso completa de la carpeta a borrar"
				],
				[
					"opcionEliminacion",
					"Integer",
					"->",
					"Opción de eliminación de la carpeta"
				]
			],
			"Summary": "El comando **DELETE FOLDER**borra la carpeta cuyo nombre o ruta completa se pasa en *carpeta*."
		},
		"DELETE FROM ARRAY": {
			"Syntax": "**DELETE FROM ARRAY** ( *array* ; *posicion* {; *reemplazos*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array del cual borrar elementos"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Elemento donde comienza la supresión"
				],
				[
					"reemplazos",
					"Integer",
					"->",
					"Número de elementos a borrar, o 1 elemento si se omite"
				]
			],
			"Summary": "El comando DELETE FROM ARRAY borra uno o más elementos del *array*."
		},
		"DELETE FROM BLOB": {
			"Syntax": "**DELETE FROM BLOB** ( *BLOB* ; *offset* ; *numero* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB del cual borrar los bytes"
				],
				[
					"offset",
					"Integer",
					"->",
					"Offset a partir del cual borrar los bytes"
				],
				[
					"numero",
					"Integer",
					"->",
					"Número de bytes a borrar"
				]
			],
			"Summary": "El comando DELETE FROM BLOB borra el número de bytes especificado por *numero* del BLOB *blob* a partir de la posición especificada por *offset* (expresada de manera relativa al comienzo del BLOB)."
		},
		"DELETE FROM LIST": {
			"Syntax": "**DELETE FROM LIST** ( {* ;} *lista* ; refElem | * {; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de referencia del elemento, o 0 para el último elemento añadido a la lista o * para el elemento de la lista actualmente seleccionada"
				],
				[
					"*",
					"Operator",
					"->",
					"Si se especifica, borra las sublistas (si la hay) de la memoria Si se omite, las sublistas (si las hay) no son borradas"
				]
			],
			"Summary": "El comando DELETE FROM LIST borra el elemento designado por el parámetro *refElem* de la lista cuyo número de referencia se pasa en *lista*."
		},
		"DELETE INDEX": {
			"Syntax": "**DELETE INDEX** ( *Ptrcamp* {; *} )<br/>**DELETE INDEX** ( *nomIndex* {; *} )",
			"Params": [
				[
					"Ptrcamp &#124; nomIndex",
					"Puntero, Cadena",
					"->",
					"Puntero al campo del cual borrar los índices o Nombre del índice a borrar"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = operación asincrónica"
				]
			],
			"Summary": "El comando DELETE INDEX se utiliza para borrar uno o más índices existentes en la base."
		},
		"DELETE MENU ITEM": {
			"Syntax": "**DELETE MENU ITEM** ( *menu* ; *lineamenu* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia de proceso"
				]
			],
			"Summary": "El comando DELETE MENU ITEM elimina la línea de menú cuyo número o referencia de menú y número de elemento usted pasó en *menu* y *menuItem*."
		},
		"DELETE RECORD": {
			"Syntax": "**DELETE RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual borrar el registro actual, o Tabla por defecto, si se omite"
				]
			],
			"Summary": "DELETE RECORD borra el registro actual de *tabla* en el proceso."
		},
		"DELETE SELECTION": {
			"Syntax": "**DELETE SELECTION** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual borrar la selección actual o Tabla por defecto, si se omite"
				]
			],
			"Summary": "DELETE SELECTION borra la selección actual de registros de *tabla*."
		},
		"Delete string": {
			"Syntax": "**Delete string** ( *fuente* ; *posicion* ; *numCaracteres* ) : Text",
			"Params": [
				[
					"fuente",
					"Text",
					"->",
					"Cadena de la cual borrar caracteres"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Primer caracter a borrar"
				],
				[
					"numCaracteres",
					"Integer",
					"->",
					"Número de caracteres a borrar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena resultante"
				]
			],
			"Summary": "Delete string borra *numCaracteres* de *fuente*, a partir de *posicion*, y devuelve la cadena resultante."
		},
		"DELETE USER": {
			"Syntax": "**DELETE USER** ( *refUsuario* )",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Número de identificación del usuario a borrar"
				]
			],
			"Summary": "El comando DELETE USER borra el usuario cuyo número se pasa en *refUsuario*."
		},
		"DESCRIBE QUERY EXECUTION": {
			"Syntax": "**DESCRIBE QUERY EXECUTION** ( *estado* )",
			"Params": [
				[
					"estado",
					"Boolean",
					"->",
					"True=Activar análisis de búsquedas internas, False=Desactivar el análisis de búsquedas internas"
				]
			],
			"Summary": "El comando DESCRIBE QUERY EXECUTION permite activar o desactivar el modo de análisis de la ejecución de búsquedas para el proceso actual."
		},
		"DIFFERENCE": {
			"Syntax": "**DIFFERENCE** ( *conjunto1* ; *conjunto2* ; *resultado* )",
			"Params": [
				[
					"conjunto1",
					"Text",
					"->",
					"Conjunto inicial"
				],
				[
					"conjunto2",
					"Text",
					"->",
					"Conjunto a restar"
				],
				[
					"resultado",
					"Text",
					"->",
					"Conjunto resultante"
				]
			],
			"Summary": "DIFFERENCE fusiona *conjunto1* y *conjunto2* y excluye del conjunto *resultado* todos los registros de *conjunto2*."
		},
		"DISABLE MENU ITEM": {
			"Syntax": "**DISABLE MENU ITEM** ( *menu* ; *lineamenu* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia del menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				]
			],
			"Summary": "El comando DISABLE MENU ITEM desactiva el comando de menú cuyo número o referencia de menú y número de elemento usted pasó en *menu* y *menuItem*."
		},
		"Discover data key": {
			"Syntax": "**Discover data key**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si se ha encontrado una llave de cifrado válida para el archivo de datos abierto actualmente, de lo contrario False"
				]
			],
			"Summary": "El comando **Discover data key** busca una llave de cifrado válida correspondiente al archivo de datos abierto actualmente a nivel de la raíz de todos los dispositivos conectados y devuelve **True** si es exitoso."
		},
		"DISPLAY NOTIFICATION": {
			"Syntax": "**DISPLAY NOTIFICATION** ( *titulo* ; *texto* {; *duracion*} )",
			"Params": [
				[
					"titulo",
					"Text",
					"->",
					"Título de la notificación"
				],
				[
					"texto",
					"Text",
					"->",
					"Texto de la notificación"
				],
				[
					"duracion",
					"Integer",
					"->",
					"Duración de la visualización en segundos"
				]
			],
			"Summary": "El comando DISPLAY NOTIFICATION muestra un mensaje de notificación al usuario:\n\nEste tipo de mensaje generalmente es utilizado por el sistema o por las aplicaciones para informar al usuario sobre un evento externo (desconexión de red, disponibilidad de una actualización, etc.)."
		},
		"DISPLAY RECORD": {
			"Syntax": "**DISPLAY RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual mostrar el registro actual o Tabla por defecto, si se omite"
				]
			],
			"Summary": "El comando DISPLAY RECORD muestra el registro actual de *tabla*, utilizando el formulario de entrada actual."
		},
		"DISPLAY SELECTION": {
			"Syntax": "**DISPLAY SELECTION** ( {*tabla*}{; *modoSelección*}{; *entradaList*}{; *}{; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a mostrar, o Tabla por defecto, si se omite"
				],
				[
					"modoSelección",
					"Integer",
					"->",
					"Modo de selección"
				],
				[
					"entradaList",
					"Boolean",
					"->",
					"Autorizar entrada en lista"
				],
				[
					"*",
					"Operator",
					"->",
					"Utilizar el formulario de salida en caso de selección de un solo registro y ocultar las barras de desplazamiento en el formulario de entrada"
				],
				[
					"*",
					"Operator",
					"->",
					"Mostrar las barras de desplazamiento en el formulario de entrada (anular el segundo efecto del primer parámetro *)"
				]
			],
			"Summary": "DISPLAY SELECTION muestra la selección de *tabla*, utilizando el formulario de salida."
		},
		"Displayed line number": {
			"Syntax": "**Displayed line number**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de línea mostrada"
				]
			],
			"Summary": "El comando Displayed line number funciona únicamente en el contexto del evento de formulario On Display Detail."
		},
		"DISTINCT ATTRIBUTE PATHS": {
			"Syntax": "**DISTINCT ATTRIBUTE PATHS** ( *campoObjeto* ; *arrayRuta* )",
			"Params": [
				[
					"campoObjeto",
					"Field",
					"->",
					"Campo objeto indexado"
				],
				[
					"arrayRuta",
					"Text array",
					"<-",
					"Array para recibir la lista de rutas diferentes"
				]
			],
			"Summary": "El comando **DISTINCT ATTRIBUTE PATHS** devuelve la lista de rutas distintas que se encuentran en el campo objeto indexado pasado en *campoObjeto* para la selección actual de la tabla a la que pertenece el campo."
		},
		"DISTINCT ATTRIBUTE VALUES": {
			"Syntax": "**DISTINCT ATTRIBUTE VALUES** ( *campoObjeto* ; *ruta* ; *arrayValores* )",
			"Params": [
				[
					"campoObjeto",
					"Field",
					"->",
					"Campo de objeto del que desea obtener la lista de valores de atributos distintos"
				],
				[
					"ruta",
					"Text",
					"->",
					"Ruta de acceso del atributo cuyos valores distintos desea obtener"
				],
				[
					"arrayValores",
					"Text array, Integer array, Boolean array, Date array, Time array",
					"<-",
					"Valores distintos en la ruta de atributos"
				]
			],
			"Summary": "**Tema:** Arrays\n\nEl comando **DISTINCT ATTRIBUTE VALUES** crea y llena el *arrayValores* con valores no repetidos (únicos) procedentes del atributo *ruta* en el campo *campoObjeto* para la selección actual de la tabla a la que pertenece el campo."
		},
		"DISTINCT VALUES": {
			"Syntax": "**DISTINCT VALUES** ( *unCampo* ; *array* {; *contArray*} )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo o subcampo indexable a utilizar para datos"
				],
				[
					"array",
					"Array",
					"<-",
					"Array a recibir los datos del campo"
				],
				[
					"contArray",
					"Integer array, Real array",
					"<-",
					"Array a recibir el número de ocurrencias de cada valor"
				]
			],
			"Summary": "El comando **DISTINCT VALUES** crea y llena el array *array* con todos valores distintos (únicos) del campo *campo* para la selección actual de la tabla del campo y, opcionalmente, devuelve en *contArray* el número de ocurrencias de cada valor."
		},
		"DOCUMENT LIST": {
			"Syntax": "**DOCUMENT LIST** ( *nombreRuta* ; *documentos* {; *opciones*} )",
			"Params": [
				[
					"nombreRuta",
					"Text",
					"->",
					"Ruta de acceso al volumen o a la carpeta"
				],
				[
					"documentos",
					"Text array",
					"<-",
					"Nombres de los documentos presentes en esta ubicación"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Opciones para crear la lista"
				]
			],
			"Summary": "El comando **DOCUMENT LIST** llena el array de tipo Texto *documentos* con los nombres del los documentos ubicados en la ubicación pasada en *rutaAcceso*."
		},
		"DOCUMENT TO BLOB": {
			"Syntax": "**DOCUMENT TO BLOB** ( *documento* ; *BLOB* )",
			"Params": [
				[
					"documento",
					"Text",
					"->",
					"Nombre del documento"
				],
				[
					"Blob",
					"Blob",
					"<->",
					"Campo o variable de tipo BLOB a recibir el documento"
				],
				[
					"",
					"",
					"",
					"Contenido del documento"
				]
			],
			"Summary": "**DOCUMENT TO BLOB** carga el contenido de *documento* en *blob*."
		},
		"Document to text": {
			"Syntax": "**Document to text** ( *nomArchivo* {; *conjCaracteres* {; *modoRetorno*}} ) : Text",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Nombre del documento o ruta al documento"
				],
				[
					"conjCaracteres",
					"Text, Integer",
					"->",
					"Nombre o número del conjunto de caracteres"
				],
				[
					"modoRetorno",
					"Integer",
					"->",
					"Modo de procesamiento para las líneas de ruptura"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto del documento"
				]
			],
			"Summary": "El comando **Document to text** le permite recuperar el contenido de un archivo directamente en el disco en una variable texto 4D o campo texto."
		},
		"DOM Append XML child node": {
			"Syntax": "**DOM Append XML child node** ( *refElement* ; *tipoHijo* ; *valorHijo* ) : Text",
			"Params": [
				[
					"refElement",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"tipoHijo",
					"Integer",
					"->",
					"Tipo de hijo a añadir"
				],
				[
					"valorHijo",
					"Text, Blob",
					"->",
					"Texto o variable (Texto o BLOB)cuyo valor debe insertarse como nodo hijo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML hijo"
				]
			],
			"Summary": "El comando DOM Append XML child node se utiliza para anexar el valor *valorHijo* al nodo XML designado por *refElement*."
		},
		"DOM Append XML element": {
			"Syntax": "**DOM Append XML element** ( *refElementTarget* ; *refElementFuente* ) : Text",
			"Params": [
				[
					"refElementTarget",
					"Text",
					"->",
					"Referencia del elemento XML padre"
				],
				[
					"refElementFuente",
					"Text",
					"->",
					"Referencia del elemento XML a añadir"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del nuevo elemento XML"
				]
			],
			"Summary": "El comando DOM Append XML element se utiliza para añadir un nuevo elemento XML al hijo del elemento XML cuya referencia se pasa en el parámetro *refElementFuente* ."
		},
		"DOM CLOSE XML": {
			"Syntax": "**DOM CLOSE XML** ( *elementRef* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				]
			],
			"Summary": "El comando DOM CLOSE XML libera el espacio en memoria ocupado por el objeto XML designado por *refElement*."
		},
		"DOM Count XML attributes": {
			"Syntax": "**DOM Count XML attributes** ( *elementRef* ) : Integer",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de atributos"
				]
			],
			"Summary": "El comando DOM Count XML attributes devuelve el número de los atributos XML presentes en el elemento XML designado por *refElement*."
		},
		"DOM Count XML elements": {
			"Syntax": "**DOM Count XML elements** ( *elementRef* ; *nomElement* ) : Integer",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElement",
					"Text",
					"->",
					"Nombre de los elementos XML a contar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de elementos"
				]
			],
			"Summary": "El comando DOM Count XML elements devuelve el número de elementos “hijo” dependientes del elemento padre *refElement* y llamado *nomElement*."
		},
		"DOM Create XML element arrays": {
			"Syntax": "**DOM Create XML element arrays** ( *refElement* ; *xRuta* {; *arrayNomsAtrib* ; *arrayValoresAtrib*} {; *arrayNomsAtrib2* ; *arrayValoresAtrib2* ; ... ; *arrayNomsAtribN* ; *arrayValoresAtribN*} ) : Text",
			"Params": [
				[
					"refElement",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				],
				[
					"xRuta",
					"Text",
					"->",
					"Ruta XRuta del elemento XML a crear"
				],
				[
					"arrayNomsAtrib",
					"Text array",
					"->",
					"Array de nombres de atributos"
				],
				[
					"arrayValoresAtrib",
					"Text array",
					"->",
					"Array de valores de atributos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML creado"
				]
			],
			"Summary": "El comando DOM Create XML element arrays se utiliza para añadir un nuevo elemento en el elemento XML de *refElement*, como también opcionalmente, atributos y sus valores en forma de arrays."
		},
		"DOM Create XML element": {
			"Syntax": "**DOM Create XML element** ( *elementRef* ; *xRuta* {; *nomAtrib* ; *valorAtrib*} {; *nomAtrib2* ; *valorAtrib2* ; ... ; *nomAtribN* ; *valorAtribN*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				],
				[
					"xRuta",
					"Text",
					"->",
					"Ruta XPath del elemento XML a crear"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Atributo a definir"
				],
				[
					"valorAtrib",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"Nuevo valor del atributo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML creado"
				]
			],
			"Summary": "El comando **DOM Create XML element** permite crear un nuevo elemento en el elemento XML *refElement* en la ubicación definida por el parámetro *xRuta* y añadirle atributos si es necesario."
		},
		"DOM Create XML Ref": {
			"Syntax": "**DOM Create XML Ref** ( *raiz* {; *nomEspacio*} {; *nSNom* ; *nSValor*} {; *nSNom2* ; *nSValor2* ; ... ; *nSNomN* ; *nSValorN*} ) : Text",
			"Params": [
				[
					"raiz",
					"Text",
					"->",
					"Nombre del elemento raíz"
				],
				[
					"nomEspacio",
					"Text",
					"->",
					"Valor del espacio de nombre (namespace)"
				],
				[
					"nSNom",
					"Text",
					"->",
					"Nombre del espacio de nombre"
				],
				[
					"nSValor",
					"Text",
					"->",
					"Valor de espacio de nombre"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML raíz"
				]
			],
			"Summary": "El comando DOM Create XML Ref crea un árbol XML vacío en memoria y devuelve su referencia."
		},
		"DOM EXPORT TO FILE": {
			"Syntax": "**DOM EXPORT TO FILE** ( *elementRef* ; *rutaArchivo* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				],
				[
					"rutaArchivo",
					"Text",
					"->",
					"Ruta de acceso completa del archivo"
				]
			],
			"Summary": "El comando DOM EXPORT TO FILE  permite guardar un árbol XML en un archivo en el disco."
		},
		"DOM EXPORT TO VAR": {
			"Syntax": "**DOM EXPORT TO VAR** ( *elementRef* ; *vXmlVar* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				],
				[
					"vXmlVar",
					"Text, Blob",
					"<-",
					"Variable a recibir el árbol XML"
				]
			],
			"Summary": "El comando DOM EXPORT TO VAR  permite guardar un árbol XML en una variable texto o BLOB."
		},
		"DOM Find XML element by ID": {
			"Syntax": "**DOM Find XML element by ID** ( *elementRef* ; *id* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"id",
					"Text",
					"->",
					"Valor del atributo ID del elemento a buscar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento encontrado (si aplica)"
				]
			],
			"Summary": "El comando DOM Find XML element by ID busca, al interior de un documento XML, el elemento cuyo atributo id sea igual al valor pasado en el parámetro *id*."
		},
		"DOM Find XML element": {
			"Syntax": "**DOM Find XML element** ( *elementRef* ; *xRuta* {; *arrRefElement*} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"xRuta",
					"Text",
					"->",
					"Ruta XPath del elemento a buscar"
				],
				[
					"arrRefElement",
					"Text array",
					"<-",
					"Lista de referencias de los elementos encontrados (si aplica)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento encontrado (si aplica)"
				]
			],
			"Summary": "El comando DOM Find XML element permite buscar los elementos XML específicos en una estructura XML."
		},
		"DOM Get first child XML element": {
			"Syntax": "**DOM Get first child XML element** ( *elementRef* {; *nomElementHijo* {; *valorElementHijo*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElementHijo",
					"Text",
					"<-",
					"Nombre del elemento XML hijo"
				],
				[
					"valorElementHijo",
					"Text",
					"<-",
					"Valor del elemento XML hijo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML hijo"
				]
			],
			"Summary": "El comando DOM Get first child XML element devuelve una referencia XML al primer “hijo” del elemento XML pasado en *refElement*."
		},
		"DOM Get last child XML element": {
			"Syntax": "**DOM Get last child XML element** ( *elementRef* {; *nomElementHijo* {; *valorElementHijo*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElementHijo",
					"Text",
					"<-",
					"Nombre del elemento hijo"
				],
				[
					"valorElementHijo",
					"Text",
					"<-",
					"Valor del elemento hijo"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML"
				]
			],
			"Summary": "El comando DOM Get last child XML element devuelve una referencia XML al último “hijo” del elemento XML pasado como referencia en *refElement*."
		},
		"DOM Get next sibling XML element": {
			"Syntax": "**DOM Get next sibling XML element** ( *elementRef* {; *nomElemHermano* {; *valorElemHermano*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElemHermano",
					"Text",
					"<-",
					"Nombre del elemento XML hermano"
				],
				[
					"valorElemHermano",
					"Text",
					"<-",
					"Valor del elemento XML hermano"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML hermano"
				]
			],
			"Summary": "El comando DOM Get next sibling XML element devuelve una referencia al próximo “hermano” del elemento XML pasado como referencia."
		},
		"DOM Get parent XML element": {
			"Syntax": "**DOM Get parent XML element** ( *elementRef* {; *nomElemPadre* {; *valorElemPadre*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElemPadre",
					"Text",
					"<-",
					"Nombre del elemento XML padre"
				],
				[
					"valorElemPadre",
					"Text",
					"<-",
					"Valor del elemento XML padre"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML padre"
				]
			],
			"Summary": "El comando DOM Get parent XML element devuelve una referencia XML al “padre” del elemento XML pasado como referencia en *refElement*."
		},
		"DOM Get previous sibling XML element": {
			"Syntax": "**DOM Get previous sibling XML element** ( *elementRef* {; *nomElemHermano* {; *valorElemHermano*}} ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElemHermano",
					"Text",
					"<-",
					"Nombre del elemento XML hermano"
				],
				[
					"valorElemHermano",
					"Text",
					"<-",
					"Valor del elemento XML hermano"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML hermano"
				]
			],
			"Summary": "El comando DOM Get previous sibling XML element devuelve una referencia al anterior “hermano” del elemento XML pasado en referencia."
		},
		"DOM Get root XML element": {
			"Syntax": "**DOM Get root XML element** ( *elementRef* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento raíz o \"\" en caso de error"
				]
			],
			"Summary": "El comando DOM Get root XML element devuelve una referencia al elemento raíz del documento al cual pertenece el elemento XML que se pasa en el parámetro *elementRef*."
		},
		"DOM GET XML ATTRIBUTE BY INDEX": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY INDEX** ( *elementRef* ; *indexAtrib* ; *nomAtrib* ; *valorAtrib* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"indexAtrib",
					"Integer",
					"->",
					"Número de índice del atributo"
				],
				[
					"nomAtrib",
					"Variable",
					"<-",
					"Nombre del atributo"
				],
				[
					"valorAtrib",
					"Variable",
					"<-",
					"Valor del atributo"
				]
			],
			"Summary": "El comando **DOM GET XML ATTRIBUTE BY INDEX** permite conocer el nombre así como el valor de un atributo especificado por su número de índice."
		},
		"DOM GET XML ATTRIBUTE BY NAME": {
			"Syntax": "**DOM GET XML ATTRIBUTE BY NAME** ( *elementRef* ; *nomAtrib* ; *valorAtrib* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Nombre del atributo"
				],
				[
					"valorAtrib",
					"Variable",
					"<-",
					"Valor del atributo"
				]
			],
			"Summary": "El comando DOM GET XML ATTRIBUTE BY NAMEpermite conocer el valor de un atributo especificado por su nombre."
		},
		"DOM GET XML CHILD NODES": {
			"Syntax": "**DOM GET XML CHILD NODES** ( *refElement* ; *ArrTiposHijos* ; *arrRefsNodos* )",
			"Params": [
				[
					"refElement",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"ArrTiposHijos",
					"Integer array",
					"<-",
					"Tipos de nodos hijos"
				],
				[
					"arrRefsNodos",
					"Text array",
					"<-",
					"Referencias o Valores de los nodos hijos"
				]
			],
			"Summary": "El comando DOM GET XML CHILD NODES devuelve los tipos y referencias o valores de todos los nodos hijos del elemento XML designado por *refElement*."
		},
		"DOM Get XML document ref": {
			"Syntax": "**DOM Get XML document ref** ( *refElement* ) : Text",
			"Params": [
				[
					"refElement",
					"Text",
					"->",
					"Referencia de un elemento existente en un árbol DOM"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del primer elemento del árbol DOM (nodo document)"
				]
			],
			"Summary": "El comando DOM Get XML document ref se utiliza para recuperar la referencia del elemento \"documento\" del árbol DOM cuya referencia se pasa en *refElement*."
		},
		"DOM GET XML ELEMENT NAME": {
			"Syntax": "**DOM GET XML ELEMENT NAME** ( *elementRef* ; *nomElement* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElement",
					"Variable",
					"<-",
					"Nombre del elemento"
				]
			],
			"Summary": "El comando DOM GET XML ELEMENT NAME devuelve en el parámetro *nomElement*, el nombre del elemento XML designado por *elementRef*."
		},
		"DOM GET XML ELEMENT VALUE": {
			"Syntax": "**DOM GET XML ELEMENT VALUE** ( *elementRef* ; *valorElement* {; *cDATA*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"valorElement",
					"Variable",
					"<-",
					"Valor del elemento"
				],
				[
					"cDATA",
					"Variable",
					"<-",
					"Contenido de la sección CDATA"
				]
			],
			"Summary": "El comando **DOM GET XML ELEMENT VALUE** devuelve en el parámetro *valorElement*, el valor del elemento XML designado por *refElement*."
		},
		"DOM Get XML element": {
			"Syntax": "**DOM Get XML element** ( *elementRef* ; *nomElement* ; *indice* ; *valorElement* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElement",
					"Text",
					"->",
					"Nombre del elemento a leer"
				],
				[
					"indice",
					"Integer",
					"->",
					"Número de índice del elemento a leer"
				],
				[
					"valorElement",
					"Variable",
					"<-",
					"Valor del elemento"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML (16 caracteres)"
				]
			],
			"Summary": "El comando DOM Get XML element devuelve una referencia XML al elemento “hijo” dependiente de los parámetros *nomElement* e *index*."
		},
		"DOM Get XML information": {
			"Syntax": "**DOM Get XML information** ( *elementRef* ; *infoXML* ) : Text",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				],
				[
					"infoXML",
					"Integer",
					"->",
					"Tipo de información a obtener"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor de la información XML"
				]
			],
			"Summary": "El comando DOM Get XML information permite recuperar diversa información sobre el elemento XML designado por *refElement*."
		},
		"DOM Insert XML element": {
			"Syntax": "**DOM Insert XML element** ( *refElementTarget* ; *refElementFuente* ; *indiceHijo* ) : Text",
			"Params": [
				[
					"refElementTarget",
					"Text",
					"->",
					"Referencia del elemento XML padre"
				],
				[
					"refElementFuente",
					"Text",
					"->",
					"Referencia del elemento XML a insertar"
				],
				[
					"indiceHijo",
					"Integer",
					"->",
					"Índice del hijo del elemento objetivo antes del cual se debe insertar el nuevo elemento"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del nuevo elemento XML"
				]
			],
			"Summary": "El comando DOM Insert XML element se utiliza para insertar un nuevo elemento XML entre los hijos del elemento XML cuya referencia se pasa en el parámetro *refElementTarget*."
		},
		"DOM Parse XML source": {
			"Syntax": "**DOM Parse XML source** ( *doc* {; *validacion* {; dtd | esquema}} ) : Text",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Ruta de acceso del documento"
				],
				[
					"validacion",
					"Boolean",
					"->",
					"True = Validación False = No validación"
				],
				[
					"dtd &#124; esquema",
					"Cadena",
					"->",
					"Ubicación de la DTD o del esquema XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML"
				]
			],
			"Summary": "El comando DOM Parse XML source analiza un documento que contiene una estructura XML y devuelve una referencia para este documento."
		},
		"DOM Parse XML variable": {
			"Syntax": "**DOM Parse XML variable** ( *variable* {; *validacion* {; dtd | esquema}} ) : Text",
			"Params": [
				[
					"variable",
					"Blob, Text",
					"->",
					"Nombre de la variable"
				],
				[
					"validacion",
					"Boolean",
					"->",
					"True = Validación por la DTD, False = No validacion"
				],
				[
					"dtd &#124; esquema",
					"Cadena",
					"->",
					"Ubicación de la DTD o del esquema XML"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia del elemento XML"
				]
			],
			"Summary": "El comando DOM Parse XML variable analiza una variable de tipo BLOB o Texto que contiene una estructura XML y devuelve una referencia para esta variable."
		},
		"DOM REMOVE XML ATTRIBUTE": {
			"Syntax": "**DOM REMOVE XML ATTRIBUTE** ( *refElement* ; *nomAtrib* )",
			"Params": [
				[
					"refElement",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Atributo a borrar"
				]
			],
			"Summary": "El comando DOM REMOVE XML ATTRIBUTE remueve, si existe, el atributo designado por *nomAtrib* del elemento XML cuya referencia se pasa en el parámetro *refElement*."
		},
		"DOM REMOVE XML ELEMENT": {
			"Syntax": "**DOM REMOVE XML ELEMENT** ( *elementRef* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				]
			],
			"Summary": "El comando DOM REMOVE XML ELEMENT  elimina el elemento designado por *elementRef*."
		},
		"DOM SET XML ATTRIBUTE": {
			"Syntax": "**DOM SET XML ATTRIBUTE** ( *elementRef* ; *nomAtrib* ; *valorAtrib* {; *nomAtrib2* ; *valorAtrib2* ; ... ; *nomAtribN* ; *valorAtribN*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Atributo a definir"
				],
				[
					"valorAtrib",
					"Text, Boolean, Integer, Real, Time, Date",
					"->",
					"Nuevo valor del atributo"
				]
			],
			"Summary": "El comando DOM SET XML ATTRIBUTE  permite añadir uno o varios atributos al elemento XML cuya referencia se pasa en el parámetro *refElement*."
		},
		"DOM SET XML DECLARATION": {
			"Syntax": "**DOM SET XML DECLARATION** ( *elementRef* ; *codificacion* {; *autonomo* {; *indentacion*}} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"codificacion",
					"Text",
					"->",
					"Conjunto de caracteres del documento XML"
				],
				[
					"autonomo",
					"Boolean",
					"->",
					"True = el documento es autónomo False (por defecto) = el documento no es autónomo"
				],
				[
					"indentacion",
					"Boolean",
					"->",
					"** Obsoleto no utilizar **"
				]
			],
			"Summary": "El comando DOM SET XML DECLARATION permite definir diferentes opciones que útiles en la creación del árbol XML designado por *elementRef*."
		},
		"DOM SET XML ELEMENT NAME": {
			"Syntax": "**DOM SET XML ELEMENT NAME** ( *elementRef* ; *nomElement* )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"nomElement",
					"Text",
					"->",
					"Nuevo nombre del elemento"
				]
			],
			"Summary": "El comando DOM SET XML ELEMENT NAME  permite modificar el nombre del elemento designado por *refElement*."
		},
		"DOM SET XML ELEMENT VALUE": {
			"Syntax": "**DOM SET XML ELEMENT VALUE** ( *elementRef* {; *xRuta*}; *valorElement* {; *} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"xRuta",
					"Text",
					"->",
					"Ruta XPath del elemento XML"
				],
				[
					"valorElement",
					"Text, Variable",
					"->",
					"Nuevo valor del elemento"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: definir el valor en CDATA"
				]
			],
			"Summary": "El comando DOM SET XML ELEMENT VALUE le permite modificar el valor del elemento definido por *refElement*."
		},
		"DRAG WINDOW": {
			"Syntax": "**DRAG WINDOW**",
			"Params": [],
			"Summary": "El comando DRAG WINDOW permite arrastrar la ventana en la cual el usuario hace clic para desplazarla en función de los movimientos del ratón."
		},
		"Drop position": {
			"Syntax": "**Drop position** {( colNum | posXImagen )} : Integer",
			"Params": [
				[
					"colNum &#124; posXImagen",
					"Entero largo",
					"<-",
					"Número de columna del list box (-1 si el soltar ocurre más allá de la última columna)o <br/>Posición coordenada X en la imagen"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número (array/ list box) o posición (lista jerárquica) o Posición en cadena (texto/combo box) o elemento de destino o -1 si soltar ocurrió más allá del último elemento del array o de la lista"
				]
			],
			"Summary": "El comando Drop position puede utilizarse para descubrir la ubicación, en un objeto de destino “complejo”, donde un objeto ha sido (arrastrado y) soltado."
		},
		"DROP REMOTE USER": {
			"Syntax": "**DROP REMOTE USER** ( *sesionUsuario* )",
			"Params": [
				[
					"sesionUsuario",
					"Text",
					"->",
					"ID de sesión del usuario"
				]
			],
			"Summary": "El comando **DROP REMOTE USER** desconecta a un usuario específico conectado remotamente al servidor 4D."
		},
		"DUPLICATE RECORD": {
			"Syntax": "**DUPLICATE RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro actual a duplicar o Tabla por defecto, si se omite"
				]
			],
			"Summary": "DUPLICATE RECORD crea un nuevo registro para *tabla* que es un duplicado del registro actual."
		},
		"Dynamic pop up menu": {
			"Syntax": "**Dynamic pop up menu** ( *menu* {; *pordefecto* {; *CoordX* ; *CoordY*}} )  : Text",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"Referencia de menú"
				],
				[
					"pordefecto",
					"Text",
					"->",
					"Parámetro del elemento seleccionado por defecto"
				],
				[
					"CoordX",
					"Integer",
					"->",
					"Coordenada X de la esquina superior izquierda"
				],
				[
					"CoordY",
					"Integer",
					"->",
					"Coordenada Y de la esquina superior izquierda"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Parámetro del elemento de menú seleccionado"
				]
			],
			"Summary": "El comando **Dynamic pop up menu** hace aparecer un menú desplegable jerárquico en la ubicación actual del ratón o en la ubicación definida por los parámetros opcionales *Coordx* y *Coordy*."
		},
		"EDIT ACCESS": {
			"Syntax": "**EDIT ACCESS**",
			"Params": [],
			"Summary": "EDIT ACCESS permite modificar el sistema de contraseñas."
		},
		"EDIT FORMULA": {
			"Syntax": "**EDIT FORMULA** ( *tabla* ; *formula* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a mostrar por defecto en el editor de fórmulas"
				],
				[
					"formula",
					"Text",
					"->",
					"Variable que contiene la fórmula a mostrar en el editor de fórmulas o \"\" para mostrar sólo el editor"
				],
				[
					"<-",
					"Fórmula validada por el usuario"
				]
			],
			"Summary": "El comando EDIT FORMULA muestra el editor de fórmulas con el fin de permitir al usuario escribir o modificar una fórmula."
		},
		"EDIT ITEM": {
			"Syntax": "**EDIT ITEM** ( {* ;} *objeto* {; *elemento*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una tabla o variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Tabla o variable (si se omite *)"
				],
				[
					"elemento",
					"Integer",
					"->",
					"Número de elemento"
				]
			],
			"Summary": "El comando **EDIT ITEM** le permite editar el elemento actual o el elemento de número *elemento* del array o la lista designada por el parámetro *objeto*."
		},
		"ENABLE MENU ITEM": {
			"Syntax": "**ENABLE MENU ITEM** ( *menu* ; *lineamenu* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia del menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				]
			],
			"Summary": "El comando ENABLE MENU ITEM activa el comando de menú cuyo número o referencia de menú y número de elemento usted pasó en *menu* y *menuItem*."
		},
		"ENCRYPT BLOB": {
			"Syntax": "**ENCRYPT BLOB** ( *aCifrar* ; *enviarLlavePriv* {; *recepLlavePub*} )",
			"Params": [
				[
					"aCifrar",
					"Blob",
					"<->",
					"Datos a cifrar"
				],
				[
					"",
					"",
					"",
					"Datos cifrados"
				],
				[
					"enviarLlavePriv",
					"Blob",
					"->",
					"Llave privada del emisor"
				],
				[
					"recepLlavePub",
					"Blob",
					"->",
					"Llave pública del receptor"
				]
			],
			"Summary": "El comando ENCRYPT BLOB cifra el contenido del BLOB *aCifrar* con la ayuda de la llave privada del emisor *enviarLlavePriv*, así como también opcionalmente la llave pública del receptor *recepLlavePub*."
		},
		"Encrypt data BLOB": {
			"Syntax": "**Encrypt data BLOB** ( *blobAEncriptar* ; objetoLlave | frasePasar ; *sal* ; *blobEncriptado* ) : Boolean",
			"Params": [
				[
					"blobAEncriptar",
					"Blob",
					"->",
					"BLOB a encriptar"
				],
				[
					"objetoLlave &#124; frasePasar",
					"Objeto, Texto",
					"->",
					"Objeto JSON que contiene la llave de cifrado o la frase de paso para la generación directa de la llave de cifrado (texto)"
				],
				[
					"sal",
					"Integer",
					"->",
					"Sal adicional para el algoritmo"
				],
				[
					"blobEncriptado",
					"Blob",
					"<-",
					"BLOB Encriptado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la encriptación se ha realizado correctamente, False en caso contrario"
				]
			],
			"Summary": "El comando **Encrypt data BLOB** encripta el parámetro *blobAEncriptar* con el mismo algoritmo que 4D utiliza para encriptar datos (AES-256) y devuelve el resultado en *blobEncriptado*."
		},
		"Encrypt data file": {
			"Syntax": "**Encrypt data file** ( *rutaEstruct* ; *rutaDatos* {; newPassPhrase | newDataKey {; *carpetaArchivo* {; curPassPhrase | curDataKey {; *nomMetod*}}}} ) : Text",
			"Params": [
				[
					"rutaEstruct",
					"Text",
					"->",
					"Nombre de ruta del archivo de estructura"
				],
				[
					"rutaDatos",
					"Text",
					"->",
					"Nombre de ruta del archivo de datos a cifrar"
				],
				[
					"newPassPhrase &#124; newDataKey",
					"Texto, Objeto",
					"->",
					"En caso de reemplazo: nueva passPhrase (texto) o nueva llave de cifrado (objeto)"
				],
				[
					"carpetaArchivo",
					"Text",
					"->",
					"Nombre de ruta de la carpeta donde se guardarán los archivos originales"
				],
				[
					"curPassPhrase &#124; curDataKey",
					"Texto, Objeto",
					"->",
					"passPhrase actual (texto) o llave de encripción actual(objeto)"
				],
				[
					"nomMetod",
					"Text",
					"->",
					"Nombre del método de retrollamada 4D"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre completo de la carpeta donde se guardaron los archivos originales"
				]
			],
			"Summary": "El comando **Encrypt data file** se utiliza para cifrar o volver a cifrar el archivo de datos designado por el parámetro *rutaDatos* asociado al parámetro *rutaEstructura*."
		},
		"End selection": {
			"Syntax": "**End selection** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual probar si el puntero del registro está más allá del último registro seleccionado, o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Si (TRUE) o No (FALSE)"
				]
			],
			"Summary": "**End selection** devuelve TRUE cuando el puntero del registro actual está más allá del último registro de la selección actual de *tabla*."
		},
		"End SQL": {
			"Syntax": "**End SQL**",
			"Params": [],
			"Summary": "End SQL es una palabra clave que indica el fin de una secuencia de comandos SQL en el editor de métodos que debe ser interpretada por el motor SQL integrado de 4D."
		},
		"Equal pictures": {
			"Syntax": "**Equal pictures** ( *imagen1* ; *imagen2* ; *mascara* ) : Boolean",
			"Params": [
				[
					"imagen1",
					"Picture, Picture",
					"->",
					"Imagen fuente original"
				],
				[
					"imagen2",
					"Picture, Picture",
					"->",
					"Imagen a comparar"
				],
				[
					"mascara",
					"Picture, Picture",
					"<-",
					"Máscara resultante"
				],
				[
					"resultado",
					"Boolean",
					"<-",
					"True si ambas imágenes son idénticas; de lo contrario, False"
				]
			],
			"Summary": "El comando **Equal pictures** compara con precisión las dimensiones y el contenido de dos imágenes."
		},
		"ERASE WINDOW": {
			"Syntax": "**ERASE WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de ventana o Ventana del primer plano del proceso actual, si se omite"
				]
			],
			"Summary": "El comando ERASE WINDOW borra el contenido de la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"Euro converter": {
			"Syntax": "**Euro converter** ( *valor* ; *deMoneda* ; *aMoneda* ) : Real",
			"Params": [
				[
					"valor",
					"Real",
					"->",
					"Valor a convertir"
				],
				[
					"deMoneda",
					"Text",
					"->",
					"Código de la moneda en que está expresado el valor"
				],
				[
					"aMoneda",
					"Text",
					"->",
					"Código de la moneda a la que debe convertirse el valor"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor convertido"
				]
			],
			"Summary": "El comando Euro converter permite efectuar todo tipo de conversión de valores entre las diferentes monedas de países que pertenecen a la “Zona Euro” y al Euro mismo."
		},
		"EXECUTE FORMULA": {
			"Syntax": "**EXECUTE FORMULA** ( *instruccion* )",
			"Params": [
				[
					"instruccion",
					"Text",
					"->",
					"Código a ejecutar"
				]
			],
			"Summary": "**EXECUTE FORMULA** ejecuta *instruccion* como una línea de código."
		},
		"EXECUTE METHOD IN SUBFORM": {
			"Syntax": "**EXECUTE METHOD IN SUBFORM** ( *objetoSubForm* ; *nomMetodo* {; *retorno* {; *param*} {; *param2* ; ... ; *paramN*}} )",
			"Params": [
				[
					"objetoSubForm",
					"Text",
					"->",
					"Nombre del objeto subformulario"
				],
				[
					"nomMetodo",
					"Object, Text",
					"->",
					"Nombre del método proyecto a ejecutar"
				],
				[
					"retorno",
					"*, Variable",
					"->",
					"* si el método no devuelve un valor"
				],
				[
					"<-",
					"Valor devuelto por el método"
				],
				[
					"param",
					"Expression",
					"->",
					"Parámetro(s)a pasar al método"
				]
			],
			"Summary": "El comando EXECUTE METHOD IN SUBFORM permite ejecutar el código desigando por *formula* en el contexto del subformulario *objetoSubform*."
		},
		"EXECUTE METHOD": {
			"Syntax": "**EXECUTE METHOD** ( *nomMetodo* {; *result* {; *param*}}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"nomMetodo",
					"Text",
					"->",
					"Nombre del método de proyecto a ejecutar"
				],
				[
					"result",
					"Variable, *",
					"<-",
					"Variable que recibe el resultado del método * para un método que no devuelve un resultado"
				],
				[
					"param",
					"Expression",
					"->",
					"Parámetro(s) del método"
				]
			],
			"Summary": "El comando EXECUTE METHOD provoca la ejecución del método de proyecto *nomMetodo* pasando los parámetros en *param1."
		},
		"EXECUTE ON CLIENT": {
			"Syntax": "**EXECUTE ON CLIENT** ( *nomCliente* ; *nomMetodo* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"nomCliente",
					"Text",
					"->",
					"Nombre registrado de 4D Client"
				],
				[
					"nomMetodo",
					"Text",
					"->",
					"Nombre del método a ejecutar"
				],
				[
					"param",
					"->",
					"Parámetro(s) del método"
				]
			],
			"Summary": "El comando EXECUTE ON CLIENT provoca la ejecución del método *nomMetodo*, con los parámetros *param1."
		},
		"Execute on server": {
			"Syntax": "**Execute on server** ( *proced* ; *pila* {; *nombre* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"proced",
					"Text",
					"->",
					"Procedimiento a ejecutar en el proceso"
				],
				[
					"pila",
					"Integer",
					"->",
					"Tamaño de la pila en bytes"
				],
				[
					"nombre",
					"Text",
					"->",
					"Nombre del proceso creado"
				],
				[
					"param",
					"Expression",
					"->",
					"Paramétro(s) del procedimiento"
				],
				[
					"*",
					"Operador",
					"->",
					"Proceso único"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de proceso para el proceso creado recientemente o de un proceso que está siendo ejecutado"
				]
			],
			"Summary": "El comando Execute on server inicia un nuevo proceso en el equipo servidor (cuando se llama en Cliente/Servidor) o en el mismo equipo (si se llama en monousuario) y devuelve el número de este proceso."
		},
		"Exp": {
			"Syntax": "**Exp** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número a evaluar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Exponencial del número"
				]
			],
			"Summary": "Exp devuelve el exponencial (e = 2.71828...) de *número*."
		},
		"EXPAND BLOB": {
			"Syntax": "**EXPAND BLOB** ( *BLOB* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a descomprimir"
				]
			],
			"Summary": "El comando EXPAND BLOB descomprime el BLOB *blob* que fue previamente comprimido utilizando el comando COMPRESS BLOB."
		},
		"EXPORT DATA": {
			"Syntax": "**EXPORT DATA** ( *nomArchivo* {; *proyecto* {; *}} )",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Ruta de acceso y nombre del archivo a exportar"
				],
				[
					"proyecto",
					"Text, Blob",
					"->",
					"Contenido del proyecto de exportación"
				],
				[
					"<-",
					"Nuevo contenido del proyecto de exportación (si se  pasa el parámetro *)"
				],
				[
					"*",
					"Operador",
					"->",
					"Visualización de la caja de diálogo de exportación y actualización del proyecto"
				]
			],
			"Summary": "El comando EXPORT DATA exportar datos en el archivo *nomArchivo*."
		},
		"EXPORT DIF": {
			"Syntax": "**EXPORT DIF** ( {*tabla* ;} *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual exportar datos, o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento DIF para recibir los datos"
				]
			],
			"Summary": "El comando EXPORT DIF  escribe los datos de los registros de la selección actual de *tabla* en el proceso actual."
		},
		"Export structure file": {
			"Syntax": "**Export structure file** ( *rutaCarpeta* {; *opciones*} ) : Object",
			"Params": [
				[
					"rutaCarpeta",
					"Text",
					"->",
					"Ruta de la carpeta de destino para archivos de proyecto"
				],
				[
					"opciones",
					"Object",
					"->",
					"Opciones de exportar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de validación y mensajes (si los hay)"
				]
			],
			"Summary": "El comando **Export structure file** divide la estructura actual de la base 4D en un conjunto de archivos de texto o archivos de imagen nativos y los almacena en la *rutaCarpeta* especificada."
		},
		"EXPORT STRUCTURE": {
			"Syntax": "**EXPORT STRUCTURE** ( *estructuraXML* {; *format*} )",
			"Params": [
				[
					"estructuraXML",
					"Text",
					"<-",
					"Exportación de la definición XML de la estructura de la base 4D"
				],
				[
					"format",
					"Text",
					"->",
					"Export format: xml format (default) or html format"
				]
			],
			"Summary": "El comando **EXPORT STRUCTURE** exporta la definición de la estructura de la base 4D actual en *estructuraE* *xportada*."
		},
		"EXPORT SYLK": {
			"Syntax": "**EXPORT SYLK** ( {*tabla* ;} *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual exportar datos, o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento SYLK para recibir los datos"
				]
			],
			"Summary": "El comando **EXPORT SYLK** escribe los datos de los registros de la selección actual de *tabla* en el proceso actual."
		},
		"EXPORT TEXT": {
			"Syntax": "**EXPORT TEXT** ( {*tabla* ;} *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla desde la cual exportar datos o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento texto para recibir los datos"
				]
			],
			"Summary": "El comando EXPORT TEXT escribe datos de los registros de la selección actual de la *tabla* en el proceso actual."
		},
		"False": {
			"Syntax": "**False**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"False"
				]
			],
			"Summary": "False devuelve el valor booleano Falso (False)."
		},
		"Field name": {
			"Syntax": "**Field name** ( *campPtr* ) : Text<br/>**Field name** ( *numTabla* ; *numCamp* ) : Text",
			"Params": [
				[
					"campPtr &#124; tablaNum",
					"Puntero, Entero largo",
					"->",
					"Puntero a un campo o número de tabla"
				],
				[
					"numCamp",
					"Integer",
					"->",
					"Número de campo si se pasa un número de tabla como primer parámetro"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del campo"
				]
			],
			"Summary": "El comando Field name devuelve el nombre del campo cuyo puntero se pasa en *campPtr* o cuyos números de tabla y de campos se pasan en *tablaNum* y *campNum*."
		},
		"Field": {
			"Syntax": "**Field** ( *numTabla* ; *numCamp* ) -> Resultado <br/>\n**Field** ( *ptrCamp* ) -> numCampo",
			"Params": [
				[
					"numTabla",
					"Integer",
					"->",
					"Número de tabla"
				],
				[
					"numCamp",
					"Integer",
					"->",
					"Número de campo"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero de campo"
				],
				[
					"Field ( ptrCamp ) -> numCampo"
				],
				[
					"Parámetro",
					"Tipo",
					"Descripción"
				],
				[
					"ptrCamp",
					"Pointer",
					"->",
					"Puntero del campo"
				],
				[
					"numCampo",
					"Integer",
					"<-",
					"Número de campo"
				]
			],
			"Summary": "El comando Field tiene dos sintaxis: \n\n* Si pasa un número de tabla en *numTabla* y un número de campo en *numCampo*, Field devuelve un puntero al campo."
		},
		"FILTER EVENT": {
			"Syntax": "**FILTER EVENT**",
			"Params": [],
			"Summary": "Llame al comando **FILTER EVENT** desde el interior del método de gestión de eventos instalado utilizando el comando ON EVENT CALL."
		},
		"FILTER KEYSTROKE": {
			"Syntax": "**FILTER KEYSTROKE** ( *carFiltro* )",
			"Params": [
				[
					"carFiltro",
					"Text",
					"->",
					"Carácter de filtrado de tecleo o Cadena vacía para cancelar el filtrado"
				]
			],
			"Summary": "FILTER KEYSTROKE permite reemplazar el carácter introducido por el usuario en un campo o en un área editable por el primer carácter de la cadena *carFiltro*."
		},
		"Find in array": {
			"Syntax": "**Find in array** ( *array* ; *valor* {; *inicio*} ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a buscar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor del mismo tipo a buscar en el array"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Elemento a partir del cual comenzar la búsqueda"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número del primer elemento en el array que corresponde al valor"
				]
			],
			"Summary": "El comando Find in array devuelve el número del primer elemento del *array* que corresponde a *valor*."
		},
		"Find in field": {
			"Syntax": "**Find in field** ( *campoObjetivo* ; *valor* ) : Integer",
			"Params": [
				[
					"campoObjetivo",
					"Field",
					"->",
					"Campo objetivo en el cual ejecutar la búsqueda."
				],
				[
					"valor",
					"Field, Variable",
					"->",
					"Valor a buscar"
				],
				[
					"<-",
					"Valor encontrado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número del registro encontrado o -1 si no se encontró ningún registro"
				]
			],
			"Summary": "El comando Find in field devuelve el número del primer registro cuyo *campoObjetivo* es igual a *valor*."
		},
		"Find in list": {
			"Syntax": "**Find in list** ( {* ;} *lista* ; *valor* ; *alcance* {; *arrayElem* {; *}} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de la lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"valor",
					"Text",
					"->",
					"Valor a buscar"
				],
				[
					"alcance",
					"Integer",
					"->",
					"0=Lista principal, 1=Sublista"
				],
				[
					"arrayElem",
					"Integer array",
					"<-",
					"- Si se omite el 2do *: array de posiciones de los elementos encontrados - Si se pasa el segundo *: array de números de referencia de  los elementos encontrados"
				],
				[
					"*",
					"Operador",
					"->",
					"- Si se omite: utiliza la posición de los elementos - Si se pasa: utiliza el número de referencia de los elementos"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"- Si se omite el 2do *: posición del elemento encontrado - Si se pasa 2do *: número de referencia del elemento encontrado"
				]
			],
			"Summary": "El comando Find in list devuelve la posición o referencia del primer elemento de la *lista* que es equivalente a la cadena pasada en *valor*."
		},
		"Find in sorted array": {
			"Syntax": "**Find in sorted array** ( *array* ; *valor* ; > or < {; *posPrim* {; *posUlt*}} ) : Boolean",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array a buscar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Valor del mismo tipo a buscar en el array"
				],
				[
					"> or <",
					"Operador",
					"->",
					"> si el array está en orden ascendente, < si el está en orden descendente"
				],
				[
					"posPrim",
					"Integer",
					"<-",
					"Posición de su primera aparición si se encuentra el valor; de lo contrario la posición donde debe insertarse el valor"
				],
				[
					"posUlt",
					"Integer",
					"<-",
					"Posición de su última ocurrencia si se encuentra el valor; de lo contrario lo mismo que posPrim"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si al menos un elemento en el array corresponde al valor, de lo contrario False"
				]
			],
			"Summary": "**Tema:** Arrays\n\nEl nuevo comando **Find in sorted array** devuelve **true** si al menos un elemento en el *array* ordenado con el *valor* y opcionalmente devuelve la posición de los elementos correspondientes."
		},
		"Find window": {
			"Syntax": "**Find window** ( *izquierda* ; *superior* {; *parteVentana*} ) : Integer",
			"Params": [
				[
					"izquierda",
					"Integer",
					"->",
					"Coordenada global izquierda"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada global superior"
				],
				[
					"parteVentana",
					"Integer",
					"<-",
					"Número de parte de ventana"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de la ventana"
				]
			],
			"Summary": "El comando Find windowdevuelve (si existe) el número de referencia de la primera ventana “tocada” por el punto cuyas coordenadas se pasan en *izquierda* y *superior*."
		},
		"FIRST RECORD": {
			"Syntax": "**FIRST RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual cargar el primer registro de la selección actual o Tabla por defecto si se omite"
				]
			],
			"Summary": "FIRST RECORD hace del primer registro de la selección actual de *tabla* el registro actual y carga el registro del disco."
		},
		"FLUSH CACHE": {
			"Syntax": "**FLUSH CACHE** {( tam | *  )}",
			"Params": [
				[
					"tam &#124; *",
					"Real, Operador",
					"->",
					"* para liberar la memoria caché completamente, o número de bytes a liberar en la caché"
				]
			],
			"Summary": "El comando FLUSH CACHE guarda inmediatamente los buffers de datos en el disco."
		},
		"Focus object": {
			"Syntax": "**Focus object**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero al objeto que tiene el foco"
				]
			],
			"Summary": "Este comando sólo se conserva por razones de compatibilidad."
		},
		"FOLDER LIST": {
			"Syntax": "**FOLDER LIST** ( *nombreRuta* ; *directorios* )",
			"Params": [
				[
					"nombreRuta",
					"Text",
					"->",
					"Ruta de acceso del volumen, directorio o carpeta"
				],
				[
					"directorios",
					"Text array",
					"<-",
					"Nombres de los directorios presentes en esta ubicación"
				]
			],
			"Summary": "El comando FOLDER LIST llena el array de tipo Texto o Alfa *directorios* con los nombres de las carpetas ubicadas en la ruta de acceso que se pasa en *rutaAcceso*."
		},
		"Font file": {
			"Syntax": "**Font file** ( *familiaFuente* {; *estiloFuente*} ) : any",
			"Params": [
				[
					"familiaFuente",
					"Text",
					"->",
					"Nombre de la familia de fuente"
				],
				[
					"estiloFuente",
					"Integer",
					"->",
					"Estilo de fuente: 0=normal (por defecto), 1=negrita, 2=itálica"
				],
				[
					"Resultado",
					"Null, Object",
					"<-",
					"Objeto archivo fuente"
				]
			],
			"Summary": "El comando **Font file** devuelve un objeto que describe el archivo de fuente de su sistema operativo correspondiente a *familiaFuente* y, opcionalmente, a *estilofuente* pasado en el parámetro."
		},
		"FONT LIST": {
			"Syntax": "**FONT LIST** ( *fuentes* {; *tipoLista*} )",
			"Params": [
				[
					"fuentes",
					"Text array",
					"<-",
					"Array de nombres de fuentes disponibles"
				],
				[
					"tipoLista",
					"Integer, *",
					"->",
					"Tipo de lista de fuente a devolver o * para devolver los nombres de fuente en macOS"
				]
			],
			"Summary": "El comando FONT LIST llena el array Texto *fuentes* con los nombres de las fuentes vectoriales disponibles en su sistema."
		},
		"FONT STYLE LIST": {
			"Syntax": "**FONT STYLE LIST** ( *familiaFuiente* ; *listaEstilosFuente* ; *listaNomsFuente* )",
			"Params": [
				[
					"familiaFuiente",
					"Text",
					"->",
					"Nombre de la familia de fuente"
				],
				[
					"listaEstilosFuente",
					"Text array",
					"<-",
					"Lista de estilos fuente soportados por la familia de fuente"
				],
				[
					"listaNomsFuente",
					"Text array",
					"<-",
					"Lista de nombres completos soportados por la familia de fuente"
				]
			],
			"Summary": "El comando **FONT STYLE LIST** devuelve la lista de estilos y la lista de nombres completos soportados por la familia de fuente designada por el parámetro *familiaFuente*."
		},
		"FORM Convert to dynamic": {
			"Syntax": "**FORM Convert to dynamic** ( {*tabla* ;} *nomFormulario* ) : Object",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de formulario"
				],
				[
					"nomFormulario",
					"Text",
					"->",
					"Nombre de un proyecto \"clásico\" o formulario tabla"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"nomFormulario convertido a formulario dinámico"
				]
			],
			"Summary": "El comando **FORM Convert to dynamic** convierte el *nomFormulario* (formulario clásico) a un formulario dinámico y lo devuelve en un objeto."
		},
		"FORM FIRST PAGE": {
			"Syntax": "**FORM FIRST PAGE**",
			"Params": [],
			"Summary": "FORM FIRST PAGE cambia la página actual del formulario por la primera página del formulario."
		},
		"FORM Get color scheme": {
			"Syntax": "**FORM Get color scheme**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Esquema de colores del formulario actual: \"claro\" u \"oscuro\""
				]
			],
			"Summary": "El comando **FORM Get color scheme** devuelve el nombre de la combinación de colores actual del formulario mostrado actualmente."
		},
		"FORM Get current page": {
			"Syntax": "**FORM Get current page** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devuelve el número de página de subformulario actual"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de la página del formulario mostrada actualmente"
				]
			],
			"Summary": "El comando **FORM Get current page** devuelve el número de la página actual del formulario mostrada actualmente o del formulario actual cargado vía el comando FORM LOAD."
		},
		"FORM GET ENTRY ORDER": {
			"Syntax": "**FORM GET ENTRY ORDER** ( *nomObjetos* {; numPag | * } )",
			"Params": [
				[
					"nomObjetos",
					"Text array",
					"<-",
					"Nombres de objetos ordenados por orden de entrada"
				],
				[
					"numPag &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de la página para la que se obtiene el orden de entrada definido (página actual si se omite), o  * para obtener el orden de entrada real de la página actual"
				]
			],
			"Summary": "El comando **FORM GET ENTRY ORDER** devuelve en *nomObjetos* los nombres ordenados de los objetos que definen el orden de entrada del formulario."
		},
		"FORM GET HORIZONTAL RESIZING": {
			"Syntax": "**FORM GET HORIZONTAL RESIZING** ( *redimension* {; *anchoMin* {; *anchoMax*}} )",
			"Params": [
				[
					"redimension",
					"Boolean",
					"<-",
					"True: el formulario es redimensionable horizontalmente<br/>False: el formulario no es redimensionable horizontalmente"
				],
				[
					"anchoMin",
					"Integer",
					"<-",
					"Ancho mínimo del formulario (píxeles)"
				],
				[
					"anchoMax",
					"Integer",
					"<-",
					"Ancho máximo del formulario (píxeles)"
				]
			],
			"Summary": "El comando FORM GET HORIZONTAL RESIZING devuelve las propiedades de redimensionamiento horizontal del formulario actual en las variables *redimension*, *anchoMin* y *anchoMax*."
		},
		"FORM GET NAMES": {
			"Syntax": "**FORM GET NAMES** ( {*tabla* ;} *arrayNoms* {; *filtro* {; *marcador*}}{; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Referencia de tabla"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Array de nombres de formulario"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de nombres"
				],
				[
					"marcador",
					"Real",
					"->",
					"Marcador para versión mínima a devolver"
				],
				[
					"<-",
					"Nuevo valor"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **FORM GET NAMES** llena el array *arrayNoms* con los nombres de los formularios de la aplicación."
		},
		"FORM GET OBJECTS": {
			"Syntax": "**FORM GET OBJECTS** ( *arrObjetos* {; *arrVariables* {; *arrPags*}} {; *opcionPag*} )",
			"Params": [
				[
					"arrObjetos",
					"Text array",
					"<-",
					"Nombre de los objetos del formulario"
				],
				[
					"arrVariables",
					"Pointer array",
					"<-",
					"Punteros a variables o campos asociados a los objetos"
				],
				[
					"arrPags",
					"Array integer",
					"<-",
					"Número de página de cada objeto"
				],
				[
					"opcionPag",
					"Integer, *",
					"->",
					"1=Página actual del formulario, 2=Todas las páginas, 4=Páginas heredadas<br/>Si se pasa * (obsoleto) = página actual con objetos heredados"
				]
			],
			"Summary": "El comando FORM GET OBJECTS devuelve en forma de array(s) la lista de todos los objetos presentes en el formulario actual."
		},
		"FORM GET PROPERTIES": {
			"Syntax": "**FORM GET PROPERTIES** ( {*tabla* ;} *nomForm* ; *ancho* ; *alto* {; *numPags* {; *largoFijo* {; *altFijo* {; *titulo*}}}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del formulario o tabla por defecto, si se omite"
				],
				[
					"nomForm",
					"Text",
					"->",
					"Nombre del formulario"
				],
				[
					"ancho",
					"Integer",
					"<-",
					"Ancho del formulario (en píxeles)"
				],
				[
					"alto",
					"Integer",
					"<-",
					"Altura del formulario (en píxeles)"
				],
				[
					"numPags",
					"Integer",
					"<-",
					"Número de páginas en el formulario"
				],
				[
					"largoFijo",
					"Boolean",
					"<-",
					"Verdadero = Ancho fijo, Falso = Ancho variable"
				],
				[
					"altFijo",
					"Boolean",
					"<-",
					"Verdadero = Altura fija, Falso = Altura variable"
				],
				[
					"titulo",
					"Text",
					"<-",
					"Título de la ventana del formulario"
				]
			],
			"Summary": "El comando \\[#current\\_title devuelve las propiedades del formulario *nomForm*."
		},
		"FORM GET VERTICAL RESIZING": {
			"Syntax": "**FORM GET VERTICAL RESIZING** ( *redimension* {; *alturaMin* {; *alturaMax*}} )",
			"Params": [
				[
					"redimension",
					"Boolean",
					"<-",
					"True: el formulario es redimensionable verticalmente<br/>False: el formulario no es redimensionable verticalmente"
				],
				[
					"alturaMin",
					"Integer",
					"<-",
					"Altura mínima del formulario (píxeles)"
				],
				[
					"alturaMax",
					"Integer",
					"<-",
					"Altura máxima del formulario (píxeles)"
				]
			],
			"Summary": "El comando FORM GET VERTICAL RESIZING devuelve las propiedades de redimensionamiento vertical del formulario actual en las variables *redimension*, *alturaMin* y *alturaMax*."
		},
		"FORM GOTO PAGE": {
			"Syntax": "**FORM GOTO PAGE** ( *numPag* {; *} )",
			"Params": [
				[
					"numPag",
					"Integer",
					"->",
					"Número de la página a mostrar"
				],
				[
					"*",
					"Operador",
					"->",
					"Cambia la página del subformulario actual"
				]
			],
			"Summary": "**FORM GOTO PAGE** cambia la página actual de un formulario para mostrar la página especificada por *numPag*."
		},
		"FORM LAST PAGE": {
			"Syntax": "**FORM LAST PAGE**",
			"Params": [],
			"Summary": "FORM LAST PAGE cambia la página actual de un formulario para mostrar la última página del formulario."
		},
		"FORM NEXT PAGE": {
			"Syntax": "**FORM NEXT PAGE**",
			"Params": [],
			"Summary": "FORM NEXT PAGE cambia la página actual del formulario para mostrar la página siguiente."
		},
		"FORM PREVIOUS PAGE": {
			"Syntax": "**FORM PREVIOUS PAGE**",
			"Params": [],
			"Summary": "FORM PREVIOUS PAGE cambia la página actual de un formulario para mostrar la página anterior."
		},
		"FORM SCREENSHOT": {
			"Syntax": "**FORM SCREENSHOT** ( {{*tabla* ;} *nomForm* ;} *imagForm* {; *pagNum*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del formulario"
				],
				[
					"nomForm",
					"Text",
					"->",
					"Nombre del formulario"
				],
				[
					"imagForm",
					"Picture",
					"<-",
					"Imagen del formulario en ejecución si el primer parámetro se omite, o <br/>Imagen del formulario en el editor de formularios si se pasa un nombre de formulario"
				],
				[
					"pagNum",
					"Integer",
					"->",
					"Número de página del formulario"
				]
			],
			"Summary": "El comando **FORM SCREENSHOT** devuelve un formulario en forma de imagen."
		},
		"FORM SET ENTRY ORDER": {
			"Syntax": "**FORM SET ENTRY ORDER** ( *nomObjetos* {; *numPag*} )",
			"Params": [
				[
					"nomObjetos",
					"Text array",
					"->",
					"Array de nombres de objetos en su orden de entrada esperado"
				],
				[
					"numPag",
					"Integer",
					"->",
					"Número de la página para definir el orden de entrada (página actual si se omite)"
				]
			],
			"Summary": "El comando **FORM SET ENTRY ORDER** permite definir dinámicamente el orden de entrada del formulario actual para el proceso actual basado en el array *nomObjetos*."
		},
		"FORM SET HORIZONTAL RESIZING": {
			"Syntax": "**FORM SET HORIZONTAL RESIZING** ( *redimension* {; *anchoMin* {; *anchoMax*}} )",
			"Params": [
				[
					"redimension",
					"Boolean",
					"->",
					"True: el formulario es redimensionable horizontalmente False: El formulario no puede redimensionarse horizontalmente"
				],
				[
					"anchoMin",
					"Integer",
					"->",
					"ancho mínimo del formulario (píxeles)"
				],
				[
					"anchoMax",
					"Integer",
					"->",
					"ancho máximo del formulario (píxeles)"
				]
			],
			"Summary": "El comando FORM SET HORIZONTAL RESIZING permite cambiar por programación las propiedades de redimensionamiento horizontal del formulario actual."
		},
		"FORM SET INPUT": {
			"Syntax": "**FORM SET INPUT** ( {*tabla* ;} *form* {; *formUsuario* {; *}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual definir el formulario de entrada o Tabla por defecto, si se omite"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Nombre del formulario a definir como formulario de entrada"
				],
				[
					"formUsuario",
					"Text",
					"->",
					"Nombre del formulario usuario a utilizar"
				],
				[
					"*",
					"Operator",
					"->",
					"Tamaño de ventana automático"
				]
			],
			"Summary": "El comando FORM SET INPUT define el formulario de entrada actual de *tabla* para *form* o *formUsuario*."
		},
		"FORM SET OUTPUT": {
			"Syntax": "**FORM SET OUTPUT** ( {*tabla* ;} *form* {; *formUsuario*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual definir el formulario de salida, o Tabla por defecto, si se omite"
				],
				[
					"form",
					"Text, Object",
					"->",
					"Nombre del formulario"
				],
				[
					"formUsuario",
					"Text",
					"->",
					"Nombre del formulario usuario a utilizar"
				]
			],
			"Summary": "El comando **FORM SET OUTPUT** define el formulario de salida actual de *formulario* o *formUsuario*."
		},
		"FORM SET SIZE": {
			"Syntax": "**FORM SET SIZE** ( {*objeto* ;} *horizontal* ; *vertical* {; *} )",
			"Params": [
				[
					"objeto",
					"Text",
					"->",
					"Nombre del objeto que indica los límites del formulario"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"Si se pasa *: margen horizontal (píxeles) Si se omite *: ancho (píxeles)"
				],
				[
					"vertical",
					"Integer",
					"->",
					"Si se pasa *: margen vertical (píxeles) Si se omite *: altura (píxeles)"
				],
				[
					"*",
					"Operador",
					"->",
					"• Si se pasa: añadir las márgenes definidas por los parámetros horizontal y vertical (tamaño automático o basado en un objeto, si se pasa un objeto) • Si se omite: utilizar horizontal y vertical como ancho y altura del formulario"
				]
			],
			"Summary": "El comando FORM SET SIZE le permite cambiar el tamaño del formulario actual por programación."
		},
		"FORM SET VERTICAL RESIZING": {
			"Syntax": "**FORM SET VERTICAL RESIZING** ( *redimension* {; *alturaMin* {; *alturaMax*}} )",
			"Params": [
				[
					"redimension",
					"Boolean",
					"->",
					"True: el formulario es redimensionable verticalmente False: el formulario no puede ser redimensionado verticalmente"
				],
				[
					"alturaMin",
					"Integer",
					"->",
					"Altura mínima del formulario (píxeles)"
				],
				[
					"alturaMax",
					"Integer",
					"->",
					"Altura máxima del formulario (píxeles)"
				]
			],
			"Summary": "El comando FORM SET VERTICAL RESIZING le permite modificar por programación las propiedades de redimensionamiento vertical del formulario actual."
		},
		"FORM UNLOAD": {
			"Syntax": "**FORM UNLOAD**",
			"Params": [],
			"Summary": "El comando **FORM UNLOAD** libera de la memoria el formulario actual designado utilizando el comando FORM LOAD."
		},
		"Frontmost process": {
			"Syntax": "**Frontmost process** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Número del proceso de la primera ventana no flotante"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Número del proceso cuyas ventanas están en el primer plano"
				]
			],
			"Summary": "Frontmost process devuelve el número del proceso cuya ventana (o ventanas) están en el primer plano."
		},
		"Frontmost window": {
			"Syntax": "**Frontmost window** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, tiene en cuenta las ventanas flotantes Si se omite, ignora las ventanas flotantes"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de ventana"
				]
			],
			"Summary": "El comando Frontmost window devuelve el número de referencia de la ventana ubicada en el primer plano."
		},
		"GENERATE CERTIFICATE REQUEST": {
			"Syntax": "**GENERATE CERTIFICATE REQUEST** ( *llavePriv* ; *peticionCertif* ; *arrayCod* ; *arrNombres* )",
			"Params": [
				[
					"llavePriv",
					"Blob",
					"->",
					"BLOB que contiene la llave privada"
				],
				[
					"peticionCertif",
					"Blob",
					"<-",
					"BLOB que recibe la solicitud del certificado"
				],
				[
					"arrayCod",
					"Integer array",
					"->",
					"La lista de códigos de información"
				],
				[
					"arrNombres",
					"Text array",
					"->",
					"Lista de nombres"
				]
			],
			"Summary": "El comando GENERATE CERTIFICATE REQUEST genera una solicitud de certificación al formato PKCS el cual puede ser utilizado directamente por las autoridades de certificación tal como Verisign(R)."
		},
		"Generate digest": {
			"Syntax": "**Generate digest** ( *param* ; *algoritmo* {; *} ) : Text",
			"Params": [
				[
					"param",
					"Blob, Text",
					"->",
					"Blob o texto para el cual obtener un extracto"
				],
				[
					"algoritmo",
					"Integer",
					"->",
					"Algoritmo utilizado para devolver la llave: 0 = Digest MD5, 1 = Digest SHA1"
				],
				[
					"*",
					"Operador",
					"->",
					"Codificar digest en Base64URL"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor de la llave digest"
				]
			],
			"Summary": "El comando **Generate digest** devuelve el extracto de un BLOB o de un texto después de la aplicación de un algoritmo de encripción."
		},
		"GENERATE ENCRYPTION KEYPAIR": {
			"Syntax": "**GENERATE ENCRYPTION KEYPAIR** ( *llavePriv* ; *llavepublica* {; *longitud*} )",
			"Params": [
				[
					"llavePriv",
					"Blob",
					"<-",
					"BLOB que contiene la llave privada"
				],
				[
					"llavepublica",
					"Blob",
					"<-",
					"BLOB que contiene la llave pública"
				],
				[
					"longitud",
					"Integer",
					"->",
					"Longitud de la llave (bits) [512...2048] Valor por defecto = 512"
				]
			],
			"Summary": "El comando GENERATE ENCRYPTION KEYPAIR genera un nuevo par de llaves RSA."
		},
		"Generate password hash": {
			"Syntax": "**Generate password hash** ( *contrasena* {; *opciones*} ) : Text",
			"Params": [
				[
					"contrasena",
					"Text",
					"->",
					"La contraseña del usuario. Sólo se utilizan los primeros 72 caracteres."
				],
				[
					"opciones",
					"Object",
					"->",
					"Un objeto que contiene opciones."
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Devuelve la contraseña hash."
				]
			],
			"Summary": "La función **Generate password hash** devuelve un hash de *contrasena* seguro generado por un algoritmo de hash criptográfico."
		},
		"Generate UUID": {
			"Syntax": "**Generate UUID** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nuevo UUID en forma de texto no canónico (32 caracteres)"
				]
			],
			"Summary": "Generate UUID devuelve un nuevo identificador UUID de 32 caracteres en forma no canónica."
		},
		"Get 4D file": {
			"Syntax": "**Get 4D file** ( *archivo* {; *} ) : Text",
			"Params": [
				[
					"archivo",
					"Integer",
					"->",
					"Tipo de archivo"
				],
				[
					"*",
					"Operador",
					"->",
					"Archivo devuelto de la base local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta al archivo 4D"
				]
			],
			"Summary": "El comando **Get 4D file** devuelve la ruta de acceso al archivo del entorno 4D especificado por el parámetro *archivo*."
		},
		"Get 4D folder": {
			"Syntax": "**Get 4D folder** {( *carpeta* {; *opciones*} {; *})} : Text",
			"Params": [
				[
					"carpeta",
					"Integer",
					"->",
					"Tipo de carpeta (si se omite = carpeta activa 4D)"
				],
				[
					"opciones",
					"Object",
					"->",
					"Configuración de la ruta de la carpeta de la base 4D Client"
				],
				[
					"*",
					"Operador",
					"->",
					"Devuelve la carpeta de la base local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso a la carpeta designada"
				]
			],
			"Summary": "El comando **Get 4D folder** devuelve la ruta de acceso a la carpeta 4D activa de la aplicación actual o de la carpeta del entorno 4D especificada por los parámetros *opciones* y *carpeta*, si se pasa."
		},
		"Get adjusted blobs cache priority": {
			"Syntax": "**Get adjusted blobs cache priority** ( *tabla* ) : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual el valor de prioridad de los \"blobs\" tiene que ser recuperado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de prioridad actual para los campos \"blobs\""
				]
			],
			"Summary": "El comando **Get adjusted blobs cache priority** devuelve el valor de prioridad de la caché ajustada actual aplicado en la caché para los datos \"blobs\" *tabla*."
		},
		"Get adjusted index cache priority": {
			"Syntax": "**Get adjusted index cache priority** ( *campo* ) : Integer",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo para el cual se debe recuperar la prioridad del índice"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de la prioridad actual para los índices"
				]
			],
			"Summary": "El comando **Get adjusted index cache priority** devuelve el valor de prioridad de caché ajustado actual aplicado por el gestor de caché para los índices de campo."
		},
		"Get adjusted table cache priority": {
			"Syntax": "**Get adjusted table cache priority** ( *tabla* ) : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual se debe recuperar el valor de prioridad escalar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de prioridad actual para campos escalares"
				]
			],
			"Summary": "El comando **Get adjusted table cache priority** devuelve el valor de prioridad de la caché ajustada aplicado en caché para los datos escalares *tabla*."
		},
		"GET ALLOWED METHODS": {
			"Syntax": "**GET ALLOWED METHODS** ( *arrMetodos* )",
			"Params": [
				[
					"arrMetodos",
					"Text array",
					"<-",
					"Array de nombres de métodos"
				]
			],
			"Summary": "El comando GET ALLOWED METHODS devuelve, en *arrMetodos*, los nombres de los métodos que pueden utilizarse para escribir fórmulas."
		},
		"Get Application color scheme": {
			"Syntax": "**Get Application color scheme** {( * )} : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devuelve el esquema de color de la base local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Esquema de color de la aplicación actual"
				]
			],
			"Summary": "El comando **Get Application color scheme** devuelve el nombre del esquema de color real en uso en el nivel de la aplicación."
		},
		"Get assert enabled": {
			"Syntax": "**Get assert enabled** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = las aserciones están activas, False = las aserciones están inactivas"
				]
			],
			"Summary": "El comando Get assert enabled devuelve True o False de acuerdo a si las aserciones están activas o no en el proceso actual."
		},
		"GET AUTOMATIC RELATIONS": {
			"Syntax": "**GET AUTOMATIC RELATIONS** ( *uno* ; *muchos* )",
			"Params": [
				[
					"uno",
					"Boolean",
					"<-",
					"Estado de todas las relaciones de Muchos a Uno"
				],
				[
					"muchos",
					"Boolean",
					"<-",
					"Estado de todas las relaciones de Uno a Muchos"
				]
			],
			"Summary": "El comando GET AUTOMATIC RELATIONS le permite saber si el estado automático/manual de todas las relaciones manuales Muchos a Uno y Uno a Muchos de la base han sido modificadas en el proceso actual."
		},
		"Get cache size": {
			"Syntax": "**Get cache size**  : Real",
			"Params": [
				[
					"Resultado",
					"Real",
					"<-",
					"Tamaño, en bytes, de la caché de la base de datos"
				]
			],
			"Summary": "El comando **Get cache size** devuelve, en bytes, el tamaño actual de la caché de la base de datos."
		},
		"Get current printer": {
			"Syntax": "**Get current printer**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la impresora actual"
				]
			],
			"Summary": "El comando **Get current printer**devuelve el nombre de la impresora actual definida en la aplicación 4D."
		},
		"Get database localization": {
			"Syntax": "**Get database localization** {( {*tipoLeng*}{;}{*} )} : Text",
			"Params": [
				[
					"tipoLeng",
					"Integer",
					"->",
					"Tipo de lenguaje"
				],
				[
					"*",
					"Operador",
					"->",
					"Devuelve información sobre la base local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Lenguaje actual de la base"
				]
			],
			"Summary": "El comando Get database localization devuelve el lenguaje por defecto o el lenguaje de la base, especificado por *tipoLeng*, expresado en el estándar definido por la RFC 3066."
		},
		"Get database parameter": {
			"Syntax": "**Get database parameter** ( {*tabla* ;} *selector* {; *valor*} ) : Real",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del parámetro o Tabla por defecto si se omite este parámetro"
				],
				[
					"selector",
					"Integer",
					"->",
					"Código del parámetro de la base"
				],
				[
					"valor",
					"Text",
					"<-",
					"Valor alfa del parámetro"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Valor actual del parámetro"
				]
			],
			"Summary": "El comando **Get database parameter** permite obtener el valor actual de un parámetro de la base 4D."
		},
		"Get default user": {
			"Syntax": "**Get default user**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia único del usuario"
				]
			],
			"Summary": "El comando Get default user devuelve el número de referencia único del usuario designado como “Usuario por defecto” en la caja de diálogo de Preferencias de la base"
		},
		"GET DOCUMENT ICON": {
			"Syntax": "**GET DOCUMENT ICON** ( *rutaDoc* ; *icono* {; *tamaño*} )",
			"Params": [
				[
					"rutaDoc",
					"Text",
					"->",
					"Nombre o ruta de acceso del archivo del cual obtener el icono o cadena vacía para mostrar la caja de diálogo de apertura de archivos"
				],
				[
					"icono",
					"Picture, Picture",
					"<-",
					"Icono de documentación"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Tamaño del icono (en píxeles)"
				]
			],
			"Summary": "El comando GET DOCUMENT ICON devuelve en el campo o la variable imagen 4D *icono*, el icono del documento cuyo nombre o ruta de acceso se pasa en *rutaDoc*."
		},
		"Get document position": {
			"Syntax": "**Get document position** ( *docRef* ) : Real",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referencia del documento"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Posición en el archivo (expresada en bytes) a partir del inicio del archivo"
				]
			],
			"Summary": "Este comando sólo funciona en un documento abierto cuyo número de referencia se pasa en el parámetro *docRef*."
		},
		"GET DOCUMENT PROPERTIES": {
			"Syntax": "**GET DOCUMENT PROPERTIES** ( *doc* ; *bloqueado* ; *invisible* ; creado el ; creado a las ; modificado el ; modificado a las )",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento"
				],
				[
					"bloqueado",
					"Boolean",
					"<-",
					"Bloqueado (True) o no bloqueado (False)"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"Invisible (True) o visible (False)"
				],
				[
					"creado el",
					"Fecha",
					"<-",
					"Fecha de creación"
				],
				[
					"creado a las",
					"Hora",
					"<-",
					"Hora de creación"
				],
				[
					"modificado el",
					"Fecha",
					"<-",
					"Fecha de la última modificación"
				],
				[
					"modificado a las",
					"Hora",
					"<-",
					"Hora de la última modificación"
				]
			],
			"Summary": "El comando GET DOCUMENT PROPERTIES devuelve información sobre el documento cuyo nombre o ruta se pasa en *documento*."
		},
		"Get document size": {
			"Syntax": "**Get document size** ( *document* {; *} ) : Real",
			"Params": [
				[
					"document",
					"Text, Time",
					"->",
					"Número de referencia del documento o Nombre del documento"
				],
				[
					"*",
					"Operador",
					"->",
					"En Mac OS únicamente: -si se omite, tamaño del data fork - si se especifica, tamaño del resource fork"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Tamaño (expresado en bytes) del documento"
				]
			],
			"Summary": "El comando Get document size devuelve el tamaño de un documento, expresado en bytes."
		},
		"Get edited text": {
			"Syntax": "**Get edited text**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Texto en proceso de introducción"
				]
			],
			"Summary": "El comando **Get edited text** se utiliza principalmente con el evento formulario On After Edit para recuperar el texto a medida que es introducido."
		},
		"Get external data path": {
			"Syntax": "**Get external data path** ( *elCampo* ) : Text",
			"Params": [
				[
					"elCampo",
					"Text, Blob, Picture",
					"->",
					"Campo del cual obtener el lugar de almacenamiento"
				],
				[
					"resultado",
					"Text",
					"<-",
					"Ruta de acceso completa del archivo de almacenamiento externo"
				]
			],
			"Summary": "El comando **Get external data path** devuelve la ruta de acceso completa del archivo de almacenamiento externo de datos del campo pasado en el parámetro *elCampo*, para el registro actual."
		},
		"GET FIELD ENTRY PROPERTIES": {
			"Syntax": "**GET FIELD ENTRY PROPERTIES** ( *ptrCamp* ; *lista* ; *obligatorio* ; *noEditable* ; *noModificable* )<br/>**GET FIELD ENTRY PROPERTIES** ( *numTabla* ; *numCamp* ; *lista* ; *obligatorio* ; *noEditable* ; *noModificable* )",
			"Params": [
				[
					"ptrCamp&#124;numTabla",
					"Puntero, Entero largo",
					"->",
					"Puntero del campo o número de tabla"
				],
				[
					"numCamp",
					"Integer",
					"->",
					"Número de campo si el número de tabla se pasa como primer parámetro"
				],
				[
					"lista",
					"Text",
					"<-",
					"Nombre de la lista asociada o cadena vacía"
				],
				[
					"obligatorio",
					"Boolean",
					"<-",
					"True = Obligatorio, False = Opcional"
				],
				[
					"noEditable",
					"Boolean",
					"<-",
					"True = No editable, False = Editable"
				],
				[
					"noModificable",
					"Boolean",
					"<-",
					"True = No modificable, False = Modificable"
				]
			],
			"Summary": "El comando GET FIELD ENTRY PROPERTIES devuelve las propiedades de entrada de datos para el campo especificado por *numTabla* y *numCamp* o por *ptrCamp*."
		},
		"GET FIELD PROPERTIES": {
			"Syntax": "**GET FIELD PROPERTIES** ( *campPtr* ; *campTipo* {; *campLong* {; *indexado* {; *unico* {; *invisible*}}}} )<br/>**GET FIELD PROPERTIES** ( *tablaNum* ; *numCamp* ; *campTipo* {; *campLong* {; *indexado* {; *unico* {; *invisible*}}}} )",
			"Params": [
				[
					"campPtr &#124; tablaNum",
					"Puntero, Entero largo",
					"->",
					"Puntero de campo o Número de tabla"
				],
				[
					"numCamp",
					"Integer",
					"->",
					"Número de campo si se pasa un número de tabla"
				],
				[
					"campTipo",
					"Integer",
					"<-",
					"Tipo de campo"
				],
				[
					"campLong",
					"Integer",
					"<-",
					"Longitud del campo, si es alfanumérico"
				],
				[
					"indexado",
					"Boolean",
					"<-",
					"True = Indexado, False = No indexado"
				],
				[
					"unico",
					"Boolean",
					"<-",
					"True = único, False = No único"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"True = Invisible, False = Visible"
				]
			],
			"Summary": "El comando **GET FIELD PROPERTIES** devuelve información sobre el campo designado por *campPtr* o por *tablaNum* y *campNum*."
		},
		"GET FIELD RELATION": {
			"Syntax": "**GET FIELD RELATION** ( *campoN* ; *uno* ; *muchos* {; *} )",
			"Params": [
				[
					"campoN",
					"Field",
					"->",
					"Campo de inicio de una relación"
				],
				[
					"uno",
					"Integer",
					"<-",
					"Estado de la relación Muchos a Uno"
				],
				[
					"muchos",
					"Integer",
					"<-",
					"Estado de la relación Uno a Muchos"
				],
				[
					"*",
					"Operador",
					"->",
					"• Si se pasa: uno y muchos devuelven el estado actual de la relación (valores 2 o 3 únicamente) • Si se omite (por defecto): uno y muchos puede devolver el valor 1 si la relación no ha sido modificada por programación"
				]
			],
			"Summary": "El comando GET FIELD RELATION permite conocer el estado automático/manual de la relación comenzando desde el *campoN* para el proceso actual."
		},
		"GET FIELD TITLES": {
			"Syntax": "**GET FIELD TITLES** ( *tabla* ; *titulosCampos* ; *numCampos* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual quiere conocer los nombres de los campos"
				],
				[
					"titulosCampos",
					"Text array",
					"<-",
					"Nombres actuales de los campos"
				],
				[
					"numCampos",
					"Integer array",
					"<-",
					"Números de los campos"
				]
			],
			"Summary": "El comando GET FIELD TITLES llena los arrays *titulosCampos* y *numCampos* con los nombres y los números de los campos de la *tabla*."
		},
		"Get file from pasteboard": {
			"Syntax": "**Get file from pasteboard** ( *indiceN* ) : Text",
			"Params": [
				[
					"indiceN",
					"Integer",
					"->",
					"N archivo incluido en la acción arrastrar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso al archivo extraído del portapapeles"
				]
			],
			"Summary": "El comando Get file from pasteboard devuelve la ruta de acceso absoluto de un archivo incluido en una operación de arrastrar y soltar."
		},
		"Get group access": {
			"Syntax": "**Get group access** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de nombre(s) de grupo al que pertenece el usuario"
				]
			],
			"Summary": "El comando **Get group access** devuelve las membresías de la cuenta de usuario 4D para la sesión actual."
		},
		"GET GROUP LIST": {
			"Syntax": "**GET GROUP LIST** ( *nomGrupos* ; *numGrupos* )",
			"Params": [
				[
					"nomGrupos",
					"Text array",
					"<-",
					"Nombres de los grupos tal como aparecen en el editor de contraseñas"
				],
				[
					"numGrupos",
					"Integer array",
					"<-",
					"Números de referencia únicos para cada grupo"
				]
			],
			"Summary": "GET GROUP LIST llena los arrays *nomGrupos y* *numGrupos* con los nombres y los números de referencia únicos de los grupos tal como aparecen en la ventana del editor de contraseñas."
		},
		"GET GROUP PROPERTIES": {
			"Syntax": "**GET GROUP PROPERTIES** ( *refGrupo* ; *nombre* ; *propietario* {; *miembros*} )",
			"Params": [
				[
					"refGrupo",
					"Integer",
					"->",
					"Número de referencia del grupo"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre del grupo"
				],
				[
					"propietario",
					"Integer",
					"<-",
					"Número de referencia del propietario del grupo"
				],
				[
					"miembros",
					"Integer array",
					"<-",
					"Miembros del grupo"
				]
			],
			"Summary": "GET GROUP PROPERTIES devuelve las propiedades del grupo cuyo número de referencia se pasa en *refGrupo*."
		},
		"GET HIGHLIGHT": {
			"Syntax": "**GET HIGHLIGHT** ( {* ;} *objeto* ; *inicioSel* ; *finSel* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"Field, Variable, any",
					"->",
					"Nombre del objeto (si se especifica *) o campo o variable (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"<-",
					"Posición del inicio de la selección de texto"
				],
				[
					"finSel",
					"Integer",
					"<-",
					"Posición del fin de la selección de texto"
				]
			],
			"Summary": "El comando GET HIGHLIGHT permite determinar el texto seleccionado actualmente en *objeto*."
		},
		"GET HIGHLIGHTED RECORDS": {
			"Syntax": "**GET HIGHLIGHTED RECORDS** ( {*tabla* ;} *nomConjunto* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual leer los registros seleccionados Si se omite, tabla del formulario actual"
				],
				[
					"nomConjunto",
					"Text",
					"->",
					"Conjunto en el cual guardar los registros seleccionados"
				]
			],
			"Summary": "El comando GET HIGHLIGHTED RECORDS  guarda en el conjunto designado por el parámetro *nomConjunto* los registros seleccionados (es decir, los registros seleccionados por el usuario en el formulario listado) de la *tabla* pasada como parámetro."
		},
		"Get indexed string": {
			"Syntax": "**Get indexed string** ( *resNum* ; *strNum* {; *resArchivo*} ) : Text",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número de recurso o Atributo \"id\" del elemento \"grupo\" (XLIFF)"
				],
				[
					"strNum",
					"Integer",
					"->",
					"Número de cadena o Atributo \"id\" del elemento \"trans-unit\" (XLIFF)"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos Si se omite: todos los archivos XLIFF o los archivos de recursos abiertos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor de la cadena indexada"
				]
			],
			"Summary": "Una de las cadenas guardadas en el recurso lista de cadenas (“STR#”) cuyo número de identificación se pasa en *resNum*."
		},
		"Get list item font": {
			"Syntax": "**Get list item font** ( {* ;} *lista* ; refElem | * ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre de objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de fuente"
				]
			],
			"Summary": "El comando Get list item font devuelve el nombre de la fuente del carácter actual del elemento especificado por el parámetro RefElem de la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"GET LIST ITEM ICON": {
			"Syntax": "**GET LIST ITEM ICON** ( {* ;} *lista* ; refElem | * ; *icono* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre de objeto de tipo de lista (si pasa *)"
				],
				[
					"refElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"icono",
					"Picture",
					"<-",
					"Icono asociado al elemento"
				]
			],
			"Summary": "El comando GET LIST ITEM ICON devuelve, en *icono*, el icono asociado al elemento cuyo número de referencia se pasa en *refElem* de la lista cuyo número de referencia o nombre de objeto pasa en *lista*."
		},
		"GET LIST ITEM PARAMETER ARRAYS": {
			"Syntax": "**GET LIST ITEM PARAMETER ARRAYS** ( {* ;} *lista* ; *refElemento* ; *arrSelectores* {; *arrValores*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena)Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista oNombre de objeto de tipo lista (si se pasa *)"
				],
				[
					"refElemento",
					"Integer, *",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"arrSelectores",
					"Text array",
					"<-",
					"Array de los nombres de parámetros"
				],
				[
					"arrValores",
					"Text array",
					"<-",
					"Array de los valores de los parámetros"
				]
			],
			"Summary": "El comando **GET LIST ITEM PARAMETER ARRAYS** permite recuperar en una sola llamada el conjunto de los parámetros (así como también, opcionalmente, sus valores) asociados al elemento *refElemento* de la lista jerárquica cuya referencia o nombre de objeto se pasó en el parámetro *lista*."
		},
		"GET LIST ITEM PARAMETER": {
			"Syntax": "**GET LIST ITEM PARAMETER** ( {* ;} *lista* ; refElem | * ; *selector* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de la lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"selector",
					"Text",
					"->",
					"Constante del parámetro"
				],
				[
					"valor",
					"Text, Boolean, Real",
					"<-",
					"Valor actual del parámetro"
				]
			],
			"Summary": "El comando GET LIST ITEM PARAMETER permite conocer el *valor* actual del parámetro *selector* para el elemento *refElem* de la lista jerárquica cuya referencia o nombre de objeto se pasa en el parámetro *lista*."
		},
		"GET LIST ITEM PROPERTIES": {
			"Syntax": "**GET LIST ITEM PROPERTIES** ( {* ;} *lista* ; refElem | * ; *editable* {; *estilos* {; *icono* {; *color*}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es una referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Número de referencia del elemento, o 0 para el último elemento añadido a la lista, o * para el elemento actual de la lista"
				],
				[
					"editable",
					"Boolean",
					"<-",
					"TRUE = Editable, FALSE = No editable"
				],
				[
					"estilos",
					"Integer",
					"<-",
					"Estilo de fuente del elemento"
				],
				[
					"icono",
					"Text, Integer",
					"<-",
					"Número de recurso Mac OS ‘cicn’, o 65536 + número de recurso Mac OS ‘PICT’, o 131072 + número de referencia de imagen"
				],
				[
					"color",
					"Integer",
					"<-",
					"Valor de color RGB"
				]
			],
			"Summary": "El comando **GET LIST ITEM PROPERTIES** devuelve las propiedades del elemento designado por el parámetro *refElem* de la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"GET LIST ITEM": {
			"Syntax": "**GET LIST ITEM** ( {* ;} *lista* ; posicionElem | * ; *refElem* ; *textoElem* {; *sublista* ; *desplegada*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"posicionElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Posición del elemento en lista(s) desplegada(s) o contraída(s) * para el elemento actual de la lista."
				],
				[
					"refElem",
					"Integer",
					"<-",
					"Número de referencia del elemento"
				],
				[
					"textoElem",
					"Text",
					"<-",
					"Texto del elemento de la lista"
				],
				[
					"sublista",
					"Integer",
					"<-",
					"Número de referencia de la sublista (si la hay)"
				],
				[
					"desplegada",
					"Boolean",
					"<-",
					"Si una sublista está asociada: TRUE = la sublista está desplegada FALSE = la sublista está contraída"
				]
			],
			"Summary": "El comando GET LIST ITEM devuelve la información sobre el elemento especificado por *posicionElem* de la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"GET LIST PROPERTIES": {
			"Syntax": "**GET LIST PROPERTIES** ( *lista* ; *apariencia* {; *icono* {; *altoLinea* {; *dobleClic* {; *multiSeleccion* {; *editable*}}}}} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de la lista"
				],
				[
					"apariencia",
					"Integer",
					"<-",
					"Estilo gráfico de la lista 1 = Lista jerárquica a la Macintosh 2 = Lista jerárquica a la Windows"
				],
				[
					"icono",
					"Integer",
					"<-",
					"Referencia de recurso Mac OS  ‘cicn’"
				],
				[
					"altoLinea",
					"Integer",
					"<-",
					"Altura mínima de la línea expresada en píxeles"
				],
				[
					"dobleClic",
					"Integer",
					"<-",
					"Desplegar/Contraer sublista con doble-clik? 0 = Sí, 1= No"
				],
				[
					"multiSeleccion",
					"Integer",
					"<-",
					"Selecciones múltiples: 0 = No, 1 = Sí"
				],
				[
					"editable",
					"Integer",
					"<-",
					"Lista editable por el usuario: 0 = No, 1 = Sí"
				]
			],
			"Summary": "El comando GET LIST PROPERTIES devuelve información sobe la lista cuyo número de referencia se pasa en *lista*."
		},
		"GET MACRO PARAMETER": {
			"Syntax": "**GET MACRO PARAMETER** ( *selector* ; *paramText* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Selección a utilizar"
				],
				[
					"paramText",
					"Text",
					"<-",
					"Texto devuelto"
				]
			],
			"Summary": "El comando GET MACRO PARAMETER devuelve, en el parámetro *paramText*, una parte o la totalidad del texto del método desde el cual se llama."
		},
		"Get menu bar reference": {
			"Syntax": "**Get menu bar reference** {( *proceso* )} : Text",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Identificador de la barra de menús"
				]
			],
			"Summary": "El comando **Get menu bar reference** devuelve la identificación única de la barra de menús actual o de la barra de menús de un proceso específico."
		},
		"GET MENU ITEM ICON": {
			"Syntax": "**GET MENU ITEM ICON** ( *menu* ; *lineamenu* ; *refIcono* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido al menú"
				],
				[
					"refIcono",
					"Text, Integer",
					"<-",
					"Nombre o número de imagen asociado con la línea de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				]
			],
			"Summary": "El comando GET MENU ITEM ICON devuelve, en la variable *refIcono*, la referencia del icono asociado a la línea de menú designada por los parámetros *menu* y *menuItem*."
		},
		"Get menu item key": {
			"Syntax": "**Get menu item key** ( *menu* ; *lineamenu* {; *proceso*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia de proceso"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de caracter de la tecla de atajo estándar asociada a la línea de menú"
				]
			],
			"Summary": "El comando Get menu item key devuelve el código del atajo **Ctrl** (Windows) o **Comando** (macOS) para el comando de menú cuyo número o referencia de menú se pasa en *menu* y cuyo número de comando se pasa en *menuItem*."
		},
		"Get menu item mark": {
			"Syntax": "**Get menu item mark** ( *menu* ; *lineamenu* {; *proceso*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia de proceso"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Marca de línea del menú actual"
				]
			],
			"Summary": "El comando Get menu item mark devuelve la marca de la línea de menú cuyo número o referencia de menú y número de línea se pasan en *menu* y *menuItem*."
		},
		"Get menu item method": {
			"Syntax": "**Get menu item method** ( *menu* ; *lineaMenu* {; *proceso*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o Número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido al menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del método"
				]
			],
			"Summary": "El comando Get menu item method devuelve el nombre del método de proyecto 4D asociado a la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"Get menu item modifiers": {
			"Syntax": "**Get menu item modifiers** ( *menu* ; *lineaMenu* {; *proceso*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido al menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tecla(s) de modificación asociada(s) a la línea de menú"
				]
			],
			"Summary": "El comando Get menu item modifiers devuelve los modificadores adicionales asociados a los atajos de teclado estándar de la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"Get menu item parameter": {
			"Syntax": "**Get menu item parameter** ( *menu* ; *lineaMenu* ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para la última línea añadida al menú"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Parámetro personalizado de la línea de menú"
				]
			],
			"Summary": "El comando Get menu item parameter devuelve la cadena de caracteres personalizada asociada a la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"GET MENU ITEM PROPERTY": {
			"Syntax": "**GET MENU ITEM PROPERTY** ( *menu* ; *lineaMenu* ; *propiedad* ; *valor* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido al menú"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Tipo de propiedad"
				],
				[
					"valor",
					"any",
					"<-",
					"Valor de la propiedad"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número del proceso"
				]
			],
			"Summary": "El comando **GET MENU ITEM PROPERTY** devuelve, en el parámetro *valor*, el valor actual de la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"Get menu item style": {
			"Syntax": "**Get menu item style** ( *menu* ; *lineamenu* {; *proceso*} ) : Integer",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Process reference number"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estilo del comando de menú"
				]
			],
			"Summary": "El comando Get menu item style devuelve el estilo de fuente de la línea de menú cuyo número o referencia se pasa en *menu* y cuyo número de elemento se pasa en *menuItem*."
		},
		"Get menu item": {
			"Syntax": "**Get menu item** ( *menu* ; *lineamenu* {; *proceso*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto del elemento de menú"
				]
			],
			"Summary": "El comando Get menu item devuelve el texto del comando de menú cuyos números de menú y de comando se pasan en *menu* y *menuItem*."
		},
		"GET MENU ITEMS": {
			"Syntax": "**GET MENU ITEMS** ( *menu* ; *arrayTitMenus* ; *arraysRefMenus* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"arrayTitMenus",
					"Text array",
					"<-",
					"Array de títulos de menú"
				],
				[
					"arraysRefMenus",
					"Text array",
					"<-",
					"Array de referencias de menú"
				]
			],
			"Summary": "El comando GET MENU ITEMS devuelve, en los arrays *arrayTitMenus* y *arraysRefMenus*, los títulos e identificadores de todas las líneas de menú o de la barra de menús designada por el parámetro *menu*."
		},
		"Get menu title": {
			"Syntax": "**Get menu title** ( *menu* {; *proceso*} ) : Text",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título del menú"
				]
			],
			"Summary": "El comando Get menu title devuelve el título del menú cuyo número o referencia se pasa en *menu."
		},
		"GET MISSING TABLE NAMES": {
			"Syntax": "**GET MISSING TABLE NAMES** ( *tabfalt* )",
			"Params": [
				[
					"tabfalt",
					"Text array",
					"<-",
					"Nombres de las tablas faltantes en la base"
				]
			],
			"Summary": "El comando GET MISSING TABLE NAMES devuelve los nombres de todas las tablas faltantes de la base en el array *tabFalt*."
		},
		"GET PASTEBOARD DATA TYPE": {
			"Syntax": "**GET PASTEBOARD DATA TYPE** ( *firmas4D* ; *tiposNativos* {; *nombresFormatos*} )",
			"Params": [
				[
					"firmas4D",
					"Text array",
					"<-",
					"Firmas 4D de tipos de datos"
				],
				[
					"tiposNativos",
					"Text array",
					"<-",
					"Tipos de datos nativos"
				],
				[
					"nombresFormatos",
					"Text array",
					"<-",
					"Nombres de los formatos"
				]
			],
			"Summary": "El comando GET PASTEBOARD DATA TYPE permite obtener la lista de los tipos de datos presentes en el portapapeles."
		},
		"GET PASTEBOARD DATA": {
			"Syntax": "**GET PASTEBOARD DATA** ( *tipoDatos* ; *datos* )",
			"Params": [
				[
					"tipoDatos",
					"Text",
					"->",
					"Tipo de datos a extraer del contenedor"
				],
				[
					"datos",
					"Blob",
					"<-",
					"Datos extraídos del portapapeles"
				]
			],
			"Summary": "El comando GET PASTEBOARD DATA devuelve en el campo o variable de tipo BLOB *datos* que se encuentran en el portapapeles y cuyo tipo se pasa en *tipoDatos*."
		},
		"Get picture file name": {
			"Syntax": "**Get picture file name** ( *imagen* ) : Text",
			"Params": [
				[
					"imagen",
					"Picture, Picture",
					"->",
					"Imagen para la cual obtener el nombre por defecto"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre por defecto del archivo imagen"
				]
			],
			"Summary": "El comando **Get picture file name** devuelve el nombre por defecto actual de la imagen pasada como parámetro."
		},
		"GET PICTURE FORMATS": {
			"Syntax": "**GET PICTURE FORMATS** ( *imagen* ; *codecIDs* )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Campo o variable imagen a analizar"
				],
				[
					"codecIDs",
					"Text array",
					"<-",
					"IDs de codec Imagen"
				]
			],
			"Summary": "**Tema:** Imágenes\n\nEl comando **GET PICTURE FORMATS** devuelve un array de todos los IDs codec (formatos imagen) contenidos en la *imagen* pasada como parámetro."
		},
		"GET PICTURE FROM LIBRARY": {
			"Syntax": "**GET PICTURE FROM LIBRARY** ( refImag | nomImag ; *imagen* )",
			"Params": [
				[
					"refImag &#124; nomImag",
					"Entero largo, Cadena",
					"->",
					"Número de referencia o nombre de una imagen de la librería de imágenes"
				],
				[
					"imagen",
					"Picture",
					"<-",
					"Imagen de la librería de imágenes"
				]
			],
			"Summary": "El comando GET PICTURE FROM LIBRARY devuelve en el parámetro *imagen* la imagen de la librería de imágenes cuyo número de referencia se pasa en *refImag* o cuyo nombre se pasa en *nomImag*."
		},
		"GET PICTURE FROM PASTEBOARD": {
			"Syntax": "**GET PICTURE FROM PASTEBOARD** ( *imagen* )",
			"Params": [
				[
					"imagen",
					"Picture",
					"<-",
					"Imagen extraída del Portapapeles"
				]
			],
			"Summary": "GET PICTURE FROM PASTEBOARD devuelve la imagen presente en el portapapeles en el campo o variable imagen *imagen*."
		},
		"GET PICTURE KEYWORDS": {
			"Syntax": "**GET PICTURE KEYWORDS** ( *imagen* ; *arrayPalabrasClaves* {; *} )",
			"Params": [
				[
					"imagen",
					"Picture, Picture",
					"->",
					"Imagen para la cual obtener las palabras claves asociadas"
				],
				[
					"arrayPalabrasClaves",
					"Text array",
					"<-",
					"Array con las palabras claves extraídas"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = usar valores distintos"
				]
			],
			"Summary": "El comando **GET PICTURE KEYWORDS** devuelve en el array *arrayPalabrasClaves*, la lista de palabras claves asociadas a la imagen pasada como parámetro."
		},
		"GET PICTURE METADATA": {
			"Syntax": "**GET PICTURE METADATA** ( *imagen* ; *nomMeta* ; *ContenidoMeta* {; *nomMeta2* ; *ContenidoMeta2* ; ... ; *nomMetaN* ; *ContenidoMetaN*} )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen de la cual obtener los metadatos"
				],
				[
					"nomMeta",
					"Text",
					"->",
					"Nombre o ruta de acceso del bloque a leer"
				],
				[
					"ContenidoMeta",
					"Variable",
					"<-",
					"Contenido del metadato"
				]
			],
			"Summary": "El comando **GET PICTURE METADATA** permite leer el contenido de los metadatos (o meta-tags) presentes en *imagen* (campo o variable imagen 4D)."
		},
		"GET PICTURE RESOURCE": {
			"Syntax": "**GET PICTURE RESOURCE** ( *resNum* ; *resDatos* {; *resArchivo*} )",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número de recurso"
				],
				[
					"resDatos",
					"Field, Variable",
					"->",
					"Campo o variable imagen a recibir la imagen"
				],
				[
					"<-",
					"Contenido del recurso PICT"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o todos los archivos de recursos abiertos, si se omite"
				]
			],
			"Summary": "El comando GET PICTURE RESOURCE devuelve en el campo o en la variable *resDatos* la imagen guardada en el recurso imagen (“PICT”) cuyo número se pasa en *resNum*."
		},
		"Get plugin access": {
			"Syntax": "**Get plugin access** ( *plugIn* ) : Text",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"Número del plug-in"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del grupo asociado con el plug-in"
				]
			],
			"Summary": "El comando Get plugin access devuelve el nombre del grupo de usuarios autorizados a utilizar el plug-in cuyo número se pasa en el parámetro *plugIn*."
		},
		"Get pointer": {
			"Syntax": "**Get pointer** ( *nomVar* ) : Pointer",
			"Params": [
				[
					"nomVar",
					"Text",
					"->",
					"Nombre de una variable proceso o interproceso"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero hacia una variable proceso o interproceso"
				]
			],
			"Summary": "El comando **Get pointer** devuelve un puntero hacia una variable proceso o interproceso cuyo nombre se pasa en *nomVar*."
		},
		"Get print marker": {
			"Syntax": "**Get print marker** ( *markNum* ) : Integer",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"Número de marcador"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posición del marcador"
				]
			],
			"Summary": "El comando Get print marker permite obtener la posición actual de un marcador durante una impresión."
		},
		"GET PRINT OPTION": {
			"Syntax": "**GET PRINT OPTION** ( *opcion* ; *valor1* {; *valor2*} )",
			"Params": [
				[
					"opcion",
					"Integer",
					"->",
					"Número de opción"
				],
				[
					"valor1",
					"Integer, Text",
					"<-",
					"Valor 1 de la opción"
				],
				[
					"valor2",
					"Integer, Text",
					"<-",
					"Valor 2 de la opción"
				]
			],
			"Summary": "El comando **GET PRINT OPTION** devuelve los valores actuales de una opción de impresión."
		},
		"Get print preview": {
			"Syntax": "**Get print preview**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Vista previa de impresión, False = No vista previa de impresión"
				]
			],
			"Summary": "El comando **Get print preview** devuelve True si el comando SET PRINT PREVIEW se llamó con el valor **True** en el proceso actual."
		},
		"GET PRINTABLE AREA": {
			"Syntax": "**GET PRINTABLE AREA** ( *altura* {; *largo*} )",
			"Params": [
				[
					"altura",
					"Integer",
					"<-",
					"Altura del área de impresión"
				],
				[
					"largo",
					"Integer",
					"<-",
					"Largo del área de impresión"
				]
			],
			"Summary": "El comando GET PRINTABLE AREA devuelve el tamaño en píxeles del área de impresión en los parámetros *altura* y *largo* el tamaño."
		},
		"GET PRINTABLE MARGIN": {
			"Syntax": "**GET PRINTABLE MARGIN** ( *izquierda* ; *superior* ; *derecha* ; *inferior* )",
			"Params": [
				[
					"izquierda",
					"Integer",
					"<-",
					"Margen izquierda"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Margen superior"
				],
				[
					"derecha",
					"Integer",
					"<-",
					"Margen derecha"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Margen inferior"
				]
			],
			"Summary": "El comando GET PRINTABLE MARGIN devuelve los valores actuales de los diferentes márgenes definidos utilizando los comandos Print form, PRINT SELECTION y PRINT RECORD."
		},
		"Get printed height": {
			"Syntax": "**Get printed height**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Posición del marcador"
				]
			],
			"Summary": "El comando Get printed height devuelve la altura global (en píxeles) de la sección impresa por el comando Print form."
		},
		"GET PROCESS VARIABLE": {
			"Syntax": "**GET PROCESS VARIABLE** ( *proceso* ; *srcVar* ; *dstVar* {; *srcVar2* ; *dstVar2* ; ... ; *srcVarN* ; *dstVarN*} )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso fuente"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"Variable fuente"
				],
				[
					"dstVar",
					"Variable",
					"<-",
					"Variable de destino"
				]
			],
			"Summary": "El comando GET PROCESS VARIABLE lee el valor de las variables proceso *srcVar* (*srvVar2*, etc.) desde el proceso fuente cuyo número se pasa en *proceso* y devuelve sus valores actuales en las variables *dstVar* (*dstVar2*, etc.) del proceso actual."
		},
		"GET QUERY DESTINATION": {
			"Syntax": "**GET QUERY DESTINATION** ( *destinoTipo* ; *destinoObjeto* ; *destinoPunt* )",
			"Params": [
				[
					"destinoTipo",
					"Integer",
					"<-",
					"0=selección actual, 1=conjunto, 2=selección temporal, 3=variable"
				],
				[
					"destinoObjeto",
					"Text",
					"<-",
					"Nombre del conjunto o Nombre de la selección temporal o Cadena vacía"
				],
				[
					"destinoPunt",
					"Pointer",
					"<-",
					"Puntero a la variable local si destinoTipo=3"
				]
			],
			"Summary": "El comando **GET QUERY DESTINATION** devuelve el destino actual de los resultados de las búsquedas para el proceso en curso."
		},
		"Get query limit": {
			"Syntax": "**Get query limit** : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número límite de registros,0 = número ilimitado"
				]
			],
			"Summary": "El comando **Get query limit** devuelve el límite del número de registros que una búsqueda puede encontrar en el proceso actual."
		},
		"GET REGISTERED CLIENTS": {
			"Syntax": "**GET REGISTERED CLIENTS** ( *listaClientes* ; *metodos* )",
			"Params": [
				[
					"listaClientes",
					"Text array",
					"<-",
					"Lista de 4D Clients registrados"
				],
				[
					"metodos",
					"Integer array",
					"<-",
					"Lista de los métodos a ejecutar"
				]
			],
			"Summary": "El comando GET REGISTERED CLIENTS llena dos array"
		},
		"GET RELATION PROPERTIES": {
			"Syntax": "**GET RELATION PROPERTIES** ( *ptrCamp* ; *tablaUno* ; *campUno* {; *discriminante* {; *autoUno* {; *autoMuchos*}}} )<br/>**GET RELATION PROPERTIES** ( *numTabla* ; *numCamp* ; *tablaUno* ; *campUno* {; *discriminante* {; *autoUno* {; *autoMuchos*}}} )",
			"Params": [
				[
					"ptrCamp&#124;numTabla",
					"Puntero, Entero largo",
					"->",
					"Puntero de campo o número de tabla"
				],
				[
					"numCamp",
					"Integer",
					"->",
					"Número de campo si se pasa un número de tabla  como primer parámetro"
				],
				[
					"tablaUno",
					"Integer",
					"<-",
					"Número de la tabla Uno ó 0 si no se define  ninguna relación desde el campo"
				],
				[
					"campUno",
					"Integer",
					"<-",
					"Número de campo Uno ó 0 si no se define  ninguna relación desde el campo"
				],
				[
					"discriminante",
					"Integer",
					"<-",
					"Número de campo discriminante o 0 si ningún campo discriminante"
				],
				[
					"autoUno",
					"Boolean",
					"<-",
					"True = Relación uno automática,  False = Relación uno manual"
				],
				[
					"autoMuchos",
					"Boolean",
					"<-",
					"True = Relación unos a muchos automática,  False = Relación unos a muchos manual"
				]
			],
			"Summary": "El comando GET RELATION PROPERTIES devuelve las propiedades de la relación (si la hay) que comienza del campo fuente definido por *numTabla* y *numCamp* o por *ptrCamp*."
		},
		"Get resource name": {
			"Syntax": "**Get resource name** ( *resTipo* ; *resNum* {; *resArchivo*} ) : Text",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"Tipo de recurso (4 caracteres)"
				],
				[
					"resNum",
					"Integer",
					"->",
					"Número de referencia del recurso"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o Todos los archivos de recursos abiertos, si se omite"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del recurso"
				]
			],
			"Summary": "El comando Get resource name devuelve el nombre del recurso cuyo tipo se pasa en *resTipo* y cuyo número de referencia (ID) en *resNum*."
		},
		"Get resource properties": {
			"Syntax": "**Get resource properties** ( *resTipo* ; *resNum* {; *resArchivo*} ) : Integer",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"Tipo de recurso (4 caracteres)"
				],
				[
					"resNum",
					"Integer",
					"->",
					"Número de referencia del recurso (ID)"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o Todos los archivos de recursos abiertos, si se omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Atributos del recurso"
				]
			],
			"Summary": "El comando **Get resource properties** devuelve los atributos del recurso cuyo tipo se pasa en *resTipo* y cuyo número de identificación se pasa en *resNum*."
		},
		"GET RESOURCE": {
			"Syntax": "**GET RESOURCE** ( *resTipo* ; *resNum* ; *resDatos* {; *resArchivo*} )",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"Tipo de recurso (4 caracteres)"
				],
				[
					"resNum",
					"Integer",
					"->",
					"Número de recurso"
				],
				[
					"resDatos",
					"Blob",
					"->",
					"Campo o variable BLOB a recibir los datos"
				],
				[
					"<-",
					"Contenido del recurso"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o todos los archivos de recursos abiertos, si se omite"
				]
			],
			"Summary": "El comando GET RESOURCE devuelve en el campo o la variable BLOB *resDatos* el contenido del recurso cuyo tipo y número se pasa en *resTipo* y *resNum*."
		},
		"Get selected menu item parameter": {
			"Syntax": "**Get selected menu item parameter**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Parámetro personalizado de la línea de menú"
				]
			],
			"Summary": "El comando Get selected menu item parameter devuelve la cadena de caracteres personalizada asociada a la línea de menú seleccionada."
		},
		"GET SERIAL PORT MAPPING": {
			"Syntax": "**GET SERIAL PORT MAPPING** ( *arrNumeros* ; *arrNombres* )",
			"Params": [
				[
					"arrNumeros",
					"Integer array",
					"<-",
					"Array de números de puertos"
				],
				[
					"arrNombres",
					"Text array",
					"<-",
					"Array de nombres de puertos"
				]
			],
			"Summary": "El comando GET SERIAL PORT MAPPING devuelve dos arrays, *arrNumeros* y *arrNombres*, que contienen los números y nombres de puertos seriales del equipo actual."
		},
		"Get string resource": {
			"Syntax": "**Get string resource** ( *resNum* {; *resArchivo*} ) : Text",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número del recurso"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o Todos los archivos de recursos abiertos, si se omite"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Contenido del recurso STR"
				]
			],
			"Summary": "El comando Get string resource devuelve la cadena almacenada en el recurso cadena (“STR ”) cuyo número de referencia se pasa en *resNum*."
		},
		"GET STYLE SHEET INFO": {
			"Syntax": "**GET STYLE SHEET INFO** ( *nomHojaEstilo* ; *fuente* ; *tam* ; *estilos* )",
			"Params": [
				[
					"nomHojaEstilo",
					"Text",
					"->",
					"Nombre de la hoja de estilo"
				],
				[
					"fuente",
					"Text",
					"<-",
					"Tipo de fuente"
				],
				[
					"tam",
					"Integer",
					"<-",
					"Tamaño de fuente"
				],
				[
					"estilos",
					"Integer",
					"<-",
					"Valor del estilo"
				]
			],
			"Summary": "El comando **GET STYLE SHEET INFO** devuelve la configuración actual de la hoja de estilo *nomHojaEstilo* ."
		},
		"Get subrecord key": {
			"Syntax": "**Get subrecord key** ( *campoID* ) : Integer",
			"Params": [
				[
					"campoID",
					"Field",
					"->",
					"Campo de tipo \"Relación subtabla\" o \"Entero largo\" de una relación subtabla anterior"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Llave interna de la relación"
				]
			],
			"Summary": "El comando Get subrecord key facilita la migración del código 4D utilizando subtablas convertidas al código estándar de manipulación de tablas."
		},
		"GET SYSTEM FORMAT": {
			"Syntax": "**GET SYSTEM FORMAT** ( *formato* ; *valor* )",
			"Params": [
				[
					"formato",
					"Integer",
					"->",
					"Formato de sistema a recuperar"
				],
				[
					"valor",
					"Text",
					"<-",
					"Formato de sistema a recuperar"
				]
			],
			"Summary": "El comando GET SYSTEM FORMAT devuelve el valor actual de varios parámetros regionales definidos en el sistema operativo."
		},
		"GET TABLE PROPERTIES": {
			"Syntax": "**GET TABLE PROPERTIES** ( *PtrTabla* ; *invisible* {; *trigGuardarNuevo* {; *trigGuardaReg* {; *trigBorrarReg* {; *trigCargReg*}}}} )<br/>**GET TABLE PROPERTIES** ( *numTabla* ; *invisible* {; *trigGuardarNuevo* {; *trigGuardaReg* {; *trigBorrarReg* {; *trigCargReg*}}}} )",
			"Params": [
				[
					"PtrTabla&#124;numTabla",
					"Puntero, Entero largo",
					"->",
					"Puntero de tabla o número de tabla"
				],
				[
					"invisible",
					"Boolean",
					"<-",
					"True = Invisible, False = Visible"
				],
				[
					"trigGuardarNuevo",
					"Boolean",
					"<-",
					"True = Trigger “On saving new record” activado; de lo contrario, False"
				],
				[
					"trigGuardaReg",
					"Boolean",
					"<-",
					"True = Trigger “On saving an existing record” activado; de lo contrario, False"
				],
				[
					"trigBorrarReg",
					"Boolean",
					"<-",
					"True = Trigger “On deleting a record” activado; de lo contrario, False"
				],
				[
					"trigCargReg",
					"Boolean",
					"<-",
					"*** No usado (obsoleto) ***"
				]
			],
			"Summary": "El comando GET TABLE PROPERTIES devuelve las propiedades de la tabla pasada por *ptrTabla* o *numTabl* *a*."
		},
		"GET TABLE TITLES": {
			"Syntax": "**GET TABLE TITLES** ( *titTablas* ; *numTablas* )",
			"Params": [
				[
					"titTablas",
					"Text array",
					"<-",
					"Nombres actuales de las tablas"
				],
				[
					"numTablas",
					"Integer array",
					"<-",
					"Números de las tablas"
				]
			],
			"Summary": "El comando GET TABLE TITLES llena los arrays *titTablas* y *numTablas* con los nombres y números de las tablas de la base definidas en la ventana de estructura o vía el comando SET TABLE TITLES."
		},
		"Get text from pasteboard": {
			"Syntax": "**Get text from pasteboard**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Devuelve el texto (si lo hay) en el Portapapeles"
				]
			],
			"Summary": "Get text from pasteboard devuelve el texto en el portapapeles."
		},
		"GET TEXT KEYWORDS": {
			"Syntax": "**GET TEXT KEYWORDS** ( *texto* ; *arrPalabrasClaves* {; *} )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto original"
				],
				[
					"arrPalabrasClaves",
					"Text array",
					"<-",
					"Array que contiene las palabras claves"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = palabras únicas"
				]
			],
			"Summary": "El comando **GET TEXT KEYWORDS** divide todo el *texto* en palabras individuales y crea, para cada palabra obtenida, un elemento en el array texto *arrPalabrasClaves* para cada palabra."
		},
		"Get text resource": {
			"Syntax": "**Get text resource** ( *resNum* {; *resArchivo*} ) : Text",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número de recurso"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o todos los archivos de recursos abiertos, si se omite"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Contenido del recurso TEXT"
				]
			],
			"Summary": "El comando Get text resource devuelve el texto guardado en el recurso texto (“TEXT”) cuyo número de identificación se pasa en *resNum*."
		},
		"GET USER LIST": {
			"Syntax": "**GET USER LIST** ( *nomsUsuario* ; *refUsuario* )",
			"Params": [
				[
					"nomsUsuario",
					"Text array",
					"<-",
					"Nombres de los usuarios tal como aparecen en el editor de contraseñas"
				],
				[
					"refUsuario",
					"Integer array",
					"<-",
					"Números de referencia únicos para cada usuario"
				]
			],
			"Summary": "GET USER LIST llena los arrays *nomsUsuario* y *refUsuario* con los nombres y los números de referencia únicos de los usuarios tal como aparecen en la ventana de contraseñas."
		},
		"GET USER PROPERTIES": {
			"Syntax": "**GET USER PROPERTIES** ( *refUsuario* ; *nombre* ; *inicio* ; *contraseña* ; *nbLogin* ; *ultimoLogin* {; *membrecias* {; *grupoPropietario*}} )",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Número de referencia único de usuario"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre del usuario"
				],
				[
					"inicio",
					"Text",
					"<-",
					"Nombre del método de inicio"
				],
				[
					"contraseña",
					"Text",
					"<-",
					"Cadena vacía"
				],
				[
					"nbLogin",
					"Integer",
					"<-",
					"Números de usos de la base"
				],
				[
					"ultimoLogin",
					"Date",
					"<-",
					"Fecha de la última utilización de la base"
				],
				[
					"membrecias",
					"Integer array",
					"<-",
					"Números de referencia de los grupos a los que el usuario pertenece"
				],
				[
					"grupoPropietario",
					"Integer",
					"<-",
					"Número de referencia del grupo prioritario del usuario"
				]
			],
			"Summary": "**GET USER PROPERTIES** devuelve la información sobre el usuario cuyo número de referencia se pasa en el parámetro *refUsuario*."
		},
		"GET WINDOW RECT": {
			"Syntax": "**GET WINDOW RECT** ( *izquierda* ; *superior* ; *derecha* ; *inferior* {; *ventana*} )",
			"Params": [
				[
					"izquierda",
					"Integer",
					"<-",
					"Coordenada izquierda del interior de la ventana"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenada superior del interior de la ventana"
				],
				[
					"derecha",
					"Integer",
					"<-",
					"Coordenada derecha del interior de la ventana"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenada inferior del interior de la ventana"
				],
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o Ventana del primer plano del proceso si se omite o Ventana MDI si -1 (Windows)"
				]
			],
			"Summary": "El comando **GET WINDOW RECT** devuelve las coordenadas globales de la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"Get window title": {
			"Syntax": "**Get window title** {( *ventana* )} : Text",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o Ventana del primer plano del proceso actual si se omite"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título de la ventana"
				]
			],
			"Summary": "El comando Get window title devuelve el título de la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"GOTO OBJECT": {
			"Syntax": "**GOTO OBJECT** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica = objeto es un nombre de objeto (cadena) Si se omite = objeto es un campo o una variable"
				],
				[
					"objeto",
					"Field, Variable",
					"->",
					"Nombre del objeto (si se especifica *) o Campo o Variable (si se omite *) a donde ir"
				]
			],
			"Summary": "El comando GOTO OBJECT se utiliza para seleccionar el objeto editable *objeto* como el área activa del formulario."
		},
		"GOTO RECORD": {
			"Syntax": "**GOTO RECORD** ( {*tabla* ;} *posicion* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro de destino o Tabla por defecto, si se omite"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Número devuelto por número registro"
				]
			],
			"Summary": "GOTO RECORD selecciona el registro actual de *tabla*."
		},
		"GOTO SELECTED RECORD": {
			"Syntax": "**GOTO SELECTED RECORD** ( {*tabla* ;} *registro* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual ir al registro seleccionado o Tabla por defecto, si se omite"
				],
				[
					"registro",
					"Integer",
					"->",
					"Posición del registro en la selección"
				]
			],
			"Summary": "**GOTO SELECTED RECORD** vuelve el registro especificado en la selección actual de *tabla* el registro actual."
		},
		"GOTO XY": {
			"Syntax": "**GOTO XY** ( *x* ; *y* )",
			"Params": [
				[
					"x",
					"Integer",
					"->",
					"Posición x (horizontal) del cursor"
				],
				[
					"y",
					"Integer",
					"->",
					"Posición y (vertical) del cursor"
				]
			],
			"Summary": "El comando GOTO XY se utiliza conjuntamente con el comando MESSAGE cuando usted muestra mensajes en una ventana abierta por el comando Open window."
		},
		"GRAPH SETTINGS": {
			"Syntax": "**GRAPH SETTINGS** ( *graf* ; *xmin* ; *xmax* ; *ymin* ; *ymax* ; *xprop* ; *xgrid* ; *ygrid* ; *titulo* {; *titulo2* ; ... ; *tituloN*} )",
			"Params": [
				[
					"graf",
					"Picture",
					"->",
					"Área del gráfico o variable imagen"
				],
				[
					"xmin",
					"Integer, Date, Time",
					"->",
					"Valor mínimo del eje de las x para gráfico proporcional (líneas o puntos solamente)"
				],
				[
					"xmax",
					"Integer, Date, Time",
					"->",
					"Valor máximo del eje de las x para gráfico proporcional (líneas o puntos solamente)"
				],
				[
					"ymin",
					"Integer",
					"->",
					"Valor mínimo del eje y"
				],
				[
					"ymax",
					"Integer",
					"->",
					"Valor máximo del eje y"
				],
				[
					"xprop",
					"Boolean",
					"->",
					"TRUE para eje x proporcional; FALSE para eje x normal (líneas o puntos solamente)"
				],
				[
					"xgrid",
					"Boolean",
					"->",
					"TRUE para rejilla del eje x; FALSE para no rejilla en el eje x (sólo si xprop es TRUE)"
				],
				[
					"ygrid",
					"Boolean",
					"->",
					"TRUE para rejilla del eje y; FALSE para no rejilla el eje y"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título(s) para las leyenda(s) del gráfico"
				]
			],
			"Summary": "GRAPH SETTINGS permite cambiar los parámetros de los gráficos mostrados en un formulario."
		},
		"GRAPH": {
			"Syntax": "**GRAPH** ( *grafImagen* ; *grafNum* ; *xCategorias* {; *yValores*} {; *yValores2* ; ... ; *yValoresN*} )",
			"Params": [
				[
					"grafImagen",
					"Picture",
					"->",
					"Variable imagen"
				],
				[
					"grafNum",
					"Integer, Object",
					"->",
					"Número de tipo de gráfico"
				],
				[
					"xCategorias",
					"Array",
					"->",
					"Categorías para el eje x"
				],
				[
					"yValores",
					"Array",
					"->",
					"Valores a representar gráficamente (hasta 8)"
				]
			],
			"Summary": "El comando **GRAPH** crea un gráfico en una variable imagen, a partir de los valores provenientes de los arrays."
		},
		"HIDE MENU BAR": {
			"Syntax": "**HIDE MENU BAR**",
			"Params": [],
			"Summary": "El comando HIDE MENU BAR vuelve invisible la barra de menús."
		},
		"HIDE PROCESS": {
			"Syntax": "**HIDE PROCESS** ( *proceso* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso a ocultar"
				]
			],
			"Summary": "HIDE PROCESS oculta todas las ventanas que pertenecen a *proceso*."
		},
		"HIDE TOOL BAR": {
			"Syntax": "**HIDE TOOL BAR**",
			"Params": [],
			"Summary": "El comando **HIDE TOOL BAR** maneja la visualización de las barras de herramientas personalizadas creadas por el comando Open form window para el proceso actual."
		},
		"HIDE WINDOW": {
			"Syntax": "**HIDE WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o Ventana del primer plano del proceso actual, si se omite"
				]
			],
			"Summary": "El comando HIDE WINDOW permite ocultar la ventana cuyo número de referencia se pasa en *ventana* o, si se omite este parámetro, la ventana del primer plano del proceso actual."
		},
		"HIGHLIGHT RECORDS": {
			"Syntax": "**HIGHLIGHT RECORDS** ( {*tabla* }{;}{ *nomConjunto* {; *}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual seleccionar los registros Si se omite, tabla del formulario actual"
				],
				[
					"nomConjunto",
					"Text",
					"->",
					"Conjunto de registros a seleccionar o Userset si se omite"
				],
				[
					"*",
					"Operador",
					"->",
					"Desactivar el desplazamiento automático de la lista"
				]
			],
			"Summary": "El comando HIGHLIGHT RECORDS permite seleccionar registros en un formulario listado."
		},
		"HIGHLIGHT TEXT": {
			"Syntax": "**HIGHLIGHT TEXT** ( {* ;} *objeto* ; *inicioSel* ; *finSel* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"Field, Variable, any",
					"->",
					"Nombre del objeto (si se especifica *) o Campo o variable (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Nueva posición de inicio de selección de texto"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Nueva posición de fin de selección de texto"
				]
			],
			"Summary": "El comando HIGHLIGHT TEXT selecciona una parte de texto en *objeto*."
		},
		"HTTP AUTHENTICATE": {
			"Syntax": "**HTTP AUTHENTICATE** ( *nombre* ; *clave* {; *metodoAut*} {; *} )",
			"Params": [
				[
					"nombre",
					"Text",
					"->",
					"Nombre de usuario"
				],
				[
					"clave",
					"Text",
					"->",
					"Clave de usuario"
				],
				[
					"metodoAut",
					"Integer",
					"->",
					"Método de autenticación: 0 o se omite = no definido, 1 = BASIC, 2 = DIGEST"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: autenticación por proxy"
				]
			],
			"Summary": "El comando **HTTP AUTHENTICATE** permite efectuar peticiones HTTP a los servidores que necesitan la autenticación de la aplicación cliente."
		},
		"HTTP Get certificates folder": {
			"Syntax": "**HTTP Get certificates folder**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta completa de la carpeta de certificados activa"
				]
			],
			"Summary": "El comando **HTTP Get certificates folder** devuelve la ruta completa de la carpeta de certificados activa del cliente."
		},
		"HTTP GET OPTION": {
			"Syntax": "**HTTP GET OPTION** ( *opción* ; *valor* )",
			"Params": [
				[
					"opción",
					"Integer",
					"->",
					"Código de la opción a leer"
				],
				[
					"valor",
					"Integer",
					"<-",
					"Valor actual de la opción"
				]
			],
			"Summary": "El comando **HTTP GET OPTION** devuelve el valor actual de las opciones HTTP (opciones utilizadas por el cliente para la próxima petición provocada por el comando HTTP Get o HTTP Request)."
		},
		"HTTP Get": {
			"Syntax": "**HTTP Get** ( *url* ; *respuesta* {; *nomEncab* ; *valoresEncab*}{; *} ) : Integer",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"URL al cual enviar la petición"
				],
				[
					"respuesta",
					"Text, Blob, Picture, Object",
					"<-",
					"Resultado de la petición"
				],
				[
					"nomEncab",
					"Text array",
					"->",
					"Nombres de los encabezados de la petición"
				],
				[
					"<-",
					"Nombres de encabezados devueltos"
				],
				[
					"valoresEncab",
					"Text array",
					"->",
					"Valores de los encabezados de la petición"
				],
				[
					"<-",
					"Valores de los encabezados devueltos"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa, la conexión se mantiene(keep-alive)Si se omite, la conexión se cierra automáticamente"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de estado HTTP"
				]
			],
			"Summary": "El comando **HTTP Get** envía directamente una petición HTTP GET a un URL específico y procesa la respuesta del servidor HTTP."
		},
		"HTTP Request": {
			"Syntax": "**HTTP Request** ( *metodoHTTP* ; *url* ; *contenido* ; *respuesta* {; *nomEncab* ; *valoresEncab*}{; *} ) : Integer",
			"Params": [
				[
					"metodoHTTP",
					"Text",
					"->",
					"Método HTTP para la petición"
				],
				[
					"url",
					"Text",
					"->",
					"URL a la cual enviar la petición"
				],
				[
					"contenido",
					"Text, Blob, Picture, Object",
					"->",
					"Contenido del cuerpo(body)de la petición"
				],
				[
					"respuesta",
					"Text, Blob, Picture, Object",
					"<-",
					"Resultado de la petición"
				],
				[
					"nomEncab",
					"Text array",
					"->",
					"Nombres de los encabezados de la petición"
				],
				[
					"<-",
					"Nombres de los encabezados devueltos"
				],
				[
					"valoresEncab",
					"Text array",
					"->",
					"Valores de los encabezados de la petición"
				],
				[
					"<-",
					"Valores de los encabezados devueltos"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa, la conexión se mantiene (keep-alive)Si se omite, la conexión se cierra automáticamente"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de estado HTTP"
				]
			],
			"Summary": "El comando **HTTP Request** permite enviar todo tipo de petición HTTP a un URL específico y procesar la respuesta del servidor HTTP."
		},
		"HTTP SET CERTIFICATES FOLDER": {
			"Syntax": "**HTTP SET CERTIFICATES FOLDER** ( *carpetaCertificados* )",
			"Params": [
				[
					"carpetaCertificados",
					"Text",
					"->",
					"Ruta y nombre de la carpeta de certificados del cliente"
				]
			],
			"Summary": "El comando **HTTP SET CERTIFICATES FOLDER** permite modificar la carpeta de certificados cliente activa para el conjunto de los procesos en la sesión actual."
		},
		"HTTP SET OPTION": {
			"Syntax": "**HTTP SET OPTION** ( *opcion* ; *valor* )",
			"Params": [
				[
					"opcion",
					"Integer",
					"->",
					"Código de la opción a definir"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor de la opción"
				]
			],
			"Summary": "El comando **HTTP SET OPTION** permite definir diferentes opciones utilizadas durante la próxima petición disparada por los comandos HTTP Get o HTTP Request."
		},
		"IDLE": {
			"Syntax": "**IDLE**",
			"Params": [],
			"Summary": "El comando IDLE está diseñado para utilizarse únicamente con el compilador."
		},
		"IMPORT DATA": {
			"Syntax": "**IMPORT DATA** ( *nomArchivo* {; *proyecto* {; *}} )",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Ruta de acceso y nombre del archivo a importar"
				],
				[
					"proyecto",
					"Text, Blob",
					"->",
					"Contenido del proyecto de importación"
				],
				[
					"<-",
					"Nuevo contenido del proyecto de importación (si se  pasa el parámetro *)"
				],
				[
					"*",
					"Operador",
					"->",
					"Visualización de la caja de diálogo de importación y actualización del proyecto"
				]
			],
			"Summary": "El comando IMPORT DATA importa los datos ubicados en el archivo *nomArchivo*."
		},
		"IMPORT DIF": {
			"Syntax": "**IMPORT DIF** ( {*tabla* ;} *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual importar datos, o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento DIF a importar"
				]
			],
			"Summary": "El comando IMPORT DIF lee datos de *documento*, un documento DIF Windows o Macintosh y los escribe en *tabla* creando nuevos registros para esa tabla."
		},
		"IMPORT STRUCTURE": {
			"Syntax": "**IMPORT STRUCTURE** ( *estructuraXML* )",
			"Params": [
				[
					"estructuraXML",
					"Text",
					"->",
					"Definición XML de la estructura de la base 4D"
				]
			],
			"Summary": "El comando **IMPORT STRUCTURE** importa, en la base actual, la definición XML de la estructura de la base 4D pasada en el parámetro *estructuraXML*."
		},
		"IMPORT SYLK": {
			"Syntax": "**IMPORT SYLK** ( {*tabla* ;} *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual importar los datos, o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento SYLK a importar"
				]
			],
			"Summary": "El comando IMPORT SYLK lee los datos de *documento*, un documento SYLK Windows o Macintosh, y los escribe en *tabla* creando nuevos registros."
		},
		"IMPORT TEXT": {
			"Syntax": "**IMPORT TEXT** ( {*tabla* ;} *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual importar datos, o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento texto a importar datos"
				]
			],
			"Summary": "El comando IMPORT TEXT lee los datos de *documento*, un documento texto Windows o Macintosh, y los escribe en *tabla* creando nuevos registros para esa tabla."
		},
		"In break": {
			"Syntax": "**In break**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve True si el ciclo de ejecución es in break"
				]
			],
			"Summary": "**In break** devuelve True para el ciclo de ejecución In break."
		},
		"In footer": {
			"Syntax": "**In footer**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve True si el ciclo de ejecución es in footer"
				]
			],
			"Summary": "**In footer** devuelve True para el ciclo de ejecución In footer."
		},
		"In header": {
			"Syntax": "**In header**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve True si el ciclo de ejecución es in header"
				]
			],
			"Summary": "**In header** devuelve True para el ciclo de ejecución In header."
		},
		"In transaction": {
			"Syntax": "**In transaction**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve TRUE si el proceso actual está en transacción"
				]
			],
			"Summary": "El comando In transaction devuelve True si el proceso actual está en transacción, de lo contrario devuelve False."
		},
		"INSERT IN ARRAY": {
			"Syntax": "**INSERT IN ARRAY** ( *array* ; *posicion* {; *reemplazos*} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Nombre del array"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Donde insertar los elementos"
				],
				[
					"reemplazos",
					"Integer",
					"->",
					"Número de elementos a insertar, o 1 elemento si se omite"
				]
			],
			"Summary": "El comando INSERT IN ARRAY inserta uno o más elementos en el *array*."
		},
		"INSERT IN BLOB": {
			"Syntax": "**INSERT IN BLOB** ( *BLOB* ; *offset* ; *numero* {; *relleno*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB en el cual insertar los bytes"
				],
				[
					"offset",
					"Integer",
					"->",
					"Posición de inicio de inserción de los bytes"
				],
				[
					"numero",
					"Integer",
					"->",
					"Número de bytes a insertar"
				],
				[
					"relleno",
					"Integer",
					"->",
					"Valor de byte por defecto (0x00..0xFF) 0x00 si se omite"
				]
			],
			"Summary": "El comando INSERT IN BLOB inserta el número de bytes especificado por *numero* en el BLOB *blob* en la posición especificada por *offset*."
		},
		"INSERT IN LIST": {
			"Syntax": "**INSERT IN LIST** ( {* ;} *lista* ; antesElem | * ; *textoElem* ; *refElem* {; *sublista* ; *desplegada*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"antesElem &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento de la lista actualmente seleccionado"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Texto para el nuevo elemento (max. 255 caracteres)"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referencia único del nuevo elemento"
				],
				[
					"sublista",
					"Integer",
					"->",
					"Sublista opcional para asociar al nuevo elemento"
				],
				[
					"desplegada",
					"Boolean",
					"->",
					"Indica si la sublista será desplegada o contraída"
				]
			],
			"Summary": "El comando INSERT IN LIST inserta el elemento designado por el parámetro *refElem* en la lista cuyo número de referencia se pasa en *lista*."
		},
		"INSERT MENU ITEM": {
			"Syntax": "**INSERT MENU ITEM** ( *menu* ; *depuesDe* ; *textoElem* {; *subMenu* {; *proceso*}}{; *} )",
			"Params": [
				[
					"menu",
					"Integer",
					"->",
					"Número de menú o referencia de menú"
				],
				[
					"depuesDe",
					"Integer",
					"->",
					"Número de la línea de menú"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Texto para la línea de menú a insertar"
				],
				[
					"subMenu",
					"Text",
					"->",
					"Referencia del submenú asociado con la línea"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: considerar metacaracteres como caracteres estándar"
				]
			],
			"Summary": "El comando **INSERT MENU ITEM** inserta nuevas líneas en el menú cuyo número o referencia se pasa en *menu* y las ubica después de la línea de menú cuyo número se pasa en *despuesItem*."
		},
		"Insert string": {
			"Syntax": "**Insert string** ( *fuente* ; *ainsertar* ; *posicion* ) : Text",
			"Params": [
				[
					"fuente",
					"Text",
					"->",
					"Cadena en la cual insertar otra cadena"
				],
				[
					"ainsertar",
					"Text",
					"->",
					"Cadena a insertar"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Posición de la inserción"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena resultante"
				]
			],
			"Summary": "Insert string inserta la cadena de caracteres alfanuméricos *ainsertar* en la cadena *fuente* a partir de *posicion* y devuelve la cadena de caracteres resultante."
		},
		"Int": {
			"Syntax": "**Int** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número cuya parte entera se devuelve"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Parte entera de número"
				]
			],
			"Summary": "Int devuelve la parte entera de *número,* redondeando al entero inferior."
		},
		"INTEGER TO BLOB": {
			"Syntax": "**INTEGER TO BLOB** ( *entero* ; *BLOB* ; *byteOrden* {; offset | *} )",
			"Params": [
				[
					"entero",
					"Integer",
					"->",
					"Valor entero a escribir en el BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a recibir el valor entero"
				],
				[
					"byteOrden",
					"Integer",
					"->",
					"0 Orden de bytes en modo nativo 1 Orden de los bytes Macintosh 2 Orden de los bytes PC"
				],
				[
					"offset &#124; *",
					"Variable, Operador",
					"<->",
					"Offset expresado en bytes en el BLOB o * para añadir el valor"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la escritura si se omite *"
				]
			],
			"Summary": "El comando INTEGER TO BLOB escribe el valor entero (2 bytes) *entero* en el BLOB *blob*."
		},
		"INTEGRATE MIRROR LOG FILE": {
			"Syntax": "**INTEGRATE MIRROR LOG FILE** ( *rutaAcceso* ; *numOperacion* {; *modo* {; *objError*}} )",
			"Params": [
				[
					"rutaAcceso",
					"Text",
					"->",
					"Nombre o ruta de acceso del archivo de historial a integrar"
				],
				[
					"numOperacion",
					"Real",
					"->",
					"Número de la última operación integrada"
				],
				[
					"<-",
					"Nuevo número de la última operación integrada o -2 para integrar todo el archivo"
				],
				[
					"modo",
					"Integer",
					"->",
					"0=modo estricto (modo por defecto), 1=modo auto reparar"
				],
				[
					"objError",
					"Object",
					"<-",
					"Operaciones faltantes"
				]
			],
			"Summary": "**Nota preliminar:** este comando sólo funciona con 4D Server."
		},
		"INTERSECTION": {
			"Syntax": "**INTERSECTION** ( *conjunto1* ; *conjunto2* ; *resultado* )",
			"Params": [
				[
					"conjunto1",
					"Text",
					"->",
					"Primer conjunto"
				],
				[
					"conjunto2",
					"Text",
					"->",
					"Segundo conjunto"
				],
				[
					"resultado",
					"Text",
					"->",
					"Conjunto resultante"
				]
			],
			"Summary": "INTERSECTION compara *conjunto1* y *conjunto2* y selecciona únicamente los registros que están en ambos conjuntos."
		},
		"INVOKE ACTION": {
			"Syntax": "**INVOKE ACTION** ( *accion* {; *objetivo*} )",
			"Params": [
				[
					"accion",
					"Text",
					"->",
					"Nombre o patrón de acción estándar incluyendo parámetro si es necesario"
				],
				[
					"objetivo",
					"Integer",
					"->",
					"Define donde ejecutar la acción: formulario actual (por defecto) o formulario principal"
				]
			],
			"Summary": "El comando **INVOKE ACTION** activa la acción estándar definida por el parámetro accion, opcionalmente en el contexto objetivo."
		},
		"Is a list": {
			"Syntax": "**Is a list** ( *lista* ) : Boolean",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Referencia de la lista a probar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE si la lista es una lista jerárquica FALSE si la lista no es una lista jerárquica"
				]
			],
			"Summary": "El comando Is a list devuelve TRUE si el valor pasado en *lista* es una referencia válida a una lista jerárquica."
		},
		"Is a variable": {
			"Syntax": "**Is a variable** ( *puntero* ) : Boolean",
			"Params": [
				[
					"puntero",
					"Pointer",
					"->",
					"Puntero a probar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = Puntero apunta a una variable FALSE = Puntero no apunta a una variable"
				]
			],
			"Summary": "El comando Is a variable devuelve True si el puntero pasado en *unPuntero* referencia a una variable definida."
		},
		"Is compiled mode": {
			"Syntax": "**Is compiled mode** {( * )} : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devuelve la información de la base local"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Compilado (True), Interpretado (False)"
				]
			],
			"Summary": "Is compiled mode prueba si la base se está ejecutando en modo compilado (True) o interpretado (False)."
		},
		"Is data file locked": {
			"Syntax": "**Is data file locked**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = archivo/segmento bloqueado False = archivo/segmento no bloqueado"
				]
			],
			"Summary": "El comando Is data file locked devuelve True si el archivo de datos de la base abierta o al menos uno de sus segmentos está bloquedo, es decir protegido contra escritura."
		},
		"Is editing text": {
			"Syntax": "**Is editing text**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si texto está siendo introducido, de lo contrario False"
				]
			],
			"Summary": "El comando **Is editing text** devuelve **True** si el usuario está ingresando valores en un objeto de formulario de entrada, y **False** en todos los demás casos."
		},
		"Is field number valid": {
			"Syntax": "**Is field number valid** ( *ptrTabla* ; *numCamp* ) : Boolean<br/>**Is field number valid** ( *numTabla* ; *numCamp* ) : Boolean",
			"Params": [
				[
					"numTabla &#124; ptrTabla",
					"Entero largo, Puntero",
					"->",
					"Número de tabla o Puntero a una tabla"
				],
				[
					"numCamp",
					"Integer",
					"->",
					"Número de campo"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = el campo existe en la tabla False = el campo no existe en la tabla"
				]
			],
			"Summary": "El comando Is field number valid devuelve True si el campo cuyo número se pasa en el parámetro *numCamp* existe en la tabla cuyo número o puntero se pasa en el parámetro *numTabla* o *ptrTabla*."
		},
		"Is field value Null": {
			"Syntax": "**Is field value Null** ( *unCampo* ) : Boolean",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo a evaluar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = campo es NULL, False = campo no es NULL"
				]
			],
			"Summary": "El comando Is field value Nulldevuelve **True** si el campo designado por el parámetro *unCampo* contiene el valor NULL y de lo contrario **False**."
		},
		"Is in print preview": {
			"Syntax": "**Is in print preview**  : Boolean",
			"Params": [
				[
					"resultado",
					"Boolean",
					"<-",
					"True = Vista previa,False = No vista previa"
				]
			],
			"Summary": "El comando **Is in print preview** devuelve True si la opción **Vista previa de impresión** está seleccionada en la caja de diálogo de impresión y False de lo contrario."
		},
		"Is in set": {
			"Syntax": "**Is in set** ( *conjunto* ) : Boolean",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto a borrar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"El registro actual está en el conjunto (True) o El registro actual no está en el conjunto (False)"
				]
			],
			"Summary": "Is in set prueba si el registro actual de la tabla está en *conjunto*."
		},
		"Is license available": {
			"Syntax": "**Is license available** {( *licencia* )} : Boolean",
			"Params": [
				[
					"licencia",
					"Integer",
					"->",
					"Plug-in al cual realizar una prueba de validez de la licencia"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el plug-in está disponible,  sino False"
				]
			],
			"Summary": "El comando Is license available le permite conocer la disponibilidad de un plug-in."
		},
		"Is macOS": {
			"Syntax": "**Is macOS** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el sistema operativo = macOS, de lo contrario False"
				]
			],
			"Summary": "El comando **Is macOS** devuelve True si el sistema operativo actual es macOS."
		},
		"Is new record": {
			"Syntax": "**Is new record** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro a examinar o Tabla por defecto si se omite este parámetro"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el registro está siendo creado, False si no"
				]
			],
			"Summary": "El comando Is new record devuelve True cuando el registro actual de *tabla* está siendo creado y aún no ha sido guardado en el proceso actual."
		},
		"Is nil pointer": {
			"Syntax": "**Is nil pointer** ( *puntero* ) : Boolean",
			"Params": [
				[
					"puntero",
					"Pointer",
					"->",
					"Puntero a probar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = Puntero Nil (->[]) FALSE = Puntero válido hacia un objeto existente"
				]
			],
			"Summary": "El comando **Is nil pointer** devuelve True si el puntero que pasa en *unPuntero* es Nil (*\\->\\[\\]*)."
		},
		"Is picture file": {
			"Syntax": "**Is picture file** ( *rutaArchivo* {; *} ) : Boolean",
			"Params": [
				[
					"rutaArchivo",
					"Text",
					"->",
					"Ruta de acceso del archivo"
				],
				[
					"*",
					"Operador",
					"->",
					"Validar los datos"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = rutaArchivo designa un archivo imagen, de lo contrario False"
				]
			],
			"Summary": "El comando Is picture file prueba el archivo designado por el parámetro *rutaArchivo* y devuelve True si es un archivo de imagen válido."
		},
		"Is record loaded": {
			"Syntax": "**Is record loaded** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro a examinar o Tabla por defecto si se omite este parámetro"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si se carga el registro Si no False"
				]
			],
			"Summary": "El comando Is record loaded devuelve True si si el registro actual de *tabla* se carga en el proceso actual."
		},
		"Is table number valid": {
			"Syntax": "**Is table number valid** ( *numTabla* ) : Boolean",
			"Params": [
				[
					"numTabla",
					"Integer",
					"->",
					"Número de tabla"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = la tabla existe en la base, False = la tabla no existe en la base"
				]
			],
			"Summary": "El comando Is table number valid devuelve True si la tabla cuyo número se pasa en el parámetro *numTabla* existe en la base, de lo contrario False."
		},
		"Is user deleted": {
			"Syntax": "**Is user deleted** ( *refUsuario* ) : Boolean",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Número de identificación del usuario"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = La cuenta del usuario ha sido borrada o no existe FALSE = La cuenta del usuario está activa"
				]
			],
			"Summary": "El comando Is user deleted prueba la cuenta de usuario cuyo número de identificación único se pasa en *refUsuario*."
		},
		"Is waiting mouse up": {
			"Syntax": "**Is waiting mouse up**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el objeto está esperando por un evento mouse up, de lo contrario False"
				]
			],
			"Summary": "**Tema:** Eventos formulario\n\nEl comando **Is waiting mouse up** devuelve **True** después de que el objeto actual haya hecho clic y el botón del ratón no se ha liberado, y cuando el diálogo aún tiene el foco."
		},
		"Is window maximized": {
			"Syntax": "**Is window maximized** ( *ventana* ) : Boolean",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la ventana está maximizada, False en caso contrario"
				]
			],
			"Summary": "El comando **Is window maximized** devuelve **True** si la ventana cuyo número de referencia se pasa en *ventana* está actualmente maximizada, y **False** en caso contrario."
		},
		"Is window reduced": {
			"Syntax": "**Is window reduced** ( *ventana* ) : Boolean",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la ventana se reduce en la barra de tareas o en el dock, False en caso contrario"
				]
			],
			"Summary": "El comando **Is window reduced** devuelve **True** si la ventana cuyo número de referencia se pasa en *ventana* está actualmente reducida en la barra de tareas (Windows) o en el dock (macOS), y **False** en caso contrario."
		},
		"Is Windows": {
			"Syntax": "**Is Windows** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el sistema operativo = Windows, de lo contrario False"
				]
			],
			"Summary": "El comando **Is Windows** devuelve True si el sistema operativo actual es Windows."
		},
		"JSON PARSE ARRAY": {
			"Syntax": "**JSON PARSE ARRAY** ( *cadenaJSON* ; *array* )",
			"Params": [
				[
					"cadenaJSON",
					"Text",
					"->",
					"Cadena JSON a analizar"
				],
				[
					"array",
					"Array",
					"<-",
					"Array que contiene el resultado del análisis de la cadena JSON"
				]
			],
			"Summary": "El comando **JSON PARSE ARRAY** analiza el contenido de una cadena con formato JSON y ubica los datos extraídos en el parámetro *array*."
		},
		"JSON Parse": {
			"Syntax": "**JSON Parse** ( *cadenaJSON* {; *tipo*}{; *} ) : any",
			"Params": [
				[
					"cadenaJSON",
					"Text",
					"->",
					"Cadena en JSON a analizar"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo en el cual convertir los valores"
				],
				[
					"*",
					"Operador",
					"->",
					"Agrega la posición de la línea y el desplazamiento de cada propiedad si el valor devuelto es un objeto"
				],
				[
					"Resultado",
					"any, Object",
					"<-",
					"Valores extraídos de la cadena JSON"
				]
			],
			"Summary": "El comando **JSON Parse** analiza el contenido de una cadena con formato JSON y extrae los valores que puede almacenar en un campo o variable 4D."
		},
		"JSON Resolve pointers": {
			"Syntax": "**JSON Resolve pointers** ( *objeto* {; *opciones*} ) : Object",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto que contiene punteros JSON para resolver"
				],
				[
					"<-",
					"Objeto con punteros JSON resueltos (sólo si resultado es un objeto)"
				],
				[
					"opciones",
					"Object",
					"->",
					"Opciones para la resolución de punteros"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contiene el resultado del proceso"
				]
			],
			"Summary": "El comando **JSON Resolve pointers** resuelve todos los punteros JSON encontrados en el objeto, con respecto a la configuración de opciones (si existe)."
		},
		"JSON Stringify array": {
			"Syntax": "**JSON Stringify array** ( *array* {; *} ) : Text",
			"Params": [
				[
					"array",
					"Text array, Real array, Boolean array, Pointer array, Object array",
					"->",
					"Array cuyo contenido debe ser serializado"
				],
				[
					"*",
					"Operador",
					"->",
					"Mejorar el formato"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena que contiene el array JSON serializado"
				]
			],
			"Summary": "El comando **JSON Stringify array** convierte el array *array* 4D en un array JSON serializado."
		},
		"JSON Stringify": {
			"Syntax": "**JSON Stringify** ( *valor* {; *} ) : Text",
			"Params": [
				[
					"valor",
					"Object, any",
					"->",
					"Datos a convertir en cadena JSON"
				],
				[
					"*",
					"Operador",
					"->",
					"Mejorar el formato"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena que contiene el texto JSON serializado"
				]
			],
			"Summary": "El comando **JSON Stringify** convierte el parámetro *valor* en una cadena JSON."
		},
		"JSON TO SELECTION": {
			"Syntax": "**JSON TO SELECTION** ( *laTabla* ; *objetoJson* )",
			"Params": [
				[
					"laTable",
					"Table",
					"->",
					"Puntero a la tabla 4D"
				],
				[
					"objetoJson",
					"Text",
					"->",
					"Cadena en JSON"
				]
			],
			"Summary": "El comando **JSON TO SELECTION** copia el contenido del array de objetos JSON *jsonArray* en la selección de registros de *laTabla*."
		},
		"JSON Validate": {
			"Syntax": "**JSON Validate** ( *vJson* ; *vSchema* ) : Object",
			"Params": [
				[
					"vJson",
					"Object",
					"->",
					"Objeto JSON a validar"
				],
				[
					"vSchema",
					"Object",
					"->",
					"Esquema JSON utilizado para validar objetos JSON"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de validación y errores (si los hay)"
				]
			],
			"Summary": "El comando **JSON Validate** verifica la conformidad del contenido JSON *vJson* con las reglas definidas en el esquema JSON *vSchema*."
		},
		"Keystroke": {
			"Syntax": "**Keystroke**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Carácter introducido por el usuario"
				]
			],
			"Summary": "Keystroke devuelve el carácter introducido por el usuario en un campo o en un área editable."
		},
		"KILL WORKER": {
			"Syntax": "**KILL WORKER** {( *proceso* )}",
			"Params": [
				[
					"proceso",
					"Text, Integer",
					"->",
					"Número o nombre del proceso a matar (proceso actual si se omite)"
				]
			],
			"Summary": "El comando **KILL WORKER** envía un mensaje al proceso worker cuyo nombre o número que pasa en *proceso*, pidiéndole hacer caso omiso de los mensajes pendientes y poner fin a su ejecución tan pronto como termine la tarea actual."
		},
		"Last field number": {
			"Syntax": "**Last field number** ( *numTabla* ) : Integer<br/>**Last field number** ( *ptrTabla* ) : Integer",
			"Params": [
				[
					"numTabla &#124; ptrTabla",
					"Entero largo, Puntero",
					"->",
					"Número de tabla o puntero a una tabla"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de campo más alto en la tabla"
				]
			],
			"Summary": "El comando Last field number devuelve el número de campo más alto de los campos en la tabla cuyo número o puntero se pasa en *numTabla* o *ptrTabla*."
		},
		"Last query path": {
			"Syntax": "**Last query path** ( *formatDesc* ) : Text",
			"Params": [
				[
					"formatDesc",
					"Integer",
					"->",
					"Formato de descripción (Texto o XML)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Descripción de la ruta de la última búsqueda ejecutada"
				]
			],
			"Summary": "El comando Last query path devuelve la descripción interna detallada de la ruta real de la última búsqueda efectuada en los datos."
		},
		"Last query plan": {
			"Syntax": "**Last query plan** ( *formatDesc* ) : Text",
			"Params": [
				[
					"formatDesc",
					"Integer",
					"->",
					"Formato de descripción (Texto o XML)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Descripción del plan de la última búsqueda ejecutada"
				]
			],
			"Summary": "El comando Last query plan devuelve la descripción interna del plan de ejecución de la última búsqueda llevada a cabo en los datos."
		},
		"LAST RECORD": {
			"Syntax": "**LAST RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual mover el último registro seleccionado o Tabla por defecto, si se omite"
				]
			],
			"Summary": "**LAST RECORD** designa el último registro de la selección de *tabla* como registro actual y lo carga en memoria."
		},
		"Last table number": {
			"Syntax": "**Last table number**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tabla más alto en la base"
				]
			],
			"Summary": "Last table number devuelve el número de tablas en la base."
		},
		"Last update log path": {
			"Syntax": "**Get last update log path** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso del historial de actualización más reciente"
				]
			],
			"Summary": "El comando **Get last update log path** devuelve la ruta de acceso completa del archivo de historial de actualización más reciente en la máquina donde se llama."
		},
		"LAUNCH EXTERNAL PROCESS": {
			"Syntax": "**LAUNCH EXTERNAL PROCESS** ( *nomArchivo* {; *flujoEntrada* {; *flujoSalida* {; *flujoError*}}}{; *pid*} )",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Ruta de acceso y argumentos del archivo a abrir"
				],
				[
					"flujoEntrada",
					"Text, Blob",
					"->",
					"Flujo de entrada(stdin)"
				],
				[
					"flujoSalida",
					"Text, Blob",
					"<-",
					"Flujo de salida (stdout)"
				],
				[
					"flujoError",
					"Text, Blob",
					"<-",
					"Flujo de error(stderr)"
				],
				[
					"pid",
					"Integer",
					"<-",
					"Identificador único del proceso externo"
				]
			],
			"Summary": "A partir de 4D v19 R4, recomendamos el uso de la `4D.SystemWorker class` para ejecutar y controlar los procesos externos."
		},
		"LDAP LOGIN": {
			"Syntax": "**LDAP LOGIN** ( *url* ; *login* ; *password* {; *digest*} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"URL del servidor LDAP al cual conectarse"
				],
				[
					"login",
					"Text",
					"->",
					"Cuenta del usuario"
				],
				[
					"password",
					"Text",
					"->",
					"Contraseña del usuario"
				],
				[
					"digest",
					"Integer",
					"->",
					"0 = enviar contraseña en digest MD5 (por defecto), 1 = enviar contraseña sin encripción"
				]
			],
			"Summary": "El comando **LDAP LOGIN** abre una conexión de sólo lectura en el servidor LDAP especificado por el parámetro *url* con los identificadores *login* y *contraseña* suministrados."
		},
		"LDAP LOGOUT": {
			"Syntax": "**LDAP LOGOUT**",
			"Params": [],
			"Summary": "El comando **LDAP LOGOUT** cierra la conexión con un servidor LDAP en el proceso actual (si aplica)."
		},
		"LDAP SEARCH ALL": {
			"Syntax": "**LDAP SEARCH ALL** ( *dnRootEntry* ; *arrResult* ; *filtro* {; *alcance* {; *atributos* {; *atributosenArray*}}} )",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"Distinguished Name del elemento raíz donde iniciar la búsqueda"
				],
				[
					"arrResult",
					"Object array",
					"<-",
					"Resultado de la búsqueda"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de búsqueda LDAP"
				],
				[
					"alcance",
					"Text",
					"->",
					"Alcance de la búsqueda: \"base\" (por defecto), \"one\", o \"sub\""
				],
				[
					"atributos",
					"Text array",
					"->",
					"Atributos a recuperar"
				],
				[
					"atributosenArray",
					"Boolean array",
					"->",
					"True = forzar el retorno de los atributos como array; false = forzar el retorno de los atributos como variables simples"
				]
			],
			"Summary": "El comando **LDAP SEARCH ALL** busca todas las ocurrencias que coinciden con los criterios definidos en el servidor LDAP objetivo."
		},
		"LDAP Search": {
			"Syntax": "**LDAP Search** ( *dnRootEntry* ; *filtro* {; *alcance* {; *atributos* {; *atributosEnArray*}}} ) : Object",
			"Params": [
				[
					"dnRootEntry",
					"Text",
					"->",
					"Distinguished Name del elemento raíz donde la búsqueda se inicia"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de búsqueda LDAP"
				],
				[
					"alcance",
					"Text",
					"->",
					"Campo de acción de la búsqueda: \"base\" (por defecto), \"one\", o \"sub\""
				],
				[
					"atributos",
					"Text array",
					"->",
					"Atributo(s) a recuperar"
				],
				[
					"atributosEnArray",
					"Boolean array",
					"->",
					"True = forzar el retorno de los atributos como array; False = forzar el retorno de los atributos como una variable simple"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Atributos llave/valor"
				]
			],
			"Summary": "El comando **LDAP Search** busca la primera ocurrencia que coincida con los criterios definidos en el servidor LDAP objetivo."
		},
		"Length": {
			"Syntax": "**Length** ( *cadena* ) : Integer",
			"Params": [
				[
					"cadena",
					"Text",
					"->",
					"Cadena de  la cual devolver la longitud"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Longitud de la cadena"
				]
			],
			"Summary": "**Length** permite obtener la longitud de *cadena*."
		},
		"Level": {
			"Syntax": "**Level**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nivel de ruptura o del encabezado actual"
				]
			],
			"Summary": "Level se utiliza para determinar el nivel de ruptura o del encabezado actual."
		},
		"License usage": {
			"Syntax": "**License usage** : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Una colección de objetos con información sobre las licencias retenidas."
				]
			],
			"Summary": "El comando **License usage** devuelve una colección de objetos que contienen información sobre las licencias retenidas."
		},
		"List item parent": {
			"Syntax": "**List item parent** ( {* ;} *lista* ; refElem | * ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de la lista (si se omite *), o Nombre de objeto de tipo lista (si se pasa*)"
				],
				[
					"refElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia del elemento padre o 0 si no hay"
				]
			],
			"Summary": "El comando List item parent devuelve el número de referencia del elemento padre."
		},
		"List item position": {
			"Syntax": "**List item position** ( {* ;} *lista* ; *refElem* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es una referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) Nombre de objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referencia del elemento"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posición del elemento en listas desplegadas/contraídas"
				]
			],
			"Summary": "El comando List item position devuelve la posición del elemento cuyo número de referencia o nombre de objeto se pasa en *refElem*, en la lista cuyo número de referencia se pasa en *lista*."
		},
		"LIST OF CHOICE LISTS": {
			"Syntax": "**LIST OF CHOICE LISTS** ( *arrayNums* ; *arrayNoms* )",
			"Params": [
				[
					"arrayNums",
					"Integer array",
					"<-",
					"Números de las listas"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nombres de las listas"
				]
			],
			"Summary": "El comando LIST OF CHOICE LISTS devuelve, en los arrays sincronizados *arraysNums* y *arrayNoms*, los números y los nombres de las listas definidas en el editor de listas en el entorno Diseño."
		},
		"LIST OF STYLE SHEETS": {
			"Syntax": "**LIST OF STYLE SHEETS** ( *arrHojasEstilo* )",
			"Params": [
				[
					"arrHojasEstilo",
					"Text array",
					"<-",
					"Nombres de las hojas de estilo definidas en la aplicación"
				]
			],
			"Summary": "El comando **LIST OF STYLE SHEETS** devuelve la lista de hojas de estilo de la aplicación en el array *arrHojasEstilo*."
		},
		"LIST TO ARRAY": {
			"Syntax": "**LIST TO ARRAY** ( *lista* ; *array* {; *refElementos*} )",
			"Params": [
				[
					"lista",
					"Text, Integer",
					"->",
					"Lista de la cual copiar los elementos de primer nivel"
				],
				[
					"array",
					"Array",
					"<-",
					"Array al cual copiar los elementos de la lista"
				],
				[
					"refElementos",
					"Array",
					"<-",
					"Números de referencia de los elementos de la lista"
				]
			],
			"Summary": "El comando LIST TO ARRAY crea o reemplaza el array a*rray* con los elementos del primer nivel de la lista o de la lista de selección designada por *lista*."
		},
		"LIST TO BLOB": {
			"Syntax": "**LIST TO BLOB** ( *lista* ; *BLOB* {; *} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Lista jerárquica a almacenar en el BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a recibir la lista jerárquica"
				],
				[
					"*",
					"Operador",
					"->",
					"* añadir el valor"
				]
			],
			"Summary": "El comando LIST TO BLOB almacena la lista jerárquica *list* en el BLOB *blob*."
		},
		"LISTBOX COLLAPSE": {
			"Syntax": "**LISTBOX COLLAPSE** ( {* ;} *objeto* {; *recursivo* {; *selector* {; *grueso* {; *columna*}}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena), Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variables (si se omite *)"
				],
				[
					"recursivo",
					"Boolean",
					"->",
					"True = contraer los subniveles<br/>False = no contraer los subniveles"
				],
				[
					"selector",
					"Integer",
					"->",
					"Parte del list box a contraer"
				],
				[
					"grueso",
					"Integer",
					"->",
					"Número de línea de la ruptura a contraer o <br/>Número de nivel del listbox a contraer"
				],
				[
					"columna",
					"Integer",
					"->",
					"Número de columna de la ruptura a contraer"
				]
			],
			"Summary": "El comando LISTBOX COLLAPSE se utiliza para contraer líneas de ruptura del objeto list box designado por los parámetros *objeto* y *\\** parámetros."
		},
		"LISTBOX DELETE COLUMN": {
			"Syntax": "**LISTBOX DELETE COLUMN** ( {* ;} *objeto* ; *posicionCol* {; *numero*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"posicionCol",
					"Integer",
					"->",
					"Número de la columna a eliminar"
				],
				[
					"numero",
					"Integer",
					"->",
					"Número de columnas a eliminar"
				]
			],
			"Summary": "El comando LISTBOX DELETE COLUMN borra una o más columnas (visibles o no) en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX DELETE ROWS": {
			"Syntax": "**LISTBOX DELETE ROWS** ( {* ;} *objeto* ; *posicionL* {; *numLineas*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"posicionL",
					"Integer",
					"->",
					"Posición de la fila a eliminar"
				],
				[
					"numLineas",
					"Integer",
					"->",
					"Número de líneas a borrar"
				]
			],
			"Summary": "El comando LISTBOX DELETE ROWS borra una o varias líneas a partir de *posicion* (visible o no) del list box definido por los parámetros *objeto* y \\*."
		},
		"LISTBOX DUPLICATE COLUMN": {
			"Syntax": "**LISTBOX DUPLICATE COLUMN** ( {* ;} *objeto* ; *posCol* ; *nomCol* ; *varCol* ; *nomEncab* ; *varEncab* {; *nomPie* ; *varPie*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"posCol",
					"Integer",
					"->",
					"Ubicación de la nueva columna duplicada"
				],
				[
					"nomCol",
					"Text",
					"->",
					"Nombre de la nueva columna"
				],
				[
					"varCol",
					"Array, Field, Variable, Pointer",
					"->",
					"Nombre de la variable array de la columna o campo o variable"
				],
				[
					"nomEncab",
					"Text",
					"->",
					"Nombre del objeto del encabezado de la columna"
				],
				[
					"varEncab",
					"Integer, Pointer",
					"->",
					"Variable del encabezado de la columna"
				],
				[
					"nomPie",
					"Text",
					"->",
					"Nombre del objeto del pie de la columna"
				],
				[
					"varPie",
					"Variable, Pointer",
					"->",
					"Variable del pie de la columna"
				]
			],
			"Summary": "El comando **LISTBOX DUPLICATE COLUMN** duplica la columna definida por los parámetros *objeto* y *\\** por programación en el contexto del formulario ejecutado (Modo Aplicación)."
		},
		"LISTBOX EXPAND": {
			"Syntax": "**LISTBOX EXPAND** ( {* ;} *objeto* {; *recursivo* {; *selector* {; *grueso* {; *columna*}}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objetos es un nombre de objeto (cadena). Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"recursivo",
					"Boolean",
					"->",
					"Verdadero = desplegar los subniveles, Falso = no desplegar los subniveles"
				],
				[
					"selector",
					"Integer",
					"->",
					"Parte del list box a desplegar"
				],
				[
					"grueso",
					"Integer",
					"->",
					"Número de línea de la ruptura a desplegar o Número de nivel del listbox a desplegar"
				],
				[
					"columna",
					"Integer",
					"->",
					"Número de columna de la ruptura a desplegar"
				]
			],
			"Summary": "El comando LISTBOX EXPAND se utiliza para desplegar las líneas de ruptura del objeto list box designado por los parámetros objeto y \\*."
		},
		"LISTBOX Get array": {
			"Syntax": "**LISTBOX Get array** ( {* ;} *objeto* ; *tipoArray* ) : Pointer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o<br/>Variable (si * se omite)"
				],
				[
					"tipoArray",
					"Integer",
					"->",
					"Tipo de array"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero al array asociado a la propiedad"
				]
			],
			"Summary": "**Nota:** este comando sólo funciona con los list box de tipo array."
		},
		"LISTBOX GET ARRAYS": {
			"Syntax": "**LISTBOX GET ARRAYS** ( {* ;} *objeto* ; *arrNomsCols* ; *arrNomsEncabezados* ; *arrVarCols* ; *arrVarEncabezados* ; *arrColsVisibles* ; *arrEstilos* {; *arrNomsPies* ; *arrVarsPies*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrNomsCols",
					"Text array",
					"<-",
					"Nombres de objeto de las columnas"
				],
				[
					"arrNomsEncabezados",
					"Text array",
					"<-",
					"Nombres de objeto de los títulos"
				],
				[
					"arrVarCols",
					"Pointer array",
					"<-",
					"Punteros hacia las variables de las columnas"
				],
				[
					"arrVarEncabezados",
					"Pointer array",
					"<-",
					"Punteros hacia campos o Nil"
				],
				[
					"arrColsVisibles",
					"Boolean array",
					"<-",
					"Visibilidad de cada columna"
				],
				[
					"arrEstilos",
					"Pointer array",
					"<-",
					"Punteros a los arrays o a las variables de estilos de colores y de visibilidad o Nil"
				],
				[
					"arrNomsPies",
					"Text array",
					"<-",
					"Nombres de los objetos de pies de columna"
				],
				[
					"arrVarsPies",
					"Pointer array",
					"<-",
					"Punteros a las variables de pies de columna"
				]
			],
			"Summary": "El comando **LISTBOX GET ARRAYS** devuelve un conjunto de arrays sincronizados ofreciendo información sobre cada columna (visible o invisible) del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get auto row height": {
			"Syntax": "**LISTBOX Get auto row height**  ( {* ;} *objeto* ; *selector* {; *unidad*} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable."
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Valor altura a obtener: lk row min height o lk row max height"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura: 0 = píxeles, 1 = líneas"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de altura de línea seleccionado"
				]
			],
			"Summary": "El comando **LISTBOX Get auto row height**  devuelve el valor de altura de fila mínimo o máximo actual definido para el objeto list box designado utilizando los parámetros *objeto* y *\\**."
		},
		"LISTBOX GET CELL COORDINATES": {
			"Syntax": "**LISTBOX GET CELL COORDINATES** ( {* ;} *object* ; *column* ; *linea* ; *izquierda* ; *arriba* ; *der* ; *abajo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica = objeto es un nombre de objeto (cadena) Si se omite = objeto es una variable"
				],
				[
					"object",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o variable (si * se omite)"
				],
				[
					"column",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"linea",
					"Integer",
					"->",
					"Número de línea"
				],
				[
					"izquierda",
					"Integer",
					"<-",
					"Coordenada izquierda del objeto"
				],
				[
					"arriba",
					"Integer",
					"<-",
					"Coordenada superior del objeto"
				],
				[
					"der",
					"Integer",
					"<-",
					"Coordenada derecha del objeto"
				],
				[
					"abajo",
					"Integer",
					"<-",
					"Coordenada inferior del objeto"
				]
			],
			"Summary": "El comando LISTBOX GET CELL COORDINATES devuelve en las variables o campos *izq*, *arriba*, *der* y *inf* las coordenadas (en puntos) de la celda designada por los parámetros *columna* y *linea*, en el list box definido por *\\** y *objeto*."
		},
		"LISTBOX GET CELL POSITION": {
			"Syntax": "**LISTBOX GET CELL POSITION** ( {* ;} *objeto* {; *X* ; *Y* }; *columna* ; *linea* {; *varCol*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"X",
					"Real",
					"->",
					"Coordenada horizontal del ratón"
				],
				[
					"Y",
					"Real",
					"->",
					"Coordenada vertical del ratón"
				],
				[
					"columna",
					"Integer",
					"<-",
					"Número de columna"
				],
				[
					"linea",
					"Integer",
					"<-",
					"Número de fila"
				],
				[
					"varCol",
					"Pointer",
					"<-",
					"Puntero a la variable de la columna"
				]
			],
			"Summary": "El comando **LISTBOX GET CELL POSITION** devuelve los números de la *columna* y de la *fila* correspondientes a la ubicación en el list box (designado por *\\** y *objeto*) del último clic, última selección realizada con el teclado, o las coordenadas vertical y horizontal del ratón."
		},
		"LISTBOX Get column formula": {
			"Syntax": "**LISTBOX Get column formula** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Fórmula asociada a la columna"
				]
			],
			"Summary": "El comando **LISTBOX Get column formula** devuelve la fórmula asociada a la columna de list box designada por los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get column width": {
			"Syntax": "**LISTBOX Get column width** ( {* ;} *objeto* {; *anchoMin* {; *anchoMax*}} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"anchoMin",
					"Integer",
					"<-",
					"Ancho mínimo de la columna (en píxeles)"
				],
				[
					"anchoMax",
					"Integer",
					"<-",
					"Ancho máximo de la columna (en píxeles)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Ancho de la columna (en píxeles)"
				]
			],
			"Summary": "El comando LISTBOX Get column width devuelve el largo (en píxeles) de la columna designada por los parámetros *objeto* y *\\*."
		},
		"LISTBOX Get footer calculation": {
			"Syntax": "**LISTBOX Get footer calculation** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Tipo de cálculo"
				]
			],
			"Summary": "El nuevo comando **LISTBOX Get footer calculation** devuelve el tipo de cálculo asociado al área de pie de página del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get footers height": {
			"Syntax": "**LISTBOX Get footers height** ( {* ;} *objeto* {; *unidad*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura: 0 o si se omite = píxeles, 1 = líneas"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Alto de la línea"
				]
			],
			"Summary": "El comando **LISTBOX Get footers height** devuelve la altura de la línea de pie del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX GET GRID COLORS": {
			"Syntax": "**LISTBOX GET GRID COLORS** ( {* ;} *objeto* ; *colorH* ; *colorV* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"colorH",
					"Text, Integer",
					"<-",
					"Valor de color RGB para las líneas horizontales"
				],
				[
					"colorV",
					"Text, Integer",
					"<-",
					"Valor de color RGB para las líneas verticales"
				]
			],
			"Summary": "El comando **LISTBOX GET GRID COLORS** devuelve el color de las líneas horizontales y verticales que componen la rejilla del objeto list box object designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX GET GRID": {
			"Syntax": "**LISTBOX GET GRID** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"horizontal",
					"Boolean",
					"<-",
					"True = visible, False = oculto"
				],
				[
					"vertical",
					"Boolean",
					"<-",
					"True = visible, False = oculto"
				]
			],
			"Summary": "El comando **LISTBOX GET GRID** devuelve el estado visible/oculto de las líneas horizontales y/o verticales que componen la rejilla del objeto list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get headers height": {
			"Syntax": "**LISTBOX Get headers height** ( {* ;} *objeto* {; *unidad*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura: 0 o si se omite = píxeles, 1 = líneas"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Alto de la línea"
				]
			],
			"Summary": "El comando **LISTBOX Get headers height** devuelve la altura de la línea de encabezado del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX GET HIERARCHY": {
			"Syntax": "**LISTBOX GET HIERARCHY** ( {* ;} *objeto* ; *jerarquico* {; *jerarquia*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variables (si * se omite)"
				],
				[
					"jerarquico",
					"Boolean",
					"<-",
					"True = list box jerárquico, False = list box no jerárquico"
				],
				[
					"jerarquia",
					"Pointer array",
					"<-",
					"Array de punteros"
				]
			],
			"Summary": "El comando LISTBOX GET HIERARCHY permite buscar las propiedades jerárquicas del objeto list box designado por los parámetros *objeto* y *\\** ."
		},
		"LISTBOX Get locked columns": {
			"Syntax": "**LISTBOX Get locked columns** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Número de columnas bloqueadas"
				]
			],
			"Summary": "El comando **LISTBOX Get locked columns** devuelve el número de columnas bloqueadas en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get number of columns": {
			"Syntax": "**LISTBOX Get number of columns** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de columnas"
				]
			],
			"Summary": "El comando LISTBOX Get number of columns devuelve el número total de columnas (visibles o invisibles) presentes en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get number of rows": {
			"Syntax": "**LISTBOX Get number of rows** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de filas"
				]
			],
			"Summary": "El comando LISTBOX Get number of rows devuelve el número de filas del list box designado por los parámetros objeto y \\*."
		},
		"LISTBOX GET OBJECTS": {
			"Syntax": "**LISTBOX GET OBJECTS** ( {* ;} *objeto* ; *arrayNomObjeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si * se especifica) o Variable (si * se omite)"
				],
				[
					"arrayNomObjeto",
					"Text array",
					"<-",
					"Nombres de los sub objetos del list box (encabezados, columnas, pies)"
				]
			],
			"Summary": "El comando **LISTBOX GET OBJECTS** devuelve un array que contiene los nombres de todos los objetos que componen el list box designado por los parámetros *objeto* y *\\** ."
		},
		"LISTBOX GET PRINT INFORMATION": {
			"Syntax": "**LISTBOX GET PRINT INFORMATION** ( {* ;} *objeto* ; *selector* ; *info* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Información a obtener"
				],
				[
					"info",
					"Integer",
					"<-",
					"Valor actual"
				]
			],
			"Summary": "El comando LISTBOX GET PRINT INFORMATION devuelve la información actual relativa a la impresión del objeto list box designado por los parámetros *objeto* y *\\** ."
		},
		"LISTBOX Get row color as number": {
			"Syntax": "**LISTBOX Get row color as number** ( {* ;} *objeto* ; *fila* {; *tipoColor*} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Variable (si * se omite)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Número de fila"
				],
				[
					"tipoColor",
					"Integer",
					"->",
					"Listbox color de fuente (por defecto) o Listbox color de fondo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de color"
				]
			],
			"Summary": "**Nota:** este comando sólo funciona con los list box de tipo array."
		},
		"LISTBOX Get row color": {
			"Syntax": "**LISTBOX Get row color** ( {* ;} *objeto* ; *fila* {; *tipoColor*} )  : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, el objeto es un nombre de objeto (cadena) Si se omite, el objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Variable (si se omite *)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Numero de fila"
				],
				[
					"tipoColor",
					"Integer",
					"->",
					"Color de fuente del list box (predeterminado) o color de fondo del list box"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor del color"
				]
			],
			"Summary": "**Nota:** este comando solo funciona con list boxes de tipo array."
		},
		"LISTBOX Get row font style": {
			"Syntax": "**LISTBOX Get row font style** ( {* ;} *objeto* ; *linea* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto(si se especifica *) o<br/>Variable (si se omite *)"
				],
				[
					"linea",
					"Integer",
					"->",
					"Número de línea"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de estilo"
				]
			],
			"Summary": "**Nota:** este comando sólo funciona con los list box de tipo array."
		},
		"LISTBOX Get row height": {
			"Syntax": "**LISTBOX Get row height**  ( {* ;} *objeto* ; *linea* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"linea",
					"Integer",
					"->",
					"Línea de list box, cuya altura desea obtener"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura de la fila"
				]
			],
			"Summary": "El comando **LISTBOX Get row height**  devuelve la altura de la *fila* especificada en el objeto list box designado utilizando el *objeto* y los parámetros *\\**."
		},
		"LISTBOX Get rows height": {
			"Syntax": "**LISTBOX Get rows height** ( {* ;} *objeto* {; *unidad*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unida del valor de altura: 0 o si se omite = píxeles, 1 = líneas"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Altura de la línea"
				]
			],
			"Summary": "El comando **LISTBOX Get rows height** devuelve la altura actual (en píxeles o en líneas) de las líneas del objeto list box designado utilizando los parámetros *objeto* y *\\**."
		},
		"LISTBOX Get static columns": {
			"Syntax": "**LISTBOX Get static columns** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"resultado",
					"Integer",
					"<-",
					"Número de columnas estáticas"
				]
			],
			"Summary": "El comando **LISTBOX Get static columns** devuelve el número de columnas estáticas en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX GET TABLE SOURCE": {
			"Syntax": "**LISTBOX GET TABLE SOURCE** ( {* ;} *objeto* ; *numTabla* {; *nombre* {; *nomSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"numTabla",
					"Integer",
					"<-",
					"Número de la tabla de la selección"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre de la selección temporal o \"\" para la selección actual"
				],
				[
					"nomSel",
					"Text",
					"<-",
					"Nombre del conjunto seleccionado"
				]
			],
			"Summary": "El comando LISTBOX GET TABLE SOURCE permite conocer la fuente actual de datos mostrados en el list box designado por los parámetros *\\** y *objeto*."
		},
		"LISTBOX INSERT COLUMN FORMULA": {
			"Syntax": "**LISTBOX INSERT COLUMN FORMULA** ( {* ;} *objeto* ; *posicionCol* ; *nomCol* ; *formula* ; *tipoDatos* ; *nomEncabezado* ; *varEncabezado* {; *nomPie* ; *variablePie*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si * se omite)"
				],
				[
					"posicionCol",
					"Integer",
					"->",
					"Ubicación de la columna a insertar"
				],
				[
					"nomCol",
					"Text",
					"->",
					"Nombre del objeto de la columna"
				],
				[
					"formula",
					"Text",
					"->",
					"Fórmula 4D asociada a la columna"
				],
				[
					"tipoDatos",
					"Integer",
					"->",
					"Tipo de resultado de la fórmula"
				],
				[
					"nomEncabezado",
					"Text",
					"->",
					"Nombre del objeto del encabezado de la columna"
				],
				[
					"varEncabezado",
					"Integer, Pointer",
					"->",
					"Variable del encabezado de la columna"
				],
				[
					"nomPie",
					"Text",
					"->",
					"Nombre del objeto de pie de la columna"
				],
				[
					"variablePie",
					"Variable, Pointer",
					"->",
					"Variable de pie de columna"
				]
			],
			"Summary": "El comando **LISTBOX INSERT COLUMN FORMULA** inserta una columna en el listbox designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX INSERT COLUMN": {
			"Syntax": "**LISTBOX INSERT COLUMN** ( {* ;} *objeto* ; *posicionCol* ; *nomCol* ; *variableCol* ; *nomEncabezado* ; *varTitulo* {; *nomPie* ; *nomVar*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"posicionCol",
					"Integer",
					"->",
					"Ubicación de la columna a insertar"
				],
				[
					"nomCol",
					"Text",
					"->",
					"Nombre del objeto de la columna"
				],
				[
					"variableCol",
					"Array, Field, Variable, Pointer",
					"->",
					"Nombre de la variable de la columna"
				],
				[
					"nomEncabezado",
					"Text",
					"->",
					"Nombre del objeto del título de la columna"
				],
				[
					"varTitulo",
					"Integer, Pointer",
					"->",
					"Variable de título de la columna"
				],
				[
					"nomPie",
					"Text",
					"->",
					"Nombre del objeto de pie de la columna"
				],
				[
					"nomVar",
					"Variable, Pointer",
					"->",
					"Variable de pie de la columna"
				]
			],
			"Summary": "El comando **LISTBOX INSERT COLUMN** inserta una columna en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX INSERT ROWS": {
			"Syntax": "**LISTBOX INSERT ROWS** ( {* ;} *objeto* ; *posicionL* {; *numLineas*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"posicionL",
					"Integer",
					"->",
					"Posición de la fila a insertar"
				],
				[
					"numLineas",
					"Integer",
					"->",
					"Número de líneas a insertar"
				]
			],
			"Summary": "El comando **LISTBOX INSERT ROWS** inserta una o varias nuevas líneas en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX MOVE COLUMN": {
			"Syntax": "**LISTBOX MOVE COLUMN** ( {* ;} *objeto* ; *posicionCol* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Variable (si se omite *) de la columna a mover"
				],
				[
					"posicionCol",
					"Integer",
					"->",
					"Nueva ubicación de la columna"
				]
			],
			"Summary": "El comando **LISTBOX MOVE COLUMN** mueve por programación la columna designada por los parámetros *objeto* y *\\** en el contexto del formulario en ejecución (modo Aplicación)."
		},
		"LISTBOX MOVED COLUMN NUMBER": {
			"Syntax": "**LISTBOX MOVED COLUMN NUMBER** ( {* ;} *objeto* ; *antPosicion* ; *nuevPosicion* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"antPosicion",
					"Integer",
					"<-",
					"Posición anterior de la columna movida"
				],
				[
					"nuevPosicion",
					"Integer",
					"<-",
					"Nueva posición de la columna movida"
				]
			],
			"Summary": "El comando LISTBOX MOVED COLUMN NUMBER devuelve dos números en *antPosicion* y *nuevPosicion* indicando respectivamente la posición anterior y la nueva posición de la columna movida en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX MOVED ROW NUMBER": {
			"Syntax": "**LISTBOX MOVED ROW NUMBER** ( {* ;} *objeto* ; *antPosicion* ; *nuevPosicion* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"antPosicion",
					"Integer",
					"<-",
					"Posición anterior de la fila movida"
				],
				[
					"nuevPosicion",
					"Integer",
					"<-",
					"Nueva posición de la fila movida"
				]
			],
			"Summary": "El comando LISTBOX MOVED ROW NUMBER devuelve dos números en *antPosicion* y *nuevPosicion* indicando respectivamente la posición anterior y la nueva posición de la fila movida en el list box, especificadas por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SELECT BREAK": {
			"Syntax": "**LISTBOX SELECT BREAK** ( {* ;} *objeto* ; *linea* ; *columna* {; *accion*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable (si se omite *)"
				],
				[
					"linea",
					"Integer",
					"->",
					"Número de línea de la ruptura"
				],
				[
					"columna",
					"Integer",
					"->",
					"Número de columna de la ruptura"
				],
				[
					"accion",
					"Integer",
					"->",
					"Acción de selección"
				]
			],
			"Summary": "El comando LISTBOX SELECT BREAK se utiliza para seleccionar líneas de ruptura en el objeto list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SELECT ROW": {
			"Syntax": "**LISTBOX SELECT ROW** ( {* ;} *objeto* ; *posicionL* {; *accion*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"posicionL",
					"Integer",
					"->",
					"Número de la fila a seleccionar"
				],
				[
					"accion",
					"Integer",
					"->",
					"Acción de selección"
				]
			],
			"Summary": "El comando LISTBOX SELECT ROW selecciona la fila cuyo número se pasa en *posicion* en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SELECT ROWS": {
			"Syntax": "**LISTBOX SELECT ROWS** ( {* ;} *objeto* ; *seleccion* {; *accion*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, el objeto es un nombre de objeto (cadena) Si se omite, el objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"seleccion",
					"Object, Collection",
					"->",
					"Objeto o colección que describe las líneas a seleccionar"
				],
				[
					"accion",
					"Integer",
					"->",
					"lk replace selection (por defecto si se omite), lk add to selection, lk remove from selection"
				]
			],
			"Summary": "El comando **LISTBOX SELECT ROWS** selecciona las líneas de un list box selección de entidad o un list box colección que corresponde a las entidades u objetos contenidos en el parámetro de *seleccion*."
		},
		"LISTBOX SET ARRAY": {
			"Syntax": "**LISTBOX SET ARRAY** ( {* ;} *objeto* ; *tipoArray* ; *ptrArray* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Variable (si se omite *)"
				],
				[
					"tipoArray",
					"Integer",
					"->",
					"Tipo de array"
				],
				[
					"ptrArray",
					"Pointer",
					"->",
					"Array a asociar a la propiedad"
				]
			],
			"Summary": "**Nota**: este comando sólo funciona con los list box de tipo array."
		},
		"LISTBOX SET AUTO ROW HEIGHT": {
			"Syntax": "**LISTBOX SET AUTO ROW HEIGHT** ( {* ;} *objeto* ; *selector* ; *valor* ; *unidad* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable."
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Valor de la altura a definir: lk row min height o lk row max height"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor mínimo o máximo de la altura de la fila"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura: 0 = píxeles, 1 = líneas"
				]
			],
			"Summary": "El comando LISTBOX SET AUTO ROW HEIGHT le permite establecer el valor de altura de fila mínimo o máximo en el objeto de list box designado utilizando los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET COLUMN FORMULA": {
			"Syntax": "**LISTBOX SET COLUMN FORMULA** ( {* ;} *objeto* ; *formula* ; *tipoDato* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"formula",
					"Text",
					"->",
					"Fórmula 4D asociada a la columna"
				],
				[
					"tipoDato",
					"Integer",
					"->",
					"Tipo de resultado de la fórmula"
				]
			],
			"Summary": "El comando **LISTBOX SET COLUMN FORMULA** modifica la *formula* asociada a la columna de list box designada por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET COLUMN WIDTH": {
			"Syntax": "**LISTBOX SET COLUMN WIDTH** ( {* ;} *objeto* ; *ancho* {; *anchoMin* {; *anchoMax*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"ancho",
					"Integer",
					"->",
					"Ancho de la columna (en píxeles)"
				],
				[
					"anchoMin",
					"Integer",
					"->",
					"Ancho mínimo de columna (en píxeles)"
				],
				[
					"anchoMax",
					"Integer",
					"->",
					"Ancho máximo de columna (en píxeles)"
				]
			],
			"Summary": "El comando LISTBOX SET COLUMN WIDTH le permite modificar por programación el ancho de una o todas las columnas del objeto (list box, columna o título) designado utilizando los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET FOOTER CALCULATION": {
			"Syntax": "**LISTBOX SET FOOTER CALCULATION** ( {* ;} *objeto* ; *calculo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"calculo",
					"Integer",
					"->",
					"Cálculo para el área de pie"
				]
			],
			"Summary": "El comando **LISTBOX SET FOOTER CALCULATION** permite definir el cálculo automático asociado al área de pie del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET FOOTERS HEIGHT": {
			"Syntax": "**LISTBOX SET FOOTERS HEIGHT** ( {* ;} *objeto* ; *altura* {; *unidad*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"altura",
					"Integer",
					"->",
					"Alto de la línea"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura: 0 o si se omite = píxeles, 1 = líneas"
				]
			],
			"Summary": "El comando **LISTBOX SET FOOTERS HEIGHT** modifica por programación la altura de la línea de pie del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET GRID COLOR": {
			"Syntax": "**LISTBOX SET GRID COLOR** ( {* ;} *objeto* ; *color* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"color",
					"Text, Integer",
					"->",
					"Valor de color RGB"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"Utilice el color para las líneas horizontales"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"Utilice el color para las líneas verticales"
				]
			],
			"Summary": "El comando **LISTBOX SET GRID COLOR** le permite modificar el color de la rejilla del objeto list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET GRID": {
			"Syntax": "**LISTBOX SET GRID** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"horizontal",
					"Boolean",
					"->",
					"True = mostrar, False = ocultar"
				],
				[
					"vertical",
					"Boolean",
					"->",
					"True = mostrar, False = ocultar"
				]
			],
			"Summary": "El comando LISTBOX SET GRID permite mostrar u ocultar las líneas horizontales y/o verticales que componen la matriz del objeto list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET HEADERS HEIGHT": {
			"Syntax": "**LISTBOX SET HEADERS HEIGHT** ( {* ;} *objeto* ; *altura* {; *unidad*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"altura",
					"Integer",
					"->",
					"Alto de la línea"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura: 0 o si se omite = píxeles, 1 = líneas"
				]
			],
			"Summary": "El comando **LISTBOX SET HEADERS HEIGHT** modifica por programación la altura de la línea de encabezado del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET HIERARCHY": {
			"Syntax": "**LISTBOX SET HIERARCHY** ( {* ;} *objeto* ; *jerarquico* {; *jerarquia*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"jerarquico",
					"Boolean",
					"->",
					"True = list box jerárquico False = list box no jerárquico"
				],
				[
					"jerarquia",
					"Pointer array",
					"->",
					"Array de punteros"
				]
			],
			"Summary": "El comando LISTBOX SET HIERARCHY permite configurar el objeto list box designado por los parámetros objeto y *\\** en modo jerárquico o no jerárquico."
		},
		"LISTBOX SET LOCKED COLUMNS": {
			"Syntax": "**LISTBOX SET LOCKED COLUMNS** ( {* ;} *objeto* ;  *numColumnas* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"numColumnas",
					"Integer",
					"->",
					"Número de columnas a bloquear"
				]
			],
			"Summary": "El comando **LISTBOX SET LOCKED COLUMNS** bloquea las primeras *numColumnas* columnas izquierdas del list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET ROW COLOR": {
			"Syntax": "**LISTBOX SET ROW COLOR** ( {* ;} *objeto* ; *fila* ; *color* {; *tipoColor*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o  Variable (si se omite *)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Numero de fila"
				],
				[
					"color",
					"Text, Integer",
					"->",
					"Valor de color RGB"
				],
				[
					"tipoColor",
					"Integer",
					"->",
					"color de fuente del Listbox (por defecto) o color de fondo del Listbox"
				]
			],
			"Summary": "**Nota:** este comando sólo funciona con listboxes de tipo array."
		},
		"LISTBOX SET ROW FONT STYLE": {
			"Syntax": "**LISTBOX SET ROW FONT STYLE** ( {* ;} *objeto* ; *fila* ; *estilo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Variable (si * se omite)"
				],
				[
					"fila",
					"Integer",
					"->",
					"Número de fila"
				],
				[
					"estilo",
					"Integer",
					"->",
					"Estilo de fuente"
				]
			],
			"Summary": "**Nota:** este comando sólo funciona con los list boxes de tipo array."
		},
		"LISTBOX SET ROW HEIGHT": {
			"Syntax": "**LISTBOX SET ROW HEIGHT** ( {* ;} *objeto* ; *linea* ; *altura* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre objeto (si * se especifica) o Variable (si * se omite)"
				],
				[
					"linea",
					"Integer",
					"->",
					"Línea de list box cuya altura desea definir"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura de línea de list box"
				]
			],
			"Summary": "El comando **LISTBOX SET ROW HEIGHT** le permite modificar la altura de la *fila* especificada en el objeto list box designado utilizando los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET ROWS HEIGHT": {
			"Syntax": "**LISTBOX SET ROWS HEIGHT** ( {* ;} *objeto* ; *altura* {; *unidad*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura de la fila (en píxeles)"
				],
				[
					"unidad",
					"Integer",
					"->",
					"Unidad de valor de altura:0 o se omite = píxeles, 1 = líneas"
				]
			],
			"Summary": "El comando **LISTBOX SET ROWS HEIGHT** le permite modificar por programación la altura de las filas del objeto list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET STATIC COLUMNS": {
			"Syntax": "**LISTBOX SET STATIC COLUMNS** ( {* ;} *objeto* ; *numColumnas* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"numColumnas",
					"Integer",
					"->",
					"Número de columnas a convertir estáticas"
				]
			],
			"Summary": "El comando **LISTBOX SET STATIC COLUMNS** define las primeras *numColumnas* columnas (empezando por la izquierda) en el list box designado por los parámetros *objeto* y *\\**."
		},
		"LISTBOX SET TABLE SOURCE": {
			"Syntax": "**LISTBOX SET TABLE SOURCE** ( {* ;} *objeto* ; numTabla | tempo {; *nomSel*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite*)"
				],
				[
					"numTabla &#124; tempo",
					"Entero largo, Cadena",
					"->",
					"Número de la tabla de la cual utilizarla selección actual o nombre de la selección temporal a utilizar"
				],
				[
					"nomSel",
					"Text",
					"->",
					"Nombre del conjunto seleccionado"
				]
			],
			"Summary": "El comando **LISTBOX SET TABLE SOURCE** permite modificar la fuente de datos mostrada en el listbox diseñado por los parámetros *\\** y *objeto*\n\n**Nota:** este comando sólo puede utilizarse cuando la propiedad “Fuente de datos” del list box es **Selección actual** o **Selección temporal** (para mayor información, consulte la sección *Gestión programada de los objetos de tipo List box*)."
		},
		"LISTBOX SORT COLUMNS": {
			"Syntax": "**LISTBOX SORT COLUMNS** ( {* ;} *objeto* ; *numColumna* ; *orden* {; *numColumna2* ; *orden2* ; ... ; *numColumnaN* ; *ordenN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número(s) de columna(s) a ordenar"
				],
				[
					"orden",
					"*",
					"->",
					"\">\" para una ordenación ascendente o \"<\" para una ordenación descendente"
				]
			],
			"Summary": "El comando LISTBOX SORT COLUMNS aplica una ordenación estándar a las líneas del list box definido por el objeto y los parámetros \\* en función de los valores de una o varias columnas."
		},
		"Load 4D View document": {
			"Syntax": "**Load 4D View document** ( *4DViewDocument* ) : Object",
			"Params": [
				[
					"4DViewDocument",
					"Blob",
					"->",
					"Documento 4D View"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Representación del objeto del documento 4D View"
				]
			],
			"Summary": "El comando **Load 4D View document** permite convertir un documento 4D View en un objeto 4D."
		},
		"Load list": {
			"Syntax": "**Load list** ( *nomLista* ) : Integer",
			"Params": [
				[
					"nomLista",
					"Text",
					"->",
					"Nombre de una lista creada en el Editor de listas del entorno Diseño"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de la lista creada recientemente"
				]
			],
			"Summary": "Load list crea una lista jerárquica cuyo contenido se copia de la lista pasada en *nomLista*."
		},
		"LOAD RECORD": {
			"Syntax": "**LOAD RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual cargar el registro actual o Tabla por defecto si se omite"
				]
			],
			"Summary": "LOAD RECORD carga el registro actual de *tabla*."
		},
		"LOAD SET": {
			"Syntax": "**LOAD SET** ( {*tabla* ;} *conjunto* ; *doc* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a la cual pertenece el conjunto o Tabla por defecto si se omite"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto a crear en memoria"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento que contiene el conjunto"
				]
			],
			"Summary": "LOAD SET carga un conjunto desde el archivo *documento,* creado con el comando SAVE SET."
		},
		"LOAD VARIABLES": {
			"Syntax": "**LOAD VARIABLES** ( *doc* ; *variable* {; *variable2* ; ... ; *variableN*} )",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Documento que contiene el o las variables 4D"
				],
				[
					"variable",
					"Variable",
					"<-",
					"Variables a recibir los valores"
				]
			],
			"Summary": "El comando LOAD VARIABLES carga una o varias variables del documento especificado por *documento*."
		},
		"Localized document path": {
			"Syntax": "**Localized document path** ( *rutaRelativa* ) : Text",
			"Params": [
				[
					"rutaRelativa",
					"Text",
					"->",
					"Ruta de acceso relativa del documento del cual obtener la versión localizada"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso absoluta del documento localizado"
				]
			],
			"Summary": "El comando Localized document path devuelve la ruta completa (absoluta) de un documento designado por *rutaRelativa* y ubicado en la carpeta xxx."
		},
		"Localized string": {
			"Syntax": "**Localized string** ( *resNombre* ) : Text",
			"Params": [
				[
					"resNombre",
					"Text",
					"->",
					"Nombre del atributo resNombre"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor de la cadena designada por resNombre en el lenguaje actual"
				]
			],
			"Summary": "El comando Localized string devuelve el valor de la cadena designada por el atributo *resNombre* para el lenguaje actual."
		},
		"LOCKED BY": {
			"Syntax": "**LOCKED BY** ( {*tabla* ;} *proceso* ; *usuario4D* ; *sesionUsuario* ; *nombreProceso* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a verificar si el registro está bloqueado o Tabla por defecto, si se omite"
				],
				[
					"proceso",
					"Integer",
					"<-",
					"Número de referencia del proceso"
				],
				[
					"usuario4D",
					"Text",
					"<-",
					"Nombre del usuario 4D"
				],
				[
					"sesionUsuario",
					"Text",
					"<-",
					"Nombre del usuario que inició la sesion de trabajo"
				],
				[
					"nombreProceso",
					"Text",
					"<-",
					"Nombre del proceso"
				]
			],
			"Summary": "LOCKED BY devuelve la información sobre el usuario y el proceso que tiene bloqueado un registro."
		},
		"Locked records info": {
			"Syntax": "**Locked records info** ( *laTabla* ) : Object",
			"Params": [
				[
					"laTable",
					"Table",
					"->",
					"Tabla de la cual obtener los registros bloqueados"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Descripción de los registros bloqueados (si los hay)"
				]
			],
			"Summary": "El comando **Locked records info** devuelve un objeto que contiene diferente información sobre los registros bloqueados actualmente en *laTabla*."
		},
		"Locked": {
			"Syntax": "**Locked** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual verificar si el registro actual está bloqueado o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"El registro está bloqueado (TRUE), o El registro no está bloqueado (FALSE)"
				]
			],
			"Summary": "Locked prueba si el registro actual de *tabla* está bloqueado."
		},
		"LOG EVENT": {
			"Syntax": "**LOG EVENT** ( {*tipoSalida* ;} *mensaje* {; *importancia*} )",
			"Params": [
				[
					"tipoSalida",
					"Integer",
					"->",
					"Tipo de salida del mensaje"
				],
				[
					"mensaje",
					"Text",
					"->",
					"Contenido del mensaje"
				],
				[
					"importancia",
					"Integer",
					"->",
					"Nivel de importancia del mensaje (sólo para Windows)"
				]
			],
			"Summary": "El comando **LOG EVENT** permite configurar un sistema personalizado de registro de eventos internos que ocurren durante el uso de su aplicación."
		},
		"LOG FILE TO JSON": {
			"Syntax": "**LOG FILE TO JSON** ( *rutaCarpetaDest* {; *tamMax* {; *rutaHist* {; *atribCampo*}}} )",
			"Params": [
				[
					"rutaCarpetaDest",
					"Text",
					"->",
					"Ruta de acceso de la carpeta de destino del archivo guardado"
				],
				[
					"tamMax",
					"Integer",
					"->",
					"Tamaño máximo del archivo JSON a crear (bytes)"
				],
				[
					"rutaHist",
					"Text",
					"->",
					"Ruta de acceso del archivo de historial a exportar; utilizar el historial actual si se omite"
				],
				[
					"atribCampo",
					"Integer",
					"->",
					"Atributo de descripción del campo: 1 = utilizar número(por defecto), 2 = utilizar nombre"
				]
			],
			"Summary": "El comando **LOG FILE TO JSON** guarda en formato JSON el archivo de historial actual o todo archivo de historial especificado."
		},
		"Log file": {
			"Syntax": "**Log file**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre completo del archivo historial de la base"
				]
			],
			"Summary": "El comando Log file devuelve el nombre largo (es decir la ruta de acceso completa del archivo, incluyendo su nombre) del archivo historial actual de la base abierta."
		},
		"Log": {
			"Syntax": "**Log** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número para el cual devolver el logaritmo"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Logaritmo del número"
				]
			],
			"Summary": "Log devuelve el logaritmo neperiano de *número*."
		},
		"LONGINT ARRAY FROM SELECTION": {
			"Syntax": "**LONGINT ARRAY FROM SELECTION** ( *tabla* ; *arrReg* {; *seleccion*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la selección actual"
				],
				[
					"arrReg",
					"Integer array",
					"<-",
					"Array de números de registros"
				],
				[
					"seleccion",
					"Text",
					"->",
					"Nombre de la selección temporal o de la selección actual si este parámetro es omitido"
				]
			],
			"Summary": "El comando LONGINT ARRAY FROM SELECTION llena el array *arrReg* con los números (absolutos) de los registros que están en *seleccion*."
		},
		"LONGINT TO BLOB": {
			"Syntax": "**LONGINT TO BLOB** ( *enteroLargo* ; *BLOB* ; *byteOrden* {; offset | *} )",
			"Params": [
				[
					"enteroLargo",
					"Integer",
					"->",
					"Valor de tipo Entero largo a escribir en el BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a recibir el valor Entero largo"
				],
				[
					"byteOrden",
					"Integer",
					"->",
					"0 Orden de bytes nativo 1 Orden de bytes Macintosh 2 Orden de bytes PC"
				],
				[
					"offset &#124; *",
					"Variable, Operador",
					"<->",
					"Offset en el BLOB (expresado en bytes) o * para añadir el valor"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la escritura si se omite *"
				]
			],
			"Summary": "El comando LONGINT TO BLOB escribe el valor de tipo Entero largo (4 bytes) *enteroLargo* en el BLOB *blob*."
		},
		"Lowercase": {
			"Syntax": "**Lowercase** ( *laCadena* {; *} ) : Text",
			"Params": [
				[
					"laText",
					"Text",
					"->",
					"Cadena a pasar a minúsculas"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: conservar los acentos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena en minúsculas"
				]
			],
			"Summary": "Lowercase devuelve una cadena de caracteres igual a *laCadena* con todos los caracteres alfabéticos convertidos en minúsculas."
		},
		"Macintosh command down": {
			"Syntax": "**Macintosh command down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Comando Macintosh o Estado de la tecla Ctrl en Windows"
				]
			],
			"Summary": "Macintosh command down devuelve TRUE si la tecla Comando Macintosh está presionada."
		},
		"Macintosh control down": {
			"Syntax": "**Macintosh control down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Control de Macintosh"
				]
			],
			"Summary": "Macintosh control down devuelve TRUE si la tecla Control de Macintosh está presionada."
		},
		"Macintosh option down": {
			"Syntax": "**Macintosh option down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Opción Macintosh o Estado de la tecla Alt Windows"
				]
			],
			"Summary": "Macintosh option down devuelve TRUE si la tecla Opción Macintosh está presionada."
		},
		"Match regex": {
			"Syntax": "**Match regex** ( *patron* ; *laCadena* ; *inicio* {; pos_encont. ; long_encont.}{; *} ) -> Resultado <br/>\n**Match regex** ( *patron* ; *laCadena* ) -> Resultado",
			"Params": [
				[
					"patron",
					"Text",
					"->",
					"Expresión regular"
				],
				[
					"laCadena",
					"Text",
					"->",
					"Cadena en la cual se efectúa la búsqueda"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Posición de laCadena donde comenzar la búsqueda"
				],
				[
					"pos_encont.",
					"Array entero largo, Variable entero largo",
					"<-",
					"Posición de la ocurrencia"
				],
				[
					"long_encont.",
					"Array entero largo, Variable entero largo",
					"<-",
					"Longitud de la ocurrencia"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: buscar únicamente en la posición indicada"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = la búsqueda ha encontrado una ocurrencia; De lo contrario, False."
				],
				[
					"Match regex ( patron ; laCadena ) -> Resultado"
				],
				[
					"Parámetro",
					"Tipo",
					"Descripción"
				],
				[
					"patron",
					"Text",
					"->",
					"Expresión regular (igualdad completa)"
				],
				[
					"laCadena",
					"Text",
					"->",
					"Cadena en la cual se efectúa la búsqueda"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True= la cadena encuentra una ocurrencia, de lo contrario False"
				]
			],
			"Summary": "El comando Match regex permite probar la conformidad de una cadena de caracteres con respecto a un conjunto de reglas sintetizadas por medio de un metalenguaje llamado “expresión regular” o “expresión racional."
		},
		"Max": {
			"Syntax": "**Max** ( *series* {; *rutaAtributo*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales se devuelve el valor  máximo"
				],
				[
					"rutaAtributo",
					"Text",
					"->",
					"Ruta de atributo para el cual calcular el valor máximo"
				],
				[
					"Resultado",
					"Date, Number",
					"<-",
					"Máximo valor en series"
				]
			],
			"Summary": "**Max** devuelve el valor máximo en *series*."
		},
		"MAXIMIZE WINDOW": {
			"Syntax": "**MAXIMIZE WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana Si se omite = todas las ventanas (Windows) o Ventana del primer plano del proceso actual (macOS)"
				]
			],
			"Summary": "El comando MAXIMIZE WINDOW provoca el zoom de la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"MEMORY STATISTICS": {
			"Syntax": "**MEMORY STATISTICS** ( *tipoInfo* ; *arrayNombres* ; *arrayValores* ; *ArrayContador* )",
			"Params": [
				[
					"tipoInfo",
					"Integer",
					"->",
					"Selector de información a obtener"
				],
				[
					"arrayNombres",
					"Text array",
					"<-",
					"Títulos de la información"
				],
				[
					"arrayValores",
					"Real array",
					"<-",
					"Valores de la información"
				],
				[
					"ArrayContador",
					"Real array",
					"<-",
					"Número de objetos respectivos (si disponible)"
				]
			],
			"Summary": "El comando **MEMORY STATISTICS** recupera la información relativa al uso de la caché de datos por 4D."
		},
		"Menu bar height": {
			"Syntax": "**Menu bar height**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura (expresada en píxeles) de la barra de menús (devuelve cero si la barra de menús está oculta)"
				]
			],
			"Summary": "Menu bar height devuelve la altura de la barra de menús, expresada en píxeles."
		},
		"Menu bar screen": {
			"Syntax": "**Menu bar screen**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de la pantalla que contiene la barra de menús"
				]
			],
			"Summary": "Menu bar screen devuelve el número de la pantalla donde está ubicada la barra de menús."
		},
		"Menu selected": {
			"Syntax": "**Menu selected** {( *subMenu* )} : Integer",
			"Params": [
				[
					"subMenu",
					"Text",
					"<-",
					"Referencia del menú que contiene la línea seleccionada"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Comando de menú seleccionado Palabra superior: Número de menú Palabra inferior: Número de comando de menú"
				]
			],
			"Summary": "Menu selected se utiliza sólo cuando se muestran formularios."
		},
		"MESSAGE": {
			"Syntax": "**MESSAGE** ( *mensaje* )",
			"Params": [
				[
					"mensaje",
					"Text",
					"->",
					"Mensaje a mostrar"
				]
			],
			"Summary": "El comando MESSAGE generalmente se utiliza para informar al usuario sobre alguna actividad."
		},
		"MESSAGES OFF": {
			"Syntax": "**MESSAGES OFF**",
			"Params": [],
			"Summary": "Los comandos MESSAGES OFF y MESSAGES ON encienden y apagan los termómetros de progresión mostrados por 4D mientras se ejecutan operaciones de larga duración."
		},
		"MESSAGES ON": {
			"Syntax": "**MESSAGES ON**",
			"Params": [],
			"Summary": "Ver la descripción del comando MESSAGES OFF."
		},
		"Method called on error": {
			"Syntax": "**Method called on error** {( *alcance* )} : Text",
			"Params": [
				[
					"alcance",
					"Integer",
					"->",
					"Alcance del método de error"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del método llamado por error"
				]
			],
			"Summary": "El comando **Method called on error** devuelve el nombre del método instalado por el comando ON ERR CALL para el proceso actual o el *alcance* definido."
		},
		"Method called on event": {
			"Syntax": "**Method called on event**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del método llamado por evento"
				]
			],
			"Summary": "El comando Method called on event devuelve el nombre del método instalado por el comando ON EVENT CALL."
		},
		"METHOD Get attribute": {
			"Syntax": "**METHOD Get attribute** ( *ruta* ; *tipoAtributo* {; *} ) : Boolean",
			"Params": [
				[
					"ruta",
					"Text",
					"->",
					"Ruta de método proyecto"
				],
				[
					"tipoAtributo",
					"Integer",
					"->",
					"Tipo de atributo a obtener"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = atributo seleccionado; de lo contrario False"
				]
			],
			"Summary": "El comando **METHOD Get attribute** devuelve el valor del atributo *tipoAtributo* para el método proyecto designado por el parámetro *ruta*."
		},
		"METHOD GET ATTRIBUTES": {
			"Syntax": "**METHOD GET ATTRIBUTES** ( *ruta* ; *atributos* {; *} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Rutas de métodos"
				],
				[
					"atributos",
					"Object, Object array",
					"<-",
					"Atributos para los métodos seleccionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET ATTRIBUTES** devuelve, en *atributos*, el valor actual de todos los atributos para los métodos especificados en el parámetro *ruta*."
		},
		"METHOD GET CODE": {
			"Syntax": "**METHOD GET CODE** ( *ruta* ; *codigo* {; *opcion*} {; *} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Texto o array de texto que contiene una o varias rutas de método"
				],
				[
					"codigo",
					"Text, Text array",
					"<-",
					"Código de los métodos designados"
				],
				[
					"opcion",
					"Integer",
					"->",
					"0 o si se omite = exportación simple (sin tokens), 1 = exportación con tokens"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = comando se aplica a la base de datos de host cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET CODE** devuelve en el parámetro *codigo*, el contenido de los métodos designados por el parámetro *ruta*."
		},
		"METHOD GET COMMENTS": {
			"Syntax": "**METHOD GET COMMENTS** ( *ruta* ; *comentarios* {; *} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Texto o array texto que contiene una o varias rutas de método"
				],
				[
					"comentarios",
					"Text, Text array",
					"<-",
					"Comentarios de los métodos designados"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET COMMENTS** devuelve en el parámetro *comentarios*, la documentación de los métodos designados por el parámetro *ruta*."
		},
		"METHOD GET FOLDERS": {
			"Syntax": "**METHOD GET FOLDERS** ( *arrNoms* {; *filtro*}{; *} )",
			"Params": [
				[
					"arrNoms",
					"Text array",
					"<-",
					"Array de nombres de carpetas de la página de inicio"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtro de nombres"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET FOLDERS** devuelve en el array *arrNoms*, los nombres de las carpetas creadas en la página Inicio del Explorador de 4D"
		},
		"METHOD GET MODIFICATION DATE": {
			"Syntax": "**METHOD GET MODIFICATION DATE** ( *ruta* ; *fechaMod* ; *horaMod* {; *operador*} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Texto o array texto que contiene una o más rutas de acceso"
				],
				[
					"fechaMod",
					"Date, Date array",
					"<-",
					"Fecha(s) de modificación de métodos(s)"
				],
				[
					"horaMod",
					"Time, Integer array",
					"<-",
					"Hora(s) de modificación de métodos(s)"
				],
				[
					"operador",
					"*",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET MODIFICATION DATE** devuelve en los parámetros *fechaMod* y *horaMod* las fechas y horas de la última modificación de los métodos designados por el parámetro *ruta*."
		},
		"METHOD GET NAMES": {
			"Syntax": "**METHOD GET NAMES** ( *arrNoms* {; *filtro*}{; *} )",
			"Params": [
				[
					"arrNoms",
					"Text array",
					"<-",
					"Array de nombres de métodos de proyecto"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtros de nombres"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET NAMES** llena el array *arrNoms* con los nombres de los métodos proyecto creados en la aplicación."
		},
		"METHOD Get path": {
			"Syntax": "**METHOD Get path** ( *tipoMetodo* {; *laTabla*}{; *nomObjeto*{; *nomObjetoForm*}}{; *} ) : Text",
			"Params": [
				[
					"tipoMetodo",
					"Integer",
					"->",
					"Selector de tipo de objeto"
				],
				[
					"laTable",
					"Table",
					"->",
					"Referencia de tabla"
				],
				[
					"nomObjeto",
					"Text",
					"->",
					"Nombre de formulario o método base"
				],
				[
					"nomObjetoForm",
					"Text",
					"<-",
					"Nombre del objeto de formulario"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				],
				[
					"resultado",
					"Text",
					"<-",
					"Ruta de acceso completa del objeto"
				]
			],
			"Summary": "El comando **METHOD Get path** devuelve la ruta de acceso interna completa de un método."
		},
		"METHOD GET PATHS FORM": {
			"Syntax": "**METHOD GET PATHS FORM** ( {*laTabla* ;} *arrRutas* {; *filtro*}{; *marcador*}{; *} )",
			"Params": [
				[
					"laTable",
					"Table",
					"->",
					"Referencia de tabla"
				],
				[
					"arrRutas",
					"Text array",
					"<-",
					"Array de rutas y nombres de los métodos"
				],
				[
					"filtro",
					"Text",
					"->",
					"Filtros de nombres"
				],
				[
					"marcador",
					"Real",
					"->",
					"Valor mínimo de marcador"
				],
				[
					"<-",
					"Nuevo valor actual"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET PATHS FORM** llena el array *arrRutas* con las rutas de acceso internas y los nombres de los métodos de todos los objetos de los formularios así como también de los métodos formulario."
		},
		"METHOD GET PATHS": {
			"Syntax": "**METHOD GET PATHS** ( {*nomCarpeta* ;} *tipoMetodo* ; *arrRutas* {; *marcador*}{; *} )",
			"Params": [
				[
					"nomCarpeta",
					"Text",
					"->",
					"Nombre de carpeta de la página Inicio"
				],
				[
					"tipoMetodo",
					"Integer",
					"->",
					"Selector de tipo de método a recuperar"
				],
				[
					"arrRutas",
					"Text array",
					"<-",
					"Array de rutas y nombres de los métodos"
				],
				[
					"marcador",
					"Real",
					"->",
					"Valor mínimo de marcador"
				],
				[
					"<-",
					"Nuevo valor actual"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD GET PATHS** llena el array *arrRutas* con las rutas de acceso internas y los nombres de los métodos de la aplicación del tipo definido por el parámetro *tipoMetodo*."
		},
		"METHOD OPEN PATH": {
			"Syntax": "**METHOD OPEN PATH** ( *ruta* {; *line*}{; *} )",
			"Params": [
				[
					"ruta",
					"Text",
					"->",
					"Ruta del método a abrir"
				],
				[
					"line",
					"Number",
					"->",
					"Line number"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente(parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD OPEN PATH** abre, en el editor de métodos de 4D, el método cuya ruta de acceso interna se pasa en el parámetro *ruta*."
		},
		"METHOD RESOLVE PATH": {
			"Syntax": "**METHOD RESOLVE PATH** ( *ruta* ; *tipoMetodo* ; *prtTabla* ; *nomObjeto* ; *nomObjForm* {; *} )",
			"Params": [
				[
					"ruta",
					"Text",
					"->",
					"Ruta a resolver"
				],
				[
					"tipoMetodo",
					"Integer",
					"<-",
					"Selector de tipo de objeto"
				],
				[
					"prtTabla",
					"Pointer",
					"<-",
					"Referencia de tabla"
				],
				[
					"nomObjeto",
					"Text",
					"<-",
					"Nombre de formulario o de método base"
				],
				[
					"nomObjForm",
					"Text",
					"<-",
					"Nombre de objeto del formulario"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD RESOLVE PATH** analiza la ruta de acceso interna pasada en el parámetro *ruta* y devuelve sus diferentes componentes en los parámetros *tipoMetodo*, *ptrTabla*, *nomObjeto* y *nomObjetoForm*."
		},
		"METHOD SET ACCESS MODE": {
			"Syntax": "**METHOD SET ACCESS MODE** ( *modo* )",
			"Params": [
				[
					"modo",
					"Integer",
					"->",
					"Modo de acceso a los objetos bloqueados"
				]
			],
			"Summary": "El comando **METHOD SET ACCESS MODE** permite definir el comportamiento de 4D cuando intenta acceder en escritura a un objeto ya cargado en modificación por otro usuario o proceso."
		},
		"METHOD SET ATTRIBUTE": {
			"Syntax": "**METHOD SET ATTRIBUTE** ( *ruta* ; *tipoAtrib* ; *valorAtrib* {; *tipoAtrib2* ; *valorAtrib2* ; ... ; *tipoAtribN* ; *valorAtribN*}{; *operador*} )",
			"Params": [
				[
					"ruta",
					"Text",
					"->",
					"Ruta del método proyecto"
				],
				[
					"tipoAtrib",
					"Integer",
					"->",
					"Tipo de atributo"
				],
				[
					"valorAtrib",
					"Boolean, Text",
					"->",
					"True = seleccionar el atributo  False = deseleccionar el atributo"
				],
				[
					"operador",
					"*",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un  componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD SET ATTRIBUTE** permite definir el valor del atributo *tipoAtrib* para el método proyecto designado por el parámetro *ruta*."
		},
		"METHOD SET ATTRIBUTES": {
			"Syntax": "**METHOD SET ATTRIBUTES** ( *ruta* ; *atributos* {; *} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Rutas de métodos"
				],
				[
					"atributos",
					"Object, Object array",
					"->",
					"Atributos para definir los métodos seleccionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "**Tema:** Acceso objetos diseño\n\nEl nuevo comando **METHOD SET ATTRIBUTES** le permite definir los valores de los *atributos* para lo métodos especificados en el parámetro *ruta*."
		},
		"METHOD SET CODE": {
			"Syntax": "**METHOD SET CODE** ( *ruta* ; *codigo* {; *operador*} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Texto o array texto que contiene una o varias rutas de métodos"
				],
				[
					"codigo",
					"Text, Text array",
					"->",
					"Código de los métodos designados"
				],
				[
					"operador",
					"*",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD SET CODE** modifica el código de los métodos designados por el parámetro *ruta* con el contenido pasado en el parámetro *codigo*."
		},
		"METHOD SET COMMENTS": {
			"Syntax": "**METHOD SET COMMENTS** ( *ruta* ; *comentarios* {; *Operador*} )",
			"Params": [
				[
					"ruta",
					"Text, Text array",
					"->",
					"Texto o array texto que contiene una o varias rutas de métodos"
				],
				[
					"comentarios",
					"Text, Text array",
					"->",
					"Comentarios de los métodos designados"
				],
				[
					"*",
					"*",
					"->",
					"Si se pasa = el comando se aplica a la base local cuando se ejecuta desde un componente (parámetro ignorado fuera de este contexto)"
				]
			],
			"Summary": "El comando **METHOD SET COMMENTS** remplaza la documentación del(os) método(s) designados por el parámetro *ruta* por los definidos en el parámetro *comentarios*."
		},
		"Milliseconds": {
			"Syntax": "**Milliseconds**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de milisegundos transcurridos desde que se inició el equipo"
				]
			],
			"Summary": "Milliseconds  devuelve el número de milisegundos ( 1milisegundo = 1 milésima de un segundo) pasados desde que se inició el equipo."
		},
		"Min": {
			"Syntax": "**Min** ( *series* {; *rutaAtributo*} ) : any",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales devuelve el valor mínimo"
				],
				[
					"rutaAtributo",
					"Text",
					"->",
					"Ruta de atributo para el cual calcular el valor mínimo"
				],
				[
					"Resultado",
					"Date, Number",
					"<-",
					"Valor mínimo en series"
				]
			],
			"Summary": "**Min** devuelve el valor mínimo en *series*."
		},
		"MINIMIZE WINDOW": {
			"Syntax": "**MINIMIZE WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o si se omite todas las ventanas del primer plano del proceso actual (Windows) o ventana del primer plano del proceso actual (macOS)"
				]
			],
			"Summary": "El comando MINIMIZE WINDOW define el tamaño de la ventana, cuyo número se pasó en *ventana*, del tamaño que tenía antes de ser maximizada."
		},
		"MOBILE APP REFRESH SESSIONS": {
			"Syntax": "**MOBILE APP REFRESH SESSIONS**",
			"Params": [],
			"Summary": "El comando **MOBILE APP REFRESH SESSIONS** comprueba todos los archivos de sesión de la aplicación móvil ubicados en la carpeta MobileApps del servidor y actualiza el contenido de sesión existente en la memoria para todo archivo editado."
		},
		"Mod": {
			"Syntax": "**Mod** ( *número1* ; *número2* ) : Real",
			"Params": [
				[
					"número1",
					"Integer",
					"->",
					"Número a dividir"
				],
				[
					"número2",
					"Integer",
					"->",
					"Número divisor"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Devuelve el resto de la división"
				]
			],
			"Summary": "El comando Mod devuelve el resto de la división entera de *número1* entre *número2*."
		},
		"Modified record": {
			"Syntax": "**Modified record** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a probar si el registro actual se ha modificado o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"El registro ha sido modificado (True), o El registro no ha sido modificado (False)"
				]
			],
			"Summary": "Modified record devuelve True si el registro actual de *tabla* se modificó pero no guardó; de lo contrario devuelve False."
		},
		"Modified": {
			"Syntax": "**Modified** ( *campo* ) : Boolean",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo a probar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Verdadero si se ha asignado un nuevo valor al campo, de lo contrario Falso"
				]
			],
			"Summary": "**Modified** devuelve **True** si un valor ha sido asignado por programación a *campo* o si ha sido modificado durante la entrada de datos."
		},
		"MODIFY RECORD": {
			"Syntax": "**MODIFY RECORD** ( {*tabla*}{;}{*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a utilizar para entrada de datos o Tabla por defecto, si se omite"
				],
				[
					"*",
					"Operator",
					"->",
					"Ocultar barras de desplazamiento"
				]
			],
			"Summary": "El comando MODIFY RECORD permite al usuario modificar el registro actual de la tabla *tabla* o de la tabla por defecto si se omite el parámetro *tabla*."
		},
		"MODIFY SELECTION": {
			"Syntax": "**MODIFY SELECTION** ( {*tabla*}{; *modoSelección*}{; *entradaList*}{; *}{; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a mostrar y modificar o Tabla por defecto, si se omite"
				],
				[
					"modoSelección",
					"Integer",
					"->",
					"Modo de selección"
				],
				[
					"entradaList",
					"Boolean",
					"->",
					"Autorizar entrada en lista"
				],
				[
					"*",
					"Operator",
					"->",
					"Utilizar formulario de salida para un sólo registro y ocultar las barras de desplazamiento en el formulario de     entrada"
				],
				[
					"*",
					"Operator",
					"->",
					"Mostrar las barras de desplazamiento en el formulario de entrada (anula la segunda opción del primer parámetro *)"
				]
			],
			"Summary": "MODIFY SELECTION es casi idéntico al comando DISPLAY SELECTION."
		},
		"Monitored activity": {
			"Syntax": "**Monitored activity**  : Collection",
			"Params": [
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de actividades monitoreadas"
				]
			],
			"Summary": "El comando **Monitored activity** devuelve una colección de objetos que describen operaciones registradas de acuerdo con las especificaciones definidas por el comando START MONITORING ACTIVITY."
		},
		"Month of": {
			"Syntax": "**Month of** ( *fecha* ) : Integer",
			"Params": [
				[
					"fecha",
					"Date",
					"->",
					"Fecha para la cual devolver el mes"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número que indica el mes de la fecha"
				]
			],
			"Summary": "El comando Month of devuelve el mes de *fecha*."
		},
		"MOUSE POSITION": {
			"Syntax": "**MOUSE POSITION** ( *ratonX* ; *ratonY* ; *botonRaton* {; *} )",
			"Params": [
				[
					"ratonX",
					"Real",
					"<-",
					"Coordenada horizontal del ratón"
				],
				[
					"ratonY",
					"Real",
					"<-",
					"Coordenada vertical del ratón"
				],
				[
					"botonRaton",
					"Integer",
					"<-",
					"Estado del botón del ratón: 0 = Botón arriba 1 = Botón presionado 2 = Botón derecho presionado 3 = Los dos botones presionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, utlizar el sistema de coordenadas globales Si se omite, utilizar el sistema de coordenadas locales"
				]
			],
			"Summary": "El comando MOUSE POSITION devuelve el estado actual del ratón."
		},
		"MOVE DOCUMENT": {
			"Syntax": "**MOVE DOCUMENT** ( *rutaFuente* ; *rutaDest* )",
			"Params": [
				[
					"rutaFuente",
					"Text",
					"->",
					"Ruta de acceso completa al documento existente"
				],
				[
					"rutaDest",
					"Text",
					"->",
					"Ruta de acceso de destino"
				]
			],
			"Summary": "El comando MOVE DOCUMENT mueve o renombra un documento."
		},
		"MULTI SORT ARRAY": {
			"Syntax": "**MULTI SORT ARRAY** ( *array* {; *orden*}{; *array2* ; *orden2* ; ... ; *arrayN* ; *ordenN*} ) <br/>\n**MULTI SORT ARRAY** ( *ptrArrayNombre* ; *ordenArrayNombre* )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array(s) a ordenar"
				],
				[
					"orden",
					"*",
					"->",
					"\">\" efectuar una ordenación creciente o \"<\" efectuar una ordenación decreciente Si se omite \"aa\" no ordenación"
				],
				[
					"ptrArrayNombre",
					"Pointer array",
					"->",
					"Array de punteros de arrays"
				],
				[
					"ordenArrayNombre",
					"Integer array",
					"->",
					"Array de criterio de ordenación (1= ordenar por orden creciente, -1= ordenar por orden decreciente), 0= sincronización con ordenaciones anteriores"
				]
			],
			"Summary": "El comando MULTI SORT ARRAY permite efectuar una ordenación multicriterios en un conjunto de arrays."
		},
		"New data key": {
			"Syntax": "**New data key** ( *passPhrase* ) : Object",
			"Params": [
				[
					"passPhrase",
					"Text",
					"->",
					"Frase contraseña a utilizar para generar la llave de cifrado de datos AES"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que contiene la llave (propiedad encodedKey)"
				]
			],
			"Summary": "El comando **New data key** genera una llave de cifrado de datos binarios a partir del texto pasado en el parámetro *passPhrase*."
		},
		"New list": {
			"Syntax": "**New list**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de lista"
				]
			],
			"Summary": "New list crea una nueva lista jerárquica vacía en memoria y devuelve su número de referencia único."
		},
		"New object": {
			"Syntax": "**New object** {( *propiedad* ; *valor* {; *propiedad2* ; *valor2* ; ... ; *propiedadN* ; *valorN*} )} : Object",
			"Params": [
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a crear"
				],
				[
					"valor",
					"any",
					"->",
					"Valor de la propiedad"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nuevo objeto del lenguaje"
				]
			],
			"Summary": "El comando **New object** crea un nuevo objeto vacío o prellenado y devuelve su referencia."
		},
		"New process": {
			"Syntax": "**New process** ( *metodo* ; *pila* {; *nombre* {; *param* {; *param2* ; ... ; *paramN*}}}{; *} ) : Integer",
			"Params": [
				[
					"metodo",
					"Text",
					"->",
					"Método a ejecutar en el proceso"
				],
				[
					"pila",
					"Integer",
					"->",
					"Tamaño de la pila en bytes"
				],
				[
					"nombre",
					"Text",
					"->",
					"Nombre del proceso creado"
				],
				[
					"param",
					"Expression",
					"->",
					"Parámetros del método"
				],
				[
					"*",
					"Operador",
					"->",
					"Proceso único"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número del proceso creado recientemente o del proceso que está siendo ejecutado"
				]
			],
			"Summary": "El comando New process inicia un nuevo proceso (en el mismo equipo) y devuelve el número de este proceso."
		},
		"New shared object": {
			"Syntax": "**New shared object** {( *propiedad* ; *valor* {; *propiedad2* ; *valor2* ; ... ; *propiedadN* ; *valorN*} )} : Object",
			"Params": [
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a crear"
				],
				[
					"valor",
					"Text, Date, Boolean, Pointer, Number, Object",
					"->",
					"Valor de la propiedad"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nuevo objeto compartido"
				]
			],
			"Summary": "El comando **New shared object** crea un nuevo objeto compartido vacío o prellenado y devuelve su referencia."
		},
		"NEXT RECORD": {
			"Syntax": "**NEXT RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual mover el siguiente registro  seleccionado o Tabla por defecto, si se omite"
				]
			],
			"Summary": "NEXT RECORD mueve el puntero del registro actual al siguiente registro en la selección actual de *tabla* para el proceso actual."
		},
		"Next window": {
			"Syntax": "**Next window** ( *ventana* ) : Integer",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de ventana"
				]
			]
		},
		"NO DEFAULT TABLE": {
			"Syntax": "**NO DEFAULT TABLE**",
			"Params": [],
			"Summary": "El comando NO DEFAULT TABLE permite cancelar el efecto del comando DEFAULT TABLE."
		},
		"Not": {
			"Syntax": "**Not** ( *booleano* ) : Boolean",
			"Params": [
				[
					"booleano",
					"Boolean",
					"->",
					"Valor booleano a negar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Opuesto del booleano"
				]
			],
			"Summary": "La función Not devuelve la negación del *booleano*, cambiando Verdadero por Falso o Falso por Verdadero."
		},
		"NOTIFY RESOURCES FOLDER MODIFICATION": {
			"Syntax": "**NOTIFY RESOURCES FOLDER MODIFICATION**",
			"Params": [],
			"Summary": "El comando NOTIFY RESOURCES FOLDER MODIFICATION permite \"forzar\" el envío por 4D Server de una notificación indicando a todos los puestos 4D conectados que el contenido de la carpeta Resources de la base ha sido modificado, de manera que puedan sincronizar su carpeta Resources local."
		},
		"Null": {
			"Syntax": "**Null**  : Null",
			"Params": [
				[
					"Resultado",
					"Null",
					"<-",
					"Valor Null"
				]
			],
			"Summary": "**Null** devuelve el valor **null** de tipo *null*."
		},
		"OB Class": {
			"Syntax": "**OB Class** ( *objeto* ) : any",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto cuya clase se devolverá"
				],
				[
					"Resultado",
					"Null, Object",
					"<-",
					"Clase de objeto"
				]
			],
			"Summary": "El comando **OB Class** devuelve la clase del *objeto* pasado en el parámetro."
		},
		"OB Copy": {
			"Syntax": "**OB Copy** ( *objeto* {; resuelvePunt | {; *option* {; *agruparCon*}}} )  : Object",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"resuelvePunt",
					"Boolean",
					"->",
					"True = resuelve los puntero, False o se omite = no resuelve punteros"
				],
				[
					"option",
					"Integer",
					"->",
					"ck shared: devuelve un objeto compartido,ck resolve pointers: resuelve punteros antes de copiar"
				],
				[
					"agruparCon",
					"Collection, Object",
					"->",
					"Colección u objeto compartido a agrupar con el objeto resultante"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Copia de objeto"
				]
			],
			"Summary": "El comando **OB Copy** devuelve un objeto que contiene una copia completa de las propiedades, sub objetos y valores de *objeto*."
		},
		"OB Entries": {
			"Syntax": "**OB Entries** ( *objeto* ) : Collection",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto para devolver contenidos"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos con propiedades llave/valor"
				]
			],
			"Summary": "El comando **OB Entries** devuelve una colección de objetos que contienen el contenido del *objeto* como pares de propiedades llave/valor."
		},
		"OB GET ARRAY": {
			"Syntax": "**OB GET ARRAY** ( *objeto* ; *propiedad* ; *array* )",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a leer"
				],
				[
					"array",
					"Text array, Real array, Boolean array, Object array, Pointer array, Integer array",
					"<-",
					"Array valor de la propiedad"
				]
			],
			"Summary": "El comando **OB GET ARRAY** recupera en *array*, el array de valores almacenados en la *propiedad* del objeto de lenguaje designado por el parámetro *objeto*."
		},
		"OB GET PROPERTY NAMES": {
			"Syntax": "**OB GET PROPERTY NAMES** ( *objeto* ; *nomProp* {; *arrTipos*} )",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto estructurado"
				],
				[
					"nomProp",
					"Text array",
					"<-",
					"Nombres de las propiedades"
				],
				[
					"arrTipos",
					"Integer array",
					"<-",
					"Tipos de propiedades"
				]
			],
			"Summary": "El comando **OB GET PROPERTY NAMES** devuelve, en *arrProp*, los nombres de las propiedades contenidas en el objeto de lenguaje designados por el parámetro *objeto* ."
		},
		"OB Get type": {
			"Syntax": "**OB Get type** ( *objeto* ; *propiedad* ) : Integer",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de valor de la propiedad"
				]
			],
			"Summary": "El comando **OB Get type** devuelve el tipo del valor asociado a la *propiedad* del *objeto*."
		},
		"OB Get": {
			"Syntax": "**OB Get** ( *objeto* ; *propiedad* {; *tipo*} ) : any",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a leer"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo al cual convertir el valor"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor actual de propiedad"
				]
			],
			"Summary": "El comando **OB Get** devuelve el valor actual de la *propiedad* del *objeto*, convertido opcionalmente en el *tipo* definido."
		},
		"OB Instance of": {
			"Syntax": "**OB Instance of** ( *objeto* ; *clase* ) : Boolean",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto cuya clase se va a probar"
				],
				[
					"clase",
					"Object",
					"->",
					"Clase para probar pertenencia"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si objeto pertenece a la clase especificada o a una clase hijo, y false en caso contrario"
				]
			],
			"Summary": "El comando **OB Instance of** devuelve true si *objeto* pertenece a *clase* o una de sus clases hijo, y en caso contrario false."
		},
		"OB Is defined": {
			"Syntax": "**OB Is defined** ( *objeto* {; *propiedad*} ) : Boolean",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Si se pasa = propiedad a verificar, si se omite = verificar el objeto"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Si propiedad se omite: True si objeto está definido, de lo contrario False.<br/>Si propiedad se pasa: True si propiedad está definida, de lo contrario False"
				]
			],
			"Summary": "El comando **OB Is defined** devuelve **True** si *objeto* o *propiedad* se definen y **False** en caso contrario."
		},
		"OB Is empty": {
			"Syntax": "**OB Is empty** ( *objeto* ) : Boolean",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si objeto está vacío o indefinido, de lo contrario False"
				]
			],
			"Summary": "El comando **OB Is empty** devuelve **True** si *objeto* no está definido o está vacío, y **False** si *objeto* está definido (inicializado) y contiene al menos una propiedad."
		},
		"OB Is shared": {
			"Syntax": "**OB Is shared** ( *aVerificar* ) : Boolean",
			"Params": [
				[
					"aVerificar",
					"Object, Collection",
					"->",
					"Objeto o colección a verificar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el objeto o la colección es compartible, False si es modificable"
				]
			],
			"Summary": "El comando **OB Is shared** devuelve **True** si el objeto o colección *aVerificar* es compartido, y **False** en caso contrario (ver *Objetos y colecciones compartidos*)."
		},
		"OB Keys": {
			"Syntax": "**OB Keys** ( *objeto* ) : Collection",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto para devolver nombres de propiedad"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de nombres de propiedad (cadenas)"
				]
			],
			"Summary": "El comando **OB Keys** devuelve una colección de cadenas que contienen todos los nombres de propiedades enumerables del *objeto*."
		},
		"OB REMOVE": {
			"Syntax": "**OB REMOVE** ( *objeto* ; *propiedad* )",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a eliminar"
				]
			],
			"Summary": "El comando **OB REMOVE** elimina la *propiedad* del objeto de lenguaje designado por el parámetro *objeto*."
		},
		"OB SET ARRAY": {
			"Syntax": "**OB SET ARRAY** ( *objeto* ; *propiedad* ; *array* )",
			"Params": [
				[
					"objeto",
					"Object, Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a definir"
				],
				[
					"array",
					"Array, Variable",
					"->",
					"Array a almacenar en propiedad"
				]
			],
			"Summary": "El comando **OB SET ARRAY** define el *array* a asociarse a la *propiedad* en el objeto definido por el parámetro *objeto*."
		},
		"OB SET NULL": {
			"Syntax": "**OB SET NULL** ( *objeto* ; *property* )",
			"Params": [
				[
					"objeto",
					"Object, Campo Object",
					"->",
					"Objeto estructurado"
				],
				[
					"property",
					"Text",
					"->",
					"Nombre de la propiedad donde el valor nulo se va a aplicar"
				]
			],
			"Summary": "El comando **OB SET NULL** almacena el valor **null** en el objeto de lenguaje designado por el parámetro *objeto* ."
		},
		"OB SET": {
			"Syntax": "**OB SET** ( *objeto* ; *propiedad* ; *valor* {; *propiedad2* ; *valor2* ; ... ; *propiedadN* ; *valorN*} )",
			"Params": [
				[
					"objeto",
					"Object, Object",
					"->",
					"Objeto estructurado"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Nombre de la propiedad a configurar"
				],
				[
					"valor",
					"Expression",
					"->",
					"Nuevo valor de la propiedad"
				]
			],
			"Summary": "El comando **OB SET** crea o modifica uno o más pares de *propiedad*/*valor* en el objeto de lenguaje designado por el parámetro *objeto*."
		},
		"OB Values": {
			"Syntax": "**OB Values** ( *objeto* ) : Collection",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto para devolver valores de propiedad"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de valores de propiedad (variante)"
				]
			],
			"Summary": "El comando **OB Values** devuelve una colección de variantes que contiene todos los valores de propiedad enumerables del *objeto*."
		},
		"OBJECT DUPLICATE": {
			"Syntax": "**OBJECT DUPLICATE** ( {* ;} *objeto* {; *nuevoNom* {; *nuevaVAr* {; *relacionadoA* {; *movH* {; *moveV* {; *redimH* {; *redimV*}}}}}}} {; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"nuevoNom",
					"Text",
					"->",
					"Nombre del nuevo objeto"
				],
				[
					"nuevaVAr",
					"Pointer",
					"->",
					"Puntero a la variable del nuevo objeto"
				],
				[
					"relacionadoA",
					"Text",
					"->",
					"Nombre del objeto editable (o del botón de radio) anterior"
				],
				[
					"movH",
					"Integer",
					"->",
					"Desplazamiento horizontal del nuevo objeto (>0 = a la derecha, <0 =a la izquierda)"
				],
				[
					"moveV",
					"Integer",
					"->",
					"Desplazamiento vertical del nuevo objeto (>0 = hacia abajo, <0= hacia arriba)"
				],
				[
					"redimH",
					"Integer",
					"->",
					"Valor de redimensionamiento horizontal del nuevo objeto"
				],
				[
					"redimV",
					"Integer",
					"->",
					"Valor de redimensionamiento vertical del nuevo objeto"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se especifica = coordenadas absolutas Si se omite = coordenadas relativas"
				]
			],
			"Summary": "El comando OBJECT DUPLICATE permite crear una copia del objeto designado por el parámetro *objeto* en el contexto del formulario que está siendo ejecutado (modo Aplicación)."
		},
		"OBJECT Get action": {
			"Syntax": "**OBJECT Get action** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la acción estándar asociada y (si la hay) cadena de parámetros"
				]
			],
			"Summary": "El comando **OBJECT Get action** devuelve el nombre y (si es el caso) el parámetro de la acción estándar asociada con el objeto designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get auto spellcheck": {
			"Syntax": "**OBJECT Get auto spellcheck** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable o campo(si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = corrección automática, False = no corrección automática"
				]
			],
			"Summary": "El comando **OBJECT Get auto spellcheck** devuelve el estado de la opción Corrección ortográfica automática del o de los objeto(s) designado(s) por los parámetros *objeto* y *\\** para el proceso actual ."
		},
		"OBJECT GET BEST SIZE": {
			"Syntax": "**OBJECT GET BEST SIZE** ( {* ;} *objeto* ; *largOpt* ; *altOpt* {; *anchoMax*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre del objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"largOpt",
					"Integer",
					"<-",
					"Largo óptimo del objeto"
				],
				[
					"altOpt",
					"Integer",
					"<-",
					"Alto óptimo del objeto"
				],
				[
					"anchoMax",
					"Integer",
					"->",
					"Largo máximo del objeto"
				]
			],
			"Summary": "El comando **OBJECT GET BEST SIZE** devuelve en los parámetros *largOpt* y *altOpt*, el largo y alto “óptimo” del objeto de formulario designado por los parámetros *\\** y *objeto*."
		},
		"OBJECT Get border style": {
			"Syntax": "**OBJECT Get border style** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estilo de línea de borde"
				]
			],
			"Summary": "El comando **OBJECT Get border style** devuelve el estilo de línea de borde del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get context menu": {
			"Syntax": "**OBJECT Get context menu** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = menu contextual activo, False = menu contextual inactivo"
				]
			],
			"Summary": "El comando **OBJECT Get context menu** devuelve el estado actual de la opción \"Menú contextual\" del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT GET COORDINATES": {
			"Syntax": "**OBJECT GET COORDINATES** ( {* ;} *objeto* ; *izquierdo* ; *superior* ; *derecho* ; *inferior* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es el nombre del objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"izquierdo",
					"Integer",
					"<-",
					"Coordenada izquierada del objeto"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenada superior del objeto"
				],
				[
					"derecho",
					"Integer",
					"<-",
					"Coordenada derecha del objeto"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenada inferior del objeto"
				]
			],
			"Summary": "El comando **OBJECT GET COORDINATES**devuelve las coordenadas *izquierda*, *superior*, *derecha* e *inferior* (en puntos) en las variables o campos de los objetos del formulario actual definido por los parámetros *\\** y *objeto*."
		},
		"OBJECT Get corner radius": {
			"Syntax": "**OBJECT Get corner radius** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Radio de esquinas redondeadas (en píxeles)"
				]
			],
			"Summary": "El comando **OBJECT Get corner radius** devuelve el valor actual del radio de la esquina para el objeto designado por el parámetro *objeto*."
		},
		"OBJECT Get data source": {
			"Syntax": "**OBJECT Get data source** ( {* ;} *objeto* ) : Pointer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero a la fuente de datos actual del objeto"
				]
			],
			"Summary": "El comando **OBJECT Get data source** devuelve la fuente de datos actual de los objetos designados por los parámetros *objeto* y *\\** ."
		},
		"OBJECT GET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT GET DRAG AND DROP OPTIONS** ( {* ;} *objeto* ; *arrastrable* ; *arrastrableAuto* ; *soltable* ; *soltableAuto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrastrable",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				],
				[
					"arrastrableAuto",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				],
				[
					"soltable",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				],
				[
					"soltableAuto",
					"Boolean",
					"<-",
					"0 = False, 1 = True"
				]
			],
			"Summary": "El comando **OBJECT GET DRAG AND DROP OPTIONS** devuelve las opciones de arrastrar y soltar para el objeto o los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT Get enabled": {
			"Syntax": "**OBJECT Get enabled** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variables (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto(s) activo(s), de lo contrario False"
				]
			],
			"Summary": "El comando OBJECT Get enabled devuelve True si el objeto o grupo de objetos designado por objeto está activo en el formulario y False si no está activo."
		},
		"OBJECT Get enterable": {
			"Syntax": "**OBJECT Get enterable** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto(s) editable(s)"
				]
			],
			"Summary": "El comando OBJECT Get enterable devuelve True si el objeto o grupo de objetos designado por *objeto* tiene el atributo **editable**; de lo contrario, devuelve False."
		},
		"OBJECT GET EVENTS": {
			"Syntax": "**OBJECT GET EVENTS** ( {* ;} *objeto* ; *arrEvents* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto \"\" para designar el formulario (si se especifica *) o  Campo o variable (si se omite *)"
				],
				[
					"arrEvents",
					"Integer array",
					"<-",
					"Array de eventos desactivados"
				]
			],
			"Summary": "El comando **OBJECT GET EVENTS** permite obtener la configuración actual de los eventos formulario del formulario, del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get filter": {
			"Syntax": "**OBJECT Get filter** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del filtro"
				]
			],
			"Summary": "El comando OBJECT Get filter devuelve el nombre de todo filtro asociado con el objeto o grupo de objetos designado por *objeto*."
		},
		"OBJECT Get focus rectangle invisible": {
			"Syntax": "**OBJECT Get focus rectangle invisible** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable o campo (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = rectángulo de foco oculto, False = rectángulo de foco visible"
				]
			],
			"Summary": "El comando **OBJECT Get focus rectangle invisible** devuelve el estado de la opción de invisibilidad del rectángulo de foco del objeto o de los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT Get font size": {
			"Syntax": "**OBJECT Get font size** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamaño de la fuente en puntos"
				]
			],
			"Summary": "El comando OBJECT Get font size devuelve el tamaño (en puntos) de la fuente utilizada por el objeto de formulario designado por *objeto*."
		},
		"OBJECT Get font style": {
			"Syntax": "**OBJECT Get font style** ( * ; *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estilo de la fuente"
				]
			],
			"Summary": "El comando OBJECT Get font style devuelve el estilo actual de la fuente utilizada por el objeto de formulario designado por *objeto*."
		},
		"OBJECT Get font": {
			"Syntax": "**OBJECT Get font** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la fuente"
				]
			],
			"Summary": "El comando OBJECT Get font devuelve el nombre de la fuente utilizada por el objeto de formulario designado por *objeto*."
		},
		"OBJECT Get format": {
			"Syntax": "**OBJECT Get format** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Formato de salida del objeto"
				]
			],
			"Summary": "El comando OBJECT Get format devuelve el formato de salida actual aplicado al objeto especificado en el parámetro *objeto*."
		},
		"OBJECT Get help tip": {
			"Syntax": "**OBJECT Get help tip** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Mensaje de ayuda del objeto"
				]
			],
			"Summary": "El comando **OBJECT Get help tip** devuelve el mensaje de ayuda asociado al objeto o a los objetos designados por los parámetros *objeto* y *\\** en el proceso actual."
		},
		"OBJECT Get horizontal alignment": {
			"Syntax": "**OBJECT Get horizontal alignment** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre del objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de alineación"
				]
			],
			"Summary": "El comando **OBJECT Get horizontal alignment** devuelve un código indicando el tipo de alineación horizontal aplicada al objeto designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get indicator type": {
			"Syntax": "**OBJECT Get indicator type** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de indicador"
				]
			],
			"Summary": "El comando **OBJECT Get indicator type** devuelve el tipo del indicador actual asignado al termómetro(s) designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get keyboard layout": {
			"Syntax": "**OBJECT Get keyboard layout** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable o campo (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Código del lenguaje de configuración, \"\" = sin configuración"
				]
			],
			"Summary": "El comando **OBJECT Get keyboard layout** devuelve la configuración del teclado actual asociada a los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT Get list name": {
			"Syntax": "**OBJECT Get list name** ( {* ;} *objeto* {; *tipoLista*} ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre del objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: lista de selección, lista de obligatorios o lista de excluidos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la lista (definida en modo Diseño)"
				]
			],
			"Summary": "El comando OBJECT Get list name devuelve el nombre de la lista asociada al objeto o a un grupo de objetos designados por *objeto*."
		},
		"OBJECT Get list reference": {
			"Syntax": "**OBJECT Get list reference** ( {* ;} *objeto* {; *tipoLista*} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: lista de Selección, lista obligatoria o la lista de excluidos"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de lista"
				]
			],
			"Summary": "El comando **OBJECT Get list reference** devuelve el número de referencia (*RefList*) de la lista jerárquica asociada al objeto o grupo de objetos designados por los parámetros *objeto* y *\\** ."
		},
		"OBJECT GET MAXIMUM VALUE": {
			"Syntax": "**OBJECT GET MAXIMUM VALUE** ( {* ;} *objeto* ; *valorMax* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o  Campo o variable (si se omite *)"
				],
				[
					"valorMax",
					"Date, Time, Number",
					"<-",
					"Valor máximo actual para objeto"
				]
			],
			"Summary": "El comando **OBJECT GET MAXIMUM VALUE** devuelve, en la variable valorMax, el valor máximo actual del objeto o de los objetos designados por los parámetros *objeto* y *\\** ."
		},
		"OBJECT GET MINIMUM VALUE": {
			"Syntax": "**OBJECT GET MINIMUM VALUE** ( {* ;} *objeto* ; *valorMin* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"valorMin",
					"Date, Time, Number",
					"<-",
					"Valor mínimo actual del objeto"
				]
			],
			"Summary": "El comando **OBJECT GET MINIMUM VALUE** devuelve, en la variable *valorMin*, el valor mínimo actual del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get multiline": {
			"Syntax": "**OBJECT Get multiline** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estado Multilínea del objeto"
				]
			],
			"Summary": "El comando **OBJECT Get multiline** devuelve el estado actual de la opción \"Multilínea\" del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT Get name": {
			"Syntax": "**OBJECT Get name** {( *selector* )} : Text",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Categoría de objeto"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del objeto"
				]
			],
			"Summary": "El comando OBJECT Get name devuelve el nombre de un objeto de formulario."
		},
		"OBJECT Get placeholder": {
			"Syntax": "**OBJECT Get placeholder** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o  Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto de ejemplo asociado al objeto"
				]
			],
			"Summary": "El comando **OBJECT Get placeholder** devuelve el texto de ejemplo asociado al objeto o a los objetos designado(s) por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get pointer": {
			"Syntax": "**OBJECT Get pointer** {( *selector* {; *nomObjeto* {; *nomSubFormulario*}})} : Pointer",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Categoría del objeto"
				],
				[
					"nomObjeto",
					"Text",
					"->",
					"Nombre de objeto"
				],
				[
					"nomSubFormulario",
					"Text",
					"->",
					"Nombre del objeto subformulario"
				],
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero a la variable del objeto"
				]
			],
			"Summary": "El comando **OBJECT Get pointer** devuelve un puntero a la variable de un objeto de formulario."
		},
		"OBJECT GET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT GET PRINT VARIABLE FRAME** ( {* ;} *objeto* ; *tamVariable* {; *subformFijo*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"tamVariable",
					"Boolean",
					"<-",
					"True = Impresión tamaño variable, False = impresión tamaño fijo"
				],
				[
					"subformFijo",
					"Integer",
					"<-",
					"Opción para impresión de subformularios de tamaño fijo"
				]
			],
			"Summary": "El comando **OBJECT GET PRINT VARIABLE FRAME** obtiene la configuración actual de las opciones de impresión en tamaño variable del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT GET RESIZING OPTIONS": {
			"Syntax": "**OBJECT GET RESIZING OPTIONS** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"horizontal",
					"Integer",
					"<-",
					"Opción de redimensionamiento horizontal"
				],
				[
					"vertical",
					"Integer",
					"<-",
					"Opción de redimensionamiento vertical"
				]
			],
			"Summary": "El comando **OBJECT GET RESIZING OPTIONS** devuelve las opciones de redimensionamiento actuales del o de los objetos designados por los parámetros *objeto* y *\\**."
		},
		"OBJECT GET RGB COLORS": {
			"Syntax": "**OBJECT GET RGB COLORS** ( {* ;} *objeto* ; *colorPrimerPlano* {; *colorFondo* {; *colorFondoAlt*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"colorPrimerPlano",
					"Text, Integer",
					"<-",
					"Valor del color RGB del primer plano"
				],
				[
					"colorFondo",
					"Text, Integer",
					"<-",
					"Valor del color RGB del fondo"
				],
				[
					"colorFondoAlt",
					"Text, Integer",
					"<-",
					"Valor del color RGB del fondo alterno"
				]
			],
			"Summary": "El comando OBJECT GET RGB COLORS devuelve los colores de fondo y primer plano del objeto o grupo de objetos designados por *objeto*."
		},
		"OBJECT GET SCROLL POSITION": {
			"Syntax": "**OBJECT GET SCROLL POSITION** ( {* ;} *objeto* ; *posicionLinea* {; *posicionH*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable o campo (si se omite *)"
				],
				[
					"posicionLinea",
					"Integer",
					"<-",
					"Número de la primera línea mostrada o desplazamiento vertical en píxeles (imágenes)"
				],
				[
					"posicionH",
					"Integer",
					"<-",
					"Número de la primera columna mostrada (list box) o desplazamiento horizontal en píxeles (imágenes)"
				]
			],
			"Summary": "OBJECT GET SCROLL POSITION devuelve, en los parámetros *posicionLinea* y *posicionH*, información relacionada con la posición de las barras de desplazamiento del objeto de formulario designado por los parámetros *\\** y *objeto*."
		},
		"OBJECT GET SCROLLBAR": {
			"Syntax": "**OBJECT GET SCROLLBAR** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite*)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"<-",
					"True = mostrado, False = oculto"
				],
				[
					"vertical",
					"Boolean, Integer",
					"<-",
					"True = mostrado, False = oculto"
				]
			],
			"Summary": "El comando OBJECT GET SCROLLBAR se utiliza para mostrar u ocultar las barras de desplazamiento horizontal y/o vertical en el objeto designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT GET SHORTCUT": {
			"Syntax": "**OBJECT GET SHORTCUT** ( {* ;} *objeto* ; *tecla* ; *modificadores* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"tecla",
					"Text",
					"<-",
					"Tecla asociada al objeto"
				],
				[
					"modificadores",
					"Integer",
					"<-",
					"Máscara o combinación de máscaras de teclas de modificación"
				]
			],
			"Summary": "El comando **OBJECT GET SHORTCUT** devuelve el atajo de teclado asociado al objeto o a los objetos designados por los parámetros *objeto* y *\\** en el proceso actual."
		},
		"OBJECT Get style sheet": {
			"Syntax": "**OBJECT Get style sheet** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la hoja de estilo"
				]
			],
			"Summary": "El comando **OBJECT Get style sheet** devuelve el nombre de la hoja de estilos asociada al objeto o a los objetos designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT GET SUBFORM CONTAINER SIZE": {
			"Syntax": "**OBJECT GET SUBFORM CONTAINER SIZE** ( *ancho* ; *alto* )",
			"Params": [
				[
					"ancho",
					"Integer",
					"<-",
					"Ancho del objeto subformulario"
				],
				[
					"alto",
					"Integer",
					"<-",
					"Alto del objeto subformulario"
				]
			],
			"Summary": "El comando **OBJECT GET SUBFORM CONTAINER SIZE** devuelve el *ancho* y el *alto* (en píxeles) de un objeto subformulario \"actual\", mostrado en el formulario padre."
		},
		"OBJECT Get subform container value": {
			"Syntax": "**OBJECT Get subform container value**  : any",
			"Params": [
				[
					"Resultado",
					"any",
					"<-",
					"Current value of the subform container data source"
				]
			],
			"Summary": "The **OBJECT Get subform container value** command returns the current value of the data source bound with the subform container displayed in the parent form."
		},
		"OBJECT GET SUBFORM": {
			"Syntax": "**OBJECT GET SUBFORM** ( {* ;} *objeto* ; *puntTabla* ; *subFormDet* {; *subFormList*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"puntTable",
					"Table",
					"<-",
					"Puntero a la tabla del formulario"
				],
				[
					"subFormDet",
					"Text",
					"<-",
					"Nombre del formulario detallado del subformulario"
				],
				[
					"subFormList",
					"Text",
					"<-",
					"Nombre del formulario listado del subformulario (formulario tabla)"
				]
			],
			"Summary": "El comando **OBJECT GET SUBFORM** obtiene los nombres del o de los formulario(s) asociado(s) al objeto subformulario designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get text orientation": {
			"Syntax": "**OBJECT Get text orientation** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Ángulo de rotación de texto"
				]
			],
			"Summary": "El comando **OBJECT Get text orientation** devuelve el valor de orientación actual aplicado al texto del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get three states checkbox": {
			"Syntax": "**OBJECT Get three states checkbox** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = casilla de selección de tres estados, False = casilla de selección estándar"
				]
			],
			"Summary": "El comando **OBJECT Get three states checkbox** devuelve el estado actual de la propiedad \"Tres estados\" de la(s) casilla(s) de selección designada(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT Get title": {
			"Syntax": "**OBJECT Get title** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o campo o variable texto (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título del botón"
				]
			],
			"Summary": "El comando OBJECT Get title devuelve el título (etiqueta) del objeto de formulario designado por *objeto* ."
		},
		"OBJECT Get type": {
			"Syntax": "**OBJECT Get type** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de objeto"
				]
			],
			"Summary": "El comando **OBJECT Get type** devuelve el tipo del objeto designado por los parámetros *objeto* y *\\** en el formulario actual ."
		},
		"OBJECT Get value": {
			"Syntax": "**OBJECT Get value** ( *nomObjeto* ) : any",
			"Params": [
				[
					"nomObjeto",
					"Text",
					"->",
					"Nombre del objeto"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor actual de la fuente de datos del objeto de formulario"
				]
			],
			"Summary": "El comando **OBJECT Get value** devuelve el valor actual de la fuente de datos para los objetos de formulario designados por el parámetro *nomObjeto*."
		},
		"OBJECT Get vertical alignment": {
			"Syntax": "**OBJECT Get vertical alignment** ( {* ;} *objeto* ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de alineación"
				]
			],
			"Summary": "El comando **OBJECT Get vertical alignment** devuelve un valor indicando el tipo de alineación vertical aplicada al objeto designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT Get visible": {
			"Syntax": "**OBJECT Get visible** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable o campo (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto(s) visible(s), de lo contrario False"
				]
			],
			"Summary": "El comando OBJECT Get visible devuelve True si el objeto o grupo de objetos designado por *objeto* tiene el atributo visible y de lo contrario False."
		},
		"OBJECT Is styled text": {
			"Syntax": "**OBJECT Is styled text** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el objeto es un texto multi estilo, False en caso contrario"
				]
			],
			"Summary": "El comando **OBJECT Is styled text** devuelve **True** sila opción \"Multiestilo\" está seleccionada para el(los) objeto(s) designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT MOVE": {
			"Syntax": "**OBJECT MOVE** ( {* ;} *objeto* ; *moveH* ; *moveV* {; *redimH* {; *redimV* {; *}}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Campo o variable (si se omite *)"
				],
				[
					"moveH",
					"Integer",
					"->",
					"Valor del movimiento horizontal del objeto (>0 = a la derecha, <0 = a la izquierda)"
				],
				[
					"moveV",
					"Integer",
					"->",
					"Valor del movimiento vertical del objeto (>0 = hacia abajo, <0 = hacia arriba)"
				],
				[
					"redimH",
					"Integer",
					"->",
					"Valor del redimensionamiento horizontal del objeto"
				],
				[
					"redimV",
					"Integer",
					"->",
					"Valor del redimensionamiento vertical del objeto"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se especifica = coordenadas absolutas Si se omite = coordenadas relativas"
				]
			],
			"Summary": "El comando OBJECT MOVE permite mover los objetos en el formulario actual, definido por los parámetros *\\** y *objeto, moveH* píxeles horizontalmente y *moveV* píxeles verticalmente."
		},
		"OBJECT SET ACTION": {
			"Syntax": "**OBJECT SET ACTION** ( {*sup* ;} *objeto* ; *accion* )",
			"Params": [
				[
					"sup",
					"*",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica ) o <br/>Campo o variable (si * se omite)"
				],
				[
					"accion",
					"Text",
					"->",
					"Acción para asociar"
				]
			],
			"Summary": "El comando **OBJECT SET ACTION** modifica, para el proceso actual, la acción estándar asociada al objeto o a los objetos designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET AUTO SPELLCHECK": {
			"Syntax": "**OBJECT SET AUTO SPELLCHECK** ( {* ;} *objeto* ; *correcionAuto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"correcionAuto",
					"Boolean",
					"->",
					"True = corrección automática,False= no corrección automática"
				]
			],
			"Summary": "El comando **OBJECT SET AUTO SPELLCHECK** permite definir o modificar dinámicamente el estado de la opción **Corrección ortográfica** de los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET BORDER STYLE": {
			"Syntax": "**OBJECT SET BORDER STYLE** ( {* ;} *objeto* ; *estiloBorde* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"estiloBorde",
					"Integer",
					"->",
					"Estilo de línea de borde"
				]
			],
			"Summary": "El comando **OBJECT SET BORDER STYLE** modifica el estilo de línea del borde del objeto(s) designada por los parámetros   *objeto* y *\\** ."
		},
		"OBJECT SET CONTEXT MENU": {
			"Syntax": "**OBJECT SET CONTEXT MENU** ( {* ;} *objeto* ; *menuContext* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"menuContext",
					"Boolean",
					"->",
					"True = activar el menú contextual, False = desactivar el menú contextual"
				]
			],
			"Summary": "El comando **OBJECT SET CONTEXT MENU** activa o desactiva, para el proceso actual, la asociación de un menú contextual por defecto al objeto o a los objetos designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET COORDINATES": {
			"Syntax": "**OBJECT SET COORDINATES** ( {* ;} *objeto* ; *izquierda* ; *sup* {; *derecha* ; *inf*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"Integer",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"izquierda",
					"Integer",
					"->",
					"Coordenada izquierda del objeto en píxeles"
				],
				[
					"sup",
					"Integer",
					"->",
					"Coordenada superior del objeto en píxeles"
				],
				[
					"derecha",
					"Integer",
					"->",
					"Coordenada derecha del objeto en píxeles"
				],
				[
					"inf",
					"Integer",
					"->",
					"Coordenada iinferior del objeto en píxeles"
				]
			],
			"Summary": "El comando **OBJECT SET COORDINATES** modifica la ubicación y, opcionalmente, el tamaño del objeto o de los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET CORNER RADIUS": {
			"Syntax": "**OBJECT SET CORNER RADIUS** ( {* ;} *objeto* ; *radio* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Campo o variable (si se omite *)"
				],
				[
					"radio",
					"Integer",
					"->",
					"Nuevo radio de esquinas redondeadas (en píxeles)"
				]
			],
			"Summary": "El comando **OBJECT SET CORNER RADIUS** modifica el *radio* de las esquinas de los objetos pasados en el parámetro *objeto*."
		},
		"OBJECT SET DATA SOURCE": {
			"Syntax": "**OBJECT SET DATA SOURCE** ( {* ;} *objeto* ; *fuenteDatos* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"fuenteDatos",
					"Pointer",
					"->",
					"Puntero a la nueva fuente de datos del objeto"
				]
			],
			"Summary": "El comando **OBJECT SET DATA SOURCE** modifica la fuente de datos de los objetos designados por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET DRAG AND DROP OPTIONS": {
			"Syntax": "**OBJECT SET DRAG AND DROP OPTIONS** ( {* ;} *objeto* ; *arrastrable* ; *arrastrableAuto* ; *soltable* ; *soltableAuto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrastrable",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				],
				[
					"arrastrableAuto",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				],
				[
					"soltable",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				],
				[
					"soltableAuto",
					"Boolean",
					"->",
					"0 = False, 1 = True"
				]
			],
			"Summary": "El comando **OBJECT SET DRAG AND DROP OPTIONS** define o modifica dinámicamente las opciones de arrastrar y soltar para el objeto o los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET ENABLED": {
			"Syntax": "**OBJECT SET ENABLED** ( {* ;} *objeto* ; *activo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (se se omite *)"
				],
				[
					"activo",
					"Boolean",
					"->",
					"True = objeto(s) activo(s), de lo contrario False"
				]
			],
			"Summary": "El comando OBJECT SET ENABLED utilizado para activar o desactivar el objeto o grupo de objetos especificado por *objeto* en el formulario actual."
		},
		"OBJECT SET ENTERABLE": {
			"Syntax": "**OBJECT SET ENTERABLE** ( {* ;} *objeto* ; *editable* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Tabla o campo o variable (si se omite *)"
				],
				[
					"editable",
					"Boolean, Integer",
					"->",
					"True para editable; False para no editable"
				]
			],
			"Summary": "El comando **OBJECT SET ENTERABLE** \\]vuelve editables o no editables los objetos de formulario especificados por *objeto* y puede definir el atributo enfocable."
		},
		"OBJECT SET EVENTS": {
			"Syntax": "**OBJECT SET EVENTS** ( {* ;} *objeto* ; *arrEventos* ; *modo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto o \"\" para designar el formulario (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"arrEventos",
					"Integer array",
					"->",
					"Array de eventos a definir"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo de activación de los eventos definidos en arrEvents"
				]
			],
			"Summary": "El comando **OBJECT SET EVENTS** modifica, para el proceso actual, la configuración de los eventos formulario del formulario u objetos designados por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET FILTER": {
			"Syntax": "**OBJECT SET FILTER** ( {* ;} *objeto* ; *filtroEntrada* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"filtroEntrada",
					"Text",
					"->",
					"Nuevo filtro de entrada para el área editable"
				]
			],
			"Summary": "OBJECT SET FILTER reemplaza el filtro de entrada para los objetos especificados por *objeto* por *filtroEntrada*."
		},
		"OBJECT SET FOCUS RECTANGLE INVISIBLE": {
			"Syntax": "**OBJECT SET FOCUS RECTANGLE INVISIBLE** ( {* ;} *objeto* ; *invisible* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"invisible",
					"Boolean",
					"->",
					"True = rectángulo de foco oculto,False = rectángulo de foco visible"
				]
			],
			"Summary": "El comando **OBJECT SET FOCUS RECTANGLE INVISIBLE** permite definir o modificar dinámicamente la opción invisibilidad del rectángulo de foco del objeto designado por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET FONT SIZE": {
			"Syntax": "**OBJECT SET FONT SIZE** ( {* ;} *objeto* ; *tamaño* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Tamaño de fuente en puntos"
				]
			],
			"Summary": "**OBJECT SET FONT SIZE** define los objetos formulario especificados por *objeto* para mostrarse utilizando el tamaño de fuente que se pasa en *tamaño*."
		},
		"OBJECT SET FONT STYLE": {
			"Syntax": "**OBJECT SET FONT STYLE** ( {* ;} *objeto* ; *estilos* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"estilos",
					"Integer",
					"->",
					"Estilo de fuente"
				]
			],
			"Summary": "OBJECT SET FONT STYLE asigna el estilo de fuente de *estilos* a los objetos de formulario especificados por *objeto*."
		},
		"OBJECT SET FONT": {
			"Syntax": "**OBJECT SET FONT** ( {* ;} *objeto* ; *fuente* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"fuente",
					"Text",
					"->",
					"Nombre o número de fuente"
				]
			],
			"Summary": "OBJECT SET FONT muestra el *objeto* utilizando la fuente especificada en el parámetro *fuente*."
		},
		"OBJECT SET FORMAT": {
			"Syntax": "**OBJECT SET FORMAT** ( {* ;} *objeto* ; *formato* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"formato",
					"Text",
					"->",
					"Nuevo formato de salida para el objeto"
				]
			],
			"Summary": "**OBJECT SET FORMAT** reemplaza el formato de salida para los objetos especificados por *objeto* por el formato que pasa en *formatSalida*."
		},
		"OBJECT SET HELP TIP": {
			"Syntax": "**OBJECT SET HELP TIP** ( {* ;} *objeto* ; *mensajeAyuda* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"mensajeAyuda",
					"Text",
					"->",
					"Contenido del mensaje de ayuda"
				]
			],
			"Summary": "El comando **OBJECT SET HELP TIP** permite definir o modificar dinámicamente el mensaje de ayuda asociado al objeto o los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET HORIZONTAL ALIGNMENT": {
			"Syntax": "**OBJECT SET HORIZONTAL ALIGNMENT** ( {* ;} *objeto* ; *alineación* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre del objeto (cadena) Si se omite= objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"alineación",
					"Integer",
					"->",
					"Código de alineación"
				]
			],
			"Summary": "El comando **OBJECT SET HORIZONTAL ALIGNMENT** permite determinar el tipo de alineación aplicado al objeto o a los objetos designados por los parámetros *objeto* y *\\**."
		},
		"OBJECT SET INDICATOR TYPE": {
			"Syntax": "**OBJECT SET INDICATOR TYPE** ( {* ;} *objeto* ; *indicador* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"indicador",
					"Integer",
					"->",
					"Tipo de indicador"
				]
			],
			"Summary": "El comando **OBJECT SET INDICATOR TYPE** modifica el tipo de indicador de progresión del o de los termómetro(s) designado(s) por los parámetros *objeto* y *\\** en el proceso actual."
		},
		"OBJECT SET KEYBOARD LAYOUT": {
			"Syntax": "**OBJECT SET KEYBOARD LAYOUT** ( {* ;} *objeto* ; *codigoLeng* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"codigoLeng",
					"Text",
					"->",
					"Código de lenguaje RFC3066 ISO639 e ISO3166,\"\" = no cambiar"
				]
			],
			"Summary": "El comando **OBJECT SET KEYBOARD LAYOUT** permite definir o modificar dinámicamente la configuración de teclado asociada al objeto o los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET LIST BY NAME": {
			"Syntax": "**OBJECT SET LIST BY NAME** ( {* ;} *objeto* {; *listType*}; *lista* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"listType",
					"Integer",
					"->",
					"Tipo de lista: Lista de selección, Lista obligatoria o Lista de excluidos"
				],
				[
					"lista",
					"Text",
					"->",
					"Nombre de la lista a utilizar (definida en el entorno Diseño)"
				]
			],
			"Summary": "El comando OBJECT SET LIST BY NAME define, reemplaza o disocia la lista asociada al objeto o al grupo de objetos designado por *objeto."
		},
		"OBJECT SET LIST BY REFERENCE": {
			"Syntax": "**OBJECT SET LIST BY REFERENCE** ( {* ;} *objeto* {; *tipoLista*}; *lista* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"tipoLista",
					"Integer",
					"->",
					"Tipo de lista: Lista de valores, Lista de obligatorios o Lista de excluidos"
				],
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de lista"
				]
			],
			"Summary": "El comando **OBJECT SET LIST BY REFERENCE** define o remplaza la lista asociada con el objeto u objetos definidos por los parámetros *objeto* y *\\**, con la lista jerárquica definida en el parámetro *lista*."
		},
		"OBJECT SET MAXIMUM VALUE": {
			"Syntax": "**OBJECT SET MAXIMUM VALUE** ( {* ;} *objeto* ; *valorMax* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si especifica, objeto es un nombre de objeto(cadena)<br/>Si se omite, objeto es un campo o variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"valorMax",
					"Date, Time, Number",
					"->",
					"Valor máximo para el objeto"
				]
			],
			"Summary": "El comando **OBJECT SET MAXIMUM VALUE** modifica el valor máximo del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET MINIMUM VALUE": {
			"Syntax": "**OBJECT SET MINIMUM VALUE** ( {* ;} *objeto* ; *valorMinimo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"valorMinimo",
					"Date, Time, Number",
					"->",
					"Valor mínimo para el objeto"
				]
			],
			"Summary": "El comando **OBJECT SET MINIMUM VALUE** modifica el valor mínimo del objeto o de los objetos designado(s) por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET MULTILINE": {
			"Syntax": "**OBJECT SET MULTILINE** ( {* ;} *objeto* ; *multilinea* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"multilinea",
					"Integer",
					"->",
					"Estado de la propiedad multilínea"
				]
			],
			"Summary": "El comando **OBJECT SET MULTILINE** modifica la propiedad \"Multilínea\" del objeto(s) designada por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET PLACEHOLDER": {
			"Syntax": "**OBJECT SET PLACEHOLDER** ( {* ;} *objeto* ; *textoEjemplo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"textoEjemplo",
					"Text",
					"->",
					"Texto de ejemplo asociado al objeto"
				]
			],
			"Summary": "El comando **OBJECT SET PLACEHOLDER** asocia un texto de ejemplo al objeto o a los objetos designados por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET PRINT VARIABLE FRAME": {
			"Syntax": "**OBJECT SET PRINT VARIABLE FRAME** ( {* ;} *objeto* ; *marcoVariable* {; *subformFijo*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"marcoVariable",
					"Boolean",
					"->",
					"True = Impresión de marco variable, False = Impresión de marco fijo"
				],
				[
					"subformFijo",
					"Integer",
					"->",
					"Opciones de impresión de subformularios en tamaño fijo"
				]
			],
			"Summary": "El comando **OBJECT SET PRINT VARIABLE FRAME** modifica la propiedad de marco de impresión variable del objeto o de los objetos designados por los parámetros *objeto* y *\\**."
		},
		"OBJECT SET RESIZING OPTIONS": {
			"Syntax": "**OBJECT SET RESIZING OPTIONS** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"horizontal",
					"Integer",
					"->",
					"Opción de redimensionamiento horizontal"
				],
				[
					"vertical",
					"Integer",
					"->",
					"Opción de redimensionamiento vertical"
				]
			],
			"Summary": "El comando **OBJECT SET RESIZING OPTIONS** permite definir o modificar dinámicamente las opciones de redimensionamiento del objeto o de los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET RGB COLORS": {
			"Syntax": "**OBJECT SET RGB COLORS** ( {* ;} *objeto* ; *colorPrimerPlano* {; *colorFondo* {; *colorFondoAlt*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"colorPrimerPlano",
					"Text, Integer",
					"->",
					"Valor del color RGB del primer plano"
				],
				[
					"colorFondo",
					"Text, Integer",
					"->",
					"Valor del color RGB del fondo"
				],
				[
					"colorFondoAlt",
					"Text, Integer",
					"->",
					"Valor del color RGB del fondo alterno"
				]
			],
			"Summary": "El comando **OBJECT SET RGB COLORS** cambia los colores de fondo y primer plano de los objetos especificados por *objeto* y el parámetro opcional *\\**."
		},
		"OBJECT SET SCROLL POSITION": {
			"Syntax": "**OBJECT SET SCROLL POSITION**   ( * ; *objeto* {; *posicionL* {; *posicionH*}}{; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una tabla o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Tabla o variable (si se omite *)"
				],
				[
					"posicionL",
					"Integer",
					"->",
					"Número de línea a mostrar"
				],
				[
					"posicionH",
					"Integer",
					"->",
					"Número de columna a mostrar (list box) o Desplazamiento horizontal en píxeles (imágenes)"
				],
				[
					"*",
					"Operador",
					"->",
					"Mostrar la línea en primera posición después del desplazamiento"
				]
			],
			"Summary": "El comando OBJECT SET SCROLL POSITION permite desplazar el contenido de varios tipos de objetos: líneas de un subformulario, de un formulario listado mostrado utilizando los comandos MODIFY SELECTION, DISPLAY SELECTION  o de una lista jerárquica, líneas y columnas de un list box o incluso los píxeles de una imagen."
		},
		"OBJECT SET SCROLLBAR": {
			"Syntax": "**OBJECT SET SCROLLBAR** ( {* ;} *objeto* ; *horizontal* ; *vertical* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Variable (si se omite *)"
				],
				[
					"horizontal",
					"Boolean, Integer",
					"->",
					"True = mostrar, False = ocultar"
				],
				[
					"vertical",
					"Boolean, Integer",
					"->",
					"True = mostrar, False = ocultar"
				]
			],
			"Summary": "El comando OBJECT SET SCROLLBAR le permite mostrar u ocultar las barras de desplazamiento horizontal o vertical en el objeto designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT SET SHORTCUT": {
			"Syntax": "**OBJECT SET SHORTCUT** ( {* ;} *objeto* ; *tecla* {; *modificadores*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable o campo(si se omite *)"
				],
				[
					"tecla",
					"Text",
					"->",
					"Tecla a asociar al objeto"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Máscara o combinación de máscaras de teclas de modificación"
				]
			],
			"Summary": "El comando **OBJECT SET SHORTCUT** permite definir o modificar dinámicamente el atajo de teclado asociado al objeto o a los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET STYLE SHEET": {
			"Syntax": "**OBJECT SET STYLE SHEET** ( {* ;} *objeto* ; *nomHojaEstilo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o<br/>Campo o variable (si * se omite)"
				],
				[
					"nomHojaEstilo",
					"Text",
					"->",
					"Nombre de la hoja de estilo"
				]
			],
			"Summary": "El comando **OBJECT SET STYLE SHEET** modifica, para el proceso actual, la hoja de estilo asociada al objeto(s) designado(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET SUBFORM CONTAINER VALUE": {
			"Syntax": "**OBJECT SET SUBFORM CONTAINER VALUE** ( *value* )",
			"Params": [
				[
					"value",
					"any",
					"->",
					"New value for the data source"
				]
			],
			"Summary": "The **OBJECT SET SUBFORM CONTAINER VALUE** command sets the current value of the data source bound with the subform container displayed in the parent form."
		},
		"OBJECT SET SUBFORM": {
			"Syntax": "**OBJECT SET SUBFORM** ( {* ;} *objeto* {; *aTabla*}; *subFormDet* {; *subFormList*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"aTable",
					"Table",
					"->",
					"Tabla de formulario (si tabla de formulario)"
				],
				[
					"subFormDet",
					"Text, Object",
					"->",
					"Nombre del formulario detallado de subformulario"
				],
				[
					"subFormList",
					"Text, Object",
					"->",
					"Nombre del formulario listado de subformulario (formulario tabla)"
				]
			],
			"Summary": "El comando **OBJECT SET SUBFORM** permite modificar dinámicamente el formulario detallado así como también, opcionalmente, el formulario listado asociado al objeto subformulario designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT SET TEXT ORIENTATION": {
			"Syntax": "**OBJECT SET TEXT ORIENTATION** ( {* ;} *objeto* ; *orientacion* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"orientacion",
					"Integer",
					"->",
					"Valor de orientación del objeto"
				]
			],
			"Summary": "El comando **OBJECT SET TEXT ORIENTATION** modifica la orientación del contenido del objeto o de los objetos designados por los parámetros *objeto* y *\\** para el proceso actual."
		},
		"OBJECT SET THREE STATES CHECKBOX": {
			"Syntax": "**OBJECT SET THREE STATES CHECKBOX** ( {* ;} *objeto* ; *tresEst* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si * se especifica) o <br/>Campo o variable (si * se omite)"
				],
				[
					"tresEst",
					"Boolean",
					"->",
					"True = casilla de selección de tres estados, False = casilla de selección estándar"
				]
			],
			"Summary": "El comando **OBJECT SET THREE STATES CHECKBOX**  modifica para el proceso actual, la propiedad de \"Tres Estados\" de la(s) casilla(s) de selección designada(s) por los parámetros *objeto* y *\\** ."
		},
		"OBJECT SET TITLE": {
			"Syntax": "**OBJECT SET TITLE** ( {* ;} *objeto* ; *titulo* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Variable (si se omite *)"
				],
				[
					"titulo",
					"Text",
					"->",
					"Nuevo título para el objeto"
				]
			],
			"Summary": "El comando OBJECT SET TITLE cambia el título de los objetos especificados por *objeto* y lo reemplaza por el valor pasado en *titulo* *."
		},
		"OBJECT SET VALUE": {
			"Syntax": "**OBJECT SET VALUE** ( *nomObjeto* ; *valor* )",
			"Params": [
				[
					"nomObjeto",
					"Text",
					"->",
					"Nombre de objeto"
				],
				[
					"valor",
					"any",
					"->",
					"Nuevo valor para la fuente de datos del objeto de formulario"
				]
			],
			"Summary": "**OBJECT SET VALUE** define el *valor* de la fuente de datos actual para los objetos de formulario designados por el parámetro *nomObjeto*."
		},
		"OBJECT SET VERTICAL ALIGNMENT": {
			"Syntax": "**OBJECT SET VERTICAL ALIGNMENT** ( {* ;} *objeto* ; *alineacion* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"alineacion",
					"Integer",
					"->",
					"Código de alineación"
				]
			],
			"Summary": "El comando **OBJECT SET VERTICAL ALIGNMENT** modifica por programación el tipo de alineación vertical aplicada al objeto designado por los parámetros *objeto* y *\\**."
		},
		"OBJECT SET VISIBLE": {
			"Syntax": "**OBJECT SET VISIBLE** ( {* ;} *objeto* ; *visible* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *), o Campo o variable (si se omite *)"
				],
				[
					"visible",
					"Boolean",
					"->",
					"True para visible, False para invisible"
				]
			],
			"Summary": "El comando OBJECT SET VISIBLE muestra u oculta los objetos especificados por *objeto*."
		},
		"Object to path": {
			"Syntax": "**Object to path** ( *objRuta* ) : Text",
			"Params": [
				[
					"objRuta",
					"Object",
					"->",
					"Objeto que describe los contenidos de una ruta"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de ruta"
				]
			],
			"Summary": "El comando **Object to path** devuelve un nombre de ruta (cadena) en función de la información de ruta que pasó en el parámetro *objRuta*."
		},
		"OLD RELATED MANY": {
			"Syntax": "**OLD RELATED MANY** ( *campo* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo Uno"
				]
			],
			"Summary": "OLD RELATED MANY funciona de la misma forma que RELATE MANY, excepto que OLD RELATED MANY utiliza el valor anterior del campo Uno para establecer la relación."
		},
		"OLD RELATED ONE": {
			"Syntax": "**OLD RELATED ONE** ( *unCampo* )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo Muchos"
				]
			],
			"Summary": "OLD RELATED ONE funciona de la misma forma que RELATE ONE, con la diferencia de que OLD RELATED ONE utiliza el valor anterior de *campo* para establecer la relación."
		},
		"Old": {
			"Syntax": "**Old** ( *unCampo* ) : any",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo del cual devolver el valor anterior"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Valor original del campo"
				]
			],
			"Summary": "El comando Old devuelve el valor almacenado en *campo* antes de que se le haya asignado un valor por programación o modificado un durante la entrada de datos."
		},
		"On Backup Shutdown database method": {
			"Syntax": "$1 -> Método base On Backup Shutdown",
			"Params": [
				[
					"$1",
					"Entero largo",
					"<-",
					"0 = backup ejecutado correctamente; otro valor = error, interrumpido por el usuario o código devuelto por On Backup Startup"
				]
			],
			"Summary": "El Método base On Backup Shutdown se llama cada vez que termina un backup de la base."
		},
		"On Backup Startup database method": {
			"Syntax": "**Método base On Backup Startup** : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"0 = backup autorizado; valor diferente de 0 = backup no autorizado"
				]
			],
			"Summary": "El Método base On Backup Startup se llama cada vez que un backup está a punto de iniciar (backup manual, backup automático programado, o utilizando el comando BACKUP)."
		},
		"On Drop database method": {
			"Syntax": "**Método base On Drop**",
			"Params": [],
			"Summary": "El Método base On Drop está disponible en aplicaciones 4D locales o remotas."
		},
		"ON ERR CALL": {
			"Syntax": "**ON ERR CALL** ( *metodoError* {; *alcance*} )",
			"Params": [
				[
					"metodoError",
					"Text",
					"->",
					"Método de gestión de errores a llamar o cadena vacía para desinstalar el método"
				],
				[
					"alcance",
					"Integer",
					"->",
					"Alcance del método de gestión de errores"
				]
			],
			"Summary": "El comando **ON ERR CALL** instala el método proyecto, cuyo nombre se pasa en *metodoError*, como método de intercepción de errores para el contexto de ejecución definido en el proyecto actual."
		},
		"ON EVENT CALL": {
			"Syntax": "**ON EVENT CALL** ( *metodoEvento* {; *nombreProceso*} )",
			"Params": [
				[
					"metodoEvento",
					"Text",
					"->",
					"Método de evento a llamar, o Cadena vacía para detener la interceptación de eventos"
				],
				[
					"nombreProceso",
					"Text",
					"->",
					"Nombre del proceso"
				]
			],
			"Summary": "El comando **ON EVENT CALL** instala el método, cuyo nombre se pasa en *metodoEvento*, como método de gestión de eventos."
		},
		"On Exit database method": {
			"Syntax": "**Método base On Exit**",
			"Params": [],
			"Summary": "El Método base On Exit se llama una vez cuando sale de la base."
		},
		"On Host Database Event database method": {
			"Syntax": "$1 -> Método base On Host Database Event",
			"Params": [
				[
					"$1",
					"Entero largo",
					"<-",
					"Código del evento"
				]
			],
			"Summary": "El **Método base On Host Database Event** permite a los componentes 4D ejecutar código cuando se abre y cierra la base local."
		},
		"On Mobile App Action database method": {
			"Syntax": "**mobileInfo** -> Método base On Mobile App Action : Object",
			"Params": [
				[
					"mobileInfo",
					"Object",
					"->",
					"Información pasada por la aplicación móvil"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado de acción y sincronización de datos"
				]
			],
			"Summary": "**Documentación trasladada**."
		},
		"On Mobile App Authentication database method": {
			"Syntax": "**Método base On Mobile App Authentication** ( *infoMovil* ; *estado* )",
			"Params": [
				[
					"infoMovil",
					"Object",
					"->",
					"Información pasada por la aplicación móvil"
				],
				[
					"estado",
					"Object",
					"<-",
					"Estado de la autenticación"
				]
			],
			"Summary": "**Documentación trasladada**\n\nLa documentación de este método base ha sido actualizada y trasladada a [developer."
		},
		"On REST Authentication database method": {
			"Syntax": "$1, $2, $3, $4 -> On REST Authentication database method -> $0",
			"Params": [
				[
					"$1",
					"Text",
					"<-",
					"User name"
				],
				[
					"$2",
					"Text",
					"<-",
					"Password"
				],
				[
					"$3",
					"Boolean",
					"<-",
					"True = Digest mode, False = Basic mode"
				],
				[
					"$4",
					"Text",
					"<-",
					"Ip address of the caller"
				],
				[
					"$0",
					"Boolean",
					"<-",
					"True = session opening accepted, False = session opening rejected"
				]
			],
			"Summary": "The **On REST Authentication database method** is deprecated in projects as of 4D 20 R6."
		},
		"On Server Close Connection database method": {
			"Syntax": "$1, $2, $3 -> Método base On Server Close Connection",
			"Params": [
				[
					"$1",
					"Entero largo",
					"<-",
					"Número de usuario utilizado internamente por 4D Server para identificar los usuarios"
				],
				[
					"$2",
					"Entero largo",
					"<-",
					"Número de conexión utilizada internamente por 4D Server para identificar una conexión"
				],
				[
					"$3",
					"Entero largo",
					"<-",
					"Obsoleto: devuelve siempre 0 pero debe declararse"
				]
			],
			"Summary": "El **Método base On Server Close Connection** se llama en el equipo servidor cada vez que termina un proceso 4D Client."
		},
		"On Server Open Connection database method": {
			"Syntax": "$1, $2, $3 -> Método base On Server Open Connection -> $0",
			"Params": [
				[
					"$user",
					"Entero largo",
					"<-",
					"Número de usuario utilizado internamente por 4D Server para identificar los usuarios"
				],
				[
					"$id",
					"Entero largo",
					"<-",
					"Número de conexión utilizado internamente por 4D Server para identificar una conexión"
				],
				[
					"$toIgnore",
					"Entero largo",
					"<-",
					"Obsoleto: devuelve siempre 0 (pero debe declararse)"
				],
				[
					"$status",
					"Entero largo",
					"<-",
					"0 o se omite = conexión aceptada; otro valor = conexión rechazada"
				]
			],
			"Summary": "El **Método base On Server Open Connection** se llama una vez en el equipo servidor cada vez que un equipo 4D remoto inicia un proceso de conexión."
		},
		"On Server Shutdown database method": {
			"Syntax": "**Método base On Server Shutdown**",
			"Params": [],
			"Summary": "El Método base On Server Shutdown se llama una vez en el equipo servidor cuando la base actual se cierra en 4D Server."
		},
		"On Server Startup database method": {
			"Syntax": "**Método base On Server Startup**",
			"Params": [],
			"Summary": "El Método base On Server Startup se llama una vez en el equipo servidor cuando abre una base con 4D Server."
		},
		"On SQL Authentication database method": {
			"Syntax": "$user, $pw, $ip -> Método base On SQL Authentication : Boolean",
			"Params": [
				[
					"$user",
					"Texto",
					"<-",
					"Nombre de usuario"
				],
				[
					"$pw",
					"Texto",
					"<-",
					"Contraseña"
				],
				[
					"$ip",
					"Texto",
					"<-",
					"(Opcional) Dirección IP del cliente al origen de la petición"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = petición aceptada, False = petición rechazada"
				]
			],
			"Summary": "El Método base On SQL Authentication puede utilizarse para filtrar las peticiones enviadas al servidor SQL integrado de 4D."
		},
		"On Startup database method": {
			"Syntax": "**Método base On Startup**",
			"Params": [],
			"Summary": "El Método base On Startup se ejecuta una sola vez, al momento de la apertura de la base."
		},
		"On System Event database method": {
			"Syntax": "$event -> Método base On System Event",
			"Params": [
				[
					"$event",
					"Entero largo",
					"<-",
					"Código del evento"
				]
			],
			"Summary": "El **Método base On System Event** se llama cada vez que ocurre un evento sistema."
		},
		"On Web Authentication database method": {
			"Syntax": "$url, $http, $ipBrowser, $ipServer, $user, $pw -> Método base On Web Authentication : Boolean",
			"Params": [
				[
					"$url",
					"Texto",
					"<-",
					"URL"
				],
				[
					"$http",
					"Texto",
					"<-",
					"Encabezado HTTP + Cuerpo HTTP"
				],
				[
					"$ipBrowser",
					"Texto",
					"<-",
					"Dirección IP del navegador"
				],
				[
					"$ipServer",
					"Texto",
					"<-",
					"Dirección IP del servidor"
				],
				[
					"$user",
					"Texto",
					"<-",
					"Nombre de usuario"
				],
				[
					"$pw",
					"Texto",
					"<-",
					"Contraseña"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = petición aceptada, False = petición rechazada"
				]
			],
			"Summary": "El Método base On Web Authenticationestá a cargo de administrar el acceso al motor del servidor web."
		},
		"On Web Connection database method": {
			"Syntax": "$url, $http, $ipBrowser, $ipServer, $user, $pw -> Método base On Web Connection",
			"Params": [
				[
					"$url",
					"Texto",
					"<-",
					"URL"
				],
				[
					"$http",
					"Texto",
					"<-",
					"Encabezado HTTP + Cuerpo HTTP"
				],
				[
					"$ipBrowser",
					"Texto",
					"<-",
					"Dirección IP del navegador"
				],
				[
					"$ipServer",
					"Texto",
					"<-",
					"Dirección IP del servidor"
				],
				[
					"$user",
					"Texto",
					"<-",
					"Nombre de usuario"
				],
				[
					"$pw",
					"Texto",
					"<-",
					"Contraseña"
				]
			],
			"Summary": "El Método base On Web Connection puede llamarse en los siguientes casos: \n\n* el servidor web recibe una petición que comienza por el URL *4DCGI*."
		},
		"On Web Legacy Close Session database method": {
			"Syntax": "**Método base On Web Legacy Close Session**",
			"Params": [],
			"Summary": "Este método base de datos sólo puede utilizarse con **sesiones web heredadas**, disponibles en bases de datos convertidas a partir de versiones anteriores a la 4D v18 R6\\."
		},
		"ONE RECORD SELECT": {
			"Syntax": "**ONE RECORD SELECT** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual reducir la selección actual al registro actual o Tabla por defecto si se omite"
				]
			],
			"Summary": "ONE RECORD SELECT reduce la selección actual de *tabla* al registro actual."
		},
		"OPEN ADMINISTRATION WINDOW": {
			"Syntax": "**OPEN ADMINISTRATION WINDOW**",
			"Params": [],
			"Summary": "El comando OPEN ADMINISTRATION WINDOW muestra la ventana de administración del servidor en el equipo que lo ejecuta."
		},
		"OPEN COLOR PICKER": {
			"Syntax": "**OPEN COLOR PICKER** {( *textOFondo* )}",
			"Params": [
				[
					"textOFondo",
					"Integer",
					"->",
					"0 o si se omite = color del texto, 1 = color del fondo del texto"
				]
			],
			"Summary": "El comando **OPEN COLOR PICKER** muestra la caja de diálogo de selección de color del sistema."
		},
		"OPEN DATA FILE": {
			"Syntax": "**OPEN DATA FILE** ( *rutaAcceso* )",
			"Params": [
				[
					"rutaAcceso",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del archivo de datos a abrir"
				]
			],
			"Summary": "El comando OPEN DATA FILEpermite cambiar el archivo de datos abierto por la aplicación 4D."
		},
		"OPEN DATABASE": {
			"Syntax": "**OPEN DATABASE** ( *rutaArchivo* )",
			"Params": [
				[
					"rutaArchivo",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del archivo de base de datos a abrir (.4db, .4dc, .4dbase o .4dlink)"
				]
			],
			"Summary": "El comando **OPEN DATABASE** cierra la base de datos 4D actual y abre sobre la marcha de la base definida por *rutaArchivo*."
		},
		"Open document": {
			"Syntax": "**Open document** ( *doc* {; *tipo*}{; *modo*} ) : Time",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento o Ruta de acceso completa al documento o Cadena vacía para mostrar la caja de diálogo"
				],
				[
					"tipo",
					"Text",
					"->",
					"Lista de los tipos de documentos a filtrar o \"*\" para no filtrar los documentos"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo de apertura del documento"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referencia del documento"
				]
			],
			"Summary": "El comando Open document abre el documento cuyo nombre o ruta de acceso se pasa en *documento*."
		},
		"OPEN FONT PICKER": {
			"Syntax": "**OPEN FONT PICKER**",
			"Params": [],
			"Summary": "El comando **OPEN FONT PICKER** muestra la caja de diálogo de selección de fuente del sistema."
		},
		"Open form window": {
			"Syntax": "**Open form window** ( {*tabla* ;} *nomForm* {; *tipo* {; *posH* {; *posV* {; *}}}} ) : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del formulario o tabla por defecto, si se omite"
				],
				[
					"nomForm",
					"Text, Object",
					"->",
					"Nombre del formulario"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de la ventana"
				],
				[
					"posH",
					"Integer",
					"->",
					"Posición horizontal de la ventana"
				],
				[
					"posV",
					"Integer",
					"->",
					"Posición vertical de la ventana"
				],
				[
					"*",
					"Operador",
					"->",
					"Conservar la posición actual y el tamaño de la ventana"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de la ventana"
				]
			],
			"Summary": "El comando Open form window abre una nueva ventana utilizando las propiedades de tamaño y de redimensionamiento del formulario *nomForm*."
		},
		"OPEN PRINTING JOB": {
			"Syntax": "**OPEN PRINTING JOB**",
			"Params": [],
			"Summary": "El comando **OPEN PRINTING JOB** abre una tarea de impresión y apila todas las órdenes de impresión ejecutadas hasta que se llame el comando CLOSE PRINTING JOB."
		},
		"Open resource file": {
			"Syntax": "**Open resource file** ( *resNomArchivo* {; *tipo*} ) : Time",
			"Params": [
				[
					"resNomArchivo",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del archivo de recursos o Cadena vacía para mostrar la caja de diálogo estándar de apertura de archivos"
				],
				[
					"tipo",
					"Text",
					"->",
					"Tipo de archivo Mac OS (cadena de 4 caracteres) o extensión del archivo Windows (cadena de 1 a 3 caracteres) o archivo de recursos (\"res \" / .RES) si se omite"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Número de referencia del archivo de recursos"
				]
			],
			"Summary": "El comando **Open resource file** abre el archivo de recursos cuyo nombre o ruta de acceso completa se pasa en *resNomArchivo*."
		},
		"OPEN RUNTIME EXPLORER": {
			"Syntax": "**OPEN RUNTIME EXPLORER**",
			"Params": [],
			"Summary": "El comando OPEN RUNTIME EXPLORER muestra el explorador de ejecución en una ventana flotante."
		},
		"OPEN SECURITY CENTER": {
			"Syntax": "**OPEN SECURITY CENTER**",
			"Params": [],
			"Summary": "El comando OPEN SECURITY CENTERmuestra la ventana del Centro de seguridad y mantenimiento (CSM)."
		},
		"OPEN SETTINGS WINDOW": {
			"Syntax": "**OPEN SETTINGS WINDOW** ( *selector* {; *acceso* {; *tipoParam*}} )",
			"Params": [
				[
					"selector",
					"Text",
					"->",
					"Llave que designa un tema o página o un grupo de parámetros de la caja de diálogo Preferencias"
				],
				[
					"acceso",
					"Boolean",
					"->",
					"True=Bloquear las otras páginas de la caja de diálogo, False o si se omite=Dejar activas las otras páginas de la caja de diálogo"
				],
				[
					"tipoParam",
					"Integer",
					"->",
					"0 o si se omite = Parámetros de estructura, 1 = Parámetros de usuario, 2 = Configuración usuario para archivo de datos"
				]
			],
			"Summary": "El comando **OPEN SETTINGS WINDOW** abre la caja de diálogo de Preferencias 4D o las Propiedades de la base actual y muestra los parámetros o la página correspondiente a la llave pasada en el parámetro *selector*."
		},
		"OPEN URL": {
			"Syntax": "**OPEN URL** ( *ruta* {; *nomAp*}{; *} )",
			"Params": [
				[
					"ruta",
					"Text",
					"->",
					"Ruta del documento o URL a abrir"
				],
				[
					"nomAp",
					"Text",
					"->",
					"Nombre de la aplicación a utilizar"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se especifica = la URL no está traducida, Si se omite = la URL está traducida"
				]
			],
			"Summary": "El comando OPEN URL abre el archivo o URL pasado en el parámetro *ruta* con la aplicación indicada en *nomAp* (si hay)."
		},
		"Open window": {
			"Syntax": "**Open window** ( *izquierda* ; *superior* ; *derecha* ; *inferior* {; *tipo* {; *titulo* {; *casillaCerrar*}}} ) : Integer",
			"Params": [
				[
					"izquierda",
					"Integer",
					"->",
					"Coordenada global izquierda del interior de la ventana"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada global superior del interior de la ventana"
				],
				[
					"derecha",
					"Integer",
					"->",
					"Coordenada global derecha del interior de la ventana"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Coordenada global inferior del interior de la ventana"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de la ventana"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título de la ventana"
				],
				[
					"casillaCerrar",
					"Text",
					"->",
					"Método a llamar en caso de doble clic del menú Control o de clic en la casilla Cerrar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia de la ventana"
				]
			],
			"Summary": "**Open window** abre una nueva ventana cuyas dimensiones son definidas por los cuatro primeros parámetros"
		},
		"ORDER BY ATTRIBUTE": {
			"Syntax": "**ORDER BY ATTRIBUTE** ( {*tabla* ;} *campoObjeto* ; *rutaAtrib* ; > o < {; *campoObjeto2* ; *rutaAtrib2* ; > o <2 ; ... ; *campoObjetoN* ; *rutaAtribN* ; > o <N} {; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual ordenar los registros seleccionados, o tabla por defecto, si se omite"
				],
				[
					"campoObjeto",
					"Object",
					"->",
					"Campo objeto que contiene el atributo de ordenación"
				],
				[
					"rutaAtrib",
					"Text",
					"->",
					"Nombre o ruta del atributo en el que se define el orden para cada nivel"
				],
				[
					"> o <",
					"Operador",
					"->",
					"Dirección de ordenación para cada nivel: > para ordenar en orden ascendente o < para ordenar en orden descendente"
				],
				[
					"*",
					"Operador",
					"->",
					"Continuar bandera de orden"
				]
			],
			"Summary": "El comando **ORDER BY ATTRIBUTE** ordena (reordena) los registros de la selección actual de *tabla* para el proceso actual basado en el contenido de *rutaAtrib* de *campoObjeto*."
		},
		"ORDER BY FORMULA": {
			"Syntax": "**ORDER BY FORMULA** ( *tabla* ; *formula* {; > o <}{; *formula2* ; > o <2 ; ... ; *formulaN* ; > o <N} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual ordenar la selección de registros"
				],
				[
					"formula",
					"Expression",
					"->",
					"Fórmula de ordenación de los registros (puede ser de tipo Alfanumérico, Real, Entero,  Entero largo, Fecha, Hora o Booleano)"
				],
				[
					"> o <",
					"Operador",
					"->",
					"Sentido de la ordenación para cada nivel: > orden cresciente, u < orden decreciente"
				]
			],
			"Summary": "**ORDER BY FORMULA** ordena (reordena) los registros de la selección actual de *tabla* para el proceso actual."
		},
		"ORDER BY": {
			"Syntax": "**ORDER BY** ( {*tabla* ;}{ *unCampo* }{; > o < }{; *unCampo2* ; > o <2 ; ... ; *unCampoN* ; > o <N}{; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual ordenar los registros seleccionados o Tabla por defecto si se omite"
				],
				[
					"unField",
					"Field",
					"->",
					"Campo en el cual efectuar la ordenación para cada nivel"
				],
				[
					"> o <",
					"Operador",
					"->",
					"Sentido de la ordenación para cada nivel: > para orden ascendente o < para orden descendente"
				],
				[
					"*",
					"Operador",
					"->",
					"Continua la bandera de ordenación"
				]
			],
			"Summary": "ORDER BY ordena (reordena) los registros de la selección actual de *tabla* para el proceso actual."
		},
		"Outside call": {
			"Syntax": "**Outside call**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve True si el ciclo de ejecución es outside call"
				]
			],
			"Summary": "**Outside call** devuelve True para el ciclo de ejecución After."
		},
		"PAGE BREAK": {
			"Syntax": "**PAGE BREAK** {( * )}<br/>**PAGE BREAK** {( > )}",
			"Params": [
				[
					"* &#124; >",
					"Operator",
					"->",
					"* Cancela la impresión iniciada por Print form, o > Manda un trabajo de impresión"
				]
			],
			"Summary": "PAGE BREAK dispara la impresión de datos enviados a la impresora y provocar un salto de página."
		},
		"Parse formula": {
			"Syntax": "**Parse formula** ( *formula* {; *opciones*}{; *mensajeError*} ) : Text",
			"Params": [
				[
					"formula",
					"Text",
					"->",
					"Fórmula de texto sin formato"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Instrucciones para entrada/salida"
				],
				[
					"mensajeError",
					"Text",
					"<-",
					"Mensaje de error (cadena vacía si no hay error)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Fórmula transformada (texto sin formato)"
				]
			],
			"Summary": "La función **Parse formula** analiza la *formula* 4D, verifica su sintaxis y devuelve su formula normalizada."
		},
		"Pasteboard data size": {
			"Syntax": "**Pasteboard data size** ( *tipoDatos* ) : Integer",
			"Params": [
				[
					"tipoDatos",
					"Text",
					"->",
					"Tipo de datos (4 caracteres)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamaño (en bytes) de datos almacenados en el portapapeles o código de error"
				]
			],
			"Summary": "El comando Pasteboard data size permite probar si hay datos del tipo *tipoDatos* en el portapapeles."
		},
		"Path to object": {
			"Syntax": "**Path to object**  ( *Ruta* {; *tipoRuta*} ) : Object",
			"Params": [
				[
					"Ruta",
					"Text",
					"->",
					"Nombre de la ruta"
				],
				[
					"tipoRuta",
					"Integer",
					"->",
					"Tipo de sintaxis de ruta: Sistema (por defecto) o Posix"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que describe los contenidos de la ruta"
				]
			],
			"Summary": "El comando **Path to object**  devuelve un objeto que contiene las propiedades específicas de la *ruta* que pasó en el parámetro."
		},
		"PAUSE INDEXES": {
			"Syntax": "**PAUSE INDEXES** ( *laTabla* )",
			"Params": [
				[
					"laTable",
					"Table",
					"->",
					"Tabla para la cual detener los índices"
				]
			],
			"Summary": "El comando **PAUSE INDEXES** desactiva temporalmente todos los índices de *laTabla*, excepto el índice de la llave primaria ."
		},
		"PAUSE PROCESS": {
			"Syntax": "**PAUSE PROCESS** ( *proceso* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				]
			],
			"Summary": "PAUSE PROCESS suspende la ejecución de *proceso* hasta que es reactivada por el comando RESUME PROCESS."
		},
		"PHP Execute": {
			"deprecated": true,
			"Syntax": "**PHP Execute** ( *rutaScript* {; *nomFuncion* {; *resultPHP* {; *param*} {; *param2* ; ... ; *paramN*}}} ) : Boolean",
			"Params": [
				[
					"rutaScript",
					"Text",
					"->",
					"Ruta de acceso al script PHP o \"\" para ejecutar una función PHP"
				],
				[
					"nomFuncion",
					"Text",
					"->",
					"Función PHP a ejecutar"
				],
				[
					"resultPHP",
					"*, Variable, Field",
					"<-",
					"Resultado de ejecución de la función PHP o * para no recibir el resultado"
				],
				[
					"param",
					"Text, Boolean, Real, Integer, Date, Time",
					"->",
					"Parámetros de la función PHP"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = ejecución correcta, False = error de ejecución"
				]
			],
			"Summary": "El comando **PHP Execute** permite ejecutar un script o una función PHP."
		},
		"PHP GET FULL RESPONSE": {
			"deprecated": true,
			"Syntax": "**PHP GET FULL RESPONSE** ( *stdOut* {; *etiquetasErr* ; *valoresErr*} {; *camposEncHttp* {; *valoresEncHttp*}} )",
			"Params": [
				[
					"stdOut",
					"Text, Blob",
					"<-",
					"Contenido del buffer stdOut"
				],
				[
					"etiquetasErr",
					"Text array",
					"<-",
					"Etiquetas de los errores"
				],
				[
					"valoresErr",
					"Text array",
					"<-",
					"Valores de los errores"
				],
				[
					"camposEncHttp",
					"Text array",
					"<-",
					"Nombres de los encabezados HTTP"
				],
				[
					"valoresEncHttp",
					"Text array",
					"<-",
					"Valores de los encabezados HTTP"
				]
			],
			"Summary": "El comando PHP GET FULL RESPONSE permite obtener información adicional sobre la respuesta devuelta por el intérprete PHP."
		},
		"PHP GET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP GET OPTION** ( *opcion* ; *valor* )",
			"Params": [
				[
					"opcion",
					"Integer",
					"->",
					"Opción a leer"
				],
				[
					"valor",
					"Boolean",
					"<-",
					"Valor actual de la opción"
				]
			],
			"Summary": "El comando PHP GET OPTION puede ser utilizado para conocer el valor actual de una opción relativa a la ejecución de scripts PHP."
		},
		"PHP SET OPTION": {
			"deprecated": true,
			"Syntax": "**PHP SET OPTION** ( *opción* ; *valor* {; *} )",
			"Params": [
				[
					"opción",
					"Integer",
					"->",
					"Número de opción a definir"
				],
				[
					"valor",
					"Boolean",
					"->",
					"Nuevo valor de la opción"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: la modificación no se aplica a la siguiente llamada"
				]
			],
			"Summary": "El comando **PHP SET OPTION** se utiliza para definir opciones específicas antes de llamar el comando PHP Execute."
		},
		"PICTURE CODEC LIST": {
			"Syntax": "**PICTURE CODEC LIST** ( *arrayCodec* {; *arrayNoms*}{; *} )",
			"Params": [
				[
					"arrayCodec",
					"Text array",
					"<-",
					"Identificadores de codecs de imágenes disponibles"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nombres de los codecs de imágenes"
				],
				[
					"*",
					"Operador",
					"->",
					"Devuelve la lista de los codecs de lectura"
				]
			],
			"Summary": "El comando PICTURE CODEC LIST llena el array *arrayCodec* con la lista de los identificadores de los codecs de imágenes que están disponibles en el equipo donde se ejecuta."
		},
		"PICTURE LIBRARY LIST": {
			"Syntax": "**PICTURE LIBRARY LIST** ( *refsImag* ; *nomsImag* )",
			"Params": [
				[
					"refsImag",
					"Integer array",
					"<-",
					"Números de referencia de las imágenes de la librería de imágenes"
				],
				[
					"nomsImag",
					"Text array",
					"<-",
					"Nombres de las imágenes de la librería de imágenes"
				]
			],
			"Summary": "El comando PICTURE LIBRARY LIST devuelve los números de referencia y los nombres de las imágenes almacenadas en la librería de imágenes de la base de datos."
		},
		"PICTURE PROPERTIES": {
			"Syntax": "**PICTURE PROPERTIES** ( *imagen* ; *largo* ; *altura* {; *hDesp* {; *vDesp* {; *modo*}}} )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen para la cual obtener la información"
				],
				[
					"largo",
					"Real",
					"<-",
					"Largo de la imagen expresado en píxeles"
				],
				[
					"altura",
					"Real",
					"<-",
					"Alto de la imagen expresado en píxeles"
				],
				[
					"hDesp",
					"Integer",
					"<-",
					"Offset horizontal cuando la imagen se muestra en segundo plano"
				],
				[
					"vDesp",
					"Integer",
					"<-",
					"Offset  vertical cuando la imagen se muestra en segundo plano"
				],
				[
					"modo",
					"Integer",
					"<-",
					"Modo de transferencia cuando la imagen se muestra en segundo plano"
				]
			],
			"Summary": "El comando PICTURE PROPERTIES devuelve la información sobre la imagen que pasa en el parámetro *imagen*."
		},
		"Picture size": {
			"Syntax": "**Picture size** ( *imagen* ) : Integer",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen para la cual devolver el tamaño en bytes"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tamaño en bytes de la imagen"
				]
			],
			"Summary": "Esta función devuelve el tamaño de *imagen* en bytes."
		},
		"PICTURE TO BLOB": {
			"Syntax": "**PICTURE TO BLOB** ( *imagen* ; *blobImag* ; *codec* )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Campo o variable tipo imagen"
				],
				[
					"blobImag",
					"Blob",
					"<-",
					"BLOB para recibir la imagen convertida"
				],
				[
					"codec",
					"Text",
					"->",
					"Identificación de codec de imagen"
				]
			],
			"Summary": "El comando PICTURE TO BLOB convierte una imagen almacenada en una variable o en un campo 4D en otro formato y ubica la imagen resultante en un BLOB."
		},
		"PLAY": {
			"Syntax": "**PLAY** ( *nomObjeto* {; *canal*} )",
			"Params": [
				[
					"nomObjeto",
					"Text",
					"->",
					"Nombre de archivo de sonido o sonido sistemaCadena vacía para detener un sonido asincrónico"
				],
				[
					"canal",
					"Integer",
					"->",
					"Si se pasa, canal de salida y ejecución asincrónico Si se omite, ejecución sincrónica"
				]
			],
			"Summary": "El comando **PLAY** permite reproducir archivos de sonido o multimedia."
		},
		"PLUGIN LIST": {
			"Syntax": "**PLUGIN LIST** ( *arrayNumeros* ; *arrayNoms* )",
			"Params": [
				[
					"arrayNumeros",
					"Integer array",
					"<-",
					"Números de los plug-ins"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nombres de los plug-ins"
				]
			],
			"Summary": "El comando PLUGIN LIST llena los arrays *arrayNumeros* y *arrayNoms* con los números y los nombres de los plug-ins cargados por la aplicación 4D."
		},
		"POP RECORD": {
			"Syntax": "**POP RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual desapilar el registro actual o Tabla por defecto, si se omite"
				]
			],
			"Summary": "POP RECORD carga el primer registro de la pila de registros de la tabla y lo vuelve el registro actual."
		},
		"Pop up menu": {
			"Syntax": "**Pop up menu** ( *contenido* {; *porDefecto* {; *CoordX* ; *CoordY*}} )  : Integer",
			"Params": [
				[
					"contenido",
					"Text",
					"->",
					"Definición del texto del menú"
				],
				[
					"porDefecto",
					"Integer",
					"->",
					"Número del elemento seleccionado por defecto"
				],
				[
					"CoordX",
					"Integer",
					"->",
					"Coordenada X de la esquina superior izquierda"
				],
				[
					"CoordY",
					"Integer",
					"->",
					"Coordenada Y de la esquina superior izquierda"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de elemento de menú seleccionado"
				]
			],
			"Summary": "El comando Pop up menu muestra un menú pop up en la ubicación actual del ratón."
		},
		"Position": {
			"Syntax": "**Position** ( *buscar* ; *laCadena* {; *inicio* {; *longEncont*}}{; *} ) -> Resultado <br/>\n**Position** ( *buscar* ; *laCadena* ; *inicio* ; *longEncont* ; *opciones* ) -> Resultado",
			"Params": [
				[
					"buscar",
					"Text",
					"->",
					"Cadena a buscar"
				],
				[
					"laText",
					"Text",
					"->",
					"Cadena en la cual buscar"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Posición en la cadena donde comenzar la búsqueda"
				],
				[
					"longEncont",
					"Integer",
					"<-",
					"Longitud de la cadena encontrada"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: búsqueda diacrítica"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posición de la primera ocurrencia"
				],
				[
					"Position ( buscar ; laCadena ; inicio ; longEncont ; opciones ) -> Resultado"
				],
				[
					"Parámetro",
					"Tipo",
					"Descripción"
				],
				[
					"buscar",
					"Text",
					"->",
					"Cadena a buscar"
				],
				[
					"laText",
					"Text",
					"->",
					"Cadena en la cual buscar"
				],
				[
					"inicio",
					"Integer",
					"->",
					"Posición en la cadena donde comenzar la búsqueda"
				],
				[
					"longEncont",
					"Integer",
					"->",
					"Longitud de la cadena encontrada"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Condición(es) de búsqueda"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Posición de la primera ocurrencia"
				]
			],
			"Summary": "**Position** devuelve la posición de la primera ocurrencia de *buscar* en *laCadena*."
		},
		"POST CLICK": {
			"Syntax": "**POST CLICK** ( *ratonX* ; *ratonY* {; *proceso*} {; *} )",
			"Params": [
				[
					"ratonX",
					"Integer",
					"->",
					"Coordenada horizontal"
				],
				[
					"ratonY",
					"Integer",
					"->",
					"Coordenada vertical"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso de destino o fila de atención de eventos de la aplicación, si se omite o si se pasa 0"
				],
				[
					"*",
					"Operator",
					"->",
					"Si se especifica, utilizar el sistema de coordenadas globales Si se omite, utilizar el sistema de coordenadas locales"
				]
			],
			"Summary": "El comando POST CLICK simula un clic del ratón."
		},
		"POST EVENT": {
			"Syntax": "**POST EVENT** ( *que* ; *mensaje* ; *cuando* ; *ratonX* ; *ratonY* ; *modificadores* {; *proceso*} )",
			"Params": [
				[
					"que",
					"Integer",
					"->",
					"Tipo de evento"
				],
				[
					"mensaje",
					"Integer",
					"->",
					"Mensaje del evento"
				],
				[
					"cuando",
					"Integer",
					"->",
					"Momento del evento expresado en tics"
				],
				[
					"ratonX",
					"Integer",
					"->",
					"Coordenada horizontal del ratón"
				],
				[
					"ratonY",
					"Integer",
					"->",
					"Coordenada vertical del ratón"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Estado de las teclas Modificadores"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso de destino o Fila de atención de los eventos de la aplicación, si se omite o si se pasa 0"
				]
			],
			"Summary": "El comando POST EVENT simula un evento de teclado o de ratón."
		},
		"POST KEY": {
			"Syntax": "**POST KEY** ( *codigo* {; *modificadores* {; *proceso*}} )",
			"Params": [
				[
					"codigo",
					"Integer",
					"->",
					"Código de un caracter o código de tecla de función"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Estado de teclas Modificador"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso de destino o Fila de atención de eventos de la aplicación, si se omite o si es igual a 0"
				]
			],
			"Summary": "El comando POST KEY simula una tecla."
		},
		"POST OUTSIDE CALL": {
			"Syntax": "**POST OUTSIDE CALL** ( *proceso* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				]
			],
			"Summary": "This command was named **CALL PROCESS** in previous 4D releases."
		},
		"PREVIOUS RECORD": {
			"Syntax": "**PREVIOUS RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual mover el registro anterior de la selección actual o Tabla por defecto, si se omite"
				]
			],
			"Summary": "PREVIOUS RECORD mueve el puntero del registro actual al registro anterior en la selección de *tabla* para el proceso actual."
		},
		"PRINT LABEL": {
			"Syntax": "**PRINT LABEL** ( {*tabla* }{;}{ *doc* {; * | >}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a imprimir, o Tabla por defecto, si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento de etiquetas del disco"
				],
				[
					"* &#124; >",
					"Operator",
					"->",
					"* para suprimir las cajas de diálogo de impresión, o > para no reiniciar los parámetros de impresión"
				]
			],
			"Summary": "**PRINT LABEL** le permite imprimir etiquetas con los datos de la selección de *tabla*."
		},
		"Print object": {
			"Syntax": "**Print object** ( {* ;} *objeto* {; *posX* {; *posY* {; *ancho* {; *alto*}}}} ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de ojbeto (cadena). Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o variable (si se omite *)"
				],
				[
					"posX",
					"Integer",
					"->",
					"Ubicación horizontal del objeto"
				],
				[
					"posY",
					"Integer",
					"->",
					"Ubicación vertical del objeto"
				],
				[
					"ancho",
					"Integer",
					"->",
					"Ancho del objeto (píxeles)"
				],
				[
					"alto",
					"Integer",
					"->",
					"Alto del objeto (píxeles)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = objeto impreso completamente, de lo contrario False"
				]
			],
			"Summary": "El comando **Print object** permite imprimir el o los objetos de formulario designado(s) por los parámetros *objeto* y *\\**, en la ubicación definida por los parámetros *posX* y *posY*."
		},
		"PRINT OPTION VALUES": {
			"Syntax": "**PRINT OPTION VALUES** ( *opcion* ; *arrayNoms* {; *info1Array* {; *info2Array*}} )",
			"Params": [
				[
					"opcion",
					"Integer",
					"->",
					"Número de opción"
				],
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nombres de los valores"
				],
				[
					"info1Array",
					"Integer array",
					"<-",
					"Valores (1) de la opción"
				],
				[
					"info2Array",
					"Integer array",
					"<-",
					"Valores (2) de la opción"
				]
			],
			"Summary": "El comando **PRINT OPTION VALUES** devuelve en *arrayNoms* una lista de nombres disponibles para la *opcion* de impresión definida."
		},
		"PRINT RECORD": {
			"Syntax": "**PRINT RECORD** ( {*tabla*}{;}{* | >} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual imprimir el registro actual o Tabla por defecto, si se omite"
				],
				[
					"* &#124; >",
					"Operador",
					"->",
					"* para suprimir las cajas de diálogo de impresión, o > para no reiniciar los parámetros de impresión"
				]
			],
			"Summary": "**PRINT RECORD** imprime el registro actual de *tabla*, sin modificar la selección actual."
		},
		"PRINT SELECTION": {
			"Syntax": "**PRINT SELECTION** ( {*tabla*}{;}{* | >} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual imprimir la selección, o Tabla por defecto, si se omite"
				],
				[
					"* &#124; >",
					"Operador",
					"->",
					"* para eliminar las cajas de diálogo de impresión, o > para no reiniciar los parámetros de impresión"
				]
			],
			"Summary": "PRINT SELECTION imprime la selección actual de *tabla*."
		},
		"Print settings to BLOB": {
			"Syntax": "**Print settings to BLOB** ( *confImp* ) : Integer",
			"Params": [
				[
					"confImp",
					"Blob",
					"<-",
					"Configuración de impresión actual"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Código de estado: 1=Operación exitosa, 0=Sin impresora actual"
				]
			],
			"Summary": "El comando **Print settings to BLOB** guarda los ajustes de impresión 4D actuales en el BLOB *confImp*."
		},
		"PRINT SETTINGS": {
			"Syntax": "**PRINT SETTINGS** {( *dialType* )}",
			"Params": [
				[
					"dialType",
					"Integer",
					"->",
					"Cajas de diálogo a mostrar"
				]
			],
			"Summary": "PRINT SETTINGS muestra una caja de diálogo de impresión."
		},
		"PRINTERS LIST": {
			"Syntax": "**PRINTERS LIST** ( *arrayNoms* {; *arrayNomsAlt* {; *arrayModelos*}} )",
			"Params": [
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nombres de las impresoras"
				],
				[
					"arrayNomsAlt",
					"Text array",
					"<-",
					"Windows: Ubicación de las impresoras macOS: Nombres personalizados de las impresoras"
				],
				[
					"arrayModelos",
					"Text array",
					"<-",
					"Modelos de impresoras"
				]
			],
			"Summary": "El comando **PRINTERS LIST** llena el (los) array(s) pasados como parámetro(s) con los nombres y opcionalmente con la ubicación o nombres personalizados y los modelos de impresión disponibles para el equipo."
		},
		"Printing page": {
			"Syntax": "**Printing page**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de la página que se está imprimiendo"
				]
			],
			"Summary": "**Printing page** devuelve el número de la página en impresión."
		},
		"PROCESS 4D TAGS": {
			"Syntax": "**PROCESS 4D TAGS** ( *plantillaEntrada* ; *datosSalida* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"plantillaEntrada",
					"Text",
					"->",
					"Datos que contiene las etiquetas a tratar"
				],
				[
					"datosSalida",
					"Text",
					"<-",
					"Datos procesados"
				],
				[
					"param",
					"Expression",
					"->",
					"Parámetros pasados a la plantilla en ejecución"
				]
			],
			"Summary": "El comando **PROCESS 4D TAGS** provoca el procesamiento de las etiquetas de transformación 4D contenidas en el parámetro *plantillaEntrada* mientras opcionalmente inserta valores utilizando los valores vía los parámetros *param* y devuelve los datos resultantes en *datosSalida*."
		},
		"Process aborted": {
			"Syntax": "**Process aborted**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = el proceso va a abortarse, False = el proceso no va a ser abortado"
				]
			],
			"Summary": "El comando **Process aborted** devuelve **True** si el proceso en el cual se llama está a punto de ser interrumpido inesperadamente, es decir que la ejecución del comando no pudo terminar se ejecución “normal”."
		},
		"Process state": {
			"Syntax": "**Process state** ( *proceso* ) : Integer",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estado del proceso"
				]
			],
			"Summary": "El comando Process state devuelve el estado del proceso cuyo número se pasó en *proceso*."
		},
		"PUSH RECORD": {
			"Syntax": "**PUSH RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual apilar el registro actual o Tabla por defecto, si se omite"
				]
			],
			"Summary": "PUSH RECORD apila una copia del registro actual de *tabla* en la pila de registros de la tabla."
		},
		"QR BLOB TO REPORT": {
			"Syntax": "**QR BLOB TO REPORT** ( *area* ; *BLOB* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB que contiene el informe"
				]
			],
			"Summary": "El comando QR BLOB TO REPORT coloca el informe contenido en el *blob* en el área de informe rápido pasada en *area*."
		},
		"QR Count columns": {
			"Syntax": "**QR Count columns** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de columnas en el área"
				]
			],
			"Summary": "El comando QR Count columns devuelve el número de columnas presentes en el *area* del informe rápido."
		},
		"QR DELETE COLUMN": {
			"Syntax": "**QR DELETE COLUMN** ( *area* ; *numColumna* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				]
			],
			"Summary": "El comando QR DELETE COLUMN borra del *area* la columna cuyo número se pasó en *numColumna*."
		},
		"QR DELETE OFFSCREEN AREA": {
			"Syntax": "**QR DELETE OFFSCREEN AREA** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área a borrar"
				]
			],
			"Summary": "El comando QR DELETE OFFSCREEN AREA borra de la memoria el área fuera de pantalla del informe rápido cuya referencia se pasa en el parámetro *area*."
		},
		"QR EXECUTE COMMAND": {
			"Syntax": "**QR EXECUTE COMMAND** ( *area* ; *comando* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"comando",
					"Integer",
					"->",
					"Comando de menú a ejecutar"
				]
			],
			"Summary": "El comando **QR EXECUTE COMMAND** ejecuta el comando de botón de la barra de herramientas cuya referencia se pasa en *comando*."
		},
		"QR Find column": {
			"Syntax": "**QR Find column** ( *area* ; *expresion* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"expresion",
					"Text, Pointer",
					"->",
					"Objeto de columna"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de columna"
				]
			],
			"Summary": "El comando QR Find column devuelve el número de la primera columna cuyo contenido corresponde a la *expresion* pasada en parámetro."
		},
		"QR Get area property": {
			"Syntax": "**QR Get area property** ( *area* ; *propiedad* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"propiedad",
					"Integer",
					"->",
					"Elemento de interfaz"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"1 = mostrado, 0 = oculto"
				]
			],
			"Summary": "El comando **QR Get area property** devuelve 0 si no se muestra el elemento de interfaz pasado en *propiedad*; de lo contrario, devuelve 1."
		},
		"QR GET BORDERS": {
			"Syntax": "**QR GET BORDERS** ( *area* ; *columna* ; *linea* ; *borde* ; *grueso* {; *color*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"columna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"linea",
					"Integer",
					"->",
					"Número de línea"
				],
				[
					"borde",
					"Integer",
					"->",
					"Valor del borde"
				],
				[
					"grueso",
					"Integer",
					"<-",
					"Grueso de línea"
				],
				[
					"color",
					"Integer",
					"<-",
					"Color del borde"
				]
			],
			"Summary": "El comando QR GET BORDERS permite recuperar el estilo del borde de una celda determinada."
		},
		"QR Get command status": {
			"Syntax": "**QR Get command status** ( *area* ; *comando* {; *valor*} ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"comando",
					"Integer",
					"->",
					"Número del comando"
				],
				[
					"valor",
					"Integer, Text",
					"<-",
					"Valor del subelemento seleccionado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Estado del comando"
				]
			],
			"Summary": "El comando QR Get command status devuelve 0 si el *comando* está inactivo ó 1 si está activo."
		},
		"QR GET DESTINATION": {
			"Syntax": "**QR GET DESTINATION** ( *area* ; *tipo* {; *especificos*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"tipo",
					"Integer",
					"<-",
					"Tipo de informe"
				],
				[
					"especificos",
					"Text, Variable",
					"<-",
					"Específicos asociados al tipo de salida"
				]
			],
			"Summary": "El comando QR GET DESTINATION recupera el *tipo* de salida del informe para el área cuya referencia se pasó en *area*."
		},
		"QR Get document property": {
			"Syntax": "**QR Get document property** ( *area* ; *propiedad* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"propiedad",
					"Integer",
					"->",
					"1 = Diálogo de impresión, 2 = Unidad del documento"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Valor de la propiedad"
				]
			],
			"Summary": "El comando QR Get document property permite recuperar el estado mostrado para la caja de diálogo de impresión o la unidad utilizada para el documento presente en *area*."
		},
		"QR Get drop column": {
			"Syntax": "**QR Get drop column** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Espacio de soltar"
				]
			],
			"Summary": "El comando QR Get drop column devuelve un valor dependiendo de dónde se efectúe una acción soltar"
		},
		"QR GET HEADER AND FOOTER": {
			"Syntax": "**QR GET HEADER AND FOOTER** ( *area* ; *selector* ; *tituloIzq* ; *tituloCent* ; *tituloDer* ; *alto* {; *imagen* {; *alinImag*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"selector",
					"Integer",
					"->",
					"1 = Encabezado, 2 = Pie de página"
				],
				[
					"tituloIzq",
					"Text",
					"<-",
					"Texto mostrado a la izquierda"
				],
				[
					"tituloCent",
					"Text",
					"<-",
					"Texto mostrado en el centro"
				],
				[
					"tituloDer",
					"Text",
					"<-",
					"Texto mostrado a la derecha"
				],
				[
					"alto",
					"Integer",
					"<-",
					"Altura del encabezado o pie de página"
				],
				[
					"imagen",
					"Picture",
					"<-",
					"Imagen a mostrar"
				],
				[
					"alinImag",
					"Integer",
					"<-",
					"Atributo de alineación para la imagen"
				]
			],
			"Summary": "El comando QR GET HEADER AND FOOTER permite recuperar el contenido y el tamaño del encabezado o pie de página."
		},
		"QR Get HTML template": {
			"Syntax": "**QR Get HTML template** ( *area* ) : Text",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Código HTML utilizado como plantilla"
				]
			],
			"Summary": "El comando QR Get HTML template devuelve la plantilla HTML utilizada actualmente por el área del informe rápido referenciada por *area*."
		},
		"QR GET INFO COLUMN": {
			"Syntax": "**QR GET INFO COLUMN** ( *area* ; *numColumna* ; *titulo* ; *objeto* ; *oculta* ; *tamaño* ; *valoresRepetidos* ; *formato* {; *varResultado*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"titulo",
					"Text",
					"<-",
					"Título de la columna"
				],
				[
					"objeto",
					"Text",
					"<-",
					"Objeto asignado a la columna"
				],
				[
					"oculta",
					"Integer",
					"<-",
					"0 = visible, 1 = oculto"
				],
				[
					"tamaño",
					"Integer",
					"<-",
					"Largo de la columna"
				],
				[
					"valoresRepetidos",
					"Integer",
					"<-",
					"0 = no repetido, 1 = repetido"
				],
				[
					"formato",
					"Text",
					"<-",
					"Formato de visualización de los datos"
				],
				[
					"varResultado",
					"Text",
					"<-",
					"Nombre de la variable de fórmula"
				]
			],
			"Summary": "### Informes en lista \n\nEl comando QR GET INFO COLUMN permite recuperar los parámetros de una columna existente."
		},
		"QR Get info row": {
			"Syntax": "**QR Get info row** ( *area* ; *linea* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área creada"
				],
				[
					"linea",
					"Integer",
					"->",
					"Línea"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"0 = visible, 1 = oculta"
				]
			],
			"Summary": "El comando QR Get info row indica si *linea* se muestra o se oculta en *area*."
		},
		"QR Get report kind": {
			"Syntax": "**QR Get report kind** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo del informe"
				]
			],
			"Summary": "El comando QR Get report kind devuelve el tipo del informe presente en *area*."
		},
		"QR Get report table": {
			"Syntax": "**QR Get report table** ( *area* ) : Integer",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tabla"
				]
			],
			"Summary": "El comando QR Get report table devuelve el número de la tabla actual del informe designado por el parámetro *area*."
		},
		"QR GET SELECTION": {
			"Syntax": "**QR GET SELECTION** ( *area* ; *izquierda* ; *superior* {; *derecha* {; *inferior*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"izquierda",
					"Integer",
					"<-",
					"Límite izquierdo"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Límite superior"
				],
				[
					"derecha",
					"Integer",
					"<-",
					"Límite derecho"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Límite inferior"
				]
			],
			"Summary": "El comando QR GET SELECTION devuelve las coordenadas de la selección actual de *area*."
		},
		"QR GET SORTS": {
			"Syntax": "**QR GET SORTS** ( *area* ; *aColumnas* ; *aOrden* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"aColumnas",
					"Real array",
					"<-",
					"Columnas ordenadas"
				],
				[
					"aOrden",
					"Real array",
					"<-",
					"Sentido de ordenación"
				]
			],
			"Summary": "El comando QR GET SORTS llenas dos arrays"
		},
		"QR Get text property": {
			"Syntax": "**QR Get text property** ( *area* ; *numColumna* ; *numLinea* ; *propiedad* ) : any",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"numLinea",
					"Integer",
					"->",
					"Número de línea"
				],
				[
					"propiedad",
					"Integer",
					"->",
					"Número de la propiedad"
				],
				[
					"Resultado",
					"Text, Integer",
					"<-",
					"Valor de la propiedad seleccionada"
				]
			],
			"Summary": "El comando QR Get text property devuelve el valor de la propiedad de los atributos texto en la celda determinada por *numColumna* y *numLinea*."
		},
		"QR GET TOTALS DATA": {
			"Syntax": "**QR GET TOTALS DATA** ( *area* ; *numColumna* ; *numRuptura* ; *operador* ; *texto* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"numRuptura",
					"Integer",
					"->",
					"Número de ruptura"
				],
				[
					"operador",
					"Integer",
					"<-",
					"Operador de la celda"
				],
				[
					"texto",
					"Text",
					"<-",
					"Contenido de la celda"
				]
			],
			"Summary": "### Informe en lista \n\nEl comando QR GET TOTALS DATA permite recuperar el contenido de una línea de ruptura específica."
		},
		"QR GET TOTALS SPACING": {
			"Syntax": "**QR GET TOTALS SPACING** ( *area* ; *subtotal* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"Número subtotal"
				],
				[
					"valor",
					"Integer",
					"<-",
					"0=sin espacio, 32000=inserta un salto de página, >0=espacio añadido en la parte superior del nivel de ruptura, <0=aumento proporcional"
				]
			],
			"Summary": "El comando QR GET TOTALS SPACING permite recuperar el valor del espacio añadido debajo de una línea de subtotal."
		},
		"QR INSERT COLUMN": {
			"Syntax": "**QR INSERT COLUMN** ( *area* ; *numColumna* ; *objeto* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"objeto",
					"Field, Variable, Pointer",
					"->",
					"Objeto a insertar en la columna"
				]
			],
			"Summary": "El comando QR INSERT COLUMN inserta o crea una columna en una posición específica."
		},
		"QR MOVE COLUMN": {
			"Syntax": "**QR MOVE COLUMN** ( *area* ; *numColumna* ; *nuevaPosicion* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de la columna"
				],
				[
					"nuevaPosicion",
					"Integer",
					"->",
					"Nueva posición de la columna"
				]
			],
			"Summary": "El comando **QR MOVE COLUMN** mueve la columna que se encuentra actualmente en la posición *numColumna* a la posición *nuevaPosicion*."
		},
		"QR NEW AREA": {
			"Syntax": "**QR NEW AREA** ( *ptr* )",
			"Params": [
				[
					"ptr",
					"Pointer",
					"->",
					"Puntero a una variable"
				]
			],
			"Summary": "El comando **QR NEW AREA** crea una nueva área de informe rápido y almacena su número de referencia en la variable de tipo Entero largo referenciada por el puntero *ptr*."
		},
		"QR New offscreen area": {
			"Syntax": "**QR New offscreen area**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Referencia del área creada"
				]
			],
			"Summary": "El comando QR New offscreen area crea un área de informe rápido fuera de pantalla y devuelve su número de referencia."
		},
		"QR ON COMMAND": {
			"Syntax": "**QR ON COMMAND** ( *area* ; *nomMetodo* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"nomMetodo",
					"Text",
					"->",
					"Nombre del método a llamar"
				]
			],
			"Summary": "El comando QR ON COMMAND ejecuta el método proyecto 4D pasado en el parámetro *nomMetodo* cuando un comando del editor de informes rápidos es llamado por el usuario, seleccionando un comando de menú o haciendo clic en un botón."
		},
		"QR REPORT TO BLOB": {
			"Syntax": "**QR REPORT TO BLOB** ( *area* ; *BLOB* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"Blob",
					"Blob",
					"<-",
					"Blob a recibir el informe rápido"
				]
			],
			"Summary": "El comando QR REPORT TO BLOB coloca el informe cuya referencia se pasó en *area* en un BLOB (variable o campo)."
		},
		"QR REPORT": {
			"Syntax": "**QR REPORT** ( {*tabla* ;} *doc* {; *nomMetodo*}{; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a utilizar para el informe o tabla por defecto si se omite"
				],
				[
					"doc",
					"Text",
					"->",
					"Documento de informe rápido a cargar"
				],
				[
					"nomMetodo",
					"Text",
					"->",
					"Nombre del método a llamar"
				],
				[
					"*",
					"Operador",
					"->",
					"Eliminación de las cajas de diálogo de impresión"
				]
			],
			"Summary": "**QR REPORT** imprime un informe para *tabla*, con ayuda del editor de informes rápidos de 4D."
		},
		"QR RUN": {
			"Syntax": "**QR RUN** ( *area* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área a ejecutar"
				]
			],
			"Summary": "El comando QR RUN provoca la ejecución del informe rápido designado por el parámetro *area."
		},
		"QR SET AREA PROPERTY": {
			"Syntax": "**QR SET AREA PROPERTY** ( *area* ; *propiedad* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"propiedad",
					"Integer",
					"->",
					"Elemento de interfaz"
				],
				[
					"valor",
					"Integer",
					"->",
					"1 = mostrado, 0 = oculto"
				]
			],
			"Summary": "El comando **QR SET AREA PROPERTY** muestra u oculta el elemento de interfaz cuya referencia se pasa en *propiedad*."
		},
		"QR SET BORDERS": {
			"Syntax": "**QR SET BORDERS** ( *area* ; *columna* ; *linea* ; *borde* ; *grueso* {; *color*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"columna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"linea",
					"Integer",
					"->",
					"Número de línea"
				],
				[
					"borde",
					"Integer",
					"->",
					"Valor del borde compuesto"
				],
				[
					"grueso",
					"Integer",
					"->",
					"Ancho de la línea"
				],
				[
					"color",
					"Integer",
					"->",
					"Color del borde"
				]
			],
			"Summary": "El comando QR SET BORDERS permite definir el estilo del borde de una celda dada."
		},
		"QR SET DESTINATION": {
			"Syntax": "**QR SET DESTINATION** ( *area* ; *tipo* {; *especificos*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de informe"
				],
				[
					"especificos",
					"Text, Variable",
					"->",
					"Específicos del tipo de salida"
				]
			],
			"Summary": "El comando QR SET DESTINATION permite definir el *tipo* de salida del informe rápido en *area*."
		},
		"QR SET DOCUMENT PROPERTY": {
			"Syntax": "**QR SET DOCUMENT PROPERTY** ( *area* ; *propiedad* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"propiedad",
					"Integer",
					"->",
					"1 = Diálogo de impresión, 2 = Unidad del documento"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor de la propiedad"
				]
			],
			"Summary": "El comando **QR SET DOCUMENT PROPERTY**  permite mostrar la caja de diálogo de impresión o definir la unidad utilizada por el documento."
		},
		"QR SET HEADER AND FOOTER": {
			"Syntax": "**QR SET HEADER AND FOOTER** ( *area* ; *selector* ; *tituloIzq* ; *tituloCent* ; *tituloDer* ; *altura* {; *imagen* {; *alinImag*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"selector",
					"Integer",
					"->",
					"1 = Encabezado, 2 = Pie de página"
				],
				[
					"tituloIzq",
					"Text",
					"->",
					"Texto mostrado a la izquierda"
				],
				[
					"tituloCent",
					"Text",
					"->",
					"Texto mostrado en el centro"
				],
				[
					"tituloDer",
					"Text",
					"->",
					"Texto mostrado a la derecha"
				],
				[
					"altura",
					"Integer",
					"->",
					"Altura del encabezado o pie de página"
				],
				[
					"imagen",
					"Picture",
					"->",
					"Imagen a mostrar"
				],
				[
					"alinImag",
					"Integer",
					"->",
					"Atributo de alineación de la imagen"
				]
			],
			"Summary": "El comando QR SET HEADER AND FOOTER permite definir el contenido y el tamaño del encabezado y el pie de página de *area*."
		},
		"QR SET HTML TEMPLATE": {
			"Syntax": "**QR SET HTML TEMPLATE** ( *area* ; *plantilla* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"plantilla",
					"Text",
					"->",
					"Código de la plantilla HTML"
				]
			],
			"Summary": "El comando QR SET HTML TEMPLATE define la plantilla HTML a utilizar para el área de informe rápido referenciada por *area*."
		},
		"QR SET INFO COLUMN": {
			"Syntax": "**QR SET INFO COLUMN** ( *area* ; *numColumna* ; *titulo* ; *objeto* ; *oculta* ; *tamaño* ; *valoresRepetidos* ; *formato* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título de la columna"
				],
				[
					"objeto",
					"Field, Variable",
					"->",
					"Objeto asignado a la columna"
				],
				[
					"oculta",
					"Integer",
					"->",
					"0 = visible, 1 = oculto"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Largo de la columna"
				],
				[
					"valoresRepetidos",
					"Integer",
					"->",
					"0 = no repetidos, 1 = repetido"
				],
				[
					"formato",
					"Text",
					"->",
					"Formato de visualización"
				]
			],
			"Summary": "El comando QR SET INFO COLUMN permite definir los parámetros de una columna existente."
		},
		"QR SET INFO ROW": {
			"Syntax": "**QR SET INFO ROW** ( *area* ; *linea* ; *oculta* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"linea",
					"Integer",
					"->",
					"Línea"
				],
				[
					"oculta",
					"Integer",
					"->",
					"0 = visible, 1 = oculta"
				]
			],
			"Summary": "El comando QR SET INFO ROW muestra/oculta la fila cuya referencia se pasa en *linea*."
		},
		"QR SET REPORT KIND": {
			"Syntax": "**QR SET REPORT KIND** ( *area* ; *tipo* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo del informe"
				]
			],
			"Summary": "El comando QR SET REPORT KIND define el *tipo* del informe presente en *area*."
		},
		"QR SET REPORT TABLE": {
			"Syntax": "**QR SET REPORT TABLE** ( *area* ; *tabla* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"tabla",
					"Integer",
					"->",
					"Número de tabla"
				]
			],
			"Summary": "El comando QR SET REPORT TABLE define la tabla actual para el área del informe referenciada por el parámetro *area* a la tabla número *tabla*."
		},
		"QR SET SELECTION": {
			"Syntax": "**QR SET SELECTION** ( *area* ; *izquierda* ; *superior* {; *derecha* {; *inferior*}} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"izquierda",
					"Integer",
					"->",
					"Límite izquierdo"
				],
				[
					"superior",
					"Integer",
					"->",
					"Límite superior"
				],
				[
					"derecha",
					"Integer",
					"->",
					"Límite derecho"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Límite inferior"
				]
			],
			"Summary": "El comando QR SET SELECTION permite seleccionar una celda, una fila, una columna o toda un *area* como lo haría con un ratón."
		},
		"QR SET SORTS": {
			"Syntax": "**QR SET SORTS** ( *area* ; *aColumnas* {; *aOrden*} )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"aColumnas",
					"Real array",
					"->",
					"Columnas"
				],
				[
					"aOrden",
					"Real array",
					"->",
					"Sentido de ordenación"
				]
			],
			"Summary": "El comando QR SET SORTS permite definir el sentido de ordenación de cada columna del informe rápido cuya referencia se pasa en *area*."
		},
		"QR SET TEXT PROPERTY": {
			"Syntax": "**QR SET TEXT PROPERTY** ( *area* ; *numColumna* ; *numLinea* ; *propiedad* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"numLinea",
					"Integer",
					"->",
					"Número de línea"
				],
				[
					"propiedad",
					"Integer",
					"->",
					"Número de propiedad"
				],
				[
					"valor",
					"Integer, Text",
					"->",
					"Valor de la propiedad seleccionada"
				]
			],
			"Summary": "El comando QR SET TEXT PROPERTY permite definir las propiedades de texto de la celda determinada por los parámetros *numColumna* y *numLinea*."
		},
		"QR SET TOTALS DATA": {
			"Syntax": "**QR SET TOTALS DATA** ( *area* ; *numColumna* ; *numRuptura* ; operador | valor )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"numColumna",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"numRuptura",
					"Integer",
					"->",
					"Número de ruptura"
				],
				[
					"operador &#124; valor",
					"Entero largo, Cadena",
					"->",
					"Operador para la celda o contenido de la celda"
				]
			],
			"Summary": "**Nota:** este comando no puede crear un subtotal."
		},
		"QR SET TOTALS SPACING": {
			"Syntax": "**QR SET TOTALS SPACING** ( *area* ; *subtotal* ; *valor* )",
			"Params": [
				[
					"area",
					"Integer",
					"->",
					"Referencia del área"
				],
				[
					"subtotal",
					"Integer",
					"->",
					"Número del subtotal"
				],
				[
					"valor",
					"Integer",
					"->",
					"0=sin espacio, 32000=inserta un salto de página, >0=espacio añadido en la parte superior del nivel de ruptura, <0=aumento proporcional"
				]
			],
			"Summary": "El comando QR SET TOTALS SPACING define un espacio debajo de la línea de subtotal."
		},
		"QUERY BY ATTRIBUTE": {
			"Syntax": "**QUERY BY ATTRIBUTE** ( {*tabla*}{;}{*opConj* ;} *campoObjeto* ; *rutaAtributo* ; *opBusq* ; *valor* {; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual devolver una selección de registros o Tabla por defecto si se omite"
				],
				[
					"opConj",
					"*",
					"->",
					"Operador de conjunción ausar para combinar varias búsquedas (si las hay)"
				],
				[
					"campoObjeto",
					"Field",
					"->",
					"Campo objeto cuyos atributos utilizar para la búsqueda"
				],
				[
					"rutaAtributo",
					"Text",
					"->",
					"Nombre o ruta de atributo"
				],
				[
					"opBusq",
					"Text, *",
					"->",
					"Operador de búsqueda (comparador)"
				],
				[
					"valor",
					"Text, Number, Date, Time",
					"->",
					"Valor a comparar"
				],
				[
					"*",
					"Operador",
					"->",
					"Espera de ejecución de la búsqueda"
				]
			],
			"Summary": "**QUERY BY ATTRIBUTE** busca los registros que coincidan con la cadena de consulta definida utilizando los parámetros *campoObjeto*, *rutaAtributo*, *opBusq* y *valor*, y devuelve una selección de registros para *tabla*."
		},
		"QUERY BY EXAMPLE": {
			"Syntax": "**QUERY BY EXAMPLE** ( {*tabla*}{;}{*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual debe devolverse una selección de  registros , o Tabla por defecto, si se omite"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa, no se muestra la barra de desplazamiento"
				]
			],
			"Summary": "QUERY BY EXAMPLE efectúa la misma acción que el comando de menú Búsqueda por formulario."
		},
		"QUERY BY FORMULA": {
			"Syntax": "**QUERY BY FORMULA** ( *tabla* {; *formula*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual efectuar la búsqueda"
				],
				[
					"formula",
					"Boolean",
					"->",
					"Fórmula de búsqueda"
				]
			],
			"Summary": "QUERY BY FORMULA busca registros en *tabla*."
		},
		"QUERY BY SQL": {
			"Syntax": "**QUERY BY SQL** ( {*tabla* ;} *formulaSQL* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual devolver una selección de registros o Tabla por defecto si este parámetro se omite"
				],
				[
					"formulaSQL",
					"Text",
					"->",
					"Fórmula de búsqueda SQL válida representando la cláusula WHERE de la búsqueda SELECT"
				]
			],
			"Summary": "El comando QUERY BY SQL permite aprovechar directamente el motor SQL integrado de 4D."
		},
		"QUERY SELECTION BY ATTRIBUTE": {
			"Syntax": "**QUERY SELECTION BY ATTRIBUTE** ( {*tabla*}{;}{*conjOp* ;} *campoObjeto* ; *rutaAtributo* ; *opBusq* ; *valor* {; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual devolver una selección de registros o tabla por defecto si se omite"
				],
				[
					"conjOp",
					"*",
					"->",
					"Operador de conjunción a utilizar ara unir múltiples búsquedas (si las hay)"
				],
				[
					"campoObjeto",
					"Field",
					"->",
					"Campo objeto para buscar atributos"
				],
				[
					"rutaAtributo",
					"Text",
					"->",
					"Nombre o ruta de atributo"
				],
				[
					"opBusq",
					"*, Text",
					"->",
					"Operador de búsqueda (comparador)"
				],
				[
					"valor",
					"Text, Number, Date, Time",
					"->",
					"Valor a comparar"
				],
				[
					"*",
					"Operador",
					"->",
					"Continuar bandera de búsqueda"
				]
			],
			"Summary": "**QUERY SELECTION BY ATTRIBUTE** trabaja y realiza las mismas acciones que QUERY BY ATTRIBUTE."
		},
		"QUERY SELECTION BY FORMULA": {
			"Syntax": "**QUERY SELECTION BY FORMULA** ( *tabla* {; *formula*} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual efectuar la búsqueda en la selección actual"
				],
				[
					"formula",
					"Boolean",
					"->",
					"Fórmula de búsqueda"
				]
			],
			"Summary": "El comando QUERY SELECTION BY FORMULA busca registros en tabla."
		},
		"QUERY SELECTION WITH ARRAY": {
			"Syntax": "**QUERY SELECTION WITH ARRAY** ( *campoObjetivo* ; *array* )",
			"Params": [
				[
					"campoObjetivo",
					"Field",
					"->",
					"Campo utilizado para comparar los valores"
				],
				[
					"array",
					"Array",
					"->",
					"Array de valores buscados"
				]
			],
			"Summary": "El comando QUERY SELECTION WITH ARRAY busca en la tabla del campo pasado como primer parámetro los registros para los cuales el valor de campoObjetivo es igual a al menos uno de los valores de los elementos en el *array*."
		},
		"QUERY SELECTION": {
			"Syntax": "**QUERY SELECTION** ( {*tabla* }{;}{ *criterioBusqueda* {; *}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual efectuar la búsqueda o Tabla por defecto, si se omite"
				],
				[
					"criterioBusqueda",
					"Expression",
					"->",
					"Líneas de búsqueda"
				],
				[
					"*",
					"Operador",
					"->",
					"Bandera para continuar la búsqueda"
				]
			],
			"Summary": "**QUERY SELECTION** busca registros en *tabla*."
		},
		"QUERY WITH ARRAY": {
			"Syntax": "**QUERY WITH ARRAY** ( *campoObjetivo* ; *array* )",
			"Params": [
				[
					"campoObjetivo",
					"Field",
					"->",
					"Campo utilizado para comparar los valores"
				],
				[
					"array",
					"Array",
					"->",
					"Array de los valores buscados"
				]
			],
			"Summary": "El comando **QUERY WITH ARRAY** busca en la tabla del campo pasado en el primer parámetro todos los registros para los cuales el valor de *campoObjetivo*, es igual al menos a uno de los valores de los elementos en Array."
		},
		"QUERY": {
			"Syntax": "**QUERY** ( {*tabla* }{;}{ *criterioBusqueda* {; *}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual devolver una selección de registros o Tabla por defecto, si se omite"
				],
				[
					"criterioBusqueda",
					"Expression",
					"->",
					"Criterio de búsqueda"
				],
				[
					"*",
					"Operador",
					"->",
					"Continuar la ejecución de la búsqueda"
				]
			],
			"Summary": "El comando QUERY busca los registros que corresponden al criterio especificado en *criterioBusqueda* y devuelve una selección de registros de *tabla*."
		},
		"QUIT 4D": {
			"Syntax": "**QUIT 4D** {( *tiempo* )}",
			"Params": [
				[
					"tiempo",
					"Integer",
					"->",
					"Tiempo en segundos antes de salir del servidor"
				]
			],
			"Summary": "El comando QUIT 4D sale de la aplicación 4D y regresa al escritorio."
		},
		"Random": {
			"Syntax": "**Random**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número aleatorio"
				]
			],
			"Summary": "Random devuelve un valor entero aleatorio entre 0 y 32 767 (inclusive)."
		},
		"Read only state": {
			"Syntax": "**Read only state** {( *tabla* )} : Boolean",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual probar el estado sólo lectura o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"El acceso a la tabla es sólo lectura (TRUE), o El acceso a la tabla es lectura/escritura (FALSE)"
				]
			],
			"Summary": "Esta función se utiliza para probar si *tabla* está en modo sólo lectura en el proceso en el que se llamó a la función."
		},
		"READ ONLY": {
			"Syntax": "**READ ONLY** {( tabla | * )}",
			"Params": [
				[
					"tabla &#124; *",
					"Tabla, Operador",
					"->",
					"Tabla a definir en modo sólo lectura o * para todas las tablas o Tabla por defecto, si se omite"
				]
			],
			"Summary": "READ ONLY cambia el estado de t*abla* a modo sólo lectura para el proceso en el cual se llama al comando."
		},
		"READ PICTURE FILE": {
			"Syntax": "**READ PICTURE FILE** ( *nomArchivo* ; *imagen* {; *} )",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del archivo a leer, o cadena vacía"
				],
				[
					"imagen",
					"Picture",
					"<-",
					"Campo o variable que recibe la imagen"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = acepta todo tipo de archivo"
				]
			],
			"Summary": "El comando READ PICTURE FILE permite abrir la imagen guardada en el archivo del disco *nomArchivo* y cargarla en el campo o variable 4D *imagen*."
		},
		"READ WRITE": {
			"Syntax": "**READ WRITE** {( tabla | * )}",
			"Params": [
				[
					"tabla &#124; *",
					"Tabla, Operador",
					"->",
					"Tabla a definir en modo lectura/escritura o * para todas las tablas o Tabla por defecto si se omite"
				]
			],
			"Summary": "READ WRITE cambia el estado de *tabla* a modo lectura/escritura para el proceso en el cual se llama al comando."
		},
		"REAL TO BLOB": {
			"Syntax": "**REAL TO BLOB** ( *real* ; *BLOB* ; *formatoReal* {; offset | *} )",
			"Params": [
				[
					"real",
					"Real",
					"->",
					"Valor de tipo real a escribir en el BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a recibir el valor Real"
				],
				[
					"formatoReal",
					"Integer",
					"->",
					"0 Formato real nativo 1 Formato real extendido 2  Formato real doble Macintosh 3  Formato real doble Windows"
				],
				[
					"offset &#124; *",
					"Variable, Operador",
					"<->",
					"Offset en el BLOB (expresado en bytes) o * para añadir el valor"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la escritura si se omite *"
				]
			],
			"Summary": "El comando REAL TO BLOB escribe el valor de tipo Real (o numérico) *real* en el BLOB *blob*."
		},
		"RECEIVE BUFFER": {
			"Syntax": "**RECEIVE BUFFER** ( *varRecep* )",
			"Params": [
				[
					"varRecep",
					"Text",
					"<-",
					"Variable para recibir datos"
				]
			],
			"Summary": "RECEIVE BUFFER lee los datos del puerto serial abierto previamente por el comando SET CHANNEL."
		},
		"RECEIVE PACKET": {
			"Syntax": "**RECEIVE PACKET** ( {*docRef* ;} *varRecep* ; stopCar | numBytes )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referencia del documento o canal actual (puerto serial o documento)"
				],
				[
					"varRecep",
					"Text, Blob",
					"<-",
					"Variable para recibir datos"
				],
				[
					"stopCar &#124; numBytes",
					"Cadena, Entero largo",
					"->",
					"Carácter(es) en el(los) cual(es) detener la recepción de datos o número de bytes a recibir"
				]
			],
			"Summary": "RECEIVE PACKET lee los caracteres desde un puerto serial o desde un documento."
		},
		"RECEIVE RECORD": {
			"Syntax": "**RECEIVE RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla en la cual recibir el registro o Tabla por defecto, si se omite"
				]
			],
			"Summary": "RECEIVE RECORD recibe un registro en *tabla* del puerto serial o de un documento abierto por el comando SET CHANNEL."
		},
		"RECEIVE VARIABLE": {
			"Syntax": "**RECEIVE VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"<-",
					"Variable en la cual recibir"
				]
			],
			"Summary": "RECEIVE VARIABLE recibe a *variable*, la cual fue enviada previamente por SEND VARIABLE desde el documento o puerto serial previamente abierto por SET CHANNEL."
		},
		"Record number": {
			"Syntax": "**Record number** {( *tabla* )} : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual devolver el número del registro actual o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número del registro actual"
				]
			],
			"Summary": "**Record number** devuelve el número del registro actual de *tabla*."
		},
		"Records in selection": {
			"Syntax": "**Records in selection** {( *tabla* )} : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual devolver el número de registros      seleccionados,o tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Registros en la selección de tabla"
				]
			],
			"Summary": "Records in selection devuelve el número de registros en la selección actual de *tabla*."
		},
		"Records in set": {
			"Syntax": "**Records in set** ( *conjunto* ) : Integer",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto a probar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de registros en prueba"
				]
			],
			"Summary": "Records in set devuelve el número de registros en *conjunto*."
		},
		"Records in table": {
			"Syntax": "**Records in table** {( *tabla* )} : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual devolver el número total de registros o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número total de registros en la tabla"
				]
			],
			"Summary": "Records in table devuelve el número total de los registros que contiene *tabla*."
		},
		"REDRAW WINDOW": {
			"Syntax": "**REDRAW WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o Ventana del primer plano del proceso actual, si se omite"
				]
			],
			"Summary": "El comando REDRAW WINDOW provoca una actualización del contenido de la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"REDRAW": {
			"Syntax": "**REDRAW** ( *objeto* )",
			"Params": [
				[
					"objeto",
					"any",
					"->",
					"Tabla para la cual rediseñar el subformulario o Campo para el cual rediseñar el área o Variable para la cual rediseñar el área o Tabla del formulario a rediseñar en un navegador Web"
				]
			],
			"Summary": "Cuando utiliza un método para modificar el contenido de un campo o subcampo mostrado en un subformulario, debe ejecutar REDRAW para asegurar que el formulario esté correctamente actualizado."
		},
		"REDUCE RESTORE WINDOW": {
			"Syntax": "**REDUCE RESTORE WINDOW** ( *ventana* )",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				]
			],
			"Summary": "El comando **REDUCE RESTORE WINDOW** reduce/expande la ventana cuyo número de referencia se pasó en *ventana* a/desde la barra de tareas en Windows o el dock en macOS."
		},
		"REDUCE SELECTION": {
			"Syntax": "**REDUCE SELECTION** ( {*tabla* ;} *Numero* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual reducir la selección, o Tabla por defecto, si se omite"
				],
				[
					"Numero",
					"Integer",
					"->",
					"Número de registros a conservar seleccionados"
				]
			],
			"Summary": "REDUCE SELECTION crea una nueva selección de registros para *tabla*."
		},
		"Refresh license": {
			"Syntax": "**Refresh license** : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de estado"
				]
			],
			"Summary": "El comando **Refresh license** actualiza la licencia actual del servidor 4D."
		},
		"REGENERATE MISSING TABLE": {
			"Syntax": "**REGENERATE MISSING TABLE** ( *nomTabla* )",
			"Params": [
				[
					"nomTabla",
					"Text",
					"->",
					"Nombre de tabla faltante a regenerar"
				]
			],
			"Summary": "El comando REGENERATE MISSING TABLE reconstruye la tabla faltante cuyo nombre se pasa en el parámetro *nomTabla*."
		},
		"REGISTER CLIENT": {
			"Syntax": "**REGISTER CLIENT** ( *nomCliente* {; *periodo*}{; *} )",
			"Params": [
				[
					"nomCliente",
					"Text",
					"->",
					"Nombre de la sesión 4D Client"
				],
				[
					"periodo",
					"Integer",
					"->",
					"**Ignorado desde la versión 11.3***"
				],
				[
					"*",
					"Operador",
					"->",
					"Proceso local"
				]
			],
			"Summary": "El comando REGISTER CLIENT “registra” un equipo cliente 4D con el nombre especificado en *nomCliente* en 4D Server, con el fin de permitir a otros clientes o eventualmente 4D Server (utilizando procedimientos almacenados) ejecutar métodos utilizando el comando EXECUTE ON CLIENT."
		},
		"Register data key": {
			"Syntax": "**Register data key** ( *curPassPhrase* ) : Boolean<br/>**Register data key** ( *curDataKey* ) : Boolean",
			"Params": [
				[
					"curPassPhrase &#124; curDataKey",
					"Texto, Objeto",
					"->",
					"Frase contraseña actual (texto) o llave de cifrado de datos actual (objeto)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la llave de cifrado se ha agregado correctamente al llavero 4D, False si ya estaba en el llavero 4D"
				]
			],
			"Summary": "El comando **Register data key** agrega la llave de cifrado de datos pasada en el parámetro al llavero 4D."
		},
		"REJECT NEW REMOTE CONNECTIONS": {
			"Syntax": "**REJECT NEW REMOTE CONNECTIONS** ( *rejectStatus* )",
			"Params": [
				[
					"rejectStatus",
					"Boolean",
					"->",
					"True si se rechazan las nuevas conexiones, de lo contrario false"
				]
			],
			"Summary": "El comando **REJECT NEW REMOTE CONNECTIONS** especifica si el servidor de aplicaciones acepta o no nuevas conexiones de usuarios remotos."
		},
		"REJECT": {
			"Syntax": "**REJECT** {( *unCampo* )}",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo a rechazar"
				]
			],
			"Summary": "**REJECT** tiene dos sintaxis."
		},
		"RELATE MANY SELECTION": {
			"Syntax": "**RELATE MANY SELECTION** ( *unCampo* )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo de la tabla Muchos (donde inicia la relación)"
				]
			],
			"Summary": "El comando RELATE MANY SELECTION crea una selección de registros en la tabla Muchos, basada en la selección actual de la tabla Uno."
		},
		"RELATE MANY": {
			"Syntax": "**RELATE MANY** ( tabla1 | campo1 )",
			"Params": [
				[
					"tabla1 &#124; campo1",
					"Tabla, Campo",
					"->",
					"Tabla para la cual establecer todas las relaciones de Uno a Muchos o campo Uno"
				]
			],
			"Summary": "RELATE MANY tiene dos sintaxis."
		},
		"RELATE ONE SELECTION": {
			"Syntax": "**RELATE ONE SELECTION** ( *tablaN* ; *tabla1* )",
			"Params": [
				[
					"tablaN",
					"Table",
					"->",
					"Nombre de la tabla Muchos (donde inicia la relación)"
				],
				[
					"tabla1",
					"Table",
					"->",
					"Nombre de la tabla Uno (donde termina la relación)"
				]
			],
			"Summary": "El comando **RELATE ONE SELECTION** crea una nueva selección de registros en *tabla1* a partir de la selección de registros de la *tablaN* relacionada y carga el primer registro de la nueva selección como el registro actual."
		},
		"RELATE ONE": {
			"Syntax": "**RELATE ONE** ( tablasN | CampoN {; *discriminante*} )",
			"Params": [
				[
					"tablasN &#124; CampoN",
					"Tabla, Campo",
					"->",
					"Tabla para la cual definir todas las relaciones automáticas o Campo con la relación manual con la tabla Uno"
				],
				[
					"discriminante",
					"Field",
					"->",
					"Campo discriminante de la tabla 1"
				]
			],
			"Summary": "RELATE ONE acepta dos sintaxis."
		},
		"RELEASE MENU": {
			"Syntax": "**RELEASE MENU** ( *menu* )",
			"Params": [
				[
					"menu",
					"Text",
					"->",
					"Referencia de menú"
				]
			],
			"Summary": "El comando RELEASE MENU borra de la memoria el menú cuya referencia se pasa en *menu*."
		},
		"RELOAD EXTERNAL DATA": {
			"Syntax": "**RELOAD EXTERNAL DATA** ( *elCampo* )",
			"Params": [
				[
					"elCampo",
					"Text, Blob, Picture, Object",
					"->",
					"Campo para el cual recargar los datos"
				]
			],
			"Summary": "El comando **RELOAD EXTERNAL DATA** permite recargar en memoria el contenido en memoria de un archivo de almacenamiento externo asociado a un campo de tipo BLOB, Imagen o Texto."
		},
		"RELOAD PROJECT": {
			"Syntax": "**RELOAD PROJECT**",
			"Params": [],
			"Summary": "El comando **RELOAD PROJECT** recarga las definiciones del archivo fuente (métodos, formularios, etc.) desde el disco para el proyecto en ejecución en el entorno 4D actual."
		},
		"REMOVE FROM SET": {
			"Syntax": "**REMOVE FROM SET** ( {*tabla* ;} *conjunto* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro actual o Tabla por defecto si se omite"
				],
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto del cual eliminar el registro actual"
				]
			],
			"Summary": "REMOVE FROM SET elimina el registro actual de *tabla* de *conjunto*."
		},
		"REMOVE PICTURE FROM LIBRARY": {
			"Syntax": "**REMOVE PICTURE FROM LIBRARY** ( refImag | nomImag )",
			"Params": [
				[
					"refImag &#124; nomImag",
					"Entero largo, Cadena",
					"->",
					"Número de referencia o nombre de una imagen de la librería de imágenes"
				]
			],
			"Summary": "El comando REMOVE PICTURE FROM LIBRARY elimina de la librería de imágenes la imagen cuyo número de referencia se pasa en *refImag* o cuyo nombre se pasa en *nomImag*."
		},
		"Replace string": {
			"Syntax": "**Replace string** ( *fuente* ; *obsoleta* ; *nueva* {; *reemplazos*}{; *} ) : Text",
			"Params": [
				[
					"fuente",
					"Text",
					"->",
					"Cadena original"
				],
				[
					"obsoleta",
					"Text",
					"->",
					"Caracteres a reemplazar"
				],
				[
					"nueva",
					"Text",
					"->",
					"Cadena de reemplazo (si la cadena está vacía, se borran todas las ocurrencias)"
				],
				[
					"reemplazos",
					"Integer",
					"->",
					"Número de reemplazos a efectuar Si se omite, se reemplazan todas las ocurrencias"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: evaluación basada en los códigos de los caracteres"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena resultante"
				]
			],
			"Summary": "Replace string devuelve una cadena de caracteres resultante de reemplazar *obsoleto* por *nuevo* en *fuente*."
		},
		"Request": {
			"Syntax": "**Request** ( *mensaje* {; *respuestaDefecto* {; *titulobotonOK* {; *titulobotoncancel*}}} )  : Text",
			"Params": [
				[
					"mensaje",
					"Text",
					"->",
					"Mensaje a mostrar en la caja de diálogo"
				],
				[
					"respuestaDefecto",
					"Text",
					"->",
					"Valor por defecto en el área de entrada de texto"
				],
				[
					"titulobotonOK",
					"Text",
					"->",
					"Título del botón Aceptar"
				],
				[
					"titulobotoncancel",
					"Text",
					"->",
					"Título del botón Cancelar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Valor introducido por el usuario"
				]
			],
			"Summary": "El comando **Request** muestra una caja de diálogo compuesta de un mensaje, un área de entrada de texto, un botón **OK** y un botón **Cancelar**."
		},
		"RESIZE FORM WINDOW": {
			"Syntax": "**RESIZE FORM WINDOW** ( *ancho* ; *alto* )",
			"Params": [
				[
					"ancho",
					"Integer",
					"->",
					"Píxeles a añadir o eliminar del ancho actual de la ventana formulario"
				],
				[
					"alto",
					"Integer",
					"->",
					"Píxeles a añadir o eliminar del largo actual de la ventana formulario"
				]
			],
			"Summary": "El comando RESIZE FORM WINDOW  permite modificar el tamaño de la ventana del formulario actual."
		},
		"RESOLVE ALIAS": {
			"Syntax": "**RESOLVE ALIAS** ( *rutaAlias* ; *rutaObjetivo* )",
			"Params": [
				[
					"rutaAlias",
					"Text",
					"->",
					"Nombre o ruta de acceso completa del alias/atajo"
				],
				[
					"rutaObjetivo",
					"Text",
					"<-",
					"Nombre o ruta de acceso completa del objetivo del alias/atajo"
				]
			],
			"Summary": "El comando RESOLVE ALIAS devuelve la ruta completa del archivo o carpeta objetivo de un alias (llamado atajo bajo Windows)."
		},
		"RESOLVE POINTER": {
			"Syntax": "**RESOLVE POINTER** ( *puntero* ; *nomVar* ; *numTabla* ; *numCamp* )",
			"Params": [
				[
					"puntero",
					"Pointer",
					"->",
					"Puntero del cual recuperar el objeto referenciado"
				],
				[
					"nomVar",
					"Text",
					"<-",
					"Nombre de la variable referenciada o cadena vacía"
				],
				[
					"numTabla",
					"Integer",
					"<-",
					"Número de la tabla o del elemento del array referenciado o 0 o -1"
				],
				[
					"numCamp",
					"Integer",
					"<-",
					"Número del campo referenciado o 0"
				]
			],
			"Summary": "El comando RESOLVE POINTER recupera la información del objeto referenciado por la expresión de puntero *puntero* y la devuelve en los parámetros *nomVar*, *numTabla,* y *numCamp*."
		},
		"RESOURCE LIST": {
			"Syntax": "**RESOURCE LIST** ( *resTipo* ; *resNums* ; *resNoms* {; *resArchivo*} )",
			"Params": [
				[
					"resTipo",
					"Text",
					"->",
					"Tipo de recurso (4 caracteres)"
				],
				[
					"resNums",
					"Integer array",
					"<-",
					"Números de recursos de este tipo"
				],
				[
					"resNoms",
					"Text array",
					"<-",
					"Nombres de los recursos de este tipo"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o Todos los archivos de recursos abiertos, si se omite"
				]
			],
			"Summary": "El comando RESOURCE LIST llena los arrays *resNums* y *resNoms* con los números y los nombres de los recursos cuyo tipo se pasa en *resTipo*."
		},
		"RESOURCE TYPE LIST": {
			"Syntax": "**RESOURCE TYPE LIST** ( *resTipos* {; *resArchivo*} )",
			"Params": [
				[
					"resTipos",
					"Text array",
					"<-",
					"Lista de tipos de recursos disponibles"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o Todos los archivos de recursos abiertos, si se omite"
				]
			],
			"Summary": "El comando RESOURCE TYPE LIST llena el array *resTipos* con los tipos de recursos presentes en el (los) archivo(s) de recursos abierto(s)."
		},
		"RESTART 4D": {
			"Syntax": "**RESTART 4D** {( *demora* {; *mensaje*} )}",
			"Params": [
				[
					"demora",
					"Integer",
					"->",
					"Tiempo de retardo (segundos) antes que 4D reinicie"
				],
				[
					"mensaje",
					"Text",
					"->",
					"Texto a mostrar en los equipos clientes"
				]
			],
			"Summary": "El comando **RESTART 4D** provoca el reinicio de la aplicación 4D actual."
		},
		"RESTORE INFO": {
			"Syntax": "**RESTORE INFO** ( *selector* ; *info1* ; *info2* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Tipo de información a recuperar"
				],
				[
					"info1",
					"Integer, Date",
					"<-",
					"Valor 1 del selector"
				],
				[
					"info2",
					"Text, Time",
					"<-",
					"Valor 2 del selector"
				]
			],
			"Summary": "El comando RESTORE INFO permite obtener información relacionada con la última restauración automática de la base."
		},
		"RESTORE": {
			"Syntax": "**RESTORE** {( *rutaArchivo* {; *rutaCarpetaDest*} )}",
			"Params": [
				[
					"rutaArchivo",
					"Text",
					"->",
					"Ruta de acceso del archivo a restituir"
				],
				[
					"rutaCarpetaDest",
					"Text",
					"->",
					"Ruta de acceso de la carpeta de destino"
				]
			],
			"Summary": "El comando RESTORE permite restituir el o los archivos incluidos en un archivo 4D."
		},
		"RESUME INDEXES": {
			"Syntax": "**RESUME INDEXES** ( *tabla* {; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual reactivar los índices"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = indexación asíncrona"
				]
			],
			"Summary": "El comando **RESUME INDEXES** reactiva todos los índices de la *tabla* cuando se han detenido anteriormente utilizando el comando PAUSE INDEXES."
		},
		"RESUME PROCESS": {
			"Syntax": "**RESUME PROCESS** ( *proceso* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				]
			],
			"Summary": "RESUME PROCESS reactiva un *proceso* cuya ejecución ha sido retrasada o suspendida."
		},
		"RESUME TRANSACTION": {
			"Syntax": "**RESUME TRANSACTION**",
			"Params": [],
			"Summary": "El comando **RESUME TRANSACTION** reactiva la transacción que se suspendió utilizando *ServerSpecialBuild*  en el nivel correspondiente en el proceso actual."
		},
		"Right click": {
			"Syntax": "**Right click**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si se detecta un clic derecho, si no False"
				]
			],
			"Summary": "El comando Right click devuelve True si se hace clic en el botón derecho del ratón."
		},
		"Round": {
			"Syntax": "**Round** ( *redond* ; *decimales* ) : Real",
			"Params": [
				[
					"redond",
					"Real",
					"->",
					"Número a redondear"
				],
				[
					"decimales",
					"Integer",
					"->",
					"Número de lugares decimales a redondear"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Número redondeado para el número de lugares decimales especificado por decimales"
				]
			],
			"Summary": "Round devuelve *número* redondeado al número de decimales especificado por *decimales*."
		},
		"SAVE LIST": {
			"Syntax": "**SAVE LIST** ( *lista* ; *nomLista* )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de la lista"
				],
				[
					"nomLista",
					"Text",
					"->",
					"Nombre de la lista como aparecerá en el editor de listas del entorno Diseño"
				]
			],
			"Summary": "El comando SAVE LIST guarda la lista cuyo número de referencia pasó en *lista*, en el editor de listas en el entorno Diseño, bajo el nombre que pasó en *nomLista*."
		},
		"SAVE RECORD": {
			"Syntax": "**SAVE RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla del registro a guardar o Tabla por defecto, si se omite"
				]
			],
			"Summary": "SAVE RECORD guarda el registro actual de *tabla* en el proceso actual."
		},
		"SAVE RELATED ONE": {
			"Syntax": "**SAVE RELATED ONE** ( *unCampo* )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo Muchos"
				]
			],
			"Summary": "SAVE RELATED ONE guarda el registro relacionado a *campo*."
		},
		"SAVE SET": {
			"Syntax": "**SAVE SET** ( *conjunto* ; *doc* )",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto a guardar"
				],
				[
					"doc",
					"Text",
					"->",
					"Nombre del archivo en el cual guardar el conjunto"
				]
			],
			"Summary": "SAVE SET guarda *conjunto* en el archivo *documento*."
		},
		"SAVE VARIABLES": {
			"Syntax": "**SAVE VARIABLES** ( *doc* ; *variable* {; *variable2* ; ... ; *variableN*} )",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento en el cual guardar las variables"
				],
				[
					"variable",
					"Variable",
					"->",
					"Variables a guardar"
				]
			],
			"Summary": "El comando SAVE VARIABLES guarda una o varias variables en el documento cuyo nombre se pasa en l parámetro *documento*."
		},
		"SAX ADD PROCESSING INSTRUCTION": {
			"Syntax": "**SAX ADD PROCESSING INSTRUCTION** ( *documento* ; *instruccion* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"instruccion",
					"Text",
					"->",
					"Instrucción a insertar en el documento"
				]
			],
			"Summary": "El comando SAX ADD PROCESSING INSTRUCTION añade en el documento XML referenciado por *documento*, una *instruccion* de procesamiento XML."
		},
		"SAX ADD XML CDATA": {
			"Syntax": "**SAX ADD XML CDATA** ( *documento* ; *datos* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"datos",
					"Blob, Text",
					"->",
					"Texto o BLOB a insertar en el documento entre etiquetas CData"
				]
			],
			"Summary": "El comando SAX ADD XML CDATA añade en el documento XML referenciado por *documento*, los *datos* de tipo texto o BLOB."
		},
		"SAX ADD XML COMMENT": {
			"Syntax": "**SAX ADD XML COMMENT** ( *documento* ; *comentario* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"comentario",
					"Text",
					"->",
					"Comentario a añadir"
				]
			],
			"Summary": "El comando SAX ADD XML COMMENT añade un *comentario* en el documento XML referenciado por *document*."
		},
		"SAX ADD XML DOCTYPE": {
			"Syntax": "**SAX ADD XML DOCTYPE** ( *documento* ; *docType* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"docType",
					"Text",
					"->",
					"DocType a añadir"
				]
			],
			"Summary": "El comando SAX ADD XML DOCTYPE añade la instrucción DocType definida por el parámetro *docType* en el documento XML referenciado por *document*."
		},
		"SAX ADD XML ELEMENT VALUE": {
			"Syntax": "**SAX ADD XML ELEMENT VALUE** ( *documento* ; *datos* {; *} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"datos",
					"Text, Variable",
					"->",
					"Texto o variable a insertar en el documento"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: codificar los caracteres especiales Si se omite: no codificación"
				]
			],
			"Summary": "El comando **SAX ADD XML ELEMENT VALUE** añade directamente en el documento XML referenciado por *documento* los *datos* sin convertirlos."
		},
		"SAX CLOSE XML ELEMENT": {
			"Syntax": "**SAX CLOSE XML ELEMENT** ( *documento* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				]
			],
			"Summary": "El comando SAX CLOSE XML ELEMENT escribe en el documento XML referenciado por *documento* las instrucciones necesarias para cerrar el último elemento abierto utilizando el comando SAX OPEN XML."
		},
		"SAX GET XML CDATA": {
			"Syntax": "**SAX GET XML CDATA** ( *documento* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"valor",
					"Text, Blob",
					"<-",
					"Valor del elemento"
				]
			],
			"Summary": "El comando **SAX GET XML CDATA**permite recuperar el *valor* CDATA de un elemento XML existente en el documento XML referenciado por *documento*."
		},
		"SAX GET XML COMMENT": {
			"Syntax": "**SAX GET XML COMMENT** ( *documento* ; *comentario* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"comentario",
					"Text",
					"<-",
					"Comentario XML"
				]
			],
			"Summary": "El comando SAX GET XML COMMENT  devuelve un *comentario* si un evento SAX de tipo XML Comment se genera en el documento XML referenciado en el parámetro *documento*."
		},
		"SAX GET XML DOCUMENT VALUES": {
			"Syntax": "**SAX GET XML DOCUMENT VALUES** ( *documento* ; *codificacion* ; *version* ; *autonomo* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"codificacion",
					"Text",
					"<-",
					"Conjunto de caracteres del documento XML"
				],
				[
					"version",
					"Text",
					"<-",
					"Versión XML"
				],
				[
					"autonomo",
					"Boolean",
					"<-",
					"True = el documento es autónomo, de lo contrario es False"
				]
			],
			"Summary": "El comando SAX GET XML DOCUMENT VALUES  extrae información básica del encabezado XML del documento XML referenciado por *documento*."
		},
		"SAX GET XML ELEMENT VALUE": {
			"Syntax": "**SAX GET XML ELEMENT VALUE** ( *documento* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"valor",
					"Text, Blob",
					"<-",
					"Valor del elemento"
				]
			],
			"Summary": "El comando SAX GET XML ELEMENT VALUE  permite recuperar el *valor* de un elemento XML existente en el documento XML referenciado por *documento*."
		},
		"SAX GET XML ELEMENT": {
			"Syntax": "**SAX GET XML ELEMENT** ( *documento* ; *nombre* ; *prefijo* ; *nomsAtributos* ; *valoresAtributos* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre del elemento"
				],
				[
					"prefijo",
					"Text",
					"<-",
					"Espacio de nombre"
				],
				[
					"nomsAtributos",
					"Text array",
					"<-",
					"Nombres de los atributos"
				],
				[
					"valoresAtributos",
					"Text array",
					"<-",
					"Valores de los atributos"
				]
			],
			"Summary": "El comando SAX GET XML ELEMENT  devuelve diversa información relativa al elemento *nombre* presente en el documento XML referenciado por *documento*."
		},
		"SAX GET XML ENTITY": {
			"Syntax": "**SAX GET XML ENTITY** ( *documento* ; *nombre* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre de la entidad"
				],
				[
					"valor",
					"Text",
					"<-",
					"Valor de la entidad"
				]
			],
			"Summary": "El comando SAX GET XML ENTITY  permite recuperar el *nombre* y *valor* de una entidad XML presente en el documento XML referenciado por *documento*."
		},
		"SAX Get XML node": {
			"Syntax": "**SAX Get XML node** ( *documento* ) : Integer",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Evento devuelto por la función"
				]
			],
			"Summary": "El comando SAX Get XML node devuelve un entero largo indicando el tipo de evento SAX devuelto durante el análisis del documento XML referenciado por *documento*."
		},
		"SAX GET XML PROCESSING INSTRUCTION": {
			"Syntax": "**SAX GET XML PROCESSING INSTRUCTION** ( *documento* ; *nombre* ; *valor* )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre de la instrucción"
				],
				[
					"valor",
					"Text",
					"<-",
					"Valor de la instrucción"
				]
			],
			"Summary": "El comando SAX GET XML PROCESSING INSTRUCTION devuelve el *nombre* y el *valor* de la instrucción de proceso XML analizada en el documento XML referenciada por *documento*."
		},
		"SAX OPEN XML ELEMENT ARRAYS": {
			"Syntax": "**SAX OPEN XML ELEMENT ARRAYS** ( *documento* ; *etiqueta* {; *arrayNomsAtrib* ; *arrayValoresAtrib*} {; *arrayNomsAtrib2* ; *arrayValoresAtrib2* ; ... ; *arrayNomsAtribN* ; *arrayValoresAtribN*} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"etiqueta",
					"Text",
					"->",
					"Nombre del elemento a abrir"
				],
				[
					"arrayNomsAtrib",
					"Text array",
					"->",
					"Array de nombres de atributos"
				],
				[
					"arrayValoresAtrib",
					"Text array, Integer array, Date array, Real array, Picture array, Boolean array",
					"->",
					"Array de valores de atributos"
				]
			],
			"Summary": "El comando SAX OPEN XML ELEMENT ARRAYS permite añadir un nuevo elemento en el documento XML cuya referencia se pasa en *document* como también, opcionalmente, atributos y sus valores en forma de arrays."
		},
		"SAX OPEN XML ELEMENT": {
			"Syntax": "**SAX OPEN XML ELEMENT** ( *documento* ; *etiqueta* {; *nomAtrib* ; *valorAtrib*} {; *nomAtrib2* ; *valorAtrib2* ; ... ; *nomAtribN* ; *valorAtribN*} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"etiqueta",
					"Text",
					"->",
					"Nombre del elemento a abrir"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Nombre del atributo"
				],
				[
					"valorAtrib",
					"Text",
					"->",
					"Valor del atributo"
				]
			],
			"Summary": "El comando SAX OPEN XML ELEMENT permite añadir un nuevo elemento en el documento XML referenciado por *document* como también, opcionalmente, atributos y sus valores."
		},
		"SAX SET XML DECLARATION": {
			"Syntax": "**SAX SET XML DECLARATION** ( *documento* ; *codificacion* {; *autonomo*} )",
			"Params": [
				[
					"documento",
					"Time",
					"->",
					"Referencia del documento abierto"
				],
				[
					"codificacion",
					"Text",
					"->",
					"Conjunto de caracteres del documento XML"
				],
				[
					"autonomo",
					"Boolean",
					"->",
					"True = el documento es autónomo False (por defecto) = el documento no es autónomo"
				]
			],
			"Summary": "El comando SAX SET XML DECLARATION inicializa el documento XML referenciado en *documento* utilizando la *codificación* especificada."
		},
		"SCAN INDEX": {
			"Syntax": "**SCAN INDEX** ( *unCampo* ; *Numero* {; > o <} )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo indexado con el cual escanear los registros"
				],
				[
					"Numero",
					"Integer",
					"->",
					"Número de registros a devolver"
				],
				[
					"> o <",
					"Operador",
					"->",
					"> a partir del inicio del índice < a partir del final del índice"
				]
			],
			"Summary": "SCAN INDEX devuelve una selección de *numero* de registros de la *tabla*."
		},
		"SCREEN COORDINATES": {
			"Syntax": "**SCREEN COORDINATES** ( *izquierda* ; *superior* ; *derecha* ; *inferior* {; *IDpantalla* {; *areaPantalla*}} )",
			"Params": [
				[
					"izquierda",
					"Integer",
					"<-",
					"Coordenada izquierda del área de pantalla"
				],
				[
					"superior",
					"Integer",
					"<-",
					"Coordenada superior del área de la pantalla"
				],
				[
					"derecha",
					"Integer",
					"<-",
					"Coordenada derecha del área de la pantalla"
				],
				[
					"inferior",
					"Integer",
					"<-",
					"Coordenada inferior del área de la pantalla"
				],
				[
					"IDpantalla",
					"Integer",
					"->",
					"Número de la pantalla, o pantalla principal si se omite"
				],
				[
					"areaPantalla",
					"Integer",
					"->",
					"Pantalla completa (por defecto) o área de trabajo"
				]
			],
			"Summary": "El comando SCREEN COORDINATES devuelve en los parámetros *izquierda*, *arriba*, *derecha,* y *abajo* las coordenadas de la pantalla especificada por *IDpantalla*."
		},
		"SCREEN DEPTH": {
			"Syntax": "**SCREEN DEPTH** ( *profundidad* ; *color* {; *pantalla*} )",
			"Params": [
				[
					"profundidad",
					"Integer",
					"<-",
					"Profundidad de la pantalla (número de colores = 2 ^ profundidad)"
				],
				[
					"color",
					"Integer",
					"<-",
					"1 = Pantalla color 0 = Pantalla blanco y negro o escala de grises"
				],
				[
					"pantalla",
					"Integer",
					"->",
					"Número de la pantalla, o pantalla principal si se omite"
				]
			],
			"Summary": "El comando SCREEN DEPTH devuelve en los parámetros *profundidad* y *color* la información sobre el monitor."
		},
		"Screen height": {
			"Syntax": "**Screen height** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Windows: altura de la ventana de la aplicación o altura de la pantalla si se especifica * Macintosh: altura de la pantalla principal"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura expresada en píxeles"
				]
			],
			"Summary": "En Windows, Screen height devuelve la altura de la ventana de la aplicación 4D (ventana MDI)."
		},
		"Screen width": {
			"Syntax": "**Screen width** {( * )} : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Windows: largo de la ventana de la aplicación o largo de la pantalla si se especifica * Macintosh: largo de la pantalla principal"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Largo expresado en píxeles"
				]
			],
			"Summary": "En Windows, Screen width devuelve el largo de la ventana de la aplicación 4D (ventana MDI)."
		},
		"Select document": {
			"Syntax": "**Select document** ( *directorio* ; *tiposArchivos* ; *titulo* ; *opciones* {; *seleccionados*} ) : Text",
			"Params": [
				[
					"directorio",
					"Text, Integer",
					"->",
					"• Ruta de acceso del directorio para mostrar por defecto en la caja de diálogo de selección o • Cadena vacía para mostrar la carpeta del usuario por defecto (“Mis documentos” bajo Windows, “Documentos” bajo Mac OS), o • Número de la ruta de acceso memorizada"
				],
				[
					"tiposArchivos",
					"Text",
					"->",
					"Lista de los tipos de documentos a filtrar, o \"*\" para no filtrar los documentos"
				],
				[
					"titulo",
					"Text",
					"->",
					"Título de la caja de diálogo de selección"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Opciones de selección"
				],
				[
					"seleccionados",
					"Text array",
					"<-",
					"Array que contiene la lista de rutas de acceso + los nombres de los archivos seleccionados"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre del archivo seleccionado (primer archivo de la lista en caso de selección múltiple)"
				]
			],
			"Summary": "El comando Select document muestra una caja de diálogo estándar de apertura de documentos, permitiendo al usuario definir uno o más archivos y devolver el nombre y/o ruta de acceso completa del o de los archivo(s) seleccionado(s)."
		},
		"Select folder": {
			"Syntax": "**Select folder** ( {*mensaje* }{;}{ *rutaDefecto* {; *opciones*}} ) : Text",
			"Params": [
				[
					"mensaje",
					"Text",
					"->",
					"Título de la ventana"
				],
				[
					"rutaDefecto",
					"Text, Integer",
					"->",
					"• Ruta de acceso por defecto o • Ruta vacía para mostrar el usuario por defecto carpeta (“Mis documentos” bajo Windows, “Documentos” bajor Mac OS), o • Número de ruta de acceso memorizada"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Opciones de selección bajo Mac OS"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso al archivo seleccionado"
				]
			],
			"Summary": "El comando **Select folder** muestra una caja de diálogo que le permite seleccionar manualmente una carpeta y luego recuperar la ruta de acceso completa a esa carpeta."
		},
		"SELECT LIST ITEMS BY POSITION": {
			"Syntax": "**SELECT LIST ITEMS BY POSITION** ( {* ;} *lista* ; *posicionElem* {; *posicionArray*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"posicionElem",
					"Integer",
					"->",
					"Posición del elemento en la(s) lista(s) desplegada(s) /contraída(s)"
				],
				[
					"posicionArray",
					"Integer array",
					"->",
					"Array de posiciones en la(s) lista(s) desplegada(s) /contraída(s)"
				]
			],
			"Summary": "El comando SELECT LIST ITEMS BY POSITION selecciona el(los) elemento(s) cuya posición se pasa en *posicionElem* y opcionalmente en *posicionArray* en la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"SELECT LIST ITEMS BY REFERENCE": {
			"Syntax": "**SELECT LIST ITEMS BY REFERENCE** ( *lista* ; *refElem* {; *refArray*} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de lista"
				],
				[
					"refElem",
					"Integer",
					"->",
					"Número de referencia del elemento o 0 para el último elemento  añadido a la lista"
				],
				[
					"refArray",
					"Integer array",
					"->",
					"Array de números de referencia de elementos"
				]
			],
			"Summary": "El comando SELECT LIST ITEMS BY REFERENCE selecciona el o los elementos cuyo número de referencia se pasa en *refElem* y opcionalmente en *refArray*, en la lista cuyo número de referencia se pasa en *lista*."
		},
		"Select RGB color": {
			"Syntax": "**Select RGB color** {( *colorDefecto* {; *mensaje*} )} : Integer",
			"Params": [
				[
					"colorDefecto",
					"Integer",
					"->",
					"Color RGB preseleccionado"
				],
				[
					"mensaje",
					"Text",
					"->",
					"Título de la ventana de selección"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Color RGB"
				]
			],
			"Summary": "El comando Select RGB color muestra la ventana sistema de selección de color y devuelve el valor RGB del color seleccionado por el usuario."
		},
		"Selected list items": {
			"Syntax": "**Selected list items** ( {* ;} *lista* {; *arrayElem* {; *}} )  : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica: lista es un nombre de objeto (cadena) Si se omite, lista es una referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto tipo lista (si se pasa *)"
				],
				[
					"arrayElem",
					"Integer array",
					"<-",
					"Si  se omite el segundo *: Array contiene las posiciones de los elementos seleccionados en la(s) lista(s) Si se pasa el segundo *: Array contiene las referencias de los elementos seleccionados"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se omite: posición(es) de(l) (los) elemento(s) Si se pasa: referencia(s) de(l) (los) elemento(s)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Si se omite segundo *: posición del elemento seleccionado en la(s) lista(s) desplegada(s) Si se pasa el segundo *: Referencia del elemento seleccionado"
				]
			],
			"Summary": "El comando Selected list items devuelve la posición o referencia del elemento seleccionado en la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"Selected record number": {
			"Syntax": "**Selected record number** {( *tabla* )} : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual devolver el número de registros seleccionados, o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número en la selección"
				]
			],
			"Summary": "Selected record number devuelve la posición del registro actual en la selección actual de *tabla*."
		},
		"SELECTION RANGE TO ARRAY": {
			"Syntax": "**SELECTION RANGE TO ARRAY** ( *inicio* ; *fin* {; *campo* ; *array*} {; *campo2* ; *array2* ; ... ; *campoN* ; *arrayN*} )",
			"Params": [
				[
					"inicio",
					"Integer",
					"->",
					"Número de registro seleccionado a partir del cual comenzar la recuperación de datos"
				],
				[
					"fin",
					"Integer",
					"->",
					"Número de registro seleccionado donde termina la recuperación de datos"
				],
				[
					"campo",
					"Field, Table",
					"->",
					"Campo a utilizar para recuperar los datos o Tabla a utilizar para recuperar los números de registros"
				],
				[
					"array",
					"Array",
					"<-",
					"Array para recibir los datos o números de registros de los campos"
				]
			],
			"Summary": "**SELECTION RANGE TO ARRAY** crea uno o más arrays y copia los datos de los campos o números de registro de la selección actual en arrays."
		},
		"SELECTION TO ARRAY": {
			"Syntax": "**SELECTION TO ARRAY** {( *campo* ; *array* {; *campo* ; *array* {; *campo2* ; *array2* ; ... ; *campoN* ; *arrayN*}}{; *})}",
			"Params": [
				[
					"campo",
					"Field, Table",
					"->",
					"Campo a utilizar para recuperar datos o Tabla a utilizar para recuperar números de registros"
				],
				[
					"array",
					"Array",
					"<-",
					"Array para recibir valores de campos o números de registros"
				],
				[
					"campo",
					"Field",
					"->",
					"Campo a recuperar en el array"
				],
				[
					"array",
					"Array",
					"<-",
					"Array que recibe los valores del campo"
				],
				[
					"*",
					"Operador",
					"->",
					"Esperar ejecución"
				]
			],
			"Summary": "El comando **SELECTION TO ARRAY** crea uno o más arrays y copia los valores en los campos o los números de registro de la selección actual en los arrays."
		},
		"Selection to JSON": {
			"Syntax": "**Selection to JSON** ( *laTabla* {; *elCampo*}{; *elCampo2* ; ... ; *elCampoN*}{; *template*})  : Text",
			"Params": [
				[
					"laTable",
					"Table",
					"->",
					"Tabla a serializar"
				],
				[
					"elField",
					"Field",
					"->",
					"Campo(s) cuyo(s) contenidos deben ser serializados"
				],
				[
					"template",
					"Object",
					"->",
					"Objeto para la selección de etiquetas y de campos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena que contiene el array JSON serializado"
				]
			],
			"Summary": "El comando **Selection to JSON** devuelve una cadena que contiene un array JSON con tantos elementos como registros hay en la selección actual de *laTabla*."
		},
		"Self": {
			"Syntax": "**Self**  : Pointer",
			"Params": [
				[
					"Resultado",
					"Pointer",
					"<-",
					"Puntero hacia el objeto de formulario (si lo hay) cuyo método está siendo ejecutado actualmente. Si no Nil (->[]) si fuera de contexto"
				]
			],
			"Summary": "Este comando sólo se conserva por razones de compatibilidad."
		},
		"Semaphore": {
			"Syntax": "**Semaphore** ( *semaforo* {; *ticCont*} ) : Boolean",
			"Params": [
				[
					"semaforo",
					"Text",
					"->",
					"Semáforo a probar y posicionar"
				],
				[
					"ticCont",
					"Integer",
					"->",
					"Máximo tiempo de espera"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"El semáforo se ha creado correctamente (FALSE) o El semáforo ya había sido creado (TRUE)"
				]
			],
			"Summary": "Un semáforo es una bandera compartida entre estaciones de trabajo o entre procesos en la misma estación de trabajo."
		},
		"SEND MESSAGE TO REMOTE USER": {
			"Syntax": "**SEND MESSAGE TO REMOTE USER** ( *mensaje* {; *sesionUsuario*} )",
			"Params": [
				[
					"mensaje",
					"Text",
					"->",
					"Texto enviado al usuario"
				],
				[
					"sesionUsuario",
					"Text",
					"->",
					"ID de sesión del usuario"
				]
			],
			"Summary": "El comando **SEND MESSAGE TO REMOTE USER** envía un mensaje a todos los usuarios remotos o a un usuario remoto específico."
		},
		"SEND PACKET": {
			"Syntax": "**SEND PACKET** ( {*docRef* ;} *paquete* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referencia del documento o canal actual (puerto serial o documento)"
				],
				[
					"paquete",
					"Text, Blob",
					"->",
					"Cadena o BLOB a enviar"
				]
			],
			"Summary": "El comando SEND PACKET envía un paquete a un puerto serial o a un documento."
		},
		"SEND RECORD": {
			"Syntax": "**SEND RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual enviar el registro actual o tabla por defecto, si se omite"
				]
			],
			"Summary": "SEND RECORD envía el registro actual de *tabla* al puerto serial o a un documento abierto por el comando SET CHANNEL."
		},
		"SEND VARIABLE": {
			"Syntax": "**SEND VARIABLE** ( *variable* )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable a enviar"
				]
			],
			"Summary": "SEND VARIABLE envía *variable* al documento o puerto serial previamente abierto por SET CHANNEL."
		},
		"Sequence number": {
			"Syntax": "**Sequence number** {( *tabla* )} : Integer",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla a numerar automáticamente o Tabla por defecto, si se omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número automático"
				]
			],
			"Summary": "Sequence number devuelve el próximo número automático de *tabla*."
		},
		"SET ABOUT": {
			"Syntax": "**SET ABOUT** ( *textoElem* ; *metodo* )",
			"Params": [
				[
					"textoElem",
					"Text",
					"->",
					"Nueva línea de menú Acerca de"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nombre del método a ejecutar cuando se elije la línea"
				]
			],
			"Summary": "El comando **SET ABOUT** cambia el comando de menú **Acerca de 4D** del menú **Ayuda** (Windows) o del menú **Aplicación** (macOS) por *textoElem*."
		},
		"SET APPLICATION COLOR SCHEME": {
			"Syntax": "**SET APPLICATION COLOR SCHEME** ( *esquemaColor* )",
			"Params": [
				[
					"esquemaColor",
					"Text",
					"->",
					"\"claro\", \"oscuro\" o \"heredado\""
				]
			],
			"Summary": "El comando **SET APPLICATION COLOR SCHEME** define el esquema de color a utilizar a nivel de la aplicación para la sesión actual."
		},
		"SET ASSERT ENABLED": {
			"Syntax": "**SET ASSERT ENABLED** ( *aser* {; *} )",
			"Params": [
				[
					"aser",
					"Boolean",
					"->",
					"True = activar las aserciones, False = desactivar las aserciones"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se omite = el comando se aplica al conjunto de los procesos, Si se pasa = el comando se aplica al proceso actual únicamente"
				]
			],
			"Summary": "El comando **SET ASSERT ENABLED** se utiliza para desactivar o reactivar las aserciones insertadas en el código 4D de la aplicación."
		},
		"SET AUTOMATIC RELATIONS": {
			"Syntax": "**SET AUTOMATIC RELATIONS** ( *uno* {; *muchos*} )",
			"Params": [
				[
					"uno",
					"Boolean",
					"->",
					"Estado de todas las relaciones Muchos a Uno"
				],
				[
					"muchos",
					"Boolean",
					"->",
					"Estado de todas las relaciones de Uno a Muchos"
				]
			],
			"Summary": "SET AUTOMATIC RELATIONS cambia temporalmente todas las relaciones manuales en relaciones automáticas para toda la base en el proceso actual."
		},
		"SET BLOB SIZE": {
			"Syntax": "**SET BLOB SIZE** ( *BLOB* ; *tamaño* {; *relleno*} )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"Campo o variable de tipo BLOB"
				],
				[
					"tamaño",
					"Integer",
					"->",
					"Nuevo tamaño del BLOB"
				],
				[
					"relleno",
					"Integer",
					"->",
					"Código ASCII del caracter de relleno"
				]
			],
			"Summary": "SET BLOB SIZE redimensiona el BLOB *blob* de acuerdo al valor pasado en *tamaño*."
		},
		"SET BLOBS CACHE PRIORITY": {
			"Syntax": "**SET BLOBS CACHE PRIORITY** ( *tabla* ; *prioridad* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla cuyo valor de prioridad de datos \"blobs\" tiene que definirse para la sesión"
				],
				[
					"prioridad",
					"Integer",
					"->",
					"Valor de prioridad de la caché para BLOBs en la tabla"
				]
			],
			"Summary": "Este comando está reservado para necesidades específicas."
		},
		"SET CACHE SIZE": {
			"Syntax": "**SET CACHE SIZE** ( *tam* {; *libMin*} )",
			"Params": [
				[
					"tam",
					"Real",
					"->",
					"Tamaño de la caché de base de datos en bytes"
				],
				[
					"libMin",
					"Real",
					"->",
					"Número mínimo de bytes a liberar cuando la caché está llena"
				]
			],
			"Summary": "El comando SET CACHE SIZE define dinámicamente el tamaño de la caché de la base de datos y, opcionalmente, permite definir el tamaño minino en bytes a partir del cual comenzar a liberar memoria."
		},
		"SET CHANNEL": {
			"Syntax": "**SET CHANNEL** ( *puerto* ; *param* ) <br/>\n**SET CHANNEL** ( *operacion* ; *doc* )",
			"Params": [
				[
					"puerto",
					"Integer",
					"->",
					"Número de puerto serial"
				],
				[
					"param",
					"Integer",
					"->",
					"Parámetros de puerto serial"
				],
				[
					"SET CHANNEL ( operacion ; doc )"
				],
				[
					"Parámetro",
					"Tipo",
					"Descripción"
				],
				[
					"operacion",
					"Integer",
					"->",
					"Operación a efectuar en el documento"
				],
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento"
				]
			],
			"Summary": "El comando SET CHANNEL abre un puerto serial o un documento."
		},
		"SET CURRENT PRINTER": {
			"Syntax": "**SET CURRENT PRINTER** ( *nomImpr* )",
			"Params": [
				[
					"nomImpr",
					"Text",
					"->",
					"Nombre de la impresora a utilizar"
				]
			],
			"Summary": "El comando **SET CURRENT PRINTER** designa la impresora a utilizar para imprimir con la aplicación 4D actual."
		},
		"SET CURSOR": {
			"Syntax": "**SET CURSOR** {( *cursor* )}",
			"Params": [
				[
					"cursor",
					"Integer",
					"->",
					"Número de cursor sistema"
				]
			],
			"Summary": "El comando SET CURSOR cambia el puntero (gráfico) del ratón por el del sistema cuyo número de identificación se pasa en *cursor*."
		},
		"SET DATABASE LOCALIZATION": {
			"Syntax": "**SET DATABASE LOCALIZATION** ( *codigoLeng* {; *} )",
			"Params": [
				[
					"codigoLeng",
					"Text",
					"->",
					"Selector del lenguaje"
				],
				[
					"*",
					"Operador",
					"->",
					"Alcance del comando"
				]
			],
			"Summary": "El comando SET DATABASE LOCALIZATION utilizado para modificar el lenguaje actual de la base para la sesión actual."
		},
		"SET DATABASE PARAMETER": {
			"Syntax": "**SET DATABASE PARAMETER** ( {*tabla* ;} *selector* ; *valor* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual definir el parámetro o Tabla por defecto si se omite este parámetro"
				],
				[
					"selector",
					"Integer",
					"->",
					"Código del parámetro de la base a modificar"
				],
				[
					"valor",
					"Real, Text",
					"->",
					"Valor del parámetro"
				]
			],
			"Summary": "El comando **SET DATABASE PARAMETER** permite modificar varios parámetros internos de la base de datos 4D."
		},
		"SET DEFAULT CENTURY": {
			"Syntax": "**SET DEFAULT CENTURY** ( *siglo* {; *añoPivote*} )",
			"Params": [
				[
					"siglo",
					"Integer",
					"->",
					"Siglo por defecto (menos uno) para la entrada de años con dos dígitos"
				],
				[
					"añoPivote",
					"Integer",
					"->",
					"Año pivote para la entrada de años con dos dígitos"
				]
			],
			"Summary": "El comando SET DEFAULT CENTURY permite especificar el siglo por defecto y el año pivote utilizado por 4D cuando introduce una fecha con sólo dos dígitos para el año."
		},
		"SET DOCUMENT POSITION": {
			"Syntax": "**SET DOCUMENT POSITION** ( *docRef* ; *offset* {; *ancla*} )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referencia del documento"
				],
				[
					"offset",
					"Real",
					"->",
					"Posición del archivo (expresada en bytes)"
				],
				[
					"ancla",
					"Integer",
					"->",
					"1 = En relación con el inicio del archivo 2 = En relación con el final del archivo 3 = En relación con la posición actual"
				]
			],
			"Summary": "Este comando funciona únicamente en un documento abierto cuyo número de referencia se pasa en *docRef*."
		},
		"SET DOCUMENT PROPERTIES": {
			"Syntax": "**SET DOCUMENT PROPERTIES** ( *doc* ; *bloqueado* ; *invisible* ; creado el ; creado a las ; modificado el ; modificado a las )",
			"Params": [
				[
					"doc",
					"Text",
					"->",
					"Nombre del documento o ruta de acceso completa al documento"
				],
				[
					"bloqueado",
					"Boolean",
					"->",
					"Bloqueado (True) o desbloqueado (False)"
				],
				[
					"invisible",
					"Boolean",
					"->",
					"Invisible (True) o Visible (False)"
				],
				[
					"creado el",
					"Fecha",
					"->",
					"Fecha de creación"
				],
				[
					"creado a las",
					"Hora",
					"->",
					"Hora de creación"
				],
				[
					"modificado el",
					"Fecha",
					"->",
					"Última fecha de modificación"
				],
				[
					"modificado a las",
					"Hora",
					"->",
					"Hora de la última modificación"
				]
			],
			"Summary": "El comando SET DOCUMENT PROPERTIES modifica la información del documento cuyo nombre o ruta de acceso se pasa en *documento*."
		},
		"SET DOCUMENT SIZE": {
			"Syntax": "**SET DOCUMENT SIZE** ( *docRef* ; *tamaño* )",
			"Params": [
				[
					"docRef",
					"Time",
					"->",
					"Número de referencia del documento"
				],
				[
					"tamaño",
					"Real",
					"->",
					"Nuevo tamaño expresado en bytes"
				]
			],
			"Summary": "El comando SET DOCUMENT SIZE define el tamaño de un documento para el número de bytes que se pasan en *tamaño*."
		},
		"SET DRAG ICON": {
			"Syntax": "**SET DRAG ICON** ( *icono* {; *despH* {; *despV*}} )",
			"Params": [
				[
					"icono",
					"Picture",
					"->",
					"Icono a utilizar durante arrastrar"
				],
				[
					"despH",
					"Integer",
					"->",
					"Desplazamiento horizontal del borde izquierdo de la imagen con respecto a la posición del cursor (> = 0, a la izquierda, <0 = a la derecha)"
				],
				[
					"despV",
					"Integer",
					"->",
					"Desplazamiento vertical del borde superior de la imagen con respecto a la posición del cursor (> 0 = hacia arriba, <0 = hacia abajo)"
				]
			],
			"Summary": "El comando **SET DRAG ICON** asocia la imagen de icono al cursor durante las operaciones de arrastrar y soltar que se manejan por programación."
		},
		"SET ENVIRONMENT VARIABLE": {
			"Syntax": "**SET ENVIRONMENT VARIABLE** ( *nomVar* ; *valorVar* )",
			"Params": [
				[
					"nomVar",
					"Text",
					"->",
					"Nombre de la variable a definir"
				],
				[
					"valorVar",
					"Text",
					"->",
					"Valor de la variable o \"\" para restablecer el valor por defecto"
				]
			],
			"Summary": "El comando **SET ENVIRONMENT VARIABLE** permite fijar el valor de una variable de entorno bajo macOS y Windows."
		},
		"SET EXTERNAL DATA PATH": {
			"Syntax": "**SET EXTERNAL DATA PATH** ( *aCampo* ; *ruta* )",
			"Params": [
				[
					"aCampo",
					"Text, Blob, Picture",
					"->",
					"Campo para el cual definir el lugar de almacenamiento"
				],
				[
					"ruta",
					"Text, Integer",
					"->",
					"Ruta de acceso y nombre del archivo de almacenamiento externo o0 = utilizar la definición en estructura 1 = utilizar la carpeta por defecto"
				]
			],
			"Summary": "El comando **SET EXTERNAL DATA PATH** define o modifica, para el registro actual, la ubicación de almacenamiento externo del campo *aCampo* pasado como parámetro."
		},
		"SET FIELD RELATION": {
			"Syntax": "**SET FIELD RELATION** ( tablasN | CampoN ; *uno* ; *muchos* )",
			"Params": [
				[
					"tablasN &#124; CampoN",
					"Tabla, Campo",
					"->",
					"Tabla de inicio de las relaciones o Campo de inicio de la relación"
				],
				[
					"uno",
					"Integer",
					"->",
					"Estado de la relación Muchos a Uno a partir del campo o de las relaciones Muchos a Uno de la tabla"
				],
				[
					"muchos",
					"Integer",
					"->",
					"Estado de la relación Uno a Muchos a partir del campo o de las relaciones Uno a Muchos de la tabla"
				]
			],
			"Summary": "El comando SET FIELD RELATION permite definir separadamente el estado automático/manual de cada relación de la base para el proceso actual, sin tener en cuenta su estado inicial definido en el entorno Diseño en la ventana de propiedades de las relaciones."
		},
		"SET FIELD TITLES": {
			"Syntax": "**SET FIELD TITLES** ( *tabla* ; *titulosCampos* ; *numCampos* {; *} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla para la cual definir los títulos de los campos"
				],
				[
					"titulosCampos",
					"Text array",
					"->",
					"Nuevos títulos de los campos"
				],
				[
					"numCampos",
					"Integer array",
					"->",
					"Números de los campos"
				],
				[
					"*",
					"Operator",
					"->",
					"Utilizar los nombres personalizados en el editor de fórmulas"
				]
			],
			"Summary": "**SET FIELD TITLES** permite ocultar, renombrar y reorganizar los campos de la tabla pasada en *tabla* cuando aparecen en las cajas de diálogo estándar de 4D, tal como el editor de búsquedas, en el entorno Aplicación(es decir, cuando el modo de inicio es **Aplicación**, o después de seleccionar **Probar aplicación** en el menú **Ejecutar**)."
		},
		"SET FIELD VALUE NULL": {
			"Syntax": "**SET FIELD VALUE NULL** ( *unCampo* )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo al cual atribuir el valor NULL"
				]
			],
			"Summary": "El comando **SET FIELD VALUE NULL** asigna el valor NULL al campo designado por el parámetro *unCampo*."
		},
		"SET FILE TO PASTEBOARD": {
			"Syntax": "**SET FILE TO PASTEBOARD** ( *archivo* {; *} )",
			"Params": [
				[
					"archivo",
					"Text",
					"->",
					"Nombre del archivo o ruta de acceso completa del archivo"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = añadir; Si se omite= reemplazar"
				]
			],
			"Summary": "El comando SET FILE TO PASTEBOARD añade al portapapeles la ruta de acceso completa del archivo pasada en el parámetro *archivo*."
		},
		"SET GROUP ACCESS": {
			"Syntax": "**SET GROUP ACCESS** {( *grupos* )}",
			"Params": [
				[
					"grupos",
					"Collection",
					"->",
					"Nombre de los grupos a los que debe pertenecer la cuenta de usuario 4D durante la sesión"
				]
			],
			"Summary": "El comando **SET GROUP ACCESS** modifica las membresías de la cuenta de usuario 4D para la sesión actual."
		},
		"Set group properties": {
			"Syntax": "**Set group properties** ( *refGrupo* ; *nombre* ; *propietario* {; *miembros*} )  : Integer",
			"Params": [
				[
					"refGrupo",
					"Integer",
					"->",
					"Número de referencia único del grupo activo o -1 para añadir un grupo de Diseñador o -2 para añadir un grupo de Administrador"
				],
				[
					"<-",
					"Número de identificación único del grupo agregado (si lo hay)"
				],
				[
					"nombre",
					"Text",
					"->",
					"Nuevo nombre de grupo"
				],
				[
					"propietario",
					"Integer",
					"->",
					"Número de referencia único del usuario o del propietario del nuevo grupo"
				],
				[
					"miembros",
					"Integer array",
					"->",
					"Nuevos miembros del grupo"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia único del nuevo grupo"
				]
			],
			"Summary": "Set group properties permite modificar y actualizar las propiedades de un grupo existente cuyo número de referencia único se pasa en *refGrupo*, o para añadir un nuevo grupo."
		},
		"SET HELP MENU": {
			"Syntax": "**SET HELP MENU** ( *menuCol* )",
			"Params": [
				[
					"menuCol",
					"Collection",
					"->",
					"Colección de objetos de menú"
				]
			],
			"Summary": "El comando **SET HELP MENU** le permite reemplazar el menú **Ayuda** por defecto de 4D por la colección de elementos del menù *menuCol* del modo aplicación."
		},
		"SET INDEX CACHE PRIORITY": {
			"Syntax": "**SET INDEX CACHE PRIORITY** ( *campo* ; *prioridad* )",
			"Params": [
				[
					"campo",
					"Field",
					"->",
					"Campo cuyo valor de prioridad de índices debe ser configurado para la sesión"
				],
				[
					"prioridad",
					"Integer",
					"->",
					"Valor de prioridad de la caché para el(los) índice(s) de campo"
				]
			],
			"Summary": "Este comando está reservado para necesidades específicas."
		},
		"SET INDEX": {
			"Syntax": "**SET INDEX** ( *unCampo* ; *index* {; *} )",
			"Params": [
				[
					"unField",
					"Field",
					"->",
					"Campo del cual crear o borrar el índice"
				],
				[
					"index",
					"Boolean, Integer",
					"->",
					"• True=Crear el índice, False=Borrar el índice, o • Crear un índice de tipo: -1=palabras claves, 0=por defecto, 1=B-Tree estándar, 3=B-Tree cluster"
				],
				[
					"*",
					"Operator",
					"->",
					"Si se pasa * indexación asincrónica"
				]
			],
			"Summary": "**SET INDEX**, aunque es un comando heredado, todavía es totalmente compatible y puede permanecer en su aplicación, no es necesario volver a escribir el código existente."
		},
		"SET LIST ITEM FONT": {
			"Syntax": "**SET LIST ITEM FONT** ( {* ;} *lista* ; refElem | * ; *fuente* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"fuente",
					"Text, Integer",
					"->",
					"Nombre o número de fuente"
				]
			],
			"Summary": "El comando SET LIST ITEM FONT modifica la fuente de caracteres del elemento especificado por el parámetro *refElem* de la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"SET LIST ITEM ICON": {
			"Syntax": "**SET LIST ITEM ICON** ( {* ;} *lista* ; refElem | * ; *icono* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Entero largo, Operador",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"icono",
					"Picture",
					"->",
					"Icono a asociar al elemento"
				]
			],
			"Summary": "El comando SET LIST ITEM ICON permite modificar el icono asociado al elemento especificado por el parámetro *refElem* de la lista cuyo número de referencia o nombre de objeto se pasa en *lista* \n\n**Nota:** es posible modificar el icono asociado con un elemento utilizando el comando SET LIST ITEM PROPERTIES."
		},
		"SET LIST ITEM PARAMETER": {
			"Syntax": "**SET LIST ITEM PARAMETER** ( {* ;} *lista* ; refElem | * ; *selector* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es un número de referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Número de referencia del elemento o 0 para el último elemento añadido a la lista o * para el elemento actual de la lista"
				],
				[
					"selector",
					"Text",
					"->",
					"Constante de parámetro"
				],
				[
					"valor",
					"Text, Boolean, Real",
					"->",
					"Valor del parámetro"
				]
			],
			"Summary": "El comando SET LIST ITEM PARAMETER permite modificar el parámetro *selector* para el elemento *refElem* de la lista jerárquica cuya referencia o nombre de objeto se pasa en el parámetro *lista*."
		},
		"SET LIST ITEM PROPERTIES": {
			"Syntax": "**SET LIST ITEM PROPERTIES** ( {* ;} *lista* ; refElem | * ; *editable* ; *estilos* {; *icono* {; *color*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es una referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre del objeto de tipo lista (si se pasa *)"
				],
				[
					"refElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Número de referencia del elemento, o 0 para el último elemento añadido a la lista, o * para el elemento actual de la lista"
				],
				[
					"editable",
					"Boolean",
					"->",
					"TRUE = Editable, FALSE = No-editable"
				],
				[
					"estilos",
					"Integer",
					"->",
					"Estilo de fuente para el elemento"
				],
				[
					"icono",
					"Text, Integer",
					"->",
					"Nombre o número de la imagen (\"\" o 0 para ningún icono)"
				],
				[
					"color",
					"Integer",
					"->",
					"Valor de color RGB o -1 = restablecer color original"
				]
			],
			"Summary": "El comando **SET LIST ITEM PROPERTIES** modifica el elemento designado por el parámetro *refElem* de la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"SET LIST ITEM": {
			"Syntax": "**SET LIST ITEM** ( {* ;} *lista* ; refElem | * ; *textElem* ; *nuevaRef* {; *sublista* ; *desplegada*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, lista es un nombre de objeto (cadena) Si se omite, lista es una referencia de lista"
				],
				[
					"lista",
					"Integer, Text",
					"->",
					"Número de referencia de lista (si se omite *) o Nombre de objeto de tipo lista (si se pasa*)"
				],
				[
					"refElem &#124; *",
					"Operador, Entero largo",
					"->",
					"Número de referencia de elemento, o 0 para el último elemento añadido a la lista, o * para el elemento actual de la lista"
				],
				[
					"textElem",
					"Text",
					"->",
					"Nuevo texto del elemento"
				],
				[
					"nuevaRef",
					"Integer",
					"->",
					"Nuevo número de referencia del elemento"
				],
				[
					"sublista",
					"Integer",
					"->",
					"Nueva sublista asociada al elemento, o 0 = ninguna sublista (separar actual, si la hay), o -1 = ningún cambio"
				],
				[
					"desplegada",
					"Boolean",
					"->",
					"Indica si la sublista debe ser desplegada o contraída"
				]
			],
			"Summary": "El comando SET LIST ITEM modifica el elemento designado por el parámetro *refElem* en la lista cuyo número de referencia o nombre de objeto se pasa en *lista*."
		},
		"SET LIST PROPERTIES": {
			"Syntax": "**SET LIST PROPERTIES** ( *lista* ; *apariencia* {; *icono* {; *altoLinea* {; *dobleClic* {; *multiSeleccion* {; *editable*}}}}} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de la lista"
				],
				[
					"apariencia",
					"Integer",
					"->",
					"Estilo gráfico de la lista 1 = Lista jerárquica a la Macintosh 2 = Lista jerárquica a la Windows 0 = Aparición auto dependiendo de la plataforma"
				],
				[
					"icono",
					"Integer",
					"->",
					"ID de recurso Mac OS ‘cicn’ o 0 = icono por defecto de la plataforma"
				],
				[
					"altoLinea",
					"Integer",
					"->",
					"Altura mínima de la línea expresada en píxeles"
				],
				[
					"dobleClic",
					"Integer",
					"->",
					"Desplegar/Contraer sublista con doble-clic 0 = Sí, 1= No"
				],
				[
					"multiSeleccion",
					"Integer",
					"->",
					"Selecciones múltiples: 0 = No (por defecto), 1 = Sí"
				],
				[
					"editable",
					"Integer",
					"->",
					"0 = Lista no editable por el usuario, 1 = Lista editable por el usuario (por defecto)"
				]
			],
			"Summary": "El comando **SET LIST PROPERTIES** define el alto de línea y el funcionamiento de las lista jerárquica cuya referencia se pasa en el parámetro *lista*."
		},
		"SET MACRO PARAMETER": {
			"Syntax": "**SET MACRO PARAMETER** ( *selector* ; *paramText* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Selección a utilizar"
				],
				[
					"paramText",
					"Text",
					"->",
					"Texto enviado"
				]
			],
			"Summary": "El comando SET MACRO PARAMETER inserta el texto *paramText* en el método desde el cual se llama."
		},
		"SET MENU BAR": {
			"Syntax": "**SET MENU BAR** ( *barra* {; *proceso*}{; *} )",
			"Params": [
				[
					"barra",
					"Integer, Text, Text",
					"->",
					"Número o nombre de la barra de menús o Referencia de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"*",
					"Operador",
					"->",
					"Guardar el estado de la barra de menús"
				]
			],
			"Summary": "MENU BAR reemplaza la barra de menús actual con la especificada por *barra* en el proceso actual únicamente."
		},
		"SET MENU ITEM ICON": {
			"Syntax": "**SET MENU ITEM ICON** ( *menu* ; *lineamenu* ; *refIcon*\t {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido"
				],
				[
					"refIcon",
					"Text, Integer",
					"->",
					"Nombre o número de la librería de imágenes a asociar a la línea de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				]
			],
			"Summary": "El comando **SET MENU ITEM ICON** permite modificar el icono asociado a la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"SET MENU ITEM MARK": {
			"Syntax": "**SET MENU ITEM MARK** ( *menu* ; *lineamenu* ; *marca* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 por el último elemento añadido"
				],
				[
					"marca",
					"Text",
					"->",
					"Nueva marca de línea de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia de proceso"
				]
			],
			"Summary": "El comando SET MENU ITEM MARK cambia la marca del elemento de menú cuyo número o referencia de menú se pasa en *menu* y cuyo número de línea se pasa en *menuItem* al primer carácter de la cadena pasada en *marca*."
		},
		"SET MENU ITEM METHOD": {
			"Syntax": "**SET MENU ITEM METHOD** ( *menu* ; *lineaMenu* ; *nomMetodo* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido al menú"
				],
				[
					"nomMetodo",
					"Text",
					"->",
					"Nombre del método"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso"
				]
			],
			"Summary": "El comando SET MENU ITEM METHOD puede utilizarse para modificar el método de proyecto 4D asociado a la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"SET MENU ITEM PARAMETER": {
			"Syntax": "**SET MENU ITEM PARAMETER** ( *menu* ; *lineaMenu* ; *param* )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para la última línea añadida al menú"
				],
				[
					"param",
					"Text",
					"->",
					"Cadena a asociar como parámetro"
				]
			],
			"Summary": "El comando SET MENU ITEM PARAMETER permite asociar una cadena de caracteres personalizada con una línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"SET MENU ITEM PROPERTY": {
			"Syntax": "**SET MENU ITEM PROPERTY** ( *menu* ; *lineaMenu* ; *propiedad* ; *valor* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia del menú o número de menú"
				],
				[
					"lineaMenu",
					"Integer",
					"->",
					"Número de línea del menú o -1 para la última línea añadida al menú"
				],
				[
					"propiedad",
					"Text",
					"->",
					"Tipo de propiedad"
				],
				[
					"valor",
					"Text, Number, Boolean",
					"->",
					"Valor de la propiedad"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número del proceso"
				]
			],
			"Summary": "El comando **SET MENU ITEM PROPERTY** permite fijar el *valor* de la propiedad para la línea de menú designada por los parámetros *menu* y *lineaMenu*."
		},
		"SET MENU ITEM SHORTCUT": {
			"Syntax": "**SET MENU ITEM SHORTCUT** ( *menu* ; *lineamenu* ; *tecla* ; *modificadores* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Referencia de menú o número de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para la última línea añadida al menú"
				],
				[
					"tecla",
					"Text, Integer",
					"->",
					"Código del carácter de atajo de teclado o letra del atajo de teclado"
				],
				[
					"modificadores",
					"Integer",
					"->",
					"Modificador(es) a asociar al atajo (se ignora si se pasa el código de tecla)"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				]
			],
			"Summary": "El comando **SET MENU ITEM SHORTCUT** asigna un nuevo acceso directo a un elemento del menú."
		},
		"SET MENU ITEM STYLE": {
			"Syntax": "**SET MENU ITEM STYLE** ( *menu* ; *lineamenu* ; *estiloItem* {; *proceso*} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o Referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido"
				],
				[
					"estiloItem",
					"Integer",
					"->",
					"Nuevo estilo de la línea de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia de proceso"
				]
			],
			"Summary": "El comando SET MENU ITEM STYLE cambia el estilo de la fuente de la línea de menú cuyo número o referencia de menú se pasa en *menu* y cuyo número de elemento se pasa en *menuItem* de acuerdo al estilo de fuente pasado en *itemEstilo*."
		},
		"SET MENU ITEM": {
			"Syntax": "**SET MENU ITEM** ( *menu* ; *lineamenu* ; *textoElem* {; *proceso*}{; *} )",
			"Params": [
				[
					"menu",
					"Integer, Text",
					"->",
					"Número de menú o referencia de menú"
				],
				[
					"lineamenu",
					"Integer",
					"->",
					"Número de línea de menú o -1 para el último elemento añadido"
				],
				[
					"textoElem",
					"Text",
					"->",
					"Nuevo texto de la línea de menú"
				],
				[
					"proceso",
					"Integer",
					"->",
					"Número de referencia del proceso"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: considerar metacaracteres como caracteres estándar"
				]
			],
			"Summary": "El comando SET MENU ITEM cambia el texto de la línea de menú cuyo número o referencia de menú se pasa en *menu* y cuyo número de elemento se pasa en *menuItem*, para el texto que pasó en *itemText*."
		},
		"SET PICTURE FILE NAME": {
			"Syntax": "**SET PICTURE FILE NAME** ( *imagen* ; *nomArchivo* )",
			"Params": [
				[
					"imagen",
					"Picture, Picture",
					"->",
					"Imagen para la cual definir el nombre por defecto"
				],
				[
					"nomArchivo",
					"Text",
					"->",
					"Nombre de la imagen por defecto"
				]
			],
			"Summary": "El comando **SET PICTURE FILE NAME** define o modifica el nombre del archivo por defecto de la imagen pasada como parámetro."
		},
		"SET PICTURE METADATA": {
			"Syntax": "**SET PICTURE METADATA** ( *imagen* ; *nomMeta* ; *ContenidoMeta* {; *nomMeta2* ; *ContenidoMeta2* ; ... ; *nomMetaN* ; *ContenidoMetaN*} )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen cuyos metadatos quiere escribir"
				],
				[
					"nomMeta",
					"Text",
					"->",
					"Nombre o ruta del bloque a escribir"
				],
				[
					"ContenidoMeta",
					"Variable",
					"->",
					"Contenido del metadato"
				]
			],
			"Summary": "El comando SET PICTURE METADATA permite escribir o modificar el contenido de los metadatos (o meta-etiquetas) presentes en *imagen* (campo o una variable imagen 4D), cuando son modificables."
		},
		"SET PICTURE TO LIBRARY": {
			"Syntax": "**SET PICTURE TO LIBRARY** ( *imagen* ; *refImag* ; *nomImag* )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Nueva imagen"
				],
				[
					"refImag",
					"Integer",
					"->",
					"Número de referencia de la imagen en la librería de imágenes"
				],
				[
					"nomImag",
					"Text",
					"->",
					"Nuevo nombre de la imagen"
				]
			],
			"Summary": "El comando SET PICTURE TO LIBRARY crea una nueva imagen o reemplaza una imagen existente en la librería de imágenes."
		},
		"SET PICTURE TO PASTEBOARD": {
			"Syntax": "**SET PICTURE TO PASTEBOARD** ( *imagen* )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen a copiar en el portapapeles"
				]
			],
			"Summary": "SET PICTURE TO PASTEBOARD limpia el portapapeles y coloca una copia de la imagen que usted pasó en *imagen* en el portapapeles."
		},
		"SET PLUGIN ACCESS": {
			"Syntax": "**SET PLUGIN ACCESS** ( *plugIn* ; *grupo* )",
			"Params": [
				[
					"plugIn",
					"Integer",
					"->",
					"Número del plug-in"
				],
				[
					"grupo",
					"Text",
					"->",
					"Nombre del grupo a asociar al plug-in"
				]
			],
			"Summary": "El comando SET PLUGIN ACCESS permite especificar por programación el grupo de usuarios autorizado a utilizar cada plug-in “serializado” instalado en la base."
		},
		"SET PRINT MARKER": {
			"Syntax": "**SET PRINT MARKER** ( *markNum* ; *posicion* {; *} )",
			"Params": [
				[
					"markNum",
					"Integer",
					"->",
					"Número de marcador"
				],
				[
					"posicion",
					"Integer",
					"->",
					"Nueva posición del marcador"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = mover los marcadores siguientes Si se omite = no mover los marcadores siguientes"
				]
			],
			"Summary": "El comando SET PRINT MARKER permite definir la posición de un marcador durante la impresión."
		},
		"SET PRINT OPTION": {
			"Syntax": "**SET PRINT OPTION** ( *opcion* ; *valor1* {; *valor2*} )",
			"Params": [
				[
					"opcion",
					"Integer",
					"->",
					"Número de opción"
				],
				[
					"valor1",
					"Integer, Text",
					"->",
					"Valor 1 de la opción"
				],
				[
					"valor2",
					"Integer, Text",
					"->",
					"Valor 2 de la opción"
				]
			],
			"Summary": "El comando **SET PRINT OPTION** se utiliza para modificar por programación el valor de una opción de impresión."
		},
		"SET PRINT PREVIEW": {
			"Syntax": "**SET PRINT PREVIEW** ( vista previa )",
			"Params": [
				[
					"vista previa",
					"Booleano",
					"->",
					"Previsualización en pantalla (TRUE), o Sin previsualización (FALSE)"
				]
			],
			"Summary": "**SET PRINT PREVIEW** le permite seleccionar o deseleccionar por programación la opción de previsualización en pantalla de la caja de diálogo de impresión."
		},
		"SET PRINTABLE MARGIN": {
			"Syntax": "**SET PRINTABLE MARGIN** ( *izquierda* ; *superior* ; *derecha* ; *inferior* )",
			"Params": [
				[
					"izquierda",
					"Integer",
					"->",
					"Margen izquierda"
				],
				[
					"superior",
					"Integer",
					"->",
					"Margen superior"
				],
				[
					"derecha",
					"Integer",
					"->",
					"Margen derecha"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Margen inferior"
				]
			],
			"Summary": "El comando SET PRINTABLE MARGIN \\#descv\\]permite asignar los valores de varias márgenes de impresión utilizando los comandos [Print form, PRINT SELECTION y PRINT RECORD."
		},
		"SET PROCESS VARIABLE": {
			"Syntax": "**SET PROCESS VARIABLE** ( *proceso* ; *dstVar* ; *expr* {; *dstVar2* ; *expr2* ; ... ; *dstVarN* ; *exprN*} )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso de destino"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"Variable de destino"
				],
				[
					"expr",
					"Variable",
					"->",
					"Expresión fuente (o variable fuente)"
				]
			],
			"Summary": "El comando SET PROCESS VARIABLE escribe las variables proceso *dstVar* (*dstVar2*, etc.) del proceso de destino cuyo número se pasa en *proceso* utilizando los valores pasados en *expr1* (*expr2*, etc.)."
		},
		"SET QUERY AND LOCK": {
			"Syntax": "**SET QUERY AND LOCK** ( *bloq* )",
			"Params": [
				[
					"bloq",
					"Boolean",
					"->",
					"True = bloquear los registros encontrados por las búsquedas False = No bloquear registros"
				]
			],
			"Summary": "El comando SET QUERY AND LOCK permite solicitar el bloqueo automático de los registros encontrados por todas las búsquedas que siguen el llamado de este comando en la transacción actual."
		},
		"SET QUERY DESTINATION": {
			"Syntax": "**SET QUERY DESTINATION** ( *destinoTipo* {; *destinoObjeto* {; *destPunt*}} )",
			"Params": [
				[
					"destinoTipo",
					"Integer",
					"->",
					"0 = selección actual, 1 = conjunto, 2 = selección temporal, 3 = variable"
				],
				[
					"destinoObjeto",
					"Text, Variable",
					"->",
					"Nombre del conjunto o Nombre de la selección temporal o variable"
				],
				[
					"destPunt",
					"Pointer",
					"->",
					"Puntero a la variable local si destinoTipo=3"
				]
			],
			"Summary": "El comando **SET QUERY DESTINATION** permite indicar a 4D donde ubicar el resultado de todas las búsquedas posteriores a la llamada a este comando en el proceso actual."
		},
		"SET QUERY LIMIT": {
			"Syntax": "**SET QUERY LIMIT** ( *limite* )",
			"Params": [
				[
					"limite",
					"Integer",
					"->",
					"Número límite de registros ó 0 para ilimitado"
				]
			],
			"Summary": "SET QUERY LIMIT permite pedirle a 4D detener todas la búsquedas posteriores en el proceso actual tan pronto encuentre el número de registros definido en *limite*."
		},
		"SET REAL COMPARISON LEVEL": {
			"Syntax": "**SET REAL COMPARISON LEVEL** ( *epsilon* )",
			"Params": [
				[
					"epsilon",
					"Real",
					"->",
					"Valor epsilon para las comparaciones de igualdad de los reales"
				]
			],
			"Summary": "El comando **SET REAL COMPARISON LEVEL** define el valor epsilon utilizado por 4D para hacer comparaciones de igualdad de valores y expresiones de tipo real."
		},
		"SET RECENT FONTS": {
			"Syntax": "**SET RECENT FONTS** ( *arrayFuentes* )",
			"Params": [
				[
					"arrayFuentes",
					"Text array",
					"->",
					"Array de nombres de fuentes"
				]
			],
			"Summary": "El comando **SET RECENT FONTS** modifica la lista de fuentes recientes que aparecen en el menú contextual de las \"fuentes recientes\" ."
		},
		"SET TABLE CACHE PRIORITY": {
			"Syntax": "**SET TABLE CACHE PRIORITY** ( *tabla* ; *prioridad* )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla cuyo valor de prioridad de datos escalares tiene que ser definido para la sesión"
				],
				[
					"prioridad",
					"Integer",
					"->",
					"Valor de prioridad de caché para valores escalares en la tabla"
				]
			],
			"Summary": "Este comando está reservado para necesidades específicas."
		},
		"SET TABLE TITLES": {
			"Syntax": "**SET TABLE TITLES** {( *titulosTablas* ; *numTablas* {; *})}",
			"Params": [
				[
					"titulosTablas",
					"Text array",
					"->",
					"Nombres de las tablas tal como deben aparecer"
				],
				[
					"numTablas",
					"Integer array",
					"->",
					"Números de las tablas"
				],
				[
					"*",
					"Operador",
					"->",
					"Utilizar los nombres personalizados en el editor de fórmulas"
				]
			],
			"Summary": "SET TABLE TITLES permite ocultar, renombrar y reordenar las tablas de su base cuando aparecen en las cajas de diálogo estándar de 4D en el entorno Aplicación(es decir, cuando el modo de inicio es **Aplicación**, o después de seleccionar **Probar aplicación** en el menú **Ejecutar**)."
		},
		"SET TEXT TO PASTEBOARD": {
			"Syntax": "**SET TEXT TO PASTEBOARD** ( *texto* )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto a copiar en el portapapeles"
				]
			],
			"Summary": "SET TEXT TO PASTEBOARD limpia el portapapeles y luego coloca una copia del texto en *texto* en el portapapeles."
		},
		"SET TIMEOUT": {
			"Syntax": "**SET TIMEOUT** ( *segundos* )",
			"Params": [
				[
					"segundos",
					"Integer",
					"->",
					"Número de segundos hasta el timeout"
				]
			],
			"Summary": "El comando SET TIMEOUT especifica cuánto tiempo tiene para la ejecución un comando de puerto serial."
		},
		"SET TIMER": {
			"Syntax": "**SET TIMER** ( *ticCont* )",
			"Params": [
				[
					"ticCont",
					"Integer",
					"->",
					"Número de tics"
				]
			],
			"Summary": "El comando SET TIMER permite activar el evento de formulario On Timer y fijar, para el proceso y formulario actual, el número de tics (1 tic = 1/60 de segundo) entre cada evento de formulario On Timer."
		},
		"SET UPDATE FOLDER": {
			"Syntax": "**SET UPDATE FOLDER** ( *rutaCarpeta* {; *erroresDiscretos*} )",
			"Params": [
				[
					"rutaCarpeta",
					"Text",
					"->",
					"Ruta de acceso de la carpeta (paquete bajo macOS) que contiene la aplicación actualizada"
				],
				[
					"erroresDiscretos",
					"Boolean",
					"->",
					"False (por defecto) = mostrar mensajes de error, <br/>True = no reportarlos"
				]
			],
			"Summary": "El comando **SET UPDATE FOLDER** especifica la carpeta que contiene la actualización de la aplicación 4D fusionada actual."
		},
		"SET USER ALIAS": {
			"Syntax": "**SET USER ALIAS** ( *alias* )",
			"Params": [
				[
					"alias",
					"Text",
					"->",
					"Nombre de usuario alternativo para la cuenta de usuario 4D o \"\" para reiniciar"
				]
			],
			"Summary": "El comando **SET USER ALIAS** define un nombre personalizado alternativo para usar en lugar del nombre de la cuenta de usuario 4D actual para la sesión actual."
		},
		"Set user properties": {
			"Syntax": "**Set user properties** ( *refUsuario* ; *nombre* ; *inicio* ; *contraseña* ; *nbLogin* ; *ultimoLogin* {; *membrecias* {; *grupoPropietario*}} ) : Integer",
			"Params": [
				[
					"refUsuario",
					"Integer",
					"->",
					"Número de referencia único de cuenta de usuario, -1 para añadir un usuario"
				],
				[
					"<-",
					"Número de referencia único de la cuenta de usuario añadida(si la hay)"
				],
				[
					"nombre",
					"Text",
					"->",
					"Nuevo nombre de usuario"
				],
				[
					"inicio",
					"Text",
					"->",
					"Nombre del nuevo método de inicio"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Nueva contraseña (encriptada) o * para no modificar la contraseña"
				],
				[
					"nbLogin",
					"Integer",
					"->",
					"Nuevo número de usos de la base"
				],
				[
					"ultimoLogin",
					"Date",
					"->",
					"Nueva fecha de la última utilización de la base"
				],
				[
					"membrecias",
					"Integer array",
					"->",
					"Números de referencia de los grupos a los que pertenece el usuario"
				],
				[
					"grupoPropietario",
					"Integer",
					"->",
					"Número de referencia del grupo propietario del usuario"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia único del nuevo usuario"
				]
			],
			"Summary": "Set user properties permite modificar y actualizar las propiedades de una cuenta activa de usuario existente cuyo número de referencia se pasa en el parámetro *refUsuario* o para añadir un nuevo usuario."
		},
		"SET WINDOW RECT": {
			"Syntax": "**SET WINDOW RECT** ( *izquierda* ; *superior* ; *derecha* ; *inferior* {; *ventana*}{; *} )",
			"Params": [
				[
					"izquierda",
					"Integer",
					"->",
					"Coordenada global izquierda del interior de la ventana"
				],
				[
					"superior",
					"Integer",
					"->",
					"Coordenada global superior del interior de la ventana"
				],
				[
					"derecha",
					"Integer",
					"->",
					"Coordenada global derecha del interior de la ventana"
				],
				[
					"inferior",
					"Integer",
					"->",
					"Coordenada global inferior del interior de la ventana"
				],
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o ventana del primer plano del proceso si se omite este parámetro"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se omite (por defecto) = cambiar ventana al fondo<br/>Si se pasa = no cambiar el nivel de la ventana"
				]
			],
			"Summary": "El comando **SET WINDOW RECT** cambia las coordenadas globales de la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"SET WINDOW TITLE": {
			"Syntax": "**SET WINDOW TITLE** ( *titulo* {; *ventana*} )",
			"Params": [
				[
					"titulo",
					"Text",
					"->",
					"Título de la ventana"
				],
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de ventana o Ventana del primer plano del proceso actual si se omite el parámetro"
				]
			],
			"Summary": "El comando SET WINDOW TITLE cambia el título de la ventana cuyo número de referencia se pasa en *ventana* para el texto pasado en *titulo* (longitud máxima 80 caracteres)."
		},
		"Shift down": {
			"Syntax": "**Shift down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Mayús"
				]
			],
			"Summary": "Shift down devuelve TRUE si la tecla Mayús está presionada."
		},
		"SHOW MENU BAR": {
			"Syntax": "**SHOW MENU BAR**",
			"Params": [],
			"Summary": "El comando SHOW MENU BAR hace visible la barra de menús."
		},
		"SHOW ON DISK": {
			"Syntax": "**SHOW ON DISK** ( *nombreRuta* {; *} )",
			"Params": [
				[
					"nombreRuta",
					"Text",
					"->",
					"Ruta de acceso del elemento a mostrar"
				],
				[
					"*",
					"Operador",
					"->",
					"Si el elemento es una carpeta, mostrar su contenido"
				]
			],
			"Summary": "El comando SHOW ON DISK muestra en una ventana estándar del sistema operativo el archivo o la carpeta en la cual la ruta de acceso se pasa en el parámetro *nombreRuta."
		},
		"SHOW PROCESS": {
			"Syntax": "**SHOW PROCESS** ( *proceso* )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso del proceso a mostrar"
				]
			],
			"Summary": "SHOW PROCESS muestra todas las ventanas que pertenecen a *proceso*."
		},
		"SHOW TOOL BAR": {
			"Syntax": "**SHOW TOOL BAR**",
			"Params": [],
			"Summary": "El comando **SHOW TOOL BAR** maneja la visualización de las barras de herramientas personalizadas creadas por el comando Open form window para el proceso actual."
		},
		"SHOW WINDOW": {
			"Syntax": "**SHOW WINDOW** {( *ventana* )}",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o Ventana del primer plano del proceso actual, si se omite"
				]
			],
			"Summary": "El comando SHOW WINDOW permite mostrar la ventana cuyo número se pasó en *ventana*."
		},
		"Sin": {
			"Syntax": "**Sin** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número, en radianes, cuyo seno se devuelve"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Seno del número"
				]
			],
			"Summary": "Sin devuelve el seno del *número*, donde *número* se expresa en radianes."
		},
		"Size of array": {
			"Syntax": "**Size of array** ( *array* ) : Integer",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Array cuyo tamaño se devuelve"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Devuelve el número de elementos en el array"
				]
			],
			"Summary": "El comando Size of Array devuelve el número de elementos de *array*."
		},
		"SOAP DECLARATION": {
			"Syntax": "**SOAP DECLARATION** ( *variable* ; *tipo* ; entrada_salida {; *alias*} )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable que referencia un argumento SOAP entrante o saliente"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo 4D al cual apunta el argumento"
				],
				[
					"entrada_salida",
					"Integer",
					"->",
					"1 = Entrada SOAP, 2 = Salida SOAP"
				],
				[
					"alias",
					"Text",
					"->",
					"Nombre publicado para este argumento durante los intercambios SOAP"
				]
			],
			"Summary": "El comando SOAP DECLARATION permite declarar explícitamente el tipo de los parámetros utilizados en un método 4D publicado como servicio web."
		},
		"SOAP Get info": {
			"Syntax": "**SOAP get info** ( *numInfo* ) : Text",
			"Params": [
				[
					"numInfo",
					"Integer",
					"->",
					"Número de tipo de información SOAP a obtener"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Información SOAP"
				]
			],
			"Summary": "El comando **SOAP get info** permite recuperar bajo la forma de cadena de caracteres diferentes tipos de información relacionada con una petición SOAP."
		},
		"SOAP REJECT NEW REQUESTS": {
			"Syntax": "**SOAP REJECT NEW REQUESTS** ( *estadoRechazar* )",
			"Params": [
				[
					"estadoRechazar",
					"Boolean",
					"->",
					"True si se rechazan las nuevas solicitudes, de lo contrario false"
				]
			],
			"Summary": "El comando **SOAP REJECT NEW REQUESTS** especifica si el servidor de servicios web acepta o no nuevas solicitudes SOAP."
		},
		"SOAP Request": {
			"Syntax": "**SOAP request**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si la petición es SOAP; de lo contrario, False"
				]
			],
			"Summary": "El comando **SOAP request** devuelve True si el código en ejecución hace parte de una petición SOAP."
		},
		"SOAP SEND FAULT": {
			"Syntax": "**SOAP SEND FAULT** ( *tipoError* ; *descripcion* )",
			"Params": [
				[
					"tipoError",
					"Integer",
					"->",
					"1 = Error cliente, 2 = Error servidor"
				],
				[
					"descripcion",
					"Text",
					"->",
					"Descripción del error a enviar al cliente SOAP"
				]
			],
			"Summary": "El comando **SOAP SEND FAULT** devuelve un error a un cliente SOAP indicando el origen del error: cliente o servidor."
		},
		"SORT ARRAY": {
			"Syntax": "**SORT ARRAY** ( *array* {; *array2* ; ... ; *arrayN*}{; > o <} )",
			"Params": [
				[
					"array",
					"Array",
					"->",
					"Arrays a ordenar"
				],
				[
					"> o <",
					"Operador",
					"->",
					"\">\" ordenar en orden ascendente, u \"<\" ordenar en orden descendente, u orden ascendente si se omite"
				]
			],
			"Summary": "El comando SORT ARRAY ordena uno o más arrays en orden ascendente o descendente."
		},
		"SORT LIST": {
			"Syntax": "**SORT LIST** ( *lista* {; > ou <} )",
			"Params": [
				[
					"lista",
					"Integer",
					"->",
					"Número de referencia de lista"
				],
				[
					"> ou <",
					"Operador",
					"->",
					"Criterio de ordenación: > ordenar en orden ascendente, u < ordenar en orden descendente"
				]
			],
			"Summary": "El comando SORT LIST ordena la lista cuyo número de referencia se pasa en *lista*."
		},
		"SPELL ADD TO USER DICTIONARY": {
			"Syntax": "**SPELL ADD TO USER DICTIONARY** ( *palabras* )",
			"Params": [
				[
					"palabras",
					"Text, Text array",
					"->",
					"Palabra o lista de palabras para agregar al diccionario del usuario"
				]
			],
			"Summary": "El comando **SPELL ADD TO USER DICTIONARY** añade una o más palabras al diccionario usuario actual."
		},
		"SPELL CHECK TEXT": {
			"Syntax": "**SPELL CHECK TEXT** ( *texto* ; *posErr* ; *longErr* ; *posVerif* ; *arrSug* )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto a verificar"
				],
				[
					"posErr",
					"Integer",
					"<-",
					"Posición del primer carácter de la palabra desconocida"
				],
				[
					"longErr",
					"Integer",
					"<-",
					"Longitud de la palabra desconocida"
				],
				[
					"posVerif",
					"Integer",
					"->",
					"Posición de inicio de la verificación"
				],
				[
					"arrSug",
					"Text array",
					"<-",
					"Lista de sugerencias"
				]
			],
			"Summary": "El comando **SPELL CHECK TEXT** verifica el contenido del parámetro *texto* a partir del carácter *posVerif* y devuelve la posición de la primera palabra desconocida encontrada (si la hay)."
		},
		"SPELL CHECKING": {
			"Syntax": "**SPELL CHECKING**",
			"Params": [],
			"Summary": "El comando **SPELL CHECKING** activa la revisión ortográfica del campo o variable que tiene el foco en el formulario en pantalla."
		},
		"SPELL Get current dictionary": {
			"Syntax": "**SPELL Get current dictionary**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"ID del diccionario utilizado para la corrección ortográfica"
				]
			],
			"Summary": "El comando **SPELL Get current dictionary** devuelve el número de ID del diccionario que está siendo utilizado."
		},
		"SPELL GET DICTIONARY LIST": {
			"Syntax": "**SPELL GET DICTIONARY LIST** ( *lengID* ; *lengArchivos* ; *lengNoms* )",
			"Params": [
				[
					"lengID",
					"Integer array",
					"<-",
					"IDs únicos de los lenguajes"
				],
				[
					"lengArchivos",
					"Text array",
					"<-",
					"Nombres de los archivos de lenguaje instalados"
				],
				[
					"lengNoms",
					"Text array",
					"<-",
					"Nombres locales de los lenguajes"
				]
			],
			"Summary": "El comando **SPELL GET DICTIONARY LIST** devuelve en los arrays *lengID*, *lengArchivos* y *lengNoms*, los IDs, los nombres de archivos y los nombres de lenguajes correspondientes a los archivos de diccionarios Hunspell instalados en el equipo."
		},
		"SPELL SET CURRENT DICTIONARY": {
			"Syntax": "**SPELL SET CURRENT DICTIONARY** ( *diccionario* )",
			"Params": [
				[
					"diccionario",
					"Integer, Text",
					"->",
					"ID, Nombre o Código de lenguaje del diccionario a utilizar para la corrección ortográficaSi se omite = restablecer el diccionario por defecto"
				]
			],
			"Summary": "El comando **SPELL SET CURRENT DICTIONARY** reemplaza el diccionario actual por el especificado en el parámetro *diccionario*."
		},
		"Split string": {
			"Syntax": "**Split string** ( *cadenaASeparar* ; *separador* {; *opciones*} ) : Collection",
			"Params": [
				[
					"cadenaASeparar",
					"Text",
					"->",
					"Valor de la cadena"
				],
				[
					"separador",
					"Text",
					"->",
					"Cadena en la que cadenaASeparar se divide. Si cadena vacía (\"\"), cada carácter de cadenaASeparar es una subcadena"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Opciones relativas a las cadenas vacías y espacios"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de subcadenas"
				]
			],
			"Summary": "El comando **Split string** devuelve una colección de cadenas, creada al dividir *cadenaAseparar* en subcadenas en los límites especificados por el parámetro *separador*."
		},
		"SQL CANCEL LOAD": {
			"Syntax": "**SQL CANCEL LOAD**",
			"Params": [],
			"Summary": "El comando SQL CANCEL LOAD finaliza la solicitud SELECT actual e inicializa los parámetros."
		},
		"SQL End selection": {
			"Syntax": "**SQL End selection**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"El resultado establece los límites alcanzados"
				]
			],
			"Summary": "El comando SQL End selection se utiliza para determinar si los límites del resultado obtenido se han alcanzado."
		},
		"SQL EXECUTE SCRIPT": {
			"Syntax": "**SQL EXECUTE SCRIPT** ( *rutaScript* ; *accionError* {; *nomAtrib* ; *valAtrib*} {; *nomAtrib2* ; *valAtrib2* ; ... ; *nomAtribN* ; *valAtribN*} )",
			"Params": [
				[
					"rutaScript",
					"Text",
					"->",
					"Ruta de acceso completa del archivo que contiene el script SQL a ejecutar"
				],
				[
					"accionError",
					"Integer",
					"->",
					"Acción a efectuar en caso de error durante la ejecución del script"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Nombre del atributo a utilizar"
				],
				[
					"valAtrib",
					"Text",
					"->",
					"Valor del atributo"
				]
			],
			"Summary": "El comando SQL EXECUTE SCRIPT permite ejecutar una serie de instrucciones SQL ubicadas en el archivo de script designado por *rutaScript*."
		},
		"SQL EXECUTE": {
			"Syntax": "**SQL EXECUTE** ( *instruccionSQL* {; *objAsoc*}{; *objAsoc2* ; ... ; *objAsocN*} )",
			"Params": [
				[
					"instruccionSQL",
					"Text",
					"->",
					"Comando SQL a ejecutar"
				],
				[
					"objAsoc",
					"Variable, Field",
					"<-",
					"Recibe el resultado (si es necesario)"
				]
			],
			"Summary": "El comando SQL EXECUTE se utiliza para ejecutar un comando SQL y asociar el resultado a objetos 4D (arrays, variables o campos)."
		},
		"SQL EXPORT DATABASE": {
			"Syntax": "**SQL EXPORT DATABASE** ( *rutaCarpeta* {; *numArchivos* {; *tamLimiteArchivos* {; *tamLimiteCampos*}}} )",
			"Params": [
				[
					"rutaCarpeta",
					"Text",
					"->",
					"Ruta de acceso de la carpeta de exportación o \"\" para mostrar una caja de diálogo de selección de carpeta"
				],
				[
					"numArchivos",
					"Integer",
					"->",
					"Número máximo de archivos por carpeta"
				],
				[
					"tamLimiteArchivos",
					"Integer",
					"->",
					"Valor límite de tamaño de los archivos de exportación (en KB)"
				],
				[
					"tamLimiteCampos",
					"Integer",
					"->",
					"Limite de tamaño (en bytes) debajo del cual el contenido de un campo Texto, BLOB o Imagen se integrará al archivo principal"
				]
			],
			"Summary": "El comando SQL EXPORT DATABASE exporta al formato SQL todos los registros de todas las tablas de la base."
		},
		"SQL EXPORT SELECTION": {
			"Syntax": "**SQL EXPORT SELECTION** ( *tabla* ; *rutaCarpeta* {; *numArchivos* {; *tamLimiteArchivos* {; *tamLimiteCampos*}}} )",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual exportar la selección"
				],
				[
					"rutaCarpeta",
					"Text",
					"->",
					"Ruta de acceso de la carpeta de exportación o \"\" para mostrar una caja de diálogo de selección de carpeta"
				],
				[
					"numArchivos",
					"Integer",
					"->",
					"Número máximo de archivos por carpeta"
				],
				[
					"tamLimiteArchivos",
					"Integer",
					"->",
					"Tamaño máximo del archivo Export.sql (en KB)"
				],
				[
					"tamLimiteCampos",
					"Integer",
					"->",
					"Límite de tamaño debajo del cual el contenido de un campo Texto, BLOB o imagen se integrará al archivo principal (en bytes)"
				]
			],
			"Summary": "El comando SQL EXPORT SELECTION exporta al formato SQL los registros de la selección actual de la tabla 4D designada por el parámetro *Tabla*."
		},
		"SQL Get current data source": {
			"Syntax": "**SQL Get current data source**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la fuente de datos que está siendo utilizada"
				]
			],
			"Summary": "El comando *Get current data source* devuelve el nombre de la fuente de datos actual de la aplicación."
		},
		"SQL GET DATA SOURCE LIST": {
			"Syntax": "**SQL GET DATA SOURCE LIST** ( *tipoFuente* ; *arrayNomsFuentes* ; *arraydrivers* )",
			"Params": [
				[
					"tipoFuente",
					"Integer",
					"->",
					"Tipo de fuente: usuario o sistema"
				],
				[
					"arrayNomsFuentes",
					"Text array",
					"<-",
					"Array de nombres de fuentes de datos"
				],
				[
					"arraydrivers",
					"Text array",
					"<-",
					"Array de drivers de las fuentes"
				]
			],
			"Summary": "El comando *GET DATA SOURCE LIST* devuelve en los arrays *arrayNomsFuentes* y *arrayDrivers*, los nombres y drivers de las fuentes de datos de tipo *tipoFuente* definidas en el administrador ODBC del sistema operativo."
		},
		"SQL GET LAST ERROR": {
			"Syntax": "**SQL GET LAST ERROR** ( *errCode* ; *errText* ; *errODBC* ; *errSQLServer* )",
			"Params": [
				[
					"errCode",
					"Integer",
					"<-",
					"Código del error"
				],
				[
					"errText",
					"Text",
					"<-",
					"Texto del error"
				],
				[
					"errODBC",
					"Text",
					"<-",
					"Código del error ODBC"
				],
				[
					"errSQLServer",
					"Integer",
					"<-",
					"Código del error nativo servidor SQL"
				]
			],
			"Summary": "El comando SQL GET LAST ERROR devuelve la información relacionada con el último error encontrado durante la ejecución de un comando ODBC."
		},
		"SQL GET OPTION": {
			"Syntax": "**SQL GET OPTION** ( *opcion* ; *valor* )",
			"Params": [
				[
					"opcion",
					"Integer",
					"->",
					"Número de opción"
				],
				[
					"valor",
					"Integer, Text",
					"<-",
					"Valor de la opción"
				]
			],
			"Summary": "El comando SQL GET OPTION devuelve el *valor* actual de la opción pasada en el parámetro *opcion*."
		},
		"SQL LOAD RECORD": {
			"Syntax": "**SQL LOAD RECORD** {( *numReg* )}",
			"Params": [
				[
					"numReg",
					"Integer",
					"->",
					"Número de registros a cargar"
				]
			],
			"Summary": "El comando SQL LOAD RECORD recupera en 4D uno o más registros de la fuente de datos abierta en la conexión actual."
		},
		"SQL LOGIN": {
			"Syntax": "**SQL LOGIN** {( *entradaDatos* ; *nomUsuario* ; *contraseña* ; * )}",
			"Params": [
				[
					"entradaDatos",
					"Text",
					"->",
					"Nombre de publicación de base 4D o <br/>Dirección IP de la base remota o <br/>Nombre de la fuente de datos en el administrador ODBC o<br/>\"\" para mostrar el diálogo de selección"
				],
				[
					"nomUsuario",
					"Text",
					"->",
					"Nombre del usuario registrado en la fuente de datos"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Contraseña del usuario registrado en la fuente de datos"
				],
				[
					"*",
					"Operador",
					"->",
					"Aplicado a Begin SQL/End SQL Si se omite: no aplicar (base de datos local); si se pasa: aplicar"
				]
			],
			"Summary": "El comando **SQL LOGIN** permite conectarse a una fuente de datos SQL especificada en el parámetro *entradaDatos* y designa el objetivo de las búsquedas SQL ejecutadas posteriormente en el proceso actual: \n\n* vía el comando SQL EXECUTE,\n* vía el código ubicado dentro de las etiquetas Begin SQL / End SQL (si se pasa el parámetro *\\**)."
		},
		"SQL LOGOUT": {
			"Syntax": "**SQL LOGOUT**",
			"Params": [],
			"Summary": "El comando SQL LOGOUT cierra la conexión con una fuente ODBC abierta en el proceso actual (si aplica)."
		},
		"SQL SET OPTION": {
			"Syntax": "**SQL SET OPTION** ( *opción* ; *valor* )",
			"Params": [
				[
					"opción",
					"Integer",
					"->",
					"Número de opción a definir"
				],
				[
					"valor",
					"Integer, Text",
					"->",
					"Nuevo valor de opción"
				]
			],
			"Summary": "El comando **SQL SET OPTION** se utiliza para modificar el *valor* de la opción pasada en *opcion*."
		},
		"SQL SET PARAMETER": {
			"Syntax": "**SQL SET PARAMETER** ( *objeto* ; *tipoParam* )",
			"Params": [
				[
					"objeto",
					"Object",
					"->",
					"Objeto 4D a utilizar (variable, array o campo)"
				],
				[
					"tipoParam",
					"Integer",
					"->",
					"Tipo de parámetro"
				]
			],
			"Summary": "El comando SQL SET PARAMETER permite el uso del valor de una variable, array o campo 4D en las peticiones SQL."
		},
		"Square root": {
			"Syntax": "**Square root** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número al que se le va a calcular la raíz cuadrada"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Raíz cuadrada del número"
				]
			],
			"Summary": "Square root devuelve la raíz cuadrada de *número*."
		},
		"ST COMPUTE EXPRESSIONS": {
			"Syntax": "**ST COMPUTE EXPRESSIONS** ( {* ;} *objeto* {; *inicioSel* {; *finSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es el nombre de un objeto (cadena). Si se omite es un campo o una variable."
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				]
			],
			"Summary": "El comando **ST COMPUTE EXPRESSIONS** actualiza las expresiones dinámicas 4D encontradas en un campo o variable ya sea 4D Write Pro o multiestilo designado por el parámetro *objeto*."
		},
		"ST FREEZE EXPRESSIONS": {
			"Syntax": "**ST FREEZE EXPRESSIONS** ( {* ;} *objeto* {; *inicioSel* {; *finSel*}}{; *} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = actualizar las expresiones antes de congelarlas"
				]
			],
			"Summary": "El comando **ST FREEZE EXPRESSIONS** \"congela\" el contenido de las expresiones encontradas en un campo o variable ya sea 4D Write Pro o multiestilo designado por el parámetro *objeto*."
		},
		"ST GET ATTRIBUTES": {
			"Syntax": "**ST GET ATTRIBUTES** ( {* ;} *objeto* ; *inicioSel* ; *finSel* ; *nomAtrib* ; *valorAtrib* {; *nomAtrib2* ; *valorAtrib2* ; ... ; *nomAtribN* ; *valorAtribN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (se se especifica *) o Variable o campo (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección de texto"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección de texto"
				],
				[
					"nomAtrib",
					"Integer",
					"->",
					"Atributo a leer"
				],
				[
					"valorAtrib",
					"Variable",
					"<-",
					"Valor actual del atributo"
				]
			],
			"Summary": "El comando ST GET ATTRIBUTES se utiliza para recuperar el valor actual de un atributo de estilo en una selección de texto del objeto de formulario designado por *objeto*."
		},
		"ST Get content type": {
			"Syntax": "**ST Get content type** ( {* ;} *object* {; *inicioSel* {; *finSel* {; *inicioBloq* {; *finBloq*}}}} ) : Integer",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"object",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				],
				[
					"inicioBloq",
					"Integer",
					"<-",
					"Inicio de posición del primer tipo de la selección"
				],
				[
					"finBloq",
					"Integer",
					"<-",
					"Fin de posición del primer tipo de la selección"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de contenido"
				]
			],
			"Summary": "El comando **ST Get content type** devuelve el tipo de contenido encontrado en el campo o la variable de texto multiestilo designada por el parámetro *objeto* ."
		},
		"ST Get expression": {
			"Syntax": "**ST Get expression** ( {* ;} *objeto* {; *inicioSel* {; *finSel*}} )  : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Etiqueta de la expresión"
				]
			],
			"Summary": "El comando **ST Get expression** devuelve la primera expresión que se encuentra en la selección actual del campo o de la variable de texto con estilo designada por el parámetro *objeto*."
		},
		"ST GET OPTIONS": {
			"Syntax": "**ST GET OPTIONS** ( {* ;} *objeto* ; *opcion* ; *valor* {; *opcion2* ; *valor2* ; ... ; *opcionN* ; *valorN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"opcion",
					"Integer",
					"->",
					"Opción a leer"
				],
				[
					"valor",
					"Integer",
					"<-",
					"Valor actual de la opción"
				]
			],
			"Summary": "El comando **ST GET OPTIONS** obtiene el valor actual de una o varias opciones de funcionamiento del campo o de la variable de texto con estilo designada por el parámetro *objeto*."
		},
		"ST Get plain text": {
			"Syntax": "**ST Get plain text** ( {* ;} *objeto* {; *refMode*} ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo."
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"refMode",
					"Integer",
					"->",
					"Modo para el manejo de las referencias presentes en el texto"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto sin etiquetas"
				]
			],
			"Summary": "El comando ST Get plain textremueve las etiquetas de estilo de la variable o campo de texto designado por los parámetros *\\** y *objeto* y devuelve el texto plano."
		},
		"ST Get text": {
			"Syntax": "**ST Get text** ( {* ;} *objeto* {; *inicioSel* {; *finSel*}} )  : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o campo o variable texto (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto incluyendo las etiquetas de estilo"
				]
			],
			"Summary": "El comando ST Get text devuelve el texto con estilo encontrado en el campo o variable de texto designado por el parámetro *objeto*."
		},
		"ST GET URL": {
			"Syntax": "**ST GET URL** ( {* ;} *objeto* ; *textoURL* ; *direccionURL* {; *inicioSel* {; *finSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"textoURL",
					"Text",
					"<-",
					"Texto visible de la URL"
				],
				[
					"direccionURL",
					"Text",
					"<-",
					"Dirección de la URL"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				]
			],
			"Summary": "El comando **ST GET URL** devuelve la etiqueta y la dirección de la primera URL detectada en el campo o la variable de texto multiestilo designado por el parámetro *objeto*."
		},
		"ST INSERT EXPRESSION": {
			"Syntax": "**ST INSERT EXPRESSION** ( {* ;} *objeto* ; *expresion* {; *inicioSel* {; *finSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o variable"
				],
				[
					"objeto",
					"Object",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"expresion",
					"Text",
					"->",
					"Expresión y (opcional) formato a insertar"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				]
			],
			"Summary": "El comando **ST INSERT EXPRESSION** inserta una referencia a la expresión en el campo o la variable de texto multiestilo designada por el parámetro *objeto*."
		},
		"ST INSERT URL": {
			"Syntax": "**ST INSERT URL** ( {* ;} *objeto* ; *textoURL* ; *direccionURL* {; *inicioSel* {; *finSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o <br/>Campo o variable (si se omite *)"
				],
				[
					"textoURL",
					"Text",
					"->",
					"Texto visible del URL"
				],
				[
					"direccionURL",
					"Text",
					"->",
					"Dirección de la URL"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				]
			],
			"Summary": "El comando **ST INSERT URL** inserta un enlace URL en el campo o la variable de texto con estilo designada por el parámetro *objeto* ."
		},
		"ST SET ATTRIBUTES": {
			"Syntax": "**ST SET ATTRIBUTES** ( {* ;} *objeto* ; *inicioSel* ; *finSel* ; *nomAtrib* ; *valorAtrib* {; *nomAtrib2* ; *valorAtrib2* ; ... ; *nomAtribN* ; *valorAtribN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *), o Variable o campo Texto (si se omite *)"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la nueva selección de texto"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la nueva selección de texto"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Atributo a definir"
				],
				[
					"valorAtrib",
					"Text, Integer",
					"->",
					"Nuevo valor del atributo"
				]
			],
			"Summary": "El comando ST SET ATTRIBUTES permite modificar uno o más atributos de estilo en el(los) objeto(s) de formulario designado(s) por *objeto*."
		},
		"ST SET OPTIONS": {
			"Syntax": "**ST SET OPTIONS** ( {* ;} *objeto* ; *opcion* ; *valor* {; *opcion2* ; *valor2* ; ... ; *opcionN* ; *valorN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena)<br/>Si se omite, objeto es un campo o una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o<br/>Campo o variable (si se omite *)"
				],
				[
					"opcion",
					"Integer",
					"->",
					"Opción a definir"
				],
				[
					"valor",
					"Integer",
					"->",
					"Nuevo valor de la opción"
				]
			],
			"Summary": "El comando **ST SET OPTIONS** modifica una o varias opciones de funcionamiento del campo o de la variable de texto con estilo designada por el parámetro *objeto* ."
		},
		"ST SET PLAIN TEXT": {
			"Syntax": "**ST SET PLAIN TEXT** ( {* ;} *objeto* ; *nuevTexto* {; *inicioSel* {; *finSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena). Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable o campo (si se omite *)"
				],
				[
					"nuevText",
					"Text",
					"->",
					"Texto a insertar"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				]
			],
			"Summary": "El comando ST SET PLAIN TEXT inserta el texto pasado en el parámetro *nuevTexto* en el campo o la variable de texto con estilo designado por el parámetro *objeto* ."
		},
		"ST SET TEXT": {
			"Syntax": "**ST SET TEXT** ( {* ;} *objeto* ; *nuevTexto* {; *inicioSel* {; *finSel*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable o un campo"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable o campo Texto (si se omite *)"
				],
				[
					"nuevText",
					"Text",
					"->",
					"Texto a insertar"
				],
				[
					"inicioSel",
					"Integer",
					"->",
					"Inicio de la selección"
				],
				[
					"finSel",
					"Integer",
					"->",
					"Fin de la selección"
				]
			],
			"Summary": "El comando ST SET TEXT inserta el texto pasado en el parámetro *nuevText* en el campo o variable de texto con estilo designado por el parámetro *objeto*."
		},
		"START MONITORING ACTIVITY": {
			"Syntax": "**START MONITORING ACTIVITY** ( *duracion* {; *fuente*} )",
			"Params": [
				[
					"duracion",
					"Real",
					"->",
					"Período de tiempo (en segundos) antes de que comience el registro"
				],
				[
					"fuente",
					"Integer",
					"->",
					"Origen de una operación"
				]
			],
			"Summary": "El comando **START MONITORING ACTIVITY** registra las operaciones que excedan una *duracion* especificada en la memoria."
		},
		"START SQL SERVER": {
			"Syntax": "**START SQL SERVER**",
			"Params": [],
			"Summary": "El comando START SQL SERVER lanza el servidor SQL integrado de la aplicación 4D en la que se ejecuta."
		},
		"START TRANSACTION": {
			"Syntax": "**START TRANSACTION**",
			"Params": [],
			"Summary": "START TRANSACTION inicia una transacción en el proceso actual."
		},
		"Std deviation": {
			"Syntax": "**Std deviation** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales se devuelve la desviación estándar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Desviación estándar de series"
				]
			],
			"Summary": "**Std deviation** devuelve la desviación estándar de *series*."
		},
		"STOP MONITORING ACTIVITY": {
			"Syntax": "**STOP MONITORING ACTIVITY**",
			"Params": [],
			"Summary": "El comando **STOP MONITORING ACTIVITY** detiene el seguimiento de las actividades iniciadas con el comando START MONITORING ACTIVITY."
		},
		"STOP SQL SERVER": {
			"Syntax": "**STOP SQL SERVER**",
			"Params": [],
			"Summary": "El comando STOP SQL SERVER detiene el servidor SQL integrado de la aplicación 4D en la cual ha sido ejecutado."
		},
		"Storage": {
			"Syntax": "**Storage**  : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Catálogo de objetos compartidos registrados y colecciones compartidas"
				]
			],
			"Summary": "El método **Storage** devuelve el catálogo de objetos compartidos o colecciones compartidas registrados registradas en el objeto *Storage* en la máquina o componente actual."
		},
		"STRING LIST TO ARRAY": {
			"Syntax": "**STRING LIST TO ARRAY** ( *resNum* ; *cadenas* {; *resArchivo*} )",
			"Params": [
				[
					"resNum",
					"Integer",
					"->",
					"Número de referencia del recurso o Atributo \"id\" del elemento \"group\" (XLIFF)"
				],
				[
					"cadenas",
					"Text array",
					"<-",
					"Cadenas del elemento \"group\" (XLIFF)"
				],
				[
					"resArchivo",
					"Time",
					"->",
					"Número de referencia del archivo de recursos o Todos los archivos XLIFF o los archivos de recursos abiertos, si se omite"
				]
			],
			"Summary": "El comando STRING LIST TO ARRAY llena el array *cadenas*"
		},
		"Structure file": {
			"Syntax": "**Structure file** {( * )} : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Devuelve el archivo de estructura de la base local"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre largo del archivo de estructura de la base"
				]
			],
			"Summary": "El comando **Structure file** devuelve la ruta de acceso del archivo de estructura de la base en la cual está trabajando actualmente."
		},
		"Substring": {
			"Syntax": "**Substring** ( *fuente* ; *aPartirDe* {; *numCaracteres*} ) : Text",
			"Params": [
				[
					"fuente",
					"Text",
					"->",
					"Cadena de la cual obtener una subcadena"
				],
				[
					"aPartirDe",
					"Integer",
					"->",
					"Posición del primer carácter"
				],
				[
					"numCaracteres",
					"Integer",
					"->",
					"Número de caracteres a obtener"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Subcadena de fuente"
				]
			],
			"Summary": "El comando **Substring** devuelve la parte de *fuente* definida por *aPartirDe* y *numCars*."
		},
		"Subtotal": {
			"Syntax": "**Subtotal** ( *valores* {; *saltoPag*} ) : Real",
			"Params": [
				[
					"valores",
					"Field",
					"->",
					"Campo o variable numérica donde quiere devolver el subtotal"
				],
				[
					"saltoPag",
					"Integer",
					"->",
					"Nivel de ruptura para el cual efectuar un salto de página"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Subtotal de valores"
				]
			],
			"Summary": "Subtotal devuelve el subtotal de *valores* para el nivel de ruptura actual o anterior."
		},
		"Sum squares": {
			"Syntax": "**Sum squares** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales se devuelve la suma de cuadrados"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Suma de cuadrados de series"
				]
			],
			"Summary": "**Sum squares** devuelve la suma de cuadrados de *series*."
		},
		"Sum": {
			"Syntax": "**Sum** ( *series* {; *rutaAtributo*} ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales se devuelve la suma"
				],
				[
					"rutaAtributo",
					"Text",
					"->",
					"Ruta de atributo para el cual calcular la suma"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Suma de series"
				]
			],
			"Summary": "**Sum** devuelve la suma (es decir, el total de todos los valores) de *series*."
		},
		"SUSPEND TRANSACTION": {
			"Syntax": "**SUSPEND TRANSACTION**",
			"Params": [],
			"Summary": "El comando **SUSPEND TRANSACTION** suspende la transacción actual en el proceso actual."
		},
		"SVG EXPORT TO PICTURE": {
			"Syntax": "**SVG EXPORT TO PICTURE** ( *elementRef* ; *varImag* {; *tipoExport*} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML raíz"
				],
				[
					"varImag",
					"Picture",
					"->",
					"Variable imagen a recibir del árbol XML (imagen SVG)"
				],
				[
					"tipoExport",
					"Integer",
					"->",
					"0 = No guardar la fuente de datos, 1 = Copiar la fuente de datos, 2 (por defecto) = Fuente de datos propia"
				]
			],
			"Summary": "El comando **SVG EXPORT TO PICTURE** permite guardar en la variable o campo imagen indicado por el parámetro *VarImag* una imagen en formato SVG contenida en un árbol XML."
		},
		"SVG Find element ID by coordinates": {
			"Syntax": "**SVG Find element ID by coordinates** ( {* ;} *objetoImagen* ; *x* ; *y* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, pictureObject es un nombre de objeto (cadena) Si se omite, pictureObject es un campo o variable"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nombre de objeto (si se especifica *) o Campo o variable (si se omite *)"
				],
				[
					"x",
					"Integer",
					"->",
					"X coordenada en píxeles"
				],
				[
					"y",
					"Integer",
					"->",
					"Y coordenada en píxeles"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"ID del elemento encontrado en la ubicación X,Y"
				]
			],
			"Summary": "El comando SVG Find element ID by coordinates devuelve la identificación (\"id\" o atributo \"xml:id\") del elemento XML encontrado en la ubicación definida por las coordenadas (x,y) en la imagen SVG designada por el parámetro *objetoImagen*."
		},
		"SVG Find element IDs by rect": {
			"Syntax": "**SVG Find element IDs by rect** ( {* ;} *objetoImagen* ; *x* ; *y* ; *ancho* ; *alto* ; *arrIDs* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objetoImagen es un nombre de objeto (cadena). Si se omite, objetoImagen es un campo o una variable."
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nombre del objeto (si se especifica *) o Campo o Variable (si se omite *)"
				],
				[
					"x",
					"Integer",
					"->",
					"Coordenada horizontal de la esquina superior izquierda del rectángulo de selección."
				],
				[
					"y",
					"Integer",
					"->",
					"Coordinada vertical de la esquina superior izquierda del rectángulo de selección"
				],
				[
					"ancho",
					"Integer",
					"->",
					"Ancho del rectángulo de selección"
				],
				[
					"alto",
					"Integer",
					"->",
					"Altura del rectángulo de selección"
				],
				[
					"arrIDs",
					"Text array",
					"<-",
					"IDs de los elementos cuyo rectángulo circundante está en intersección con el rectángulo de selección"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = se encontró al menos un elemento"
				]
			],
			"Summary": "El comando SVG Find element IDs by rect llena el array texto *arrIDs* con los IDs (atributo \"id\" o \"xml:id\") de los elementos XML cuyo rectángulo circundante está en intersección con el rectángulo de selección en la ubicación definida por los parámetros *x* y *y*."
		},
		"SVG GET ATTRIBUTE": {
			"Syntax": "**SVG GET ATTRIBUTE** ( {* ;} *objetoImagen* ; id_Element ; *nomAtrib* ; *valorAtrib* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objetoImagen es un nombre de objeto (cadena). Si se omite, objetoImagen es una variable o un campo"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"id_Element",
					"Text",
					"->",
					"ID del elemento donde uno o más atributos se definen"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Atributo cuyo valor quiere obtener"
				],
				[
					"valorAtrib",
					"Text, Integer",
					"<-",
					"Valor actual del atributo"
				]
			],
			"Summary": "El comando SVG GET ATTRIBUTE se utiliza para obtener el valor actual del atributo *nomAtrib* en un objeto o una imagen SVG."
		},
		"SVG SET ATTRIBUTE": {
			"Syntax": "**SVG SET ATTRIBUTE** ( {* ;} *objetoImagen* ; id_Element ; *nomAtrib* ; *valorAtrib* {; *nomAtrib2* ; *valorAtrib2* ; ... ; *nomAtribN* ; *valorAtribN*} {; *})",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objetoImagen es un nombre de objeto (cadena). Si se omite, objetoImagen es una variable o un campo"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"id_Element",
					"Text",
					"->",
					"ID del elemento donde uno o más atributos se definen"
				],
				[
					"nomAtrib",
					"Text",
					"->",
					"Atributo a definir"
				],
				[
					"valorAtrib",
					"Text, Integer",
					"->",
					"Nuevo valor del atributo"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = modificar el árbol DOM interno de la imagen SVG (variable únicamente)"
				]
			],
			"Summary": "El comando **SVG SET ATTRIBUTE** se utiliza para modificar el valor de un atributo existente en el árbol de renderización SVG de una imagen mostrada o en el árbol DOM interno de una imagen."
		},
		"SVG SHOW ELEMENT": {
			"Syntax": "**SVG SHOW ELEMENT** ( {* ;} *objetoImagen* ; *id* {; *margen*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica objetoImagen es un nombre de objeto (cadena). Si se omite, objetoImagen es una variable"
				],
				[
					"objetoPicture",
					"Picture",
					"->",
					"Nombre del objeto (si se especifica *) o variable o campo (si se omite *)"
				],
				[
					"id",
					"Text",
					"->",
					"Atributo id del elemento a visualizar"
				],
				[
					"margen",
					"Integer",
					"->",
					"Margen de visibilidad (en píxeles por defecto)"
				]
			],
			"Summary": "El comando SVG SHOW ELEMENT mueve el documento SVG *objetoImagen* para mostrar el elemento cuyo atributo \"id\" es especificado por el parámetro *id*."
		},
		"System folder": {
			"Syntax": "**System folder** {( *tipo* )} : Text",
			"Params": [
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de carpeta sistema"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso de una carpeta del sistema activo"
				]
			],
			"Summary": "El comando **System folder** devuelve la ruta de acceso a una carpeta particular del sistema operativo o a la carpeta activa del sistema Windows o macOS."
		},
		"System info": {
			"Syntax": "**System info**  : Object",
			"Params": [
				[
					"Resultado",
					"Object",
					"<-",
					"Información del sistema"
				]
			],
			"Summary": "El comando **System info** devuelve un objeto que contiene información sobre el sistema operativo y las características del hardware y software del sistema de la máquina en que se ejecuta."
		},
		"Table fragmentation": {
			"Syntax": "**Table fragmentation** ( *laTabla* ) : Real",
			"Params": [
				[
					"laTable",
					"Table",
					"->",
					"Tabla para la cual obtener la tasa de fragmentación"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Porcentaje de fragmentación"
				]
			],
			"Summary": "El comando Table fragmentation devuelve el porcentaje de fragmentación lógica de los registros de la tabla designada pro el parámetro *laTabla*."
		},
		"Table name": {
			"Syntax": "**Table name** ( *numTabla* ) : Text<br/>**Table name** ( *ptrTabla* ) : Text",
			"Params": [
				[
					"numTabla &#124; ptrTabla",
					"Entero largo, Puntero",
					"->",
					"Número de tabla o puntero de tabla"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Nombre de la tabla"
				]
			],
			"Summary": "El comando Table name devuelve el nombre de la tabla cuyo número o puntero se pasa en *numTabla* o *ptrTabla*."
		},
		"Table": {
			"Syntax": "**Table** ( *numTabla* ) : Pointer<br/>**Table** ( *ptrTabla* ) : Integer<br/>**Table** ( *ptrCampo* ) : Integer",
			"Params": [
				[
					"numTabla",
					"Integer",
					"->",
					"Número de tabla"
				],
				[
					"ptrTabla",
					"Pointer",
					"->",
					"Puntero de tabla"
				],
				[
					"ptrCampo",
					"Pointer",
					"->",
					"Puntero de campo"
				],
				[
					"Resultado",
					"todos",
					"<-",
					"Puntero de tabla, si se pasa un número de tabla<br/>Número de tabla, si se pasa un puntero de tabla Número de tabla o si se pasa un puntero de campo"
				]
			],
			"Summary": "El comando Table tiene tres sintaxis diferentes: \n\n* Si pasa un número de tabla en *numTabla*, Table devuelve un puntero para la tabla."
		},
		"Tan": {
			"Syntax": "**Tan** ( *Numero* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número, en radianes, cuya tangente se devuelve"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Tangente del número"
				]
			],
			"Summary": "Tan devuelve la tangente del *número*, donde *número* se expresa en radianes."
		},
		"Temporary folder": {
			"Syntax": "**Temporary folder**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Ruta de acceso a la carpeta temporal"
				]
			],
			"Summary": "El comando Temporary folder devuelve la ruta de acceso a la carpeta temporal actual definida por su sistema."
		},
		"Test path name": {
			"Syntax": "**Test path name** ( *nombreRuta* ) : Integer",
			"Params": [
				[
					"nombreRuta",
					"Text",
					"->",
					"Ruta de acceso a un directorio, carpeta o documento"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"1, rutaAcceso es un documento existente 0, rutaAcceso es un directorio o carpeta existente <0, ruta de acceso incorrecta, código de error del administrador de archivos del sistema"
				]
			],
			"Summary": "La función Test path name verifica si un documento o carpeta cuyo nombre o ruta de acceso se pasa en *rutaAcceso* está presente en el disco."
		},
		"Test semaphore": {
			"Syntax": "**Test semaphore** ( *semaforo* ) : Boolean",
			"Params": [
				[
					"semaforo",
					"Text",
					"->",
					"Nombre del semáforo a probar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = el semáforo existe, False = el semáforo no existe"
				]
			],
			"Summary": "El comando Test semaphore le permite probar la existencia de un semáforo."
		},
		"TEXT TO ARRAY": {
			"Syntax": "**TEXT TO ARRAY** ( *varText* ; *arrText* ; *ancho* ; *nomFuente* ; *tamFuente* {; *estiloFuente* {; *}} )",
			"Params": [
				[
					"varText",
					"Text",
					"->",
					"Texto original a dividir"
				],
				[
					"arrText",
					"Text array",
					"<-",
					"Array que contiene el texto dividido en palabras o líneas"
				],
				[
					"ancho",
					"Integer",
					"->",
					"Ancho máximo de la cadena(en píxeles)"
				],
				[
					"nomFuente",
					"Text",
					"->",
					"Nombre de la fuente"
				],
				[
					"tamFuente",
					"Integer",
					"->",
					"Tamaño de la fuente"
				],
				[
					"estiloFuente",
					"Integer",
					"->",
					"Estilo de fuente"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa = interpretar el texto como multistyle"
				]
			],
			"Summary": "El comando **TEXT TO ARRAY** transforma una variable texto en un array texto."
		},
		"TEXT TO BLOB": {
			"Syntax": "**TEXT TO BLOB** ( *texto* ; *BLOB* {; *formatoTexto* {; offset | *}} )",
			"Params": [
				[
					"texto",
					"Text",
					"->",
					"Texto a escribir en el BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a recibir el texto"
				],
				[
					"formatoTexto",
					"Integer",
					"->",
					"Formato y conjunto de caracteres de texto"
				],
				[
					"offset &#124; *",
					"Variable, Operador",
					"<->",
					"Offset en el BLOB (expresado en bytes) o * para añadir el valor"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de la escritura si se omite *"
				]
			],
			"Summary": "El comando TEXT TO BLOB escribe el valor de tipo Texto *texto* en el BLOB *blob*."
		},
		"TEXT TO DOCUMENT": {
			"Syntax": "**TEXT TO DOCUMENT** ( *nomArchivo* ; *texto* {; *conjCaract* {; *ModoRetorno*}} )",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Nombre del documento o ruta de acceso al documento"
				],
				[
					"texto",
					"Text",
					"->",
					"Texto a almacenar en el documento"
				],
				[
					"conjCaract",
					"Text, Integer",
					"->",
					"Nombre o número del conjunto de caracteres"
				],
				[
					"ModoRetorno",
					"Integer",
					"->",
					"Modo de procesamiento para los retornos de línea"
				]
			],
			"Summary": "El comando **TEXT TO DOCUMENT** le permite escribir el *texto* directamente en el archivo de disco."
		},
		"throw": {
			"Syntax": "**throw** ( *errorCode* {; *descripcion*} ) <br/>\n*throw* {( *errorObj* )}",
			"Params": [
				[
					"errorCode",
					"Integer",
					"->",
					"Un entero largo que representa el código de error."
				],
				[
					"descripcion",
					"Text",
					"->",
					"Texto que describe el error."
				],
				[
					"throw {( errorObj )}"
				],
				[
					"Parámetro",
					"Tipo",
					"Descripción"
				],
				[
					"errorObj",
					"Object",
					"->",
					"Un objeto que contiene propiedades para construir el error"
				]
			],
			"Summary": "El comando **throw** crea un error que será lanzado inmediatamente o cuando el método que lo llama devuelva a su llamador (modo diferido)."
		},
		"Tickcount": {
			"Syntax": "**Tickcount**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tics (60avo de un segundo) pasados desde que se inició el equipo"
				]
			],
			"Summary": "Tickcount devuelve el número de tics (1 tic = 1 / 60avo de un segundo) pasados desde que se inició el equipo."
		},
		"Time string": {
			"Syntax": "**Time string** ( *segundos* ) : Text",
			"Params": [
				[
					"segundos",
					"Integer, Time",
					"->",
					"Segundos desde la media noche"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Hora como una cadena en formato 24 horas"
				]
			],
			"Summary": "El comando Time string devuelve la cadena de la expresión tipo hora que usted pasó en *segundos*."
		},
		"Time": {
			"Syntax": "**Time** ( *valHora* ) : Time",
			"Params": [
				[
					"valHora",
					"Text, Integer",
					"->",
					"Valor a devolver en forma de hora"
				],
				[
					"Resultado",
					"Time",
					"<-",
					"Hora especificada por horaCadena"
				]
			],
			"Summary": "El comando Time devuelve una expresión de tipo Hora equivalente a la hora especificada en el parámetro *valHora*."
		},
		"Timestamp": {
			"Syntax": "**Timestamp** : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"Hora actual devuelta utilizando el formato ISO con milisegundos"
				]
			],
			"Summary": "**Timestamp** devuelve la hora UTC actual en formato ISO con milisegundos, es decir, aaaa-MM-ddTHH:mm:ss."
		},
		"Tool bar height": {
			"Syntax": "**Tool bar height**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Altura (expresada en píxeles) de la barra de herramientas o 0 si la barra está oculta"
				]
			],
			"Summary": "El comando Tool bar height devuelve la altura de la barra de herramientas visible actualmente, expresada en píxeles."
		},
		"TRACE": {
			"Syntax": "**TRACE**",
			"Params": [],
			"Summary": "El comando **TRACE** se utiliza para ejecutar paso a paso métodos durante el desarrollo de una base."
		},
		"Transaction level": {
			"Syntax": "**Transaction level**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nivel de transacción actual (0 si ninguna transacción se ha iniciado)"
				]
			],
			"Summary": "El comando Transaction level devuelve el nivel de transacción actual para el proceso."
		},
		"TRANSFORM PICTURE": {
			"Syntax": "**TRANSFORM PICTURE** ( *imagen* ; *operador* {; *param1* {; *param2* {; *param3* {; *param4*}}}} )",
			"Params": [
				[
					"imagen",
					"Picture",
					"->",
					"Imagen fuente a transformar"
				],
				[
					"<-",
					"Imagen resultante de la transformación"
				],
				[
					"operador",
					"Integer",
					"->",
					"Tipo de transformación a efectuar"
				],
				[
					"param1",
					"Real",
					"->",
					"Parámetro de la transformación"
				],
				[
					"param2",
					"Real",
					"->",
					"Parámetro de la transformación"
				],
				[
					"param3",
					"Real",
					"->",
					"Parámetro de la transformación"
				],
				[
					"param4",
					"Real",
					"->",
					"Parámetro de la transformación"
				]
			],
			"Summary": "El comando TRANSFORM PICTURE permite aplicar una transformación de tipo *operador* a la imagen pasada en el parámetro *imagen*."
		},
		"Trigger event": {
			"Syntax": "**Trigger event**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"0 = Fuera de todo evento de trigger 1 = Al guardar un nuevo registro 2 = Al guardar un registro existente 3 = Al borrar un registro"
				]
			],
			"Summary": "El comando **Trigger event** se llama en un trigger y devuelve un valor numérico que indica el tipo del evento de la base, en otras palabras, la razón por la cual se invoca el trigger."
		},
		"Trigger level": {
			"Syntax": "**Trigger level**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Nivel de ejecución del trigger (0 si está fuera del ciclo de ejecución del trigger)"
				]
			],
			"Summary": "El comando Trigger level devuelve el nivel de ejecución del trigger."
		},
		"TRIGGER PROPERTIES": {
			"Syntax": "**TRIGGER PROPERTIES** ( *nivelTrigger* ; *eventoBase* ; *numTabla* ; *regNum* )",
			"Params": [
				[
					"nivelTrigger",
					"Integer",
					"->",
					"Nivel de ejecución del trigger"
				],
				[
					"eventoBase",
					"Integer",
					"<-",
					"Evento de base de datos"
				],
				[
					"numTabla",
					"Integer",
					"<-",
					"Número de la tabla"
				],
				[
					"regNum",
					"Integer",
					"<-",
					"Número del registro"
				]
			],
			"Summary": "El comando **TRIGGER PROPERTIES** devuelve la información sobre el nivel de ejecución del trigger que se pasa en *nivelTrigger*."
		},
		"True": {
			"Syntax": "**True**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True"
				]
			],
			"Summary": "True devuelve el valor booleano Verdadero (True)."
		},
		"Trunc": {
			"Syntax": "**Trunc** ( *Numero* ; *decimales* ) : Real",
			"Params": [
				[
					"Numero",
					"Real",
					"->",
					"Número a truncar"
				],
				[
					"decimales",
					"Integer",
					"->",
					"Número de lugares decimales a conservar"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Número truncado a partir del número decimales especificado por decimales"
				]
			],
			"Summary": "Trunc devuelve *número* con su parte decimal truncada a partir del número de decimales especificado por *decimales*."
		},
		"TRUNCATE TABLE": {
			"Syntax": "**TRUNCATE TABLE** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual se borrarán todos los registros o tabla por defecto si se omite este parámetro"
				]
			],
			"Summary": "El comando TRUNCATE TABLE borra rápidamente todos los registros de tabla."
		},
		"Type": {
			"Syntax": "**Type** ( *campoVar* ) : Integer",
			"Params": [
				[
					"campoVar",
					"Field, Variable",
					"->",
					"Campo o variable a probar"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tipo de datos"
				]
			],
			"Summary": "El comando Type devuelve un valor numérico que indica el tipo de campo o variable que pasa en el parámetro *campoVar*."
		},
		"Undefined": {
			"Syntax": "**Undefined** ( *expresion* ) : Boolean",
			"Params": [
				[
					"expresion",
					"Expression",
					"->",
					"Variable a probar"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = Variable indefinida False = Variable definida"
				]
			],
			"Summary": "Undefined devuelve True si el resultado de la evaluación de *expresion* no es un valor definido, y de lo contrario False."
		},
		"UNION": {
			"Syntax": "**UNION** ( *conjunto1* ; *conjunto2* ; *resultado* )",
			"Params": [
				[
					"conjunto1",
					"Text",
					"->",
					"Primer conjunto"
				],
				[
					"conjunto2",
					"Text",
					"->",
					"Segundo conjunto"
				],
				[
					"resultado",
					"Text",
					"->",
					"Conjunto resultante"
				]
			],
			"Summary": "UNION crea un nuevo conjunto que contiene todos los registros de *conjunto1* y *conjunto2*."
		},
		"UNLOAD RECORD": {
			"Syntax": "**UNLOAD RECORD** {( *tabla* )}",
			"Params": [
				[
					"tabla",
					"Table",
					"->",
					"Tabla de la cual descargar el registro o Tabla por defecto, si se omite"
				]
			],
			"Summary": "UNLOAD RECORD descarga el registro actual de *tabla*."
		},
		"UNREGISTER CLIENT": {
			"Syntax": "**UNREGISTER CLIENT**",
			"Params": [],
			"Summary": "El comando UNREGISTER CLIENT da de baja un registro de un equipo 4D Client."
		},
		"Uppercase": {
			"Syntax": "**Uppercase** ( *laCadena* {; *} ) : Text",
			"Params": [
				[
					"laText",
					"Text",
					"->",
					"Cadena a convertir en mayúsculas"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: conservar los acentos"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Cadena en mayúsculas"
				]
			],
			"Summary": "Uppercase devuelve una cadena de caracteres igual a *laCadena* con todos los caracteres alfabéticos convertidos en mayúsculas."
		},
		"USE CHARACTER SET": {
			"Syntax": "**USE CHARACTER SET** ( *mapa* {; *mapaImpExp*} )",
			"Params": [
				[
					"mapa",
					"Text, *",
					"->",
					"Nombre del conjunto de caracteres a a utilizar (Modo Unicode) o nombre del documento del mapa ASCII a utilizar (Modo ASCII) o * para restaurar el mapa ASCII/conjunto de caracteres por defecto"
				],
				[
					"mapaImpExp",
					"Integer",
					"->",
					"0 = Mapa de exportación 1 = Mapa de importación Si se omite, mapa de exportación"
				]
			],
			"Summary": "USE CHARACTER SET modifica el conjunto de caracteres utilizado por 4D para todas las operaciones de transferencia de datos entre la base y un documento o puerto serial para el proceso actual."
		},
		"USE NAMED SELECTION": {
			"Syntax": "**USE NAMED SELECTION** ( *nombre* )",
			"Params": [
				[
					"nombre",
					"Text",
					"->",
					"Nombre de la selección temporal a utilizar"
				]
			],
			"Summary": "USE NAMED SELECTION utiliza el nombre de la selección temporal como selección actual para la tabla a la cual pertenece."
		},
		"USE SET": {
			"Syntax": "**USE SET** ( *conjunto* )",
			"Params": [
				[
					"conjunto",
					"Text",
					"->",
					"Nombre del conjunto a utilizar"
				]
			],
			"Summary": "USE SET crea, con los registros de *conjunto,* una nueva selección actual para la tabla a la cual pertenece *conjunto*."
		},
		"User in group": {
			"Syntax": "**User in group** ( *usuario* ; *grupo* ) : Boolean",
			"Params": [
				[
					"usuario",
					"Text",
					"->",
					"Nombre del usuario"
				],
				[
					"grupo",
					"Text",
					"->",
					"Nombre del grupo"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"TRUE = el usuario está en el grupo FALSE = el usuario no está en el grupo"
				]
			],
			"Summary": "User in group devuelve TRUE si *usuario* está en *grupo*."
		},
		"USERS TO BLOB": {
			"Syntax": "**USERS TO BLOB** ( *usuarios* )",
			"Params": [
				[
					"usuarios",
					"Blob",
					"->",
					"BLOB que debe contener los usuarios"
				],
				[
					"<-",
					"Cuentas de usuarios (encriptado)"
				]
			],
			"Summary": "**Nota de compatibilidad*: este comando solo funciona en bases de datos binarias."
		},
		"Validate password": {
			"Syntax": "**Validate password** ( *refUsuario* ; *contraseña* {; *digest*} ) : Boolean",
			"Params": [
				[
					"refUsuario",
					"Integer, Text",
					"->",
					"Número de referencia único"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Contraseña no encriptada"
				],
				[
					"digest",
					"Boolean",
					"->",
					"Contraseña digest = True, <br/>Contraseña texto plano (por defecto) = False"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = contraseña correcta False = contraseña incorrecta"
				]
			],
			"Summary": "Validate password devuelve True si la cadena pasada en *contraseña* es la contraseña para la cuenta de usuario cuyo número de referencia se pasa en *refUsuario*."
		},
		"VALIDATE TRANSACTION": {
			"Syntax": "**VALIDATE TRANSACTION**",
			"Params": [],
			"Summary": "VALIDATE TRANSACTION acepta la transacción abierta por el comando START TRANSACTION del nivel correspondiente en el proceso actual."
		},
		"Value type": {
			"Syntax": "**Value type** ( *expresion* ) : Integer",
			"Params": [
				[
					"expresion",
					"Expression",
					"->",
					"Expresión cuyo valor resultante debe ser probado"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de tipo de dato"
				]
			],
			"Summary": "El comando Value type devuelve el tipo del valor resultante de la evaluación de la *expresion* que pasó como parámetro."
		},
		"VARIABLE TO BLOB": {
			"Syntax": "**VARIABLE TO BLOB** ( *variable* ; *blob* {; offset } )<br/>**VARIABLE TO BLOB** ( *variable* ; *blob* {; *} )",
			"Params": [
				[
					"variable",
					"Variable",
					"->",
					"Variable a guardar en el BLOB"
				],
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a recibir la variable"
				],
				[
					"offset &#124; *",
					"Variable, Operador",
					"<->",
					"Offset de la variable (expresado en bytes) en el BLOB o * para añadir el valor"
				],
				[
					"",
					"",
					"",
					"Nuevo offset después de escritura si se omite *"
				]
			],
			"Summary": "El comando VARIABLE TO BLOB almacena la variable *variable* en el BLOB *blob*."
		},
		"VARIABLE TO VARIABLE": {
			"Syntax": "**VARIABLE TO VARIABLE** ( *proceso* ; *dstVar* ; *srcVar* {; *dstVar2* ; *srcVar2* ; ... ; *dstVarN* ; *srcVarN*} )",
			"Params": [
				[
					"proceso",
					"Integer",
					"->",
					"Número de proceso de destino"
				],
				[
					"dstVar",
					"Variable",
					"->",
					"Variable de destino"
				],
				[
					"srcVar",
					"Variable",
					"->",
					"Variable fuente"
				]
			],
			"Summary": "El comando VARIABLE TO VARIABLE escribe las variables proceso *dstVar* (*dstVar2*, etc.) del proceso de destino cuyo número se pasa en *proceso* utilizando los valores de las variables *srcVar1* *srcVar2*, etc."
		},
		"Variance": {
			"Syntax": "**Variance** ( *series* ) : Real",
			"Params": [
				[
					"series",
					"Field, Array",
					"->",
					"Datos para los cuales se devuelve la varianza"
				],
				[
					"Resultado",
					"Real",
					"<-",
					"Varianza de series"
				]
			],
			"Summary": "**Variance** devuelve la varianza para *series*."
		},
		"VERIFY CURRENT DATA FILE": {
			"Syntax": "**VERIFY CURRENT DATA FILE** {( *objetos* ; *opciones* ; *metodo* {; *arrayTablas* {; *arrayCampos*}} )}",
			"Params": [
				[
					"objetos",
					"Integer",
					"->",
					"Objetos a verificar"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Opciones de verificación"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nombre del método 4D de retrollamada"
				],
				[
					"arrayTablas",
					"Integer array",
					"->",
					"Números de las tablas a verificar"
				],
				[
					"arrayCampos",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"Números de los índices a verificar"
				]
			],
			"Summary": "El comando VERIFY CURRENT DATA FILE efectúa una verificación estructural de los objetos encontrados en el archivo de datos abierto actualmente por 4D."
		},
		"VERIFY DATA FILE": {
			"Syntax": "**VERIFY DATA FILE** ( *rutaEstructura* ; *rutaDatos* ; *objetos* ; *opciones* ; *metodo* {; *arrayTablas* {; *arrayCampos*}} )",
			"Params": [
				[
					"rutaEstructura",
					"Text",
					"->",
					"Ruta de acceso al archivo de estructura de la base a verificar"
				],
				[
					"rutaDatos",
					"Text",
					"->",
					"Ruta de acceso del archivo de datos de la base a verificar"
				],
				[
					"objetos",
					"Integer",
					"->",
					"Objetos a verificar"
				],
				[
					"opciones",
					"Integer",
					"->",
					"Opciones de verificación"
				],
				[
					"metodo",
					"Text",
					"->",
					"Nombre del método 4D de retrollamada"
				],
				[
					"arrayTablas",
					"Integer array",
					"->",
					"Números de las tablas a verificar"
				],
				[
					"arrayCampos",
					"2D Integer array, 2D Integer array, 2D Real array",
					"->",
					"Números de los índices a verificar"
				]
			],
			"Summary": "El comando VERIFY DATA FILE efectúa una verificación estructural de los objetos contenidos en el archivo de datos 4D designado por *rutaEstructura* y *rutaDatos*."
		},
		"Verify password hash": {
			"Syntax": "**Verify password hash**  ( *contrasena* ; *hash* ) : Boolean",
			"Params": [
				[
					"contrasena",
					"Text",
					"->",
					"La contraseña de usuario. Sólo se utilizan los primeros 72 caracteres."
				],
				[
					"hash",
					"Text",
					"->",
					"Un hash de contraseña."
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"Devuelve TRUE si la contraseña y hash coinciden, de lo contrario devuelve FALSE."
				]
			],
			"Summary": "La función **Verify password hash** verifica que el hash dado coincida con la *contrasena* dada."
		},
		"Version type": {
			"Syntax": "**Version type**  : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Información sobre el tipo de versión (bitfield)"
				]
			],
			"Summary": "El comando Version type devuelve un valor numérico que representa el tipo de versión de 4D o de 4D Server que está utilizando."
		},
		"VOLUME ATTRIBUTES": {
			"Syntax": "**VOLUME ATTRIBUTES** ( *volumen* ; *tamaño* ; *utilizado* ; *libre* )",
			"Params": [
				[
					"volumen",
					"Text",
					"->",
					"Nombre del volumen"
				],
				[
					"tamaño",
					"Real",
					"<-",
					"Tamaño del volumen expresado en bytes"
				],
				[
					"utilizado",
					"Real",
					"<-",
					"Espacio utilizado expresado en bytes"
				],
				[
					"libre",
					"Real",
					"<-",
					"Espacio libre expresado en bytes"
				]
			],
			"Summary": "El comando VOLUME ATTRIBUTES devuelve en bytes el tamaño, el espacio utilizado y el espacio libre del volumen cuyo nombre se pasa en *volumen*."
		},
		"VOLUME LIST": {
			"Syntax": "**VOLUME LIST** ( *volumenes* )",
			"Params": [
				[
					"volumenes",
					"Text array",
					"<-",
					"Nombres de los volúmenes montados actualmente"
				]
			],
			"Summary": "El comando VOLUME LIST llena el array *volumenes*, de tipo texto, con los nombres de los volúmenes definidos (Windows) o montados (macOS) en su equipo."
		},
		"WA Back URL available": {
			"Syntax": "**WA Back URL available** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si hay un URL anterior en la secuenca de URLs abiertos; de lo contrario, False"
				]
			],
			"Summary": "El comando WA Back URL available se utiliza para saber si existe un URL precedente disponible en la secuencia de URLs abiertos en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA Create URL history menu": {
			"Syntax": "**WA Create URL history menu** ( {* ;} *objeto* {; *direccion*} ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"direccion",
					"Integer",
					"->",
					"0 ó si se omite=Lista de los URLs anteriores, 1=Lista de los URLs siguientes"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Referencia de menú"
				]
			],
			"Summary": "El comando **WA Create URL history menu** crea y llena un menú que puede utilizarse directamente para la navegación entre los URLs visitados durante la sesión en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA Evaluate JavaScript": {
			"Syntax": "**WA Evaluate JavaScript** ( {* ;} *objeto* ; *codeJS* {; *type*} )  : any",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"codeJS",
					"Text",
					"->",
					"Código JavaScript"
				],
				[
					"type",
					"Integer",
					"->",
					"Tipo al cual convertir el resultado"
				],
				[
					"Resultado",
					"Date, Time, Object, Pointer, Real, Text",
					"<-",
					"Resultado de ejecución"
				]
			],
			"Summary": "El comando WA Evaluate JavaScript ejecuta en el área web designada por los parámetros *\\** y *objeto* el código JavaScript pasado en *codeJS* y devuelve el resultado."
		},
		"WA EXECUTE JAVASCRIPT FUNCTION": {
			"Syntax": "**WA EXECUTE JAVASCRIPT FUNCTION** ( {* ;} *objeto* ; *funcionjs* ; resultado|* {; *param*}{; *param2* ; ... ; *paramN*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"funcionjs",
					"Text",
					"->",
					"Nombre de la función JavaScript a ejecutar"
				],
				[
					"resultado&#124;*",
					"Variable",
					"->",
					"* para una función sin resultado o"
				],
				[
					"<-",
					"Resultado de la función (si se espera)"
				],
				[
					"param",
					"Text, Number, Date, Object, Collection",
					"->",
					"Parámetro(s) a pasar a la función"
				]
			],
			"Summary": "El comando WA EXECUTE JAVASCRIPT FUNCTION ejecuta en el área Web designada por los parámetros *\\** y *objeto*, la función JavaScript *funcionJS* y devuelve opcionalmente su resultado en el parámetro *resultado*."
		},
		"WA Forward URL available": {
			"Syntax": "**WA Forward URL available** ( {* ;} *objeto* ) : Boolean",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si existe un URL siguiente en la secuencia de URLs abiertos; de lo contrario, False"
				]
			],
			"Summary": "El comando WA Forward URL available permite conocer si existe un URL siguiente disponible en la secuencia de URLs abiertos en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA Get current URL": {
			"Syntax": "**WA Get current URL** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"URL actualmente cargada en el área Web"
				]
			],
			"Summary": "El comando WA Get current URL devuelve la dirección URL de la página mostrada en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA GET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA GET EXTERNAL LINKS FILTERS** ( {* ;} *objeto* ; *arrFiltros* ; *arrAutorizRechazar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrFiltros",
					"Text array",
					"<-",
					"Array de filtros"
				],
				[
					"arrAutorizRechazar",
					"Boolean array",
					"<-",
					"Array autorizar-rechazar"
				]
			],
			"Summary": "El comando WA GET EXTERNAL FILTERS LINKS devuelve en los arrays *arrFiltros* y *arrAutorizRechazar*, los filtros de enlaces externos del área web designada por los parámetros *\\** y *objeto*."
		},
		"WA Get last filtered URL": {
			"Syntax": "**WA Get last filtered URL** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Último URL filtrado"
				]
			],
			"Summary": "El comando WA Get last filtered URL devuelve el último URL filtrado en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA GET LAST URL ERROR": {
			"Syntax": "**WA GET LAST URL ERROR** ( {* ;} *objeto* ; *url* ; *descripcion* ; *codigoError* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"url",
					"Text",
					"<-",
					"URL al origen del error"
				],
				[
					"descripcion",
					"Text",
					"<-",
					"Descripción del error (macOS)"
				],
				[
					"codigoError",
					"Integer",
					"<-",
					"Código de error"
				]
			],
			"Summary": "El comando WA GET LAST URL ERROR permite recuperar varios elementos de información relacionados con el último error ocurrido en el área Web designada por los parámetros *\\** y *objeto*."
		},
		"WA Get page content": {
			"Syntax": "**WA Get page content** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Código HTML fuente"
				]
			],
			"Summary": "El comando WA Get page content devuelve el código HTML de la página actual o en de la página que se va a mostrar en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA Get page title": {
			"Syntax": "**WA Get page title** ( {* ;} *objeto* ) : Text",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Título de la página actual"
				]
			],
			"Summary": "El comando WA Get page title devuelve el título de la página actual o que va a ser mostrada en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA GET PREFERENCE": {
			"Syntax": "**WA GET PREFERENCE** ( {* ;} *objeto* ; *selector* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Preferencia a leer"
				],
				[
					"valor",
					"Variable",
					"<-",
					"Valor actual de la preferencia"
				]
			],
			"Summary": "El comando WA GET PREFERENCE permite obtener el valor actual de una preferencia en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA GET URL FILTERS": {
			"Syntax": "**WA GET URL FILTERS** ( {* ;} *objeto* ; *arrFiltros* ; *arrAutorizRechazar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrFiltros",
					"Text array",
					"<-",
					"Array filtros"
				],
				[
					"arrAutorizRechazar",
					"Boolean array",
					"<-",
					"Array Autorizar-rechazar"
				]
			],
			"Summary": "El comando WA GET URL FILTERS devuelve en los arrays *arrFiltros* y *arrAutorizRechazar*, los filtros activos en el área web designada por los parámetros *\\** y *objeto* ."
		},
		"WA GET URL HISTORY": {
			"Syntax": "**WA GET URL HISTORY** ( {* ;} *objeto* ; *arrUrls* {; *direccion* {; *arrTitulos*}} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrUrls",
					"Text array",
					"<-",
					"Array de los URLs visitados"
				],
				[
					"direccion",
					"Integer",
					"->",
					"0 ó si se omite=Lista de los URLs anteriores, 1=Lista de los URLs siguientes"
				],
				[
					"arrTitulos",
					"Text array",
					"<-",
					"Array de títulos de ventanas"
				]
			],
			"Summary": "El comando WA GET URL HISTORY devuelve uno o dos arrays que contienen los URLs visitados durante la sesión en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA OPEN BACK URL": {
			"Syntax": "**WA OPEN BACK URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando WA OPEN BACK URL carga en el área web designada por los parámetros *\\** y *objeto* el URL precedente en la secuencia de los URLs abiertos."
		},
		"WA OPEN FORWARD URL": {
			"Syntax": "**WA OPEN FORWARD URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando WA OPEN FORWARD URL carga en el área web designada por los parámetros *\\** y *objeto* el URL siguiente en la secuencia de los URLs abiertos."
		},
		"WA OPEN URL": {
			"Syntax": "**WA OPEN URL** ( {* ;} *objeto* ; *url* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si * se omite)"
				],
				[
					"url",
					"Text",
					"->",
					"URL a cargar en el área Web"
				]
			],
			"Summary": "El comando **WA OPEN URL** carga en el área web designada por los parámetros *\\** y *objeto* el URL pasado en el parámetro *url*."
		},
		"WA OPEN WEB INSPECTOR": {
			"Syntax": "**WA OPEN WEB INSPECTOR** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre del objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando **WA OPEN WEB INSPECTOR** abre un inspector web para el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA REFRESH CURRENT URL": {
			"Syntax": "**WA REFRESH CURRENT URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando WA REFRESH CURRENT URL recarga el URL actual mostrado en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA Run offscreen area": {
			"Syntax": "**WA Run offscreen area** ( *parametros* ) : any",
			"Params": [
				[
					"parametros",
					"Object",
					"->",
					"Objeto que contiene los atributos del área web"
				],
				[
					"Resultado",
					"any",
					"<-",
					"Propiedad .result del objeto onEvent, o Null si no devuelve un valor"
				]
			],
			"Summary": "El comando **WA Run offscreen area** crea un área web en memoria que se puede utilizar para cargar y analizar automáticamente las páginas web."
		},
		"WA SET EXTERNAL LINKS FILTERS": {
			"Syntax": "**WA SET EXTERNAL LINKS FILTERS** ( {* ;} *objeto* ; *arrFiltros* ; *arrAutorizRechazar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrFiltros",
					"Text array",
					"->",
					"Array de filtros"
				],
				[
					"arrAutorizRechazar",
					"Boolean array",
					"->",
					"Array autorizar- rechazar"
				]
			],
			"Summary": "El comando WA SET EXTERNAL LINKS FILTERS permite establecer uno o más filtros de enlaces externos para la zona web designada por los parámetros *\\** y *objeto*."
		},
		"WA SET PAGE CONTENT": {
			"Syntax": "**WA SET PAGE CONTENT** ( {* ;} *objeto* ; *contenido* ; *baseURL* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"contenido",
					"Text",
					"->",
					"Código HTML fuente"
				],
				[
					"baseURL",
					"Text",
					"->",
					"URL para las referencias relativas (macOS)"
				]
			],
			"Summary": "Este comando histórico ya no es realmente útil."
		},
		"WA SET PREFERENCE": {
			"Syntax": "**WA SET PREFERENCE** ( {* ;} *objeto* ; *selector* ; *valor* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"selector",
					"Integer",
					"->",
					"Preferencia a modificar"
				],
				[
					"valor",
					"Boolean",
					"->",
					"Valor de la preferencia (True = permitido,  False = no autorizado)"
				]
			],
			"Summary": "El comando WA SET PREFERENCE permite fijar diferentes preferencias para el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA SET URL FILTERS": {
			"Syntax": "**WA SET URL FILTERS** ( {* ;} *objeto* ; *arrFiltros* ; *arrAutorizRechazar* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				],
				[
					"arrFiltros",
					"Text array",
					"->",
					"Array de filtros"
				],
				[
					"arrAutorizRechazar",
					"Boolean array",
					"->",
					"Array autorizar- rechazar"
				]
			],
			"Summary": "El comando WA SET URL FILTERS permite colocar uno o más filtros para el área Web designada por los parámetros *\\** y *objeto*."
		},
		"WA STOP LOADING URL": {
			"Syntax": "**WA STOP LOADING URL** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando WA STOP LOADING URL detiene la carga de los recursos del URL actual de la zona web designada por los parámetros *\\** y *objeto*."
		},
		"WA ZOOM IN": {
			"Syntax": "**WA ZOOM IN** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando WA ZOOM IN aumenta el tamaño del contenido mostrado en el área web designada por los parámetros *\\** y *objeto*."
		},
		"WA ZOOM OUT": {
			"Syntax": "**WA ZOOM OUT** ( {* ;} *objeto* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, objeto es un nombre de objeto (cadena) Si se omite, objeto es una variable"
				],
				[
					"objeto",
					"any",
					"->",
					"Nombre de objeto (si se especifica *) o Variable (si se omite *)"
				]
			],
			"Summary": "El comando WA ZOOM OUT reduce el tamaño del contenido mostrado en el área web designada por los parámetros \\* y objeto."
		},
		"WEB Get body part count": {
			"Syntax": "**WEB Get body part count** : Integer",
			"Params": [
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de partes en el cuerpo"
				]
			],
			"Summary": "El comando **WEB Get body part count** devuelve el número de partes que compone el cuerpo recibido."
		},
		"WEB GET BODY PART": {
			"Syntax": "**WEB GET BODY PART** ( *parte* ; *contenido* ; *nombre* ; *tipoMime* ; *nomArchivo* )",
			"Params": [
				[
					"parte",
					"Integer",
					"->",
					"Número de parte"
				],
				[
					"contenido",
					"Blob, Text",
					"<-",
					"Contenido de la parte"
				],
				[
					"nombre",
					"Text",
					"<-",
					"Nombre de la variable \"input\""
				],
				[
					"tipoMime",
					"Text",
					"<-",
					"Tipo mime del archivo"
				],
				[
					"nomArchivo",
					"Text",
					"<-",
					"Nombre del archivo enviado"
				]
			],
			"Summary": "El comando **WEB GET BODY PART** llamado en el contexto de un proceso web, permite analizar la parte \"body\" de una petición multi-part."
		},
		"WEB Get current session ID": {
			"Syntax": "**WEB Get current session ID**  : Text",
			"Params": [
				[
					"Resultado",
					"Text",
					"<-",
					"UUID de la sesión"
				]
			],
			"Summary": "El comando **WEB Get current session ID** devuelve el ID de la sesión abierta para la petición web."
		},
		"WEB GET HTTP BODY": {
			"Syntax": "**WEB GET HTTP BODY** ( *cuerpo* )",
			"Params": [
				[
					"cuerpo",
					"Blob, Text",
					"<-",
					"Cuerpo (Body) de la petición HTTP"
				]
			],
			"Summary": "El comando **WEB GET HTTP BODY** devuelve el cuerpo de la solicitud HTTP que esta siendo procesada."
		},
		"WEB GET HTTP HEADER": {
			"Syntax": "**WEB GET HTTP HEADER** ( encab|arrayCamp {; *arrayValores*} )",
			"Params": [
				[
					"encab&#124;arrayCamp",
					"Texto, Array texto",
					"<-",
					"Encabezado HTTP de la petición o Campos del encabezado HTTP"
				],
				[
					"arrayValores",
					"Text array",
					"<-",
					"Contenido de los campos del encabezado HTTP"
				]
			],
			"Summary": "El comando **WEB GET HTTP HEADER** devuelve, en una cadena o dos arrays, el encabezado HTTP de la petición en proceso."
		},
		"WEB GET OPTION": {
			"Syntax": "**WEB GET OPTION** ( *selector* ; *valor* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Código de la opción a modificar"
				],
				[
					"valor",
					"Integer, Text, Collection",
					"<-",
					"Valor de la opción"
				]
			],
			"Summary": "El comando **WEB GET OPTION** permite leer el valor actual de una opción de funcionamiento del servidor web de 4D."
		},
		"WEB Get server info": {
			"Syntax": "**WEB Get server info** {( *conCaché* )} : Object",
			"Params": [
				[
					"conCaché",
					"Boolean",
					"->",
					"True para devolver la descripción de la caché Web. De lo contrario (por defecto), no se devuelve la descripción de la caché."
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Información sobre el servidor Web en ejecución y el servidor SOAP"
				]
			],
			"Summary": "El comando **WEB Get server info** devuelve un objeto que contiene información del tiempo de ejecución detallada en la sesión actual del servidor web 4D."
		},
		"WEB GET STATISTICS": {
			"Syntax": "**WEB GET STATISTICS** ( *paginas* ; *hits* ; *uso* )",
			"Params": [
				[
					"paginas",
					"Text array",
					"<-",
					"Nombres de las páginas más consultadas"
				],
				[
					"hits",
					"Integer array",
					"<-",
					"Número de hits para cada página"
				],
				[
					"uso",
					"Integer",
					"<-",
					"Porcentaje de la caché utilizado"
				]
			],
			"Summary": "El comando **WEB GET STATISTICS** permite obtener la información sobre las páginas más consultadas, cargadas en la caché del servidor web."
		},
		"WEB GET VARIABLES": {
			"Syntax": "**WEB GET VARIABLES** ( *arrayNoms* ; *arrayValores* )",
			"Params": [
				[
					"arrayNoms",
					"Text array",
					"<-",
					"Nombres de las variables del formulario web"
				],
				[
					"arrayValores",
					"Text array",
					"<-",
					"Valores de las variables del formulario web"
				]
			],
			"Summary": "El comando **WEB GET VARIABLES** llena los arrays texto *arrayNoms* y *arrayValores* con los nombres y los valores de las variables contenidas en el formulario web “enviado” al servidor web."
		},
		"WEB Is secured connection": {
			"Syntax": "**WEB Is secured connection**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True = la conexión web es segura. False = la conexión web no es segura."
				]
			],
			"Summary": "El comando **WEB Is secured connection** devuelve un booleano indicando si la conexión al servidor web 4D se efectúo en modo seguro por medio de TSL/SSL (la petición comienza por “https:” en lugar de “http:”)."
		},
		"WEB Is server running": {
			"Syntax": "**WEB Is server running** : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si el servidor Web está corriendo, de lo contrario False"
				]
			],
			"Summary": "El comando **WEB Is server running** devuelve **True** si el servidor web integrado 4D está corriendo y **False** si el servidor web está apagado."
		},
		"WEB LEGACY CLOSE SESSION": {
			"Syntax": "**WEB LEGACY CLOSE SESSION** ( *idSesion* )",
			"Params": [
				[
					"idSesion",
					"Text",
					"->",
					"UUID de sesión"
				]
			],
			"Summary": "Este comando sólo puede utilizarse con **sesiones web heredadas**, disponibles en bases convertidas a partir de versiones anteriores a la 4D v18 R6\\."
		},
		"WEB LEGACY GET SESSION EXPIRATION": {
			"Syntax": "**WEB LEGACY GET SESSION EXPIRATION** ( *idSesion* ; *fechaVenc* ; *horaVenc* )",
			"Params": [
				[
					"idSesion",
					"Text",
					"->",
					"UUID de sesión"
				],
				[
					"fechaVenc",
					"Date",
					"<-",
					"Fecha de vencimiento de la cookie"
				],
				[
					"horaVenc",
					"Time",
					"<-",
					"Fecha de vencimiento de la cookie"
				]
			],
			"Summary": "Este comando sólo puede utilizarse con **sesiones web heredadas**, disponibles en bases convertidas a partir de versiones anteriores a la 4D v18 R6\\."
		},
		"WEB SEND BLOB": {
			"Syntax": "**WEB SEND BLOB** ( *BLOB* ; *tipo* )",
			"Params": [
				[
					"Blob",
					"Blob",
					"->",
					"BLOB a enviar al navegador"
				],
				[
					"tipo",
					"Text",
					"->",
					"Tipo de datos del BLOB"
				]
			],
			"Summary": "El comando **WEB SEND BLOB** permite enviar el BLOB *blob* al navegador."
		},
		"WEB SEND FILE": {
			"Syntax": "**WEB SEND FILE** ( *archivohtml* )",
			"Params": [
				[
					"archivohtml",
					"Text",
					"->",
					"Ruta de acceso HTML al archivo HTML o cadena vacía para terminar SEND HTML FILE"
				]
			],
			"Summary": "El comando **WEB SEND FILE** envía al navegador web la página HTML o el archivo web almacenado en el documento cuya ruta se pasa en *archivohtml*."
		},
		"WEB SEND HTTP REDIRECT": {
			"Syntax": "**WEB SEND HTTP REDIRECT** ( *url* {; *} )",
			"Params": [
				[
					"url",
					"Text",
					"->",
					"Nuevo URL"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se especifica = el URL no está traducido, Si se omite = el URL está traducido"
				]
			],
			"Summary": "El comando **WEB SEND HTTP REDIRECT** permite transformar una URL en otra."
		},
		"WEB SEND RAW DATA": {
			"Syntax": "**WEB SEND RAW DATA** ( *datos* {; *} )",
			"Params": [
				[
					"datos",
					"Blob",
					"->",
					"Datos HTTP a enviar"
				],
				[
					"*",
					"Operador",
					"->",
					"Envío en trozos (chunked)"
				]
			],
			"Summary": "El comando **WEB SEND RAW DATA** permite al servidor web 4D enviar datos HTTP \"brutos\", los cuales pueden estar en trozos."
		},
		"WEB SEND TEXT": {
			"Syntax": "**WEB SEND TEXT** ( *textoHTML* {; *tipo*} )",
			"Params": [
				[
					"textoHTML",
					"Text",
					"->",
					"Campo o variable de tipo texto con formato HTML a enviar al navegador web"
				],
				[
					"tipo",
					"Text",
					"->",
					"True = Ir al modo contextual False o si se omite = Permanecer en el modo actual"
				]
			],
			"Summary": "El comando **WEB SEND TEXT** envia directamente los datos de texto con formato HTML."
		},
		"WEB SERVICE AUTHENTICATE": {
			"Syntax": "**WEB SERVICE AUTHENTICATE** ( *nombre* ; *contraseña* {; *metAutenticacion*} {; *} )",
			"Params": [
				[
					"nombre",
					"Text",
					"->",
					"Nombre del usuario"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Contraseña del usuario"
				],
				[
					"metAutenticacion",
					"Integer",
					"->",
					"Método de Autenticación 0 u omitido = no especificado, 1 = BASIC, 2 = DIGEST"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se pasa: autenticación por proxy"
				]
			],
			"Summary": "El comando **WEB SERVICE AUTHENTICATE**  permite utilizar los servicios web que necesitan de la autenticación de la aplicación cliente."
		},
		"WEB SERVICE CALL": {
			"Syntax": "**WEB SERVICE CALL** ( *urlAcceso* ; *soapAccion* ; *nomMetodo* ; *nomEspacio* {; *tipoCompuesto* {; *}} )",
			"Params": [
				[
					"urlAcceso",
					"Text",
					"->",
					"URL de acceso al servicio Web"
				],
				[
					"soapAccion",
					"Text",
					"->",
					"Contenido del campo SOAPAction"
				],
				[
					"nomMetodo",
					"Text",
					"->",
					"Nombre del método"
				],
				[
					"nomEspacio",
					"Text",
					"->",
					"Espacio del nombre (Namespace)"
				],
				[
					"tipoCompuesto",
					"Integer",
					"->",
					"Configuración de tipos compuestos (tipos simples si se omite)"
				],
				[
					"*",
					"Operador",
					"->",
					"No cerrar la conexión"
				]
			],
			"Summary": "El comando **WEB SERVICE CALL** se utiliza para llamar un servicio web enviando una petición HTTP."
		},
		"WEB SERVICE Get info": {
			"Syntax": "**WEB SERVICE Get info** ( *tipoInfo* ) : Text",
			"Params": [
				[
					"tipoInfo",
					"Integer",
					"->",
					"Información a recuperar"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Información sobre el último error SOAP"
				]
			],
			"Summary": "El comando **WEB SERVICE Get info** devuelve la información sobre todo error encontrado durante la ejecución de la última petición SOAP enviada a un servicio web remoto."
		},
		"WEB SERVICE GET RESULT": {
			"Syntax": "**WEB SERVICE GET RESULT** ( *valorDevuelto* {; *nombreDevuelto* {; *}} )",
			"Params": [
				[
					"valorDevuelto",
					"Variable",
					"<-",
					"Valor devuelto por el servicio web"
				],
				[
					"nombreDevuelto",
					"Text",
					"->",
					"Nombre del parámetro a recuperar"
				],
				[
					"*",
					"Operator",
					"->",
					"Liberar memoria"
				]
			],
			"Summary": "El comando **WEB SERVICE GET RESULT** permite recuperar un valor enviado por el servicio web como resultado del proceso realizado."
		},
		"WEB SERVICE SET OPTION": {
			"Syntax": "**WEB SERVICE SET OPTION** ( *opción* ; *valor* )",
			"Params": [
				[
					"opción",
					"Integer",
					"->",
					"Código de la opción a definir"
				],
				[
					"valor",
					"Integer, Text",
					"->",
					"Valor de la opción"
				]
			],
			"Summary": "Este comando está diseñado para los usuarios de servicios web."
		},
		"WEB SERVICE SET PARAMETER": {
			"Syntax": "**WEB SERVICE SET PARAMETER** ( *nombre* ; *valor* {; *tipoSOAP*} )",
			"Params": [
				[
					"nombre",
					"Text",
					"->",
					"Nombre del parámetro a incluir en la petición SOAP"
				],
				[
					"valor",
					"Variable",
					"->",
					"Variable 4D que contiene el valor del parámetro"
				],
				[
					"tipoSOAP",
					"Text",
					"->",
					"Tipo SOAP del parámetro"
				]
			],
			"Summary": "El comando **WEB SERVICE SET PARAMETER** permite la definición de un parámetro utilizado por una petición SOAP cliente."
		},
		"WEB SET HOME PAGE": {
			"Syntax": "**WEB SET HOME PAGE** ( *pagInicio* )",
			"Params": [
				[
					"pagInicio",
					"Text",
					"->",
					"Nombre de la página o ruta de acceso HTML a la página o \"\" para no enviar la página de inicio personalizada"
				]
			],
			"Summary": "El comando **WEB SET HOME PAGE** permite modificar la página de inicio personalizada para el proceso web actual."
		},
		"WEB SET HTTP HEADER": {
			"Syntax": "**WEB SET HTTP HEADER** ( encab|arrayCamp {; *arrayValores*} )",
			"Params": [
				[
					"encab&#124;arrayCamp",
					"Texto, Array texto",
					"->",
					"Campo o variable que contiene el encabezado HTTP de la petición o Array de campos del encabezado HTTP"
				],
				[
					"arrayValores",
					"Text array",
					"->",
					"Contenido de los campos del encabezado HTTP"
				]
			],
			"Summary": "El comando **WEB SET HTTP HEADER** permite definir los campos del encabezado HTTP de la respuesta enviada al navegador web por 4D."
		},
		"WEB SET OPTION": {
			"Syntax": "**WEB SET OPTION** ( *selector* ; *valor* )",
			"Params": [
				[
					"selector",
					"Integer",
					"->",
					"Código de la opción a modificar"
				],
				[
					"valor",
					"Integer, Text, Collection",
					"->",
					"Valor de la opción"
				]
			],
			"Summary": "El comando **WEB SET OPTION** modifica el valor actual de las diferentes opciones de funcionamiento del servidor web de 4D."
		},
		"WEB SET ROOT FOLDER": {
			"Syntax": "**WEB SET ROOT FOLDER** ( *carpetaRaiz* )",
			"Params": [
				[
					"carpetaRaiz",
					"Text",
					"->",
					"Ruta de acceso de la carpeta raíz del servidor Web"
				]
			],
			"Summary": "El comando **WEB SET ROOT FOLDER** se utiliza para modificar la carpeta raíz por defecto en la cual 4D busca los archivos HTML pedidos al servidor web."
		},
		"WEB START SERVER": {
			"Syntax": "**WEB START SERVER**",
			"Params": [],
			"Summary": "El comando WEB START SERVER inicia el servidor web de la aplicación 4D en la cual se ejecuta (4D o 4D Server)."
		},
		"WEB STOP SERVER": {
			"Syntax": "**WEB STOP SERVER**",
			"Params": [],
			"Summary": "El comando **WEB STOP SERVER** detiene el servidor web de la aplicación 4D en la cual ha sido ejecutado (4D o 4D Server)."
		},
		"WEB Validate digest": {
			"Syntax": "**WEB Validate digest** ( *nomUsuario* ; *contraseña* ) : Boolean",
			"Params": [
				[
					"nomUsuario",
					"Text",
					"->",
					"Nombre del usuario"
				],
				[
					"contraseña",
					"Text",
					"->",
					"Contraseña del usuario"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True=Autenticación correcta, False=Falla de la autenticación"
				]
			],
			"Summary": "El comando **WEB Validate digest** permite verificar la validez de la información de identificación (nombre y contraseña) suministrada por un usuario que se conecta al servidor web."
		},
		"Window kind": {
			"Syntax": "**Window kind** {( *ventana* )} : Integer",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana o Ventana del primer plano del proceso actual, si se  omite"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Tipo de ventana"
				]
			],
			"Summary": "El comando Window kind devuelve el tipo de ventana 4D cuyo número de referencia se pasa en *ventana*."
		},
		"WINDOW LIST": {
			"Syntax": "**WINDOW LIST** ( *ventanas* {; *} )",
			"Params": [
				[
					"ventanas",
					"Array",
					"<-",
					"Array de los números de referencia de las ventanas"
				],
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, tiene en cuenta las ventanas flotantes Si se omite, ignora las ventanas flotantes"
				]
			],
			"Summary": "El comando WINDOW LIST llena el array *ventanas* con los números de referencia de las ventanas abiertas actualmente en todos los procesos (procesos kernel o usuario)."
		},
		"Window process": {
			"Syntax": "**Window process** {( *ventana* )} : Integer",
			"Params": [
				[
					"ventana",
					"Integer",
					"->",
					"Número de referencia de la ventana"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de referencia del proceso"
				]
			],
			"Summary": "El comando Window process devuelve el número de proceso que ejecuta la ventana cuyo número de referencia se pasa en *ventana*."
		},
		"Windows Alt down": {
			"Syntax": "**Windows Alt down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Windows Alt Estado de la tecla Macintosh Opción"
				]
			],
			"Summary": "Windows Alt down devuelve TRUE si la tecla Alt Windows está presionada."
		},
		"Windows Ctrl down": {
			"Syntax": "**Windows Ctrl down**  : Boolean",
			"Params": [
				[
					"Resultado",
					"Boolean",
					"<-",
					"Estado de la tecla Ctrl Windows o Estado de la tecla Comando Macintosh"
				]
			],
			"Summary": "Windows Ctrl down devuelve TRUE si la tecla Ctrl Windows está presionada."
		},
		"WRITE PICTURE FILE": {
			"Syntax": "**WRITE PICTURE FILE** ( *nomArchivo* ; *imagen* {; *codec*} )",
			"Params": [
				[
					"nomArchivo",
					"Text",
					"->",
					"Nombre o ruta de acceso completo del archivo a escribir, o cadena vacía"
				],
				[
					"imagen",
					"Picture",
					"->",
					"Campo o variable imagen a escribir"
				],
				[
					"codec",
					"Text",
					"->",
					"Identificación de codec de imagen"
				]
			],
			"Summary": "El comando WRITE PICTURE FILE permite guardar en un archivo en el disco la imagen pasada en el parámetro *imagen,* en el formato definido por *codec*."
		},
		"XML DECODE": {
			"Syntax": "**XML DECODE** ( valor XML ; *objeto4D* )",
			"Params": [
				[
					"valor XML",
					"Texto",
					"->",
					"Valor de tipo texto proveniente de una estructura XML"
				],
				[
					"objeto4D",
					"Field, Variable",
					"<-",
					"Variable o campo 4D que recibe el valor XML convertido"
				]
			],
			"Summary": "El comando **XML DECODE** convierte un valor guardado como una cadena XML en un valor 4D."
		},
		"XML GET ERROR": {
			"Syntax": "**XML GET ERROR** ( *elementRef* ; *textoError* {; *linea* {; *columna*}} )",
			"Params": [
				[
					"elementRef",
					"Text",
					"->",
					"Referencia del elemento XML"
				],
				[
					"textoError",
					"Variable",
					"<-",
					"Texto del error"
				],
				[
					"linea",
					"Variable",
					"<-",
					"Número de línea"
				],
				[
					"columna",
					"Variable",
					"<-",
					"Número de columna"
				]
			],
			"Summary": "El comando XML GET ERROR devuelve en el parámetro *textoError* la descripción del error encontrado durante el proceso del elemento XML designado por el parámetro *refElement*."
		},
		"XML GET OPTIONS": {
			"Syntax": "**XML GET OPTIONS** ( refElement | document ; *selector* ; *valor* {; *selector2* ; *valor2* ; ... ; *selectorN* ; *valorN*} )",
			"Params": [
				[
					"refElement &#124; document",
					"Texto",
					"->",
					"Referencia del elemento XML raíz o referenica del documento abierto"
				],
				[
					"selector",
					"Integer",
					"->",
					"Opción a leer"
				],
				[
					"valor",
					"Integer",
					"<-",
					"Valor actual de la opción"
				]
			],
			"Summary": "El comando **XML GET OPTIONS** se utiliza para obtener el valor actual de uno o más de los parámetros XML definidos para la sesión actual y el usuario actual."
		},
		"XML SET OPTIONS": {
			"Syntax": "**XML SET OPTIONS** ( refElement | document ; *selector* ; *valor* {; *selector2* ; *valor2* ; ... ; *selectorN* ; *valorN*} )",
			"Params": [
				[
					"refElement &#124; document",
					"Texto",
					"->",
					"Referencia del elemento XML raíz o Referencia del documento abierto"
				],
				[
					"selector",
					"Integer",
					"->",
					"Opción a definir"
				],
				[
					"valor",
					"Integer",
					"->",
					"Valor de la opción"
				]
			],
			"Summary": "El comando XML SET OPTIONS se utiliza para modificar el valor de uno o más parámetros XML para estructura pasada en el primer parámetro."
		},
		"Year of": {
			"Syntax": "**Year of** ( *fecha* ) : Integer",
			"Params": [
				[
					"fecha",
					"Date",
					"->",
					"Fecha para la cual devolver el año"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número indicando el año de la fecha"
				]
			],
			"Summary": "El comando Year of devuelve el año de *fecha*."
		},
		"cs": {
			"Syntax": "**cs** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"Class store usuario para el proyecto o componente"
				]
			],
			"Summary": "devuelve el almacén de clases de usuario para el proyecto o componente actual"
		},
		"4D": {
			"Syntax": "**4D** : Object",
			"Params": [
				[
					"classStore",
					"Object",
					"<-",
					"Class store 4D"
				]
			],
			"Summary": "devuelve el almacén de clases para las clases 4D integradas"
		},
		"WP Add picture": {
			"Syntax": "**WP Add picture** ( *wpDoc* {; *picture*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *picturePath*} ) : Object<br/>**WP Add picture** ( *wpDoc* {; *pictureFileObj*} ) : Object",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"picture",
					"Picture",
					"->",
					"Imagen 4D"
				],
				[
					"picturePath",
					"Text",
					"->",
					"Ruta de la imagen"
				],
				[
					"pictureFileObj",
					"4D.File",
					"->",
					"Objeto 4D.File que representa un archivo imagen"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que hace referencia a la imagen"
				]
			]
		},
		"WP Add image": {
			"Summary": "ancla la imagen pasada como parámetro en una ubicación fija dentro del *wpDoc* especificado y devuelve su referencia."
		},
		"WP DELETE SECTION": {
			"Syntax": "**WP DELETE SECTION** ( *section* )<br/> **WP DELETE SECTION** ( *wpDoc* ; *indexNumber* {; *count*} )",
			"Params": [
				[
					"sección",
					"Object",
					"->",
					"Sección 4D Write Pro"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indexNumber",
					"Integer",
					"->",
					"Índice de la sección a eliminar"
				],
				[
					"count",
					"Integer",
					"->",
					"Número de secciones a eliminar"
				]
			],
			"Summary": "elimina el objeto *section* pasado, o elimina una o más secciones comenzando por *indexNumber* y dependiendo del *count* pasado"
		},
		"WP DELETE SUBSECTION": {
			"Syntax": "**WP DELETE SUBSECTION** ( *wpSection* ; *subSectionType* )<br/>**WP DELETE SUBSECTION** ( *subSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Sección 4D Write Pro"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Tipo de subsección (wk first page, wk left page, o wk right page)"
				],
				[
					"subSection",
					"Object",
					"->",
					"Subsección 4D Write Pro"
				]
			],
			"Summary": "elimina los elementos *subSectionType* de la sección *wpSection* 4D Write Pro, o directamente elimina la *subSection*"
		},
		"WP EXPORT DOCUMENT": {
			"Syntax": "**WP EXPORT DOCUMENT** ( *wpDoc* ; *filePath* {; *format* {; *option*}} )<br/>**WP EXPORT DOCUMENT** ( *wpDoc* ; *fileObj* {; *format* {; *option*}} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Variable 4D Write Pro"
				],
				[
					"filePath",
					"Text",
					"->",
					"Ruta del archivo exportado"
				],
				[
					"fileObj",
					"4D.File",
					"->",
					"Objeto del archivo a exportar"
				],
				[
					"format",
					"Integer",
					"->",
					"Formato de salida del documento (por ejemplo, .docx, .pdf, etc.)"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"Export options, which can vary depending on the format chosen."
				]
			],
			"Summary": "exporta el objeto *wpDoc* 4D Write Pro a un documento en disco de acuerdo con el parámetro *filePath* o *fileObj*, así como cualquier parámetro opcional."
		},
		"WP EXPORT VARIABLE": {
			"Syntax": "**WP EXPORT VARIABLE** ( *wpDoc* ; *destination* ; *format* {; *option*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Variable 4D Write Pro"
				],
				[
					"destination",
					"Text, Blob",
					"->",
					"Variable para recibir los contenidos exportados"
				],
				[
					"format",
					"Integer",
					"->",
					"Formato de salida variable"
				],
				[
					"option",
					"Object, Integer",
					"->",
					"Opciones de exportación"
				]
			],
			"Summary": "The **WP EXPORT VARIABLE** command exports the *wpDoc* 4D Write Pro object to the 4D *destination* variable in the specified *format*."
		},
		"WP Get attributes": {
			"Syntax": "**WP Get attributes** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP Get attributes** ( *targetObj* ; *attribColl* ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"attribName",
					"Text",
					"->",
					"Nombre del atributo a obtener"
				],
				[
					"attribValue",
					"Text, Number, Array, Collection, Picture, Date",
					"<-",
					"Valor actual del atributo para el objetivo"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"Colección de nombres de atributos a obtener"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nombres y valores de los atributos"
				]
			],
			"Summary": "devuelve el valor de cualquier atributo en un rango 4D Write Pro, encabezado, cuerpo, pie de página, tabla o documento."
		},
		"WP Import document": {
			"Syntax": "**WP Import document** ( *filePath* {; *option*} ) : Object<br/>**WP Import document** ( *fileObj* {; *option*} ) : Object",
			"Params": [
				[
					"filePath",
					"Text",
					"->",
					"Path to: a 4D Write document (.4w7 or .4wt) or a 4D Write Pro document (.4wp) or a .docx document (.docx)"
				],
				[
					"fileObj",
					"4D.File",
					"->",
					"Objeto del archivo a importar"
				],
				[
					"option",
					"Integer, Object",
					"->",
					"(Integer) Import option for HTML expressions, (object) Import options for .docx document"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto 4D Write Pro"
				]
			],
			"Summary": "convierte un documento 4D Write Pro / 4D Write (.4wp, .4w7 o .4wt) o documento MS Word (.docx) en un nuevo objeto 4D Write Pro."
		},
		"WP Insert break": {
			"Syntax": "**WP Insert break** ( *targetObj* ; *breakType* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"breakType",
					"Integer",
					"->",
					"Tipo de ruptura a insertar"
				],
				[
					"mode",
					"Integer",
					"->",
					"Modo de inserción"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Modo de actualización del rango"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de texto del caracter de ruptura"
				]
			],
			"Summary": "inserta una nueva ruptura de tipo *breakType* en el *targetObj* de acuerdo con los parámetros de inserción *mode*  y *rangeUpdate* especificados, y devuelve el rango de texto del caracter de ruptura"
		},
		"WP Insert document body": {
			"Syntax": "**WP Insert document body** ( *targetObj* ; *wpDoc* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"mode",
					"Integer",
					"->",
					"Modo de inserción"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Modo de actualización del rango"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Text range object referencing the inserted document body"
				]
			],
			"Summary": "inserta el cuerpo del documento *wpDoc* en el *targetObj* especificado según los parámetros *mode* y *rangeUpdate* de inserción pasados, y devuelve el rango del cuerpo del documento insertado."
		},
		"WP Insert formula": {
			"Syntax": "**WP Insert formula** ( *targetObj* ; *formula* ; *mode* {; *rangeUpdate*} ) : Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"formula",
					"Object",
					"->",
					"Objeto de fórmula U Objeto con propiedades de fórmula y de nombre"
				],
				[
					"mode",
					"Number",
					"->",
					"Modo de inserción"
				],
				[
					"rangeUpdate",
					"Number",
					"->",
					"Includes or excludes the inserted content within the range"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Text range object reprsenting the result of the formula"
				]
			],
			"Summary": "inserta una *formula* en *targetObj* de acuerdo con el *mode* de inserción especificado y devuelve el rango de texto resultante."
		},
		"WP Insert picture": {
			"Syntax": "**WP Insert picture** ( *targetObj* ; *picture* ; *mode* {; *rangeUpdate*} ): Object<br/>**WP Insert picture** ( *targetObj* ; *pictureFileObj*; *mode* {; *rangeUpdate*}): Object",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"picture",
					"Picture",
					"->",
					"Picture field or variable, or path to picture file on disk"
				],
				[
					"pictureFileObj",
					"4D.File",
					"->",
					"Un objeto File que representa un archivo imagen."
				],
				[
					"mode",
					"Integer",
					"->",
					"Modo de inserción"
				],
				[
					"rangeUpdate",
					"Integer",
					"->",
					"Modo de actualización del rango"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto que hace referencia a la imagen"
				]
			],
			"Summary": "inserta *picture* o una *imagenFileObj* en el *targetObj* especificado de acuerdo al *mode* de inserción pasado y los parámetros *rangeUpdate*, y devuelve una referencia al elemento de imagen."
		},
		"WP RESET ATTRIBUTES": {
			"Syntax": "**WP RESET ATTRIBUTES** ( *targetObj* ; *attribName* {; *attribName2* ; ... ; *attribNameN*} )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribName* }{; *attribName2* ; ... ; *attribNameN*} )<br/>**WP RESET ATTRIBUTES** ( *targetObj* ; *attribColl* )<br/> **WP RESET ATTRIBUTES** ( *sectionOrSubsection* {; *attribColl*})",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"sectionOrSubsection",
					"Object",
					"->",
					"Sección o subsección de un documento 4D Write Pro"
				],
				[
					"attribName",
					"Text",
					"->",
					"Nombre de atributo(s) a eliminar"
				],
				[
					"attribColl",
					"Collection",
					"->",
					"Colección de atributos a eliminar"
				]
			],
			"Summary": "le permite restablecer el valor de uno o más atributos en el rango, elemento o documento pasado como parámetro."
		},
		"WP SET ATTRIBUTES": {
			"Syntax": "**WP SET ATTRIBUTES** ( *targetObj* ; *attribName* ; *attribValue* {; *attribName2* ; *attribValue2* ; ... ; *attribNameN* ; *attribValueN*} )<br/>**WP SET ATTRIBUTES** ( *targetObj* ; *attribObj* )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"attribName",
					"Text",
					"->",
					"Nombre del atributo a definir"
				],
				[
					"attribValue",
					"Text, Number, Object, Collection, Picture, Date",
					"->",
					"Nuevo valor de atributo"
				],
				[
					"attribObj",
					"Object",
					"->",
					"Object containing attribute names and their corresponding values to set"
				]
			],
			"Summary": "le permite definir el valor de todo atributo en un rango, elemento, documento."
		},
		"WP Table append row": {
			"Syntax": "**WP Table append row** ( *tableRef* ; *value* {; *value2* ; ... ; *valueN*} )  : Object<br/>**WP Table append row** ( *tableRef* ; *valueColl* ) : Object",
			"Params": [
				[
					"tableRef",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"value",
					"Text, Number, Time, Date, Picture, Object",
					"->",
					"Valor(es) a definir en la fila"
				],
				[
					"valueColl",
					"Collection",
					"->",
					"Colección de valores a definir en la línea"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de rango de filas"
				]
			],
			"Summary": "appends one row to the *tableRef* table, fills it with *value*(s) or a *valueColl* collection, and returns the corresponding row range object."
		},
		"WP Bookmark range": {
			"Syntax": "**WP Bookmark range** ( *docWP* ; *nombk* ) -> Resultado",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"nombk",
					"Text",
					"->",
					"Nombre del marcador cuyo rango desea obtener"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango del marcador"
				]
			],
			"Summary": "El comando **WP Bookmark range** devuelve un objeto de tipo rango objRango que contiene el rango asociado al marcador con el nombre *nombk* en el documento *docWP*."
		},
		"WP COMPUTE FORMULAS": {
			"Syntax": "**WP COMPUTE FORMULAS** ( *objTarget* )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				]
			],
			"Summary": "El comando **WP COMPUTE FORMULAS** evalúa las fórmulas en *objTarget*."
		},
		"WP DELETE BOOKMARK": {
			"Syntax": "**WP DELETE BOOKMARK** ( *docWP* ; *nombk* )",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"nombk",
					"Text",
					"->",
					"Nombre del marcador a eliminar"
				]
			],
			"Summary": "El comando **WP DELETE BOOKMARK** elimina el marcador llamado *nombk* de *docWP*."
		},
		"WP DELETE FOOTER": {
			"Syntax": "**WP DELETE FOOTER** ( *wpSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Sección o subsección 4D Write Pro"
				]
			],
			"Summary": "El comando **WP DELETE FOOTER** elimina el elemento del pie de página asociado a la sección o subsección definida por el parámetro *wpSection*."
		},
		"WP DELETE HEADER": {
			"Syntax": "**WP DELETE HEADER**  ( *wpSection* )",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Sección o subsección 4D Write Pro"
				]
			],
			"Summary": "El comando **WP DELETE HEADER**  elimina el elemento del encabezado asociado a la sección o subsección definida por el parámetro *wpSection*."
		},
		"WP DELETE PICTURE": {
			"Syntax": "**WP DELETE PICTURE**  ( *objImagen* )",
			"Params": [
				[
					"objImagen",
					"Object",
					"->",
					"Objeto de la imagen (en línea o anclada)"
				]
			],
			"Summary": "El comando **WP DELETE PICTURE**  elimina la imagen definida por el parámetro *objImagen*."
		},
		"WP DELETE STYLE SHEET": {
			"Syntax": "**WP DELETE STYLE SHEET** ( *objetoHojaEstilo* ) | (*wpDoc* ; *nombreHojaEstilo* )",
			"Params": [
				[
					"objetoHojaEstilo",
					"Object",
					"->",
					"Objeto hoja de estilo"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"nombreHojaEstilo",
					"Text",
					"->",
					"Nombre de la hoja de estilo"
				]
			],
			"Summary": "El comando **WP DELETE STYLE SHEET** elimina el párrafo designado o la hoja de estilo de caracteres del documento actual."
		},
		"WP DELETE TEXT BOX": {
			"Syntax": "**WP DELETE TEXT BOX** ( *textBox* )",
			"Params": [
				[
					"textBox",
					"Object",
					"->",
					"Caja de texto"
				]
			],
			"Summary": "El comando **WP DELETE TEXT BOX** borra la caja de texto definida por el parámetro *textBox*."
		},
		"WP Find all": {
			"Syntax": "**WP Find all** ( *objTarget* ; *buscarValor* ; *condicionBusq* {; *valorReempl*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"buscarValor",
					"Text",
					"->",
					"Valor a buscar"
				],
				[
					"condicionBusq",
					"Integer",
					"->",
					"Regla(s) de búsqueda"
				],
				[
					"valorReempl",
					"Text",
					"->",
					"Cadena a reemplazar"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos de rango"
				]
			],
			"Summary": "El comando **WP Find all** busca en *objTarget* después del rango *buscarValor* basado en la *condicionBusq*."
		},
		"WP Find next": {
			"Syntax": "**WP Find next** ( *objTarget* ; *buscarDespues* ; *buscarValor* ; *condicionBusq* {; *valorReempl*} ) -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"buscarDespues",
					"Object",
					"->",
					"Rango después del cual comenzar a buscar"
				],
				[
					"buscarValor",
					"Text",
					"->",
					"Valor a buscar"
				],
				[
					"condicionBusq",
					"Integer",
					"->",
					"Regla(s) de búsqueda"
				],
				[
					"valorReempl",
					"Text",
					"->",
					"Cadena a reemplazar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango del valor encontrado/reemplazado"
				]
			],
			"Summary": "El comando **WP Find next** busca en *objTarget*, después del rango *buscarDespues*, el *buscarValor* basado en la *condicionBusq*."
		},
		"WP Find previous": {
			"Syntax": "**WP Find previous**  ( *objTarget* ; *buscarAntes* ; *buscarValor* ; *buscarCondicion* {; *remplazarValor*} ) -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"buscarAntes",
					"Object",
					"->",
					"Rango antes del cual comenzar la búsqueda"
				],
				[
					"buscarValor",
					"Text",
					"->",
					"Buscar valor"
				],
				[
					"buscarCondicion",
					"Integer",
					"->",
					"Regla(s) de búsqueda"
				],
				[
					"remplazarValor",
					"Text",
					"->",
					"Cadena de reemplazo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango del valor encontrado/reemplazado"
				]
			],
			"Summary": "El comando **WP Find previous**  busca el *objTarget*, antes del rango *buscarAntes*, para *buscarValor* basado en *condicionBusq*."
		},
		"WP FREEZE FORMULAS": {
			"Syntax": "**WP FREEZE FORMULAS** ( *objTarget* {; *recalcular*} )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"recalcular",
					"Integer",
					"->",
					"Opción para controlar el recálculo"
				]
			],
			"Summary": "El comando **WP FREEZE FORMULAS** \"congela\" el contenido de las fórmulas en *objTarget*."
		},
		"WP Get body": {
			"Syntax": "**WP Get body** ( *wpDoc* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Cuerpo 4D Write Pro"
				]
			],
			"Summary": "El comando **WP Get body** devuelve el elemento cuerpo del documento 4D Write Pro *wpDoc*."
		},
		"WP GET BOOKMARKS": {
			"Syntax": "**WP GET BOOKMARKS** ( *docWP* ; *arrayNomMarcadores* )",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"arrayNomMarcadores",
					"Array texto",
					"&#x1F858;",
					"Array de nombres de marcadores"
				]
			],
			"Summary": "El comando **WP GET BOOKMARKS** devuelve un array que contiene los nombres de todos los marcadores definidos en *docWP*."
		},
		"WP Get breaks": {
			"Syntax": "**WP Get breaks** ( *objRango* {; *tipoRuptura*} ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"tipoRuptura",
					"Integer",
					"->",
					"Tipo de rupturas a devolver"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de rangos"
				]
			],
			"Summary": "El comando **WP Get breaks** devuelve la colección de todas las roturas insertadas en *targetObj*."
		},
		"WP Get data context": {
			"Syntax": "**WP Get data context** ( *wpDoc* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de contexto de datos"
				]
			],
			"Summary": "El comando **WP Get data context** devuelve el contexto de datos del documento wpDoc."
		},
		"WP Get element by ID": {
			"Syntax": "**WP Get element by ID** ( *docWP* ; *ID* ) -> Resultado",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"ID",
					"Text",
					"->",
					"Identificador del elemento a recuperar"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Elemento 4D Write Pro"
				]
			],
			"Summary": "El comando **WP Get element by ID** devuelve un objeto que contiene el elemento de *wpDoc* pasado en el parámetro *ID*."
		},
		"WP Get elements": {
			"Syntax": "**WP Get elements** ( *objRango* {; *tipoElemento*} ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"tipoElemento",
					"Integer",
					"->",
					"Tipo de elemento deseado a recuperar"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección que contiene referencias de elemento"
				]
			],
			"Summary": "El comando **WP Get elements** devuelve una colección de objetos que contienen párrafos, imágenes, tablas y/o líneas."
		},
		"WP Get footer": {
			"Syntax": "**WP Get footer** ( *objRango* ) | (*wpDoc* ; *indiceSeccion* {; *tipoSubSeccion*} )  -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango 4D Write Pro"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indiceSeccion",
					"Integer",
					"->",
					"Índice de sección"
				],
				[
					"tipoSubSeccion",
					"Integer",
					"->",
					"Subtipo de la sección (wk primera página, wk página de la izquierda, o wk página de la derecha)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Pie 4D Write Pro"
				]
			],
			"Summary": "El comando **WP Get footer** devuelve el pie de página asociado al rango *objRango* o al *indiceSeccion* especificado del documento *wpDoc*."
		},
		"WP Get formulas": {
			"Syntax": "**WP Get formulas** ( *objTarget* ) -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de fórmulas"
				]
			],
			"Summary": "El comando **WP Get formulas** devuelve una colección de todas las fórmulas definidas en *objTarget*."
		},
		"WP Get frame": {
			"Syntax": "**WP Get frame** ( {* ;} *wpArea* {; *textBoxID*} ) -> Resultado",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, wpArea es un nombre de objeto de formulario (cadena). Si se omite, wpArea es un campo o variable objeto."
				],
				[
					"wpArea",
					"Text",
					"->",
					"Nombre de objeto de formulario (si se especifica *) o Variable o campo objeto 4D Write Pro (si se omite *)"
				],
				[
					"textBoxID",
					"Cadena",
					"&#x1F858;",
					"ID de la caja de texto (sólo se llena si una caja de texto tiene el foco)"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Marco en el que se encuentra el cursor"
				]
			],
			"Summary": "El comando **WP Get frame** devuelve el marco en el que se encuentra actualmente el cursor en el área 4D Write Pro *wpArea*."
		},
		"WP Get header": {
			"Syntax": "**WP Get header** ( *objRango* ) | (*wpDoc* ; *indiceSeccion* {; *tipoSubSeccion*} )  -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango 4D Write Pro"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indiceSeccion",
					"Integer",
					"->",
					"Índice de sección"
				],
				[
					"tipoSubSeccion",
					"Integer",
					"->",
					"Tipo de subsección (wk first page, wk left page o wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Encabezado 4D Write Pro"
				]
			],
			"Summary": "El comando **WP Get header** devuelve el encabezado asociado al rango *objRango* o al *indiceSeccion* del documento *wpDoc*."
		},
		"WP Get links": {
			"Syntax": "**WP Get links** ( *objRango* ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de enlaces"
				]
			],
			"Summary": "**WP Get links** devuelve la colección de todos los enlaces definidos en *objRango*."
		},
		"WP Get page count": {
			"Syntax": "**WP Get page count** ( *targetObj* ) -> Resultado",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"Resultado",
					"Integer",
					"<-",
					"Número de páginas en el documento"
				]
			],
			"Summary": "El comando **WP Get page count** devuelve el número total de páginas definido en el *objRango* pasado en parámetro."
		},
		"WP Get position": {
			"Syntax": "**WP Get position** ( *objRango* {; *layout*} ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"layout",
					"Integer",
					"->",
					"Diseño de documento 4D Write Pro utilizado para la evaluación: 0 (predeterminado)= diseño 4D Write Pro, 1=HTML WYSIWYG"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Información de la posición"
				]
			],
			"Summary": "El comando **WP Get position** devuelve un objeto que describe la posición actual de *objRango*."
		},
		"WP Get section": {
			"Syntax": "**WP Get section** ( *targetObj* ) | (*wpDoc* ; *indiceSeccion* ) -> Resultado",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento"
				],
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"indiceSeccion",
					"Integer",
					"->",
					"Índice de sección"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Sección 4D Write Pro"
				]
			],
			"Summary": "El comando **WP Get section** devuelve la primera sección intersectada por el rango *targetObj* o elemento, o al *indiceSeccion* especificado del documento *wpDoc*."
		},
		"WP Get sections": {
			"Syntax": "**WP Get sections** ( *targetObj* ) -> Resultado",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o documento 4D Write Pro"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de todas las secciones (principales) encontradas en targetObj"
				]
			],
			"Summary": "El comando **WP Get sections** devuelve una colección de todas las secciones definidas en el parámetro *targetObj*."
		},
		"WP Get style sheet": {
			"Syntax": "**WP Get style sheet** ( *wpDoc* ; *nomHojaEstilo* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"nomHojaEstilo",
					"Text",
					"->",
					"Nombre de hoja de estilo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de hoja de estilo"
				]
			],
			"Summary": "El comando **WP Get style sheet** devuelve el objeto de hoja de estilo designado por *nomHojaEstilo*."
		},
		"WP Get style sheets": {
			"Syntax": "**WP Get style sheets** ( *wpDoc* ; *tipo* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"tipo",
					"Integer",
					"->",
					"Tipo de hoja de estilo"
				],
				[
					"Resultado",
					"Collection",
					"<-",
					"Colección de objetos de hoja de estilo"
				]
			],
			"Summary": "El comando **WP Get style sheets** devuelve una colección de todos los objetos de hoja de estilo del *tipo* definido en *wpDoc*."
		},
		"WP Get subsection": {
			"Syntax": "**WP Get subsection** ( *objRango* ) | (*wpSection* ; *subSectionType* ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento"
				],
				[
					"wpSection",
					"Object",
					"->",
					"Sección 4D Write Pro"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Tipo de subsección (wk first page, wk left page, o wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Subsección"
				]
			],
			"Summary": "El comando **WP Get subsection** devuelve la primera subsección intersectada por el rango o elemento *objDestino*, o a la subsección especificada *tipoSubSeccion* de la sección *wpSection*."
		},
		"WP Get text": {
			"Syntax": "**WP Get text** ( *objRango* {; *expresiones*} ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"expresiones",
					"Number",
					"->",
					"Instrucciones para evaluar la expresión"
				],
				[
					"Resultado",
					"Text",
					"<-",
					"Texto de objRango"
				]
			],
			"Summary": "El comando **WP Get text** recupera el contenido de texto de un documento 4D Write Pro dentro del *objRango* especificado."
		},
		"WP Get view properties": {
			"Syntax": "**WP Get view properties** ( * ; *wpArea* ) -> Resultado",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, wpArea es un nombre de objeto de formulario (cadena). Si se omite, wpArea es un campo de objeto o variable (documento)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Nombre del objeto del formulario (si se especifica *) o variable o campo del objeto 4D Write Pro (si se omite *)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Propiedades de la vista actual"
				]
			],
			"Summary": "El comando **WP Get view properties** devuelve las propiedades de la vista actual para el área 4D Write Pro designada por *wpArea*."
		},
		"WP IMPORT STYLE SHEETS": {
			"Syntax": "**WP IMPORT STYLE SHEETS** ( *docTarget* ; *docSource* )",
			"Params": [
				[
					"docTarget",
					"Object",
					"->",
					"Documento 4D Write Pro para recibir hojas de estilo"
				],
				[
					"docSource",
					"Object",
					"->",
					"Documento 4D Write Pro para obtener hojas de estilo"
				]
			],
			"Summary": "El comando **WP IMPORT STYLE SHEETS** importa todas las hojas de estilo de *docSource* en *docTarget*."
		},
		"WP Insert table": {
			"Syntax": "**WP Insert table** ( *objRango* ; *modo* {; *actRango* {; *numCol* {; *numFilas*}}} ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango"
				],
				[
					"modo",
					"Integer",
					"->",
					"Modo de inserción"
				],
				[
					"actRango",
					"Integer",
					"->",
					"Modo de actualización de rango"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de columnas a definir en la tabla"
				],
				[
					"numFilas",
					"Integer",
					"->",
					"Número de filas a definir en la tabla"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de referencia de tabla"
				]
			],
			"Summary": "El comando **WP Insert table** inserta una nueva tabla en *objRango* de acuerdo con el *modo* de inserción especificado y devuelve el nuevo objeto tabla correspondiente."
		},
		"WP Is font style supported": {
			"Syntax": "**WP Is font style supported**  ( *rangoObj* ; *estiloFuenteWP* ) -> Resultado",
			"Params": [
				[
					"rangoObj",
					"Object",
					"->",
					"Rango o referencia del elemento"
				],
				[
					"estiloFuenteWP",
					"Integer",
					"->",
					"Constante de estilo de fuente"
				],
				[
					"Resultado",
					"Boolean",
					"<-",
					"True si alguna parte de rangoObj soporta estiloFuenteWP; False en caso contrario"
				]
			],
			"Summary": "El nuevo comando **WP Is font style supported**  devuelve True si el estilo *estiloFuenteWP* es soportado por alguna parte del texto en *rangoObj*."
		},
		"WP NEW BOOKMARK": {
			"Syntax": "**WP NEW BOOKMARK** ( *objRango* ; *nombk* )",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento"
				],
				[
					"nombk",
					"Text",
					"->",
					"Nombre de marcador a crear"
				]
			],
			"Summary": "El comando **WP NEW BOOKMARK** crea un nuevo marcador llamado *nombk* basado en el *objRango* 4D Write Pro del documento padre."
		},
		"WP New footer": {
			"Syntax": "**WP New footer** ( *wpSection* ) -> Resultado",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Sección o subsección 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Pie 4D Write Pro"
				]
			],
			"Summary": "El comando **WP New footer** crea y devuelve el pie de página asociado a la sección o subsección definida por el parámetro *wpSection*."
		},
		"WP New header": {
			"Syntax": "**WP New header** ( *wpSection* ) -> Resultado",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Sección o subsección 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Encabezado 4D Write Pro"
				]
			],
			"Summary": "El comando **WP New header** crea y devuelve el encabezado asociado a la sección o subsección definida por el parámetro *wpSection*."
		},
		"WP New style sheet": {
			"Syntax": "**WP New style sheet** ( *wpDoc* ; *tipoHojaEstilo* ; *nomHojaEstilo* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"tipoHojaEstilo",
					"Integer",
					"->",
					"Tipo de hoja de estilo"
				],
				[
					"nomHojaEstilo",
					"Text",
					"->",
					"Nombre de hoja de estilo"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto hoja de estilo"
				]
			],
			"Summary": "El comando **WP New style sheet** crea un nuevo objeto de hoja de estilo (vacío) para el *wpDoc* designado."
		},
		"WP New subsection": {
			"Syntax": "**WP New subsection** ( *wpSection* ; *subSectionType* ) -> Resultado",
			"Params": [
				[
					"wpSection",
					"Object",
					"->",
					"Sección 4D Write Pro"
				],
				[
					"subSectionType",
					"Integer",
					"->",
					"Tipo de subsección (wk first page, wk left page, o wk right page)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nueva subsección"
				]
			],
			"Summary": "El comando **WP New subsection** crea una nueva subsección del tipo *subSectionType* en la sección 4D Write Pro *wpSection*."
		},
		"WP New text box": {
			"Syntax": "**WP New text box** ( *wpDoc* ; *numPag* ) -> Resultado",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"numPag",
					"Number",
					"->",
					"Número de página donde anclar la caja de texto"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto de caja de texto"
				]
			],
			"Summary": "El comando **WP New text box** crea y devuelve un nuevo objeto caja de texto en la página *numPag* de *wpDoc*."
		},
		"WP New": {
			"Syntax": "**WP New** {( *fuente* {; *opcion*} )} -> Resultado",
			"Params": [
				[
					"fuente",
					"Text, Blob, Object",
					"->",
					"Cadena: Fuente HTML,<br/>BLOB: documento 4D Write Pro (.4wp) o Blob documento 4D Write(.4w7/.4wt)<br/>Objeto: rango o elemento o documento 4D Write Pro"
				],
				[
					"opcion",
					"Integer",
					"->",
					"Opción de importación para expresiones HTML"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto 4D Write Pro"
				]
			],
			"Summary": "El comando **WP New** crea y devuelve un objeto 4D Write Pro."
		},
		"WP Paragraph range": {
			"Syntax": "**WP Paragraph range** ( *rangoObj* ) -> Resultado",
			"Params": [
				[
					"rangoObj",
					"Object",
					"->",
					"Rango o elemento"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de objetos que se refiere sólo a los párrafos"
				]
			],
			"Summary": "El comando **WP Paragraph range** devuelve un rango de objetos específico que se refiere únicamente a los párrafos contenidos en *rangoObj* que se pasó como parámetro."
		},
		"WP Picture range": {
			"Syntax": "**WP Picture range** ( *rangoObj* ) -> Resultado",
			"Params": [
				[
					"rangoObj",
					"Object",
					"->",
					"Rango de objetos del cual obtener imágenes"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de objetos que contiene imágenes únicamente"
				]
			],
			"Summary": "El comando **WP Picture range** devuelve un objeto rango específico que referencia únicamente las imágenes contenidas en *rangoObj* que haya pasado en parámetro."
		},
		"WP PRINT": {
			"Syntax": "**WP PRINT** ( *wpDoc* {; *opcImpr*} )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"opcImpr",
					"Integer",
					"->",
					"Opciones de impresión para el documento 4D Write Pro"
				]
			],
			"Summary": "El comando **WP PRINT** lanza una tarea de impresión para el documento 4D Write Pro especificado en *wpDoc*, o agrega el documento al trabajo de impresión actual si se llama entre los comandos OPEN PRINTING JOB y CLOSE PRINTING JOB."
		},
		"WP SELECT": {
			"Syntax": "**WP SELECT** ( {{* ;} *areaWP*;} {*targetObj*} {; *rangoInicio* ; *rangoFinal*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, areaWP es un nombre de objeto de formulario (cadena). Si se omite, areaWP es un campo o una variable objeto (documento)."
				],
				[
					"areaWP",
					"Text, Object",
					"->",
					"Nombre del objeto de formulario (si se especifica *) o campo o variable objeto 4D Write Pro (si se omite *)"
				],
				[
					"targetObj",
					"Object",
					"->",
					"Nombre del objeto formulario (si * se especifica) o variable objeto 4D Write Pro o campo (si * se omite)"
				],
				[
					"rangoInicio",
					"Integer",
					"->",
					"Posición inicial del rango texto"
				],
				[
					"rangoFinal",
					"Integer",
					"->",
					"Posición final del rango texto"
				]
			],
			"Summary": "El comando **WP SELECT** crea una nueva selección de texto en el área 4D Write Pro *wpArea*, basado en el *rangoObj* o un nuevo rango definido por *rangoInicio* y *rangoFinal*."
		},
		"WP Selection range": {
			"Syntax": "**WP Selection range** ( {* ;} *wpArea* ) -> Resultado",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, wpArea es un nombre de objeto de formulario(cadena). Si se omite, wpArea es un campo de objeto o variable."
				],
				[
					"wpArea",
					"Text",
					"->",
					"Nombre del objeto de formulario (si * se especifica) o variable de objeto 4D Write Pro o campo (si se omite *)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de objeto"
				]
			],
			"Summary": "El comando **WP Selection range** devuelve un nuevo objeto de rango de texto o un objeto imagen basado en el texto seleccionado actualmente en el área *wpArea* de 4D Write Pro."
		},
		"WP SET DATA CONTEXT": {
			"Syntax": "**WP SET DATA CONTEXT** ( *wpDoc* ; *datosContext* )",
			"Params": [
				[
					"wpDoc",
					"Object",
					"->",
					"Documento 4D Write Pro"
				],
				[
					"datosContext",
					"Object",
					"->",
					"Datos para poner en el contexto"
				]
			],
			"Summary": "El comando **WP SET DATA CONTEXT** define el objeto *datosContext* como contexto de datos del documento 4D Write Pro *wpDoc*."
		},
		"WP SET FRAME": {
			"Syntax": "**WP SET FRAME** ( {* ;} *areaWP* ; *selectorMarco* {; *textBoxID*} )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, areaWP es un nombre de objeto de formulario (cadena). Si se omite, areaWP es un campo o una variable objeto."
				],
				[
					"areaWP",
					"Text",
					"->",
					"Nombre de objeto de formulario (si se especifica *) o campo o variable objeto 4D Write Pro (si se omite *)"
				],
				[
					"selectorMarco",
					"Integer",
					"->",
					"Marco donde debe colocarse el cursor"
				],
				[
					"textBoxID",
					"Text",
					"->",
					"Id de la caja de texto donde se debe colocar el cursor"
				]
			],
			"Summary": "El comando **WP SET FRAME** coloca el cursor en el marco designado por *selectorMarco* y opcionalmente, *textBoxID*, en el área *areaWP* 4D Write Pro."
		},
		"WP SET LINK": {
			"Syntax": "**WP SET LINK** ( *objRango* ; *objEnlace* )",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"objEnlace",
					"Object",
					"->",
					"Valor enlace"
				]
			],
			"Summary": "**WP SET LINK** aplica una referencia de hipervínculo al *objRango*."
		},
		"WP SET TEXT": {
			"Syntax": "**WP SET TEXT** ( *objRango* ; *nuevoTexto* ; *posicionTexto* {; *alcanceRango*} )",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Objeto de rango"
				],
				[
					"nuevoText",
					"Text",
					"->",
					"Texto a insertar"
				],
				[
					"posicionTexto",
					"Number",
					"->",
					"Posición de inserción (reemplazar, antes, después)"
				],
				[
					"alcanceRango",
					"Number",
					"->",
					"Incluye o excluye el contenido insertado dentro del rango"
				]
			],
			"Summary": "El comando **WP SET TEXT** inserta el texto pasado en el parámetro *nuevoTexto* como texto sin formato en *objRango* en la posición específica designada por el parámetro *posicionTexto*."
		},
		"WP SET VIEW PROPERTIES": {
			"Syntax": "**WP SET VIEW PROPERTIES** ( {* ;} *wpArea* ; *wpViewProps* )",
			"Params": [
				[
					"*",
					"Operador",
					"->",
					"Si se especifica, wpArea es un nombre de objeto de formulario (cadena). Si se omite, wpArea es un campo de objeto o variable (documento)"
				],
				[
					"wpArea",
					"Text, Object",
					"->",
					"Nombre del objeto del formulario (si se especifica *) o variable o campo del objeto 4D Write Pro (si se omite *)"
				],
				[
					"wpViewProps",
					"Object",
					"->",
					"Propiedades vista a modificar"
				]
			],
			"Summary": "El comando **WP SET VIEW PROPERTIES** le permite configurar dinámicamente una o más propiedades de vista del área 4D Write Pro *wpArea*."
		},
		"WP TABLE DELETE COLUMNS": {
			"Syntax": "**WP TABLE DELETE COLUMNS** ( *objTarget* ) | ( *refTabla* ; *numCol* {; *numColumns*} )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"Número de columnas a eliminar (valor por defecto = 1)"
				]
			],
			"Summary": "El comando **WP TABLE DELETE COLUMNS** elimina una o varias columnas de una tabla 4D Write."
		},
		"WP TABLE DELETE ROWS": {
			"Syntax": "**WP TABLE DELETE ROWS** ( *objTarget* ) | ( *refTabla* ; *numLinea* {; *nbLineas*} )",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"numLinea",
					"Integer",
					"->",
					"Número de índice de la línea"
				],
				[
					"nbLineas",
					"Integer",
					"->",
					"Número de líneas a eliminar (valor por defecto = 1)"
				]
			],
			"Summary": "El comando **WP TABLE DELETE ROWS** elimina una o varias líneas de una tabla 4D Write Pro."
		},
		"WP Table get cells": {
			"Syntax": "**WP Table get cells** ( *objTarget* ) | ( *refTabla* ; *colIni* ; *filaIni* {; *NumCol*{; *numFilas*}} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"colIni",
					"Integer",
					"->",
					"Posición de la primera columna de celda"
				],
				[
					"filaIni",
					"Integer",
					"->",
					"Posición de la primera fila de la columna"
				],
				[
					"NumCol",
					"Integer",
					"->",
					"Número de columnas a obtener"
				],
				[
					"numFilas",
					"Integer",
					"->",
					"Número de filas a obtener"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nuevo rango que contiene celdas"
				]
			],
			"Summary": "El comando **WP Table get cells** devuelve un nuevo objeto de rango de celdas que contiene la selección de celdas en *objTarget* o *refTabla* (definida por *colIni*, *filaIni*, *numCol* y *numFilas*)."
		},
		"WP Table get columns": {
			"Syntax": "**WP Table get columns**  ( *objTarget* ) | ( *refTabla* ; *colIni* {; *numCol*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"colIni",
					"Integer",
					"->",
					"Posición de la primera columna"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de columnas a obtener"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nuevo rango de tabla que contiene columnas seleccionadas"
				]
			],
			"Summary": "El comando **WP Table get columns**  devuelve un nuevo objeto de rango de celdas que contiene la selección de columnas *objTarget* o *refTabla* (definida por *colIni* y *numCol*)."
		},
		"WP Table get rows": {
			"Syntax": "**WP Table get rows** ( *objTarget* ) | ( *refTabla* ; *lineaIni* {; *numLíneas*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"lineaIni",
					"Integer, Text",
					"->",
					"Posición de la primera línea"
				],
				[
					"numLíneas",
					"Integer",
					"->",
					"Número de líneas a obtener"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Nuevo rango de líneas que contiene las filas seleccionadas"
				]
			],
			"Summary": "El comando **WP Table get rows** \\[#descv\\]devuelve un nuevo objeto de rango de líneas que contiene una selección de las líneas de *objTarget* o *refTabla*."
		},
		"WP Table insert columns": {
			"Syntax": "**WP Table insert columns** ( objRango | {*refTabla* ; *numCol*} {; *numColumns*} )  -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"numCol",
					"Integer",
					"->",
					"Número de columna"
				],
				[
					"numColumns",
					"Integer",
					"->",
					"Número de columnas a insertar (valor predeterminado = 1)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de columnas de la tabla"
				]
			],
			"Summary": "El comando **WP Table insert columns** inserta una o varias columnas en una tabla 4D Write Pro."
		},
		"WP Table insert rows": {
			"Syntax": "**WP Table insert rows** ( objTarget | {*refTabla* ; *numLinea*} {; *numLineas*} )  -> Resultado",
			"Params": [
				[
					"objTarget",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"refTabla",
					"Object",
					"->",
					"Referencia de tabla"
				],
				[
					"numLinea",
					"Integer",
					"->",
					"Número de índice de línea"
				],
				[
					"numLineas",
					"Integer",
					"->",
					"Número de líneas a insertar (valor po defecto = 1)"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de líneas de tabla"
				]
			],
			"Summary": "El comando **WP Table insert rows** inserta una o varias líneas en una tabla 4D Write Pro."
		},
		"WP TABLE MERGE CELLS": {
			"Syntax": "**WP TABLE MERGE CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Referencia de la tabla"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"Posición de la primera columna de celdas"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Posición de la primera línea de columna"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"Número de columnas a fusionar"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"Número de líneas a fusionar"
				]
			],
			"Summary": "El comando **WP TABLE MERGE CELLS** fusiona la selección de celdas en el *targetObj* o *tableRef* (definido por *startColumn*, *startRow*, *columnCount* y *rowCount*)."
		},
		"WP Table range": {
			"Syntax": "**WP Table range** ( *objRango* ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o referencia del elemento o documento 4D Write Pro"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Objeto rango que contiene tablas únicamente"
				]
			],
			"Summary": "**WP Table range** fue nombrado **WP Create table range** en versiones anteriores de 4D Write Pro."
		},
		"WP TABLE SPLIT CELLS": {
			"Syntax": "**WP TABLE SPLIT CELLS** ( *targetObj* ) | ( *tableRef* ; *startColumn* ; *startRow* {; *columnCount*{; *rowCount*}} )",
			"Params": [
				[
					"targetObj",
					"Object",
					"->",
					"Rango o elemento o documento 4D Write Pro"
				],
				[
					"tableRef",
					"Object",
					"->",
					"Referencia de la tabla"
				],
				[
					"startColumn",
					"Integer",
					"->",
					"Posición de la primera columna de celdas"
				],
				[
					"startRow",
					"Integer",
					"->",
					"Posición de la primera línea de columna"
				],
				[
					"columnCount",
					"Integer",
					"->",
					"Número de columnas a dividir"
				],
				[
					"rowCount",
					"Integer",
					"->",
					"Número de líneas a dividir"
				]
			],
			"Summary": "El comando **WP TABLE SPLIT CELLS** divide la selección de intersección de celdas en el *targetObj* o *tableRef* (definido por *startColumn*, *startRow*, *columnCount* y *rowCount*)."
		},
		"WP Text range": {
			"Syntax": "**WP Text range** ( *objRango* ; *rangoInicio* ; *rangoFin* ) -> Resultado",
			"Params": [
				[
					"objRango",
					"Object",
					"->",
					"Rango o referencia del elemento o documento 4D Write Pro"
				],
				[
					"rangoInicio",
					"Integer",
					"->",
					"Punto inicial del rango de texto"
				],
				[
					"rangoFin",
					"Integer",
					"->",
					"Punto final del rango de texto"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Rango de objeto"
				]
			],
			"Summary": "El comando **WP Text range** devuelve un nuevo de rango de selección (objRange) que contiene los caracteres ubicados entre *rangoInicio* y *rangoFin* en el área 4D Write Pro *wpArea*."
		},
		"WP USE PAGE SETUP": {
			"Syntax": "**WP USE PAGE SETUP** ( *docWP* )",
			"Params": [
				[
					"docWP",
					"Object",
					"->",
					"Documento 4D Write Pro"
				]
			],
			"Summary": "El comando **WP USE PAGE SETUP** modifica las opciones de impresión de la página actual, basado en los atributos del documento 4D Write Pro para el tamaño de página y la orientación."
		}
	},
	"WebFormItem": {
		"hide()": {
			"Syntax": "**.hide**()",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "oculta el componente"
		},
		"show()": {
			"Syntax": "**.show**()",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "hace visible el componente"
		},
		"addCSSClass()": {
			"Syntax": "**.addCSSClass**(*className* : string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"Nombre de la clase CSS a añadir al componente"
				]
			],
			"Summary": "añade la clase especificada en *className* al componente"
		},
		"removeCSSClass()": {
			"Syntax": "**.removeCSSClass**(*className*: string)",
			"Params": [
				[
					"className",
					"string",
					"->",
					"Nombre de la clase CSS a eliminar del componente"
				]
			],
			"Summary": "elimina la clase especificada en *className* del componente"
		}
	},
	"WebServer": {
		"accessKeyDefined": {
			"Syntax": "**.accessKeyDefined** : Boolean",
			"Summary": "true si se define una llave de acceso en la configuración del servidor web"
		},
		"certificateFolder": {
			"Syntax": "**.certificateFolder** : Text",
			"Summary": "donde se encuentran los archivos de los certificados"
		},
		"characterSet": {
			"Syntax": "**.characterSet** : Number<br/>**.characterSet** : Text",
			"Summary": "conjunto de caracteres que el Servidor Web 4D debe utilizar para comunicarse con los navegadores que se conectan a la aplicación"
		},
		"cipherSuite": {
			"Syntax": "**.cipherSuite** : Text",
			"Summary": "utilizada para el protocolo seguro"
		},
		"CORSEnabled": {
			"Syntax": "**.CORSEnabled** : Boolean",
			"Summary": "CORS (*Cross-origin resource sharing*) para el servidor web"
		},
		"CORSSettings": {
			"Syntax": "**.CORSSettings** : Collection",
			"Summary": "lista de hosts y de métodos autorizados para el servicio CORS"
		},
		"debugLog": {
			"Syntax": "**.debugLog** : Integer",
			"Summary": "estado del archivo de registro de peticiones HTTP"
		},
		"defaultHomepage": {
			"Syntax": "**.defaultHomepage** : Text",
			"Summary": "nombre de la página de inicio por defecto"
		},
		"HSTSEnabled": {
			"Syntax": "**.HSTSEnabled** : Boolean",
			"Summary": "HTTP Strict Transport Security (HSTS)"
		},
		"HSTSMaxAge": {
			"Syntax": "**.HSTSMaxAge** : Integer",
			"Summary": "máximo de tiempo (en segundos) que HSTS está activo para cada nueva conexión cliente"
		},
		"HTTPCompressionLevel": {
			"Syntax": "**.HTTPCompressionLevel** : Integer",
			"Summary": "nivel de compresión para todos los intercambios HTTP comprimidos para el servidor HTTP 4D (peticiones del cliente o respuestas del servidor)"
		},
		"HTTPCompressionThreshold": {
			"Syntax": "**.HTTPCompressionThreshold** : Integer",
			"Summary": "umbral de tamaño (bytes) para las solicitudes por debajo del cual los intercambios no deben ser comprimidos"
		},
		"HTTPEnabled": {
			"Syntax": "**.HTTPEnabled** : Boolean",
			"Summary": "HTTP"
		},
		"HTTPPort": {
			"Syntax": "**.HTTPPort** : Integer",
			"Summary": "número de puerto IP de escucha para HTTP"
		},
		"HTTPTrace": {
			"Syntax": "**.HTTPTrace** : Boolean",
			"Summary": "activación de `HTTP TRACE`"
		},
		"HTTPSEnabled": {
			"Syntax": "**.HTTPSEnabled** : Boolean",
			"Summary": "estado del protocolo HTTPS"
		},
		"HTTPSPort": {
			"Syntax": "**.HTTPSPort** : Integer",
			"Summary": "número de puerto IP de escucha para HTTPS"
		},
		"inactiveProcessTimeout": {
			"Syntax": "**.inactiveProcessTimeout** : Integer",
			"Summary": "duración (en minutos) de los procesos de sesión heredados inactivos"
		},
		"inactiveSessionTimeout": {
			"Syntax": "**.inactiveSessionTimeout** : Integer",
			"Summary": "duración (en minutos) de las sesiones heredadas inactivas (duración establecida en la cookie)"
		},
		"IPAddressToListen": {
			"Syntax": "**.IPAddressToListen** : Text",
			"Summary": "dirección IP en la que el servidor web 4D recibirá las peticiones HTTP"
		},
		"isRunning": {
			"Syntax": "**.isRunning** : Boolean",
			"Summary": "estado de ejecución del servidor web"
		},
		"keepSession": {
			"Syntax": "**.keepSession** : Boolean",
			"Summary": "`True` si las sesiones heredadas están activadas en el servidor web, `False` en caso contrario"
		},
		"logRecording": {
			"Syntax": "**.logRecording** : Integer",
			"Summary": "log (logweb.txt)"
		},
		"maxConcurrentProcesses": {
			"Syntax": "**.maxConcurrentProcesses** : Integer",
			"Summary": "número máximo de procesos web concurrentes que soporta el servidor web"
		},
		"maxRequestSize": {
			"Syntax": "**.maxRequestSize** : Integer",
			"Summary": "tamaño máximo (en bytes) de las peticiones HTTP entrantes (POST) que el servidor web puede procesar"
		},
		"maxSessions": {
			"Syntax": "**.maxSessions** : Integer",
			"Summary": "número máximo de sesiones simultáneas legacy"
		},
		"minTLSVersion": {
			"Syntax": "**.minTLSVersion** : Integer",
			"Summary": "versión TLS mínima aceptada para las conexiones"
		},
		"name": {
			"Syntax": "**.name** : Text",
			"Summary": "name of the web server application"
		},
		"openSSLVersion": {
			"Syntax": "**.openSSLVersion** : Text",
			"Summary": "versión de la librería OpenSSL utilizada"
		},
		"perfectForwardSecrecy": {
			"Syntax": "**.perfectForwardSecrecy** : Boolean",
			"Summary": "PFS en el servidor"
		},
		"rootFolder": {
			"Syntax": "**.rootFolder** : Text",
			"Summary": "ruta de la carpeta raíz del servidor web"
		},
		"scalableSession": {
			"Syntax": "**.scalableSession** : Boolean",
			"Summary": "`True` si se utilizan sesiones escalables en el servidor web, y `False` en caso contrario"
		},
		"sessionCookieDomain": {
			"Syntax": "**.sessionCookieDomain** : Text",
			"Summary": "\"domain\" de la cookie de sesión"
		},
		"sessionCookieName": {
			"Syntax": "**.sessionCookieName** : Text",
			"Summary": "nombre de la cookie utilizada para almacenar el ID de sesión"
		},
		"sessionCookiePath": {
			"Syntax": "**.sessionCookiePath** : Text",
			"Summary": "\"path\" de la cookie de sesión"
		},
		"sessionCookieSameSite": {
			"Syntax": "**.sessionCookieSameSite** : Text",
			"Summary": "\"SameSite\""
		},
		"sessionIPAddressValidation": {
			"Syntax": "**.sessionIPAddressValidation** : Boolean",
			"Summary": "validación de la dirección IP para las cookies de sesión"
		},
		"start()": {
			"Syntax": "**.start**() : Object<br/>**.start**( *settings* : Object ) : Object",
			"Params": [
				[
					"settings",
					"Object",
					"->",
					"Parámetros del servidor web a definir al inicio"
				],
				[
					"Resultado",
					"Object",
					"<-",
					"Estado del inicio del servidor web"
				]
			],
			"Summary": "inicia el servidor web en el que se aplica"
		},
		"stop()": {
			"Syntax": "**.stop()**",
			"Params": [
				[
					"",
					"",
					"",
					"No requiere ningún parámetro"
				]
			],
			"Summary": "detiene el servidor web sobre el que se aplica"
		}
	},
	"WebSocket": {
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "el tipo de contenido del cuerpo de la respuesta"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "el accessor que obtiene el objeto `connectionHandler` utilizado para iniciar la conexión"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "el identificador único de la conexión"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text, Blob, Object",
					"->",
					"Mensaje a enviar"
				]
			],
			"Summary": "envía *message* al servidor WebSocket en el tipo de datos definido (Texto, Blob u Objeto)"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "el estado actual de la conexión (puede ser \"Connecting\", \"Closing\", \"Closed\", o \"Connected\")"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer { ; *reason* : Text } } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Código de estado que explica por qué se cierra la conexión"
				],
				[
					"reason",
					"Text",
					"->",
					"La razón por la que se cierra la conexión"
				]
			],
			"Summary": "cierra la conexión WebSocket, junto con los parámetros opcionales *code* y *reason*"
		},
		"url": {
			"Syntax": "**.url** : Text",
			"Summary": "la URL a la que se ha conectado el WebSocket"
		}
	},
	"WebSocketConnection": {
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "el accessor que recupera el objeto `connectionHandler` utilizado para iniciar la conexión"
		},
		"id": {
			"Syntax": "**.id** : Integer",
			"Summary": "el identificador único de la conexión"
		},
		"send()": {
			"Syntax": "**.send**( *message* : Text )<br/>**.send**( *message* : Blob )<br/>**.send**( *message* : Object )",
			"Params": [
				[
					"message",
					"Text / Blob / Object",
					"->",
					"El mensaje a enviar"
				]
			],
			"Summary": "envía un *message* al cliente"
		},
		"status": {
			"Syntax": "**.status** : Text",
			"Summary": "el estado de la conexión (puede ser \"Closing\", \"Closed\" o  \"Connected\")"
		},
		"terminate()": {
			"Syntax": "**.terminate**( { *code* : Integer ; *message* : Text } )",
			"Params": [
				[
					"code",
					"Integer",
					"->",
					"Código de error enviado al cliente (debe ser > 3000, de lo contrario el mensaje no se envía)"
				],
				[
					"message",
					"Text",
					"->",
					"Mensaje de error enviado al cliente"
				]
			],
			"Summary": "fuerza el cierre de la conexión"
		},
		"wss": {
			"Syntax": "**.wss** : 4D.WebSocketServer",
			"Summary": "el objeto padre WebSocketServer\\` de la conexión"
		}
	},
	"WebSocketServer": {
		"connections": {
			"Syntax": "**.connections** : Collection",
			"Summary": "todas las conexiones actuales gestionadas por el servidor WebSocket"
		},
		"dataType": {
			"Syntax": "**.dataType** : Text",
			"Summary": "el tipo de los datos recibidos o enviados"
		},
		"handler": {
			"Syntax": "**.handler** : Object",
			"Summary": "el accessor que obtiene el objeto `WSSHandler` utilizado para iniciar el servidor WebSocket"
		},
		"path": {
			"Syntax": "**.path** : Text",
			"Summary": "el patrón de la ruta para acceder al servidor WebSocket"
		},
		"terminate()": {
			"Syntax": "**.terminate**()<br/>**.terminate**( *timeout* : Integer )",
			"Params": [
				[
					"timeout",
					"Integer",
					"->",
					"Tiempo de espera en segundos antes de finalizar el servidor WebSocket"
				]
			],
			"Summary": "cierra el servidor WebSocket"
		},
		"terminated": {
			"Syntax": "**.terminated** : Boolean",
			"Summary": "True si el servidor WebSocket está cerrado"
		}
	},
	"ZipArchive": {
		"root": {
			"Syntax": "**.root** : 4D.ZipFolder",
			"Summary": "una carpeta virtual que permite acceder al contenido del archivo ZIP"
		}
	},
	"ZipFile": {
		"_inheritedFrom_": "Document"
	},
	"ZipFolder": {
		"_inheritedFrom_": "Directory"
	}
}